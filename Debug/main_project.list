
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001754c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  08017690  08017690  00018690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018668  08018668  00019668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018670  08018670  00019670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018674  08018674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f0  20000008  08018678  0001a008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200000f8  08018768  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000878  2000010c  08018779  0001a10c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000984  08018779  0001a984  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  0001bb5a  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  0001c000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  0001c000  2**2
                  ALLOC
 13 .MB_MEM2      00000a76  200300e4  08018779  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .debug_info   00051227  00000000  00000000  0001bb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008290  00000000  00000000  0006cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000042b4  00000000  00000000  00075048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002795  00000000  00000000  000792fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f794  00000000  00000000  0007ba91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046b90  00000000  00000000  000ab225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d8b9  00000000  00000000  000f1db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00008452  00000000  00000000  0020f66e  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  00000360  00000000  00000000  00217ac0  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000040  00000000  00000000  00217e20  2**2
                  CONTENTS, READONLY
 24 .debug_frame  0001016c  00000000  00000000  00217e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000063  00000000  00000000  00227fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00003203  00000000  00000000  0022802f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 000008b5  00000000  00000000  0022b232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00007ced  00000000  00000000  0022bae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 000019d7  00000000  00000000  002337d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  002351ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000010c 	.word	0x2000010c
 800015c:	00000000 	.word	0x00000000
 8000160:	08017674 	.word	0x08017674

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000110 	.word	0x20000110
 800017c:	08017674 	.word	0x08017674

08000180 <ZbZclAttrAddSorted>:
 8000180:	b430      	push	{r4, r5}
 8000182:	0002      	movs	r2, r0
 8000184:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000186:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 800018a:	42a0      	cmp	r0, r4
 800018c:	d001      	beq.n	8000192 <??ZbZclAttrAddSorted_0>
 800018e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000190:	e000      	b.n	8000194 <??ZbZclAttrAddSorted_1>

08000192 <??ZbZclAttrAddSorted_0>:
 8000192:	2000      	movs	r0, #0

08000194 <??ZbZclAttrAddSorted_1>:
 8000194:	2800      	cmp	r0, #0
 8000196:	d017      	beq.n	80001c8 <??ZbZclAttrAddSorted_2>
 8000198:	0003      	movs	r3, r0
 800019a:	688c      	ldr	r4, [r1, #8]
 800019c:	8824      	ldrh	r4, [r4, #0]
 800019e:	689d      	ldr	r5, [r3, #8]
 80001a0:	882d      	ldrh	r5, [r5, #0]
 80001a2:	42ac      	cmp	r4, r5
 80001a4:	d207      	bcs.n	80001b6 <??ZbZclAttrAddSorted_3>
 80001a6:	600b      	str	r3, [r1, #0]
 80001a8:	685c      	ldr	r4, [r3, #4]
 80001aa:	604c      	str	r4, [r1, #4]
 80001ac:	680c      	ldr	r4, [r1, #0]
 80001ae:	6061      	str	r1, [r4, #4]
 80001b0:	684c      	ldr	r4, [r1, #4]
 80001b2:	6021      	str	r1, [r4, #0]
 80001b4:	e011      	b.n	80001da <??ZbZclAttrAddSorted_4>

080001b6 <??ZbZclAttrAddSorted_3>:
 80001b6:	6804      	ldr	r4, [r0, #0]
 80001b8:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 80001bc:	42ac      	cmp	r4, r5
 80001be:	d001      	beq.n	80001c4 <??ZbZclAttrAddSorted_5>
 80001c0:	6800      	ldr	r0, [r0, #0]
 80001c2:	e7e7      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c4 <??ZbZclAttrAddSorted_5>:
 80001c4:	2000      	movs	r0, #0
 80001c6:	e7e5      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c8 <??ZbZclAttrAddSorted_2>:
 80001c8:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80001cc:	600c      	str	r4, [r1, #0]
 80001ce:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80001d0:	604c      	str	r4, [r1, #4]
 80001d2:	680c      	ldr	r4, [r1, #0]
 80001d4:	6061      	str	r1, [r4, #4]
 80001d6:	684c      	ldr	r4, [r1, #4]
 80001d8:	6021      	str	r1, [r4, #0]

080001da <??ZbZclAttrAddSorted_4>:
 80001da:	bc30      	pop	{r4, r5}
 80001dc:	4770      	bx	lr

080001de <ZbZclAttrFind>:
 80001de:	b430      	push	{r4, r5}
 80001e0:	0003      	movs	r3, r0
 80001e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80001e4:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 80001e8:	4290      	cmp	r0, r2
 80001ea:	d001      	beq.n	80001f0 <??ZbZclAttrFind_0>
 80001ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001ee:	e000      	b.n	80001f2 <??ZbZclAttrFind_1>

080001f0 <??ZbZclAttrFind_0>:
 80001f0:	2200      	movs	r2, #0

080001f2 <??ZbZclAttrFind_1>:
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d012      	beq.n	800021c <??ZbZclAttrFind_2>
 80001f6:	0014      	movs	r4, r2
 80001f8:	68a0      	ldr	r0, [r4, #8]
 80001fa:	8800      	ldrh	r0, [r0, #0]
 80001fc:	000d      	movs	r5, r1
 80001fe:	b2ad      	uxth	r5, r5
 8000200:	42a8      	cmp	r0, r5
 8000202:	d005      	beq.n	8000210 <??ZbZclAttrFind_3>
 8000204:	6810      	ldr	r0, [r2, #0]
 8000206:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 800020a:	42a8      	cmp	r0, r5
 800020c:	d004      	beq.n	8000218 <??ZbZclAttrFind_4>
 800020e:	e001      	b.n	8000214 <??ZbZclAttrFind_5>

08000210 <??ZbZclAttrFind_3>:
 8000210:	0020      	movs	r0, r4
 8000212:	e004      	b.n	800021e <??ZbZclAttrFind_6>

08000214 <??ZbZclAttrFind_5>:
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	e7ec      	b.n	80001f2 <??ZbZclAttrFind_1>

08000218 <??ZbZclAttrFind_4>:
 8000218:	2200      	movs	r2, #0
 800021a:	e7ea      	b.n	80001f2 <??ZbZclAttrFind_1>

0800021c <??ZbZclAttrFind_2>:
 800021c:	2000      	movs	r0, #0

0800021e <??ZbZclAttrFind_6>:
 800021e:	bc30      	pop	{r4, r5}
 8000220:	4770      	bx	lr

08000222 <ZbZclAttrHandleDiscover>:
 8000222:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000226:	b09f      	sub	sp, #124	@ 0x7c
 8000228:	0004      	movs	r4, r0
 800022a:	000d      	movs	r5, r1
 800022c:	0016      	movs	r6, r2
 800022e:	2708      	movs	r7, #8
 8000230:	f05f 0800 	movs.w	r8, #0
 8000234:	f10d 0908 	add.w	r9, sp, #8
 8000238:	4642      	mov	r2, r8
 800023a:	0039      	movs	r1, r7
 800023c:	4648      	mov	r0, r9
 800023e:	f007 fc91 	bl	8007b64 <__aeabi_memset>
 8000242:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000244:	2803      	cmp	r0, #3
 8000246:	d206      	bcs.n	8000256 <??ZbZclAttrHandleDiscover_0>
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	002a      	movs	r2, r5
 800024c:	0031      	movs	r1, r6
 800024e:	0020      	movs	r0, r4
 8000250:	f011 fda8 	bl	8011da4 <ZbZclSendDefaultResponse>
 8000254:	e070      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000256 <??ZbZclAttrHandleDiscover_0>:
 8000256:	f05f 0800 	movs.w	r8, #0
 800025a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800025c:	4641      	mov	r1, r8
 800025e:	b2c9      	uxtb	r1, r1
 8000260:	4408      	add	r0, r1
 8000262:	f006 fe54 	bl	8006f0e <pletoh16>
 8000266:	0007      	movs	r7, r0
 8000268:	f118 0802 	adds.w	r8, r8, #2
 800026c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800026e:	4641      	mov	r1, r8
 8000270:	b2c9      	uxtb	r1, r1
 8000272:	5c40      	ldrb	r0, [r0, r1]
 8000274:	f88d 0004 	strb.w	r0, [sp, #4]
 8000278:	f118 0801 	adds.w	r8, r8, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f88d 0008 	strb.w	r0, [sp, #8]
 8000282:	7868      	ldrb	r0, [r5, #1]
 8000284:	f88d 0009 	strb.w	r0, [sp, #9]
 8000288:	78a8      	ldrb	r0, [r5, #2]
 800028a:	2800      	cmp	r0, #0
 800028c:	d101      	bne.n	8000292 <??ZbZclAttrHandleDiscover_2>
 800028e:	2001      	movs	r0, #1
 8000290:	e000      	b.n	8000294 <??ZbZclAttrHandleDiscover_3>

08000292 <??ZbZclAttrHandleDiscover_2>:
 8000292:	2000      	movs	r0, #0

08000294 <??ZbZclAttrHandleDiscover_3>:
 8000294:	f88d 000a 	strb.w	r0, [sp, #10]
 8000298:	2001      	movs	r0, #1
 800029a:	f88d 000b 	strb.w	r0, [sp, #11]
 800029e:	88a8      	ldrh	r0, [r5, #4]
 80002a0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80002a4:	79a8      	ldrb	r0, [r5, #6]
 80002a6:	f88d 000e 	strb.w	r0, [sp, #14]
 80002aa:	200d      	movs	r0, #13
 80002ac:	f88d 000f 	strb.w	r0, [sp, #15]
 80002b0:	2239      	movs	r2, #57	@ 0x39
 80002b2:	a910      	add	r1, sp, #64	@ 0x40
 80002b4:	a802      	add	r0, sp, #8
 80002b6:	f006 f969 	bl	800658c <ZbZclAppendHeader>
 80002ba:	4682      	mov	sl, r0
 80002bc:	f1ba 0f00 	cmp.w	sl, #0
 80002c0:	d506      	bpl.n	80002d0 <??ZbZclAttrHandleDiscover_4>
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	002a      	movs	r2, r5
 80002c6:	0031      	movs	r1, r6
 80002c8:	0020      	movs	r0, r4
 80002ca:	f011 fd6b 	bl	8011da4 <ZbZclSendDefaultResponse>
 80002ce:	e033      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

080002d0 <??ZbZclAttrHandleDiscover_4>:
 80002d0:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 80002d4:	9000      	str	r0, [sp, #0]
 80002d6:	a810      	add	r0, sp, #64	@ 0x40
 80002d8:	eb00 030a 	add.w	r3, r0, sl
 80002dc:	aa01      	add	r2, sp, #4
 80002de:	0039      	movs	r1, r7
 80002e0:	b289      	uxth	r1, r1
 80002e2:	0020      	movs	r0, r4
 80002e4:	f000 f82b 	bl	800033e <ZbZclAttrDiscoverGetList>
 80002e8:	4681      	mov	r9, r0
 80002ea:	eb19 090a 	adds.w	r9, r9, sl
 80002ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d104      	bne.n	8000300 <??ZbZclAttrHandleDiscover_5>
 80002f6:	0030      	movs	r0, r6
 80002f8:	f011 f92e 	bl	8011558 <ZbApsAddrIsBcast>
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d11b      	bne.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000300 <??ZbZclAttrHandleDiscover_5>:
 8000300:	0032      	movs	r2, r6
 8000302:	a904      	add	r1, sp, #16
 8000304:	0020      	movs	r0, r4
 8000306:	f003 fd18 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 800030a:	a804      	add	r0, sp, #16
 800030c:	f116 0110 	adds.w	r1, r6, #16
 8000310:	2210      	movs	r2, #16
 8000312:	f015 fc04 	bl	8015b1e <__aeabi_memcpy>
 8000316:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800031a:	f003 fca6 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 800031e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000322:	a810      	add	r0, sp, #64	@ 0x40
 8000324:	900a      	str	r0, [sp, #40]	@ 0x28
 8000326:	4648      	mov	r0, r9
 8000328:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800032c:	2300      	movs	r3, #0
 800032e:	2200      	movs	r2, #0
 8000330:	a904      	add	r1, sp, #16
 8000332:	68a0      	ldr	r0, [r4, #8]
 8000334:	f011 f896 	bl	8011464 <ZbApsdeDataReqCallback>

08000338 <??ZbZclAttrHandleDiscover_1>:
 8000338:	b020      	add	sp, #128	@ 0x80
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800033e <ZbZclAttrDiscoverGetList>:
 800033e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000342:	0005      	movs	r5, r0
 8000344:	0016      	movs	r6, r2
 8000346:	001f      	movs	r7, r3
 8000348:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800034c:	f05f 0a00 	movs.w	sl, #0
 8000350:	f05f 0b00 	movs.w	fp, #0
 8000354:	2000      	movs	r0, #0
 8000356:	f807 000b 	strb.w	r0, [r7, fp]
 800035a:	f11b 0b01 	adds.w	fp, fp, #1
 800035e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8000360:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8000364:	4288      	cmp	r0, r1
 8000366:	d001      	beq.n	800036c <??ZbZclAttrDiscoverGetList_0>
 8000368:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800036a:	e000      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

0800036c <??ZbZclAttrDiscoverGetList_0>:
 800036c:	2400      	movs	r4, #0

0800036e <??ZbZclAttrDiscoverGetList_1>:
 800036e:	2c00      	cmp	r4, #0
 8000370:	d030      	beq.n	80003d4 <??ZbZclAttrDiscoverGetList_2>
 8000372:	46a1      	mov	r9, r4
 8000374:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000378:	8800      	ldrh	r0, [r0, #0]
 800037a:	f8bd 1000 	ldrh.w	r1, [sp]
 800037e:	4288      	cmp	r0, r1
 8000380:	d31f      	bcc.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

08000382 <??ZbZclAttrDiscoverGetList_4>:
 8000382:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000386:	8880      	ldrh	r0, [r0, #4]
 8000388:	0400      	lsls	r0, r0, #16
 800038a:	d41a      	bmi.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

0800038c <??ZbZclAttrDiscoverGetList_5>:
 800038c:	4650      	mov	r0, sl
 800038e:	7831      	ldrb	r1, [r6, #0]
 8000390:	b2c0      	uxtb	r0, r0
 8000392:	4288      	cmp	r0, r1
 8000394:	d21e      	bcs.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

08000396 <??ZbZclAttrDiscoverGetList_6>:
 8000396:	f11b 0003 	adds.w	r0, fp, #3
 800039a:	4580      	cmp	r8, r0
 800039c:	d31a      	bcc.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

0800039e <??ZbZclAttrDiscoverGetList_7>:
 800039e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003a2:	8801      	ldrh	r1, [r0, #0]
 80003a4:	eb07 000b 	add.w	r0, r7, fp
 80003a8:	f006 fdfd 	bl	8006fa6 <putle16>
 80003ac:	f11b 0b02 	adds.w	fp, fp, #2
 80003b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003b4:	7880      	ldrb	r0, [r0, #2]
 80003b6:	f807 000b 	strb.w	r0, [r7, fp]
 80003ba:	f11b 0b01 	adds.w	fp, fp, #1
 80003be:	f11a 0a01 	adds.w	sl, sl, #1

080003c2 <??ZbZclAttrDiscoverGetList_3>:
 80003c2:	6820      	ldr	r0, [r4, #0]
 80003c4:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80003c8:	4288      	cmp	r0, r1
 80003ca:	d001      	beq.n	80003d0 <??ZbZclAttrDiscoverGetList_8>
 80003cc:	6824      	ldr	r4, [r4, #0]
 80003ce:	e7ce      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d0 <??ZbZclAttrDiscoverGetList_8>:
 80003d0:	2400      	movs	r4, #0
 80003d2:	e7cc      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d4 <??ZbZclAttrDiscoverGetList_2>:
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d101      	bne.n	80003dc <??ZbZclAttrDiscoverGetList_9>
 80003d8:	2001      	movs	r0, #1
 80003da:	7038      	strb	r0, [r7, #0]

080003dc <??ZbZclAttrDiscoverGetList_9>:
 80003dc:	f886 a000 	strb.w	sl, [r6]
 80003e0:	4658      	mov	r0, fp
 80003e2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003e6 <ZbZclAttrRead>:
 80003e6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	4680      	mov	r8, r0
 80003ee:	0014      	movs	r4, r2
 80003f0:	001d      	movs	r5, r3
 80003f2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80003f4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80003f8:	4640      	mov	r0, r8
 80003fa:	f7ff fef0 	bl	80001de <ZbZclAttrFind>
 80003fe:	0007      	movs	r7, r0
 8000400:	2f00      	cmp	r7, #0
 8000402:	d101      	bne.n	8000408 <??ZbZclAttrRead_0>
 8000404:	2086      	movs	r0, #134	@ 0x86
 8000406:	e03c      	b.n	8000482 <??ZbZclAttrRead_1>

08000408 <??ZbZclAttrRead_0>:
 8000408:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800040c:	2800      	cmp	r0, #0
 800040e:	d005      	beq.n	800041c <??ZbZclAttrRead_2>
 8000410:	68b8      	ldr	r0, [r7, #8]
 8000412:	7900      	ldrb	r0, [r0, #4]
 8000414:	0780      	lsls	r0, r0, #30
 8000416:	d401      	bmi.n	800041c <??ZbZclAttrRead_2>
 8000418:	208c      	movs	r0, #140	@ 0x8c
 800041a:	e032      	b.n	8000482 <??ZbZclAttrRead_1>

0800041c <??ZbZclAttrRead_2>:
 800041c:	2c00      	cmp	r4, #0
 800041e:	d002      	beq.n	8000426 <??ZbZclAttrRead_3>
 8000420:	68b8      	ldr	r0, [r7, #8]
 8000422:	7880      	ldrb	r0, [r0, #2]
 8000424:	7020      	strb	r0, [r4, #0]

08000426 <??ZbZclAttrRead_3>:
 8000426:	2d00      	cmp	r5, #0
 8000428:	d001      	beq.n	800042e <??ZbZclAttrRead_4>
 800042a:	2e00      	cmp	r6, #0
 800042c:	d105      	bne.n	800043a <??ZbZclAttrRead_5>

0800042e <??ZbZclAttrRead_4>:
 800042e:	2c00      	cmp	r4, #0
 8000430:	d001      	beq.n	8000436 <??ZbZclAttrRead_6>
 8000432:	2000      	movs	r0, #0
 8000434:	e025      	b.n	8000482 <??ZbZclAttrRead_1>

08000436 <??ZbZclAttrRead_6>:
 8000436:	2089      	movs	r0, #137	@ 0x89
 8000438:	e023      	b.n	8000482 <??ZbZclAttrRead_1>

0800043a <??ZbZclAttrRead_5>:
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	7900      	ldrb	r0, [r0, #4]
 800043e:	06c0      	lsls	r0, r0, #27
 8000440:	d519      	bpl.n	8000476 <??ZbZclAttrRead_7>
 8000442:	f05f 0920 	movs.w	r9, #32
 8000446:	f05f 0a00 	movs.w	sl, #0
 800044a:	46eb      	mov	fp, sp
 800044c:	4652      	mov	r2, sl
 800044e:	4649      	mov	r1, r9
 8000450:	4658      	mov	r0, fp
 8000452:	f007 fb87 	bl	8007b64 <__aeabi_memset>
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	2000      	movs	r0, #0
 800045c:	f88d 0004 	strb.w	r0, [sp, #4]
 8000460:	9502      	str	r5, [sp, #8]
 8000462:	9603      	str	r6, [sp, #12]
 8000464:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000468:	9007      	str	r0, [sp, #28]
 800046a:	466a      	mov	r2, sp
 800046c:	0039      	movs	r1, r7
 800046e:	4640      	mov	r0, r8
 8000470:	f001 fce6 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000474:	e005      	b.n	8000482 <??ZbZclAttrRead_1>

08000476 <??ZbZclAttrRead_7>:
 8000476:	0033      	movs	r3, r6
 8000478:	002a      	movs	r2, r5
 800047a:	0039      	movs	r1, r7
 800047c:	4640      	mov	r0, r8
 800047e:	f000 f803 	bl	8000488 <ZbZclAttrDefaultRead>

08000482 <??ZbZclAttrRead_1>:
 8000482:	b009      	add	sp, #36	@ 0x24
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000488 <ZbZclAttrDefaultRead>:
 8000488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800048c:	0005      	movs	r5, r0
 800048e:	000e      	movs	r6, r1
 8000490:	0017      	movs	r7, r2
 8000492:	001c      	movs	r4, r3
 8000494:	f05f 0800 	movs.w	r8, #0
 8000498:	f05f 0900 	movs.w	r9, #0
 800049c:	68b0      	ldr	r0, [r6, #8]
 800049e:	7880      	ldrb	r0, [r0, #2]
 80004a0:	2808      	cmp	r0, #8
 80004a2:	d065      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004a4:	2809      	cmp	r0, #9
 80004a6:	d06b      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004a8:	280a      	cmp	r0, #10
 80004aa:	d071      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004ac:	280b      	cmp	r0, #11
 80004ae:	d077      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004b0:	280c      	cmp	r0, #12
 80004b2:	d07d      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004b4:	280d      	cmp	r0, #13
 80004b6:	f000 8083 	beq.w	80005c0 <??ZbZclAttrDefaultRead_5>
 80004ba:	280e      	cmp	r0, #14
 80004bc:	f000 8088 	beq.w	80005d0 <??ZbZclAttrDefaultRead_6>
 80004c0:	280f      	cmp	r0, #15
 80004c2:	f000 808d 	beq.w	80005e0 <??ZbZclAttrDefaultRead_7>
 80004c6:	2810      	cmp	r0, #16
 80004c8:	d052      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ca:	2818      	cmp	r0, #24
 80004cc:	d050      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ce:	2819      	cmp	r0, #25
 80004d0:	d056      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004d2:	281a      	cmp	r0, #26
 80004d4:	d05c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004d6:	281b      	cmp	r0, #27
 80004d8:	d062      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004da:	281c      	cmp	r0, #28
 80004dc:	d068      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004de:	281d      	cmp	r0, #29
 80004e0:	d06e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 80004e2:	281e      	cmp	r0, #30
 80004e4:	d074      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 80004e6:	281f      	cmp	r0, #31
 80004e8:	d07a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 80004ea:	2820      	cmp	r0, #32
 80004ec:	d040      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ee:	2821      	cmp	r0, #33	@ 0x21
 80004f0:	d046      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004f2:	2822      	cmp	r0, #34	@ 0x22
 80004f4:	d04c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004f6:	2823      	cmp	r0, #35	@ 0x23
 80004f8:	d052      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004fa:	2824      	cmp	r0, #36	@ 0x24
 80004fc:	d058      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004fe:	2825      	cmp	r0, #37	@ 0x25
 8000500:	d05e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000502:	2826      	cmp	r0, #38	@ 0x26
 8000504:	d064      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000506:	2827      	cmp	r0, #39	@ 0x27
 8000508:	d06a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800050a:	2828      	cmp	r0, #40	@ 0x28
 800050c:	d030      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800050e:	2829      	cmp	r0, #41	@ 0x29
 8000510:	d036      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000512:	282a      	cmp	r0, #42	@ 0x2a
 8000514:	d03c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 8000516:	282b      	cmp	r0, #43	@ 0x2b
 8000518:	d042      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800051a:	282c      	cmp	r0, #44	@ 0x2c
 800051c:	d048      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 800051e:	282d      	cmp	r0, #45	@ 0x2d
 8000520:	d04e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000522:	282e      	cmp	r0, #46	@ 0x2e
 8000524:	d054      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000526:	282f      	cmp	r0, #47	@ 0x2f
 8000528:	d05a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800052a:	2830      	cmp	r0, #48	@ 0x30
 800052c:	d020      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800052e:	2831      	cmp	r0, #49	@ 0x31
 8000530:	d026      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000532:	2838      	cmp	r0, #56	@ 0x38
 8000534:	d024      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000536:	2839      	cmp	r0, #57	@ 0x39
 8000538:	d032      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800053a:	283a      	cmp	r0, #58	@ 0x3a
 800053c:	d050      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800053e:	2841      	cmp	r0, #65	@ 0x41
 8000540:	d05e      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000542:	2842      	cmp	r0, #66	@ 0x42
 8000544:	d05c      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000546:	2843      	cmp	r0, #67	@ 0x43
 8000548:	d071      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054a:	2844      	cmp	r0, #68	@ 0x44
 800054c:	d06f      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054e:	28e0      	cmp	r0, #224	@ 0xe0
 8000550:	d026      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000552:	28e1      	cmp	r0, #225	@ 0xe1
 8000554:	d024      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000556:	28e2      	cmp	r0, #226	@ 0xe2
 8000558:	d022      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800055a:	28e8      	cmp	r0, #232	@ 0xe8
 800055c:	d010      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 800055e:	28e9      	cmp	r0, #233	@ 0xe9
 8000560:	d00e      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000562:	28ea      	cmp	r0, #234	@ 0xea
 8000564:	d01c      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000566:	28f0      	cmp	r0, #240	@ 0xf0
 8000568:	d03a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800056a:	28f1      	cmp	r0, #241	@ 0xf1
 800056c:	d040      	beq.n	80005f0 <??ZbZclAttrDefaultRead_10>
 800056e:	e078      	b.n	8000662 <??ZbZclAttrDefaultRead_11>

08000570 <??ZbZclAttrDefaultRead_0>:
 8000570:	2c00      	cmp	r4, #0
 8000572:	d102      	bne.n	800057a <??ZbZclAttrDefaultRead_12>
 8000574:	2089      	movs	r0, #137	@ 0x89
 8000576:	4681      	mov	r9, r0
 8000578:	e075      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800057a <??ZbZclAttrDefaultRead_12>:
 800057a:	2001      	movs	r0, #1
 800057c:	4680      	mov	r8, r0
 800057e:	e072      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000580 <??ZbZclAttrDefaultRead_1>:
 8000580:	2c02      	cmp	r4, #2
 8000582:	d202      	bcs.n	800058a <??ZbZclAttrDefaultRead_14>
 8000584:	2089      	movs	r0, #137	@ 0x89
 8000586:	4681      	mov	r9, r0
 8000588:	e06d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800058a <??ZbZclAttrDefaultRead_14>:
 800058a:	2002      	movs	r0, #2
 800058c:	4680      	mov	r8, r0
 800058e:	e06a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000590 <??ZbZclAttrDefaultRead_2>:
 8000590:	2c03      	cmp	r4, #3
 8000592:	d202      	bcs.n	800059a <??ZbZclAttrDefaultRead_15>
 8000594:	2089      	movs	r0, #137	@ 0x89
 8000596:	4681      	mov	r9, r0
 8000598:	e065      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800059a <??ZbZclAttrDefaultRead_15>:
 800059a:	2003      	movs	r0, #3
 800059c:	4680      	mov	r8, r0
 800059e:	e062      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005a0 <??ZbZclAttrDefaultRead_3>:
 80005a0:	2c04      	cmp	r4, #4
 80005a2:	d202      	bcs.n	80005aa <??ZbZclAttrDefaultRead_16>
 80005a4:	2089      	movs	r0, #137	@ 0x89
 80005a6:	4681      	mov	r9, r0
 80005a8:	e05d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005aa <??ZbZclAttrDefaultRead_16>:
 80005aa:	2004      	movs	r0, #4
 80005ac:	4680      	mov	r8, r0
 80005ae:	e05a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005b0 <??ZbZclAttrDefaultRead_4>:
 80005b0:	2c05      	cmp	r4, #5
 80005b2:	d202      	bcs.n	80005ba <??ZbZclAttrDefaultRead_17>
 80005b4:	2089      	movs	r0, #137	@ 0x89
 80005b6:	4681      	mov	r9, r0
 80005b8:	e055      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ba <??ZbZclAttrDefaultRead_17>:
 80005ba:	2005      	movs	r0, #5
 80005bc:	4680      	mov	r8, r0
 80005be:	e052      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005c0 <??ZbZclAttrDefaultRead_5>:
 80005c0:	2c06      	cmp	r4, #6
 80005c2:	d202      	bcs.n	80005ca <??ZbZclAttrDefaultRead_18>
 80005c4:	2089      	movs	r0, #137	@ 0x89
 80005c6:	4681      	mov	r9, r0
 80005c8:	e04d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ca <??ZbZclAttrDefaultRead_18>:
 80005ca:	2006      	movs	r0, #6
 80005cc:	4680      	mov	r8, r0
 80005ce:	e04a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005d0 <??ZbZclAttrDefaultRead_6>:
 80005d0:	2c07      	cmp	r4, #7
 80005d2:	d202      	bcs.n	80005da <??ZbZclAttrDefaultRead_19>
 80005d4:	2089      	movs	r0, #137	@ 0x89
 80005d6:	4681      	mov	r9, r0
 80005d8:	e045      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005da <??ZbZclAttrDefaultRead_19>:
 80005da:	2007      	movs	r0, #7
 80005dc:	4680      	mov	r8, r0
 80005de:	e042      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005e0 <??ZbZclAttrDefaultRead_7>:
 80005e0:	2c08      	cmp	r4, #8
 80005e2:	d202      	bcs.n	80005ea <??ZbZclAttrDefaultRead_20>
 80005e4:	2089      	movs	r0, #137	@ 0x89
 80005e6:	4681      	mov	r9, r0
 80005e8:	e03d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ea <??ZbZclAttrDefaultRead_20>:
 80005ea:	2008      	movs	r0, #8
 80005ec:	4680      	mov	r8, r0
 80005ee:	e03a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005f0 <??ZbZclAttrDefaultRead_10>:
 80005f0:	2c10      	cmp	r4, #16
 80005f2:	d202      	bcs.n	80005fa <??ZbZclAttrDefaultRead_21>
 80005f4:	2089      	movs	r0, #137	@ 0x89
 80005f6:	4681      	mov	r9, r0
 80005f8:	e035      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005fa <??ZbZclAttrDefaultRead_21>:
 80005fa:	2010      	movs	r0, #16
 80005fc:	4680      	mov	r8, r0
 80005fe:	e032      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000600 <??ZbZclAttrDefaultRead_8>:
 8000600:	2c00      	cmp	r4, #0
 8000602:	d102      	bne.n	800060a <??ZbZclAttrDefaultRead_22>
 8000604:	2089      	movs	r0, #137	@ 0x89
 8000606:	4681      	mov	r9, r0
 8000608:	e02d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800060a <??ZbZclAttrDefaultRead_22>:
 800060a:	68f0      	ldr	r0, [r6, #12]
 800060c:	7800      	ldrb	r0, [r0, #0]
 800060e:	0001      	movs	r1, r0
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	29ff      	cmp	r1, #255	@ 0xff
 8000614:	d101      	bne.n	800061a <??ZbZclAttrDefaultRead_23>
 8000616:	2100      	movs	r1, #0
 8000618:	0008      	movs	r0, r1

0800061a <??ZbZclAttrDefaultRead_23>:
 800061a:	0001      	movs	r1, r0
 800061c:	b2c9      	uxtb	r1, r1
 800061e:	1c49      	adds	r1, r1, #1
 8000620:	4688      	mov	r8, r1
 8000622:	4544      	cmp	r4, r8
 8000624:	d202      	bcs.n	800062c <??ZbZclAttrDefaultRead_24>
 8000626:	2189      	movs	r1, #137	@ 0x89
 8000628:	4689      	mov	r9, r1
 800062a:	e01c      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062c <??ZbZclAttrDefaultRead_24>:
 800062c:	e01b      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062e <??ZbZclAttrDefaultRead_9>:
 800062e:	2c00      	cmp	r4, #0
 8000630:	d102      	bne.n	8000638 <??ZbZclAttrDefaultRead_25>
 8000632:	2089      	movs	r0, #137	@ 0x89
 8000634:	4681      	mov	r9, r0
 8000636:	e016      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000638 <??ZbZclAttrDefaultRead_25>:
 8000638:	68f0      	ldr	r0, [r6, #12]
 800063a:	f006 fc68 	bl	8006f0e <pletoh16>
 800063e:	0001      	movs	r1, r0
 8000640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000644:	b289      	uxth	r1, r1
 8000646:	4291      	cmp	r1, r2
 8000648:	d101      	bne.n	800064e <??ZbZclAttrDefaultRead_26>
 800064a:	2100      	movs	r1, #0
 800064c:	0008      	movs	r0, r1

0800064e <??ZbZclAttrDefaultRead_26>:
 800064e:	0001      	movs	r1, r0
 8000650:	b289      	uxth	r1, r1
 8000652:	1c89      	adds	r1, r1, #2
 8000654:	4688      	mov	r8, r1
 8000656:	4544      	cmp	r4, r8
 8000658:	d202      	bcs.n	8000660 <??ZbZclAttrDefaultRead_27>
 800065a:	2189      	movs	r1, #137	@ 0x89
 800065c:	4689      	mov	r9, r1
 800065e:	e002      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000660 <??ZbZclAttrDefaultRead_27>:
 8000660:	e001      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000662 <??ZbZclAttrDefaultRead_11>:
 8000662:	2086      	movs	r0, #134	@ 0x86
 8000664:	4681      	mov	r9, r0

08000666 <??ZbZclAttrDefaultRead_13>:
 8000666:	4648      	mov	r0, r9
 8000668:	b2c0      	uxtb	r0, r0
 800066a:	2800      	cmp	r0, #0
 800066c:	d109      	bne.n	8000682 <??ZbZclAttrDefaultRead_28>
 800066e:	f8cd 8000 	str.w	r8, [sp]
 8000672:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8000676:	46bb      	mov	fp, r7
 8000678:	9a00      	ldr	r2, [sp, #0]
 800067a:	4651      	mov	r1, sl
 800067c:	4658      	mov	r0, fp
 800067e:	f015 fa4e 	bl	8015b1e <__aeabi_memcpy>

08000682 <??ZbZclAttrDefaultRead_28>:
 8000682:	4648      	mov	r0, r9
 8000684:	b2c0      	uxtb	r0, r0
 8000686:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800068a <ZbZclAttrWrite>:
 800068a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	4680      	mov	r8, r0
 8000692:	4699      	mov	r9, r3
 8000694:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8000698:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800069a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 800069e:	4640      	mov	r0, r8
 80006a0:	f7ff fd9d 	bl	80001de <ZbZclAttrFind>
 80006a4:	0006      	movs	r6, r0
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d101      	bne.n	80006ae <??ZbZclAttrWrite_0>
 80006aa:	2086      	movs	r0, #134	@ 0x86
 80006ac:	e0a2      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006ae <??ZbZclAttrWrite_0>:
 80006ae:	68b0      	ldr	r0, [r6, #8]
 80006b0:	7900      	ldrb	r0, [r0, #4]
 80006b2:	f010 0001 	ands.w	r0, r0, #1
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d105      	bne.n	80006c8 <??ZbZclAttrWrite_2>
 80006bc:	0038      	movs	r0, r7
 80006be:	b280      	uxth	r0, r0
 80006c0:	0780      	lsls	r0, r0, #30
 80006c2:	d401      	bmi.n	80006c8 <??ZbZclAttrWrite_2>
 80006c4:	2088      	movs	r0, #136	@ 0x88
 80006c6:	e095      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006c8 <??ZbZclAttrWrite_2>:
 80006c8:	2300      	movs	r3, #0
 80006ca:	4652      	mov	r2, sl
 80006cc:	4649      	mov	r1, r9
 80006ce:	68b0      	ldr	r0, [r6, #8]
 80006d0:	7880      	ldrb	r0, [r0, #2]
 80006d2:	f000 fcb0 	bl	8001036 <ZbZclAttrParseLength>
 80006d6:	9005      	str	r0, [sp, #20]
 80006d8:	9805      	ldr	r0, [sp, #20]
 80006da:	2800      	cmp	r0, #0
 80006dc:	d501      	bpl.n	80006e2 <??ZbZclAttrWrite_3>
 80006de:	2087      	movs	r0, #135	@ 0x87
 80006e0:	e088      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006e2 <??ZbZclAttrWrite_3>:
 80006e2:	68b0      	ldr	r0, [r6, #8]
 80006e4:	7880      	ldrb	r0, [r0, #2]
 80006e6:	f000 ff83 	bl	80015f0 <ZbZclAttrIsInteger>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d026      	beq.n	800073c <??ZbZclAttrWrite_4>
 80006ee:	aa04      	add	r2, sp, #16
 80006f0:	4649      	mov	r1, r9
 80006f2:	68b0      	ldr	r0, [r6, #8]
 80006f4:	7880      	ldrb	r0, [r0, #2]
 80006f6:	f000 fe4d 	bl	8001394 <ZbZclParseInteger>
 80006fa:	0004      	movs	r4, r0
 80006fc:	000d      	movs	r5, r1
 80006fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000702:	2800      	cmp	r0, #0
 8000704:	d002      	beq.n	800070c <??ZbZclAttrWrite_5>
 8000706:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800070a:	e073      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800070c <??ZbZclAttrWrite_5>:
 800070c:	68b0      	ldr	r0, [r6, #8]
 800070e:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8000712:	f007 ffed 	bl	80086f0 <__aeabi_d2lz>
 8000716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800071a:	68b0      	ldr	r0, [r6, #8]
 800071c:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8000720:	f007 ffe6 	bl	80086f0 <__aeabi_d2lz>
 8000724:	e9cd 0100 	strd	r0, r1, [sp]
 8000728:	68b0      	ldr	r0, [r6, #8]
 800072a:	7882      	ldrb	r2, [r0, #2]
 800072c:	0020      	movs	r0, r4
 800072e:	0029      	movs	r1, r5
 8000730:	f000 ff74 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8000734:	2800      	cmp	r0, #0
 8000736:	d101      	bne.n	800073c <??ZbZclAttrWrite_4>
 8000738:	2087      	movs	r0, #135	@ 0x87
 800073a:	e05b      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800073c <??ZbZclAttrWrite_4>:
 800073c:	68b0      	ldr	r0, [r6, #8]
 800073e:	7900      	ldrb	r0, [r0, #4]
 8000740:	0680      	lsls	r0, r0, #26
 8000742:	d522      	bpl.n	800078a <??ZbZclAttrWrite_6>
 8000744:	2420      	movs	r4, #32
 8000746:	2500      	movs	r5, #0
 8000748:	f10d 0b18 	add.w	fp, sp, #24
 800074c:	002a      	movs	r2, r5
 800074e:	0021      	movs	r1, r4
 8000750:	4658      	mov	r0, fp
 8000752:	f007 fa07 	bl	8007b64 <__aeabi_memset>
 8000756:	68b0      	ldr	r0, [r6, #8]
 8000758:	9006      	str	r0, [sp, #24]
 800075a:	2001      	movs	r0, #1
 800075c:	f88d 001c 	strb.w	r0, [sp, #28]
 8000760:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8000762:	900c      	str	r0, [sp, #48]	@ 0x30
 8000764:	f8cd 9020 	str.w	r9, [sp, #32]
 8000768:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800076c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8000770:	68f0      	ldr	r0, [r6, #12]
 8000772:	900b      	str	r0, [sp, #44]	@ 0x2c
 8000774:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000778:	900d      	str	r0, [sp, #52]	@ 0x34
 800077a:	aa06      	add	r2, sp, #24
 800077c:	0031      	movs	r1, r6
 800077e:	4640      	mov	r0, r8
 8000780:	f001 fb5e 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000784:	f88d 0010 	strb.w	r0, [sp, #16]
 8000788:	e028      	b.n	80007dc <??ZbZclAttrWrite_7>

0800078a <??ZbZclAttrWrite_6>:
 800078a:	003b      	movs	r3, r7
 800078c:	b29b      	uxth	r3, r3
 800078e:	464a      	mov	r2, r9
 8000790:	0031      	movs	r1, r6
 8000792:	4640      	mov	r0, r8
 8000794:	f000 f85e 	bl	8000854 <ZbZclAttrDefaultWrite>
 8000798:	f88d 0010 	strb.w	r0, [sp, #16]
 800079c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d11b      	bne.n	80007dc <??ZbZclAttrWrite_7>
 80007a4:	68b0      	ldr	r0, [r6, #8]
 80007a6:	7900      	ldrb	r0, [r0, #4]
 80007a8:	0640      	lsls	r0, r0, #25
 80007aa:	d517      	bpl.n	80007dc <??ZbZclAttrWrite_7>
 80007ac:	2420      	movs	r4, #32
 80007ae:	2500      	movs	r5, #0
 80007b0:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 80007b4:	002a      	movs	r2, r5
 80007b6:	0021      	movs	r1, r4
 80007b8:	4658      	mov	r0, fp
 80007ba:	f007 f9d3 	bl	8007b64 <__aeabi_memset>
 80007be:	68b0      	ldr	r0, [r6, #8]
 80007c0:	900e      	str	r0, [sp, #56]	@ 0x38
 80007c2:	2002      	movs	r0, #2
 80007c4:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80007c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80007ca:	9014      	str	r0, [sp, #80]	@ 0x50
 80007cc:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80007d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80007d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80007d4:	0031      	movs	r1, r6
 80007d6:	4640      	mov	r0, r8
 80007d8:	f001 fb32 	bl	8001e40 <ZbZclAttrCallbackExec>

080007dc <??ZbZclAttrWrite_7>:
 80007dc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d002      	beq.n	80007ea <??ZbZclAttrWrite_8>
 80007e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e8:	e004      	b.n	80007f4 <??ZbZclAttrWrite_1>

080007ea <??ZbZclAttrWrite_8>:
 80007ea:	0031      	movs	r1, r6
 80007ec:	4640      	mov	r0, r8
 80007ee:	f000 f804 	bl	80007fa <ZbZclAttrPostWrite>
 80007f2:	2000      	movs	r0, #0

080007f4 <??ZbZclAttrWrite_1>:
 80007f4:	b019      	add	sp, #100	@ 0x64
 80007f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007fa <ZbZclAttrPostWrite>:
 80007fa:	b538      	push	{r3, r4, r5, lr}
 80007fc:	0005      	movs	r5, r0
 80007fe:	000c      	movs	r4, r1
 8000800:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8000802:	2800      	cmp	r0, #0
 8000804:	d004      	beq.n	8000810 <??ZbZclAttrPostWrite_0>
 8000806:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800080a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800080c:	f011 f8e8 	bl	80119e0 <ZbTimerReset>

08000810 <??ZbZclAttrPostWrite_0>:
 8000810:	2c00      	cmp	r4, #0
 8000812:	d005      	beq.n	8000820 <??ZbZclAttrPostWrite_1>
 8000814:	2200      	movs	r2, #0
 8000816:	68a0      	ldr	r0, [r4, #8]
 8000818:	8801      	ldrh	r1, [r0, #0]
 800081a:	0028      	movs	r0, r5
 800081c:	f001 ffcb 	bl	80027b6 <zcl_attr_reporting_check>

08000820 <??ZbZclAttrPostWrite_1>:
 8000820:	bd31      	pop	{r0, r4, r5, pc}

08000822 <ZbZclAttrPersist>:
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	0005      	movs	r5, r0
 8000826:	000e      	movs	r6, r1
 8000828:	0031      	movs	r1, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	0028      	movs	r0, r5
 800082e:	f7ff fcd6 	bl	80001de <ZbZclAttrFind>
 8000832:	0004      	movs	r4, r0
 8000834:	2c00      	cmp	r4, #0
 8000836:	d101      	bne.n	800083c <??ZbZclAttrPersist_0>
 8000838:	2000      	movs	r0, #0
 800083a:	e00a      	b.n	8000852 <??ZbZclAttrPersist_1>

0800083c <??ZbZclAttrPersist_0>:
 800083c:	68a0      	ldr	r0, [r4, #8]
 800083e:	7900      	ldrb	r0, [r0, #4]
 8000840:	0740      	lsls	r0, r0, #29
 8000842:	d401      	bmi.n	8000848 <??ZbZclAttrPersist_2>
 8000844:	2000      	movs	r0, #0
 8000846:	e004      	b.n	8000852 <??ZbZclAttrPersist_1>

08000848 <??ZbZclAttrPersist_2>:
 8000848:	0021      	movs	r1, r4
 800084a:	0028      	movs	r0, r5
 800084c:	f7ff ffd5 	bl	80007fa <ZbZclAttrPostWrite>
 8000850:	2001      	movs	r0, #1

08000852 <??ZbZclAttrPersist_1>:
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <ZbZclAttrDefaultWrite>:
 8000854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	0006      	movs	r6, r0
 800085a:	000f      	movs	r7, r1
 800085c:	0014      	movs	r4, r2
 800085e:	4698      	mov	r8, r3
 8000860:	2500      	movs	r5, #0
 8000862:	f05f 0900 	movs.w	r9, #0
 8000866:	2c00      	cmp	r4, #0
 8000868:	d101      	bne.n	800086e <??ZbZclAttrDefaultWrite_0>
 800086a:	2001      	movs	r0, #1
 800086c:	e0d6      	b.n	8000a1c <??ZbZclAttrDefaultWrite_1>

0800086e <??ZbZclAttrDefaultWrite_0>:
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	7880      	ldrb	r0, [r0, #2]
 8000872:	2808      	cmp	r0, #8
 8000874:	d062      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000876:	2809      	cmp	r0, #9
 8000878:	d063      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800087a:	280a      	cmp	r0, #10
 800087c:	d064      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 800087e:	280b      	cmp	r0, #11
 8000880:	d065      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000882:	280c      	cmp	r0, #12
 8000884:	d066      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 8000886:	280d      	cmp	r0, #13
 8000888:	d067      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 800088a:	280e      	cmp	r0, #14
 800088c:	d068      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 800088e:	280f      	cmp	r0, #15
 8000890:	d069      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000892:	2810      	cmp	r0, #16
 8000894:	d052      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000896:	2818      	cmp	r0, #24
 8000898:	d050      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 800089a:	2819      	cmp	r0, #25
 800089c:	d051      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800089e:	281a      	cmp	r0, #26
 80008a0:	d052      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008a2:	281b      	cmp	r0, #27
 80008a4:	d053      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008a6:	281c      	cmp	r0, #28
 80008a8:	d054      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008aa:	281d      	cmp	r0, #29
 80008ac:	d055      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ae:	281e      	cmp	r0, #30
 80008b0:	d056      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008b2:	281f      	cmp	r0, #31
 80008b4:	d057      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008b6:	2820      	cmp	r0, #32
 80008b8:	d040      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008ba:	2821      	cmp	r0, #33	@ 0x21
 80008bc:	d041      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008be:	2822      	cmp	r0, #34	@ 0x22
 80008c0:	d042      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008c2:	2823      	cmp	r0, #35	@ 0x23
 80008c4:	d043      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008c6:	2824      	cmp	r0, #36	@ 0x24
 80008c8:	d044      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ca:	2825      	cmp	r0, #37	@ 0x25
 80008cc:	d045      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ce:	2826      	cmp	r0, #38	@ 0x26
 80008d0:	d046      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008d2:	2827      	cmp	r0, #39	@ 0x27
 80008d4:	d047      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008d6:	2828      	cmp	r0, #40	@ 0x28
 80008d8:	d030      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008da:	2829      	cmp	r0, #41	@ 0x29
 80008dc:	d031      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008de:	282a      	cmp	r0, #42	@ 0x2a
 80008e0:	d032      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008e2:	282b      	cmp	r0, #43	@ 0x2b
 80008e4:	d033      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008e6:	282c      	cmp	r0, #44	@ 0x2c
 80008e8:	d034      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ea:	282d      	cmp	r0, #45	@ 0x2d
 80008ec:	d035      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ee:	282e      	cmp	r0, #46	@ 0x2e
 80008f0:	d036      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008f2:	282f      	cmp	r0, #47	@ 0x2f
 80008f4:	d037      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008f6:	2830      	cmp	r0, #48	@ 0x30
 80008f8:	d020      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008fa:	2831      	cmp	r0, #49	@ 0x31
 80008fc:	d021      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008fe:	2838      	cmp	r0, #56	@ 0x38
 8000900:	d01f      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 8000902:	2839      	cmp	r0, #57	@ 0x39
 8000904:	d023      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000906:	283a      	cmp	r0, #58	@ 0x3a
 8000908:	d02d      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 800090a:	2841      	cmp	r0, #65	@ 0x41
 800090c:	d031      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 800090e:	2842      	cmp	r0, #66	@ 0x42
 8000910:	d02f      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 8000912:	2843      	cmp	r0, #67	@ 0x43
 8000914:	d049      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 8000916:	2844      	cmp	r0, #68	@ 0x44
 8000918:	d047      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 800091a:	28e0      	cmp	r0, #224	@ 0xe0
 800091c:	d017      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 800091e:	28e1      	cmp	r0, #225	@ 0xe1
 8000920:	d015      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000922:	28e2      	cmp	r0, #226	@ 0xe2
 8000924:	d013      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000926:	28e8      	cmp	r0, #232	@ 0xe8
 8000928:	d00b      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092a:	28e9      	cmp	r0, #233	@ 0xe9
 800092c:	d009      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092e:	28ea      	cmp	r0, #234	@ 0xea
 8000930:	d00d      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000932:	28f0      	cmp	r0, #240	@ 0xf0
 8000934:	d017      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000936:	28f1      	cmp	r0, #241	@ 0xf1
 8000938:	d018      	beq.n	800096c <??ZbZclAttrDefaultWrite_12>
 800093a:	e058      	b.n	80009ee <??ZbZclAttrDefaultWrite_13>

0800093c <??ZbZclAttrDefaultWrite_2>:
 800093c:	2001      	movs	r0, #1
 800093e:	0005      	movs	r5, r0
 8000940:	e057      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000942 <??ZbZclAttrDefaultWrite_3>:
 8000942:	2002      	movs	r0, #2
 8000944:	0005      	movs	r5, r0
 8000946:	e054      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000948 <??ZbZclAttrDefaultWrite_4>:
 8000948:	2003      	movs	r0, #3
 800094a:	0005      	movs	r5, r0
 800094c:	e051      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800094e <??ZbZclAttrDefaultWrite_5>:
 800094e:	2004      	movs	r0, #4
 8000950:	0005      	movs	r5, r0
 8000952:	e04e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000954 <??ZbZclAttrDefaultWrite_6>:
 8000954:	2005      	movs	r0, #5
 8000956:	0005      	movs	r5, r0
 8000958:	e04b      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800095a <??ZbZclAttrDefaultWrite_7>:
 800095a:	2006      	movs	r0, #6
 800095c:	0005      	movs	r5, r0
 800095e:	e048      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000960 <??ZbZclAttrDefaultWrite_8>:
 8000960:	2007      	movs	r0, #7
 8000962:	0005      	movs	r5, r0
 8000964:	e045      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000966 <??ZbZclAttrDefaultWrite_9>:
 8000966:	2008      	movs	r0, #8
 8000968:	0005      	movs	r5, r0
 800096a:	e042      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800096c <??ZbZclAttrDefaultWrite_12>:
 800096c:	2010      	movs	r0, #16
 800096e:	0005      	movs	r5, r0
 8000970:	e03f      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000972 <??ZbZclAttrDefaultWrite_10>:
 8000972:	6938      	ldr	r0, [r7, #16]
 8000974:	2800      	cmp	r0, #0
 8000976:	d102      	bne.n	800097e <??ZbZclAttrDefaultWrite_15>
 8000978:	2089      	movs	r0, #137	@ 0x89
 800097a:	4681      	mov	r9, r0
 800097c:	e039      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800097e <??ZbZclAttrDefaultWrite_15>:
 800097e:	7820      	ldrb	r0, [r4, #0]
 8000980:	0001      	movs	r1, r0
 8000982:	b2c9      	uxtb	r1, r1
 8000984:	29ff      	cmp	r1, #255	@ 0xff
 8000986:	d105      	bne.n	8000994 <??ZbZclAttrDefaultWrite_16>
 8000988:	21ff      	movs	r1, #255	@ 0xff
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	7011      	strb	r1, [r2, #0]
 800098e:	2100      	movs	r1, #0
 8000990:	000d      	movs	r5, r1
 8000992:	e02e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000994 <??ZbZclAttrDefaultWrite_16>:
 8000994:	0001      	movs	r1, r0
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	1c49      	adds	r1, r1, #1
 800099a:	000d      	movs	r5, r1
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	42a9      	cmp	r1, r5
 80009a0:	d202      	bcs.n	80009a8 <??ZbZclAttrDefaultWrite_17>
 80009a2:	2189      	movs	r1, #137	@ 0x89
 80009a4:	4689      	mov	r9, r1
 80009a6:	e024      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009a8 <??ZbZclAttrDefaultWrite_17>:
 80009a8:	e023      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009aa <??ZbZclAttrDefaultWrite_11>:
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d202      	bcs.n	80009b6 <??ZbZclAttrDefaultWrite_18>
 80009b0:	2089      	movs	r0, #137	@ 0x89
 80009b2:	4681      	mov	r9, r0
 80009b4:	e01d      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009b6 <??ZbZclAttrDefaultWrite_18>:
 80009b6:	0020      	movs	r0, r4
 80009b8:	f006 faa9 	bl	8006f0e <pletoh16>
 80009bc:	4682      	mov	sl, r0
 80009be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009c2:	4650      	mov	r0, sl
 80009c4:	000a      	movs	r2, r1
 80009c6:	b280      	uxth	r0, r0
 80009c8:	4290      	cmp	r0, r2
 80009ca:	d105      	bne.n	80009d8 <??ZbZclAttrDefaultWrite_19>
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f006 faea 	bl	8006fa6 <putle16>
 80009d2:	2000      	movs	r0, #0
 80009d4:	0005      	movs	r5, r0
 80009d6:	e00c      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009d8 <??ZbZclAttrDefaultWrite_19>:
 80009d8:	4650      	mov	r0, sl
 80009da:	b280      	uxth	r0, r0
 80009dc:	1c80      	adds	r0, r0, #2
 80009de:	0005      	movs	r5, r0
 80009e0:	6938      	ldr	r0, [r7, #16]
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d202      	bcs.n	80009ec <??ZbZclAttrDefaultWrite_20>
 80009e6:	2089      	movs	r0, #137	@ 0x89
 80009e8:	4681      	mov	r9, r0
 80009ea:	e002      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ec <??ZbZclAttrDefaultWrite_20>:
 80009ec:	e001      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ee <??ZbZclAttrDefaultWrite_13>:
 80009ee:	2086      	movs	r0, #134	@ 0x86
 80009f0:	4681      	mov	r9, r0

080009f2 <??ZbZclAttrDefaultWrite_14>:
 80009f2:	4648      	mov	r0, r9
 80009f4:	b2c0      	uxtb	r0, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d10e      	bne.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 80009fa:	4640      	mov	r0, r8
 80009fc:	b280      	uxth	r0, r0
 80009fe:	07c0      	lsls	r0, r0, #31
 8000a00:	d40a      	bmi.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d008      	beq.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a06:	9500      	str	r5, [sp, #0]
 8000a08:	46a2      	mov	sl, r4
 8000a0a:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	4651      	mov	r1, sl
 8000a12:	4658      	mov	r0, fp
 8000a14:	f015 f883 	bl	8015b1e <__aeabi_memcpy>

08000a18 <??ZbZclAttrDefaultWrite_21>:
 8000a18:	4648      	mov	r0, r9
 8000a1a:	b2c0      	uxtb	r0, r0

08000a1c <??ZbZclAttrDefaultWrite_1>:
 8000a1c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a20 <ZbZclAttrDefaultValue>:
 8000a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	0004      	movs	r4, r0
 8000a26:	4688      	mov	r8, r1
 8000a28:	0015      	movs	r5, r2
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	f05f 37ff 	movs.w	r7, #4294967295
 8000a30:	0020      	movs	r0, r4
 8000a32:	b2c0      	uxtb	r0, r0
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f000 80a1 	beq.w	8000b7c <??ZbZclAttrDefaultValue_0>
 8000a3a:	2808      	cmp	r0, #8
 8000a3c:	f000 80e7 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000a40:	2809      	cmp	r0, #9
 8000a42:	f000 80da 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000a46:	280a      	cmp	r0, #10
 8000a48:	f000 80cd 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000a4c:	280b      	cmp	r0, #11
 8000a4e:	f000 80c0 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000a52:	280c      	cmp	r0, #12
 8000a54:	f000 80b3 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000a58:	280d      	cmp	r0, #13
 8000a5a:	f000 80a6 	beq.w	8000baa <??ZbZclAttrDefaultValue_6>
 8000a5e:	280e      	cmp	r0, #14
 8000a60:	f000 8099 	beq.w	8000b96 <??ZbZclAttrDefaultValue_7>
 8000a64:	280f      	cmp	r0, #15
 8000a66:	f000 808c 	beq.w	8000b82 <??ZbZclAttrDefaultValue_8>
 8000a6a:	2810      	cmp	r0, #16
 8000a6c:	f000 80db 	beq.w	8000c26 <??ZbZclAttrDefaultValue_9>
 8000a70:	2818      	cmp	r0, #24
 8000a72:	f000 8126 	beq.w	8000cc2 <??ZbZclAttrDefaultValue_10>
 8000a76:	2819      	cmp	r0, #25
 8000a78:	f000 8119 	beq.w	8000cae <??ZbZclAttrDefaultValue_11>
 8000a7c:	281a      	cmp	r0, #26
 8000a7e:	f000 810c 	beq.w	8000c9a <??ZbZclAttrDefaultValue_12>
 8000a82:	281b      	cmp	r0, #27
 8000a84:	f000 80ff 	beq.w	8000c86 <??ZbZclAttrDefaultValue_13>
 8000a88:	281c      	cmp	r0, #28
 8000a8a:	f000 80f2 	beq.w	8000c72 <??ZbZclAttrDefaultValue_14>
 8000a8e:	281d      	cmp	r0, #29
 8000a90:	f000 80e5 	beq.w	8000c5e <??ZbZclAttrDefaultValue_15>
 8000a94:	281e      	cmp	r0, #30
 8000a96:	f000 80d8 	beq.w	8000c4a <??ZbZclAttrDefaultValue_16>
 8000a9a:	281f      	cmp	r0, #31
 8000a9c:	f000 80cb 	beq.w	8000c36 <??ZbZclAttrDefaultValue_17>
 8000aa0:	2820      	cmp	r0, #32
 8000aa2:	f000 80b4 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000aa6:	2821      	cmp	r0, #33	@ 0x21
 8000aa8:	f000 80a7 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000aac:	2822      	cmp	r0, #34	@ 0x22
 8000aae:	f000 809a 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000ab2:	2823      	cmp	r0, #35	@ 0x23
 8000ab4:	f000 808d 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000ab8:	2824      	cmp	r0, #36	@ 0x24
 8000aba:	f000 8080 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000abe:	2825      	cmp	r0, #37	@ 0x25
 8000ac0:	d073      	beq.n	8000baa <??ZbZclAttrDefaultValue_6>
 8000ac2:	2826      	cmp	r0, #38	@ 0x26
 8000ac4:	d067      	beq.n	8000b96 <??ZbZclAttrDefaultValue_7>
 8000ac6:	2827      	cmp	r0, #39	@ 0x27
 8000ac8:	d05b      	beq.n	8000b82 <??ZbZclAttrDefaultValue_8>
 8000aca:	2828      	cmp	r0, #40	@ 0x28
 8000acc:	f000 814b 	beq.w	8000d66 <??ZbZclAttrDefaultValue_18>
 8000ad0:	2829      	cmp	r0, #41	@ 0x29
 8000ad2:	f000 813e 	beq.w	8000d52 <??ZbZclAttrDefaultValue_19>
 8000ad6:	282a      	cmp	r0, #42	@ 0x2a
 8000ad8:	f000 8131 	beq.w	8000d3e <??ZbZclAttrDefaultValue_20>
 8000adc:	282b      	cmp	r0, #43	@ 0x2b
 8000ade:	f000 8124 	beq.w	8000d2a <??ZbZclAttrDefaultValue_21>
 8000ae2:	282c      	cmp	r0, #44	@ 0x2c
 8000ae4:	f000 8117 	beq.w	8000d16 <??ZbZclAttrDefaultValue_22>
 8000ae8:	282d      	cmp	r0, #45	@ 0x2d
 8000aea:	f000 810a 	beq.w	8000d02 <??ZbZclAttrDefaultValue_23>
 8000aee:	282e      	cmp	r0, #46	@ 0x2e
 8000af0:	f000 80fd 	beq.w	8000cee <??ZbZclAttrDefaultValue_24>
 8000af4:	282f      	cmp	r0, #47	@ 0x2f
 8000af6:	f000 80f0 	beq.w	8000cda <??ZbZclAttrDefaultValue_25>
 8000afa:	2830      	cmp	r0, #48	@ 0x30
 8000afc:	f000 8087 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000b00:	2831      	cmp	r0, #49	@ 0x31
 8000b02:	d07a      	beq.n	8000bfa <??ZbZclAttrDefaultValue_2>
 8000b04:	2838      	cmp	r0, #56	@ 0x38
 8000b06:	f000 813a 	beq.w	8000d7e <??ZbZclAttrDefaultValue_26>
 8000b0a:	2839      	cmp	r0, #57	@ 0x39
 8000b0c:	f000 8142 	beq.w	8000d94 <??ZbZclAttrDefaultValue_27>
 8000b10:	283a      	cmp	r0, #58	@ 0x3a
 8000b12:	f000 8149 	beq.w	8000da8 <??ZbZclAttrDefaultValue_28>
 8000b16:	2841      	cmp	r0, #65	@ 0x41
 8000b18:	f000 8152 	beq.w	8000dc0 <??ZbZclAttrDefaultValue_29>
 8000b1c:	2842      	cmp	r0, #66	@ 0x42
 8000b1e:	f000 8159 	beq.w	8000dd4 <??ZbZclAttrDefaultValue_30>
 8000b22:	2843      	cmp	r0, #67	@ 0x43
 8000b24:	f000 8160 	beq.w	8000de8 <??ZbZclAttrDefaultValue_31>
 8000b28:	2844      	cmp	r0, #68	@ 0x44
 8000b2a:	f000 8168 	beq.w	8000dfe <??ZbZclAttrDefaultValue_32>
 8000b2e:	2848      	cmp	r0, #72	@ 0x48
 8000b30:	f000 818b 	beq.w	8000e4a <??ZbZclAttrDefaultValue_33>
 8000b34:	284c      	cmp	r0, #76	@ 0x4c
 8000b36:	f000 8192 	beq.w	8000e5e <??ZbZclAttrDefaultValue_34>
 8000b3a:	2850      	cmp	r0, #80	@ 0x50
 8000b3c:	f000 8199 	beq.w	8000e72 <??ZbZclAttrDefaultValue_35>
 8000b40:	2851      	cmp	r0, #81	@ 0x51
 8000b42:	f000 81a0 	beq.w	8000e86 <??ZbZclAttrDefaultValue_36>
 8000b46:	28e0      	cmp	r0, #224	@ 0xe0
 8000b48:	f000 81a7 	beq.w	8000e9a <??ZbZclAttrDefaultValue_37>
 8000b4c:	28e1      	cmp	r0, #225	@ 0xe1
 8000b4e:	f000 81ae 	beq.w	8000eae <??ZbZclAttrDefaultValue_38>
 8000b52:	28e2      	cmp	r0, #226	@ 0xe2
 8000b54:	f000 81b5 	beq.w	8000ec2 <??ZbZclAttrDefaultValue_39>
 8000b58:	28e8      	cmp	r0, #232	@ 0xe8
 8000b5a:	f000 81bc 	beq.w	8000ed6 <??ZbZclAttrDefaultValue_40>
 8000b5e:	28e9      	cmp	r0, #233	@ 0xe9
 8000b60:	f000 81c3 	beq.w	8000eea <??ZbZclAttrDefaultValue_41>
 8000b64:	28ea      	cmp	r0, #234	@ 0xea
 8000b66:	f000 81ca 	beq.w	8000efe <??ZbZclAttrDefaultValue_42>
 8000b6a:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6c:	f000 8152 	beq.w	8000e14 <??ZbZclAttrDefaultValue_43>
 8000b70:	28f1      	cmp	r0, #241	@ 0xf1
 8000b72:	f000 815b 	beq.w	8000e2c <??ZbZclAttrDefaultValue_44>
 8000b76:	28ff      	cmp	r0, #255	@ 0xff
 8000b78:	f040 81cb 	bne.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b7c <??ZbZclAttrDefaultValue_0>:
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	0007      	movs	r7, r0
 8000b80:	e1c7      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000b82 <??ZbZclAttrDefaultValue_8>:
 8000b82:	1c70      	adds	r0, r6, #1
 8000b84:	4285      	cmp	r5, r0
 8000b86:	f0c0 81c4 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b8a <??ZbZclAttrDefaultValue_47>:
 8000b8a:	20ff      	movs	r0, #255	@ 0xff
 8000b8c:	f888 0000 	strb.w	r0, [r8]
 8000b90:	f118 0801 	adds.w	r8, r8, #1
 8000b94:	1c76      	adds	r6, r6, #1

08000b96 <??ZbZclAttrDefaultValue_7>:
 8000b96:	1c70      	adds	r0, r6, #1
 8000b98:	4285      	cmp	r5, r0
 8000b9a:	f0c0 81ba 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b9e <??ZbZclAttrDefaultValue_48>:
 8000b9e:	20ff      	movs	r0, #255	@ 0xff
 8000ba0:	f888 0000 	strb.w	r0, [r8]
 8000ba4:	f118 0801 	adds.w	r8, r8, #1
 8000ba8:	1c76      	adds	r6, r6, #1

08000baa <??ZbZclAttrDefaultValue_6>:
 8000baa:	1c70      	adds	r0, r6, #1
 8000bac:	4285      	cmp	r5, r0
 8000bae:	f0c0 81b0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bb2 <??ZbZclAttrDefaultValue_49>:
 8000bb2:	20ff      	movs	r0, #255	@ 0xff
 8000bb4:	f888 0000 	strb.w	r0, [r8]
 8000bb8:	f118 0801 	adds.w	r8, r8, #1
 8000bbc:	1c76      	adds	r6, r6, #1

08000bbe <??ZbZclAttrDefaultValue_5>:
 8000bbe:	1c70      	adds	r0, r6, #1
 8000bc0:	4285      	cmp	r5, r0
 8000bc2:	f0c0 81a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bc6 <??ZbZclAttrDefaultValue_50>:
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	f888 0000 	strb.w	r0, [r8]
 8000bcc:	f118 0801 	adds.w	r8, r8, #1
 8000bd0:	1c76      	adds	r6, r6, #1

08000bd2 <??ZbZclAttrDefaultValue_4>:
 8000bd2:	1c70      	adds	r0, r6, #1
 8000bd4:	4285      	cmp	r5, r0
 8000bd6:	f0c0 819c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bda <??ZbZclAttrDefaultValue_51>:
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	f888 0000 	strb.w	r0, [r8]
 8000be0:	f118 0801 	adds.w	r8, r8, #1
 8000be4:	1c76      	adds	r6, r6, #1

08000be6 <??ZbZclAttrDefaultValue_3>:
 8000be6:	1c70      	adds	r0, r6, #1
 8000be8:	4285      	cmp	r5, r0
 8000bea:	f0c0 8192 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bee <??ZbZclAttrDefaultValue_52>:
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	f888 0000 	strb.w	r0, [r8]
 8000bf4:	f118 0801 	adds.w	r8, r8, #1
 8000bf8:	1c76      	adds	r6, r6, #1

08000bfa <??ZbZclAttrDefaultValue_2>:
 8000bfa:	1c70      	adds	r0, r6, #1
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	f0c0 8188 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c02 <??ZbZclAttrDefaultValue_53>:
 8000c02:	20ff      	movs	r0, #255	@ 0xff
 8000c04:	f888 0000 	strb.w	r0, [r8]
 8000c08:	f118 0801 	adds.w	r8, r8, #1
 8000c0c:	1c76      	adds	r6, r6, #1

08000c0e <??ZbZclAttrDefaultValue_1>:
 8000c0e:	1c70      	adds	r0, r6, #1
 8000c10:	4285      	cmp	r5, r0
 8000c12:	f0c0 817e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c16 <??ZbZclAttrDefaultValue_54>:
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	f888 0000 	strb.w	r0, [r8]
 8000c1c:	f118 0801 	adds.w	r8, r8, #1
 8000c20:	1c76      	adds	r6, r6, #1
 8000c22:	0037      	movs	r7, r6
 8000c24:	e175      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c26 <??ZbZclAttrDefaultValue_9>:
 8000c26:	2000      	movs	r0, #0
 8000c28:	f888 0000 	strb.w	r0, [r8]
 8000c2c:	f118 0801 	adds.w	r8, r8, #1
 8000c30:	2001      	movs	r0, #1
 8000c32:	0007      	movs	r7, r0
 8000c34:	e16d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c36 <??ZbZclAttrDefaultValue_17>:
 8000c36:	1c70      	adds	r0, r6, #1
 8000c38:	4285      	cmp	r5, r0
 8000c3a:	f0c0 816a 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c3e <??ZbZclAttrDefaultValue_55>:
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f888 0000 	strb.w	r0, [r8]
 8000c44:	f118 0801 	adds.w	r8, r8, #1
 8000c48:	1c76      	adds	r6, r6, #1

08000c4a <??ZbZclAttrDefaultValue_16>:
 8000c4a:	1c70      	adds	r0, r6, #1
 8000c4c:	4285      	cmp	r5, r0
 8000c4e:	f0c0 8160 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c52 <??ZbZclAttrDefaultValue_56>:
 8000c52:	2000      	movs	r0, #0
 8000c54:	f888 0000 	strb.w	r0, [r8]
 8000c58:	f118 0801 	adds.w	r8, r8, #1
 8000c5c:	1c76      	adds	r6, r6, #1

08000c5e <??ZbZclAttrDefaultValue_15>:
 8000c5e:	1c70      	adds	r0, r6, #1
 8000c60:	4285      	cmp	r5, r0
 8000c62:	f0c0 8156 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c66 <??ZbZclAttrDefaultValue_57>:
 8000c66:	2000      	movs	r0, #0
 8000c68:	f888 0000 	strb.w	r0, [r8]
 8000c6c:	f118 0801 	adds.w	r8, r8, #1
 8000c70:	1c76      	adds	r6, r6, #1

08000c72 <??ZbZclAttrDefaultValue_14>:
 8000c72:	1c70      	adds	r0, r6, #1
 8000c74:	4285      	cmp	r5, r0
 8000c76:	f0c0 814c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c7a <??ZbZclAttrDefaultValue_58>:
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f888 0000 	strb.w	r0, [r8]
 8000c80:	f118 0801 	adds.w	r8, r8, #1
 8000c84:	1c76      	adds	r6, r6, #1

08000c86 <??ZbZclAttrDefaultValue_13>:
 8000c86:	1c70      	adds	r0, r6, #1
 8000c88:	4285      	cmp	r5, r0
 8000c8a:	f0c0 8142 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c8e <??ZbZclAttrDefaultValue_59>:
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f888 0000 	strb.w	r0, [r8]
 8000c94:	f118 0801 	adds.w	r8, r8, #1
 8000c98:	1c76      	adds	r6, r6, #1

08000c9a <??ZbZclAttrDefaultValue_12>:
 8000c9a:	1c70      	adds	r0, r6, #1
 8000c9c:	4285      	cmp	r5, r0
 8000c9e:	f0c0 8138 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ca2 <??ZbZclAttrDefaultValue_60>:
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f888 0000 	strb.w	r0, [r8]
 8000ca8:	f118 0801 	adds.w	r8, r8, #1
 8000cac:	1c76      	adds	r6, r6, #1

08000cae <??ZbZclAttrDefaultValue_11>:
 8000cae:	1c70      	adds	r0, r6, #1
 8000cb0:	4285      	cmp	r5, r0
 8000cb2:	f0c0 812e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cb6 <??ZbZclAttrDefaultValue_61>:
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f888 0000 	strb.w	r0, [r8]
 8000cbc:	f118 0801 	adds.w	r8, r8, #1
 8000cc0:	1c76      	adds	r6, r6, #1

08000cc2 <??ZbZclAttrDefaultValue_10>:
 8000cc2:	1c70      	adds	r0, r6, #1
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	f0c0 8124 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cca <??ZbZclAttrDefaultValue_62>:
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f888 0000 	strb.w	r0, [r8]
 8000cd0:	f118 0801 	adds.w	r8, r8, #1
 8000cd4:	1c76      	adds	r6, r6, #1
 8000cd6:	0037      	movs	r7, r6
 8000cd8:	e11b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000cda <??ZbZclAttrDefaultValue_25>:
 8000cda:	1c70      	adds	r0, r6, #1
 8000cdc:	4285      	cmp	r5, r0
 8000cde:	f0c0 8118 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ce2 <??ZbZclAttrDefaultValue_63>:
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f888 0000 	strb.w	r0, [r8]
 8000ce8:	f118 0801 	adds.w	r8, r8, #1
 8000cec:	1c76      	adds	r6, r6, #1

08000cee <??ZbZclAttrDefaultValue_24>:
 8000cee:	1c70      	adds	r0, r6, #1
 8000cf0:	4285      	cmp	r5, r0
 8000cf2:	f0c0 810e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cf6 <??ZbZclAttrDefaultValue_64>:
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f888 0000 	strb.w	r0, [r8]
 8000cfc:	f118 0801 	adds.w	r8, r8, #1
 8000d00:	1c76      	adds	r6, r6, #1

08000d02 <??ZbZclAttrDefaultValue_23>:
 8000d02:	1c70      	adds	r0, r6, #1
 8000d04:	4285      	cmp	r5, r0
 8000d06:	f0c0 8104 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d0a <??ZbZclAttrDefaultValue_65>:
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f888 0000 	strb.w	r0, [r8]
 8000d10:	f118 0801 	adds.w	r8, r8, #1
 8000d14:	1c76      	adds	r6, r6, #1

08000d16 <??ZbZclAttrDefaultValue_22>:
 8000d16:	1c70      	adds	r0, r6, #1
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	f0c0 80fa 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d1e <??ZbZclAttrDefaultValue_66>:
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f888 0000 	strb.w	r0, [r8]
 8000d24:	f118 0801 	adds.w	r8, r8, #1
 8000d28:	1c76      	adds	r6, r6, #1

08000d2a <??ZbZclAttrDefaultValue_21>:
 8000d2a:	1c70      	adds	r0, r6, #1
 8000d2c:	4285      	cmp	r5, r0
 8000d2e:	f0c0 80f0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d32 <??ZbZclAttrDefaultValue_67>:
 8000d32:	2000      	movs	r0, #0
 8000d34:	f888 0000 	strb.w	r0, [r8]
 8000d38:	f118 0801 	adds.w	r8, r8, #1
 8000d3c:	1c76      	adds	r6, r6, #1

08000d3e <??ZbZclAttrDefaultValue_20>:
 8000d3e:	1c70      	adds	r0, r6, #1
 8000d40:	4285      	cmp	r5, r0
 8000d42:	f0c0 80e6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d46 <??ZbZclAttrDefaultValue_68>:
 8000d46:	2000      	movs	r0, #0
 8000d48:	f888 0000 	strb.w	r0, [r8]
 8000d4c:	f118 0801 	adds.w	r8, r8, #1
 8000d50:	1c76      	adds	r6, r6, #1

08000d52 <??ZbZclAttrDefaultValue_19>:
 8000d52:	1c70      	adds	r0, r6, #1
 8000d54:	4285      	cmp	r5, r0
 8000d56:	f0c0 80dc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d5a <??ZbZclAttrDefaultValue_69>:
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f888 0000 	strb.w	r0, [r8]
 8000d60:	f118 0801 	adds.w	r8, r8, #1
 8000d64:	1c76      	adds	r6, r6, #1

08000d66 <??ZbZclAttrDefaultValue_18>:
 8000d66:	1c70      	adds	r0, r6, #1
 8000d68:	4285      	cmp	r5, r0
 8000d6a:	f0c0 80d2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d6e <??ZbZclAttrDefaultValue_70>:
 8000d6e:	2080      	movs	r0, #128	@ 0x80
 8000d70:	f888 0000 	strb.w	r0, [r8]
 8000d74:	f118 0801 	adds.w	r8, r8, #1
 8000d78:	1c76      	adds	r6, r6, #1
 8000d7a:	0037      	movs	r7, r6
 8000d7c:	e0c9      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d7e <??ZbZclAttrDefaultValue_26>:
 8000d7e:	2d02      	cmp	r5, #2
 8000d80:	f0c0 80c7 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d84 <??ZbZclAttrDefaultValue_71>:
 8000d84:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f006 f90c 	bl	8006fa6 <putle16>
 8000d8e:	2002      	movs	r0, #2
 8000d90:	0007      	movs	r7, r0
 8000d92:	e0be      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d94 <??ZbZclAttrDefaultValue_27>:
 8000d94:	2d04      	cmp	r5, #4
 8000d96:	f0c0 80bc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d9a <??ZbZclAttrDefaultValue_72>:
 8000d9a:	495f      	ldr	r1, [pc, #380]	@ (8000f18 <??DataTable1>)
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	f006 f914 	bl	8006fca <putle32>
 8000da2:	2004      	movs	r0, #4
 8000da4:	0007      	movs	r7, r0
 8000da6:	e0b4      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000da8 <??ZbZclAttrDefaultValue_28>:
 8000da8:	2d08      	cmp	r5, #8
 8000daa:	f0c0 80b2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dae <??ZbZclAttrDefaultValue_73>:
 8000dae:	f07f 0201 	mvns.w	r2, #1
 8000db2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f1c <??DataTable1_1>)
 8000db4:	4640      	mov	r0, r8
 8000db6:	f006 f93b 	bl	8007030 <putle64>
 8000dba:	2008      	movs	r0, #8
 8000dbc:	0007      	movs	r7, r0
 8000dbe:	e0a8      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc0 <??ZbZclAttrDefaultValue_29>:
 8000dc0:	2d02      	cmp	r5, #2
 8000dc2:	f0c0 80a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc6 <??ZbZclAttrDefaultValue_74>:
 8000dc6:	21ff      	movs	r1, #255	@ 0xff
 8000dc8:	4640      	mov	r0, r8
 8000dca:	f006 f8ec 	bl	8006fa6 <putle16>
 8000dce:	2002      	movs	r0, #2
 8000dd0:	0007      	movs	r7, r0
 8000dd2:	e09e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dd4 <??ZbZclAttrDefaultValue_30>:
 8000dd4:	2d02      	cmp	r5, #2
 8000dd6:	f0c0 809c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dda <??ZbZclAttrDefaultValue_75>:
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4640      	mov	r0, r8
 8000dde:	f006 f8e2 	bl	8006fa6 <putle16>
 8000de2:	2002      	movs	r0, #2
 8000de4:	0007      	movs	r7, r0
 8000de6:	e094      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000de8 <??ZbZclAttrDefaultValue_31>:
 8000de8:	2d04      	cmp	r5, #4
 8000dea:	f0c0 8092 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dee <??ZbZclAttrDefaultValue_76>:
 8000dee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000df2:	4640      	mov	r0, r8
 8000df4:	f006 f8e9 	bl	8006fca <putle32>
 8000df8:	2004      	movs	r0, #4
 8000dfa:	0007      	movs	r7, r0
 8000dfc:	e089      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dfe <??ZbZclAttrDefaultValue_32>:
 8000dfe:	2d04      	cmp	r5, #4
 8000e00:	f0c0 8087 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000e04 <??ZbZclAttrDefaultValue_77>:
 8000e04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f006 f8de 	bl	8006fca <putle32>
 8000e0e:	2004      	movs	r0, #4
 8000e10:	0007      	movs	r7, r0
 8000e12:	e07e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e14 <??ZbZclAttrDefaultValue_43>:
 8000e14:	2d08      	cmp	r5, #8
 8000e16:	d37c      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e18 <??ZbZclAttrDefaultValue_78>:
 8000e18:	f05f 32ff 	movs.w	r2, #4294967295
 8000e1c:	f05f 33ff 	movs.w	r3, #4294967295
 8000e20:	4640      	mov	r0, r8
 8000e22:	f006 f905 	bl	8007030 <putle64>
 8000e26:	2008      	movs	r0, #8
 8000e28:	0007      	movs	r7, r0
 8000e2a:	e072      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e2c <??ZbZclAttrDefaultValue_44>:
 8000e2c:	2d10      	cmp	r5, #16
 8000e2e:	d370      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e30 <??ZbZclAttrDefaultValue_79>:
 8000e30:	f05f 0910 	movs.w	r9, #16
 8000e34:	f05f 0a00 	movs.w	sl, #0
 8000e38:	46c3      	mov	fp, r8
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4658      	mov	r0, fp
 8000e40:	f006 fe90 	bl	8007b64 <__aeabi_memset>
 8000e44:	2010      	movs	r0, #16
 8000e46:	0007      	movs	r7, r0
 8000e48:	e063      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4a <??ZbZclAttrDefaultValue_33>:
 8000e4a:	2d02      	cmp	r5, #2
 8000e4c:	d361      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4e <??ZbZclAttrDefaultValue_80>:
 8000e4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e52:	4640      	mov	r0, r8
 8000e54:	f006 f8a7 	bl	8006fa6 <putle16>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	0007      	movs	r7, r0
 8000e5c:	e059      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e5e <??ZbZclAttrDefaultValue_34>:
 8000e5e:	2d02      	cmp	r5, #2
 8000e60:	d357      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e62 <??ZbZclAttrDefaultValue_81>:
 8000e62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e66:	4640      	mov	r0, r8
 8000e68:	f006 f89d 	bl	8006fa6 <putle16>
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	0007      	movs	r7, r0
 8000e70:	e04f      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e72 <??ZbZclAttrDefaultValue_35>:
 8000e72:	2d02      	cmp	r5, #2
 8000e74:	d34d      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e76 <??ZbZclAttrDefaultValue_82>:
 8000e76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	f006 f893 	bl	8006fa6 <putle16>
 8000e80:	2002      	movs	r0, #2
 8000e82:	0007      	movs	r7, r0
 8000e84:	e045      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e86 <??ZbZclAttrDefaultValue_36>:
 8000e86:	2d02      	cmp	r5, #2
 8000e88:	d343      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e8a <??ZbZclAttrDefaultValue_83>:
 8000e8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f006 f889 	bl	8006fa6 <putle16>
 8000e94:	2002      	movs	r0, #2
 8000e96:	0007      	movs	r7, r0
 8000e98:	e03b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9a <??ZbZclAttrDefaultValue_37>:
 8000e9a:	2d04      	cmp	r5, #4
 8000e9c:	d339      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9e <??ZbZclAttrDefaultValue_84>:
 8000e9e:	f05f 31ff 	movs.w	r1, #4294967295
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	f006 f891 	bl	8006fca <putle32>
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	0007      	movs	r7, r0
 8000eac:	e031      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eae <??ZbZclAttrDefaultValue_38>:
 8000eae:	2d04      	cmp	r5, #4
 8000eb0:	d32f      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eb2 <??ZbZclAttrDefaultValue_85>:
 8000eb2:	f05f 31ff 	movs.w	r1, #4294967295
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	f006 f887 	bl	8006fca <putle32>
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	0007      	movs	r7, r0
 8000ec0:	e027      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec2 <??ZbZclAttrDefaultValue_39>:
 8000ec2:	2d04      	cmp	r5, #4
 8000ec4:	d325      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec6 <??ZbZclAttrDefaultValue_86>:
 8000ec6:	f05f 31ff 	movs.w	r1, #4294967295
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f006 f87d 	bl	8006fca <putle32>
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	0007      	movs	r7, r0
 8000ed4:	e01d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ed6 <??ZbZclAttrDefaultValue_40>:
 8000ed6:	2d02      	cmp	r5, #2
 8000ed8:	d31b      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eda <??ZbZclAttrDefaultValue_87>:
 8000eda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f006 f861 	bl	8006fa6 <putle16>
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	0007      	movs	r7, r0
 8000ee8:	e013      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eea <??ZbZclAttrDefaultValue_41>:
 8000eea:	2d02      	cmp	r5, #2
 8000eec:	d311      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eee <??ZbZclAttrDefaultValue_88>:
 8000eee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	f006 f857 	bl	8006fa6 <putle16>
 8000ef8:	2002      	movs	r0, #2
 8000efa:	0007      	movs	r7, r0
 8000efc:	e009      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000efe <??ZbZclAttrDefaultValue_42>:
 8000efe:	2d04      	cmp	r5, #4
 8000f00:	d307      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f02 <??ZbZclAttrDefaultValue_89>:
 8000f02:	f05f 31ff 	movs.w	r1, #4294967295
 8000f06:	4640      	mov	r0, r8
 8000f08:	f006 f85f 	bl	8006fca <putle32>
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	0007      	movs	r7, r0
 8000f10:	e7ff      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f12 <??ZbZclAttrDefaultValue_45>:
 8000f12:	0038      	movs	r0, r7
 8000f14:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f18 <??DataTable1>:
 8000f18:	fffe 00ff                                   ....

08000f1c <??DataTable1_1>:
 8000f1c:	ffff 001f                                   ....

08000f20 <ZbZclAttrTypeLength>:
 8000f20:	0001      	movs	r1, r0
 8000f22:	0008      	movs	r0, r1
 8000f24:	b2c0      	uxtb	r0, r0
 8000f26:	2800      	cmp	r0, #0
 8000f28:	f000 8081 	beq.w	800102e <??ZbZclAttrTypeLength_0>
 8000f2c:	2808      	cmp	r0, #8
 8000f2e:	d06c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f30:	2809      	cmp	r0, #9
 8000f32:	d06c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	d06c      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f38:	280b      	cmp	r0, #11
 8000f3a:	d06c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f3c:	280c      	cmp	r0, #12
 8000f3e:	d06c      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f40:	280d      	cmp	r0, #13
 8000f42:	d06c      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f44:	280e      	cmp	r0, #14
 8000f46:	d06c      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f48:	280f      	cmp	r0, #15
 8000f4a:	d06c      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f4c:	2810      	cmp	r0, #16
 8000f4e:	d05c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f50:	2818      	cmp	r0, #24
 8000f52:	d05a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f54:	2819      	cmp	r0, #25
 8000f56:	d05a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f58:	281a      	cmp	r0, #26
 8000f5a:	d05a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f5c:	281b      	cmp	r0, #27
 8000f5e:	d05a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f60:	281c      	cmp	r0, #28
 8000f62:	d05a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f64:	281d      	cmp	r0, #29
 8000f66:	d05a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f68:	281e      	cmp	r0, #30
 8000f6a:	d05a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f6c:	281f      	cmp	r0, #31
 8000f6e:	d05a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f70:	2820      	cmp	r0, #32
 8000f72:	d04a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f74:	2821      	cmp	r0, #33	@ 0x21
 8000f76:	d04a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f78:	2822      	cmp	r0, #34	@ 0x22
 8000f7a:	d04a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f7c:	2823      	cmp	r0, #35	@ 0x23
 8000f7e:	d04a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f80:	2824      	cmp	r0, #36	@ 0x24
 8000f82:	d04a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f84:	2825      	cmp	r0, #37	@ 0x25
 8000f86:	d04a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f88:	2826      	cmp	r0, #38	@ 0x26
 8000f8a:	d04a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f8c:	2827      	cmp	r0, #39	@ 0x27
 8000f8e:	d04a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f90:	2828      	cmp	r0, #40	@ 0x28
 8000f92:	d03a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f94:	2829      	cmp	r0, #41	@ 0x29
 8000f96:	d03a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f98:	282a      	cmp	r0, #42	@ 0x2a
 8000f9a:	d03a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f9c:	282b      	cmp	r0, #43	@ 0x2b
 8000f9e:	d03a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fa0:	282c      	cmp	r0, #44	@ 0x2c
 8000fa2:	d03a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000fa4:	282d      	cmp	r0, #45	@ 0x2d
 8000fa6:	d03a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000fa8:	282e      	cmp	r0, #46	@ 0x2e
 8000faa:	d03a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000fac:	282f      	cmp	r0, #47	@ 0x2f
 8000fae:	d03a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fb0:	2830      	cmp	r0, #48	@ 0x30
 8000fb2:	d02a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000fb4:	2831      	cmp	r0, #49	@ 0x31
 8000fb6:	d02a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fb8:	2838      	cmp	r0, #56	@ 0x38
 8000fba:	d028      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fbc:	2839      	cmp	r0, #57	@ 0x39
 8000fbe:	d02a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fc0:	283a      	cmp	r0, #58	@ 0x3a
 8000fc2:	d030      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fc4:	2841      	cmp	r0, #65	@ 0x41
 8000fc6:	d032      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fc8:	2842      	cmp	r0, #66	@ 0x42
 8000fca:	d030      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fcc:	2843      	cmp	r0, #67	@ 0x43
 8000fce:	d02e      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd0:	2844      	cmp	r0, #68	@ 0x44
 8000fd2:	d02c      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd4:	2848      	cmp	r0, #72	@ 0x48
 8000fd6:	d02a      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd8:	284c      	cmp	r0, #76	@ 0x4c
 8000fda:	d028      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fdc:	2850      	cmp	r0, #80	@ 0x50
 8000fde:	d026      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe0:	2851      	cmp	r0, #81	@ 0x51
 8000fe2:	d024      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe4:	28e0      	cmp	r0, #224	@ 0xe0
 8000fe6:	d016      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fe8:	28e1      	cmp	r0, #225	@ 0xe1
 8000fea:	d014      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fec:	28e2      	cmp	r0, #226	@ 0xe2
 8000fee:	d012      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ff0:	28e8      	cmp	r0, #232	@ 0xe8
 8000ff2:	d00c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff4:	28e9      	cmp	r0, #233	@ 0xe9
 8000ff6:	d00a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff8:	28ea      	cmp	r0, #234	@ 0xea
 8000ffa:	d00c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ffc:	28f0      	cmp	r0, #240	@ 0xf0
 8000ffe:	d012      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8001000:	28f1      	cmp	r0, #241	@ 0xf1
 8001002:	d012      	beq.n	800102a <??ZbZclAttrTypeLength_9>
 8001004:	28ff      	cmp	r0, #255	@ 0xff
 8001006:	d012      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8001008:	e013      	b.n	8001032 <??ZbZclAttrTypeLength_10>

0800100a <??ZbZclAttrTypeLength_1>:
 800100a:	2001      	movs	r0, #1
 800100c:	e012      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800100e <??ZbZclAttrTypeLength_2>:
 800100e:	2002      	movs	r0, #2
 8001010:	e010      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001012 <??ZbZclAttrTypeLength_3>:
 8001012:	2003      	movs	r0, #3
 8001014:	e00e      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001016 <??ZbZclAttrTypeLength_4>:
 8001016:	2004      	movs	r0, #4
 8001018:	e00c      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101a <??ZbZclAttrTypeLength_5>:
 800101a:	2005      	movs	r0, #5
 800101c:	e00a      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101e <??ZbZclAttrTypeLength_6>:
 800101e:	2006      	movs	r0, #6
 8001020:	e008      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001022 <??ZbZclAttrTypeLength_7>:
 8001022:	2007      	movs	r0, #7
 8001024:	e006      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001026 <??ZbZclAttrTypeLength_8>:
 8001026:	2008      	movs	r0, #8
 8001028:	e004      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102a <??ZbZclAttrTypeLength_9>:
 800102a:	2010      	movs	r0, #16
 800102c:	e002      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102e <??ZbZclAttrTypeLength_0>:
 800102e:	2000      	movs	r0, #0
 8001030:	e000      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001032 <??ZbZclAttrTypeLength_10>:
 8001032:	2000      	movs	r0, #0

08001034 <??ZbZclAttrTypeLength_11>:
 8001034:	4770      	bx	lr

08001036 <ZbZclAttrParseLength>:
 8001036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103a:	0006      	movs	r6, r0
 800103c:	000c      	movs	r4, r1
 800103e:	0015      	movs	r5, r2
 8001040:	001f      	movs	r7, r3
 8001042:	0038      	movs	r0, r7
 8001044:	b2c0      	uxtb	r0, r0
 8001046:	280f      	cmp	r0, #15
 8001048:	d302      	bcc.n	8001050 <??ZbZclAttrParseLength_0>
 800104a:	f05f 30ff 	movs.w	r0, #4294967295
 800104e:	e0a1      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001050 <??ZbZclAttrParseLength_0>:
 8001050:	0030      	movs	r0, r6
 8001052:	b2c0      	uxtb	r0, r0
 8001054:	f7ff ff64 	bl	8000f20 <ZbZclAttrTypeLength>
 8001058:	0001      	movs	r1, r0
 800105a:	2901      	cmp	r1, #1
 800105c:	db06      	blt.n	800106c <??ZbZclAttrParseLength_2>
 800105e:	428d      	cmp	r5, r1
 8001060:	d202      	bcs.n	8001068 <??ZbZclAttrParseLength_3>
 8001062:	f05f 30ff 	movs.w	r0, #4294967295
 8001066:	e095      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001068 <??ZbZclAttrParseLength_3>:
 8001068:	0008      	movs	r0, r1
 800106a:	e093      	b.n	8001194 <??ZbZclAttrParseLength_1>

0800106c <??ZbZclAttrParseLength_2>:
 800106c:	2c00      	cmp	r4, #0
 800106e:	d101      	bne.n	8001074 <??ZbZclAttrParseLength_4>
 8001070:	0028      	movs	r0, r5
 8001072:	e08f      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001074 <??ZbZclAttrParseLength_4>:
 8001074:	f05f 39ff 	movs.w	r9, #4294967295
 8001078:	0030      	movs	r0, r6
 800107a:	b2c0      	uxtb	r0, r0
 800107c:	3841      	subs	r0, #65	@ 0x41
 800107e:	2801      	cmp	r0, #1
 8001080:	d90a      	bls.n	8001098 <??ZbZclAttrParseLength_5>
 8001082:	1e80      	subs	r0, r0, #2
 8001084:	2801      	cmp	r0, #1
 8001086:	d914      	bls.n	80010b2 <??ZbZclAttrParseLength_6>
 8001088:	1f40      	subs	r0, r0, #5
 800108a:	d027      	beq.n	80010dc <??ZbZclAttrParseLength_7>
 800108c:	1f00      	subs	r0, r0, #4
 800108e:	d04b      	beq.n	8001128 <??ZbZclAttrParseLength_8>
 8001090:	1f00      	subs	r0, r0, #4
 8001092:	2801      	cmp	r0, #1
 8001094:	d922      	bls.n	80010dc <??ZbZclAttrParseLength_7>
 8001096:	e074      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001098 <??ZbZclAttrParseLength_5>:
 8001098:	2d00      	cmp	r5, #0
 800109a:	d072      	beq.n	8001182 <??ZbZclAttrParseLength_10>

0800109c <??ZbZclAttrParseLength_11>:
 800109c:	7820      	ldrb	r0, [r4, #0]
 800109e:	28ff      	cmp	r0, #255	@ 0xff
 80010a0:	d102      	bne.n	80010a8 <??ZbZclAttrParseLength_12>
 80010a2:	f05f 0901 	movs.w	r9, #1
 80010a6:	e003      	b.n	80010b0 <??ZbZclAttrParseLength_13>

080010a8 <??ZbZclAttrParseLength_12>:
 80010a8:	f894 9000 	ldrb.w	r9, [r4]
 80010ac:	f119 0901 	adds.w	r9, r9, #1

080010b0 <??ZbZclAttrParseLength_13>:
 80010b0:	e067      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010b2 <??ZbZclAttrParseLength_6>:
 80010b2:	2d02      	cmp	r5, #2
 80010b4:	d365      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010b6 <??ZbZclAttrParseLength_14>:
 80010b6:	0020      	movs	r0, r4
 80010b8:	f005 ff29 	bl	8006f0e <pletoh16>
 80010bc:	4680      	mov	r8, r0
 80010be:	4640      	mov	r0, r8
 80010c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010c4:	b280      	uxth	r0, r0
 80010c6:	4288      	cmp	r0, r1
 80010c8:	d102      	bne.n	80010d0 <??ZbZclAttrParseLength_15>
 80010ca:	f05f 0902 	movs.w	r9, #2
 80010ce:	e004      	b.n	80010da <??ZbZclAttrParseLength_16>

080010d0 <??ZbZclAttrParseLength_15>:
 80010d0:	46c1      	mov	r9, r8
 80010d2:	fa1f f989 	uxth.w	r9, r9
 80010d6:	f119 0902 	adds.w	r9, r9, #2

080010da <??ZbZclAttrParseLength_16>:
 80010da:	e052      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010dc <??ZbZclAttrParseLength_7>:
 80010dc:	2d03      	cmp	r5, #3
 80010de:	d350      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010e0 <??ZbZclAttrParseLength_17>:
 80010e0:	7820      	ldrb	r0, [r4, #0]
 80010e2:	4683      	mov	fp, r0
 80010e4:	1c60      	adds	r0, r4, #1
 80010e6:	f005 ff12 	bl	8006f0e <pletoh16>
 80010ea:	4680      	mov	r8, r0
 80010ec:	2003      	movs	r0, #3
 80010ee:	4681      	mov	r9, r0

080010f0 <??ZbZclAttrParseLength_18>:
 80010f0:	4640      	mov	r0, r8
 80010f2:	b280      	uxth	r0, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d016      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 80010f8:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80010fc:	4640      	mov	r0, r8
 80010fe:	b280      	uxth	r0, r0
 8001100:	4550      	cmp	r0, sl
 8001102:	d010      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	ebb5 0209 	subs.w	r2, r5, r9
 800110c:	eb04 0109 	add.w	r1, r4, r9
 8001110:	4658      	mov	r0, fp
 8001112:	b2c0      	uxtb	r0, r0
 8001114:	f7ff ff8f 	bl	8001036 <ZbZclAttrParseLength>
 8001118:	2800      	cmp	r0, #0
 800111a:	d43b      	bmi.n	8001194 <??ZbZclAttrParseLength_1>

0800111c <??ZbZclAttrParseLength_20>:
 800111c:	eb10 0909 	adds.w	r9, r0, r9
 8001120:	eb1a 0808 	adds.w	r8, sl, r8
 8001124:	e7e4      	b.n	80010f0 <??ZbZclAttrParseLength_18>

08001126 <??ZbZclAttrParseLength_19>:
 8001126:	e02c      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001128 <??ZbZclAttrParseLength_8>:
 8001128:	2d02      	cmp	r5, #2
 800112a:	d32a      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

0800112c <??ZbZclAttrParseLength_21>:
 800112c:	0020      	movs	r0, r4
 800112e:	f005 feee 	bl	8006f0e <pletoh16>
 8001132:	4680      	mov	r8, r0
 8001134:	2002      	movs	r0, #2
 8001136:	4681      	mov	r9, r0

08001138 <??ZbZclAttrParseLength_22>:
 8001138:	4640      	mov	r0, r8
 800113a:	b280      	uxth	r0, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d01f      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 8001140:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8001144:	4640      	mov	r0, r8
 8001146:	b280      	uxth	r0, r0
 8001148:	4550      	cmp	r0, sl
 800114a:	d019      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 800114c:	f119 0001 	adds.w	r0, r9, #1
 8001150:	4285      	cmp	r5, r0
 8001152:	d315      	bcc.n	8001180 <??ZbZclAttrParseLength_23>

08001154 <??ZbZclAttrParseLength_24>:
 8001154:	f814 0009 	ldrb.w	r0, [r4, r9]
 8001158:	4683      	mov	fp, r0
 800115a:	f119 0901 	adds.w	r9, r9, #1
 800115e:	1c7b      	adds	r3, r7, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	ebb5 0209 	subs.w	r2, r5, r9
 8001166:	eb04 0109 	add.w	r1, r4, r9
 800116a:	4658      	mov	r0, fp
 800116c:	b2c0      	uxtb	r0, r0
 800116e:	f7ff ff62 	bl	8001036 <ZbZclAttrParseLength>
 8001172:	2800      	cmp	r0, #0
 8001174:	d404      	bmi.n	8001180 <??ZbZclAttrParseLength_23>

08001176 <??ZbZclAttrParseLength_25>:
 8001176:	eb10 0909 	adds.w	r9, r0, r9
 800117a:	eb1a 0808 	adds.w	r8, sl, r8
 800117e:	e7db      	b.n	8001138 <??ZbZclAttrParseLength_22>

08001180 <??ZbZclAttrParseLength_23>:
 8001180:	e7ff      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001182 <??ZbZclAttrParseLength_10>:
 8001182:	f1b9 0f00 	cmp.w	r9, #0
 8001186:	d401      	bmi.n	800118c <??ZbZclAttrParseLength_26>
 8001188:	454d      	cmp	r5, r9
 800118a:	d202      	bcs.n	8001192 <??ZbZclAttrParseLength_27>

0800118c <??ZbZclAttrParseLength_26>:
 800118c:	f05f 30ff 	movs.w	r0, #4294967295
 8001190:	e000      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001192 <??ZbZclAttrParseLength_27>:
 8001192:	4648      	mov	r0, r9

08001194 <??ZbZclAttrParseLength_1>:
 8001194:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001198 <ZbZclAttrIsAnalog>:
 8001198:	0001      	movs	r1, r0
 800119a:	0008      	movs	r0, r1
 800119c:	b2c0      	uxtb	r0, r0
 800119e:	2820      	cmp	r0, #32
 80011a0:	db05      	blt.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011a2:	0008      	movs	r0, r1
 80011a4:	b2c0      	uxtb	r0, r0
 80011a6:	2828      	cmp	r0, #40	@ 0x28
 80011a8:	da01      	bge.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011aa:	2001      	movs	r0, #1
 80011ac:	e026      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011ae <??ZbZclAttrIsAnalog_0>:
 80011ae:	0008      	movs	r0, r1
 80011b0:	b2c0      	uxtb	r0, r0
 80011b2:	2828      	cmp	r0, #40	@ 0x28
 80011b4:	db05      	blt.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011b6:	0008      	movs	r0, r1
 80011b8:	b2c0      	uxtb	r0, r0
 80011ba:	2830      	cmp	r0, #48	@ 0x30
 80011bc:	da01      	bge.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011be:	2001      	movs	r0, #1
 80011c0:	e01c      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011c2 <??ZbZclAttrIsAnalog_2>:
 80011c2:	0008      	movs	r0, r1
 80011c4:	b2c0      	uxtb	r0, r0
 80011c6:	2838      	cmp	r0, #56	@ 0x38
 80011c8:	d007      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011ca:	0008      	movs	r0, r1
 80011cc:	b2c0      	uxtb	r0, r0
 80011ce:	2839      	cmp	r0, #57	@ 0x39
 80011d0:	d003      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011d2:	0008      	movs	r0, r1
 80011d4:	b2c0      	uxtb	r0, r0
 80011d6:	283a      	cmp	r0, #58	@ 0x3a
 80011d8:	d101      	bne.n	80011de <??ZbZclAttrIsAnalog_4>

080011da <??ZbZclAttrIsAnalog_3>:
 80011da:	2001      	movs	r0, #1
 80011dc:	e00e      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011de <??ZbZclAttrIsAnalog_4>:
 80011de:	0008      	movs	r0, r1
 80011e0:	b2c0      	uxtb	r0, r0
 80011e2:	28e0      	cmp	r0, #224	@ 0xe0
 80011e4:	d007      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011e6:	0008      	movs	r0, r1
 80011e8:	b2c0      	uxtb	r0, r0
 80011ea:	28e1      	cmp	r0, #225	@ 0xe1
 80011ec:	d003      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011ee:	0008      	movs	r0, r1
 80011f0:	b2c0      	uxtb	r0, r0
 80011f2:	28e2      	cmp	r0, #226	@ 0xe2
 80011f4:	d101      	bne.n	80011fa <??ZbZclAttrIsAnalog_6>

080011f6 <??ZbZclAttrIsAnalog_5>:
 80011f6:	2001      	movs	r0, #1
 80011f8:	e000      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011fa <??ZbZclAttrIsAnalog_6>:
 80011fa:	2000      	movs	r0, #0

080011fc <??ZbZclAttrIsAnalog_1>:
 80011fc:	4770      	bx	lr
	...

08001200 <ZbZclAppendInteger>:
 8001200:	b4f0      	push	{r4, r5, r6, r7}
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1
 8001206:	9904      	ldr	r1, [sp, #16]
 8001208:	2700      	movs	r7, #0
 800120a:	2600      	movs	r6, #0
 800120c:	0010      	movs	r0, r2
 800120e:	b2c0      	uxtb	r0, r0
 8001210:	2808      	cmp	r0, #8
 8001212:	f000 80b2 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001216:	2809      	cmp	r0, #9
 8001218:	f000 80a4 	beq.w	8001364 <??ZbZclAppendInteger_1>
 800121c:	280a      	cmp	r0, #10
 800121e:	f000 8096 	beq.w	800134e <??ZbZclAppendInteger_2>
 8001222:	280b      	cmp	r0, #11
 8001224:	f000 8088 	beq.w	8001338 <??ZbZclAppendInteger_3>
 8001228:	280c      	cmp	r0, #12
 800122a:	d07a      	beq.n	8001322 <??ZbZclAppendInteger_4>
 800122c:	280d      	cmp	r0, #13
 800122e:	d06d      	beq.n	800130c <??ZbZclAppendInteger_5>
 8001230:	280e      	cmp	r0, #14
 8001232:	d060      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001234:	280f      	cmp	r0, #15
 8001236:	d053      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001238:	2810      	cmp	r0, #16
 800123a:	d042      	beq.n	80012c2 <??ZbZclAppendInteger_8>
 800123c:	2818      	cmp	r0, #24
 800123e:	f000 809c 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001242:	2819      	cmp	r0, #25
 8001244:	f000 808e 	beq.w	8001364 <??ZbZclAppendInteger_1>
 8001248:	281a      	cmp	r0, #26
 800124a:	f000 8080 	beq.w	800134e <??ZbZclAppendInteger_2>
 800124e:	281b      	cmp	r0, #27
 8001250:	d072      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001252:	281c      	cmp	r0, #28
 8001254:	d065      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001256:	281d      	cmp	r0, #29
 8001258:	d058      	beq.n	800130c <??ZbZclAppendInteger_5>
 800125a:	281e      	cmp	r0, #30
 800125c:	d04b      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 800125e:	281f      	cmp	r0, #31
 8001260:	d03e      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001262:	2820      	cmp	r0, #32
 8001264:	f000 8089 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001268:	2821      	cmp	r0, #33	@ 0x21
 800126a:	d07b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800126c:	2822      	cmp	r0, #34	@ 0x22
 800126e:	d06e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001270:	2823      	cmp	r0, #35	@ 0x23
 8001272:	d061      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001274:	2824      	cmp	r0, #36	@ 0x24
 8001276:	d054      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001278:	2825      	cmp	r0, #37	@ 0x25
 800127a:	d047      	beq.n	800130c <??ZbZclAppendInteger_5>
 800127c:	2826      	cmp	r0, #38	@ 0x26
 800127e:	d03a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001280:	2827      	cmp	r0, #39	@ 0x27
 8001282:	d02d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001284:	2828      	cmp	r0, #40	@ 0x28
 8001286:	d078      	beq.n	800137a <??ZbZclAppendInteger_0>
 8001288:	2829      	cmp	r0, #41	@ 0x29
 800128a:	d06b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800128c:	282a      	cmp	r0, #42	@ 0x2a
 800128e:	d05e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001290:	282b      	cmp	r0, #43	@ 0x2b
 8001292:	d051      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001294:	282c      	cmp	r0, #44	@ 0x2c
 8001296:	d044      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001298:	282d      	cmp	r0, #45	@ 0x2d
 800129a:	d037      	beq.n	800130c <??ZbZclAppendInteger_5>
 800129c:	282e      	cmp	r0, #46	@ 0x2e
 800129e:	d02a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 80012a0:	282f      	cmp	r0, #47	@ 0x2f
 80012a2:	d01d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012a4:	2830      	cmp	r0, #48	@ 0x30
 80012a6:	d068      	beq.n	800137a <??ZbZclAppendInteger_0>
 80012a8:	2831      	cmp	r0, #49	@ 0x31
 80012aa:	d05b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012ac:	28e2      	cmp	r0, #226	@ 0xe2
 80012ae:	d043      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012b0:	28e8      	cmp	r0, #232	@ 0xe8
 80012b2:	d057      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b4:	28e9      	cmp	r0, #233	@ 0xe9
 80012b6:	d055      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b8:	28ea      	cmp	r0, #234	@ 0xea
 80012ba:	d03d      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012bc:	28f0      	cmp	r0, #240	@ 0xf0
 80012be:	d00f      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012c0:	e064      	b.n	800138c <??ZbZclAppendInteger_9>

080012c2 <??ZbZclAppendInteger_8>:
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d102      	bne.n	80012cc <??ZbZclAppendInteger_10>
 80012c6:	f05f 30ff 	movs.w	r0, #4294967295
 80012ca:	e061      	b.n	8001390 <??ZbZclAppendInteger_11>

080012cc <??ZbZclAppendInteger_10>:
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d101      	bne.n	80012d4 <??ZbZclAppendInteger_12>
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d001      	beq.n	80012d8 <??ZbZclAppendInteger_13>

080012d4 <??ZbZclAppendInteger_12>:
 80012d4:	2001      	movs	r0, #1
 80012d6:	e000      	b.n	80012da <??ZbZclAppendInteger_14>

080012d8 <??ZbZclAppendInteger_13>:
 80012d8:	2000      	movs	r0, #0

080012da <??ZbZclAppendInteger_14>:
 80012da:	7018      	strb	r0, [r3, #0]
 80012dc:	2001      	movs	r0, #1
 80012de:	e057      	b.n	8001390 <??ZbZclAppendInteger_11>

080012e0 <??ZbZclAppendInteger_7>:
 80012e0:	428f      	cmp	r7, r1
 80012e2:	d302      	bcc.n	80012ea <??ZbZclAppendInteger_15>
 80012e4:	f05f 30ff 	movs.w	r0, #4294967295
 80012e8:	e052      	b.n	8001390 <??ZbZclAppendInteger_11>

080012ea <??ZbZclAppendInteger_15>:
 80012ea:	55dc      	strb	r4, [r3, r7]
 80012ec:	1c7f      	adds	r7, r7, #1
 80012ee:	0a24      	lsrs	r4, r4, #8
 80012f0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80012f4:	0a2d      	lsrs	r5, r5, #8

080012f6 <??ZbZclAppendInteger_6>:
 80012f6:	428f      	cmp	r7, r1
 80012f8:	d302      	bcc.n	8001300 <??ZbZclAppendInteger_16>
 80012fa:	f05f 30ff 	movs.w	r0, #4294967295
 80012fe:	e047      	b.n	8001390 <??ZbZclAppendInteger_11>

08001300 <??ZbZclAppendInteger_16>:
 8001300:	55dc      	strb	r4, [r3, r7]
 8001302:	1c7f      	adds	r7, r7, #1
 8001304:	0a24      	lsrs	r4, r4, #8
 8001306:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800130a:	0a2d      	lsrs	r5, r5, #8

0800130c <??ZbZclAppendInteger_5>:
 800130c:	428f      	cmp	r7, r1
 800130e:	d302      	bcc.n	8001316 <??ZbZclAppendInteger_17>
 8001310:	f05f 30ff 	movs.w	r0, #4294967295
 8001314:	e03c      	b.n	8001390 <??ZbZclAppendInteger_11>

08001316 <??ZbZclAppendInteger_17>:
 8001316:	55dc      	strb	r4, [r3, r7]
 8001318:	1c7f      	adds	r7, r7, #1
 800131a:	0a24      	lsrs	r4, r4, #8
 800131c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001320:	0a2d      	lsrs	r5, r5, #8

08001322 <??ZbZclAppendInteger_4>:
 8001322:	428f      	cmp	r7, r1
 8001324:	d302      	bcc.n	800132c <??ZbZclAppendInteger_18>
 8001326:	f05f 30ff 	movs.w	r0, #4294967295
 800132a:	e031      	b.n	8001390 <??ZbZclAppendInteger_11>

0800132c <??ZbZclAppendInteger_18>:
 800132c:	55dc      	strb	r4, [r3, r7]
 800132e:	1c7f      	adds	r7, r7, #1
 8001330:	0a24      	lsrs	r4, r4, #8
 8001332:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001336:	0a2d      	lsrs	r5, r5, #8

08001338 <??ZbZclAppendInteger_3>:
 8001338:	428f      	cmp	r7, r1
 800133a:	d302      	bcc.n	8001342 <??ZbZclAppendInteger_19>
 800133c:	f05f 30ff 	movs.w	r0, #4294967295
 8001340:	e026      	b.n	8001390 <??ZbZclAppendInteger_11>

08001342 <??ZbZclAppendInteger_19>:
 8001342:	55dc      	strb	r4, [r3, r7]
 8001344:	1c7f      	adds	r7, r7, #1
 8001346:	0a24      	lsrs	r4, r4, #8
 8001348:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800134c:	0a2d      	lsrs	r5, r5, #8

0800134e <??ZbZclAppendInteger_2>:
 800134e:	428f      	cmp	r7, r1
 8001350:	d302      	bcc.n	8001358 <??ZbZclAppendInteger_20>
 8001352:	f05f 30ff 	movs.w	r0, #4294967295
 8001356:	e01b      	b.n	8001390 <??ZbZclAppendInteger_11>

08001358 <??ZbZclAppendInteger_20>:
 8001358:	55dc      	strb	r4, [r3, r7]
 800135a:	1c7f      	adds	r7, r7, #1
 800135c:	0a24      	lsrs	r4, r4, #8
 800135e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001362:	0a2d      	lsrs	r5, r5, #8

08001364 <??ZbZclAppendInteger_1>:
 8001364:	428f      	cmp	r7, r1
 8001366:	d302      	bcc.n	800136e <??ZbZclAppendInteger_21>
 8001368:	f05f 30ff 	movs.w	r0, #4294967295
 800136c:	e010      	b.n	8001390 <??ZbZclAppendInteger_11>

0800136e <??ZbZclAppendInteger_21>:
 800136e:	55dc      	strb	r4, [r3, r7]
 8001370:	1c7f      	adds	r7, r7, #1
 8001372:	0a24      	lsrs	r4, r4, #8
 8001374:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001378:	0a2d      	lsrs	r5, r5, #8

0800137a <??ZbZclAppendInteger_0>:
 800137a:	428f      	cmp	r7, r1
 800137c:	d302      	bcc.n	8001384 <??ZbZclAppendInteger_22>
 800137e:	f05f 30ff 	movs.w	r0, #4294967295
 8001382:	e005      	b.n	8001390 <??ZbZclAppendInteger_11>

08001384 <??ZbZclAppendInteger_22>:
 8001384:	55dc      	strb	r4, [r3, r7]
 8001386:	1c7f      	adds	r7, r7, #1
 8001388:	0038      	movs	r0, r7
 800138a:	e001      	b.n	8001390 <??ZbZclAppendInteger_11>

0800138c <??ZbZclAppendInteger_9>:
 800138c:	f05f 30ff 	movs.w	r0, #4294967295

08001390 <??ZbZclAppendInteger_11>:
 8001390:	bcf0      	pop	{r4, r5, r6, r7}
 8001392:	4770      	bx	lr

08001394 <ZbZclParseInteger>:
 8001394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001398:	4683      	mov	fp, r0
 800139a:	000e      	movs	r6, r1
 800139c:	4692      	mov	sl, r2
 800139e:	2700      	movs	r7, #0
 80013a0:	2400      	movs	r4, #0
 80013a2:	2500      	movs	r5, #0
 80013a4:	f05f 0800 	movs.w	r8, #0
 80013a8:	f05f 0900 	movs.w	r9, #0
 80013ac:	4658      	mov	r0, fp
 80013ae:	b2c0      	uxtb	r0, r0
 80013b0:	f000 f91e 	bl	80015f0 <ZbZclAttrIsInteger>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d105      	bne.n	80013c4 <??ZbZclParseInteger_0>
 80013b8:	208d      	movs	r0, #141	@ 0x8d
 80013ba:	f88a 0000 	strb.w	r0, [sl]
 80013be:	2000      	movs	r0, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	e113      	b.n	80015ec <??ZbZclParseInteger_1>

080013c4 <??ZbZclParseInteger_0>:
 80013c4:	2000      	movs	r0, #0
 80013c6:	f88a 0000 	strb.w	r0, [sl]
 80013ca:	4658      	mov	r0, fp
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	2808      	cmp	r0, #8
 80013d0:	f000 8097 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013d4:	2809      	cmp	r0, #9
 80013d6:	f000 808a 	beq.w	80014ee <??ZbZclParseInteger_3>
 80013da:	280a      	cmp	r0, #10
 80013dc:	d07d      	beq.n	80014da <??ZbZclParseInteger_4>
 80013de:	280b      	cmp	r0, #11
 80013e0:	d071      	beq.n	80014c6 <??ZbZclParseInteger_5>
 80013e2:	280c      	cmp	r0, #12
 80013e4:	d065      	beq.n	80014b2 <??ZbZclParseInteger_6>
 80013e6:	280d      	cmp	r0, #13
 80013e8:	d059      	beq.n	800149e <??ZbZclParseInteger_7>
 80013ea:	280e      	cmp	r0, #14
 80013ec:	d04d      	beq.n	800148a <??ZbZclParseInteger_8>
 80013ee:	280f      	cmp	r0, #15
 80013f0:	d046      	beq.n	8001480 <??ZbZclParseInteger_9>
 80013f2:	2810      	cmp	r0, #16
 80013f4:	f000 8085 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013f8:	2818      	cmp	r0, #24
 80013fa:	f000 8082 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013fe:	2819      	cmp	r0, #25
 8001400:	d075      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001402:	281a      	cmp	r0, #26
 8001404:	d069      	beq.n	80014da <??ZbZclParseInteger_4>
 8001406:	281b      	cmp	r0, #27
 8001408:	d05d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800140a:	281c      	cmp	r0, #28
 800140c:	d051      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800140e:	281d      	cmp	r0, #29
 8001410:	d045      	beq.n	800149e <??ZbZclParseInteger_7>
 8001412:	281e      	cmp	r0, #30
 8001414:	d039      	beq.n	800148a <??ZbZclParseInteger_8>
 8001416:	281f      	cmp	r0, #31
 8001418:	d032      	beq.n	8001480 <??ZbZclParseInteger_9>
 800141a:	2820      	cmp	r0, #32
 800141c:	d071      	beq.n	8001502 <??ZbZclParseInteger_2>
 800141e:	2821      	cmp	r0, #33	@ 0x21
 8001420:	d065      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001422:	2822      	cmp	r0, #34	@ 0x22
 8001424:	d059      	beq.n	80014da <??ZbZclParseInteger_4>
 8001426:	2823      	cmp	r0, #35	@ 0x23
 8001428:	d04d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800142a:	2824      	cmp	r0, #36	@ 0x24
 800142c:	d041      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800142e:	2825      	cmp	r0, #37	@ 0x25
 8001430:	d035      	beq.n	800149e <??ZbZclParseInteger_7>
 8001432:	2826      	cmp	r0, #38	@ 0x26
 8001434:	d029      	beq.n	800148a <??ZbZclParseInteger_8>
 8001436:	2827      	cmp	r0, #39	@ 0x27
 8001438:	d022      	beq.n	8001480 <??ZbZclParseInteger_9>
 800143a:	2828      	cmp	r0, #40	@ 0x28
 800143c:	f000 80ac 	beq.w	8001598 <??ZbZclParseInteger_10>
 8001440:	2829      	cmp	r0, #41	@ 0x29
 8001442:	f000 809f 	beq.w	8001584 <??ZbZclParseInteger_11>
 8001446:	282a      	cmp	r0, #42	@ 0x2a
 8001448:	f000 8092 	beq.w	8001570 <??ZbZclParseInteger_12>
 800144c:	282b      	cmp	r0, #43	@ 0x2b
 800144e:	f000 8085 	beq.w	800155c <??ZbZclParseInteger_13>
 8001452:	282c      	cmp	r0, #44	@ 0x2c
 8001454:	d078      	beq.n	8001548 <??ZbZclParseInteger_14>
 8001456:	282d      	cmp	r0, #45	@ 0x2d
 8001458:	d06c      	beq.n	8001534 <??ZbZclParseInteger_15>
 800145a:	282e      	cmp	r0, #46	@ 0x2e
 800145c:	d060      	beq.n	8001520 <??ZbZclParseInteger_16>
 800145e:	282f      	cmp	r0, #47	@ 0x2f
 8001460:	d059      	beq.n	8001516 <??ZbZclParseInteger_17>
 8001462:	2830      	cmp	r0, #48	@ 0x30
 8001464:	d04d      	beq.n	8001502 <??ZbZclParseInteger_2>
 8001466:	2831      	cmp	r0, #49	@ 0x31
 8001468:	d041      	beq.n	80014ee <??ZbZclParseInteger_3>
 800146a:	28e2      	cmp	r0, #226	@ 0xe2
 800146c:	d02b      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800146e:	28e8      	cmp	r0, #232	@ 0xe8
 8001470:	d03d      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001472:	28e9      	cmp	r0, #233	@ 0xe9
 8001474:	d03b      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001476:	28ea      	cmp	r0, #234	@ 0xea
 8001478:	d025      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800147a:	28f0      	cmp	r0, #240	@ 0xf0
 800147c:	f040 80b1 	bne.w	80015e2 <??ZbZclParseInteger_18>

08001480 <??ZbZclParseInteger_9>:
 8001480:	5df0      	ldrb	r0, [r6, r7]
 8001482:	2100      	movs	r1, #0
 8001484:	4304      	orrs	r4, r0
 8001486:	430d      	orrs	r5, r1
 8001488:	1c7f      	adds	r7, r7, #1

0800148a <??ZbZclParseInteger_8>:
 800148a:	5df0      	ldrb	r0, [r6, r7]
 800148c:	2100      	movs	r1, #0
 800148e:	003a      	movs	r2, r7
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	f006 fc04 	bl	8007ca0 <__aeabi_llsl>
 8001498:	4304      	orrs	r4, r0
 800149a:	430d      	orrs	r5, r1
 800149c:	1c7f      	adds	r7, r7, #1

0800149e <??ZbZclParseInteger_7>:
 800149e:	5df0      	ldrb	r0, [r6, r7]
 80014a0:	2100      	movs	r1, #0
 80014a2:	003a      	movs	r2, r7
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	00d2      	lsls	r2, r2, #3
 80014a8:	f006 fbfa 	bl	8007ca0 <__aeabi_llsl>
 80014ac:	4304      	orrs	r4, r0
 80014ae:	430d      	orrs	r5, r1
 80014b0:	1c7f      	adds	r7, r7, #1

080014b2 <??ZbZclParseInteger_6>:
 80014b2:	5df0      	ldrb	r0, [r6, r7]
 80014b4:	2100      	movs	r1, #0
 80014b6:	003a      	movs	r2, r7
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	00d2      	lsls	r2, r2, #3
 80014bc:	f006 fbf0 	bl	8007ca0 <__aeabi_llsl>
 80014c0:	4304      	orrs	r4, r0
 80014c2:	430d      	orrs	r5, r1
 80014c4:	1c7f      	adds	r7, r7, #1

080014c6 <??ZbZclParseInteger_5>:
 80014c6:	5df0      	ldrb	r0, [r6, r7]
 80014c8:	2100      	movs	r1, #0
 80014ca:	003a      	movs	r2, r7
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	f006 fbe6 	bl	8007ca0 <__aeabi_llsl>
 80014d4:	4304      	orrs	r4, r0
 80014d6:	430d      	orrs	r5, r1
 80014d8:	1c7f      	adds	r7, r7, #1

080014da <??ZbZclParseInteger_4>:
 80014da:	5df0      	ldrb	r0, [r6, r7]
 80014dc:	2100      	movs	r1, #0
 80014de:	003a      	movs	r2, r7
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	00d2      	lsls	r2, r2, #3
 80014e4:	f006 fbdc 	bl	8007ca0 <__aeabi_llsl>
 80014e8:	4304      	orrs	r4, r0
 80014ea:	430d      	orrs	r5, r1
 80014ec:	1c7f      	adds	r7, r7, #1

080014ee <??ZbZclParseInteger_3>:
 80014ee:	5df0      	ldrb	r0, [r6, r7]
 80014f0:	2100      	movs	r1, #0
 80014f2:	003a      	movs	r2, r7
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	f006 fbd2 	bl	8007ca0 <__aeabi_llsl>
 80014fc:	4304      	orrs	r4, r0
 80014fe:	430d      	orrs	r5, r1
 8001500:	1c7f      	adds	r7, r7, #1

08001502 <??ZbZclParseInteger_2>:
 8001502:	5df0      	ldrb	r0, [r6, r7]
 8001504:	2100      	movs	r1, #0
 8001506:	003a      	movs	r2, r7
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	f006 fbc8 	bl	8007ca0 <__aeabi_llsl>
 8001510:	4320      	orrs	r0, r4
 8001512:	4329      	orrs	r1, r5
 8001514:	e06a      	b.n	80015ec <??ZbZclParseInteger_1>

08001516 <??ZbZclParseInteger_17>:
 8001516:	5df0      	ldrb	r0, [r6, r7]
 8001518:	2100      	movs	r1, #0
 800151a:	4304      	orrs	r4, r0
 800151c:	430d      	orrs	r5, r1
 800151e:	1c7f      	adds	r7, r7, #1

08001520 <??ZbZclParseInteger_16>:
 8001520:	5df0      	ldrb	r0, [r6, r7]
 8001522:	2100      	movs	r1, #0
 8001524:	003a      	movs	r2, r7
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	f006 fbb9 	bl	8007ca0 <__aeabi_llsl>
 800152e:	4304      	orrs	r4, r0
 8001530:	430d      	orrs	r5, r1
 8001532:	1c7f      	adds	r7, r7, #1

08001534 <??ZbZclParseInteger_15>:
 8001534:	5df0      	ldrb	r0, [r6, r7]
 8001536:	2100      	movs	r1, #0
 8001538:	003a      	movs	r2, r7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	f006 fbaf 	bl	8007ca0 <__aeabi_llsl>
 8001542:	4304      	orrs	r4, r0
 8001544:	430d      	orrs	r5, r1
 8001546:	1c7f      	adds	r7, r7, #1

08001548 <??ZbZclParseInteger_14>:
 8001548:	5df0      	ldrb	r0, [r6, r7]
 800154a:	2100      	movs	r1, #0
 800154c:	003a      	movs	r2, r7
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	f006 fba5 	bl	8007ca0 <__aeabi_llsl>
 8001556:	4304      	orrs	r4, r0
 8001558:	430d      	orrs	r5, r1
 800155a:	1c7f      	adds	r7, r7, #1

0800155c <??ZbZclParseInteger_13>:
 800155c:	5df0      	ldrb	r0, [r6, r7]
 800155e:	2100      	movs	r1, #0
 8001560:	003a      	movs	r2, r7
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	f006 fb9b 	bl	8007ca0 <__aeabi_llsl>
 800156a:	4304      	orrs	r4, r0
 800156c:	430d      	orrs	r5, r1
 800156e:	1c7f      	adds	r7, r7, #1

08001570 <??ZbZclParseInteger_12>:
 8001570:	5df0      	ldrb	r0, [r6, r7]
 8001572:	2100      	movs	r1, #0
 8001574:	003a      	movs	r2, r7
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	f006 fb91 	bl	8007ca0 <__aeabi_llsl>
 800157e:	4304      	orrs	r4, r0
 8001580:	430d      	orrs	r5, r1
 8001582:	1c7f      	adds	r7, r7, #1

08001584 <??ZbZclParseInteger_11>:
 8001584:	5df0      	ldrb	r0, [r6, r7]
 8001586:	2100      	movs	r1, #0
 8001588:	003a      	movs	r2, r7
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	f006 fb87 	bl	8007ca0 <__aeabi_llsl>
 8001592:	4304      	orrs	r4, r0
 8001594:	430d      	orrs	r5, r1
 8001596:	1c7f      	adds	r7, r7, #1

08001598 <??ZbZclParseInteger_10>:
 8001598:	5df0      	ldrb	r0, [r6, r7]
 800159a:	2100      	movs	r1, #0
 800159c:	003a      	movs	r2, r7
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	f006 fb7d 	bl	8007ca0 <__aeabi_llsl>
 80015a6:	4320      	orrs	r0, r4
 80015a8:	4329      	orrs	r1, r5
 80015aa:	003a      	movs	r2, r7
 80015ac:	1c57      	adds	r7, r2, #1
 80015ae:	5cb2      	ldrb	r2, [r6, r2]
 80015b0:	0612      	lsls	r2, r2, #24
 80015b2:	d515      	bpl.n	80015e0 <??ZbZclParseInteger_19>
 80015b4:	2f08      	cmp	r7, #8
 80015b6:	d213      	bcs.n	80015e0 <??ZbZclParseInteger_19>
 80015b8:	0004      	movs	r4, r0
 80015ba:	000d      	movs	r5, r1
 80015bc:	2001      	movs	r0, #1
 80015be:	2100      	movs	r1, #0
 80015c0:	f1d7 0208 	rsbs	r2, r7, #8
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	f006 fb6a 	bl	8007ca0 <__aeabi_llsl>
 80015cc:	1e40      	subs	r0, r0, #1
 80015ce:	f171 0100 	sbcs.w	r1, r1, #0
 80015d2:	003a      	movs	r2, r7
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	00d2      	lsls	r2, r2, #3
 80015d8:	f006 fb62 	bl	8007ca0 <__aeabi_llsl>
 80015dc:	4320      	orrs	r0, r4
 80015de:	4329      	orrs	r1, r5

080015e0 <??ZbZclParseInteger_19>:
 80015e0:	e004      	b.n	80015ec <??ZbZclParseInteger_1>

080015e2 <??ZbZclParseInteger_18>:
 80015e2:	208d      	movs	r0, #141	@ 0x8d
 80015e4:	f88a 0000 	strb.w	r0, [sl]
 80015e8:	2000      	movs	r0, #0
 80015ea:	2100      	movs	r1, #0

080015ec <??ZbZclParseInteger_1>:
 80015ec:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015f0 <ZbZclAttrIsInteger>:
 80015f0:	0001      	movs	r1, r0
 80015f2:	2200      	movs	r2, #0
 80015f4:	0008      	movs	r0, r1
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	3808      	subs	r0, #8
 80015fa:	2808      	cmp	r0, #8
 80015fc:	d909      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 80015fe:	3810      	subs	r0, #16
 8001600:	2819      	cmp	r0, #25
 8001602:	d906      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 8001604:	38ca      	subs	r0, #202	@ 0xca
 8001606:	d004      	beq.n	8001612 <??ZbZclAttrIsInteger_0>
 8001608:	1f80      	subs	r0, r0, #6
 800160a:	2802      	cmp	r0, #2
 800160c:	d901      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 800160e:	3808      	subs	r0, #8
 8001610:	d101      	bne.n	8001616 <??ZbZclAttrIsInteger_1>

08001612 <??ZbZclAttrIsInteger_0>:
 8001612:	2001      	movs	r0, #1
 8001614:	e000      	b.n	8001618 <??ZbZclAttrIsInteger_2>

08001616 <??ZbZclAttrIsInteger_1>:
 8001616:	2000      	movs	r0, #0

08001618 <??ZbZclAttrIsInteger_2>:
 8001618:	b2c0      	uxtb	r0, r0
 800161a:	4770      	bx	lr

0800161c <ZbZclAttrIntegerRangeCheck>:
 800161c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001620:	0004      	movs	r4, r0
 8001622:	000d      	movs	r5, r1
 8001624:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001628:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800162c:	0010      	movs	r0, r2
 800162e:	b2c0      	uxtb	r0, r0
 8001630:	2810      	cmp	r0, #16
 8001632:	d045      	beq.n	80016c0 <??ZbZclAttrIntegerRangeCheck_0>
 8001634:	2818      	cmp	r0, #24
 8001636:	d051      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001638:	2819      	cmp	r0, #25
 800163a:	d060      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 800163c:	281a      	cmp	r0, #26
 800163e:	d072      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 8001640:	281b      	cmp	r0, #27
 8001642:	f000 8086 	beq.w	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 8001646:	281c      	cmp	r0, #28
 8001648:	f000 8098 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 800164c:	281d      	cmp	r0, #29
 800164e:	f000 80a7 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 8001652:	281e      	cmp	r0, #30
 8001654:	f000 80b9 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001658:	281f      	cmp	r0, #31
 800165a:	f000 80cd 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 800165e:	2820      	cmp	r0, #32
 8001660:	d03c      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001662:	2821      	cmp	r0, #33	@ 0x21
 8001664:	d04b      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 8001666:	2822      	cmp	r0, #34	@ 0x22
 8001668:	d05d      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 800166a:	2823      	cmp	r0, #35	@ 0x23
 800166c:	d071      	beq.n	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 800166e:	2824      	cmp	r0, #36	@ 0x24
 8001670:	f000 8084 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 8001674:	2825      	cmp	r0, #37	@ 0x25
 8001676:	f000 8093 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 800167a:	2826      	cmp	r0, #38	@ 0x26
 800167c:	f000 80a5 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001680:	2827      	cmp	r0, #39	@ 0x27
 8001682:	f000 80b9 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 8001686:	2828      	cmp	r0, #40	@ 0x28
 8001688:	f000 80c1 	beq.w	800180e <??ZbZclAttrIntegerRangeCheck_9>
 800168c:	2829      	cmp	r0, #41	@ 0x29
 800168e:	f000 80d9 	beq.w	8001844 <??ZbZclAttrIntegerRangeCheck_10>
 8001692:	282a      	cmp	r0, #42	@ 0x2a
 8001694:	f000 80f0 	beq.w	8001878 <??ZbZclAttrIntegerRangeCheck_11>
 8001698:	282b      	cmp	r0, #43	@ 0x2b
 800169a:	f000 8107 	beq.w	80018ac <??ZbZclAttrIntegerRangeCheck_12>
 800169e:	282c      	cmp	r0, #44	@ 0x2c
 80016a0:	f000 8120 	beq.w	80018e4 <??ZbZclAttrIntegerRangeCheck_13>
 80016a4:	282d      	cmp	r0, #45	@ 0x2d
 80016a6:	f000 8136 	beq.w	8001916 <??ZbZclAttrIntegerRangeCheck_14>
 80016aa:	282e      	cmp	r0, #46	@ 0x2e
 80016ac:	f000 814b 	beq.w	8001946 <??ZbZclAttrIntegerRangeCheck_15>
 80016b0:	282f      	cmp	r0, #47	@ 0x2f
 80016b2:	f000 8160 	beq.w	8001976 <??ZbZclAttrIntegerRangeCheck_16>
 80016b6:	2830      	cmp	r0, #48	@ 0x30
 80016b8:	d010      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 80016ba:	2831      	cmp	r0, #49	@ 0x31
 80016bc:	d01f      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 80016be:	e164      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016c0 <??ZbZclAttrIntegerRangeCheck_0>:
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d103      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c4:	2cff      	cmp	r4, #255	@ 0xff
 80016c6:	d101      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c8:	2001      	movs	r0, #1
 80016ca:	e176      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016cc <??ZbZclAttrIntegerRangeCheck_18>:
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	db04      	blt.n	80016da <??ZbZclAttrIntegerRangeCheck_20>
 80016d0:	dc01      	bgt.n	80016d6 <??ZbZclAttrIntegerRangeCheck_21>
 80016d2:	2c02      	cmp	r4, #2
 80016d4:	d301      	bcc.n	80016da <??ZbZclAttrIntegerRangeCheck_20>

080016d6 <??ZbZclAttrIntegerRangeCheck_21>:
 80016d6:	2000      	movs	r0, #0
 80016d8:	e16f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016da <??ZbZclAttrIntegerRangeCheck_20>:
 80016da:	e156      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016dc <??ZbZclAttrIntegerRangeCheck_1>:
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d103      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e0:	2cff      	cmp	r4, #255	@ 0xff
 80016e2:	d101      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e4:	2001      	movs	r0, #1
 80016e6:	e168      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016e8 <??ZbZclAttrIntegerRangeCheck_23>:
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	d405      	bmi.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	db05      	blt.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>
 80016f0:	dc02      	bgt.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016f2:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80016f6:	d301      	bcc.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>

080016f8 <??ZbZclAttrIntegerRangeCheck_24>:
 80016f8:	2000      	movs	r0, #0
 80016fa:	e15e      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016fc <??ZbZclAttrIntegerRangeCheck_25>:
 80016fc:	e145      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016fe <??ZbZclAttrIntegerRangeCheck_2>:
 80016fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001702:	2100      	movs	r1, #0
 8001704:	428d      	cmp	r5, r1
 8001706:	d103      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 8001708:	4284      	cmp	r4, r0
 800170a:	d101      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 800170c:	2001      	movs	r0, #1
 800170e:	e154      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001710 <??ZbZclAttrIntegerRangeCheck_27>:
 8001710:	2d00      	cmp	r5, #0
 8001712:	d405      	bmi.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 8001714:	2d00      	cmp	r5, #0
 8001716:	db05      	blt.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>
 8001718:	dc02      	bgt.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 800171a:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800171e:	d301      	bcc.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>

08001720 <??ZbZclAttrIntegerRangeCheck_28>:
 8001720:	2000      	movs	r0, #0
 8001722:	e14a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001724 <??ZbZclAttrIntegerRangeCheck_29>:
 8001724:	e131      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001726 <??ZbZclAttrIntegerRangeCheck_3>:
 8001726:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 800172a:	2100      	movs	r1, #0
 800172c:	428d      	cmp	r5, r1
 800172e:	d103      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001730:	4284      	cmp	r4, r0
 8001732:	d101      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001734:	2001      	movs	r0, #1
 8001736:	e140      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001738 <??ZbZclAttrIntegerRangeCheck_31>:
 8001738:	2d00      	cmp	r5, #0
 800173a:	d407      	bmi.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 800173c:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8001740:	2100      	movs	r1, #0
 8001742:	428d      	cmp	r5, r1
 8001744:	db04      	blt.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>
 8001746:	dc01      	bgt.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 8001748:	4284      	cmp	r4, r0
 800174a:	d301      	bcc.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>

0800174c <??ZbZclAttrIntegerRangeCheck_32>:
 800174c:	2000      	movs	r0, #0
 800174e:	e134      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001750 <??ZbZclAttrIntegerRangeCheck_33>:
 8001750:	e11b      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001752 <??ZbZclAttrIntegerRangeCheck_4>:
 8001752:	f05f 30ff 	movs.w	r0, #4294967295
 8001756:	2100      	movs	r1, #0
 8001758:	428d      	cmp	r5, r1
 800175a:	d103      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 800175c:	4284      	cmp	r4, r0
 800175e:	d101      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 8001760:	2001      	movs	r0, #1
 8001762:	e12a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001764 <??ZbZclAttrIntegerRangeCheck_35>:
 8001764:	2d00      	cmp	r5, #0
 8001766:	d406      	bmi.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001768:	2000      	movs	r0, #0
 800176a:	2101      	movs	r1, #1
 800176c:	428d      	cmp	r5, r1
 800176e:	db04      	blt.n	800177a <??ZbZclAttrIntegerRangeCheck_37>
 8001770:	dc01      	bgt.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001772:	4284      	cmp	r4, r0
 8001774:	d301      	bcc.n	800177a <??ZbZclAttrIntegerRangeCheck_37>

08001776 <??ZbZclAttrIntegerRangeCheck_36>:
 8001776:	2000      	movs	r0, #0
 8001778:	e11f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800177a <??ZbZclAttrIntegerRangeCheck_37>:
 800177a:	e106      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800177c <??ZbZclAttrIntegerRangeCheck_5>:
 800177c:	2dff      	cmp	r5, #255	@ 0xff
 800177e:	d104      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001780:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001784:	d101      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001786:	2001      	movs	r0, #1
 8001788:	e117      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800178a <??ZbZclAttrIntegerRangeCheck_39>:
 800178a:	2d00      	cmp	r5, #0
 800178c:	d405      	bmi.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 800178e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001792:	db04      	blt.n	800179e <??ZbZclAttrIntegerRangeCheck_41>
 8001794:	dc01      	bgt.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 8001796:	2c00      	cmp	r4, #0
 8001798:	d301      	bcc.n	800179e <??ZbZclAttrIntegerRangeCheck_41>

0800179a <??ZbZclAttrIntegerRangeCheck_40>:
 800179a:	2000      	movs	r0, #0
 800179c:	e10d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800179e <??ZbZclAttrIntegerRangeCheck_41>:
 800179e:	e0f4      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017a0 <??ZbZclAttrIntegerRangeCheck_6>:
 80017a0:	f05f 30ff 	movs.w	r0, #4294967295
 80017a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017a8:	428d      	cmp	r5, r1
 80017aa:	d103      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017ac:	4284      	cmp	r4, r0
 80017ae:	d101      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017b0:	2001      	movs	r0, #1
 80017b2:	e102      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017b4 <??ZbZclAttrIntegerRangeCheck_43>:
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d405      	bmi.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017b8:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80017bc:	db04      	blt.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>
 80017be:	dc01      	bgt.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d301      	bcc.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>

080017c4 <??ZbZclAttrIntegerRangeCheck_44>:
 80017c4:	2000      	movs	r0, #0
 80017c6:	e0f8      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017c8 <??ZbZclAttrIntegerRangeCheck_45>:
 80017c8:	e0df      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017ca <??ZbZclAttrIntegerRangeCheck_7>:
 80017ca:	f05f 30ff 	movs.w	r0, #4294967295
 80017ce:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 80017d2:	428d      	cmp	r5, r1
 80017d4:	d103      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017d6:	4284      	cmp	r4, r0
 80017d8:	d101      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017da:	2001      	movs	r0, #1
 80017dc:	e0ed      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017de <??ZbZclAttrIntegerRangeCheck_47>:
 80017de:	2d00      	cmp	r5, #0
 80017e0:	d407      	bmi.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017e2:	2000      	movs	r0, #0
 80017e4:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 80017e8:	428d      	cmp	r5, r1
 80017ea:	db04      	blt.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>
 80017ec:	dc01      	bgt.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017ee:	4284      	cmp	r4, r0
 80017f0:	d301      	bcc.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>

080017f2 <??ZbZclAttrIntegerRangeCheck_48>:
 80017f2:	2000      	movs	r0, #0
 80017f4:	e0e1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017f6 <??ZbZclAttrIntegerRangeCheck_49>:
 80017f6:	e0c8      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017f8 <??ZbZclAttrIntegerRangeCheck_8>:
 80017f8:	f05f 30ff 	movs.w	r0, #4294967295
 80017fc:	f05f 31ff 	movs.w	r1, #4294967295
 8001800:	428d      	cmp	r5, r1
 8001802:	d103      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001804:	4284      	cmp	r4, r0
 8001806:	d101      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001808:	2001      	movs	r0, #1
 800180a:	e0d6      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800180c <??ZbZclAttrIntegerRangeCheck_51>:
 800180c:	e0bd      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800180e <??ZbZclAttrIntegerRangeCheck_9>:
 800180e:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001812:	f05f 31ff 	movs.w	r1, #4294967295
 8001816:	428d      	cmp	r5, r1
 8001818:	d103      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181a:	4284      	cmp	r4, r0
 800181c:	d101      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181e:	2001      	movs	r0, #1
 8001820:	e0cb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001822 <??ZbZclAttrIntegerRangeCheck_52>:
 8001822:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001826:	f05f 31ff 	movs.w	r1, #4294967295
 800182a:	428d      	cmp	r5, r1
 800182c:	db07      	blt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800182e:	dc01      	bgt.n	8001834 <??ZbZclAttrIntegerRangeCheck_54>
 8001830:	4284      	cmp	r4, r0
 8001832:	d304      	bcc.n	800183e <??ZbZclAttrIntegerRangeCheck_53>

08001834 <??ZbZclAttrIntegerRangeCheck_54>:
 8001834:	2d00      	cmp	r5, #0
 8001836:	db04      	blt.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>
 8001838:	dc01      	bgt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800183a:	2c80      	cmp	r4, #128	@ 0x80
 800183c:	d301      	bcc.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>

0800183e <??ZbZclAttrIntegerRangeCheck_53>:
 800183e:	2000      	movs	r0, #0
 8001840:	e0bb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001842 <??ZbZclAttrIntegerRangeCheck_55>:
 8001842:	e0a2      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001844 <??ZbZclAttrIntegerRangeCheck_10>:
 8001844:	485e      	ldr	r0, [pc, #376]	@ (80019c0 <??DataTable1>)
 8001846:	f05f 31ff 	movs.w	r1, #4294967295
 800184a:	428d      	cmp	r5, r1
 800184c:	d103      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 800184e:	4284      	cmp	r4, r0
 8001850:	d101      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 8001852:	2001      	movs	r0, #1
 8001854:	e0b1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001856 <??ZbZclAttrIntegerRangeCheck_57>:
 8001856:	485a      	ldr	r0, [pc, #360]	@ (80019c0 <??DataTable1>)
 8001858:	f05f 31ff 	movs.w	r1, #4294967295
 800185c:	428d      	cmp	r5, r1
 800185e:	db08      	blt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 8001860:	dc01      	bgt.n	8001866 <??ZbZclAttrIntegerRangeCheck_59>
 8001862:	4284      	cmp	r4, r0
 8001864:	d305      	bcc.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>

08001866 <??ZbZclAttrIntegerRangeCheck_59>:
 8001866:	2d00      	cmp	r5, #0
 8001868:	db05      	blt.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>
 800186a:	dc02      	bgt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 800186c:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8001870:	d301      	bcc.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>

08001872 <??ZbZclAttrIntegerRangeCheck_58>:
 8001872:	2000      	movs	r0, #0
 8001874:	e0a1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001876 <??ZbZclAttrIntegerRangeCheck_60>:
 8001876:	e088      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001878 <??ZbZclAttrIntegerRangeCheck_11>:
 8001878:	4852      	ldr	r0, [pc, #328]	@ (80019c4 <??DataTable1_1>)
 800187a:	f05f 31ff 	movs.w	r1, #4294967295
 800187e:	428d      	cmp	r5, r1
 8001880:	d103      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001882:	4284      	cmp	r4, r0
 8001884:	d101      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001886:	2001      	movs	r0, #1
 8001888:	e097      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800188a <??ZbZclAttrIntegerRangeCheck_62>:
 800188a:	484e      	ldr	r0, [pc, #312]	@ (80019c4 <??DataTable1_1>)
 800188c:	f05f 31ff 	movs.w	r1, #4294967295
 8001890:	428d      	cmp	r5, r1
 8001892:	db08      	blt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 8001894:	dc01      	bgt.n	800189a <??ZbZclAttrIntegerRangeCheck_64>
 8001896:	4284      	cmp	r4, r0
 8001898:	d305      	bcc.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>

0800189a <??ZbZclAttrIntegerRangeCheck_64>:
 800189a:	2d00      	cmp	r5, #0
 800189c:	db05      	blt.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>
 800189e:	dc02      	bgt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 80018a0:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80018a4:	d301      	bcc.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>

080018a6 <??ZbZclAttrIntegerRangeCheck_63>:
 80018a6:	2000      	movs	r0, #0
 80018a8:	e087      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018aa <??ZbZclAttrIntegerRangeCheck_65>:
 80018aa:	e06e      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018ac <??ZbZclAttrIntegerRangeCheck_12>:
 80018ac:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018b0:	f05f 31ff 	movs.w	r1, #4294967295
 80018b4:	428d      	cmp	r5, r1
 80018b6:	d103      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018b8:	4284      	cmp	r4, r0
 80018ba:	d101      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018bc:	2001      	movs	r0, #1
 80018be:	e07c      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018c0 <??ZbZclAttrIntegerRangeCheck_67>:
 80018c0:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018c4:	f05f 31ff 	movs.w	r1, #4294967295
 80018c8:	428d      	cmp	r5, r1
 80018ca:	db08      	blt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018cc:	dc01      	bgt.n	80018d2 <??ZbZclAttrIntegerRangeCheck_69>
 80018ce:	4284      	cmp	r4, r0
 80018d0:	d305      	bcc.n	80018de <??ZbZclAttrIntegerRangeCheck_68>

080018d2 <??ZbZclAttrIntegerRangeCheck_69>:
 80018d2:	2d00      	cmp	r5, #0
 80018d4:	db05      	blt.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>
 80018d6:	dc02      	bgt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018d8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 80018dc:	d301      	bcc.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>

080018de <??ZbZclAttrIntegerRangeCheck_68>:
 80018de:	2000      	movs	r0, #0
 80018e0:	e06b      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018e2 <??ZbZclAttrIntegerRangeCheck_70>:
 80018e2:	e052      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018e4 <??ZbZclAttrIntegerRangeCheck_13>:
 80018e4:	2000      	movs	r0, #0
 80018e6:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018ea:	428d      	cmp	r5, r1
 80018ec:	d103      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d101      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018f2:	2001      	movs	r0, #1
 80018f4:	e061      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018f6 <??ZbZclAttrIntegerRangeCheck_72>:
 80018f6:	2000      	movs	r0, #0
 80018f8:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018fc:	428d      	cmp	r5, r1
 80018fe:	db07      	blt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 8001900:	dc01      	bgt.n	8001906 <??ZbZclAttrIntegerRangeCheck_74>
 8001902:	4284      	cmp	r4, r0
 8001904:	d304      	bcc.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>

08001906 <??ZbZclAttrIntegerRangeCheck_74>:
 8001906:	2d80      	cmp	r5, #128	@ 0x80
 8001908:	db04      	blt.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>
 800190a:	dc01      	bgt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d301      	bcc.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>

08001910 <??ZbZclAttrIntegerRangeCheck_73>:
 8001910:	2000      	movs	r0, #0
 8001912:	e052      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001914 <??ZbZclAttrIntegerRangeCheck_75>:
 8001914:	e039      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001916 <??ZbZclAttrIntegerRangeCheck_14>:
 8001916:	2000      	movs	r0, #0
 8001918:	4929      	ldr	r1, [pc, #164]	@ (80019c0 <??DataTable1>)
 800191a:	428d      	cmp	r5, r1
 800191c:	d103      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 800191e:	4284      	cmp	r4, r0
 8001920:	d101      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 8001922:	2001      	movs	r0, #1
 8001924:	e049      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001926 <??ZbZclAttrIntegerRangeCheck_77>:
 8001926:	2000      	movs	r0, #0
 8001928:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <??DataTable1>)
 800192a:	428d      	cmp	r5, r1
 800192c:	db08      	blt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800192e:	dc01      	bgt.n	8001934 <??ZbZclAttrIntegerRangeCheck_79>
 8001930:	4284      	cmp	r4, r0
 8001932:	d305      	bcc.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>

08001934 <??ZbZclAttrIntegerRangeCheck_79>:
 8001934:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8001938:	db04      	blt.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>
 800193a:	dc01      	bgt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d301      	bcc.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>

08001940 <??ZbZclAttrIntegerRangeCheck_78>:
 8001940:	2000      	movs	r0, #0
 8001942:	e03a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001944 <??ZbZclAttrIntegerRangeCheck_80>:
 8001944:	e021      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001946 <??ZbZclAttrIntegerRangeCheck_15>:
 8001946:	2000      	movs	r0, #0
 8001948:	491e      	ldr	r1, [pc, #120]	@ (80019c4 <??DataTable1_1>)
 800194a:	428d      	cmp	r5, r1
 800194c:	d103      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 800194e:	4284      	cmp	r4, r0
 8001950:	d101      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 8001952:	2001      	movs	r0, #1
 8001954:	e031      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001956 <??ZbZclAttrIntegerRangeCheck_82>:
 8001956:	2000      	movs	r0, #0
 8001958:	491a      	ldr	r1, [pc, #104]	@ (80019c4 <??DataTable1_1>)
 800195a:	428d      	cmp	r5, r1
 800195c:	db08      	blt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800195e:	dc01      	bgt.n	8001964 <??ZbZclAttrIntegerRangeCheck_84>
 8001960:	4284      	cmp	r4, r0
 8001962:	d305      	bcc.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>

08001964 <??ZbZclAttrIntegerRangeCheck_84>:
 8001964:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8001968:	db04      	blt.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>
 800196a:	dc01      	bgt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800196c:	2c00      	cmp	r4, #0
 800196e:	d301      	bcc.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>

08001970 <??ZbZclAttrIntegerRangeCheck_83>:
 8001970:	2000      	movs	r0, #0
 8001972:	e022      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001974 <??ZbZclAttrIntegerRangeCheck_85>:
 8001974:	e009      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001976 <??ZbZclAttrIntegerRangeCheck_16>:
 8001976:	2000      	movs	r0, #0
 8001978:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 800197c:	428d      	cmp	r5, r1
 800197e:	d103      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001980:	4284      	cmp	r4, r0
 8001982:	d101      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001984:	2001      	movs	r0, #1
 8001986:	e018      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001988 <??ZbZclAttrIntegerRangeCheck_87>:
 8001988:	e7ff      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800198a <??ZbZclAttrIntegerRangeCheck_17>:
 800198a:	ea56 0008 	orrs.w	r0, r6, r8
 800198e:	ea57 0109 	orrs.w	r1, r7, r9
 8001992:	2900      	cmp	r1, #0
 8001994:	d103      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 8001996:	2800      	cmp	r0, #0
 8001998:	d101      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 800199a:	2001      	movs	r0, #1
 800199c:	e00d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800199e <??ZbZclAttrIntegerRangeCheck_88>:
 800199e:	42bd      	cmp	r5, r7
 80019a0:	db09      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019a2:	dc01      	bgt.n	80019a8 <??ZbZclAttrIntegerRangeCheck_90>
 80019a4:	42b4      	cmp	r4, r6
 80019a6:	d306      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019a8 <??ZbZclAttrIntegerRangeCheck_90>:
 80019a8:	45a9      	cmp	r9, r5
 80019aa:	db04      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019ac:	dc01      	bgt.n	80019b2 <??ZbZclAttrIntegerRangeCheck_91>
 80019ae:	45a0      	cmp	r8, r4
 80019b0:	d301      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019b2 <??ZbZclAttrIntegerRangeCheck_91>:
 80019b2:	2001      	movs	r0, #1
 80019b4:	e000      	b.n	80019b8 <??ZbZclAttrIntegerRangeCheck_92>

080019b6 <??ZbZclAttrIntegerRangeCheck_89>:
 80019b6:	2000      	movs	r0, #0

080019b8 <??ZbZclAttrIntegerRangeCheck_92>:
 80019b8:	b2c0      	uxtb	r0, r0

080019ba <??ZbZclAttrIntegerRangeCheck_19>:
 80019ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80019be:	4770      	bx	lr

080019c0 <??DataTable1>:
 80019c0:	8000 ffff                                   ....

080019c4 <??DataTable1_1>:
 80019c4:	0000 ff80                                   ....

080019c8 <ZbZclAttrIntegerRead>:
 80019c8:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019cc:	b085      	sub	sp, #20
 80019ce:	0006      	movs	r6, r0
 80019d0:	000f      	movs	r7, r1
 80019d2:	0015      	movs	r5, r2
 80019d4:	001c      	movs	r4, r3
 80019d6:	2000      	movs	r0, #0
 80019d8:	f88d 0009 	strb.w	r0, [sp, #9]
 80019dc:	f05f 0808 	movs.w	r8, #8
 80019e0:	f05f 0900 	movs.w	r9, #0
 80019e4:	f10d 0a0c 	add.w	sl, sp, #12
 80019e8:	464a      	mov	r2, r9
 80019ea:	4641      	mov	r1, r8
 80019ec:	4650      	mov	r0, sl
 80019ee:	f006 f8b9 	bl	8007b64 <__aeabi_memset>
 80019f2:	2000      	movs	r0, #0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	2008      	movs	r0, #8
 80019f8:	9000      	str	r0, [sp, #0]
 80019fa:	ab03      	add	r3, sp, #12
 80019fc:	f10d 0209 	add.w	r2, sp, #9
 8001a00:	0039      	movs	r1, r7
 8001a02:	b289      	uxth	r1, r1
 8001a04:	0030      	movs	r0, r6
 8001a06:	f7fe fcee 	bl	80003e6 <ZbZclAttrRead>
 8001a0a:	f88d 0008 	strb.w	r0, [sp, #8]
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	d002      	beq.n	8001a18 <??ZbZclAttrIntegerRead_0>
 8001a12:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a16:	7020      	strb	r0, [r4, #0]

08001a18 <??ZbZclAttrIntegerRead_0>:
 8001a18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d002      	beq.n	8001a26 <??ZbZclAttrIntegerRead_1>
 8001a20:	2000      	movs	r0, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	e01a      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a26 <??ZbZclAttrIntegerRead_1>:
 8001a26:	aa02      	add	r2, sp, #8
 8001a28:	a903      	add	r1, sp, #12
 8001a2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a2e:	f7ff fcb1 	bl	8001394 <ZbZclParseInteger>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d002      	beq.n	8001a40 <??ZbZclAttrIntegerRead_3>
 8001a3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a3e:	7020      	strb	r0, [r4, #0]

08001a40 <??ZbZclAttrIntegerRead_3>:
 8001a40:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d002      	beq.n	8001a4e <??ZbZclAttrIntegerRead_4>
 8001a48:	2000      	movs	r0, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	e006      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a4e <??ZbZclAttrIntegerRead_4>:
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	d002      	beq.n	8001a58 <??ZbZclAttrIntegerRead_5>
 8001a52:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a56:	7028      	strb	r0, [r5, #0]

08001a58 <??ZbZclAttrIntegerRead_5>:
 8001a58:	0010      	movs	r0, r2
 8001a5a:	0019      	movs	r1, r3

08001a5c <??ZbZclAttrIntegerRead_2>:
 8001a5c:	b006      	add	sp, #24
 8001a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a62 <ZbZclAttrIntegerWrite>:
 8001a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	4680      	mov	r8, r0
 8001a6a:	4689      	mov	r9, r1
 8001a6c:	0014      	movs	r4, r2
 8001a6e:	001d      	movs	r5, r3
 8001a70:	f1b8 0f00 	cmp.w	r8, #0
 8001a74:	d101      	bne.n	8001a7a <??ZbZclAttrIntegerWrite_0>
 8001a76:	2087      	movs	r0, #135	@ 0x87
 8001a78:	e042      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a7a <??ZbZclAttrIntegerWrite_0>:
 8001a7a:	ab04      	add	r3, sp, #16
 8001a7c:	f10d 0211 	add.w	r2, sp, #17
 8001a80:	4649      	mov	r1, r9
 8001a82:	b289      	uxth	r1, r1
 8001a84:	4640      	mov	r0, r8
 8001a86:	f7ff ff9f 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001a8a:	0006      	movs	r6, r0
 8001a8c:	000f      	movs	r7, r1
 8001a8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d002      	beq.n	8001a9c <??ZbZclAttrIntegerWrite_2>
 8001a96:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a9a:	e031      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a9c <??ZbZclAttrIntegerWrite_2>:
 8001a9c:	42af      	cmp	r7, r5
 8001a9e:	d103      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa0:	42a6      	cmp	r6, r4
 8001aa2:	d101      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e02b      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001aa8 <??ZbZclAttrIntegerWrite_3>:
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8001ab8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001abc:	0020      	movs	r0, r4
 8001abe:	0029      	movs	r1, r5
 8001ac0:	f7ff fdac 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d101      	bne.n	8001acc <??ZbZclAttrIntegerWrite_4>
 8001ac8:	2087      	movs	r0, #135	@ 0x87
 8001aca:	e019      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001acc <??ZbZclAttrIntegerWrite_4>:
 8001acc:	0022      	movs	r2, r4
 8001ace:	002b      	movs	r3, r5
 8001ad0:	a805      	add	r0, sp, #20
 8001ad2:	f005 faad 	bl	8007030 <putle64>
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	9001      	str	r0, [sp, #4]
 8001ada:	2008      	movs	r0, #8
 8001adc:	9000      	str	r0, [sp, #0]
 8001ade:	ab05      	add	r3, sp, #20
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	f7fe fdcf 	bl	800068a <ZbZclAttrWrite>
 8001aec:	f88d 0010 	strb.w	r0, [sp, #16]
 8001af0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d002      	beq.n	8001afe <??ZbZclAttrIntegerWrite_5>
 8001af8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001afc:	e000      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001afe <??ZbZclAttrIntegerWrite_5>:
 8001afe:	2000      	movs	r0, #0

08001b00 <??ZbZclAttrIntegerWrite_1>:
 8001b00:	b007      	add	sp, #28
 8001b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001b06 <ZbZclAttrIntegerIncrement>:
 8001b06:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	468b      	mov	fp, r1
 8001b0e:	0016      	movs	r6, r2
 8001b10:	001f      	movs	r7, r3
 8001b12:	f05f 0a00 	movs.w	sl, #0
 8001b16:	466b      	mov	r3, sp
 8001b18:	f10d 0201 	add.w	r2, sp, #1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	b289      	uxth	r1, r1
 8001b20:	9804      	ldr	r0, [sp, #16]
 8001b22:	f7ff ff51 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001b26:	0002      	movs	r2, r0
 8001b28:	000b      	movs	r3, r1
 8001b2a:	f89d 0000 	ldrb.w	r0, [sp]
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d002      	beq.n	8001b38 <??ZbZclAttrIntegerIncrement_0>
 8001b32:	f89d 0000 	ldrb.w	r0, [sp]
 8001b36:	e03e      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001b38 <??ZbZclAttrIntegerIncrement_0>:
 8001b38:	eb12 0806 	adds.w	r8, r2, r6
 8001b3c:	eb53 0907 	adcs.w	r9, r3, r7
 8001b40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b44:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001b48:	f7ff f9ea 	bl	8000f20 <ZbZclAttrTypeLength>
 8001b4c:	9001      	str	r0, [sp, #4]
 8001b4e:	9801      	ldr	r0, [sp, #4]
 8001b50:	2801      	cmp	r0, #1
 8001b52:	d017      	beq.n	8001b84 <??ZbZclAttrIntegerIncrement_2>
 8001b54:	2802      	cmp	r0, #2
 8001b56:	d00b      	beq.n	8001b70 <??ZbZclAttrIntegerIncrement_3>
 8001b58:	2804      	cmp	r0, #4
 8001b5a:	d002      	beq.n	8001b62 <??ZbZclAttrIntegerIncrement_4>
 8001b5c:	2808      	cmp	r0, #8
 8001b5e:	d118      	bne.n	8001b92 <??ZbZclAttrIntegerIncrement_5>

08001b60 <??ZbZclAttrIntegerIncrement_6>:
 8001b60:	e019      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b62 <??ZbZclAttrIntegerIncrement_4>:
 8001b62:	f038 0000 	bics.w	r0, r8, #0
 8001b66:	f039 31ff 	bics.w	r1, r9, #4294967295
 8001b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b6e:	e012      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b70 <??ZbZclAttrIntegerIncrement_3>:
 8001b70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b74:	2100      	movs	r1, #0
 8001b76:	ea18 0000 	ands.w	r0, r8, r0
 8001b7a:	ea19 0101 	ands.w	r1, r9, r1
 8001b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b82:	e008      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b84 <??ZbZclAttrIntegerIncrement_2>:
 8001b84:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8001b88:	f019 0100 	ands.w	r1, r9, #0
 8001b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b90:	e001      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b92 <??ZbZclAttrIntegerIncrement_5>:
 8001b92:	2001      	movs	r0, #1
 8001b94:	4682      	mov	sl, r0

08001b96 <??ZbZclAttrIntegerIncrement_7>:
 8001b96:	4650      	mov	r0, sl
 8001b98:	b2c0      	uxtb	r0, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <??ZbZclAttrIntegerIncrement_8>
 8001b9e:	2086      	movs	r0, #134	@ 0x86
 8001ba0:	e009      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001ba2 <??ZbZclAttrIntegerIncrement_8>:
 8001ba2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8001ba6:	0022      	movs	r2, r4
 8001ba8:	002b      	movs	r3, r5
 8001baa:	4659      	mov	r1, fp
 8001bac:	b289      	uxth	r1, r1
 8001bae:	9804      	ldr	r0, [sp, #16]
 8001bb0:	f7ff ff57 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8001bb4:	2000      	movs	r0, #0

08001bb6 <??ZbZclAttrIntegerIncrement_1>:
 8001bb6:	b005      	add	sp, #20
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bbc <ZbZclAttrEuiRead>:
 8001bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	0005      	movs	r5, r0
 8001bc4:	000e      	movs	r6, r1
 8001bc6:	0014      	movs	r4, r2
 8001bc8:	f05f 0808 	movs.w	r8, #8
 8001bcc:	f05f 0900 	movs.w	r9, #0
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	0038      	movs	r0, r7
 8001bd8:	f005 ffc4 	bl	8007b64 <__aeabi_memset>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	9001      	str	r0, [sp, #4]
 8001be0:	2008      	movs	r0, #8
 8001be2:	9000      	str	r0, [sp, #0]
 8001be4:	ab02      	add	r3, sp, #8
 8001be6:	2200      	movs	r2, #0
 8001be8:	0031      	movs	r1, r6
 8001bea:	b289      	uxth	r1, r1
 8001bec:	0028      	movs	r0, r5
 8001bee:	f7fe fbfa 	bl	80003e6 <ZbZclAttrRead>
 8001bf2:	0007      	movs	r7, r0
 8001bf4:	2c00      	cmp	r4, #0
 8001bf6:	d000      	beq.n	8001bfa <??ZbZclAttrEuiRead_0>
 8001bf8:	7027      	strb	r7, [r4, #0]

08001bfa <??ZbZclAttrEuiRead_0>:
 8001bfa:	0038      	movs	r0, r7
 8001bfc:	b2c0      	uxtb	r0, r0
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d002      	beq.n	8001c08 <??ZbZclAttrEuiRead_1>
 8001c02:	2000      	movs	r0, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	e002      	b.n	8001c0e <??ZbZclAttrEuiRead_2>

08001c08 <??ZbZclAttrEuiRead_1>:
 8001c08:	a802      	add	r0, sp, #8
 8001c0a:	f005 f9be 	bl	8006f8a <pletoh64>

08001c0e <??ZbZclAttrEuiRead_2>:
 8001c0e:	b005      	add	sp, #20
 8001c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c14 <ZbZclAttrEuiWrite>:
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	4680      	mov	r8, r0
 8001c1c:	4689      	mov	r9, r1
 8001c1e:	0014      	movs	r4, r2
 8001c20:	001d      	movs	r5, r3
 8001c22:	f1b8 0f00 	cmp.w	r8, #0
 8001c26:	d101      	bne.n	8001c2c <??ZbZclAttrEuiWrite_0>
 8001c28:	2087      	movs	r0, #135	@ 0x87
 8001c2a:	e02e      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c2c <??ZbZclAttrEuiWrite_0>:
 8001c2c:	aa02      	add	r2, sp, #8
 8001c2e:	4649      	mov	r1, r9
 8001c30:	b289      	uxth	r1, r1
 8001c32:	4640      	mov	r0, r8
 8001c34:	f7ff ffc2 	bl	8001bbc <ZbZclAttrEuiRead>
 8001c38:	0006      	movs	r6, r0
 8001c3a:	000f      	movs	r7, r1
 8001c3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d002      	beq.n	8001c4a <??ZbZclAttrEuiWrite_2>
 8001c44:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c48:	e01f      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c4a <??ZbZclAttrEuiWrite_2>:
 8001c4a:	42af      	cmp	r7, r5
 8001c4c:	d103      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d101      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c52:	2000      	movs	r0, #0
 8001c54:	e019      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c56 <??ZbZclAttrEuiWrite_3>:
 8001c56:	0022      	movs	r2, r4
 8001c58:	002b      	movs	r3, r5
 8001c5a:	a803      	add	r0, sp, #12
 8001c5c:	f005 f9e8 	bl	8007030 <putle64>
 8001c60:	2002      	movs	r0, #2
 8001c62:	9001      	str	r0, [sp, #4]
 8001c64:	2008      	movs	r0, #8
 8001c66:	9000      	str	r0, [sp, #0]
 8001c68:	ab03      	add	r3, sp, #12
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7fe fd0a 	bl	800068a <ZbZclAttrWrite>
 8001c76:	f88d 0008 	strb.w	r0, [sp, #8]
 8001c7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d002      	beq.n	8001c88 <??ZbZclAttrEuiWrite_4>
 8001c82:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c86:	e000      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c88 <??ZbZclAttrEuiWrite_4>:
 8001c88:	2000      	movs	r0, #0

08001c8a <??ZbZclAttrEuiWrite_1>:
 8001c8a:	b005      	add	sp, #20
 8001c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c90 <ZbZclAttrAppendList>:
 8001c90:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b089      	sub	sp, #36	@ 0x24
 8001c96:	0007      	movs	r7, r0
 8001c98:	000e      	movs	r6, r1
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	9008      	str	r0, [sp, #32]
 8001c9e:	2e00      	cmp	r6, #0
 8001ca0:	d002      	beq.n	8001ca8 <??ZbZclAttrAppendList_0>
 8001ca2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d101      	bne.n	8001cac <??ZbZclAttrAppendList_1>

08001ca8 <??ZbZclAttrAppendList_0>:
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e0c6      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cac <??ZbZclAttrAppendList_1>:
 8001cac:	f05f 0800 	movs.w	r8, #0

08001cb0 <??ZbZclAttrAppendList_3>:
 8001cb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001cb2:	4580      	cmp	r8, r0
 8001cb4:	f080 80bd 	bcs.w	8001e32 <??ZbZclAttrAppendList_4>
 8001cb8:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8001cbc:	fb09 f008 	mul.w	r0, r9, r8
 8001cc0:	4430      	add	r0, r6
 8001cc2:	7900      	ldrb	r0, [r0, #4]
 8001cc4:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8001cc8:	d007      	beq.n	8001cda <??ZbZclAttrAppendList_5>
 8001cca:	fb09 f008 	mul.w	r0, r9, r8
 8001cce:	4430      	add	r0, r6
 8001cd0:	68c0      	ldr	r0, [r0, #12]
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d101      	bne.n	8001cda <??ZbZclAttrAppendList_5>
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e0af      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cda <??ZbZclAttrAppendList_5>:
 8001cda:	fb09 f008 	mul.w	r0, r9, r8
 8001cde:	5a31      	ldrh	r1, [r6, r0]
 8001ce0:	0038      	movs	r0, r7
 8001ce2:	f7fe fa7c 	bl	80001de <ZbZclAttrFind>
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d003      	beq.n	8001cf4 <??ZbZclAttrAppendList_6>
 8001cec:	0029      	movs	r1, r5
 8001cee:	0038      	movs	r0, r7
 8001cf0:	f000 f8b6 	bl	8001e60 <ZbZclAttrFreeAttr>

08001cf4 <??ZbZclAttrAppendList_6>:
 8001cf4:	2418      	movs	r4, #24
 8001cf6:	f05f 0a00 	movs.w	sl, #0
 8001cfa:	f10d 0b04 	add.w	fp, sp, #4
 8001cfe:	4652      	mov	r2, sl
 8001d00:	0021      	movs	r1, r4
 8001d02:	4658      	mov	r0, fp
 8001d04:	f005 ff2e 	bl	8007b64 <__aeabi_memset>
 8001d08:	a801      	add	r0, sp, #4
 8001d0a:	9001      	str	r0, [sp, #4]
 8001d0c:	a801      	add	r0, sp, #4
 8001d0e:	9002      	str	r0, [sp, #8]
 8001d10:	fb09 f008 	mul.w	r0, r9, r8
 8001d14:	4430      	add	r0, r6
 8001d16:	9003      	str	r0, [sp, #12]
 8001d18:	fb09 f008 	mul.w	r0, r9, r8
 8001d1c:	4430      	add	r0, r6
 8001d1e:	7900      	ldrb	r0, [r0, #4]
 8001d20:	0780      	lsls	r0, r0, #30
 8001d22:	d50b      	bpl.n	8001d3c <??ZbZclAttrAppendList_7>
 8001d24:	fb09 f008 	mul.w	r0, r9, r8
 8001d28:	4430      	add	r0, r6
 8001d2a:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001d2c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8001d30:	fb09 f008 	mul.w	r0, r9, r8
 8001d34:	4430      	add	r0, r6
 8001d36:	8c00      	ldrh	r0, [r0, #32]
 8001d38:	f8ad 0018 	strh.w	r0, [sp, #24]

08001d3c <??ZbZclAttrAppendList_7>:
 8001d3c:	fb09 f008 	mul.w	r0, r9, r8
 8001d40:	4430      	add	r0, r6
 8001d42:	7900      	ldrb	r0, [r0, #4]
 8001d44:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8001d48:	2830      	cmp	r0, #48	@ 0x30
 8001d4a:	d108      	bne.n	8001d5e <??ZbZclAttrAppendList_8>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	9000      	str	r0, [sp, #0]
 8001d50:	fb09 f908 	mul.w	r9, r9, r8
 8001d54:	eb06 0009 	add.w	r0, r6, r9
 8001d58:	6880      	ldr	r0, [r0, #8]
 8001d5a:	9005      	str	r0, [sp, #20]
 8001d5c:	e034      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001d5e <??ZbZclAttrAppendList_8>:
 8001d5e:	fb09 f008 	mul.w	r0, r9, r8
 8001d62:	4430      	add	r0, r6
 8001d64:	6880      	ldr	r0, [r0, #8]
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d01f      	beq.n	8001daa <??ZbZclAttrAppendList_10>
 8001d6a:	fb09 f908 	mul.w	r9, r9, r8
 8001d6e:	eb06 0009 	add.w	r0, r6, r9
 8001d72:	6880      	ldr	r0, [r0, #8]
 8001d74:	9005      	str	r0, [sp, #20]
 8001d76:	9803      	ldr	r0, [sp, #12]
 8001d78:	7880      	ldrb	r0, [r0, #2]
 8001d7a:	2841      	cmp	r0, #65	@ 0x41
 8001d7c:	d003      	beq.n	8001d86 <??ZbZclAttrAppendList_11>
 8001d7e:	9803      	ldr	r0, [sp, #12]
 8001d80:	7880      	ldrb	r0, [r0, #2]
 8001d82:	2842      	cmp	r0, #66	@ 0x42
 8001d84:	d103      	bne.n	8001d8e <??ZbZclAttrAppendList_12>

08001d86 <??ZbZclAttrAppendList_11>:
 8001d86:	9805      	ldr	r0, [sp, #20]
 8001d88:	1c40      	adds	r0, r0, #1
 8001d8a:	9005      	str	r0, [sp, #20]
 8001d8c:	e00a      	b.n	8001da4 <??ZbZclAttrAppendList_13>

08001d8e <??ZbZclAttrAppendList_12>:
 8001d8e:	9803      	ldr	r0, [sp, #12]
 8001d90:	7880      	ldrb	r0, [r0, #2]
 8001d92:	2843      	cmp	r0, #67	@ 0x43
 8001d94:	d003      	beq.n	8001d9e <??ZbZclAttrAppendList_14>
 8001d96:	9803      	ldr	r0, [sp, #12]
 8001d98:	7880      	ldrb	r0, [r0, #2]
 8001d9a:	2844      	cmp	r0, #68	@ 0x44
 8001d9c:	d102      	bne.n	8001da4 <??ZbZclAttrAppendList_13>

08001d9e <??ZbZclAttrAppendList_14>:
 8001d9e:	9805      	ldr	r0, [sp, #20]
 8001da0:	1c80      	adds	r0, r0, #2
 8001da2:	9005      	str	r0, [sp, #20]

08001da4 <??ZbZclAttrAppendList_13>:
 8001da4:	9805      	ldr	r0, [sp, #20]
 8001da6:	9000      	str	r0, [sp, #0]
 8001da8:	e00e      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001daa <??ZbZclAttrAppendList_10>:
 8001daa:	fb09 f908 	mul.w	r9, r9, r8
 8001dae:	eb06 0009 	add.w	r0, r6, r9
 8001db2:	7880      	ldrb	r0, [r0, #2]
 8001db4:	f7ff f8b4 	bl	8000f20 <ZbZclAttrTypeLength>
 8001db8:	9005      	str	r0, [sp, #20]
 8001dba:	9805      	ldr	r0, [sp, #20]
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d101      	bne.n	8001dc4 <??ZbZclAttrAppendList_15>
 8001dc0:	208d      	movs	r0, #141	@ 0x8d
 8001dc2:	e03a      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001dc4 <??ZbZclAttrAppendList_15>:
 8001dc4:	9805      	ldr	r0, [sp, #20]
 8001dc6:	9000      	str	r0, [sp, #0]

08001dc8 <??ZbZclAttrAppendList_9>:
 8001dc8:	2300      	movs	r3, #0
 8001dca:	a236      	add	r2, pc, #216	@ (adr r2, 8001ea4 <??DataTable1>)
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	3118      	adds	r1, #24
 8001dd0:	9808      	ldr	r0, [sp, #32]
 8001dd2:	f010 f96f 	bl	80120b4 <zb_heap_alloc>
 8001dd6:	0004      	movs	r4, r0
 8001dd8:	2c00      	cmp	r4, #0
 8001dda:	d101      	bne.n	8001de0 <??ZbZclAttrAppendList_16>
 8001ddc:	2089      	movs	r0, #137	@ 0x89
 8001dde:	e02c      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001de0 <??ZbZclAttrAppendList_16>:
 8001de0:	2518      	movs	r5, #24
 8001de2:	f10d 0904 	add.w	r9, sp, #4
 8001de6:	46a2      	mov	sl, r4
 8001de8:	002a      	movs	r2, r5
 8001dea:	4649      	mov	r1, r9
 8001dec:	4650      	mov	r0, sl
 8001dee:	f013 fe96 	bl	8015b1e <__aeabi_memcpy>
 8001df2:	9800      	ldr	r0, [sp, #0]
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d00c      	beq.n	8001e12 <??ZbZclAttrAppendList_17>
 8001df8:	f114 0018 	adds.w	r0, r4, #24
 8001dfc:	60e0      	str	r0, [r4, #12]
 8001dfe:	9800      	ldr	r0, [sp, #0]
 8001e00:	9007      	str	r0, [sp, #28]
 8001e02:	2500      	movs	r5, #0
 8001e04:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8001e08:	002a      	movs	r2, r5
 8001e0a:	9907      	ldr	r1, [sp, #28]
 8001e0c:	4648      	mov	r0, r9
 8001e0e:	f005 fea9 	bl	8007b64 <__aeabi_memset>

08001e12 <??ZbZclAttrAppendList_17>:
 8001e12:	0021      	movs	r1, r4
 8001e14:	0038      	movs	r0, r7
 8001e16:	f7fe f9b3 	bl	8000180 <ZbZclAttrAddSorted>
 8001e1a:	68e0      	ldr	r0, [r4, #12]
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d005      	beq.n	8001e2c <??ZbZclAttrAppendList_18>
 8001e20:	6922      	ldr	r2, [r4, #16]
 8001e22:	68e1      	ldr	r1, [r4, #12]
 8001e24:	68a0      	ldr	r0, [r4, #8]
 8001e26:	7880      	ldrb	r0, [r0, #2]
 8001e28:	f7fe fdfa 	bl	8000a20 <ZbZclAttrDefaultValue>

08001e2c <??ZbZclAttrAppendList_18>:
 8001e2c:	f118 0801 	adds.w	r8, r8, #1
 8001e30:	e73e      	b.n	8001cb0 <??ZbZclAttrAppendList_3>

08001e32 <??ZbZclAttrAppendList_4>:
 8001e32:	0038      	movs	r0, r7
 8001e34:	f000 ff3a 	bl	8002cac <zcl_reporting_create_default_reports>
 8001e38:	2000      	movs	r0, #0

08001e3a <??ZbZclAttrAppendList_2>:
 8001e3a:	b00b      	add	sp, #44	@ 0x2c
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e40 <ZbZclAttrCallbackExec>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	000d      	movs	r5, r1
 8001e46:	0016      	movs	r6, r2
 8001e48:	68a8      	ldr	r0, [r5, #8]
 8001e4a:	68c0      	ldr	r0, [r0, #12]
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d005      	beq.n	8001e5c <??ZbZclAttrCallbackExec_0>
 8001e50:	0031      	movs	r1, r6
 8001e52:	0020      	movs	r0, r4
 8001e54:	68aa      	ldr	r2, [r5, #8]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	4790      	blx	r2
 8001e5a:	e000      	b.n	8001e5e <??ZbZclAttrCallbackExec_1>

08001e5c <??ZbZclAttrCallbackExec_0>:
 8001e5c:	2001      	movs	r0, #1

08001e5e <??ZbZclAttrCallbackExec_1>:
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}

08001e60 <ZbZclAttrFreeAttr>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	0004      	movs	r4, r0
 8001e64:	000d      	movs	r5, r1
 8001e66:	68a8      	ldr	r0, [r5, #8]
 8001e68:	7900      	ldrb	r0, [r0, #4]
 8001e6a:	0780      	lsls	r0, r0, #30
 8001e6c:	d50b      	bpl.n	8001e86 <??ZbZclAttrFreeAttr_0>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	68a8      	ldr	r0, [r5, #8]
 8001e72:	8801      	ldrh	r1, [r0, #0]
 8001e74:	0020      	movs	r0, r4
 8001e76:	f000 fdfd 	bl	8002a74 <zcl_cluster_attr_report_delete>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	68a8      	ldr	r0, [r5, #8]
 8001e7e:	8801      	ldrh	r1, [r0, #0]
 8001e80:	0020      	movs	r0, r4
 8001e82:	f000 fdf7 	bl	8002a74 <zcl_cluster_attr_report_delete>

08001e86 <??ZbZclAttrFreeAttr_0>:
 8001e86:	6868      	ldr	r0, [r5, #4]
 8001e88:	6829      	ldr	r1, [r5, #0]
 8001e8a:	6048      	str	r0, [r1, #4]
 8001e8c:	6828      	ldr	r0, [r5, #0]
 8001e8e:	6869      	ldr	r1, [r5, #4]
 8001e90:	6008      	str	r0, [r1, #0]
 8001e92:	602d      	str	r5, [r5, #0]
 8001e94:	606d      	str	r5, [r5, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	a202      	add	r2, pc, #8	@ (adr r2, 8001ea4 <??DataTable1>)
 8001e9a:	0029      	movs	r1, r5
 8001e9c:	68a0      	ldr	r0, [r4, #8]
 8001e9e:	f010 f918 	bl	80120d2 <zb_heap_free>
 8001ea2:	bd31      	pop	{r0, r4, r5, pc}

08001ea4 <??DataTable1>:
 8001ea4:	0000 0000                                   ....

08001ea8 <ZbZclAttrFreeList>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	0005      	movs	r5, r0

08001eac <??ZbZclAttrFreeList_0>:
 8001eac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001eae:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001eb2:	4288      	cmp	r0, r1
 8001eb4:	d001      	beq.n	8001eba <??ZbZclAttrFreeList_1>
 8001eb6:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8001eb8:	e000      	b.n	8001ebc <??ZbZclAttrFreeList_2>

08001eba <??ZbZclAttrFreeList_1>:
 8001eba:	2400      	movs	r4, #0

08001ebc <??ZbZclAttrFreeList_2>:
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	d005      	beq.n	8001ecc <??ZbZclAttrFreeList_3>

08001ec0 <??ZbZclAttrFreeList_4>:
 8001ec0:	0026      	movs	r6, r4
 8001ec2:	0031      	movs	r1, r6
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	f7ff ffcb 	bl	8001e60 <ZbZclAttrFreeAttr>
 8001eca:	e7ef      	b.n	8001eac <??ZbZclAttrFreeList_0>

08001ecc <??ZbZclAttrFreeList_3>:
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ed0 <zcl_reporting_send_conf>:
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	7e02      	ldrb	r2, [r0, #24]
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d004      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ed8:	7e02      	ldrb	r2, [r0, #24]
 8001eda:	2aa4      	cmp	r2, #164	@ 0xa4
 8001edc:	d001      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ede:	7e02      	ldrb	r2, [r0, #24]
 8001ee0:	2aa3      	cmp	r2, #163	@ 0xa3

08001ee2 <??zcl_reporting_send_conf_0>:
 8001ee2:	4770      	bx	lr

08001ee4 <report_command_timer>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	0004      	movs	r4, r0
 8001ee8:	000d      	movs	r5, r1
 8001eea:	002e      	movs	r6, r5
 8001eec:	f116 0108 	adds.w	r1, r6, #8
 8001ef0:	6830      	ldr	r0, [r6, #0]
 8001ef2:	f000 f852 	bl	8001f9a <zcl_reporting_send_report>
 8001ef6:	6870      	ldr	r0, [r6, #4]
 8001ef8:	f00f fd3e 	bl	8011978 <ZbTimerFree>
 8001efc:	2300      	movs	r3, #0
 8001efe:	a2cf      	add	r2, pc, #828	@ (adr r2, 800223c <??DataTable4>)
 8001f00:	0031      	movs	r1, r6
 8001f02:	6830      	ldr	r0, [r6, #0]
 8001f04:	6880      	ldr	r0, [r0, #8]
 8001f06:	f010 f8e4 	bl	80120d2 <zb_heap_free>
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}

08001f0c <zcl_reporting_queue_report>:
 8001f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	0006      	movs	r6, r0
 8001f12:	000f      	movs	r7, r1
 8001f14:	0014      	movs	r4, r2
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d104      	bne.n	8001f24 <??zcl_reporting_queue_report_0>
 8001f1a:	0039      	movs	r1, r7
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	f000 f83c 	bl	8001f9a <zcl_reporting_send_report>
 8001f22:	e037      	b.n	8001f94 <??zcl_reporting_queue_report_1>

08001f24 <??zcl_reporting_queue_report_0>:
 8001f24:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	2198      	movs	r1, #152	@ 0x98
 8001f2e:	68b0      	ldr	r0, [r6, #8]
 8001f30:	f010 f8c0 	bl	80120b4 <zb_heap_alloc>
 8001f34:	0005      	movs	r5, r0
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d101      	bne.n	8001f3e <??zcl_reporting_queue_report_2>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e02b      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f3e <??zcl_reporting_queue_report_2>:
 8001f3e:	f05f 0998 	movs.w	r9, #152	@ 0x98
 8001f42:	f05f 0a00 	movs.w	sl, #0
 8001f46:	46ab      	mov	fp, r5
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	4658      	mov	r0, fp
 8001f4e:	f005 fe09 	bl	8007b64 <__aeabi_memset>
 8001f52:	002a      	movs	r2, r5
 8001f54:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8002bf0 <??DataTable9>
 8001f58:	68b0      	ldr	r0, [r6, #8]
 8001f5a:	f00f fcbb 	bl	80118d4 <ZbTimerAlloc>
 8001f5e:	6068      	str	r0, [r5, #4]
 8001f60:	6868      	ldr	r0, [r5, #4]
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d107      	bne.n	8001f76 <??zcl_reporting_queue_report_4>
 8001f66:	2300      	movs	r3, #0
 8001f68:	4642      	mov	r2, r8
 8001f6a:	0029      	movs	r1, r5
 8001f6c:	68b0      	ldr	r0, [r6, #8]
 8001f6e:	f010 f8b0 	bl	80120d2 <zb_heap_free>
 8001f72:	2000      	movs	r0, #0
 8001f74:	e00f      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f76 <??zcl_reporting_queue_report_4>:
 8001f76:	602e      	str	r6, [r5, #0]
 8001f78:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8001f7c:	46b9      	mov	r9, r7
 8001f7e:	f115 0a08 	adds.w	sl, r5, #8
 8001f82:	4642      	mov	r2, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	4650      	mov	r0, sl
 8001f88:	f013 fdc9 	bl	8015b1e <__aeabi_memcpy>
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	6868      	ldr	r0, [r5, #4]
 8001f90:	f00f fd26 	bl	80119e0 <ZbTimerReset>

08001f94 <??zcl_reporting_queue_report_1>:
 8001f94:	2001      	movs	r0, #1

08001f96 <??zcl_reporting_queue_report_3>:
 8001f96:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f9a <zcl_reporting_send_report>:
 8001f9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9e:	b0cc      	sub	sp, #304	@ 0x130
 8001fa0:	0005      	movs	r5, r0
 8001fa2:	000e      	movs	r6, r1
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f88d 0004 	strb.w	r0, [sp, #4]
 8001fac:	8a28      	ldrh	r0, [r5, #16]
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <??zcl_reporting_send_report_0>
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e000      	b.n	8001fb8 <??zcl_reporting_send_report_1>

08001fb6 <??zcl_reporting_send_report_0>:
 8001fb6:	2000      	movs	r0, #0

08001fb8 <??zcl_reporting_send_report_1>:
 8001fb8:	f88d 0005 	strb.w	r0, [sp, #5]
 8001fbc:	8a28      	ldrh	r0, [r5, #16]
 8001fbe:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001fc2:	7f28      	ldrb	r0, [r5, #28]
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d103      	bne.n	8001fd0 <??zcl_reporting_send_report_2>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f88d 0006 	strb.w	r0, [sp, #6]
 8001fce:	e002      	b.n	8001fd6 <??zcl_reporting_send_report_3>

08001fd0 <??zcl_reporting_send_report_2>:
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f88d 0006 	strb.w	r0, [sp, #6]

08001fd6 <??zcl_reporting_send_report_3>:
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f88d 0007 	strb.w	r0, [sp, #7]
 8001fdc:	f00f fe5e 	bl	8011c9c <ZbZclGetNextSeqnum>
 8001fe0:	f88d 000a 	strb.w	r0, [sp, #10]
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f88d 000b 	strb.w	r0, [sp, #11]
 8001fea:	2205      	movs	r2, #5
 8001fec:	a903      	add	r1, sp, #12
 8001fee:	a801      	add	r0, sp, #4
 8001ff0:	f004 facc 	bl	800658c <ZbZclAppendHeader>
 8001ff4:	0007      	movs	r7, r0
 8001ff6:	2f01      	cmp	r7, #1
 8001ff8:	f2c0 8093 	blt.w	8002122 <??zcl_reporting_send_report_4>

08001ffc <??zcl_reporting_send_report_5>:
 8001ffc:	a91a      	add	r1, sp, #104	@ 0x68
 8001ffe:	a803      	add	r0, sp, #12
 8002000:	0022      	movs	r2, r4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8002008:	0038      	movs	r0, r7
 800200a:	b2c0      	uxtb	r0, r0
 800200c:	aa1a      	add	r2, sp, #104	@ 0x68
 800200e:	0023      	movs	r3, r4
 8002010:	b2db      	uxtb	r3, r3
 8002012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002016:	6050      	str	r0, [r2, #4]
 8002018:	1c64      	adds	r4, r4, #1
 800201a:	2000      	movs	r0, #0
 800201c:	4680      	mov	r8, r0

0800201e <??zcl_reporting_send_report_6>:
 800201e:	f1b8 0f0c 	cmp.w	r8, #12
 8002022:	d22e      	bcs.n	8002082 <??zcl_reporting_send_report_7>
 8002024:	220c      	movs	r2, #12
 8002026:	fb02 f008 	mul.w	r0, r2, r8
 800202a:	4430      	add	r0, r6
 800202c:	7a00      	ldrb	r0, [r0, #8]
 800202e:	2800      	cmp	r0, #0
 8002030:	d027      	beq.n	8002082 <??zcl_reporting_send_report_7>

08002032 <??zcl_reporting_send_report_8>:
 8002032:	fb02 f008 	mul.w	r0, r2, r8
 8002036:	4430      	add	r0, r6
 8002038:	3009      	adds	r0, #9
 800203a:	0023      	movs	r3, r4
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002042:	2003      	movs	r0, #3
 8002044:	ab1a      	add	r3, sp, #104	@ 0x68
 8002046:	46a4      	mov	ip, r4
 8002048:	fa5f fc8c 	uxtb.w	ip, ip
 800204c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002050:	6058      	str	r0, [r3, #4]
 8002052:	1c64      	adds	r4, r4, #1
 8002054:	fb02 f008 	mul.w	r0, r2, r8
 8002058:	4430      	add	r0, r6
 800205a:	6840      	ldr	r0, [r0, #4]
 800205c:	0023      	movs	r3, r4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002064:	fb02 f208 	mul.w	r2, r2, r8
 8002068:	eb06 0002 	add.w	r0, r6, r2
 800206c:	7a00      	ldrb	r0, [r0, #8]
 800206e:	aa1a      	add	r2, sp, #104	@ 0x68
 8002070:	0023      	movs	r3, r4
 8002072:	b2db      	uxtb	r3, r3
 8002074:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002078:	6050      	str	r0, [r2, #4]
 800207a:	1c64      	adds	r4, r4, #1
 800207c:	f118 0801 	adds.w	r8, r8, #1
 8002080:	e7cd      	b.n	800201e <??zcl_reporting_send_report_6>

08002082 <??zcl_reporting_send_report_7>:
 8002082:	2200      	movs	r2, #0
 8002084:	a906      	add	r1, sp, #24
 8002086:	0028      	movs	r0, r5
 8002088:	f001 fe57 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 800208c:	a806      	add	r0, sp, #24
 800208e:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8002bf8 <??DataTable9_2>
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	f013 fd42 	bl	8015b1e <__aeabi_memcpy>
 800209a:	2001      	movs	r0, #1
 800209c:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020a0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020a4:	f050 0004 	orrs.w	r0, r0, #4
 80020a8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020ac:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020b0:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 80020b4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020b8:	7ca8      	ldrb	r0, [r5, #18]
 80020ba:	28ab      	cmp	r0, #171	@ 0xab
 80020bc:	d005      	beq.n	80020ca <??zcl_reporting_send_report_9>
 80020be:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020c2:	f050 0002 	orrs.w	r0, r0, #2
 80020c6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

080020ca <??zcl_reporting_send_report_9>:
 80020ca:	2001      	movs	r0, #1
 80020cc:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80020d0:	2000      	movs	r0, #0
 80020d2:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 80020d6:	a81a      	add	r0, sp, #104	@ 0x68
 80020d8:	900c      	str	r0, [sp, #48]	@ 0x30
 80020da:	0020      	movs	r0, r4
 80020dc:	b2c0      	uxtb	r0, r0
 80020de:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80020e2:	68ab      	ldr	r3, [r5, #8]
 80020e4:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8002bfc <??DataTable9_3>
 80020e8:	a906      	add	r1, sp, #24
 80020ea:	68a8      	ldr	r0, [r5, #8]
 80020ec:	f00f f9ba 	bl	8011464 <ZbApsdeDataReqCallback>
 80020f0:	f88d 0000 	strb.w	r0, [sp]
 80020f4:	f89d 0000 	ldrb.w	r0, [sp]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d012      	beq.n	8002122 <??zcl_reporting_send_report_4>
 80020fc:	f05f 0920 	movs.w	r9, #32
 8002100:	f05f 0a00 	movs.w	sl, #0
 8002104:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8002108:	4652      	mov	r2, sl
 800210a:	4649      	mov	r1, r9
 800210c:	4658      	mov	r0, fp
 800210e:	f005 fd29 	bl	8007b64 <__aeabi_memset>
 8002112:	f89d 0000 	ldrb.w	r0, [sp]
 8002116:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 800211a:	68a9      	ldr	r1, [r5, #8]
 800211c:	a812      	add	r0, sp, #72	@ 0x48
 800211e:	f7ff fed7 	bl	8001ed0 <zcl_reporting_send_conf>

08002122 <??zcl_reporting_send_report_4>:
 8002122:	f05f 0900 	movs.w	r9, #0

08002126 <??zcl_reporting_send_report_10>:
 8002126:	f1b9 0f0c 	cmp.w	r9, #12
 800212a:	d21e      	bcs.n	800216a <??zcl_reporting_send_report_11>
 800212c:	f05f 080c 	movs.w	r8, #12
 8002130:	fb08 f009 	mul.w	r0, r8, r9
 8002134:	4430      	add	r0, r6
 8002136:	6840      	ldr	r0, [r0, #4]
 8002138:	2800      	cmp	r0, #0
 800213a:	d016      	beq.n	800216a <??zcl_reporting_send_report_11>

0800213c <??zcl_reporting_send_report_12>:
 800213c:	2300      	movs	r3, #0
 800213e:	a23f      	add	r2, pc, #252	@ (adr r2, 800223c <??DataTable4>)
 8002140:	fb08 f009 	mul.w	r0, r8, r9
 8002144:	4430      	add	r0, r6
 8002146:	6841      	ldr	r1, [r0, #4]
 8002148:	68a8      	ldr	r0, [r5, #8]
 800214a:	f00f ffc2 	bl	80120d2 <zb_heap_free>
 800214e:	2000      	movs	r0, #0
 8002150:	fb08 f109 	mul.w	r1, r8, r9
 8002154:	4431      	add	r1, r6
 8002156:	6048      	str	r0, [r1, #4]
 8002158:	2000      	movs	r0, #0
 800215a:	fb08 f809 	mul.w	r8, r8, r9
 800215e:	eb06 0108 	add.w	r1, r6, r8
 8002162:	7208      	strb	r0, [r1, #8]
 8002164:	f119 0901 	adds.w	r9, r9, #1
 8002168:	e7dd      	b.n	8002126 <??zcl_reporting_send_report_10>

0800216a <??zcl_reporting_send_report_11>:
 800216a:	b04d      	add	sp, #308	@ 0x134
 800216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002170 <zcl_report_check_time>:
 8002170:	4281      	cmp	r1, r0
 8002172:	d201      	bcs.n	8002178 <??zcl_report_check_time_0>
 8002174:	0008      	movs	r0, r1
 8002176:	e7ff      	b.n	8002178 <??zcl_report_check_time_0>

08002178 <??zcl_report_check_time_0>:
 8002178:	4770      	bx	lr

0800217a <zcl_report_kick>:
 800217a:	b538      	push	{r3, r4, r5, lr}
 800217c:	0004      	movs	r4, r0
 800217e:	000d      	movs	r5, r1
 8002180:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002182:	2800      	cmp	r0, #0
 8002184:	d101      	bne.n	800218a <??zcl_report_kick_0>
 8002186:	2000      	movs	r0, #0
 8002188:	e00d      	b.n	80021a6 <??zcl_report_kick_1>

0800218a <??zcl_report_kick_0>:
 800218a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800218e:	2800      	cmp	r0, #0
 8002190:	d001      	beq.n	8002196 <??zcl_report_kick_2>
 8002192:	2001      	movs	r0, #1
 8002194:	e007      	b.n	80021a6 <??zcl_report_kick_1>

08002196 <??zcl_report_kick_2>:
 8002196:	2001      	movs	r0, #1
 8002198:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 800219c:	0029      	movs	r1, r5
 800219e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80021a0:	f00f fc1e 	bl	80119e0 <ZbTimerReset>
 80021a4:	2001      	movs	r0, #1

080021a6 <??zcl_report_kick_1>:
 80021a6:	bd32      	pop	{r1, r4, r5, pc}

080021a8 <ZbZclAttrReportKick>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	0004      	movs	r4, r0
 80021ac:	000d      	movs	r5, r1
 80021ae:	0016      	movs	r6, r2
 80021b0:	001f      	movs	r7, r3
 80021b2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d001      	beq.n	80021bc <??ZbZclAttrReportKick_0>
 80021b8:	2001      	movs	r0, #1
 80021ba:	e010      	b.n	80021de <??ZbZclAttrReportKick_1>

080021bc <??ZbZclAttrReportKick_0>:
 80021bc:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80021c0:	6426      	str	r6, [r4, #64]	@ 0x40
 80021c2:	6467      	str	r7, [r4, #68]	@ 0x44
 80021c4:	2100      	movs	r1, #0
 80021c6:	0020      	movs	r0, r4
 80021c8:	f7ff ffd7 	bl	800217a <zcl_report_kick>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d105      	bne.n	80021dc <??ZbZclAttrReportKick_2>
 80021d0:	2000      	movs	r0, #0
 80021d2:	6420      	str	r0, [r4, #64]	@ 0x40
 80021d4:	2000      	movs	r0, #0
 80021d6:	6460      	str	r0, [r4, #68]	@ 0x44
 80021d8:	2001      	movs	r0, #1
 80021da:	e000      	b.n	80021de <??ZbZclAttrReportKick_1>

080021dc <??ZbZclAttrReportKick_2>:
 80021dc:	2000      	movs	r0, #0

080021de <??ZbZclAttrReportKick_1>:
 80021de:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080021e0 <zcl_report_append_attr>:
 80021e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e4:	0004      	movs	r4, r0
 80021e6:	000d      	movs	r5, r1
 80021e8:	0016      	movs	r6, r2
 80021ea:	001f      	movs	r7, r3
 80021ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80021f0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80021f4:	2300      	movs	r3, #0
 80021f6:	a211      	add	r2, pc, #68	@ (adr r2, 800223c <??DataTable4>)
 80021f8:	4649      	mov	r1, r9
 80021fa:	0020      	movs	r0, r4
 80021fc:	f00f ff5a 	bl	80120b4 <zb_heap_alloc>
 8002200:	6068      	str	r0, [r5, #4]
 8002202:	6868      	ldr	r0, [r5, #4]
 8002204:	2800      	cmp	r0, #0
 8002206:	d101      	bne.n	800220c <??zcl_report_append_attr_0>
 8002208:	2000      	movs	r0, #0
 800220a:	e014      	b.n	8002236 <??zcl_report_append_attr_1>

0800220c <??zcl_report_append_attr_0>:
 800220c:	f8cd 9000 	str.w	r9, [sp]
 8002210:	46c2      	mov	sl, r8
 8002212:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8002216:	9a00      	ldr	r2, [sp, #0]
 8002218:	4651      	mov	r1, sl
 800221a:	4658      	mov	r0, fp
 800221c:	f013 fc7f 	bl	8015b1e <__aeabi_memcpy>
 8002220:	f885 9008 	strb.w	r9, [r5, #8]
 8002224:	802e      	strh	r6, [r5, #0]
 8002226:	0031      	movs	r1, r6
 8002228:	b289      	uxth	r1, r1
 800222a:	f115 0009 	adds.w	r0, r5, #9
 800222e:	f004 feba 	bl	8006fa6 <putle16>
 8002232:	72ef      	strb	r7, [r5, #11]
 8002234:	2001      	movs	r0, #1

08002236 <??zcl_report_append_attr_1>:
 8002236:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800223c <??DataTable4>:
 800223c:	0000 0000                                   ....

08002240 <zcl_cluster_report_check_timeout>:
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	0006      	movs	r6, r0
 8002246:	000f      	movs	r7, r1
 8002248:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800224a:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800224e:	4288      	cmp	r0, r1
 8002250:	d001      	beq.n	8002256 <??zcl_cluster_report_check_timeout_0>
 8002252:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002254:	e000      	b.n	8002258 <??zcl_cluster_report_check_timeout_1>

08002256 <??zcl_cluster_report_check_timeout_0>:
 8002256:	2000      	movs	r0, #0

08002258 <??zcl_cluster_report_check_timeout_1>:
 8002258:	2800      	cmp	r0, #0
 800225a:	d101      	bne.n	8002260 <??zcl_cluster_report_check_timeout_2>
 800225c:	2000      	movs	r0, #0
 800225e:	e042      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

08002260 <??zcl_cluster_report_check_timeout_2>:
 8002260:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002262:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8002266:	4288      	cmp	r0, r1
 8002268:	d001      	beq.n	800226e <??zcl_cluster_report_check_timeout_4>
 800226a:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800226c:	e000      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

0800226e <??zcl_cluster_report_check_timeout_4>:
 800226e:	2500      	movs	r5, #0

08002270 <??zcl_cluster_report_check_timeout_5>:
 8002270:	2d00      	cmp	r5, #0
 8002272:	d037      	beq.n	80022e4 <??zcl_cluster_report_check_timeout_6>
 8002274:	46a8      	mov	r8, r5
 8002276:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 800227a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800227e:	4288      	cmp	r0, r1
 8002280:	d027      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

08002282 <??zcl_cluster_report_check_timeout_8>:
 8002282:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8002286:	2800      	cmp	r0, #0
 8002288:	d00e      	beq.n	80022a8 <??zcl_cluster_report_check_timeout_9>
 800228a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800228e:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8002292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002296:	fb00 1909 	mla	r9, r0, r9, r1
 800229a:	4649      	mov	r1, r9
 800229c:	0038      	movs	r0, r7
 800229e:	f00f fbcf 	bl	8011a40 <ZbTimeoutRemaining>
 80022a2:	0004      	movs	r4, r0
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d114      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022a8 <??zcl_cluster_report_check_timeout_9>:
 80022a8:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d010      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022b0 <??zcl_cluster_report_check_timeout_10>:
 80022b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80022b4:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 80022b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022bc:	fb00 1909 	mla	r9, r0, r9, r1
 80022c0:	4649      	mov	r1, r9
 80022c2:	0038      	movs	r0, r7
 80022c4:	f00f fbbc 	bl	8011a40 <ZbTimeoutRemaining>
 80022c8:	0004      	movs	r4, r0
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	d101      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022ce <??zcl_cluster_report_check_timeout_11>:
 80022ce:	2001      	movs	r0, #1
 80022d0:	e009      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

080022d2 <??zcl_cluster_report_check_timeout_7>:
 80022d2:	6828      	ldr	r0, [r5, #0]
 80022d4:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80022d8:	4288      	cmp	r0, r1
 80022da:	d001      	beq.n	80022e0 <??zcl_cluster_report_check_timeout_12>
 80022dc:	682d      	ldr	r5, [r5, #0]
 80022de:	e7c7      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e0 <??zcl_cluster_report_check_timeout_12>:
 80022e0:	2500      	movs	r5, #0
 80022e2:	e7c5      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e4 <??zcl_cluster_report_check_timeout_6>:
 80022e4:	2000      	movs	r0, #0

080022e6 <??zcl_cluster_report_check_timeout_3>:
 80022e6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080022ec <zcl_cluster_reports_timer>:
 80022ec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b081      	sub	sp, #4
 80022f2:	ed2d 8b04 	vpush	{d8-d9}
 80022f6:	b0b0      	sub	sp, #192	@ 0xc0
 80022f8:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80022fa:	9003      	str	r0, [sp, #12]
 80022fc:	2000      	movs	r0, #0
 80022fe:	9005      	str	r0, [sp, #20]
 8002300:	2000      	movs	r0, #0
 8002302:	9007      	str	r0, [sp, #28]
 8002304:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8002c00 <??DataTable9_4>
 8002308:	9006      	str	r0, [sp, #24]
 800230a:	2000      	movs	r0, #0
 800230c:	f88d 0010 	strb.w	r0, [sp, #16]
 8002310:	f05f 0b00 	movs.w	fp, #0
 8002314:	9803      	ldr	r0, [sp, #12]
 8002316:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800231a:	f88d 000b 	strb.w	r0, [sp, #11]
 800231e:	2000      	movs	r0, #0
 8002320:	f88d 000a 	strb.w	r0, [sp, #10]
 8002324:	2000      	movs	r0, #0
 8002326:	9903      	ldr	r1, [sp, #12]
 8002328:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 800232c:	2000      	movs	r0, #0
 800232e:	9903      	ldr	r1, [sp, #12]
 8002330:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8002334:	9803      	ldr	r0, [sp, #12]
 8002336:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002338:	9903      	ldr	r1, [sp, #12]
 800233a:	3130      	adds	r1, #48	@ 0x30
 800233c:	4288      	cmp	r0, r1
 800233e:	d002      	beq.n	8002346 <??zcl_cluster_reports_timer_1>
 8002340:	9803      	ldr	r0, [sp, #12]
 8002342:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002344:	e000      	b.n	8002348 <??zcl_cluster_reports_timer_2>

08002346 <??zcl_cluster_reports_timer_1>:
 8002346:	2000      	movs	r0, #0

08002348 <??zcl_cluster_reports_timer_2>:
 8002348:	2800      	cmp	r0, #0
 800234a:	f000 81f7 	beq.w	800273c <??zcl_cluster_reports_timer_3>

0800234e <??zcl_cluster_reports_timer_4>:
 800234e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002350:	f00f fbfb 	bl	8011b4a <ZbZclUptime>
 8002354:	9009      	str	r0, [sp, #36]	@ 0x24
 8002356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002358:	9803      	ldr	r0, [sp, #12]
 800235a:	f7ff ff71 	bl	8002240 <zcl_cluster_report_check_timeout>
 800235e:	2800      	cmp	r0, #0
 8002360:	d004      	beq.n	800236c <??zcl_cluster_reports_timer_5>
 8002362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002364:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 8002368:	900b      	str	r0, [sp, #44]	@ 0x2c
 800236a:	e001      	b.n	8002370 <??zcl_cluster_reports_timer_6>

0800236c <??zcl_cluster_reports_timer_5>:
 800236c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800236e:	900b      	str	r0, [sp, #44]	@ 0x2c

08002370 <??zcl_cluster_reports_timer_6>:
 8002370:	2490      	movs	r4, #144	@ 0x90
 8002372:	2500      	movs	r5, #0
 8002374:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8002378:	002a      	movs	r2, r5
 800237a:	0021      	movs	r1, r4
 800237c:	4640      	mov	r0, r8
 800237e:	f005 fbf1 	bl	8007b64 <__aeabi_memset>
 8002382:	2000      	movs	r0, #0
 8002384:	4682      	mov	sl, r0
 8002386:	2000      	movs	r0, #0
 8002388:	f88d 0008 	strb.w	r0, [sp, #8]
 800238c:	9803      	ldr	r0, [sp, #12]
 800238e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002390:	9903      	ldr	r1, [sp, #12]
 8002392:	3130      	adds	r1, #48	@ 0x30
 8002394:	4288      	cmp	r0, r1
 8002396:	d002      	beq.n	800239e <??zcl_cluster_reports_timer_7>
 8002398:	9803      	ldr	r0, [sp, #12]
 800239a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800239c:	e000      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800239e <??zcl_cluster_reports_timer_7>:
 800239e:	2600      	movs	r6, #0

080023a0 <??zcl_cluster_reports_timer_8>:
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	f000 817b 	beq.w	800269c <??zcl_cluster_reports_timer_9>
 80023a6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023aa:	f88d 0009 	strb.w	r0, [sp, #9]
 80023ae:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8002c00 <??DataTable9_4>
 80023b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80023b4:	0037      	movs	r7, r6
 80023b6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80023b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023bc:	4288      	cmp	r0, r1
 80023be:	f000 8164 	beq.w	800268a <??zcl_cluster_reports_timer_10>

080023c2 <??zcl_cluster_reports_timer_11>:
 80023c2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d116      	bne.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ca:	8c38      	ldrh	r0, [r7, #32]
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d013      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	8c3c      	ldrh	r4, [r7, #32]
 80023d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023d8:	fb00 1404 	mla	r4, r0, r4, r1
 80023dc:	0021      	movs	r1, r4
 80023de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80023e0:	f00f fb2e 	bl	8011a40 <ZbTimeoutRemaining>
 80023e4:	9008      	str	r0, [sp, #32]
 80023e6:	9808      	ldr	r0, [sp, #32]
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d005      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ec:	9908      	ldr	r1, [sp, #32]
 80023ee:	9806      	ldr	r0, [sp, #24]
 80023f0:	f7ff febe 	bl	8002170 <zcl_report_check_time>
 80023f4:	9006      	str	r0, [sp, #24]
 80023f6:	e148      	b.n	800268a <??zcl_cluster_reports_timer_10>

080023f8 <??zcl_cluster_reports_timer_12>:
 80023f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d115      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002400:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002402:	2800      	cmp	r0, #0
 8002404:	d012      	beq.n	800242c <??zcl_cluster_reports_timer_13>
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800240a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800240e:	fb00 1404 	mla	r4, r0, r4, r1
 8002412:	0021      	movs	r1, r4
 8002414:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002416:	f00f fb13 	bl	8011a40 <ZbTimeoutRemaining>
 800241a:	900a      	str	r0, [sp, #40]	@ 0x28
 800241c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800241e:	2800      	cmp	r0, #0
 8002420:	d104      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002422:	2001      	movs	r0, #1
 8002424:	f88d 0009 	strb.w	r0, [sp, #9]
 8002428:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800242a:	6138      	str	r0, [r7, #16]

0800242c <??zcl_cluster_reports_timer_13>:
 800242c:	9803      	ldr	r0, [sp, #12]
 800242e:	8982      	ldrh	r2, [r0, #12]
 8002430:	9803      	ldr	r0, [sp, #12]
 8002432:	7b81      	ldrb	r1, [r0, #14]
 8002434:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002436:	f00f f94a 	bl	80116ce <ZbApsBindSrcExists>
 800243a:	2800      	cmp	r0, #0
 800243c:	d105      	bne.n	800244a <??zcl_cluster_reports_timer_14>
 800243e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002440:	9806      	ldr	r0, [sp, #24]
 8002442:	f7ff fe95 	bl	8002170 <zcl_report_check_time>
 8002446:	9006      	str	r0, [sp, #24]
 8002448:	e11f      	b.n	800268a <??zcl_cluster_reports_timer_10>

0800244a <??zcl_cluster_reports_timer_14>:
 800244a:	9805      	ldr	r0, [sp, #20]
 800244c:	2800      	cmp	r0, #0
 800244e:	d10b      	bne.n	8002468 <??zcl_cluster_reports_timer_15>
 8002450:	2300      	movs	r3, #0
 8002452:	a28a      	add	r2, pc, #552	@ (adr r2, 800267c <??zcl_cluster_reports_timer_0>)
 8002454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002458:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800245a:	f00f fe2b 	bl	80120b4 <zb_heap_alloc>
 800245e:	9005      	str	r0, [sp, #20]
 8002460:	9805      	ldr	r0, [sp, #20]
 8002462:	2800      	cmp	r0, #0
 8002464:	f000 816a 	beq.w	800273c <??zcl_cluster_reports_timer_3>

08002468 <??zcl_cluster_reports_timer_15>:
 8002468:	2000      	movs	r0, #0
 800246a:	9001      	str	r0, [sp, #4]
 800246c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	9b05      	ldr	r3, [sp, #20]
 8002474:	f10d 0211 	add.w	r2, sp, #17
 8002478:	89b9      	ldrh	r1, [r7, #12]
 800247a:	9803      	ldr	r0, [sp, #12]
 800247c:	f7fd ffb3 	bl	80003e6 <ZbZclAttrRead>
 8002480:	2800      	cmp	r0, #0
 8002482:	d003      	beq.n	800248c <??zcl_cluster_reports_timer_16>
 8002484:	0038      	movs	r0, r7
 8002486:	f000 fb0a 	bl	8002a9e <zcl_reporting_disable>
 800248a:	e094      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

0800248c <??zcl_cluster_reports_timer_16>:
 800248c:	2300      	movs	r3, #0
 800248e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002492:	9905      	ldr	r1, [sp, #20]
 8002494:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8002498:	f7fe fdcd 	bl	8001036 <ZbZclAttrParseLength>
 800249c:	9007      	str	r0, [sp, #28]
 800249e:	9807      	ldr	r0, [sp, #28]
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d503      	bpl.n	80024ac <??zcl_cluster_reports_timer_18>
 80024a4:	0038      	movs	r0, r7
 80024a6:	f000 fafa 	bl	8002a9e <zcl_reporting_disable>
 80024aa:	e084      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024ac <??zcl_cluster_reports_timer_18>:
 80024ac:	9807      	ldr	r0, [sp, #28]
 80024ae:	2800      	cmp	r0, #0
 80024b0:	f000 8081 	beq.w	80025b6 <??zcl_cluster_reports_timer_17>

080024b4 <??zcl_cluster_reports_timer_19>:
 80024b4:	7bb8      	ldrb	r0, [r7, #14]
 80024b6:	2838      	cmp	r0, #56	@ 0x38
 80024b8:	db37      	blt.n	800252a <??zcl_cluster_reports_timer_20>
 80024ba:	7bb8      	ldrb	r0, [r7, #14]
 80024bc:	283b      	cmp	r0, #59	@ 0x3b
 80024be:	da34      	bge.n	800252a <??zcl_cluster_reports_timer_20>
 80024c0:	f10d 0201 	add.w	r2, sp, #1
 80024c4:	9905      	ldr	r1, [sp, #20]
 80024c6:	7bb8      	ldrb	r0, [r7, #14]
 80024c8:	f004 ff01 	bl	80072ce <ZbZclParseFloat>
 80024cc:	eeb0 8a40 	vmov.f32	s16, s0
 80024d0:	eef0 8a60 	vmov.f32	s17, s1
 80024d4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80024d8:	2800      	cmp	r0, #0
 80024da:	d003      	beq.n	80024e4 <??zcl_cluster_reports_timer_21>
 80024dc:	0038      	movs	r0, r7
 80024de:	f000 fade 	bl	8002a9e <zcl_reporting_disable>
 80024e2:	e068      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024e4 <??zcl_cluster_reports_timer_21>:
 80024e4:	ec51 0b18 	vmov	r0, r1, d8
 80024e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ec:	f005 fbe8 	bl	8007cc0 <__aeabi_dsub>
 80024f0:	ec41 0b19 	vmov	d9, r0, r1
 80024f4:	ec51 0b19 	vmov	r0, r1, d9
 80024f8:	2200      	movs	r2, #0
 80024fa:	2300      	movs	r3, #0
 80024fc:	f005 fff8 	bl	80084f0 <__aeabi_cdcmpeq>
 8002500:	d205      	bcs.n	800250e <??zcl_cluster_reports_timer_22>
 8002502:	ec51 0b19 	vmov	r0, r1, d9
 8002506:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800250a:	ec41 0b19 	vmov	d9, r0, r1

0800250e <??zcl_cluster_reports_timer_22>:
 800250e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002512:	2800      	cmp	r0, #0
 8002514:	d106      	bne.n	8002524 <??zcl_cluster_reports_timer_23>
 8002516:	ec51 0b19 	vmov	r0, r1, d9
 800251a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800251e:	f005 ffe7 	bl	80084f0 <__aeabi_cdcmpeq>
 8002522:	d348      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002524 <??zcl_cluster_reports_timer_23>:
 8002524:	ed87 8b06 	vstr	d8, [r7, #24]
 8002528:	e040      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800252a <??zcl_cluster_reports_timer_20>:
 800252a:	7bb8      	ldrb	r0, [r7, #14]
 800252c:	f7fe fe34 	bl	8001198 <ZbZclAttrIsAnalog>
 8002530:	2800      	cmp	r0, #0
 8002532:	d02b      	beq.n	800258c <??zcl_cluster_reports_timer_25>
 8002534:	466a      	mov	r2, sp
 8002536:	9905      	ldr	r1, [sp, #20]
 8002538:	7bb8      	ldrb	r0, [r7, #14]
 800253a:	f7fe ff2b 	bl	8001394 <ZbZclParseInteger>
 800253e:	0004      	movs	r4, r0
 8002540:	000d      	movs	r5, r1
 8002542:	f89d 0000 	ldrb.w	r0, [sp]
 8002546:	2800      	cmp	r0, #0
 8002548:	d003      	beq.n	8002552 <??zcl_cluster_reports_timer_26>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 faa7 	bl	8002a9e <zcl_reporting_disable>
 8002550:	e031      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

08002552 <??zcl_cluster_reports_timer_26>:
 8002552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002556:	ebb4 0800 	subs.w	r8, r4, r0
 800255a:	eb75 0901 	sbcs.w	r9, r5, r1
 800255e:	f1b9 0f00 	cmp.w	r9, #0
 8002562:	d503      	bpl.n	800256c <??zcl_cluster_reports_timer_27>
 8002564:	f1d8 0800 	rsbs	r8, r8, #0
 8002568:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

0800256c <??zcl_cluster_reports_timer_27>:
 800256c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002570:	2800      	cmp	r0, #0
 8002572:	d108      	bne.n	8002586 <??zcl_cluster_reports_timer_28>
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f005 fd2c 	bl	8007fd4 <__aeabi_l2d>
 800257c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002580:	f005 ffb6 	bl	80084f0 <__aeabi_cdcmpeq>
 8002584:	d317      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002586 <??zcl_cluster_reports_timer_28>:
 8002586:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800258a:	e00f      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800258c <??zcl_cluster_reports_timer_25>:
 800258c:	9a07      	ldr	r2, [sp, #28]
 800258e:	9905      	ldr	r1, [sp, #20]
 8002590:	2000      	movs	r0, #0
 8002592:	f00f fdad 	bl	80120f0 <WpanCrc>
 8002596:	0001      	movs	r1, r0
 8002598:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800259c:	2800      	cmp	r0, #0
 800259e:	d104      	bne.n	80025aa <??zcl_cluster_reports_timer_29>
 80025a0:	8b38      	ldrh	r0, [r7, #24]
 80025a2:	000a      	movs	r2, r1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	4290      	cmp	r0, r2
 80025a8:	d005      	beq.n	80025b6 <??zcl_cluster_reports_timer_17>

080025aa <??zcl_cluster_reports_timer_29>:
 80025aa:	8339      	strh	r1, [r7, #24]

080025ac <??zcl_cluster_reports_timer_24>:
 80025ac:	2001      	movs	r0, #1
 80025ae:	f88d 0009 	strb.w	r0, [sp, #9]
 80025b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80025b4:	6138      	str	r0, [r7, #16]

080025b6 <??zcl_cluster_reports_timer_17>:
 80025b6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d060      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025be:	9807      	ldr	r0, [sp, #28]
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d05d      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025c4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80025c8:	1c40      	adds	r0, r0, #1
 80025ca:	f88d 0010 	strb.w	r0, [sp, #16]
 80025ce:	4650      	mov	r0, sl
 80025d0:	b2c0      	uxtb	r0, r0
 80025d2:	280c      	cmp	r0, #12
 80025d4:	d007      	beq.n	80025e6 <??zcl_cluster_reports_timer_31>
 80025d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80025da:	9907      	ldr	r1, [sp, #28]
 80025dc:	fa51 f080 	uxtab	r0, r1, r0
 80025e0:	1cc0      	adds	r0, r0, #3
 80025e2:	2837      	cmp	r0, #55	@ 0x37
 80025e4:	d314      	bcc.n	8002610 <??zcl_cluster_reports_timer_32>

080025e6 <??zcl_cluster_reports_timer_31>:
 80025e6:	465a      	mov	r2, fp
 80025e8:	a90c      	add	r1, sp, #48	@ 0x30
 80025ea:	9803      	ldr	r0, [sp, #12]
 80025ec:	f7ff fc8e 	bl	8001f0c <zcl_reporting_queue_report>
 80025f0:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80025f4:	2490      	movs	r4, #144	@ 0x90
 80025f6:	2500      	movs	r5, #0
 80025f8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80025fc:	002a      	movs	r2, r5
 80025fe:	0021      	movs	r1, r4
 8002600:	4640      	mov	r0, r8
 8002602:	f005 faaf 	bl	8007b64 <__aeabi_memset>
 8002606:	2000      	movs	r0, #0
 8002608:	4682      	mov	sl, r0
 800260a:	2000      	movs	r0, #0
 800260c:	f88d 0008 	strb.w	r0, [sp, #8]

08002610 <??zcl_cluster_reports_timer_32>:
 8002610:	9807      	ldr	r0, [sp, #28]
 8002612:	9001      	str	r0, [sp, #4]
 8002614:	9805      	ldr	r0, [sp, #20]
 8002616:	9000      	str	r0, [sp, #0]
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	89ba      	ldrh	r2, [r7, #12]
 800261c:	a90c      	add	r1, sp, #48	@ 0x30
 800261e:	4654      	mov	r4, sl
 8002620:	b2e4      	uxtb	r4, r4
 8002622:	200c      	movs	r0, #12
 8002624:	4344      	muls	r4, r0
 8002626:	4421      	add	r1, r4
 8002628:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800262a:	f7ff fdd9 	bl	80021e0 <zcl_report_append_attr>
 800262e:	2800      	cmp	r0, #0
 8002630:	d02b      	beq.n	800268a <??zcl_cluster_reports_timer_10>

08002632 <??zcl_cluster_reports_timer_33>:
 8002632:	f11a 0a01 	adds.w	sl, sl, #1
 8002636:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800263a:	9807      	ldr	r0, [sp, #28]
 800263c:	1841      	adds	r1, r0, r1
 800263e:	1cc9      	adds	r1, r1, #3
 8002640:	f88d 1008 	strb.w	r1, [sp, #8]
 8002644:	8c38      	ldrh	r0, [r7, #32]
 8002646:	2800      	cmp	r0, #0
 8002648:	d005      	beq.n	8002656 <??zcl_cluster_reports_timer_34>
 800264a:	8c39      	ldrh	r1, [r7, #32]
 800264c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002650:	4341      	muls	r1, r0
 8002652:	9108      	str	r1, [sp, #32]
 8002654:	e00b      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002656 <??zcl_cluster_reports_timer_34>:
 8002656:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002658:	2800      	cmp	r0, #0
 800265a:	d005      	beq.n	8002668 <??zcl_cluster_reports_timer_36>
 800265c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800265e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002662:	4341      	muls	r1, r0
 8002664:	9108      	str	r1, [sp, #32]
 8002666:	e002      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002668 <??zcl_cluster_reports_timer_36>:
 8002668:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8002c00 <??DataTable9_4>
 800266c:	9008      	str	r0, [sp, #32]

0800266e <??zcl_cluster_reports_timer_35>:
 800266e:	9908      	ldr	r1, [sp, #32]
 8002670:	9806      	ldr	r0, [sp, #24]
 8002672:	f7ff fd7d 	bl	8002170 <zcl_report_check_time>
 8002676:	9006      	str	r0, [sp, #24]
 8002678:	e007      	b.n	800268a <??zcl_cluster_reports_timer_10>
 800267a:	bf00      	nop

0800267c <??zcl_cluster_reports_timer_0>:
 800267c:	0000 0000                                   ....

08002680 <??zcl_cluster_reports_timer_30>:
 8002680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002682:	9806      	ldr	r0, [sp, #24]
 8002684:	f7ff fd74 	bl	8002170 <zcl_report_check_time>
 8002688:	9006      	str	r0, [sp, #24]

0800268a <??zcl_cluster_reports_timer_10>:
 800268a:	6830      	ldr	r0, [r6, #0]
 800268c:	9903      	ldr	r1, [sp, #12]
 800268e:	3130      	adds	r1, #48	@ 0x30
 8002690:	4288      	cmp	r0, r1
 8002692:	d001      	beq.n	8002698 <??zcl_cluster_reports_timer_37>
 8002694:	6836      	ldr	r6, [r6, #0]
 8002696:	e683      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

08002698 <??zcl_cluster_reports_timer_37>:
 8002698:	2600      	movs	r6, #0
 800269a:	e681      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800269c <??zcl_cluster_reports_timer_9>:
 800269c:	9805      	ldr	r0, [sp, #20]
 800269e:	2800      	cmp	r0, #0
 80026a0:	d04c      	beq.n	800273c <??zcl_cluster_reports_timer_3>
 80026a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d042      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 80026aa:	2001      	movs	r0, #1
 80026ac:	9007      	str	r0, [sp, #28]
 80026ae:	2001      	movs	r0, #1
 80026b0:	9905      	ldr	r1, [sp, #20]
 80026b2:	7008      	strb	r0, [r1, #0]
 80026b4:	4650      	mov	r0, sl
 80026b6:	b2c0      	uxtb	r0, r0
 80026b8:	280c      	cmp	r0, #12
 80026ba:	d007      	beq.n	80026cc <??zcl_cluster_reports_timer_39>
 80026bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80026c0:	9907      	ldr	r1, [sp, #28]
 80026c2:	fa51 f080 	uxtab	r0, r1, r0
 80026c6:	1cc0      	adds	r0, r0, #3
 80026c8:	2837      	cmp	r0, #55	@ 0x37
 80026ca:	d314      	bcc.n	80026f6 <??zcl_cluster_reports_timer_40>

080026cc <??zcl_cluster_reports_timer_39>:
 80026cc:	465a      	mov	r2, fp
 80026ce:	a90c      	add	r1, sp, #48	@ 0x30
 80026d0:	9803      	ldr	r0, [sp, #12]
 80026d2:	f7ff fc1b 	bl	8001f0c <zcl_reporting_queue_report>
 80026d6:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80026da:	2490      	movs	r4, #144	@ 0x90
 80026dc:	2500      	movs	r5, #0
 80026de:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80026e2:	002a      	movs	r2, r5
 80026e4:	0021      	movs	r1, r4
 80026e6:	4640      	mov	r0, r8
 80026e8:	f005 fa3c 	bl	8007b64 <__aeabi_memset>
 80026ec:	2000      	movs	r0, #0
 80026ee:	4682      	mov	sl, r0
 80026f0:	2000      	movs	r0, #0
 80026f2:	f88d 0008 	strb.w	r0, [sp, #8]

080026f6 <??zcl_cluster_reports_timer_40>:
 80026f6:	9807      	ldr	r0, [sp, #28]
 80026f8:	9001      	str	r0, [sp, #4]
 80026fa:	9805      	ldr	r0, [sp, #20]
 80026fc:	9000      	str	r0, [sp, #0]
 80026fe:	2330      	movs	r3, #48	@ 0x30
 8002700:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002704:	a90c      	add	r1, sp, #48	@ 0x30
 8002706:	4654      	mov	r4, sl
 8002708:	b2e4      	uxtb	r4, r4
 800270a:	200c      	movs	r0, #12
 800270c:	4344      	muls	r4, r0
 800270e:	4421      	add	r1, r4
 8002710:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002712:	f7ff fd65 	bl	80021e0 <zcl_report_append_attr>
 8002716:	2800      	cmp	r0, #0
 8002718:	d001      	beq.n	800271e <??zcl_cluster_reports_timer_41>
 800271a:	f11a 0a01 	adds.w	sl, sl, #1

0800271e <??zcl_cluster_reports_timer_41>:
 800271e:	4650      	mov	r0, sl
 8002720:	b2c0      	uxtb	r0, r0
 8002722:	2800      	cmp	r0, #0
 8002724:	d004      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 8002726:	465a      	mov	r2, fp
 8002728:	a90c      	add	r1, sp, #48	@ 0x30
 800272a:	9803      	ldr	r0, [sp, #12]
 800272c:	f7ff fbee 	bl	8001f0c <zcl_reporting_queue_report>

08002730 <??zcl_cluster_reports_timer_38>:
 8002730:	2300      	movs	r3, #0
 8002732:	a2ba      	add	r2, pc, #744	@ (adr r2, 8002a1c <??DataTable7>)
 8002734:	9905      	ldr	r1, [sp, #20]
 8002736:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002738:	f00f fccb 	bl	80120d2 <zb_heap_free>

0800273c <??zcl_cluster_reports_timer_3>:
 800273c:	9806      	ldr	r0, [sp, #24]
 800273e:	28c8      	cmp	r0, #200	@ 0xc8
 8002740:	d201      	bcs.n	8002746 <??zcl_cluster_reports_timer_42>
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	9006      	str	r0, [sp, #24]

08002746 <??zcl_cluster_reports_timer_42>:
 8002746:	9803      	ldr	r0, [sp, #12]
 8002748:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800274a:	2800      	cmp	r0, #0
 800274c:	d00c      	beq.n	8002768 <??zcl_cluster_reports_timer_43>
 800274e:	9803      	ldr	r0, [sp, #12]
 8002750:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002752:	9906      	ldr	r1, [sp, #24]
 8002754:	9803      	ldr	r0, [sp, #12]
 8002756:	9b03      	ldr	r3, [sp, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4798      	blx	r3
 800275c:	2000      	movs	r0, #0
 800275e:	9903      	ldr	r1, [sp, #12]
 8002760:	6408      	str	r0, [r1, #64]	@ 0x40
 8002762:	2000      	movs	r0, #0
 8002764:	9903      	ldr	r1, [sp, #12]
 8002766:	6448      	str	r0, [r1, #68]	@ 0x44

08002768 <??zcl_cluster_reports_timer_43>:
 8002768:	2301      	movs	r3, #1
 800276a:	f10d 020a 	add.w	r2, sp, #10
 800276e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002772:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002774:	f00f f9d4 	bl	8011b20 <ZbNwkGet>
 8002778:	2800      	cmp	r0, #0
 800277a:	d002      	beq.n	8002782 <??zcl_cluster_reports_timer_44>
 800277c:	2000      	movs	r0, #0
 800277e:	f88d 000a 	strb.w	r0, [sp, #10]

08002782 <??zcl_cluster_reports_timer_44>:
 8002782:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002786:	2800      	cmp	r0, #0
 8002788:	d110      	bne.n	80027ac <??zcl_cluster_reports_timer_45>
 800278a:	9803      	ldr	r0, [sp, #12]
 800278c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800278e:	9903      	ldr	r1, [sp, #12]
 8002790:	3130      	adds	r1, #48	@ 0x30
 8002792:	4288      	cmp	r0, r1
 8002794:	d002      	beq.n	800279c <??zcl_cluster_reports_timer_46>
 8002796:	9803      	ldr	r0, [sp, #12]
 8002798:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800279a:	e000      	b.n	800279e <??zcl_cluster_reports_timer_47>

0800279c <??zcl_cluster_reports_timer_46>:
 800279c:	2000      	movs	r0, #0

0800279e <??zcl_cluster_reports_timer_47>:
 800279e:	2800      	cmp	r0, #0
 80027a0:	d004      	beq.n	80027ac <??zcl_cluster_reports_timer_45>
 80027a2:	9906      	ldr	r1, [sp, #24]
 80027a4:	9803      	ldr	r0, [sp, #12]
 80027a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80027a8:	f00f f91a 	bl	80119e0 <ZbTimerReset>

080027ac <??zcl_cluster_reports_timer_45>:
 80027ac:	b030      	add	sp, #192	@ 0xc0
 80027ae:	ecbd 8b04 	vpop	{d8-d9}
 80027b2:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027b6 <zcl_attr_reporting_check>:
 80027b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b8:	0005      	movs	r5, r0
 80027ba:	000e      	movs	r6, r1
 80027bc:	0017      	movs	r7, r2
 80027be:	2000      	movs	r0, #0
 80027c0:	f88d 0000 	strb.w	r0, [sp]
 80027c4:	2301      	movs	r3, #1
 80027c6:	466a      	mov	r2, sp
 80027c8:	f240 410c 	movw	r1, #1036	@ 0x40c
 80027cc:	68a8      	ldr	r0, [r5, #8]
 80027ce:	f00f f9a7 	bl	8011b20 <ZbNwkGet>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d002      	beq.n	80027dc <??zcl_attr_reporting_check_0>
 80027d6:	2000      	movs	r0, #0
 80027d8:	f88d 0000 	strb.w	r0, [sp]

080027dc <??zcl_attr_reporting_check_0>:
 80027dc:	f89d 0000 	ldrb.w	r0, [sp]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d10d      	bne.n	8002800 <??zcl_attr_reporting_check_1>
 80027e4:	003a      	movs	r2, r7
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	0031      	movs	r1, r6
 80027ea:	b289      	uxth	r1, r1
 80027ec:	0028      	movs	r0, r5
 80027ee:	f000 f81a 	bl	8002826 <zcl_reporting_find>
 80027f2:	0004      	movs	r4, r0
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	d003      	beq.n	8002800 <??zcl_attr_reporting_check_1>
 80027f8:	21c8      	movs	r1, #200	@ 0xc8
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7ff fcbd 	bl	800217a <zcl_report_kick>

08002800 <??zcl_attr_reporting_check_1>:
 8002800:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002802 <ZbZclReportCleanup>:
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	0005      	movs	r5, r0

08002806 <??ZbZclReportCleanup_0>:
 8002806:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002808:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 800280c:	4288      	cmp	r0, r1
 800280e:	d001      	beq.n	8002814 <??ZbZclReportCleanup_1>
 8002810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8002812:	e000      	b.n	8002816 <??ZbZclReportCleanup_2>

08002814 <??ZbZclReportCleanup_1>:
 8002814:	2400      	movs	r4, #0

08002816 <??ZbZclReportCleanup_2>:
 8002816:	2c00      	cmp	r4, #0
 8002818:	d004      	beq.n	8002824 <??ZbZclReportCleanup_3>

0800281a <??ZbZclReportCleanup_4>:
 800281a:	0026      	movs	r6, r4
 800281c:	0030      	movs	r0, r6
 800281e:	f000 f8ff 	bl	8002a20 <zcl_reporting_delete>
 8002822:	e7f0      	b.n	8002806 <??ZbZclReportCleanup_0>

08002824 <??ZbZclReportCleanup_3>:
 8002824:	bd70      	pop	{r4, r5, r6, pc}

08002826 <zcl_reporting_find>:
 8002826:	b470      	push	{r4, r5, r6}
 8002828:	0004      	movs	r4, r0
 800282a:	000b      	movs	r3, r1
 800282c:	0010      	movs	r0, r2
 800282e:	b2c0      	uxtb	r0, r0
 8002830:	2801      	cmp	r0, #1
 8002832:	d101      	bne.n	8002838 <??zcl_reporting_find_0>
 8002834:	2000      	movs	r0, #0
 8002836:	e01c      	b.n	8002872 <??zcl_reporting_find_1>

08002838 <??zcl_reporting_find_0>:
 8002838:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800283a:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 800283e:	4288      	cmp	r0, r1
 8002840:	d001      	beq.n	8002846 <??zcl_reporting_find_2>
 8002842:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002844:	e000      	b.n	8002848 <??zcl_reporting_find_3>

08002846 <??zcl_reporting_find_2>:
 8002846:	2100      	movs	r1, #0

08002848 <??zcl_reporting_find_3>:
 8002848:	2900      	cmp	r1, #0
 800284a:	d011      	beq.n	8002870 <??zcl_reporting_find_4>
 800284c:	000d      	movs	r5, r1
 800284e:	89a8      	ldrh	r0, [r5, #12]
 8002850:	001e      	movs	r6, r3
 8002852:	b2b6      	uxth	r6, r6
 8002854:	42b0      	cmp	r0, r6
 8002856:	d005      	beq.n	8002864 <??zcl_reporting_find_5>
 8002858:	6808      	ldr	r0, [r1, #0]
 800285a:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 800285e:	42b0      	cmp	r0, r6
 8002860:	d004      	beq.n	800286c <??zcl_reporting_find_6>
 8002862:	e001      	b.n	8002868 <??zcl_reporting_find_7>

08002864 <??zcl_reporting_find_5>:
 8002864:	0028      	movs	r0, r5
 8002866:	e004      	b.n	8002872 <??zcl_reporting_find_1>

08002868 <??zcl_reporting_find_7>:
 8002868:	6809      	ldr	r1, [r1, #0]
 800286a:	e7ed      	b.n	8002848 <??zcl_reporting_find_3>

0800286c <??zcl_reporting_find_6>:
 800286c:	2100      	movs	r1, #0
 800286e:	e7eb      	b.n	8002848 <??zcl_reporting_find_3>

08002870 <??zcl_reporting_find_4>:
 8002870:	2000      	movs	r0, #0

08002872 <??zcl_reporting_find_1>:
 8002872:	bc70      	pop	{r4, r5, r6}
 8002874:	4770      	bx	lr

08002876 <zcl_reporting_stack_event>:
 8002876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	0006      	movs	r6, r0
 800287c:	000f      	movs	r7, r1
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	46ca      	mov	sl, r9
 8002884:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 8002888:	d001      	beq.n	800288e <??zcl_reporting_stack_event_0>
 800288a:	2000      	movs	r0, #0
 800288c:	e01b      	b.n	80028c6 <??zcl_reporting_stack_event_1>

0800288e <??zcl_reporting_stack_event_0>:
 800288e:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8002892:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8002896:	4288      	cmp	r0, r1
 8002898:	d002      	beq.n	80028a0 <??zcl_reporting_stack_event_2>
 800289a:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 800289e:	e000      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028a0 <??zcl_reporting_stack_event_2>:
 80028a0:	2400      	movs	r4, #0

080028a2 <??zcl_reporting_stack_event_3>:
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d00e      	beq.n	80028c4 <??zcl_reporting_stack_event_4>
 80028a6:	0025      	movs	r5, r4
 80028a8:	2201      	movs	r2, #1
 80028aa:	0029      	movs	r1, r5
 80028ac:	0030      	movs	r0, r6
 80028ae:	f000 f947 	bl	8002b40 <zcl_reporting_reset_defaults>
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80028b8:	4288      	cmp	r0, r1
 80028ba:	d001      	beq.n	80028c0 <??zcl_reporting_stack_event_5>
 80028bc:	6824      	ldr	r4, [r4, #0]
 80028be:	e7f0      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c0 <??zcl_reporting_stack_event_5>:
 80028c0:	2400      	movs	r4, #0
 80028c2:	e7ee      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c4 <??zcl_reporting_stack_event_4>:
 80028c4:	2000      	movs	r0, #0

080028c6 <??zcl_reporting_stack_event_1>:
 80028c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028ca <zcl_reporting_save_curr_val>:
 80028ca:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80028ce:	0005      	movs	r5, r0
 80028d0:	000e      	movs	r6, r1
 80028d2:	68af      	ldr	r7, [r5, #8]
 80028d4:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 80028d8:	2300      	movs	r3, #0
 80028da:	464a      	mov	r2, r9
 80028dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028e0:	0038      	movs	r0, r7
 80028e2:	f00f fbe7 	bl	80120b4 <zb_heap_alloc>
 80028e6:	0004      	movs	r4, r0
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d101      	bne.n	80028f0 <??zcl_reporting_save_curr_val_0>
 80028ec:	2089      	movs	r0, #137	@ 0x89
 80028ee:	e05d      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

080028f0 <??zcl_reporting_save_curr_val_0>:
 80028f0:	2001      	movs	r0, #1
 80028f2:	9001      	str	r0, [sp, #4]
 80028f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	0023      	movs	r3, r4
 80028fc:	f10d 0209 	add.w	r2, sp, #9
 8002900:	89b1      	ldrh	r1, [r6, #12]
 8002902:	0028      	movs	r0, r5
 8002904:	f7fd fd6f 	bl	80003e6 <ZbZclAttrRead>
 8002908:	f88d 0008 	strb.w	r0, [sp, #8]
 800290c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002910:	2800      	cmp	r0, #0
 8002912:	d002      	beq.n	800291a <??zcl_reporting_save_curr_val_2>
 8002914:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002918:	e048      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800291a <??zcl_reporting_save_curr_val_2>:
 800291a:	7bb0      	ldrb	r0, [r6, #14]
 800291c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002920:	4288      	cmp	r0, r1
 8002922:	d001      	beq.n	8002928 <??zcl_reporting_save_curr_val_3>
 8002924:	208d      	movs	r0, #141	@ 0x8d
 8002926:	e041      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002928 <??zcl_reporting_save_curr_val_3>:
 8002928:	2300      	movs	r3, #0
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	0021      	movs	r1, r4
 8002930:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002934:	f7fe fb7f 	bl	8001036 <ZbZclAttrParseLength>
 8002938:	4680      	mov	r8, r0
 800293a:	f1b8 0f00 	cmp.w	r8, #0
 800293e:	d501      	bpl.n	8002944 <??zcl_reporting_save_curr_val_4>
 8002940:	2089      	movs	r0, #137	@ 0x89
 8002942:	e033      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002944 <??zcl_reporting_save_curr_val_4>:
 8002944:	7bb0      	ldrb	r0, [r6, #14]
 8002946:	f7fe fc27 	bl	8001198 <ZbZclAttrIsAnalog>
 800294a:	2800      	cmp	r0, #0
 800294c:	d106      	bne.n	800295c <??zcl_reporting_save_curr_val_5>
 800294e:	4642      	mov	r2, r8
 8002950:	0021      	movs	r1, r4
 8002952:	2000      	movs	r0, #0
 8002954:	f00f fbcc 	bl	80120f0 <WpanCrc>
 8002958:	8330      	strh	r0, [r6, #24]
 800295a:	e020      	b.n	800299e <??zcl_reporting_save_curr_val_6>

0800295c <??zcl_reporting_save_curr_val_5>:
 800295c:	7bb0      	ldrb	r0, [r6, #14]
 800295e:	f004 ffdb 	bl	8007918 <ZbZclAttrIsFloat>
 8002962:	2800      	cmp	r0, #0
 8002964:	d00d      	beq.n	8002982 <??zcl_reporting_save_curr_val_7>
 8002966:	aa02      	add	r2, sp, #8
 8002968:	0021      	movs	r1, r4
 800296a:	7bb0      	ldrb	r0, [r6, #14]
 800296c:	f004 fcaf 	bl	80072ce <ZbZclParseFloat>
 8002970:	ed86 0b06 	vstr	d0, [r6, #24]
 8002974:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002978:	2800      	cmp	r0, #0
 800297a:	d010      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 800297c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002980:	e014      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002982 <??zcl_reporting_save_curr_val_7>:
 8002982:	aa02      	add	r2, sp, #8
 8002984:	0021      	movs	r1, r4
 8002986:	7bb0      	ldrb	r0, [r6, #14]
 8002988:	f7fe fd04 	bl	8001394 <ZbZclParseInteger>
 800298c:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8002990:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002994:	2800      	cmp	r0, #0
 8002996:	d002      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 8002998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800299c:	e006      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800299e <??zcl_reporting_save_curr_val_6>:
 800299e:	2300      	movs	r3, #0
 80029a0:	464a      	mov	r2, r9
 80029a2:	0021      	movs	r1, r4
 80029a4:	0038      	movs	r0, r7
 80029a6:	f00f fb94 	bl	80120d2 <zb_heap_free>
 80029aa:	2000      	movs	r0, #0

080029ac <??zcl_reporting_save_curr_val_1>:
 80029ac:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

080029b0 <zcl_reporting_create_new>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	0006      	movs	r6, r0
 80029b6:	000f      	movs	r7, r1
 80029b8:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	89b9      	ldrh	r1, [r7, #12]
 80029c0:	0030      	movs	r0, r6
 80029c2:	f7ff ff30 	bl	8002826 <zcl_reporting_find>
 80029c6:	0005      	movs	r5, r0
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	d001      	beq.n	80029d0 <??zcl_reporting_create_new_0>
 80029cc:	0028      	movs	r0, r5
 80029ce:	e023      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029d0 <??zcl_reporting_create_new_0>:
 80029d0:	2300      	movs	r3, #0
 80029d2:	a212      	add	r2, pc, #72	@ (adr r2, 8002a1c <??DataTable7>)
 80029d4:	2138      	movs	r1, #56	@ 0x38
 80029d6:	4640      	mov	r0, r8
 80029d8:	f00f fb6c 	bl	80120b4 <zb_heap_alloc>
 80029dc:	0004      	movs	r4, r0
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d101      	bne.n	80029e6 <??zcl_reporting_create_new_2>
 80029e2:	2000      	movs	r0, #0
 80029e4:	e018      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029e6 <??zcl_reporting_create_new_2>:
 80029e6:	2538      	movs	r5, #56	@ 0x38
 80029e8:	46b9      	mov	r9, r7
 80029ea:	46a2      	mov	sl, r4
 80029ec:	002a      	movs	r2, r5
 80029ee:	4649      	mov	r1, r9
 80029f0:	4650      	mov	r0, sl
 80029f2:	f013 f894 	bl	8015b1e <__aeabi_memcpy>
 80029f6:	6024      	str	r4, [r4, #0]
 80029f8:	6064      	str	r4, [r4, #4]
 80029fa:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 80029fe:	6020      	str	r0, [r4, #0]
 8002a00:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	6044      	str	r4, [r0, #4]
 8002a08:	6860      	ldr	r0, [r4, #4]
 8002a0a:	6004      	str	r4, [r0, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	0021      	movs	r1, r4
 8002a10:	4640      	mov	r0, r8
 8002a12:	f000 f895 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002a16:	0020      	movs	r0, r4

08002a18 <??zcl_reporting_create_new_1>:
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a1c <??DataTable7>:
 8002a1c:	0000 0000                                   ....

08002a20 <zcl_reporting_delete>:
 8002a20:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002a22:	0004      	movs	r4, r0
 8002a24:	68a5      	ldr	r5, [r4, #8]
 8002a26:	68ae      	ldr	r6, [r5, #8]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f88d 0000 	strb.w	r0, [sp]
 8002a2e:	6860      	ldr	r0, [r4, #4]
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	6048      	str	r0, [r1, #4]
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	6008      	str	r0, [r1, #0]
 8002a3a:	6024      	str	r4, [r4, #0]
 8002a3c:	6064      	str	r4, [r4, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	a26c      	add	r2, pc, #432	@ (adr r2, 8002bf4 <??DataTable9_1>)
 8002a42:	0021      	movs	r1, r4
 8002a44:	0030      	movs	r0, r6
 8002a46:	f00f fb44 	bl	80120d2 <zb_heap_free>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	466a      	mov	r2, sp
 8002a4e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002a52:	0030      	movs	r0, r6
 8002a54:	f00f f864 	bl	8011b20 <ZbNwkGet>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d002      	beq.n	8002a62 <??zcl_reporting_delete_0>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f88d 0000 	strb.w	r0, [sp]

08002a62 <??zcl_reporting_delete_0>:
 8002a62:	f89d 0000 	ldrb.w	r0, [sp]
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d103      	bne.n	8002a72 <??zcl_reporting_delete_1>
 8002a6a:	21c8      	movs	r1, #200	@ 0xc8
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	f7ff fb84 	bl	800217a <zcl_report_kick>

08002a72 <??zcl_reporting_delete_1>:
 8002a72:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002a74 <zcl_cluster_attr_report_delete>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	0005      	movs	r5, r0
 8002a78:	000e      	movs	r6, r1
 8002a7a:	0017      	movs	r7, r2
 8002a7c:	003a      	movs	r2, r7
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	0031      	movs	r1, r6
 8002a82:	b289      	uxth	r1, r1
 8002a84:	0028      	movs	r0, r5
 8002a86:	f7ff fece 	bl	8002826 <zcl_reporting_find>
 8002a8a:	0004      	movs	r4, r0
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	d101      	bne.n	8002a94 <??zcl_cluster_attr_report_delete_0>
 8002a90:	2000      	movs	r0, #0
 8002a92:	e003      	b.n	8002a9c <??zcl_cluster_attr_report_delete_1>

08002a94 <??zcl_cluster_attr_report_delete_0>:
 8002a94:	0020      	movs	r0, r4
 8002a96:	f7ff ffc3 	bl	8002a20 <zcl_reporting_delete>
 8002a9a:	2001      	movs	r0, #1

08002a9c <??zcl_cluster_attr_report_delete_1>:
 8002a9c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002a9e <zcl_reporting_disable>:
 8002a9e:	b538      	push	{r3, r4, r5, lr}
 8002aa0:	0004      	movs	r4, r0
 8002aa2:	68a0      	ldr	r0, [r4, #8]
 8002aa4:	6885      	ldr	r5, [r0, #8]
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f88d 0000 	strb.w	r0, [sp]
 8002aac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ab0:	8460      	strh	r0, [r4, #34]	@ 0x22
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	8420      	strh	r0, [r4, #32]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	466a      	mov	r2, sp
 8002aba:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002abe:	0028      	movs	r0, r5
 8002ac0:	f00f f82e 	bl	8011b20 <ZbNwkGet>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d002      	beq.n	8002ace <??zcl_reporting_disable_0>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f88d 0000 	strb.w	r0, [sp]

08002ace <??zcl_reporting_disable_0>:
 8002ace:	f89d 0000 	ldrb.w	r0, [sp]
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d103      	bne.n	8002ade <??zcl_reporting_disable_1>
 8002ad6:	21c8      	movs	r1, #200	@ 0xc8
 8002ad8:	68a0      	ldr	r0, [r4, #8]
 8002ada:	f7ff fb4e 	bl	800217a <zcl_report_kick>

08002ade <??zcl_reporting_disable_1>:
 8002ade:	bd31      	pop	{r0, r4, r5, pc}

08002ae0 <zcl_reporting_check_default_intvl>:
 8002ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae4:	880a      	ldrh	r2, [r1, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00e      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002aea:	880a      	ldrh	r2, [r1, #0]
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d00b      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002af0:	880a      	ldrh	r2, [r1, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d102      	bne.n	8002afc <??zcl_reporting_check_default_intvl_1>
 8002af6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002afa:	800a      	strh	r2, [r1, #0]

08002afc <??zcl_reporting_check_default_intvl_1>:
 8002afc:	880a      	ldrh	r2, [r1, #0]
 8002afe:	8803      	ldrh	r3, [r0, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d201      	bcs.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002b04:	2200      	movs	r2, #0
 8002b06:	8002      	strh	r2, [r0, #0]

08002b08 <??zcl_reporting_check_default_intvl_0>:
 8002b08:	4770      	bx	lr

08002b0a <zcl_reporting_config_attr_defaults>:
 8002b0a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b0c:	0004      	movs	r4, r0
 8002b0e:	000d      	movs	r5, r1
 8002b10:	0016      	movs	r6, r2
 8002b12:	8aa8      	ldrh	r0, [r5, #20]
 8002b14:	f8ad 0002 	strh.w	r0, [sp, #2]
 8002b18:	8ae8      	ldrh	r0, [r5, #22]
 8002b1a:	f8ad 0000 	strh.w	r0, [sp]
 8002b1e:	4669      	mov	r1, sp
 8002b20:	f10d 0002 	add.w	r0, sp, #2
 8002b24:	f7ff ffdc 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 8002b28:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8002b2c:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002b2e:	f8bd 0000 	ldrh.w	r0, [sp]
 8002b32:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002b34:	2200      	movs	r2, #0
 8002b36:	0031      	movs	r1, r6
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f000 f801 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002b3e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002b40 <zcl_reporting_reset_defaults>:
 8002b40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b42:	0004      	movs	r4, r0
 8002b44:	000d      	movs	r5, r1
 8002b46:	0016      	movs	r6, r2
 8002b48:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8002b4a:	8428      	strh	r0, [r5, #32]
 8002b4c:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8002b4e:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b50:	8c28      	ldrh	r0, [r5, #32]
 8002b52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b56:	4288      	cmp	r0, r1
 8002b58:	d106      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b5a:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d103      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b60:	203d      	movs	r0, #61	@ 0x3d
 8002b62:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b64:	2000      	movs	r0, #0
 8002b66:	8428      	strh	r0, [r5, #32]

08002b68 <??zcl_reporting_reset_defaults_0>:
 8002b68:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8002b6c:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8002b70:	0020      	movs	r0, r4
 8002b72:	f00e ffea 	bl	8011b4a <ZbZclUptime>
 8002b76:	6128      	str	r0, [r5, #16]
 8002b78:	0030      	movs	r0, r6
 8002b7a:	b2c0      	uxtb	r0, r0
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d013      	beq.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002b80:	2301      	movs	r3, #1
 8002b82:	466a      	mov	r2, sp
 8002b84:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002b88:	0020      	movs	r0, r4
 8002b8a:	f00e ffc9 	bl	8011b20 <ZbNwkGet>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d002      	beq.n	8002b98 <??zcl_reporting_reset_defaults_2>
 8002b92:	2000      	movs	r0, #0
 8002b94:	f88d 0000 	strb.w	r0, [sp]

08002b98 <??zcl_reporting_reset_defaults_2>:
 8002b98:	f89d 0000 	ldrb.w	r0, [sp]
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d103      	bne.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002ba0:	21c8      	movs	r1, #200	@ 0xc8
 8002ba2:	68a8      	ldr	r0, [r5, #8]
 8002ba4:	f7ff fae9 	bl	800217a <zcl_report_kick>

08002ba8 <??zcl_reporting_reset_defaults_1>:
 8002ba8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002baa <zcl_reporting_epsilon_default>:
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	0004      	movs	r4, r0
 8002bae:	000d      	movs	r5, r1
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	b2c0      	uxtb	r0, r0
 8002bb4:	2838      	cmp	r0, #56	@ 0x38
 8002bb6:	db09      	blt.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bb8:	0028      	movs	r0, r5
 8002bba:	b2c0      	uxtb	r0, r0
 8002bbc:	283b      	cmp	r0, #59	@ 0x3b
 8002bbe:	da05      	bge.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8003794 <??DataTable11>
 8002bc6:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002bca:	e00f      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002bcc <??zcl_reporting_epsilon_default_0>:
 8002bcc:	0028      	movs	r0, r5
 8002bce:	b2c0      	uxtb	r0, r0
 8002bd0:	f7fe fae2 	bl	8001198 <ZbZclAttrIsAnalog>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d005      	beq.n	8002be4 <??zcl_reporting_epsilon_default_2>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8003794 <??DataTable11>
 8002bde:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002be2:	e003      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002be4 <??zcl_reporting_epsilon_default_2>:
 8002be4:	2000      	movs	r0, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002bec <??zcl_reporting_epsilon_default_1>:
 8002bec:	bd31      	pop	{r0, r4, r5, pc}
	...

08002bf0 <??DataTable9>:
 8002bf0:	1ee5 0800                                   ....

08002bf4 <??DataTable9_1>:
 8002bf4:	0000 0000                                   ....

08002bf8 <??DataTable9_2>:
 8002bf8:	0014 2000                                   ... 

08002bfc <??DataTable9_3>:
 8002bfc:	1ed1 0800                                   ....

08002c00 <??DataTable9_4>:
 8002c00:	ee80 0036                                   ..6.

08002c04 <zcl_reporting_epsilon_check>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	0004      	movs	r4, r0
 8002c08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c0c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8002c0e:	4281      	cmp	r1, r0
 8002c10:	d101      	bne.n	8002c16 <??zcl_reporting_epsilon_check_0>
 8002c12:	2001      	movs	r0, #1
 8002c14:	e049      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c16 <??zcl_reporting_epsilon_check_0>:
 8002c16:	8c21      	ldrh	r1, [r4, #32]
 8002c18:	4281      	cmp	r1, r0
 8002c1a:	d104      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c1c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d101      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c22:	2001      	movs	r0, #1
 8002c24:	e041      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c26 <??zcl_reporting_epsilon_check_2>:
 8002c26:	7ba0      	ldrb	r0, [r4, #14]
 8002c28:	2838      	cmp	r0, #56	@ 0x38
 8002c2a:	db1d      	blt.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c2c:	7ba0      	ldrb	r0, [r4, #14]
 8002c2e:	283b      	cmp	r0, #59	@ 0x3b
 8002c30:	da1a      	bge.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c32:	8c20      	ldrh	r0, [r4, #32]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d108      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c38:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f005 fc56 	bl	80084f0 <__aeabi_cdcmpeq>
 8002c44:	d101      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c46:	2000      	movs	r0, #0
 8002c48:	e02f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c4a <??zcl_reporting_epsilon_check_4>:
 8002c4a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2300      	movs	r3, #0
 8002c52:	f005 fc4d 	bl	80084f0 <__aeabi_cdcmpeq>
 8002c56:	d205      	bcs.n	8002c64 <??zcl_reporting_epsilon_check_5>
 8002c58:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c5c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002c60:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002c64 <??zcl_reporting_epsilon_check_5>:
 8002c64:	2001      	movs	r0, #1
 8002c66:	e020      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c68 <??zcl_reporting_epsilon_check_3>:
 8002c68:	7ba0      	ldrb	r0, [r4, #14]
 8002c6a:	f7fe fa95 	bl	8001198 <ZbZclAttrIsAnalog>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d01a      	beq.n	8002ca8 <??zcl_reporting_epsilon_check_6>
 8002c72:	8c20      	ldrh	r0, [r4, #32]
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d108      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c78:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f005 fc36 	bl	80084f0 <__aeabi_cdcmpeq>
 8002c84:	d101      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c86:	2000      	movs	r0, #0
 8002c88:	e00f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c8a <??zcl_reporting_epsilon_check_7>:
 8002c8a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f005 fc2d 	bl	80084f0 <__aeabi_cdcmpeq>
 8002c96:	d205      	bcs.n	8002ca4 <??zcl_reporting_epsilon_check_8>
 8002c98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c9c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002ca0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002ca4 <??zcl_reporting_epsilon_check_8>:
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002ca8 <??zcl_reporting_epsilon_check_6>:
 8002ca8:	2001      	movs	r0, #1

08002caa <??zcl_reporting_epsilon_check_1>:
 8002caa:	bd10      	pop	{r4, pc}

08002cac <zcl_reporting_create_default_reports>:
 8002cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb0:	b090      	sub	sp, #64	@ 0x40
 8002cb2:	0005      	movs	r5, r0
 8002cb4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002cb6:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002cba:	4288      	cmp	r0, r1
 8002cbc:	d001      	beq.n	8002cc2 <??zcl_reporting_create_default_reports_0>
 8002cbe:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8002cc0:	e000      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002cc2 <??zcl_reporting_create_default_reports_0>:
 8002cc2:	2400      	movs	r4, #0

08002cc4 <??zcl_reporting_create_default_reports_1>:
 8002cc4:	2c00      	cmp	r4, #0
 8002cc6:	d054      	beq.n	8002d72 <??zcl_reporting_create_default_reports_2>
 8002cc8:	0026      	movs	r6, r4
 8002cca:	68b0      	ldr	r0, [r6, #8]
 8002ccc:	7900      	ldrb	r0, [r0, #4]
 8002cce:	0780      	lsls	r0, r0, #30
 8002cd0:	d546      	bpl.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002cd2 <??zcl_reporting_create_default_reports_4>:
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	68b0      	ldr	r0, [r6, #8]
 8002cd6:	8801      	ldrh	r1, [r0, #0]
 8002cd8:	0028      	movs	r0, r5
 8002cda:	f7ff fda4 	bl	8002826 <zcl_reporting_find>
 8002cde:	9001      	str	r0, [sp, #4]
 8002ce0:	9801      	ldr	r0, [sp, #4]
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d13c      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002ce6 <??zcl_reporting_create_default_reports_5>:
 8002ce6:	2738      	movs	r7, #56	@ 0x38
 8002ce8:	f05f 0800 	movs.w	r8, #0
 8002cec:	f10d 0908 	add.w	r9, sp, #8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	0039      	movs	r1, r7
 8002cf4:	4648      	mov	r0, r9
 8002cf6:	f004 ff35 	bl	8007b64 <__aeabi_memset>
 8002cfa:	68b0      	ldr	r0, [r6, #8]
 8002cfc:	8800      	ldrh	r0, [r0, #0]
 8002cfe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8002d02:	9504      	str	r5, [sp, #16]
 8002d04:	68b0      	ldr	r0, [r6, #8]
 8002d06:	7880      	ldrb	r0, [r0, #2]
 8002d08:	f88d 0016 	strb.w	r0, [sp, #22]
 8002d0c:	68b0      	ldr	r0, [r6, #8]
 8002d0e:	7881      	ldrb	r1, [r0, #2]
 8002d10:	a802      	add	r0, sp, #8
 8002d12:	f7ff ff4a 	bl	8002baa <zcl_reporting_epsilon_default>
 8002d16:	f05f 0908 	movs.w	r9, #8
 8002d1a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8002d1e:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8002d22:	464a      	mov	r2, r9
 8002d24:	4651      	mov	r1, sl
 8002d26:	4658      	mov	r0, fp
 8002d28:	f012 fef9 	bl	8015b1e <__aeabi_memcpy>
 8002d2c:	aa02      	add	r2, sp, #8
 8002d2e:	0031      	movs	r1, r6
 8002d30:	68a8      	ldr	r0, [r5, #8]
 8002d32:	f7ff feea 	bl	8002b0a <zcl_reporting_config_attr_defaults>
 8002d36:	a902      	add	r1, sp, #8
 8002d38:	0028      	movs	r0, r5
 8002d3a:	f7ff fdc6 	bl	80028ca <zcl_reporting_save_curr_val>
 8002d3e:	f88d 0000 	strb.w	r0, [sp]
 8002d42:	f89d 0000 	ldrb.w	r0, [sp]
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d002      	beq.n	8002d50 <??zcl_reporting_create_default_reports_6>
 8002d4a:	f89d 0000 	ldrb.w	r0, [sp]
 8002d4e:	e011      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d50 <??zcl_reporting_create_default_reports_6>:
 8002d50:	a902      	add	r1, sp, #8
 8002d52:	0028      	movs	r0, r5
 8002d54:	f7ff fe2c 	bl	80029b0 <zcl_reporting_create_new>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d101      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>
 8002d5c:	2089      	movs	r0, #137	@ 0x89
 8002d5e:	e009      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d60 <??zcl_reporting_create_default_reports_3>:
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002d66:	4288      	cmp	r0, r1
 8002d68:	d001      	beq.n	8002d6e <??zcl_reporting_create_default_reports_8>
 8002d6a:	6824      	ldr	r4, [r4, #0]
 8002d6c:	e7aa      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d6e <??zcl_reporting_create_default_reports_8>:
 8002d6e:	2400      	movs	r4, #0
 8002d70:	e7a8      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d72 <??zcl_reporting_create_default_reports_2>:
 8002d72:	2000      	movs	r0, #0

08002d74 <??zcl_reporting_create_default_reports_7>:
 8002d74:	b011      	add	sp, #68	@ 0x44
 8002d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d7a <ZbZclHandleConfigReport>:
 8002d7a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7e:	b0c8      	sub	sp, #288	@ 0x120
 8002d80:	0004      	movs	r4, r0
 8002d82:	0015      	movs	r5, r2
 8002d84:	68a0      	ldr	r0, [r4, #8]
 8002d86:	9001      	str	r0, [sp, #4]
 8002d88:	2700      	movs	r7, #0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f88d 0003 	strb.w	r0, [sp, #3]
 8002d90:	2600      	movs	r6, #0
 8002d92:	2000      	movs	r0, #0
 8002d94:	f88d 0002 	strb.w	r0, [sp, #2]
 8002d98:	f05f 0808 	movs.w	r8, #8
 8002d9c:	f05f 0900 	movs.w	r9, #0
 8002da0:	f10d 0a0c 	add.w	sl, sp, #12
 8002da4:	464a      	mov	r2, r9
 8002da6:	4641      	mov	r1, r8
 8002da8:	4650      	mov	r0, sl
 8002daa:	f004 fedb 	bl	8007b64 <__aeabi_memset>
 8002dae:	2000      	movs	r0, #0
 8002db0:	f88d 000c 	strb.w	r0, [sp, #12]
 8002db4:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002db6:	7840      	ldrb	r0, [r0, #1]
 8002db8:	f88d 000d 	strb.w	r0, [sp, #13]
 8002dbc:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dbe:	7880      	ldrb	r0, [r0, #2]
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d003      	beq.n	8002dcc <??ZbZclHandleConfigReport_0>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f88d 000e 	strb.w	r0, [sp, #14]
 8002dca:	e002      	b.n	8002dd2 <??ZbZclHandleConfigReport_1>

08002dcc <??ZbZclHandleConfigReport_0>:
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f88d 000e 	strb.w	r0, [sp, #14]

08002dd2 <??ZbZclHandleConfigReport_1>:
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f88d 000f 	strb.w	r0, [sp, #15]
 8002dd8:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dda:	8880      	ldrh	r0, [r0, #4]
 8002ddc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8002de0:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002de2:	7980      	ldrb	r0, [r0, #6]
 8002de4:	f88d 0012 	strb.w	r0, [sp, #18]
 8002de8:	2007      	movs	r0, #7
 8002dea:	f88d 0013 	strb.w	r0, [sp, #19]
 8002dee:	2205      	movs	r2, #5
 8002df0:	a916      	add	r1, sp, #88	@ 0x58
 8002df2:	a803      	add	r0, sp, #12
 8002df4:	f003 fbca 	bl	800658c <ZbZclAppendHeader>
 8002df8:	9005      	str	r0, [sp, #20]
 8002dfa:	9805      	ldr	r0, [sp, #20]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d506      	bpl.n	8002e0e <??ZbZclHandleConfigReport_2>
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e04:	0029      	movs	r1, r5
 8002e06:	0020      	movs	r0, r4
 8002e08:	f00e ffcc 	bl	8011da4 <ZbZclSendDefaultResponse>
 8002e0c:	e236      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e0e <??ZbZclHandleConfigReport_2>:
 8002e0e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e10:	4286      	cmp	r6, r0
 8002e12:	f080 81b4 	bcs.w	800317e <??ZbZclHandleConfigReport_4>
 8002e16:	f05f 0900 	movs.w	r9, #0
 8002e1a:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8002e1e:	f05f 0a00 	movs.w	sl, #0
 8002e22:	f10d 0b18 	add.w	fp, sp, #24
 8002e26:	4652      	mov	r2, sl
 8002e28:	4641      	mov	r1, r8
 8002e2a:	4658      	mov	r0, fp
 8002e2c:	f004 fe9a 	bl	8007b64 <__aeabi_memset>
 8002e30:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e32:	1cf1      	adds	r1, r6, #3
 8002e34:	4288      	cmp	r0, r1
 8002e36:	d206      	bcs.n	8002e46 <??ZbZclHandleConfigReport_5>
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e3c:	0029      	movs	r1, r5
 8002e3e:	0020      	movs	r0, r4
 8002e40:	f00e ffb0 	bl	8011da4 <ZbZclSendDefaultResponse>
 8002e44:	e21a      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e46 <??ZbZclHandleConfigReport_5>:
 8002e46:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e48:	5d80      	ldrb	r0, [r0, r6]
 8002e4a:	f88d 0001 	strb.w	r0, [sp, #1]
 8002e4e:	1c76      	adds	r6, r6, #1
 8002e50:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e52:	4430      	add	r0, r6
 8002e54:	f004 f85b 	bl	8006f0e <pletoh16>
 8002e58:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8002e5c:	1cb6      	adds	r6, r6, #2
 8002e5e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8159 	bne.w	800311a <??ZbZclHandleConfigReport_6>
 8002e68:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e6a:	1cb1      	adds	r1, r6, #2
 8002e6c:	4288      	cmp	r0, r1
 8002e6e:	d206      	bcs.n	8002e7e <??ZbZclHandleConfigReport_7>
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e74:	0029      	movs	r1, r5
 8002e76:	0020      	movs	r0, r4
 8002e78:	f00e ff94 	bl	8011da4 <ZbZclSendDefaultResponse>
 8002e7c:	e1fe      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e7e <??ZbZclHandleConfigReport_7>:
 8002e7e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e80:	1c71      	adds	r1, r6, #1
 8002e82:	4288      	cmp	r0, r1
 8002e84:	f0c0 808f 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e88 <??ZbZclHandleConfigReport_9>:
 8002e88:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e8a:	5d80      	ldrb	r0, [r0, r6]
 8002e8c:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8002e90:	1c76      	adds	r6, r6, #1
 8002e92:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e94:	1cb1      	adds	r1, r6, #2
 8002e96:	4288      	cmp	r0, r1
 8002e98:	f0c0 8085 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e9c <??ZbZclHandleConfigReport_10>:
 8002e9c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e9e:	4430      	add	r0, r6
 8002ea0:	f004 f835 	bl	8006f0e <pletoh16>
 8002ea4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8002ea8:	1cb6      	adds	r6, r6, #2
 8002eaa:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002eac:	1cb1      	adds	r1, r6, #2
 8002eae:	4288      	cmp	r0, r1
 8002eb0:	d379      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002eb2 <??ZbZclHandleConfigReport_11>:
 8002eb2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002eb4:	4430      	add	r0, r6
 8002eb6:	f004 f82a 	bl	8006f0e <pletoh16>
 8002eba:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8002ebe:	1cb6      	adds	r6, r6, #2
 8002ec0:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002ec2:	1c71      	adds	r1, r6, #1
 8002ec4:	4288      	cmp	r0, r1
 8002ec6:	d36e      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002ec8 <??ZbZclHandleConfigReport_12>:
 8002ec8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ecc:	2848      	cmp	r0, #72	@ 0x48
 8002ece:	d00b      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ed4:	284c      	cmp	r0, #76	@ 0x4c
 8002ed6:	d007      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002edc:	2850      	cmp	r0, #80	@ 0x50
 8002ede:	d003      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ee0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ee4:	2851      	cmp	r0, #81	@ 0x51
 8002ee6:	d103      	bne.n	8002ef0 <??ZbZclHandleConfigReport_14>

08002ee8 <??ZbZclHandleConfigReport_13>:
 8002ee8:	208c      	movs	r0, #140	@ 0x8c
 8002eea:	f88d 0000 	strb.w	r0, [sp]
 8002eee:	e12e      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002ef0 <??ZbZclHandleConfigReport_14>:
 8002ef0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ef4:	2838      	cmp	r0, #56	@ 0x38
 8002ef6:	db29      	blt.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002ef8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002efc:	283b      	cmp	r0, #59	@ 0x3b
 8002efe:	da25      	bge.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002f00:	2300      	movs	r3, #0
 8002f02:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f04:	1b92      	subs	r2, r2, r6
 8002f06:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f08:	eb00 0106 	add.w	r1, r0, r6
 8002f0c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f10:	f7fe f891 	bl	8001036 <ZbZclAttrParseLength>
 8002f14:	9002      	str	r0, [sp, #8]
 8002f16:	9802      	ldr	r0, [sp, #8]
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d503      	bpl.n	8002f24 <??ZbZclHandleConfigReport_17>
 8002f1c:	2085      	movs	r0, #133	@ 0x85
 8002f1e:	f88d 0000 	strb.w	r0, [sp]
 8002f22:	e114      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f24 <??ZbZclHandleConfigReport_17>:
 8002f24:	466a      	mov	r2, sp
 8002f26:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f28:	eb00 0106 	add.w	r1, r0, r6
 8002f2c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f30:	f004 f9cd 	bl	80072ce <ZbZclParseFloat>
 8002f34:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8002f38:	f89d 0000 	ldrb.w	r0, [sp]
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f040 8106 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f42 <??ZbZclHandleConfigReport_18>:
 8002f42:	9802      	ldr	r0, [sp, #8]
 8002f44:	1986      	adds	r6, r0, r6
 8002f46:	2001      	movs	r0, #1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	e02c      	b.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002f4c <??ZbZclHandleConfigReport_16>:
 8002f4c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f50:	f7fe f922 	bl	8001198 <ZbZclAttrIsAnalog>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d026      	beq.n	8002fa6 <??ZbZclHandleConfigReport_19>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f5c:	1b92      	subs	r2, r2, r6
 8002f5e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f60:	eb00 0106 	add.w	r1, r0, r6
 8002f64:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f68:	f7fe f865 	bl	8001036 <ZbZclAttrParseLength>
 8002f6c:	9002      	str	r0, [sp, #8]
 8002f6e:	9802      	ldr	r0, [sp, #8]
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d503      	bpl.n	8002f7c <??ZbZclHandleConfigReport_20>
 8002f74:	2085      	movs	r0, #133	@ 0x85
 8002f76:	f88d 0000 	strb.w	r0, [sp]
 8002f7a:	e0e8      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f7c <??ZbZclHandleConfigReport_20>:
 8002f7c:	466a      	mov	r2, sp
 8002f7e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f80:	eb00 0106 	add.w	r1, r0, r6
 8002f84:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f88:	f7fe fa04 	bl	8001394 <ZbZclParseInteger>
 8002f8c:	f005 f822 	bl	8007fd4 <__aeabi_l2d>
 8002f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002f94:	f89d 0000 	ldrb.w	r0, [sp]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f040 80d8 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f9e <??ZbZclHandleConfigReport_21>:
 8002f9e:	9802      	ldr	r0, [sp, #8]
 8002fa0:	1986      	adds	r6, r0, r6
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	4681      	mov	r9, r0

08002fa6 <??ZbZclHandleConfigReport_19>:
 8002fa6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7fd f917 	bl	80001de <ZbZclAttrFind>
 8002fb0:	4682      	mov	sl, r0
 8002fb2:	f1ba 0f00 	cmp.w	sl, #0
 8002fb6:	d103      	bne.n	8002fc0 <??ZbZclHandleConfigReport_22>
 8002fb8:	2086      	movs	r0, #134	@ 0x86
 8002fba:	f88d 0000 	strb.w	r0, [sp]
 8002fbe:	e0c6      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fc0 <??ZbZclHandleConfigReport_22>:
 8002fc0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fc4:	8880      	ldrh	r0, [r0, #4]
 8002fc6:	0400      	lsls	r0, r0, #16
 8002fc8:	d503      	bpl.n	8002fd2 <??ZbZclHandleConfigReport_23>
 8002fca:	2086      	movs	r0, #134	@ 0x86
 8002fcc:	f88d 0000 	strb.w	r0, [sp]
 8002fd0:	e0bd      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fd2 <??ZbZclHandleConfigReport_23>:
 8002fd2:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fd6:	7900      	ldrb	r0, [r0, #4]
 8002fd8:	0780      	lsls	r0, r0, #30
 8002fda:	d403      	bmi.n	8002fe4 <??ZbZclHandleConfigReport_24>
 8002fdc:	208c      	movs	r0, #140	@ 0x8c
 8002fde:	f88d 0000 	strb.w	r0, [sp]
 8002fe2:	e0b4      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fe4 <??ZbZclHandleConfigReport_24>:
 8002fe4:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8002fe8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8002fec:	4558      	cmp	r0, fp
 8002fee:	d101      	bne.n	8002ff4 <??ZbZclHandleConfigReport_25>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4681      	mov	r9, r0

08002ff4 <??ZbZclHandleConfigReport_25>:
 8002ff4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ff8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	f7ff fc12 	bl	8002826 <zcl_reporting_find>
 8003002:	4680      	mov	r8, r0
 8003004:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003008:	4558      	cmp	r0, fp
 800300a:	d11b      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 800300c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003010:	2800      	cmp	r0, #0
 8003012:	d117      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 8003014:	2000      	movs	r0, #0
 8003016:	4681      	mov	r9, r0
 8003018:	f1b8 0f00 	cmp.w	r8, #0
 800301c:	d00d      	beq.n	800303a <??ZbZclHandleConfigReport_27>
 800301e:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 8003022:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003026:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 800302a:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 800302e:	2200      	movs	r2, #0
 8003030:	a906      	add	r1, sp, #24
 8003032:	9801      	ldr	r0, [sp, #4]
 8003034:	f7ff fd84 	bl	8002b40 <zcl_reporting_reset_defaults>
 8003038:	e004      	b.n	8003044 <??ZbZclHandleConfigReport_26>

0800303a <??ZbZclHandleConfigReport_27>:
 800303a:	aa06      	add	r2, sp, #24
 800303c:	4651      	mov	r1, sl
 800303e:	9801      	ldr	r0, [sp, #4]
 8003040:	f7ff fd63 	bl	8002b0a <zcl_reporting_config_attr_defaults>

08003044 <??ZbZclHandleConfigReport_26>:
 8003044:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003048:	f8da 1008 	ldr.w	r1, [sl, #8]
 800304c:	7889      	ldrb	r1, [r1, #2]
 800304e:	4288      	cmp	r0, r1
 8003050:	d003      	beq.n	800305a <??ZbZclHandleConfigReport_28>
 8003052:	208d      	movs	r0, #141	@ 0x8d
 8003054:	f88d 0000 	strb.w	r0, [sp]
 8003058:	e079      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800305a <??ZbZclHandleConfigReport_28>:
 800305a:	f1b8 0f00 	cmp.w	r8, #0
 800305e:	d021      	beq.n	80030a4 <??ZbZclHandleConfigReport_29>
 8003060:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003064:	f8a8 0020 	strh.w	r0, [r8, #32]
 8003068:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 800306c:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8003070:	4648      	mov	r0, r9
 8003072:	b2c0      	uxtb	r0, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	d00c      	beq.n	8003092 <??ZbZclHandleConfigReport_30>
 8003078:	a806      	add	r0, sp, #24
 800307a:	f7ff fdc3 	bl	8002c04 <zcl_reporting_epsilon_check>
 800307e:	2800      	cmp	r0, #0
 8003080:	d103      	bne.n	800308a <??ZbZclHandleConfigReport_31>
 8003082:	2085      	movs	r0, #133	@ 0x85
 8003084:	f88d 0000 	strb.w	r0, [sp]
 8003088:	e061      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800308a <??ZbZclHandleConfigReport_31>:
 800308a:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 800308e:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

08003092 <??ZbZclHandleConfigReport_30>:
 8003092:	9801      	ldr	r0, [sp, #4]
 8003094:	f00e fd59 	bl	8011b4a <ZbZclUptime>
 8003098:	f8c8 0010 	str.w	r0, [r8, #16]
 800309c:	2001      	movs	r0, #1
 800309e:	f88d 0002 	strb.w	r0, [sp, #2]
 80030a2:	e6b4      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

080030a4 <??ZbZclHandleConfigReport_29>:
 80030a4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80030a8:	4558      	cmp	r0, fp
 80030aa:	f43f aeb0 	beq.w	8002e0e <??ZbZclHandleConfigReport_2>

080030ae <??ZbZclHandleConfigReport_32>:
 80030ae:	9408      	str	r4, [sp, #32]
 80030b0:	4648      	mov	r0, r9
 80030b2:	b2c0      	uxtb	r0, r0
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d008      	beq.n	80030ca <??ZbZclHandleConfigReport_33>
 80030b8:	a806      	add	r0, sp, #24
 80030ba:	f7ff fda3 	bl	8002c04 <zcl_reporting_epsilon_check>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d108      	bne.n	80030d4 <??ZbZclHandleConfigReport_34>
 80030c2:	2085      	movs	r0, #133	@ 0x85
 80030c4:	f88d 0000 	strb.w	r0, [sp]
 80030c8:	e041      	b.n	800314e <??ZbZclHandleConfigReport_15>

080030ca <??ZbZclHandleConfigReport_33>:
 80030ca:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 80030ce:	a806      	add	r0, sp, #24
 80030d0:	f7ff fd6b 	bl	8002baa <zcl_reporting_epsilon_default>

080030d4 <??ZbZclHandleConfigReport_34>:
 80030d4:	2008      	movs	r0, #8
 80030d6:	9015      	str	r0, [sp, #84]	@ 0x54
 80030d8:	a810      	add	r0, sp, #64	@ 0x40
 80030da:	9014      	str	r0, [sp, #80]	@ 0x50
 80030dc:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80030e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80030e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80030e4:	4658      	mov	r0, fp
 80030e6:	f012 fd1a 	bl	8015b1e <__aeabi_memcpy>
 80030ea:	a906      	add	r1, sp, #24
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7ff fbec 	bl	80028ca <zcl_reporting_save_curr_val>
 80030f2:	f88d 0000 	strb.w	r0, [sp]
 80030f6:	f89d 0000 	ldrb.w	r0, [sp]
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d127      	bne.n	800314e <??ZbZclHandleConfigReport_15>

080030fe <??ZbZclHandleConfigReport_35>:
 80030fe:	a906      	add	r1, sp, #24
 8003100:	0020      	movs	r0, r4
 8003102:	f7ff fc55 	bl	80029b0 <zcl_reporting_create_new>
 8003106:	2800      	cmp	r0, #0
 8003108:	d103      	bne.n	8003112 <??ZbZclHandleConfigReport_36>
 800310a:	2189      	movs	r1, #137	@ 0x89
 800310c:	f88d 1000 	strb.w	r1, [sp]
 8003110:	e01d      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003112 <??ZbZclHandleConfigReport_36>:
 8003112:	2101      	movs	r1, #1
 8003114:	f88d 1002 	strb.w	r1, [sp, #2]
 8003118:	e679      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800311a <??ZbZclHandleConfigReport_6>:
 800311a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800311e:	2801      	cmp	r0, #1
 8003120:	d10e      	bne.n	8003140 <??ZbZclHandleConfigReport_37>
 8003122:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003124:	1cb1      	adds	r1, r6, #2
 8003126:	4288      	cmp	r0, r1
 8003128:	d206      	bcs.n	8003138 <??ZbZclHandleConfigReport_38>
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800312e:	0029      	movs	r1, r5
 8003130:	0020      	movs	r0, r4
 8003132:	f00e fe37 	bl	8011da4 <ZbZclSendDefaultResponse>
 8003136:	e0a1      	b.n	800327c <??ZbZclHandleConfigReport_3>

08003138 <??ZbZclHandleConfigReport_38>:
 8003138:	208c      	movs	r0, #140	@ 0x8c
 800313a:	f88d 0000 	strb.w	r0, [sp]
 800313e:	e006      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003140 <??ZbZclHandleConfigReport_37>:
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003144:	0029      	movs	r1, r5
 8003146:	0020      	movs	r0, r4
 8003148:	f00e fe2c 	bl	8011da4 <ZbZclSendDefaultResponse>
 800314c:	e096      	b.n	800327c <??ZbZclHandleConfigReport_3>

0800314e <??ZbZclHandleConfigReport_15>:
 800314e:	f89d 0000 	ldrb.w	r0, [sp]
 8003152:	f88d 0003 	strb.w	r0, [sp, #3]
 8003156:	1d38      	adds	r0, r7, #4
 8003158:	2837      	cmp	r0, #55	@ 0x37
 800315a:	d210      	bcs.n	800317e <??ZbZclHandleConfigReport_4>

0800315c <??ZbZclHandleConfigReport_39>:
 800315c:	a83a      	add	r0, sp, #232	@ 0xe8
 800315e:	f89d 1000 	ldrb.w	r1, [sp]
 8003162:	55c1      	strb	r1, [r0, r7]
 8003164:	1c7f      	adds	r7, r7, #1
 8003166:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800316a:	55c1      	strb	r1, [r0, r7]
 800316c:	1c7f      	adds	r7, r7, #1
 800316e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003172:	a83a      	add	r0, sp, #232	@ 0xe8
 8003174:	4438      	add	r0, r7
 8003176:	f003 ff16 	bl	8006fa6 <putle16>
 800317a:	1cbf      	adds	r7, r7, #2
 800317c:	e647      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800317e <??ZbZclHandleConfigReport_4>:
 800317e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003182:	2800      	cmp	r0, #0
 8003184:	d105      	bne.n	8003192 <??ZbZclHandleConfigReport_40>
 8003186:	2000      	movs	r0, #0
 8003188:	2100      	movs	r1, #0
 800318a:	aa3a      	add	r2, sp, #232	@ 0xe8
 800318c:	5411      	strb	r1, [r2, r0]
 800318e:	1c40      	adds	r0, r0, #1
 8003190:	0007      	movs	r7, r0

08003192 <??ZbZclHandleConfigReport_40>:
 8003192:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003196:	2800      	cmp	r0, #0
 8003198:	d127      	bne.n	80031ea <??ZbZclHandleConfigReport_41>
 800319a:	f05f 0920 	movs.w	r9, #32
 800319e:	f05f 0800 	movs.w	r8, #0
 80031a2:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80031a6:	4642      	mov	r2, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	4650      	mov	r0, sl
 80031ac:	f004 fcda 	bl	8007b64 <__aeabi_memset>
 80031b0:	9801      	ldr	r0, [sp, #4]
 80031b2:	f00e f841 	bl	8011238 <ZbExtendedAddress>
 80031b6:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80031ba:	8868      	ldrh	r0, [r5, #2]
 80031bc:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 80031c0:	89a0      	ldrh	r0, [r4, #12]
 80031c2:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 80031c6:	2003      	movs	r0, #3
 80031c8:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80031cc:	8a68      	ldrh	r0, [r5, #18]
 80031ce:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 80031d2:	8ae8      	ldrh	r0, [r5, #22]
 80031d4:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 80031d8:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80031dc:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 80031e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80031e2:	a918      	add	r1, sp, #96	@ 0x60
 80031e4:	9801      	ldr	r0, [sp, #4]
 80031e6:	f00e fa42 	bl	801166e <ZbApsmeBindReq>

080031ea <??ZbZclHandleConfigReport_41>:
 80031ea:	2200      	movs	r2, #0
 80031ec:	a924      	add	r1, sp, #144	@ 0x90
 80031ee:	0020      	movs	r0, r4
 80031f0:	f000 fda3 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 80031f4:	a824      	add	r0, sp, #144	@ 0x90
 80031f6:	f115 0110 	adds.w	r1, r5, #16
 80031fa:	2210      	movs	r2, #16
 80031fc:	f012 fc8f 	bl	8015b1e <__aeabi_memcpy>
 8003200:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003204:	f000 fd31 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8003208:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 800320c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8003210:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8003214:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8003218:	2001      	movs	r0, #1
 800321a:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 800321e:	2000      	movs	r0, #0
 8003220:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 8003224:	a816      	add	r0, sp, #88	@ 0x58
 8003226:	9020      	str	r0, [sp, #128]	@ 0x80
 8003228:	a820      	add	r0, sp, #128	@ 0x80
 800322a:	9905      	ldr	r1, [sp, #20]
 800322c:	6041      	str	r1, [r0, #4]
 800322e:	a93a      	add	r1, sp, #232	@ 0xe8
 8003230:	6081      	str	r1, [r0, #8]
 8003232:	60c7      	str	r7, [r0, #12]
 8003234:	a820      	add	r0, sp, #128	@ 0x80
 8003236:	902a      	str	r0, [sp, #168]	@ 0xa8
 8003238:	2002      	movs	r0, #2
 800323a:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 800323e:	2300      	movs	r3, #0
 8003240:	2200      	movs	r2, #0
 8003242:	a924      	add	r1, sp, #144	@ 0x90
 8003244:	9801      	ldr	r0, [sp, #4]
 8003246:	f00e f90d 	bl	8011464 <ZbApsdeDataReqCallback>
 800324a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800324e:	2800      	cmp	r0, #0
 8003250:	d014      	beq.n	800327c <??ZbZclHandleConfigReport_3>
 8003252:	2301      	movs	r3, #1
 8003254:	f10d 0201 	add.w	r2, sp, #1
 8003258:	f240 410c 	movw	r1, #1036	@ 0x40c
 800325c:	9801      	ldr	r0, [sp, #4]
 800325e:	f00e fc5f 	bl	8011b20 <ZbNwkGet>
 8003262:	2800      	cmp	r0, #0
 8003264:	d002      	beq.n	800326c <??ZbZclHandleConfigReport_43>
 8003266:	2000      	movs	r0, #0
 8003268:	f88d 0001 	strb.w	r0, [sp, #1]

0800326c <??ZbZclHandleConfigReport_43>:
 800326c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003270:	2800      	cmp	r0, #0
 8003272:	d103      	bne.n	800327c <??ZbZclHandleConfigReport_3>
 8003274:	21c8      	movs	r1, #200	@ 0xc8
 8003276:	0020      	movs	r0, r4
 8003278:	f7fe ff7f 	bl	800217a <zcl_report_kick>

0800327c <??ZbZclHandleConfigReport_3>:
 800327c:	b049      	add	sp, #292	@ 0x124
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003282 <ZbZclHandleReadReport>:
 8003282:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	b09a      	sub	sp, #104	@ 0x68
 8003288:	4680      	mov	r8, r0
 800328a:	4691      	mov	r9, r2
 800328c:	f05f 0a00 	movs.w	sl, #0
 8003290:	2300      	movs	r3, #0
 8003292:	a28d      	add	r2, pc, #564	@ (adr r2, 80034c8 <??DataTable10>)
 8003294:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8003298:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800329c:	f00e ff0a 	bl	80120b4 <zb_heap_alloc>
 80032a0:	0007      	movs	r7, r0
 80032a2:	2f00      	cmp	r7, #0
 80032a4:	d106      	bne.n	80032b4 <??ZbZclHandleReadReport_0>
 80032a6:	2389      	movs	r3, #137	@ 0x89
 80032a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80032aa:	4649      	mov	r1, r9
 80032ac:	4640      	mov	r0, r8
 80032ae:	f00e fd79 	bl	8011da4 <ZbZclSendDefaultResponse>
 80032b2:	e105      	b.n	80034c0 <??ZbZclHandleReadReport_1>

080032b4 <??ZbZclHandleReadReport_0>:
 80032b4:	2408      	movs	r4, #8
 80032b6:	2500      	movs	r5, #0
 80032b8:	ae01      	add	r6, sp, #4
 80032ba:	002a      	movs	r2, r5
 80032bc:	0021      	movs	r1, r4
 80032be:	0030      	movs	r0, r6
 80032c0:	f004 fc50 	bl	8007b64 <__aeabi_memset>
 80032c4:	2000      	movs	r0, #0
 80032c6:	f88d 0004 	strb.w	r0, [sp, #4]
 80032ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032cc:	7840      	ldrb	r0, [r0, #1]
 80032ce:	f88d 0005 	strb.w	r0, [sp, #5]
 80032d2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032d4:	7880      	ldrb	r0, [r0, #2]
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d103      	bne.n	80032e2 <??ZbZclHandleReadReport_2>
 80032da:	2001      	movs	r0, #1
 80032dc:	f88d 0006 	strb.w	r0, [sp, #6]
 80032e0:	e002      	b.n	80032e8 <??ZbZclHandleReadReport_3>

080032e2 <??ZbZclHandleReadReport_2>:
 80032e2:	2000      	movs	r0, #0
 80032e4:	f88d 0006 	strb.w	r0, [sp, #6]

080032e8 <??ZbZclHandleReadReport_3>:
 80032e8:	2001      	movs	r0, #1
 80032ea:	f88d 0007 	strb.w	r0, [sp, #7]
 80032ee:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f0:	8880      	ldrh	r0, [r0, #4]
 80032f2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80032f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f8:	7980      	ldrb	r0, [r0, #6]
 80032fa:	f88d 000a 	strb.w	r0, [sp, #10]
 80032fe:	2009      	movs	r0, #9
 8003300:	f88d 000b 	strb.w	r0, [sp, #11]
 8003304:	2205      	movs	r2, #5
 8003306:	0039      	movs	r1, r7
 8003308:	a801      	add	r0, sp, #4
 800330a:	f003 f93f 	bl	800658c <ZbZclAppendHeader>
 800330e:	0004      	movs	r4, r0
 8003310:	2c00      	cmp	r4, #0
 8003312:	d506      	bpl.n	8003322 <??ZbZclHandleReadReport_4>
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003318:	4649      	mov	r1, r9
 800331a:	4640      	mov	r0, r8
 800331c:	f00e fd42 	bl	8011da4 <ZbZclSendDefaultResponse>
 8003320:	e0ce      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003322 <??ZbZclHandleReadReport_4>:
 8003322:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003326:	4582      	cmp	sl, r0
 8003328:	f080 80a1 	bcs.w	800346e <??ZbZclHandleReadReport_5>
 800332c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003330:	f11a 0103 	adds.w	r1, sl, #3
 8003334:	4288      	cmp	r0, r1
 8003336:	d206      	bcs.n	8003346 <??ZbZclHandleReadReport_6>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800333c:	4649      	mov	r1, r9
 800333e:	4640      	mov	r0, r8
 8003340:	f00e fd30 	bl	8011da4 <ZbZclSendDefaultResponse>
 8003344:	e0bc      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003346 <??ZbZclHandleReadReport_6>:
 8003346:	4650      	mov	r0, sl
 8003348:	f110 0a01 	adds.w	sl, r0, #1
 800334c:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 8003350:	5c08      	ldrb	r0, [r1, r0]
 8003352:	2800      	cmp	r0, #0
 8003354:	d003      	beq.n	800335e <??ZbZclHandleReadReport_7>
 8003356:	2001      	movs	r0, #1
 8003358:	f88d 0000 	strb.w	r0, [sp]
 800335c:	e002      	b.n	8003364 <??ZbZclHandleReadReport_8>

0800335e <??ZbZclHandleReadReport_7>:
 800335e:	2000      	movs	r0, #0
 8003360:	f88d 0000 	strb.w	r0, [sp]

08003364 <??ZbZclHandleReadReport_8>:
 8003364:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8003368:	4450      	add	r0, sl
 800336a:	f003 fdd0 	bl	8006f0e <pletoh16>
 800336e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003372:	f11a 0a02 	adds.w	sl, sl, #2
 8003376:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800337a:	4640      	mov	r0, r8
 800337c:	f7fc ff2f 	bl	80001de <ZbZclAttrFind>
 8003380:	0006      	movs	r6, r0
 8003382:	2e00      	cmp	r6, #0
 8003384:	d102      	bne.n	800338c <??ZbZclHandleReadReport_9>
 8003386:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 800338a:	e05c      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800338c <??ZbZclHandleReadReport_9>:
 800338c:	68b0      	ldr	r0, [r6, #8]
 800338e:	7900      	ldrb	r0, [r0, #4]
 8003390:	0780      	lsls	r0, r0, #30
 8003392:	d402      	bmi.n	800339a <??ZbZclHandleReadReport_11>
 8003394:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 8003398:	e055      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800339a <??ZbZclHandleReadReport_11>:
 800339a:	f89d 2000 	ldrb.w	r2, [sp]
 800339e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80033a2:	4640      	mov	r0, r8
 80033a4:	f7ff fa3f 	bl	8002826 <zcl_reporting_find>
 80033a8:	0005      	movs	r5, r0
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	d102      	bne.n	80033b4 <??ZbZclHandleReadReport_12>
 80033ae:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033b2:	e048      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033b4 <??ZbZclHandleReadReport_12>:
 80033b4:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80033b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033ba:	4288      	cmp	r0, r1
 80033bc:	d102      	bne.n	80033c4 <??ZbZclHandleReadReport_13>
 80033be:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033c2:	e040      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033c4 <??ZbZclHandleReadReport_13>:
 80033c4:	2020      	movs	r0, #32
 80033c6:	9005      	str	r0, [sp, #20]
 80033c8:	2000      	movs	r0, #0
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	f10d 0b18 	add.w	fp, sp, #24
 80033d0:	9a04      	ldr	r2, [sp, #16]
 80033d2:	9905      	ldr	r1, [sp, #20]
 80033d4:	4658      	mov	r0, fp
 80033d6:	f004 fbc5 	bl	8007b64 <__aeabi_memset>
 80033da:	f89d 0000 	ldrb.w	r0, [sp]
 80033de:	2800      	cmp	r0, #0
 80033e0:	d003      	beq.n	80033ea <??ZbZclHandleReadReport_14>
 80033e2:	2001      	movs	r0, #1
 80033e4:	f88d 0018 	strb.w	r0, [sp, #24]
 80033e8:	e002      	b.n	80033f0 <??ZbZclHandleReadReport_15>

080033ea <??ZbZclHandleReadReport_14>:
 80033ea:	2000      	movs	r0, #0
 80033ec:	f88d 0018 	strb.w	r0, [sp, #24]

080033f0 <??ZbZclHandleReadReport_15>:
 80033f0:	89a8      	ldrh	r0, [r5, #12]
 80033f2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80033f6:	7ba8      	ldrb	r0, [r5, #14]
 80033f8:	f88d 001c 	strb.w	r0, [sp, #28]
 80033fc:	8c28      	ldrh	r0, [r5, #32]
 80033fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003402:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003404:	f8ad 0020 	strh.w	r0, [sp, #32]
 8003408:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 800340c:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8003410:	2000      	movs	r0, #0
 8003412:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8003416:	2000      	movs	r0, #0
 8003418:	5538      	strb	r0, [r7, r4]
 800341a:	1c64      	adds	r4, r4, #1
 800341c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8003420:	0020      	movs	r0, r4
 8003422:	b280      	uxth	r0, r0
 8003424:	1a12      	subs	r2, r2, r0
 8003426:	eb07 0104 	add.w	r1, r7, r4
 800342a:	a806      	add	r0, sp, #24
 800342c:	f000 f896 	bl	800355c <zcl_append_report_config_record>
 8003430:	9003      	str	r0, [sp, #12]
 8003432:	9803      	ldr	r0, [sp, #12]
 8003434:	2800      	cmp	r0, #0
 8003436:	d503      	bpl.n	8003440 <??ZbZclHandleReadReport_16>
 8003438:	1e64      	subs	r4, r4, #1
 800343a:	f05f 0b01 	movs.w	fp, #1
 800343e:	e002      	b.n	8003446 <??ZbZclHandleReadReport_10>

08003440 <??ZbZclHandleReadReport_16>:
 8003440:	9803      	ldr	r0, [sp, #12]
 8003442:	1904      	adds	r4, r0, r4
 8003444:	e76d      	b.n	8003322 <??ZbZclHandleReadReport_4>

08003446 <??ZbZclHandleReadReport_10>:
 8003446:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800344a:	1ce1      	adds	r1, r4, #3
 800344c:	4288      	cmp	r0, r1
 800344e:	d30e      	bcc.n	800346e <??ZbZclHandleReadReport_5>

08003450 <??ZbZclHandleReadReport_17>:
 8003450:	f807 b004 	strb.w	fp, [r7, r4]
 8003454:	1c64      	adds	r4, r4, #1
 8003456:	f89d 0000 	ldrb.w	r0, [sp]
 800345a:	5538      	strb	r0, [r7, r4]
 800345c:	1c64      	adds	r4, r4, #1
 800345e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8003462:	eb07 0004 	add.w	r0, r7, r4
 8003466:	f003 fd9e 	bl	8006fa6 <putle16>
 800346a:	1ca4      	adds	r4, r4, #2
 800346c:	e759      	b.n	8003322 <??ZbZclHandleReadReport_4>

0800346e <??ZbZclHandleReadReport_5>:
 800346e:	464a      	mov	r2, r9
 8003470:	a90e      	add	r1, sp, #56	@ 0x38
 8003472:	4640      	mov	r0, r8
 8003474:	f000 fc61 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8003478:	a80e      	add	r0, sp, #56	@ 0x38
 800347a:	f119 0110 	adds.w	r1, r9, #16
 800347e:	2210      	movs	r2, #16
 8003480:	f012 fb4d 	bl	8015b1e <__aeabi_memcpy>
 8003484:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 8003488:	f000 fbef 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 800348c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8003490:	2001      	movs	r0, #1
 8003492:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8003496:	2000      	movs	r0, #0
 8003498:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 800349c:	9714      	str	r7, [sp, #80]	@ 0x50
 800349e:	0020      	movs	r0, r4
 80034a0:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	a90e      	add	r1, sp, #56	@ 0x38
 80034aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034ae:	f00d ffd9 	bl	8011464 <ZbApsdeDataReqCallback>
 80034b2:	2300      	movs	r3, #0
 80034b4:	a204      	add	r2, pc, #16	@ (adr r2, 80034c8 <??DataTable10>)
 80034b6:	0039      	movs	r1, r7
 80034b8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034bc:	f00e fe09 	bl	80120d2 <zb_heap_free>

080034c0 <??ZbZclHandleReadReport_1>:
 80034c0:	b01b      	add	sp, #108	@ 0x6c
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080034c8 <??DataTable10>:
 80034c8:	0000 0000                                   ....

080034cc <ZbZclHandleReportAttr>:
 80034cc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	0004      	movs	r4, r0
 80034d2:	000d      	movs	r5, r1
 80034d4:	0016      	movs	r6, r2
 80034d6:	f05f 0a00 	movs.w	sl, #0
 80034da:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80034dc:	2800      	cmp	r0, #0
 80034de:	d03b      	beq.n	8003558 <??ZbZclHandleReportAttr_0>

080034e0 <??ZbZclHandleReportAttr_1>:
 80034e0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80034e2:	4651      	mov	r1, sl
 80034e4:	b289      	uxth	r1, r1
 80034e6:	1cc9      	adds	r1, r1, #3
 80034e8:	4288      	cmp	r0, r1
 80034ea:	d335      	bcc.n	8003558 <??ZbZclHandleReportAttr_0>

080034ec <??ZbZclHandleReportAttr_3>:
 80034ec:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034ee:	4651      	mov	r1, sl
 80034f0:	b289      	uxth	r1, r1
 80034f2:	4408      	add	r0, r1
 80034f4:	f003 fd0b 	bl	8006f0e <pletoh16>
 80034f8:	0007      	movs	r7, r0
 80034fa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034fc:	4651      	mov	r1, sl
 80034fe:	b289      	uxth	r1, r1
 8003500:	4408      	add	r0, r1
 8003502:	7880      	ldrb	r0, [r0, #2]
 8003504:	4680      	mov	r8, r0
 8003506:	f11a 0a03 	adds.w	sl, sl, #3
 800350a:	2300      	movs	r3, #0
 800350c:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800350e:	4650      	mov	r0, sl
 8003510:	b280      	uxth	r0, r0
 8003512:	1a12      	subs	r2, r2, r0
 8003514:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003516:	4651      	mov	r1, sl
 8003518:	b289      	uxth	r1, r1
 800351a:	4401      	add	r1, r0
 800351c:	4640      	mov	r0, r8
 800351e:	b2c0      	uxtb	r0, r0
 8003520:	f7fd fd89 	bl	8001036 <ZbZclAttrParseLength>
 8003524:	4681      	mov	r9, r0
 8003526:	f1b9 0f00 	cmp.w	r9, #0
 800352a:	d415      	bmi.n	8003558 <??ZbZclHandleReportAttr_0>

0800352c <??ZbZclHandleReportAttr_4>:
 800352c:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800352e:	ebb0 000a 	subs.w	r0, r0, sl
 8003532:	b280      	uxth	r0, r0
 8003534:	9001      	str	r0, [sp, #4]
 8003536:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003538:	4651      	mov	r1, sl
 800353a:	b289      	uxth	r1, r1
 800353c:	4408      	add	r0, r1
 800353e:	9000      	str	r0, [sp, #0]
 8003540:	4643      	mov	r3, r8
 8003542:	b2db      	uxtb	r3, r3
 8003544:	003a      	movs	r2, r7
 8003546:	b292      	uxth	r2, r2
 8003548:	0031      	movs	r1, r6
 800354a:	0020      	movs	r0, r4
 800354c:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 8003550:	47e0      	blx	ip
 8003552:	eb19 0a0a 	adds.w	sl, r9, sl
 8003556:	e7c3      	b.n	80034e0 <??ZbZclHandleReportAttr_1>

08003558 <??ZbZclHandleReportAttr_0>:
 8003558:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800355c <zcl_append_report_config_record>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	0005      	movs	r5, r0
 8003562:	000e      	movs	r6, r1
 8003564:	4690      	mov	r8, r2
 8003566:	2700      	movs	r7, #0
 8003568:	7828      	ldrb	r0, [r5, #0]
 800356a:	2800      	cmp	r0, #0
 800356c:	d003      	beq.n	8003576 <??zcl_append_report_config_record_0>
 800356e:	2801      	cmp	r0, #1
 8003570:	f000 80f4 	beq.w	800375c <??zcl_append_report_config_record_1>
 8003574:	e108      	b.n	8003788 <??zcl_append_report_config_record_2>

08003576 <??zcl_append_report_config_record_0>:
 8003576:	7928      	ldrb	r0, [r5, #4]
 8003578:	f004 f9ce 	bl	8007918 <ZbZclAttrIsFloat>
 800357c:	2800      	cmp	r0, #0
 800357e:	d002      	beq.n	8003586 <??zcl_append_report_config_record_3>
 8003580:	2001      	movs	r0, #1
 8003582:	4681      	mov	r9, r0
 8003584:	e009      	b.n	800359a <??zcl_append_report_config_record_4>

08003586 <??zcl_append_report_config_record_3>:
 8003586:	7928      	ldrb	r0, [r5, #4]
 8003588:	f7fd fe06 	bl	8001198 <ZbZclAttrIsAnalog>
 800358c:	2800      	cmp	r0, #0
 800358e:	d002      	beq.n	8003596 <??zcl_append_report_config_record_5>
 8003590:	2001      	movs	r0, #1
 8003592:	4681      	mov	r9, r0
 8003594:	e001      	b.n	800359a <??zcl_append_report_config_record_4>

08003596 <??zcl_append_report_config_record_5>:
 8003596:	2000      	movs	r0, #0
 8003598:	4681      	mov	r9, r0

0800359a <??zcl_append_report_config_record_4>:
 800359a:	f1b8 0f08 	cmp.w	r8, #8
 800359e:	d202      	bcs.n	80035a6 <??zcl_append_report_config_record_6>
 80035a0:	f05f 30ff 	movs.w	r0, #4294967295
 80035a4:	e0f3      	b.n	800378e <??zcl_append_report_config_record_7>

080035a6 <??zcl_append_report_config_record_6>:
 80035a6:	7828      	ldrb	r0, [r5, #0]
 80035a8:	55f0      	strb	r0, [r6, r7]
 80035aa:	1c7f      	adds	r7, r7, #1
 80035ac:	8869      	ldrh	r1, [r5, #2]
 80035ae:	eb06 0007 	add.w	r0, r6, r7
 80035b2:	f003 fcf8 	bl	8006fa6 <putle16>
 80035b6:	1cbf      	adds	r7, r7, #2
 80035b8:	7928      	ldrb	r0, [r5, #4]
 80035ba:	55f0      	strb	r0, [r6, r7]
 80035bc:	1c7f      	adds	r7, r7, #1
 80035be:	88e9      	ldrh	r1, [r5, #6]
 80035c0:	eb06 0007 	add.w	r0, r6, r7
 80035c4:	f003 fcef 	bl	8006fa6 <putle16>
 80035c8:	1cbf      	adds	r7, r7, #2
 80035ca:	8929      	ldrh	r1, [r5, #8]
 80035cc:	eb06 0007 	add.w	r0, r6, r7
 80035d0:	f003 fce9 	bl	8006fa6 <putle16>
 80035d4:	1cbf      	adds	r7, r7, #2
 80035d6:	4648      	mov	r0, r9
 80035d8:	b2c0      	uxtb	r0, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	f000 80bd 	beq.w	800375a <??zcl_append_report_config_record_8>
 80035e0:	7928      	ldrb	r0, [r5, #4]
 80035e2:	f7fd fc9d 	bl	8000f20 <ZbZclAttrTypeLength>
 80035e6:	0004      	movs	r4, r0
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d101      	bne.n	80035f0 <??zcl_append_report_config_record_9>
 80035ec:	2001      	movs	r0, #1
 80035ee:	e0ce      	b.n	800378e <??zcl_append_report_config_record_7>

080035f0 <??zcl_append_report_config_record_9>:
 80035f0:	2c01      	cmp	r4, #1
 80035f2:	d00e      	beq.n	8003612 <??zcl_append_report_config_record_10>
 80035f4:	f0c0 80af 	bcc.w	8003756 <??zcl_append_report_config_record_11>
 80035f8:	2c03      	cmp	r4, #3
 80035fa:	d02f      	beq.n	800365c <??zcl_append_report_config_record_12>
 80035fc:	d319      	bcc.n	8003632 <??zcl_append_report_config_record_13>
 80035fe:	2c05      	cmp	r4, #5
 8003600:	d054      	beq.n	80036ac <??zcl_append_report_config_record_14>
 8003602:	d33f      	bcc.n	8003684 <??zcl_append_report_config_record_15>
 8003604:	2c07      	cmp	r4, #7
 8003606:	d07c      	beq.n	8003702 <??zcl_append_report_config_record_16>
 8003608:	d365      	bcc.n	80036d6 <??zcl_append_report_config_record_17>
 800360a:	2c08      	cmp	r4, #8
 800360c:	f000 808e 	beq.w	800372c <??zcl_append_report_config_record_18>
 8003610:	e0a1      	b.n	8003756 <??zcl_append_report_config_record_11>

08003612 <??zcl_append_report_config_record_10>:
 8003612:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003616:	2201      	movs	r2, #1
 8003618:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <??DataTable11_1>)
 800361a:	f004 ff61 	bl	80084e0 <__aeabi_cdrcmple>
 800361e:	d801      	bhi.n	8003624 <??zcl_append_report_config_record_19>
 8003620:	2001      	movs	r0, #1
 8003622:	e0b4      	b.n	800378e <??zcl_append_report_config_record_7>

08003624 <??zcl_append_report_config_record_19>:
 8003624:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003628:	f004 ffb2 	bl	8008590 <__aeabi_d2iz>
 800362c:	55f0      	strb	r0, [r6, r7]
 800362e:	1c7f      	adds	r7, r7, #1
 8003630:	e093      	b.n	800375a <??zcl_append_report_config_record_8>

08003632 <??zcl_append_report_config_record_13>:
 8003632:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003636:	2201      	movs	r2, #1
 8003638:	4b58      	ldr	r3, [pc, #352]	@ (800379c <??DataTable11_2>)
 800363a:	f004 ff51 	bl	80084e0 <__aeabi_cdrcmple>
 800363e:	d801      	bhi.n	8003644 <??zcl_append_report_config_record_20>
 8003640:	2001      	movs	r0, #1
 8003642:	e0a4      	b.n	800378e <??zcl_append_report_config_record_7>

08003644 <??zcl_append_report_config_record_20>:
 8003644:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003648:	f004 ffa2 	bl	8008590 <__aeabi_d2iz>
 800364c:	0001      	movs	r1, r0
 800364e:	b289      	uxth	r1, r1
 8003650:	eb06 0007 	add.w	r0, r6, r7
 8003654:	f003 fca7 	bl	8006fa6 <putle16>
 8003658:	1cbf      	adds	r7, r7, #2
 800365a:	e07e      	b.n	800375a <??zcl_append_report_config_record_8>

0800365c <??zcl_append_report_config_record_12>:
 800365c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003660:	4a4f      	ldr	r2, [pc, #316]	@ (80037a0 <??DataTable11_3>)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <??DataTable11_4>)
 8003664:	f004 ff3c 	bl	80084e0 <__aeabi_cdrcmple>
 8003668:	d801      	bhi.n	800366e <??zcl_append_report_config_record_21>
 800366a:	2001      	movs	r0, #1
 800366c:	e08f      	b.n	800378e <??zcl_append_report_config_record_7>

0800366e <??zcl_append_report_config_record_21>:
 800366e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003672:	f004 ffb5 	bl	80085e0 <__aeabi_d2uiz>
 8003676:	0001      	movs	r1, r0
 8003678:	eb06 0007 	add.w	r0, r6, r7
 800367c:	f003 fc99 	bl	8006fb2 <putle24>
 8003680:	1cff      	adds	r7, r7, #3
 8003682:	e06a      	b.n	800375a <??zcl_append_report_config_record_8>

08003684 <??zcl_append_report_config_record_15>:
 8003684:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003688:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <??DataTable11_5>)
 800368a:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <??DataTable11_6>)
 800368c:	f004 ff28 	bl	80084e0 <__aeabi_cdrcmple>
 8003690:	d801      	bhi.n	8003696 <??zcl_append_report_config_record_22>
 8003692:	2001      	movs	r0, #1
 8003694:	e07b      	b.n	800378e <??zcl_append_report_config_record_7>

08003696 <??zcl_append_report_config_record_22>:
 8003696:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800369a:	f004 ffa1 	bl	80085e0 <__aeabi_d2uiz>
 800369e:	0001      	movs	r1, r0
 80036a0:	eb06 0007 	add.w	r0, r6, r7
 80036a4:	f003 fc91 	bl	8006fca <putle32>
 80036a8:	1d3f      	adds	r7, r7, #4
 80036aa:	e056      	b.n	800375a <??zcl_append_report_config_record_8>

080036ac <??zcl_append_report_config_record_14>:
 80036ac:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <??DataTable11_7>)
 80036b2:	4b40      	ldr	r3, [pc, #256]	@ (80037b4 <??DataTable11_8>)
 80036b4:	f004 ff14 	bl	80084e0 <__aeabi_cdrcmple>
 80036b8:	d801      	bhi.n	80036be <??zcl_append_report_config_record_23>
 80036ba:	2001      	movs	r0, #1
 80036bc:	e067      	b.n	800378e <??zcl_append_report_config_record_7>

080036be <??zcl_append_report_config_record_23>:
 80036be:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036c2:	f005 f82d 	bl	8008720 <__aeabi_d2ulz>
 80036c6:	0002      	movs	r2, r0
 80036c8:	000b      	movs	r3, r1
 80036ca:	eb06 0007 	add.w	r0, r6, r7
 80036ce:	f003 fc87 	bl	8006fe0 <putle40>
 80036d2:	1d7f      	adds	r7, r7, #5
 80036d4:	e041      	b.n	800375a <??zcl_append_report_config_record_8>

080036d6 <??zcl_append_report_config_record_17>:
 80036d6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036da:	f07f 021e 	mvns.w	r2, #30
 80036de:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <??DataTable11_9>)
 80036e0:	f004 fefe 	bl	80084e0 <__aeabi_cdrcmple>
 80036e4:	d801      	bhi.n	80036ea <??zcl_append_report_config_record_24>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e051      	b.n	800378e <??zcl_append_report_config_record_7>

080036ea <??zcl_append_report_config_record_24>:
 80036ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036ee:	f005 f817 	bl	8008720 <__aeabi_d2ulz>
 80036f2:	0002      	movs	r2, r0
 80036f4:	000b      	movs	r3, r1
 80036f6:	eb06 0007 	add.w	r0, r6, r7
 80036fa:	f003 fc7b 	bl	8006ff4 <putle48>
 80036fe:	1dbf      	adds	r7, r7, #6
 8003700:	e02b      	b.n	800375a <??zcl_append_report_config_record_8>

08003702 <??zcl_append_report_config_record_16>:
 8003702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003706:	2201      	movs	r2, #1
 8003708:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <??DataTable11_10>)
 800370a:	f004 fee9 	bl	80084e0 <__aeabi_cdrcmple>
 800370e:	d801      	bhi.n	8003714 <??zcl_append_report_config_record_25>
 8003710:	2001      	movs	r0, #1
 8003712:	e03c      	b.n	800378e <??zcl_append_report_config_record_7>

08003714 <??zcl_append_report_config_record_25>:
 8003714:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003718:	f005 f802 	bl	8008720 <__aeabi_d2ulz>
 800371c:	0002      	movs	r2, r0
 800371e:	000b      	movs	r3, r1
 8003720:	eb06 0007 	add.w	r0, r6, r7
 8003724:	f003 fc75 	bl	8007012 <putle56>
 8003728:	1dff      	adds	r7, r7, #7
 800372a:	e016      	b.n	800375a <??zcl_append_report_config_record_8>

0800372c <??zcl_append_report_config_record_18>:
 800372c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003730:	2201      	movs	r2, #1
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <??DataTable11_11>)
 8003734:	f004 fed4 	bl	80084e0 <__aeabi_cdrcmple>
 8003738:	d801      	bhi.n	800373e <??zcl_append_report_config_record_26>
 800373a:	2001      	movs	r0, #1
 800373c:	e027      	b.n	800378e <??zcl_append_report_config_record_7>

0800373e <??zcl_append_report_config_record_26>:
 800373e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003742:	f004 ffed 	bl	8008720 <__aeabi_d2ulz>
 8003746:	0002      	movs	r2, r0
 8003748:	000b      	movs	r3, r1
 800374a:	eb06 0007 	add.w	r0, r6, r7
 800374e:	f003 fc6f 	bl	8007030 <putle64>
 8003752:	3708      	adds	r7, #8
 8003754:	e001      	b.n	800375a <??zcl_append_report_config_record_8>

08003756 <??zcl_append_report_config_record_11>:
 8003756:	2001      	movs	r0, #1
 8003758:	e019      	b.n	800378e <??zcl_append_report_config_record_7>

0800375a <??zcl_append_report_config_record_8>:
 800375a:	e017      	b.n	800378c <??zcl_append_report_config_record_27>

0800375c <??zcl_append_report_config_record_1>:
 800375c:	f1b8 0f08 	cmp.w	r8, #8
 8003760:	d202      	bcs.n	8003768 <??zcl_append_report_config_record_28>
 8003762:	f05f 30ff 	movs.w	r0, #4294967295
 8003766:	e012      	b.n	800378e <??zcl_append_report_config_record_7>

08003768 <??zcl_append_report_config_record_28>:
 8003768:	7828      	ldrb	r0, [r5, #0]
 800376a:	55f0      	strb	r0, [r6, r7]
 800376c:	1c7f      	adds	r7, r7, #1
 800376e:	8869      	ldrh	r1, [r5, #2]
 8003770:	eb06 0007 	add.w	r0, r6, r7
 8003774:	f003 fc17 	bl	8006fa6 <putle16>
 8003778:	1cbf      	adds	r7, r7, #2
 800377a:	8b29      	ldrh	r1, [r5, #24]
 800377c:	eb06 0007 	add.w	r0, r6, r7
 8003780:	f003 fc11 	bl	8006fa6 <putle16>
 8003784:	1cbf      	adds	r7, r7, #2
 8003786:	e001      	b.n	800378c <??zcl_append_report_config_record_27>

08003788 <??zcl_append_report_config_record_2>:
 8003788:	2001      	movs	r0, #1
 800378a:	e000      	b.n	800378e <??zcl_append_report_config_record_7>

0800378c <??zcl_append_report_config_record_27>:
 800378c:	0038      	movs	r0, r7

0800378e <??zcl_append_report_config_record_7>:
 800378e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08003794 <??DataTable11>:
 8003794:	0000 3ff0                                   ...?

08003798 <??DataTable11_1>:
 8003798:	e000 406f                                   ..o@

0800379c <??DataTable11_2>:
 800379c:	ffe0 40ef                                   ...@

080037a0 <??DataTable11_3>:
 80037a0:	0001 e000                                   ....

080037a4 <??DataTable11_4>:
 80037a4:	ffff 416f                                   ..oA

080037a8 <??DataTable11_5>:
 80037a8:	0001 ffe0                                   ....

080037ac <??DataTable11_6>:
 80037ac:	ffff 41ef                                   ...A

080037b0 <??DataTable11_7>:
 80037b0:	e001 ffff                                   ....

080037b4 <??DataTable11_8>:
 80037b4:	ffff 426f                                   ..oB

080037b8 <??DataTable11_9>:
 80037b8:	ffff 42ef                                   ...B

080037bc <??DataTable11_10>:
 80037bc:	0000 4370                                   ..pC

080037c0 <??DataTable11_11>:
 80037c0:	0000 43f0                                   ...C

080037c4 <ZbZclAttrReportConfigReq>:
 80037c4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	b09b      	sub	sp, #108	@ 0x6c
 80037ca:	0004      	movs	r4, r0
 80037cc:	000d      	movs	r5, r1
 80037ce:	001e      	movs	r6, r3
 80037d0:	2700      	movs	r7, #0
 80037d2:	7c28      	ldrb	r0, [r5, #16]
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d002      	beq.n	80037de <??ZbZclAttrReportConfigReq_0>
 80037d8:	7c28      	ldrb	r0, [r5, #16]
 80037da:	2807      	cmp	r0, #7
 80037dc:	d301      	bcc.n	80037e2 <??ZbZclAttrReportConfigReq_1>

080037de <??ZbZclAttrReportConfigReq_0>:
 80037de:	2001      	movs	r0, #1
 80037e0:	e059      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

080037e2 <??ZbZclAttrReportConfigReq_1>:
 80037e2:	f05f 0800 	movs.w	r8, #0

080037e6 <??ZbZclAttrReportConfigReq_3>:
 80037e6:	7c28      	ldrb	r0, [r5, #16]
 80037e8:	4580      	cmp	r8, r0
 80037ea:	d215      	bcs.n	8003818 <??ZbZclAttrReportConfigReq_4>
 80037ec:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80037f0:	4428      	add	r0, r5
 80037f2:	f110 0918 	adds.w	r9, r0, #24
 80037f6:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 80037fa:	a80c      	add	r0, sp, #48	@ 0x30
 80037fc:	eb00 0107 	add.w	r1, r0, r7
 8003800:	4648      	mov	r0, r9
 8003802:	f7ff feab 	bl	800355c <zcl_append_report_config_record>
 8003806:	0001      	movs	r1, r0
 8003808:	2901      	cmp	r1, #1
 800380a:	da01      	bge.n	8003810 <??ZbZclAttrReportConfigReq_5>
 800380c:	2001      	movs	r0, #1
 800380e:	e042      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

08003810 <??ZbZclAttrReportConfigReq_5>:
 8003810:	19cf      	adds	r7, r1, r7
 8003812:	f118 0801 	adds.w	r8, r8, #1
 8003816:	e7e6      	b.n	80037e6 <??ZbZclAttrReportConfigReq_3>

08003818 <??ZbZclAttrReportConfigReq_4>:
 8003818:	f05f 0930 	movs.w	r9, #48	@ 0x30
 800381c:	f05f 0a00 	movs.w	sl, #0
 8003820:	46eb      	mov	fp, sp
 8003822:	4652      	mov	r2, sl
 8003824:	4649      	mov	r1, r9
 8003826:	4658      	mov	r0, fp
 8003828:	f004 f99c 	bl	8007b64 <__aeabi_memset>
 800382c:	2000      	movs	r0, #0
 800382e:	f88d 001a 	strb.w	r0, [sp, #26]
 8003832:	8a20      	ldrh	r0, [r4, #16]
 8003834:	2800      	cmp	r0, #0
 8003836:	d001      	beq.n	800383c <??ZbZclAttrReportConfigReq_6>
 8003838:	2001      	movs	r0, #1
 800383a:	e000      	b.n	800383e <??ZbZclAttrReportConfigReq_7>

0800383c <??ZbZclAttrReportConfigReq_6>:
 800383c:	2000      	movs	r0, #0

0800383e <??ZbZclAttrReportConfigReq_7>:
 800383e:	f88d 001b 	strb.w	r0, [sp, #27]
 8003842:	8a20      	ldrh	r0, [r4, #16]
 8003844:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003848:	2006      	movs	r0, #6
 800384a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800384e:	f00e fa25 	bl	8011c9c <ZbZclGetNextSeqnum>
 8003852:	f88d 0020 	strb.w	r0, [sp, #32]
 8003856:	4668      	mov	r0, sp
 8003858:	0029      	movs	r1, r5
 800385a:	2210      	movs	r2, #16
 800385c:	f012 f95f 	bl	8015b1e <__aeabi_memcpy>
 8003860:	8aa0      	ldrh	r0, [r4, #20]
 8003862:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003866:	89a0      	ldrh	r0, [r4, #12]
 8003868:	f8ad 0012 	strh.w	r0, [sp, #18]
 800386c:	7ba0      	ldrb	r0, [r4, #14]
 800386e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003872:	8ae0      	ldrh	r0, [r4, #22]
 8003874:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003878:	7e20      	ldrb	r0, [r4, #24]
 800387a:	f88d 0018 	strb.w	r0, [sp, #24]
 800387e:	7e60      	ldrb	r0, [r4, #25]
 8003880:	f88d 0019 	strb.w	r0, [sp, #25]
 8003884:	a80c      	add	r0, sp, #48	@ 0x30
 8003886:	9009      	str	r0, [sp, #36]	@ 0x24
 8003888:	970a      	str	r7, [sp, #40]	@ 0x28
 800388a:	0033      	movs	r3, r6
 800388c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800388e:	4669      	mov	r1, sp
 8003890:	68a0      	ldr	r0, [r4, #8]
 8003892:	f00e fa2e 	bl	8011cf2 <ZbZclCommandReq>

08003896 <??ZbZclAttrReportConfigReq_2>:
 8003896:	b01d      	add	sp, #116	@ 0x74
 8003898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800389c <ZbZclAttrReportReadReq>:
 800389c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b09b      	sub	sp, #108	@ 0x6c
 80038a2:	0005      	movs	r5, r0
 80038a4:	000e      	movs	r6, r1
 80038a6:	001f      	movs	r7, r3
 80038a8:	2400      	movs	r4, #0
 80038aa:	7c30      	ldrb	r0, [r6, #16]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d002      	beq.n	80038b6 <??ZbZclAttrReportReadReq_0>
 80038b0:	7c30      	ldrb	r0, [r6, #16]
 80038b2:	2807      	cmp	r0, #7
 80038b4:	d301      	bcc.n	80038ba <??ZbZclAttrReportReadReq_1>

080038b6 <??ZbZclAttrReportReadReq_0>:
 80038b6:	2001      	movs	r0, #1
 80038b8:	e050      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ba <??ZbZclAttrReportReadReq_1>:
 80038ba:	f05f 0800 	movs.w	r8, #0

080038be <??ZbZclAttrReportReadReq_3>:
 80038be:	7c30      	ldrb	r0, [r6, #16]
 80038c0:	4580      	cmp	r8, r0
 80038c2:	d217      	bcs.n	80038f4 <??ZbZclAttrReportReadReq_4>
 80038c4:	1ce0      	adds	r0, r4, #3
 80038c6:	283a      	cmp	r0, #58	@ 0x3a
 80038c8:	d301      	bcc.n	80038ce <??ZbZclAttrReportReadReq_5>
 80038ca:	2001      	movs	r0, #1
 80038cc:	e046      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ce <??ZbZclAttrReportReadReq_5>:
 80038ce:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038d2:	4430      	add	r0, r6
 80038d4:	7e00      	ldrb	r0, [r0, #24]
 80038d6:	a90c      	add	r1, sp, #48	@ 0x30
 80038d8:	5508      	strb	r0, [r1, r4]
 80038da:	1c64      	adds	r4, r4, #1
 80038dc:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038e0:	4430      	add	r0, r6
 80038e2:	8b41      	ldrh	r1, [r0, #26]
 80038e4:	a80c      	add	r0, sp, #48	@ 0x30
 80038e6:	4420      	add	r0, r4
 80038e8:	f003 fb5d 	bl	8006fa6 <putle16>
 80038ec:	1ca4      	adds	r4, r4, #2
 80038ee:	f118 0801 	adds.w	r8, r8, #1
 80038f2:	e7e4      	b.n	80038be <??ZbZclAttrReportReadReq_3>

080038f4 <??ZbZclAttrReportReadReq_4>:
 80038f4:	f05f 0930 	movs.w	r9, #48	@ 0x30
 80038f8:	f05f 0a00 	movs.w	sl, #0
 80038fc:	46eb      	mov	fp, sp
 80038fe:	4652      	mov	r2, sl
 8003900:	4649      	mov	r1, r9
 8003902:	4658      	mov	r0, fp
 8003904:	f004 f92e 	bl	8007b64 <__aeabi_memset>
 8003908:	2000      	movs	r0, #0
 800390a:	f88d 001a 	strb.w	r0, [sp, #26]
 800390e:	2008      	movs	r0, #8
 8003910:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8003914:	f00e f9c2 	bl	8011c9c <ZbZclGetNextSeqnum>
 8003918:	f88d 0020 	strb.w	r0, [sp, #32]
 800391c:	4668      	mov	r0, sp
 800391e:	0031      	movs	r1, r6
 8003920:	2210      	movs	r2, #16
 8003922:	f012 f8fc 	bl	8015b1e <__aeabi_memcpy>
 8003926:	8aa8      	ldrh	r0, [r5, #20]
 8003928:	f8ad 0010 	strh.w	r0, [sp, #16]
 800392c:	89a8      	ldrh	r0, [r5, #12]
 800392e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8003932:	7ba8      	ldrb	r0, [r5, #14]
 8003934:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003938:	8ae8      	ldrh	r0, [r5, #22]
 800393a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800393e:	7e28      	ldrb	r0, [r5, #24]
 8003940:	f88d 0018 	strb.w	r0, [sp, #24]
 8003944:	7e68      	ldrb	r0, [r5, #25]
 8003946:	f88d 0019 	strb.w	r0, [sp, #25]
 800394a:	a80c      	add	r0, sp, #48	@ 0x30
 800394c:	9009      	str	r0, [sp, #36]	@ 0x24
 800394e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003950:	003b      	movs	r3, r7
 8003952:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003954:	4669      	mov	r1, sp
 8003956:	68a8      	ldr	r0, [r5, #8]
 8003958:	f00e f9cb 	bl	8011cf2 <ZbZclCommandReq>

0800395c <??ZbZclAttrReportReadReq_2>:
 800395c:	b01d      	add	sp, #116	@ 0x74
 800395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003962 <ZbZclAttrReportConfigDefault>:
 8003962:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003966:	0007      	movs	r7, r0
 8003968:	4688      	mov	r8, r1
 800396a:	4691      	mov	r9, r2
 800396c:	469a      	mov	sl, r3
 800396e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003970:	4641      	mov	r1, r8
 8003972:	b289      	uxth	r1, r1
 8003974:	0038      	movs	r0, r7
 8003976:	f7fc fc32 	bl	80001de <ZbZclAttrFind>
 800397a:	0005      	movs	r5, r0
 800397c:	2d00      	cmp	r5, #0
 800397e:	d101      	bne.n	8003984 <??ZbZclAttrReportConfigDefault_0>
 8003980:	2086      	movs	r0, #134	@ 0x86
 8003982:	e02b      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003984 <??ZbZclAttrReportConfigDefault_0>:
 8003984:	68a8      	ldr	r0, [r5, #8]
 8003986:	7900      	ldrb	r0, [r0, #4]
 8003988:	0780      	lsls	r0, r0, #30
 800398a:	d401      	bmi.n	8003990 <??ZbZclAttrReportConfigDefault_2>
 800398c:	208c      	movs	r0, #140	@ 0x8c
 800398e:	e025      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003990 <??ZbZclAttrReportConfigDefault_2>:
 8003990:	2200      	movs	r2, #0
 8003992:	4641      	mov	r1, r8
 8003994:	b289      	uxth	r1, r1
 8003996:	0038      	movs	r0, r7
 8003998:	f7fe ff45 	bl	8002826 <zcl_reporting_find>
 800399c:	0006      	movs	r6, r0
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d101      	bne.n	80039a6 <??ZbZclAttrReportConfigDefault_3>
 80039a2:	208b      	movs	r0, #139	@ 0x8b
 80039a4:	e01a      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

080039a6 <??ZbZclAttrReportConfigDefault_3>:
 80039a6:	f8ad 9002 	strh.w	r9, [sp, #2]
 80039aa:	f8ad a000 	strh.w	sl, [sp]
 80039ae:	4669      	mov	r1, sp
 80039b0:	f10d 0002 	add.w	r0, sp, #2
 80039b4:	f7ff f894 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 80039b8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80039bc:	84b0      	strh	r0, [r6, #36]	@ 0x24
 80039be:	f8bd 0000 	ldrh.w	r0, [sp]
 80039c2:	84f0      	strh	r0, [r6, #38]	@ 0x26
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d003      	beq.n	80039d0 <??ZbZclAttrReportConfigDefault_4>
 80039c8:	ed94 0b00 	vldr	d0, [r4]
 80039cc:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

080039d0 <??ZbZclAttrReportConfigDefault_4>:
 80039d0:	2201      	movs	r2, #1
 80039d2:	0031      	movs	r1, r6
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f7ff f8b3 	bl	8002b40 <zcl_reporting_reset_defaults>
 80039da:	2000      	movs	r0, #0

080039dc <??ZbZclAttrReportConfigDefault_1>:
 80039dc:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080039e0 <ZbZclClusterReportCallbackAttach>:
 80039e0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80039e2:	4770      	bx	lr

080039e4 <ZbZclBasicClientAlloc>:
 80039e4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80039e6:	0005      	movs	r5, r0
 80039e8:	000e      	movs	r6, r1
 80039ea:	2001      	movs	r0, #1
 80039ec:	9000      	str	r0, [sp, #0]
 80039ee:	0033      	movs	r3, r6
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2200      	movs	r2, #0
 80039f4:	216c      	movs	r1, #108	@ 0x6c
 80039f6:	0028      	movs	r0, r5
 80039f8:	f000 f9cf 	bl	8003d9a <ZbZclClusterAlloc>
 80039fc:	0004      	movs	r4, r0
 80039fe:	2c00      	cmp	r4, #0
 8003a00:	d101      	bne.n	8003a06 <??ZbZclBasicClientAlloc_0>
 8003a02:	2000      	movs	r0, #0
 8003a04:	e006      	b.n	8003a14 <??ZbZclBasicClientAlloc_1>

08003a06 <??ZbZclBasicClientAlloc_0>:
 8003a06:	f20f 0011 	addw	r0, pc, #17
 8003a0a:	65a0      	str	r0, [r4, #88]	@ 0x58
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f000 fa54 	bl	8003eba <ZbZclClusterAttach>
 8003a12:	0020      	movs	r0, r4

08003a14 <??ZbZclBasicClientAlloc_1>:
 8003a14:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08003a18 <zcl_basic_client_handle_command>:
 8003a18:	0003      	movs	r3, r0
 8003a1a:	7888      	ldrb	r0, [r1, #2]
 8003a1c:	2801      	cmp	r0, #1
 8003a1e:	d001      	beq.n	8003a24 <??zcl_basic_client_handle_command_0>
 8003a20:	2081      	movs	r0, #129	@ 0x81
 8003a22:	e000      	b.n	8003a26 <??zcl_basic_client_handle_command_1>

08003a24 <??zcl_basic_client_handle_command_0>:
 8003a24:	2081      	movs	r0, #129	@ 0x81

08003a26 <??zcl_basic_client_handle_command_1>:
 8003a26:	4770      	bx	lr

08003a28 <zcl_basic_client_reset_rsp_cb>:
 8003a28:	000a      	movs	r2, r1
 8003a2a:	4770      	bx	lr

08003a2c <ZbZclBasicClientResetReq>:
 8003a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a30:	b088      	sub	sp, #32
 8003a32:	0004      	movs	r4, r0
 8003a34:	000d      	movs	r5, r1
 8003a36:	2620      	movs	r6, #32
 8003a38:	2700      	movs	r7, #0
 8003a3a:	46e8      	mov	r8, sp
 8003a3c:	003a      	movs	r2, r7
 8003a3e:	0031      	movs	r1, r6
 8003a40:	4640      	mov	r0, r8
 8003a42:	f004 f88f 	bl	8007b64 <__aeabi_memset>
 8003a46:	4668      	mov	r0, sp
 8003a48:	0029      	movs	r1, r5
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	f012 f867 	bl	8015b1e <__aeabi_memcpy>
 8003a50:	2000      	movs	r0, #0
 8003a52:	f88d 0010 	strb.w	r0, [sp, #16]
 8003a56:	2000      	movs	r0, #0
 8003a58:	f88d 0011 	strb.w	r0, [sp, #17]
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	9005      	str	r0, [sp, #20]
 8003a60:	2000      	movs	r0, #0
 8003a62:	9006      	str	r0, [sp, #24]
 8003a64:	0023      	movs	r3, r4
 8003a66:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <??DataTable1>)
 8003a68:	4669      	mov	r1, sp
 8003a6a:	0020      	movs	r0, r4
 8003a6c:	f00e f9d2 	bl	8011e14 <ZbZclClusterCommandReq>
 8003a70:	b008      	add	sp, #32
 8003a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a78 <??DataTable1>:
 8003a78:	3a29 0800                                   ):..

08003a7c <ZbZclClusterGetEndpoint>:
 8003a7c:	7b80      	ldrb	r0, [r0, #14]
 8003a7e:	4770      	bx	lr

08003a80 <ZbZclClusterSetCallbackArg>:
 8003a80:	6541      	str	r1, [r0, #84]	@ 0x54
 8003a82:	4770      	bx	lr

08003a84 <ZbZclClusterSetMfrCode>:
 8003a84:	8201      	strh	r1, [r0, #16]
 8003a86:	4770      	bx	lr

08003a88 <ZbZclClusterGetClusterId>:
 8003a88:	8980      	ldrh	r0, [r0, #12]
 8003a8a:	4770      	bx	lr

08003a8c <ZbZclClusterSetProfileId>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	0004      	movs	r4, r0
 8003a90:	000d      	movs	r5, r1
 8003a92:	82a5      	strh	r5, [r4, #20]
 8003a94:	7ba0      	ldrb	r0, [r4, #14]
 8003a96:	28ff      	cmp	r0, #255	@ 0xff
 8003a98:	d008      	beq.n	8003aac <??ZbZclClusterSetProfileId_0>
 8003a9a:	0020      	movs	r0, r4
 8003a9c:	f00e fab2 	bl	8012004 <ZbZclClusterUnbind>
 8003aa0:	7f23      	ldrb	r3, [r4, #28]
 8003aa2:	8aa2      	ldrh	r2, [r4, #20]
 8003aa4:	7ba1      	ldrb	r1, [r4, #14]
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	f00e fa69 	bl	8011f7e <ZbZclClusterBind>

08003aac <??ZbZclClusterSetProfileId_0>:
 8003aac:	bd31      	pop	{r0, r4, r5, pc}

08003aae <ZbZclClusterGetProfileId>:
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	0004      	movs	r4, r0
 8003ab2:	7ba1      	ldrb	r1, [r4, #14]
 8003ab4:	68a0      	ldr	r0, [r4, #8]
 8003ab6:	f00d fd1c 	bl	80114f2 <ZbApsEndpointProfile>
 8003aba:	0001      	movs	r1, r0
 8003abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ac0:	b289      	uxth	r1, r1
 8003ac2:	4291      	cmp	r1, r2
 8003ac4:	d101      	bne.n	8003aca <??ZbZclClusterGetProfileId_0>
 8003ac6:	8aa1      	ldrh	r1, [r4, #20]
 8003ac8:	0008      	movs	r0, r1

08003aca <??ZbZclClusterGetProfileId_0>:
 8003aca:	b280      	uxth	r0, r0
 8003acc:	bd10      	pop	{r4, pc}

08003ace <ZbZclClusterSetMinSecurity>:
 8003ace:	b430      	push	{r4, r5}
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	7d9a      	ldrb	r2, [r3, #22]
 8003ad6:	f012 0203 	ands.w	r2, r2, #3
 8003ada:	2a01      	cmp	r2, #1
 8003adc:	d101      	bne.n	8003ae2 <??ZbZclClusterSetMinSecurity_0>
 8003ade:	2401      	movs	r4, #1
 8003ae0:	e000      	b.n	8003ae4 <??ZbZclClusterSetMinSecurity_1>

08003ae2 <??ZbZclClusterSetMinSecurity_0>:
 8003ae2:	2400      	movs	r4, #0

08003ae4 <??ZbZclClusterSetMinSecurity_1>:
 8003ae4:	000a      	movs	r2, r1
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	2aab      	cmp	r2, #171	@ 0xab
 8003aea:	d01d      	beq.n	8003b28 <??ZbZclClusterSetMinSecurity_2>
 8003aec:	2aac      	cmp	r2, #172	@ 0xac
 8003aee:	d00f      	beq.n	8003b10 <??ZbZclClusterSetMinSecurity_3>
 8003af0:	2aaf      	cmp	r2, #175	@ 0xaf
 8003af2:	d123      	bne.n	8003b3c <??ZbZclClusterSetMinSecurity_4>

08003af4 <??ZbZclClusterSetMinSecurity_5>:
 8003af4:	8add      	ldrh	r5, [r3, #22]
 8003af6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003afa:	4015      	ands	r5, r2
 8003afc:	82dd      	strh	r5, [r3, #22]
 8003afe:	8add      	ldrh	r5, [r3, #22]
 8003b00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b04:	4015      	ands	r5, r2
 8003b06:	82dd      	strh	r5, [r3, #22]
 8003b08:	0022      	movs	r2, r4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	2a00      	cmp	r2, #0

08003b0e <??ZbZclClusterSetMinSecurity_6>:
 8003b0e:	e017      	b.n	8003b40 <??ZbZclClusterSetMinSecurity_7>

08003b10 <??ZbZclClusterSetMinSecurity_3>:
 8003b10:	8ada      	ldrh	r2, [r3, #22]
 8003b12:	f052 0202 	orrs.w	r2, r2, #2
 8003b16:	82da      	strh	r2, [r3, #22]
 8003b18:	8ada      	ldrh	r2, [r3, #22]
 8003b1a:	f052 0201 	orrs.w	r2, r2, #1
 8003b1e:	82da      	strh	r2, [r3, #22]
 8003b20:	0022      	movs	r2, r4
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	2a00      	cmp	r2, #0

08003b26 <??ZbZclClusterSetMinSecurity_8>:
 8003b26:	e00b      	b.n	8003b40 <??ZbZclClusterSetMinSecurity_7>

08003b28 <??ZbZclClusterSetMinSecurity_2>:
 8003b28:	8add      	ldrh	r5, [r3, #22]
 8003b2a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003b2e:	4015      	ands	r5, r2
 8003b30:	82dd      	strh	r5, [r3, #22]
 8003b32:	8ada      	ldrh	r2, [r3, #22]
 8003b34:	f052 0201 	orrs.w	r2, r2, #1
 8003b38:	82da      	strh	r2, [r3, #22]
 8003b3a:	e001      	b.n	8003b40 <??ZbZclClusterSetMinSecurity_7>

08003b3c <??ZbZclClusterSetMinSecurity_4>:
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	0010      	movs	r0, r2

08003b40 <??ZbZclClusterSetMinSecurity_7>:
 8003b40:	0002      	movs	r2, r0
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d000      	beq.n	8003b4a <??ZbZclClusterSetMinSecurity_9>
 8003b48:	7499      	strb	r1, [r3, #18]

08003b4a <??ZbZclClusterSetMinSecurity_9>:
 8003b4a:	b2c0      	uxtb	r0, r0
 8003b4c:	bc30      	pop	{r4, r5}
 8003b4e:	4770      	bx	lr

08003b50 <ZbZclClusterCheckMinSecurity>:
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	0004      	movs	r4, r0
 8003b56:	000d      	movs	r5, r1
 8003b58:	0016      	movs	r6, r2
 8003b5a:	2700      	movs	r7, #0
 8003b5c:	7ca0      	ldrb	r0, [r4, #18]
 8003b5e:	28af      	cmp	r0, #175	@ 0xaf
 8003b60:	d102      	bne.n	8003b68 <??ZbZclClusterCheckMinSecurity_0>
 8003b62:	2001      	movs	r0, #1
 8003b64:	0007      	movs	r7, r0
 8003b66:	e073      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003b68 <??ZbZclClusterCheckMinSecurity_0>:
 8003b68:	7ca0      	ldrb	r0, [r4, #18]
 8003b6a:	28ac      	cmp	r0, #172	@ 0xac
 8003b6c:	d10a      	bne.n	8003b84 <??ZbZclClusterCheckMinSecurity_2>
 8003b6e:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b72:	28ac      	cmp	r0, #172	@ 0xac
 8003b74:	d003      	beq.n	8003b7e <??ZbZclClusterCheckMinSecurity_3>
 8003b76:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b7a:	28ab      	cmp	r0, #171	@ 0xab
 8003b7c:	d101      	bne.n	8003b82 <??ZbZclClusterCheckMinSecurity_4>

08003b7e <??ZbZclClusterCheckMinSecurity_3>:
 8003b7e:	2001      	movs	r0, #1
 8003b80:	0007      	movs	r7, r0

08003b82 <??ZbZclClusterCheckMinSecurity_4>:
 8003b82:	e065      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003b84 <??ZbZclClusterCheckMinSecurity_2>:
 8003b84:	7ca0      	ldrb	r0, [r4, #18]
 8003b86:	28ab      	cmp	r0, #171	@ 0xab
 8003b88:	d162      	bne.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>
 8003b8a:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b8e:	28ab      	cmp	r0, #171	@ 0xab
 8003b90:	d102      	bne.n	8003b98 <??ZbZclClusterCheckMinSecurity_6>
 8003b92:	2001      	movs	r0, #1
 8003b94:	0007      	movs	r7, r0
 8003b96:	e05b      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003b98 <??ZbZclClusterCheckMinSecurity_6>:
 8003b98:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b9c:	28ac      	cmp	r0, #172	@ 0xac
 8003b9e:	d157      	bne.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003ba0 <??ZbZclClusterCheckMinSecurity_7>:
 8003ba0:	89a0      	ldrh	r0, [r4, #12]
 8003ba2:	2819      	cmp	r0, #25
 8003ba4:	d114      	bne.n	8003bd0 <??ZbZclClusterCheckMinSecurity_8>
 8003ba6:	7f20      	ldrb	r0, [r4, #28]
 8003ba8:	2801      	cmp	r0, #1
 8003baa:	d111      	bne.n	8003bd0 <??ZbZclClusterCheckMinSecurity_8>
 8003bac:	0028      	movs	r0, r5
 8003bae:	f00d fcd3 	bl	8011558 <ZbApsAddrIsBcast>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d00b      	beq.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bb6:	7830      	ldrb	r0, [r6, #0]
 8003bb8:	2801      	cmp	r0, #1
 8003bba:	d108      	bne.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bbc:	78b0      	ldrb	r0, [r6, #2]
 8003bbe:	2801      	cmp	r0, #1
 8003bc0:	d105      	bne.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bc2:	79f0      	ldrb	r0, [r6, #7]
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d102      	bne.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bc8:	2001      	movs	r0, #1
 8003bca:	0007      	movs	r7, r0
 8003bcc:	e040      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003bce <??ZbZclClusterCheckMinSecurity_9>:
 8003bce:	e03f      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003bd0 <??ZbZclClusterCheckMinSecurity_8>:
 8003bd0:	f240 7802 	movw	r8, #1794	@ 0x702
 8003bd4:	89a0      	ldrh	r0, [r4, #12]
 8003bd6:	4540      	cmp	r0, r8
 8003bd8:	d11a      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bda:	7f20      	ldrb	r0, [r4, #28]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d117      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003be0:	7830      	ldrb	r0, [r6, #0]
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d114      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003be6:	79f0      	ldrb	r0, [r6, #7]
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d111      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bec:	78b0      	ldrb	r0, [r6, #2]
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d10e      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bf2:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003bf4:	2802      	cmp	r0, #2
 8003bf6:	d30b      	bcc.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bf8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003bfa:	f003 f988 	bl	8006f0e <pletoh16>
 8003bfe:	0001      	movs	r1, r0
 8003c00:	f240 3206 	movw	r2, #774	@ 0x306
 8003c04:	b289      	uxth	r1, r1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	d102      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	000f      	movs	r7, r1
 8003c0e:	e01f      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c10 <??ZbZclClusterCheckMinSecurity_10>:
 8003c10:	89a0      	ldrh	r0, [r4, #12]
 8003c12:	4540      	cmp	r0, r8
 8003c14:	d11b      	bne.n	8003c4e <??ZbZclClusterCheckMinSecurity_11>
 8003c16:	7f20      	ldrb	r0, [r4, #28]
 8003c18:	2801      	cmp	r0, #1
 8003c1a:	d118      	bne.n	8003c4e <??ZbZclClusterCheckMinSecurity_11>
 8003c1c:	7830      	ldrb	r0, [r6, #0]
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d114      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c22:	79f0      	ldrb	r0, [r6, #7]
 8003c24:	2801      	cmp	r0, #1
 8003c26:	d111      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c28:	78b0      	ldrb	r0, [r6, #2]
 8003c2a:	2801      	cmp	r0, #1
 8003c2c:	d10e      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c2e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003c30:	2802      	cmp	r0, #2
 8003c32:	d30b      	bcc.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c34:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003c36:	f003 f96a 	bl	8006f0e <pletoh16>
 8003c3a:	0001      	movs	r1, r0
 8003c3c:	f240 3206 	movw	r2, #774	@ 0x306
 8003c40:	b289      	uxth	r1, r1
 8003c42:	4291      	cmp	r1, r2
 8003c44:	d102      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c46:	2101      	movs	r1, #1
 8003c48:	000f      	movs	r7, r1
 8003c4a:	e001      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c4c <??ZbZclClusterCheckMinSecurity_12>:
 8003c4c:	e000      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c4e <??ZbZclClusterCheckMinSecurity_11>:
 8003c4e:	e7ff      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c50 <??ZbZclClusterCheckMinSecurity_1>:
 8003c50:	0038      	movs	r0, r7
 8003c52:	b2c0      	uxtb	r0, r0
 8003c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c58 <ZbZclClusterSetTxOptions>:
 8003c58:	05ca      	lsls	r2, r1, #23
 8003c5a:	d400      	bmi.n	8003c5e <??ZbZclClusterSetTxOptions_0>

08003c5c <??ZbZclClusterSetTxOptions_1>:
 8003c5c:	82c1      	strh	r1, [r0, #22]

08003c5e <??ZbZclClusterSetTxOptions_0>:
 8003c5e:	4770      	bx	lr

08003c60 <ZbZclClusterGetTxOptions>:
 8003c60:	8ac0      	ldrh	r0, [r0, #22]
 8003c62:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 8003c66:	4008      	ands	r0, r1
 8003c68:	4770      	bx	lr

08003c6a <ZbZclTxOptsFromSecurityStatus>:
 8003c6a:	0001      	movs	r1, r0
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f050 0004 	orrs.w	r0, r0, #4
 8003c72:	f050 0008 	orrs.w	r0, r0, #8
 8003c76:	000a      	movs	r2, r1
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	2aab      	cmp	r2, #171	@ 0xab
 8003c7c:	d102      	bne.n	8003c84 <??ZbZclTxOptsFromSecurityStatus_0>
 8003c7e:	f050 0001 	orrs.w	r0, r0, #1
 8003c82:	e007      	b.n	8003c94 <??ZbZclTxOptsFromSecurityStatus_1>

08003c84 <??ZbZclTxOptsFromSecurityStatus_0>:
 8003c84:	000a      	movs	r2, r1
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	2aac      	cmp	r2, #172	@ 0xac
 8003c8a:	d103      	bne.n	8003c94 <??ZbZclTxOptsFromSecurityStatus_1>
 8003c8c:	f050 0001 	orrs.w	r0, r0, #1
 8003c90:	f050 0002 	orrs.w	r0, r0, #2

08003c94 <??ZbZclTxOptsFromSecurityStatus_1>:
 8003c94:	b280      	uxth	r0, r0
 8003c96:	4770      	bx	lr

08003c98 <ZbZclClusterGetDirection>:
 8003c98:	7f00      	ldrb	r0, [r0, #28]
 8003c9a:	4770      	bx	lr

08003c9c <ZbZclClusterGetDirectionStr>:
 8003c9c:	0001      	movs	r1, r0
 8003c9e:	7f08      	ldrb	r0, [r1, #28]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d003      	beq.n	8003cac <??ZbZclClusterGetDirectionStr_0>
 8003ca4:	2802      	cmp	r0, #2
 8003ca6:	d005      	beq.n	8003cb4 <??ZbZclClusterGetDirectionStr_1>
 8003ca8:	d302      	bcc.n	8003cb0 <??ZbZclClusterGetDirectionStr_2>
 8003caa:	e005      	b.n	8003cb8 <??ZbZclClusterGetDirectionStr_3>

08003cac <??ZbZclClusterGetDirectionStr_0>:
 8003cac:	4803      	ldr	r0, [pc, #12]	@ (8003cbc <??DataTable1>)
 8003cae:	e004      	b.n	8003cba <??ZbZclClusterGetDirectionStr_4>

08003cb0 <??ZbZclClusterGetDirectionStr_2>:
 8003cb0:	4803      	ldr	r0, [pc, #12]	@ (8003cc0 <??DataTable1_1>)
 8003cb2:	e002      	b.n	8003cba <??ZbZclClusterGetDirectionStr_4>

08003cb4 <??ZbZclClusterGetDirectionStr_1>:
 8003cb4:	4803      	ldr	r0, [pc, #12]	@ (8003cc4 <??DataTable1_2>)
 8003cb6:	e000      	b.n	8003cba <??ZbZclClusterGetDirectionStr_4>

08003cb8 <??ZbZclClusterGetDirectionStr_3>:
 8003cb8:	4803      	ldr	r0, [pc, #12]	@ (8003cc8 <??DataTable1_3>)

08003cba <??ZbZclClusterGetDirectionStr_4>:
 8003cba:	4770      	bx	lr

08003cbc <??DataTable1>:
 8003cbc:	7d14 0801                                   .}..

08003cc0 <??DataTable1_1>:
 8003cc0:	7d1c 0801                                   .}..

08003cc4 <??DataTable1_2>:
 8003cc4:	7d24 0801                                   $}..

08003cc8 <??DataTable1_3>:
 8003cc8:	7d2c 0801                                   ,}..

08003ccc <ZbZclClusterSetDiscoverRoute>:
 8003ccc:	7601      	strb	r1, [r0, #24]
 8003cce:	4770      	bx	lr

08003cd0 <ZbZclClusterSetRadius>:
 8003cd0:	7641      	strb	r1, [r0, #25]
 8003cd2:	4770      	bx	lr

08003cd4 <ZbZclClusterGetRadius>:
 8003cd4:	7e40      	ldrb	r0, [r0, #25]
 8003cd6:	4770      	bx	lr

08003cd8 <ZbZclClusterSetMaxAsduLength>:
 8003cd8:	b410      	push	{r4}
 8003cda:	0002      	movs	r2, r0
 8003cdc:	000b      	movs	r3, r1
 8003cde:	0018      	movs	r0, r3
 8003ce0:	b280      	uxth	r0, r0
 8003ce2:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 8003ce6:	42a0      	cmp	r0, r4
 8003ce8:	d301      	bcc.n	8003cee <??ZbZclClusterSetMaxAsduLength_0>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e007      	b.n	8003cfe <??ZbZclClusterSetMaxAsduLength_1>

08003cee <??ZbZclClusterSetMaxAsduLength_0>:
 8003cee:	0018      	movs	r0, r3
 8003cf0:	b280      	uxth	r0, r0
 8003cf2:	2839      	cmp	r0, #57	@ 0x39
 8003cf4:	d201      	bcs.n	8003cfa <??ZbZclClusterSetMaxAsduLength_2>
 8003cf6:	2039      	movs	r0, #57	@ 0x39
 8003cf8:	0003      	movs	r3, r0

08003cfa <??ZbZclClusterSetMaxAsduLength_2>:
 8003cfa:	8353      	strh	r3, [r2, #26]
 8003cfc:	2001      	movs	r0, #1

08003cfe <??ZbZclClusterSetMaxAsduLength_1>:
 8003cfe:	bc10      	pop	{r4}
 8003d00:	4770      	bx	lr

08003d02 <ZbZclClusterGetMaxAsduLength>:
 8003d02:	8b40      	ldrh	r0, [r0, #26]
 8003d04:	4770      	bx	lr

08003d06 <ZbZclClusterInitCommandReq>:
 8003d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	000d      	movs	r5, r1
 8003d0e:	2630      	movs	r6, #48	@ 0x30
 8003d10:	2700      	movs	r7, #0
 8003d12:	46a8      	mov	r8, r5
 8003d14:	003a      	movs	r2, r7
 8003d16:	0031      	movs	r1, r6
 8003d18:	4640      	mov	r0, r8
 8003d1a:	f003 ff23 	bl	8007b64 <__aeabi_memset>
 8003d1e:	8aa0      	ldrh	r0, [r4, #20]
 8003d20:	8228      	strh	r0, [r5, #16]
 8003d22:	89a0      	ldrh	r0, [r4, #12]
 8003d24:	8268      	strh	r0, [r5, #18]
 8003d26:	7ba0      	ldrb	r0, [r4, #14]
 8003d28:	82a8      	strh	r0, [r5, #20]
 8003d2a:	8ae0      	ldrh	r0, [r4, #22]
 8003d2c:	82e8      	strh	r0, [r5, #22]
 8003d2e:	7e20      	ldrb	r0, [r4, #24]
 8003d30:	7628      	strb	r0, [r5, #24]
 8003d32:	7e60      	ldrb	r0, [r4, #25]
 8003d34:	7668      	strb	r0, [r5, #25]
 8003d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d3a <ZbZclClusterInitApsdeReq>:
 8003d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3e:	0005      	movs	r5, r0
 8003d40:	000e      	movs	r6, r1
 8003d42:	0014      	movs	r4, r2
 8003d44:	2730      	movs	r7, #48	@ 0x30
 8003d46:	f05f 0800 	movs.w	r8, #0
 8003d4a:	46b1      	mov	r9, r6
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	0039      	movs	r1, r7
 8003d50:	4648      	mov	r0, r9
 8003d52:	f003 ff07 	bl	8007b64 <__aeabi_memset>
 8003d56:	8aa8      	ldrh	r0, [r5, #20]
 8003d58:	8230      	strh	r0, [r6, #16]
 8003d5a:	89a8      	ldrh	r0, [r5, #12]
 8003d5c:	8270      	strh	r0, [r6, #18]
 8003d5e:	7ba8      	ldrb	r0, [r5, #14]
 8003d60:	82b0      	strh	r0, [r6, #20]
 8003d62:	8ae8      	ldrh	r0, [r5, #22]
 8003d64:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003d66:	7e28      	ldrb	r0, [r5, #24]
 8003d68:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8003d6c:	7e68      	ldrb	r0, [r5, #25]
 8003d6e:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8003d72:	2c00      	cmp	r4, #0
 8003d74:	d00b      	beq.n	8003d8e <??ZbZclClusterInitApsdeReq_0>
 8003d76:	8ab0      	ldrh	r0, [r6, #20]
 8003d78:	28ff      	cmp	r0, #255	@ 0xff
 8003d7a:	d101      	bne.n	8003d80 <??ZbZclClusterInitApsdeReq_1>
 8003d7c:	8860      	ldrh	r0, [r4, #2]
 8003d7e:	82b0      	strh	r0, [r6, #20]

08003d80 <??ZbZclClusterInitApsdeReq_1>:
 8003d80:	8c20      	ldrh	r0, [r4, #32]
 8003d82:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d86:	4288      	cmp	r0, r1
 8003d88:	d001      	beq.n	8003d8e <??ZbZclClusterInitApsdeReq_0>
 8003d8a:	8c20      	ldrh	r0, [r4, #32]
 8003d8c:	8230      	strh	r0, [r6, #16]

08003d8e <??ZbZclClusterInitApsdeReq_0>:
 8003d8e:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08003d94 <zcl_cluster_command_dummy>:
 8003d94:	0003      	movs	r3, r0
 8003d96:	20ff      	movs	r0, #255	@ 0xff
 8003d98:	4770      	bx	lr

08003d9a <ZbZclClusterAlloc>:
 8003d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9e:	0006      	movs	r6, r0
 8003da0:	000f      	movs	r7, r1
 8003da2:	4698      	mov	r8, r3
 8003da4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003da6:	2f6c      	cmp	r7, #108	@ 0x6c
 8003da8:	d201      	bcs.n	8003dae <??ZbZclClusterAlloc_0>
 8003daa:	2000      	movs	r0, #0
 8003dac:	e083      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003dae <??ZbZclClusterAlloc_0>:
 8003dae:	f20f 2914 	addw	r9, pc, #532	@ 0x214
 8003db2:	2300      	movs	r3, #0
 8003db4:	464a      	mov	r2, r9
 8003db6:	0039      	movs	r1, r7
 8003db8:	0030      	movs	r0, r6
 8003dba:	f00e f97b 	bl	80120b4 <zb_heap_alloc>
 8003dbe:	0004      	movs	r4, r0
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d101      	bne.n	8003dc8 <??ZbZclClusterAlloc_2>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e076      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003dc8 <??ZbZclClusterAlloc_2>:
 8003dc8:	9701      	str	r7, [sp, #4]
 8003dca:	f05f 0a00 	movs.w	sl, #0
 8003dce:	46a3      	mov	fp, r4
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	9901      	ldr	r1, [sp, #4]
 8003dd4:	4658      	mov	r0, fp
 8003dd6:	f003 fec5 	bl	8007b64 <__aeabi_memset>
 8003dda:	6024      	str	r4, [r4, #0]
 8003ddc:	6064      	str	r4, [r4, #4]
 8003dde:	60a6      	str	r6, [r4, #8]
 8003de0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8003de4:	81a0      	strh	r0, [r4, #12]
 8003de6:	f884 800e 	strb.w	r8, [r4, #14]
 8003dea:	2000      	movs	r0, #0
 8003dec:	8220      	strh	r0, [r4, #16]
 8003dee:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003df2:	82a0      	strh	r0, [r4, #20]
 8003df4:	200f      	movs	r0, #15
 8003df6:	82e0      	strh	r0, [r4, #22]
 8003df8:	2001      	movs	r0, #1
 8003dfa:	7620      	strb	r0, [r4, #24]
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	7660      	strb	r0, [r4, #25]
 8003e00:	2039      	movs	r0, #57	@ 0x39
 8003e02:	8360      	strh	r0, [r4, #26]
 8003e04:	7725      	strb	r5, [r4, #28]
 8003e06:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8003e0a:	6260      	str	r0, [r4, #36]	@ 0x24
 8003e0c:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8003e10:	62a0      	str	r0, [r4, #40]	@ 0x28
 8003e12:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8003e16:	6320      	str	r0, [r4, #48]	@ 0x30
 8003e18:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8003e1c:	6360      	str	r0, [r4, #52]	@ 0x34
 8003e1e:	9400      	str	r4, [sp, #0]
 8003e20:	f8df 33d4 	ldr.w	r3, [pc, #980]	@ 80041f8 <??DataTable5_1>
 8003e24:	2281      	movs	r2, #129	@ 0x81
 8003e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e2a:	0030      	movs	r0, r6
 8003e2c:	f00d fc96 	bl	801175c <ZbMsgFilterRegister>
 8003e30:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003e32:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d104      	bne.n	8003e42 <??ZbZclClusterAlloc_3>
 8003e38:	0020      	movs	r0, r4
 8003e3a:	f000 f870 	bl	8003f1e <ZbZclClusterFree>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e039      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003e42 <??ZbZclClusterAlloc_3>:
 8003e42:	0022      	movs	r2, r4
 8003e44:	f8df 13b4 	ldr.w	r1, [pc, #948]	@ 80041fc <??DataTable5_2>
 8003e48:	0030      	movs	r0, r6
 8003e4a:	f00d fd43 	bl	80118d4 <ZbTimerAlloc>
 8003e4e:	63a0      	str	r0, [r4, #56]	@ 0x38
 8003e50:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d104      	bne.n	8003e60 <??ZbZclClusterAlloc_4>
 8003e56:	0020      	movs	r0, r4
 8003e58:	f000 f861 	bl	8003f1e <ZbZclClusterFree>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e02a      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003e60 <??ZbZclClusterAlloc_4>:
 8003e60:	0022      	movs	r2, r4
 8003e62:	f20f 1125 	addw	r1, pc, #293	@ 0x125
 8003e66:	0030      	movs	r0, r6
 8003e68:	f00d fd34 	bl	80118d4 <ZbTimerAlloc>
 8003e6c:	6520      	str	r0, [r4, #80]	@ 0x50
 8003e6e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d104      	bne.n	8003e7e <??ZbZclClusterAlloc_5>
 8003e74:	0020      	movs	r0, r4
 8003e76:	f000 f852 	bl	8003f1e <ZbZclClusterFree>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e01b      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003e7e <??ZbZclClusterAlloc_5>:
 8003e7e:	21ac      	movs	r1, #172	@ 0xac
 8003e80:	0020      	movs	r0, r4
 8003e82:	f7ff fe24 	bl	8003ace <ZbZclClusterSetMinSecurity>
 8003e86:	2201      	movs	r2, #1
 8003e88:	f8df 1374 	ldr.w	r1, [pc, #884]	@ 8004200 <??DataTable5_3>
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fd feff 	bl	8001c90 <ZbZclAttrAppendList>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d007      	beq.n	8003ea6 <??ZbZclClusterAlloc_6>
 8003e96:	2300      	movs	r3, #0
 8003e98:	464a      	mov	r2, r9
 8003e9a:	0021      	movs	r1, r4
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	f00e f918 	bl	80120d2 <zb_heap_free>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e007      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003ea6 <??ZbZclClusterAlloc_6>:
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8003eae:	0020      	movs	r0, r4
 8003eb0:	f7fd fdd7 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8003eb4:	0020      	movs	r0, r4

08003eb6 <??ZbZclClusterAlloc_1>:
 8003eb6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003eba <ZbZclClusterAttach>:
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	0004      	movs	r4, r0
 8003ebe:	7ba0      	ldrb	r0, [r4, #14]
 8003ec0:	28ff      	cmp	r0, #255	@ 0xff
 8003ec2:	d104      	bne.n	8003ece <??ZbZclClusterAttach_0>
 8003ec4:	89a0      	ldrh	r0, [r4, #12]
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d001      	beq.n	8003ece <??ZbZclClusterAttach_0>
 8003eca:	89a0      	ldrh	r0, [r4, #12]
 8003ecc:	280a      	cmp	r0, #10

08003ece <??ZbZclClusterAttach_0>:
 8003ece:	7ba0      	ldrb	r0, [r4, #14]
 8003ed0:	28ff      	cmp	r0, #255	@ 0xff
 8003ed2:	d00b      	beq.n	8003eec <??ZbZclClusterAttach_1>
 8003ed4:	7f23      	ldrb	r3, [r4, #28]
 8003ed6:	8aa2      	ldrh	r2, [r4, #20]
 8003ed8:	7ba1      	ldrb	r1, [r4, #14]
 8003eda:	0020      	movs	r0, r4
 8003edc:	f00e f84f 	bl	8011f7e <ZbZclClusterBind>
 8003ee0:	0001      	movs	r1, r0
 8003ee2:	b2c9      	uxtb	r1, r1
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d001      	beq.n	8003eec <??ZbZclClusterAttach_1>
 8003ee8:	b2c0      	uxtb	r0, r0
 8003eea:	e005      	b.n	8003ef8 <??ZbZclClusterAttach_2>

08003eec <??ZbZclClusterAttach_1>:
 8003eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d101      	bne.n	8003ef6 <??ZbZclClusterAttach_3>
 8003ef2:	48c4      	ldr	r0, [pc, #784]	@ (8004204 <??DataTable5_4>)
 8003ef4:	65a0      	str	r0, [r4, #88]	@ 0x58

08003ef6 <??ZbZclClusterAttach_3>:
 8003ef6:	2000      	movs	r0, #0

08003ef8 <??ZbZclClusterAttach_2>:
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <ZbZclClusterDetach>:
 8003efa:	b510      	push	{r4, lr}
 8003efc:	0004      	movs	r4, r0
 8003efe:	68a0      	ldr	r0, [r4, #8]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d00b      	beq.n	8003f1c <??ZbZclClusterDetach_0>

08003f04 <??ZbZclClusterDetach_1>:
 8003f04:	0020      	movs	r0, r4
 8003f06:	f00e f87d 	bl	8012004 <ZbZclClusterUnbind>
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f00e f8a6 	bl	801205c <ZbZclClusterRemoveAlarmResetHandler>
 8003f10:	7ba0      	ldrb	r0, [r4, #14]
 8003f12:	28ff      	cmp	r0, #255	@ 0xff
 8003f14:	d002      	beq.n	8003f1c <??ZbZclClusterDetach_0>
 8003f16:	0020      	movs	r0, r4
 8003f18:	f00d fffc 	bl	8011f14 <ZbZclClusterEndpointRemove>

08003f1c <??ZbZclClusterDetach_0>:
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <ZbZclClusterFree>:
 8003f1e:	b538      	push	{r3, r4, r5, lr}
 8003f20:	0005      	movs	r5, r0
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	2c00      	cmp	r4, #0
 8003f26:	d02d      	beq.n	8003f84 <??ZbZclClusterFree_0>

08003f28 <??ZbZclClusterFree_1>:
 8003f28:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d004      	beq.n	8003f38 <??ZbZclClusterFree_2>
 8003f2e:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8003f30:	f00d fd22 	bl	8011978 <ZbTimerFree>
 8003f34:	2000      	movs	r0, #0
 8003f36:	6528      	str	r0, [r5, #80]	@ 0x50

08003f38 <??ZbZclClusterFree_2>:
 8003f38:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d004      	beq.n	8003f48 <??ZbZclClusterFree_3>
 8003f3e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8003f40:	f00d fd1a 	bl	8011978 <ZbTimerFree>
 8003f44:	2000      	movs	r0, #0
 8003f46:	63a8      	str	r0, [r5, #56]	@ 0x38

08003f48 <??ZbZclClusterFree_3>:
 8003f48:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d005      	beq.n	8003f5a <??ZbZclClusterFree_4>
 8003f4e:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8003f50:	0020      	movs	r0, r4
 8003f52:	f00d fc67 	bl	8011824 <ZbMsgFilterRemove>
 8003f56:	2000      	movs	r0, #0
 8003f58:	62e8      	str	r0, [r5, #44]	@ 0x2c

08003f5a <??ZbZclClusterFree_4>:
 8003f5a:	0028      	movs	r0, r5
 8003f5c:	f7fe fc51 	bl	8002802 <ZbZclReportCleanup>
 8003f60:	0028      	movs	r0, r5
 8003f62:	f7ff ffca 	bl	8003efa <ZbZclClusterDetach>
 8003f66:	0028      	movs	r0, r5
 8003f68:	f7fd ff9e 	bl	8001ea8 <ZbZclAttrFreeList>
 8003f6c:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d002      	beq.n	8003f78 <??ZbZclClusterFree_5>
 8003f72:	0028      	movs	r0, r5
 8003f74:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8003f76:	4788      	blx	r1

08003f78 <??ZbZclClusterFree_5>:
 8003f78:	2300      	movs	r3, #0
 8003f7a:	a212      	add	r2, pc, #72	@ (adr r2, 8003fc4 <??DataTable4>)
 8003f7c:	0029      	movs	r1, r5
 8003f7e:	0020      	movs	r0, r4
 8003f80:	f00e f8a7 	bl	80120d2 <zb_heap_free>

08003f84 <??ZbZclClusterFree_0>:
 8003f84:	bd31      	pop	{r0, r4, r5, pc}
	...

08003f88 <zcl_cluster_persist_timer>:
 8003f88:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8003f8a:	0005      	movs	r5, r0
 8003f8c:	000e      	movs	r6, r1
 8003f8e:	0037      	movs	r7, r6
 8003f90:	a902      	add	r1, sp, #8
 8003f92:	0038      	movs	r0, r7
 8003f94:	f000 f818 	bl	8003fc8 <zcl_persist_read_attrs>
 8003f98:	0004      	movs	r4, r0
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	d010      	beq.n	8003fc0 <??zcl_cluster_persist_timer_0>
 8003f9e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8003fa2:	9001      	str	r0, [sp, #4]
 8003fa4:	9400      	str	r4, [sp, #0]
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	7f3a      	ldrb	r2, [r7, #28]
 8003fac:	89b9      	ldrh	r1, [r7, #12]
 8003fae:	68b8      	ldr	r0, [r7, #8]
 8003fb0:	f000 f92a 	bl	8004208 <zcl_persist_send_cache>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	a203      	add	r2, pc, #12	@ (adr r2, 8003fc4 <??DataTable4>)
 8003fb8:	0021      	movs	r1, r4
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f00e f889 	bl	80120d2 <zb_heap_free>

08003fc0 <??zcl_cluster_persist_timer_0>:
 8003fc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08003fc4 <??DataTable4>:
 8003fc4:	0000 0000                                   ....

08003fc8 <zcl_persist_read_attrs>:
 8003fc8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b08c      	sub	sp, #48	@ 0x30
 8003fce:	0007      	movs	r7, r0
 8003fd0:	f05f 0b00 	movs.w	fp, #0
 8003fd4:	f05f 0900 	movs.w	r9, #0
 8003fd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fda:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8003fde:	4288      	cmp	r0, r1
 8003fe0:	d001      	beq.n	8003fe6 <??zcl_persist_read_attrs_0>
 8003fe2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003fe4:	e000      	b.n	8003fe8 <??zcl_persist_read_attrs_1>

08003fe6 <??zcl_persist_read_attrs_0>:
 8003fe6:	2400      	movs	r4, #0

08003fe8 <??zcl_persist_read_attrs_1>:
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	d01e      	beq.n	800402a <??zcl_persist_read_attrs_2>
 8003fec:	46a0      	mov	r8, r4
 8003fee:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003ff2:	7900      	ldrb	r0, [r0, #4]
 8003ff4:	0740      	lsls	r0, r0, #29
 8003ff6:	d50f      	bpl.n	8004018 <??zcl_persist_read_attrs_3>

08003ff8 <??zcl_persist_read_attrs_4>:
 8003ff8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d004      	beq.n	800400a <??zcl_persist_read_attrs_5>
 8004000:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004004:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004008:	d300      	bcc.n	800400c <??zcl_persist_read_attrs_6>

0800400a <??zcl_persist_read_attrs_5>:
 800400a:	e005      	b.n	8004018 <??zcl_persist_read_attrs_3>

0800400c <??zcl_persist_read_attrs_6>:
 800400c:	f119 0904 	adds.w	r9, r9, #4
 8004010:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004014:	eb10 0909 	adds.w	r9, r0, r9

08004018 <??zcl_persist_read_attrs_3>:
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 800401e:	4288      	cmp	r0, r1
 8004020:	d001      	beq.n	8004026 <??zcl_persist_read_attrs_7>
 8004022:	6824      	ldr	r4, [r4, #0]
 8004024:	e7e0      	b.n	8003fe8 <??zcl_persist_read_attrs_1>

08004026 <??zcl_persist_read_attrs_7>:
 8004026:	2400      	movs	r4, #0
 8004028:	e7de      	b.n	8003fe8 <??zcl_persist_read_attrs_1>

0800402a <??zcl_persist_read_attrs_2>:
 800402a:	4648      	mov	r0, r9
 800402c:	b280      	uxth	r0, r0
 800402e:	2800      	cmp	r0, #0
 8004030:	d101      	bne.n	8004036 <??zcl_persist_read_attrs_8>
 8004032:	2000      	movs	r0, #0
 8004034:	e0db      	b.n	80041ee <??zcl_persist_read_attrs_9>

08004036 <??zcl_persist_read_attrs_8>:
 8004036:	2300      	movs	r3, #0
 8004038:	a26e      	add	r2, pc, #440	@ (adr r2, 80041f4 <??DataTable5>)
 800403a:	4649      	mov	r1, r9
 800403c:	b289      	uxth	r1, r1
 800403e:	68b8      	ldr	r0, [r7, #8]
 8004040:	f00e f838 	bl	80120b4 <zb_heap_alloc>
 8004044:	0005      	movs	r5, r0
 8004046:	2d00      	cmp	r5, #0
 8004048:	d101      	bne.n	800404e <??zcl_persist_read_attrs_10>
 800404a:	2000      	movs	r0, #0
 800404c:	e0cf      	b.n	80041ee <??zcl_persist_read_attrs_9>

0800404e <??zcl_persist_read_attrs_10>:
 800404e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004050:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004054:	4288      	cmp	r0, r1
 8004056:	d001      	beq.n	800405c <??zcl_persist_read_attrs_11>
 8004058:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800405a:	e000      	b.n	800405e <??zcl_persist_read_attrs_12>

0800405c <??zcl_persist_read_attrs_11>:
 800405c:	2400      	movs	r4, #0

0800405e <??zcl_persist_read_attrs_12>:
 800405e:	2c00      	cmp	r4, #0
 8004060:	f000 80c1 	beq.w	80041e6 <??zcl_persist_read_attrs_13>
 8004064:	46a0      	mov	r8, r4
 8004066:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800406a:	7900      	ldrb	r0, [r0, #4]
 800406c:	0740      	lsls	r0, r0, #29
 800406e:	f140 80b1 	bpl.w	80041d4 <??zcl_persist_read_attrs_14>

08004072 <??zcl_persist_read_attrs_15>:
 8004072:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004076:	7900      	ldrb	r0, [r0, #4]
 8004078:	06c0      	lsls	r0, r0, #27
 800407a:	d566      	bpl.n	800414a <??zcl_persist_read_attrs_16>
 800407c:	4658      	mov	r0, fp
 800407e:	b280      	uxth	r0, r0
 8004080:	4428      	add	r0, r5
 8004082:	1d00      	adds	r0, r0, #4
 8004084:	9001      	str	r0, [sp, #4]
 8004086:	4649      	mov	r1, r9
 8004088:	b289      	uxth	r1, r1
 800408a:	4658      	mov	r0, fp
 800408c:	b280      	uxth	r0, r0
 800408e:	1a09      	subs	r1, r1, r0
 8004090:	1f08      	subs	r0, r1, #4
 8004092:	f8ad 0000 	strh.w	r0, [sp]
 8004096:	2020      	movs	r0, #32
 8004098:	9003      	str	r0, [sp, #12]
 800409a:	2000      	movs	r0, #0
 800409c:	9002      	str	r0, [sp, #8]
 800409e:	f10d 0a10 	add.w	sl, sp, #16
 80040a2:	9a02      	ldr	r2, [sp, #8]
 80040a4:	9903      	ldr	r1, [sp, #12]
 80040a6:	4650      	mov	r0, sl
 80040a8:	f003 fd5c 	bl	8007b64 <__aeabi_memset>
 80040ac:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80040b0:	9004      	str	r0, [sp, #16]
 80040b2:	2000      	movs	r0, #0
 80040b4:	f88d 0014 	strb.w	r0, [sp, #20]
 80040b8:	9801      	ldr	r0, [sp, #4]
 80040ba:	9006      	str	r0, [sp, #24]
 80040bc:	f8bd 0000 	ldrh.w	r0, [sp]
 80040c0:	9007      	str	r0, [sp, #28]
 80040c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80040c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80040c6:	aa04      	add	r2, sp, #16
 80040c8:	4641      	mov	r1, r8
 80040ca:	0038      	movs	r0, r7
 80040cc:	f7fd feb8 	bl	8001e40 <ZbZclAttrCallbackExec>
 80040d0:	4682      	mov	sl, r0
 80040d2:	4650      	mov	r0, sl
 80040d4:	b2c0      	uxtb	r0, r0
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d17c      	bne.n	80041d4 <??zcl_persist_read_attrs_14>

080040da <??zcl_persist_read_attrs_17>:
 80040da:	2300      	movs	r3, #0
 80040dc:	f8bd 2000 	ldrh.w	r2, [sp]
 80040e0:	9901      	ldr	r1, [sp, #4]
 80040e2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80040e6:	7880      	ldrb	r0, [r0, #2]
 80040e8:	f7fc ffa5 	bl	8001036 <ZbZclAttrParseLength>
 80040ec:	0006      	movs	r6, r0
 80040ee:	2e01      	cmp	r6, #1
 80040f0:	db02      	blt.n	80040f8 <??zcl_persist_read_attrs_18>
 80040f2:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 80040f6:	db00      	blt.n	80040fa <??zcl_persist_read_attrs_19>

080040f8 <??zcl_persist_read_attrs_18>:
 80040f8:	e06c      	b.n	80041d4 <??zcl_persist_read_attrs_14>

080040fa <??zcl_persist_read_attrs_19>:
 80040fa:	4648      	mov	r0, r9
 80040fc:	b280      	uxth	r0, r0
 80040fe:	4659      	mov	r1, fp
 8004100:	b289      	uxth	r1, r1
 8004102:	fa11 f186 	uxtah	r1, r1, r6
 8004106:	1d09      	adds	r1, r1, #4
 8004108:	4288      	cmp	r0, r1
 800410a:	d207      	bcs.n	800411c <??zcl_persist_read_attrs_20>
 800410c:	2300      	movs	r3, #0
 800410e:	a239      	add	r2, pc, #228	@ (adr r2, 80041f4 <??DataTable5>)
 8004110:	0029      	movs	r1, r5
 8004112:	68b8      	ldr	r0, [r7, #8]
 8004114:	f00d ffdd 	bl	80120d2 <zb_heap_free>
 8004118:	2000      	movs	r0, #0
 800411a:	e068      	b.n	80041ee <??zcl_persist_read_attrs_9>

0800411c <??zcl_persist_read_attrs_20>:
 800411c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004120:	8801      	ldrh	r1, [r0, #0]
 8004122:	4658      	mov	r0, fp
 8004124:	b280      	uxth	r0, r0
 8004126:	4428      	add	r0, r5
 8004128:	f002 ff3d 	bl	8006fa6 <putle16>
 800412c:	f11b 0b02 	adds.w	fp, fp, #2
 8004130:	0030      	movs	r0, r6
 8004132:	0001      	movs	r1, r0
 8004134:	b289      	uxth	r1, r1
 8004136:	4658      	mov	r0, fp
 8004138:	b280      	uxth	r0, r0
 800413a:	4428      	add	r0, r5
 800413c:	f002 ff33 	bl	8006fa6 <putle16>
 8004140:	f11b 0b02 	adds.w	fp, fp, #2
 8004144:	eb16 0b0b 	adds.w	fp, r6, fp
 8004148:	e044      	b.n	80041d4 <??zcl_persist_read_attrs_14>

0800414a <??zcl_persist_read_attrs_16>:
 800414a:	2300      	movs	r3, #0
 800414c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004150:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004154:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004158:	7880      	ldrb	r0, [r0, #2]
 800415a:	f7fc ff6c 	bl	8001036 <ZbZclAttrParseLength>
 800415e:	0006      	movs	r6, r0
 8004160:	2e01      	cmp	r6, #1
 8004162:	db02      	blt.n	800416a <??zcl_persist_read_attrs_21>
 8004164:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8004168:	db00      	blt.n	800416c <??zcl_persist_read_attrs_22>

0800416a <??zcl_persist_read_attrs_21>:
 800416a:	e033      	b.n	80041d4 <??zcl_persist_read_attrs_14>

0800416c <??zcl_persist_read_attrs_22>:
 800416c:	4648      	mov	r0, r9
 800416e:	b280      	uxth	r0, r0
 8004170:	4659      	mov	r1, fp
 8004172:	b289      	uxth	r1, r1
 8004174:	fa11 f186 	uxtah	r1, r1, r6
 8004178:	1d09      	adds	r1, r1, #4
 800417a:	4288      	cmp	r0, r1
 800417c:	d207      	bcs.n	800418e <??zcl_persist_read_attrs_23>
 800417e:	2300      	movs	r3, #0
 8004180:	a21c      	add	r2, pc, #112	@ (adr r2, 80041f4 <??DataTable5>)
 8004182:	0029      	movs	r1, r5
 8004184:	68b8      	ldr	r0, [r7, #8]
 8004186:	f00d ffa4 	bl	80120d2 <zb_heap_free>
 800418a:	2000      	movs	r0, #0
 800418c:	e02f      	b.n	80041ee <??zcl_persist_read_attrs_9>

0800418e <??zcl_persist_read_attrs_23>:
 800418e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004192:	8801      	ldrh	r1, [r0, #0]
 8004194:	4658      	mov	r0, fp
 8004196:	b280      	uxth	r0, r0
 8004198:	4428      	add	r0, r5
 800419a:	f002 ff04 	bl	8006fa6 <putle16>
 800419e:	f11b 0b02 	adds.w	fp, fp, #2
 80041a2:	0030      	movs	r0, r6
 80041a4:	0001      	movs	r1, r0
 80041a6:	b289      	uxth	r1, r1
 80041a8:	4658      	mov	r0, fp
 80041aa:	b280      	uxth	r0, r0
 80041ac:	4428      	add	r0, r5
 80041ae:	f002 fefa 	bl	8006fa6 <putle16>
 80041b2:	f11b 0b02 	adds.w	fp, fp, #2
 80041b6:	9601      	str	r6, [sp, #4]
 80041b8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80041bc:	9000      	str	r0, [sp, #0]
 80041be:	4658      	mov	r0, fp
 80041c0:	b280      	uxth	r0, r0
 80041c2:	eb05 0a00 	add.w	sl, r5, r0
 80041c6:	9a01      	ldr	r2, [sp, #4]
 80041c8:	9900      	ldr	r1, [sp, #0]
 80041ca:	4650      	mov	r0, sl
 80041cc:	f011 fca7 	bl	8015b1e <__aeabi_memcpy>
 80041d0:	eb16 0b0b 	adds.w	fp, r6, fp

080041d4 <??zcl_persist_read_attrs_14>:
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 80041da:	4288      	cmp	r0, r1
 80041dc:	d001      	beq.n	80041e2 <??zcl_persist_read_attrs_24>
 80041de:	6824      	ldr	r4, [r4, #0]
 80041e0:	e73d      	b.n	800405e <??zcl_persist_read_attrs_12>

080041e2 <??zcl_persist_read_attrs_24>:
 80041e2:	2400      	movs	r4, #0
 80041e4:	e73b      	b.n	800405e <??zcl_persist_read_attrs_12>

080041e6 <??zcl_persist_read_attrs_13>:
 80041e6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80041e8:	f8a0 b000 	strh.w	fp, [r0]
 80041ec:	0028      	movs	r0, r5

080041ee <??zcl_persist_read_attrs_9>:
 80041ee:	b00d      	add	sp, #52	@ 0x34
 80041f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080041f4 <??DataTable5>:
 80041f4:	0000 0000                                   ....

080041f8 <??DataTable5_1>:
 80041f8:	2877 0800                                   w(..

080041fc <??DataTable5_2>:
 80041fc:	22ed 0800                                   ."..

08004200 <??DataTable5_3>:
 8004200:	7d38 0801                                   8}..

08004204 <??DataTable5_4>:
 8004204:	3d95 0800                                   .=..

08004208 <zcl_persist_send_cache>:
 8004208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	b098      	sub	sp, #96	@ 0x60
 800420e:	0005      	movs	r5, r0
 8004210:	001e      	movs	r6, r3
 8004212:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8004214:	f05f 0900 	movs.w	r9, #0
 8004218:	0030      	movs	r0, r6
 800421a:	b280      	uxth	r0, r0
 800421c:	28ff      	cmp	r0, #255	@ 0xff
 800421e:	d101      	bne.n	8004224 <??zcl_persist_send_cache_0>
 8004220:	2085      	movs	r0, #133	@ 0x85
 8004222:	e0a1      	b.n	8004368 <??zcl_persist_send_cache_1>

08004224 <??zcl_persist_send_cache_0>:
 8004224:	0020      	movs	r0, r4
 8004226:	b280      	uxth	r0, r0
 8004228:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 800422c:	4288      	cmp	r0, r1
 800422e:	d301      	bcc.n	8004234 <??zcl_persist_send_cache_2>
 8004230:	2089      	movs	r0, #137	@ 0x89
 8004232:	e099      	b.n	8004368 <??zcl_persist_send_cache_1>

08004234 <??zcl_persist_send_cache_2>:
 8004234:	f05f 0a08 	movs.w	sl, #8
 8004238:	f05f 0b00 	movs.w	fp, #0
 800423c:	466f      	mov	r7, sp
 800423e:	465a      	mov	r2, fp
 8004240:	4651      	mov	r1, sl
 8004242:	0038      	movs	r0, r7
 8004244:	f003 fc8e 	bl	8007b64 <__aeabi_memset>
 8004248:	2001      	movs	r0, #1
 800424a:	f88d 0000 	strb.w	r0, [sp]
 800424e:	2001      	movs	r0, #1
 8004250:	f88d 0001 	strb.w	r0, [sp, #1]
 8004254:	2000      	movs	r0, #0
 8004256:	f88d 0002 	strb.w	r0, [sp, #2]
 800425a:	2001      	movs	r0, #1
 800425c:	f88d 0003 	strb.w	r0, [sp, #3]
 8004260:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 8004264:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004268:	f00d fd18 	bl	8011c9c <ZbZclGetNextSeqnum>
 800426c:	f88d 0006 	strb.w	r0, [sp, #6]
 8004270:	2000      	movs	r0, #0
 8004272:	f88d 0007 	strb.w	r0, [sp, #7]
 8004276:	2205      	movs	r2, #5
 8004278:	a904      	add	r1, sp, #16
 800427a:	4668      	mov	r0, sp
 800427c:	f002 f986 	bl	800658c <ZbZclAppendHeader>
 8004280:	0007      	movs	r7, r0
 8004282:	2f00      	cmp	r7, #0
 8004284:	d501      	bpl.n	800428a <??zcl_persist_send_cache_3>
 8004286:	2085      	movs	r0, #133	@ 0x85
 8004288:	e06e      	b.n	8004368 <??zcl_persist_send_cache_1>

0800428a <??zcl_persist_send_cache_3>:
 800428a:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 800428e:	a804      	add	r0, sp, #16
 8004290:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004294:	a812      	add	r0, sp, #72	@ 0x48
 8004296:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 800429a:	6047      	str	r7, [r0, #4]
 800429c:	f119 0901 	adds.w	r9, r9, #1
 80042a0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80042a4:	a802      	add	r0, sp, #8
 80042a6:	f002 fe7e 	bl	8006fa6 <putle16>
 80042aa:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 80042ae:	f88d 000a 	strb.w	r0, [sp, #10]
 80042b2:	a802      	add	r0, sp, #8
 80042b4:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80042b8:	2003      	movs	r0, #3
 80042ba:	a912      	add	r1, sp, #72	@ 0x48
 80042bc:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80042c0:	6048      	str	r0, [r1, #4]
 80042c2:	f119 0901 	adds.w	r9, r9, #1
 80042c6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80042c8:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80042cc:	0020      	movs	r0, r4
 80042ce:	b280      	uxth	r0, r0
 80042d0:	a912      	add	r1, sp, #72	@ 0x48
 80042d2:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80042d6:	6048      	str	r0, [r1, #4]
 80042d8:	f119 0901 	adds.w	r9, r9, #1
 80042dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80042e0:	f05f 0a30 	movs.w	sl, #48	@ 0x30
 80042e4:	f05f 0900 	movs.w	r9, #0
 80042e8:	f10d 0b18 	add.w	fp, sp, #24
 80042ec:	464a      	mov	r2, r9
 80042ee:	4651      	mov	r1, sl
 80042f0:	4658      	mov	r0, fp
 80042f2:	f003 fc37 	bl	8007b64 <__aeabi_memset>
 80042f6:	2003      	movs	r0, #3
 80042f8:	f88d 0018 	strb.w	r0, [sp, #24]
 80042fc:	0028      	movs	r0, r5
 80042fe:	f00c ff9b 	bl	8011238 <ZbExtendedAddress>
 8004302:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004306:	20ff      	movs	r0, #255	@ 0xff
 8004308:	f8ad 001a 	strh.w	r0, [sp, #26]
 800430c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004310:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 8004314:	f8ad 802a 	strh.w	r8, [sp, #42]	@ 0x2a
 8004318:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800431c:	a812      	add	r0, sp, #72	@ 0x48
 800431e:	900c      	str	r0, [sp, #48]	@ 0x30
 8004320:	9803      	ldr	r0, [sp, #12]
 8004322:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8004326:	2000      	movs	r0, #0
 8004328:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 800432c:	2000      	movs	r0, #0
 800432e:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 8004332:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004336:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800433a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 800433e:	f050 0008 	orrs.w	r0, r0, #8
 8004342:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004346:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 800434a:	f050 0004 	orrs.w	r0, r0, #4
 800434e:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004352:	2300      	movs	r3, #0
 8004354:	2200      	movs	r2, #0
 8004356:	a906      	add	r1, sp, #24
 8004358:	0028      	movs	r0, r5
 800435a:	f00d f883 	bl	8011464 <ZbApsdeDataReqCallback>
 800435e:	2800      	cmp	r0, #0
 8004360:	d001      	beq.n	8004366 <??zcl_persist_send_cache_4>
 8004362:	2001      	movs	r0, #1
 8004364:	e000      	b.n	8004368 <??zcl_persist_send_cache_1>

08004366 <??zcl_persist_send_cache_4>:
 8004366:	2000      	movs	r0, #0

08004368 <??zcl_persist_send_cache_1>:
 8004368:	b01b      	add	sp, #108	@ 0x6c
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004370 <zcl_attr_cb>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	0004      	movs	r4, r0
 8004376:	000d      	movs	r5, r1
 8004378:	7928      	ldrb	r0, [r5, #4]
 800437a:	2801      	cmp	r0, #1
 800437c:	d10f      	bne.n	800439e <??zcl_attr_cb_0>
 800437e:	69e8      	ldr	r0, [r5, #28]
 8004380:	9003      	str	r0, [sp, #12]
 8004382:	8a28      	ldrh	r0, [r5, #16]
 8004384:	9002      	str	r0, [sp, #8]
 8004386:	6968      	ldr	r0, [r5, #20]
 8004388:	9001      	str	r0, [sp, #4]
 800438a:	68e8      	ldr	r0, [r5, #12]
 800438c:	9000      	str	r0, [sp, #0]
 800438e:	68ab      	ldr	r3, [r5, #8]
 8004390:	6828      	ldr	r0, [r5, #0]
 8004392:	8802      	ldrh	r2, [r0, #0]
 8004394:	69a9      	ldr	r1, [r5, #24]
 8004396:	0020      	movs	r0, r4
 8004398:	f001 fb71 	bl	8005a7e <zcl_attr_write_cb>
 800439c:	e000      	b.n	80043a0 <??zcl_attr_cb_1>

0800439e <??zcl_attr_cb_0>:
 800439e:	2001      	movs	r0, #1

080043a0 <??zcl_attr_cb_1>:
 80043a0:	b005      	add	sp, #20
 80043a2:	bd30      	pop	{r4, r5, pc}

080043a4 <ZbZclColorServerAlloc>:
 80043a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	4688      	mov	r8, r1
 80043ac:	0014      	movs	r4, r2
 80043ae:	001d      	movs	r5, r3
 80043b0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80043b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	d101      	bne.n	80043be <??ZbZclColorServerAlloc_0>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e167      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043be <??ZbZclColorServerAlloc_0>:
 80043be:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80043c2:	0780      	lsls	r0, r0, #30
 80043c4:	d505      	bpl.n	80043d2 <??ZbZclColorServerAlloc_2>
 80043c6:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80043ca:	07c0      	lsls	r0, r0, #31
 80043cc:	d401      	bmi.n	80043d2 <??ZbZclColorServerAlloc_2>
 80043ce:	2000      	movs	r0, #0
 80043d0:	e15d      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043d2 <??ZbZclColorServerAlloc_2>:
 80043d2:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80043d6:	0700      	lsls	r0, r0, #28
 80043d8:	d401      	bmi.n	80043de <??ZbZclColorServerAlloc_3>
 80043da:	2000      	movs	r0, #0
 80043dc:	e157      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043de <??ZbZclColorServerAlloc_3>:
 80043de:	2c00      	cmp	r4, #0
 80043e0:	d016      	beq.n	8004410 <??ZbZclColorServerAlloc_4>
 80043e2:	0020      	movs	r0, r4
 80043e4:	f7ff fb50 	bl	8003a88 <ZbZclClusterGetClusterId>
 80043e8:	2806      	cmp	r0, #6
 80043ea:	d001      	beq.n	80043f0 <??ZbZclColorServerAlloc_5>
 80043ec:	2000      	movs	r0, #0
 80043ee:	e14e      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043f0 <??ZbZclColorServerAlloc_5>:
 80043f0:	0020      	movs	r0, r4
 80043f2:	f7ff fc51 	bl	8003c98 <ZbZclClusterGetDirection>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d001      	beq.n	80043fe <??ZbZclColorServerAlloc_6>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e147      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043fe <??ZbZclColorServerAlloc_6>:
 80043fe:	0020      	movs	r0, r4
 8004400:	f7ff fb3c 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8004404:	4641      	mov	r1, r8
 8004406:	b2c9      	uxtb	r1, r1
 8004408:	4288      	cmp	r0, r1
 800440a:	d001      	beq.n	8004410 <??ZbZclColorServerAlloc_4>
 800440c:	2000      	movs	r0, #0
 800440e:	e13e      	b.n	800468e <??ZbZclColorServerAlloc_1>

08004410 <??ZbZclColorServerAlloc_4>:
 8004410:	2000      	movs	r0, #0
 8004412:	9000      	str	r0, [sp, #0]
 8004414:	4643      	mov	r3, r8
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800441c:	21c0      	movs	r1, #192	@ 0xc0
 800441e:	9802      	ldr	r0, [sp, #8]
 8004420:	f7ff fcbb 	bl	8003d9a <ZbZclClusterAlloc>
 8004424:	0007      	movs	r7, r0
 8004426:	2f00      	cmp	r7, #0
 8004428:	d101      	bne.n	800442e <??ZbZclColorServerAlloc_7>
 800442a:	2000      	movs	r0, #0
 800442c:	e12f      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800442e <??ZbZclColorServerAlloc_7>:
 800442e:	2202      	movs	r2, #2
 8004430:	2300      	movs	r3, #0
 8004432:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8004436:	0038      	movs	r0, r7
 8004438:	f7fd fb13 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800443c:	f20f 206d 	addw	r0, pc, #621	@ 0x26d
 8004440:	6638      	str	r0, [r7, #96]	@ 0x60
 8004442:	f20f 4055 	addw	r0, pc, #1109	@ 0x455
 8004446:	6678      	str	r0, [r7, #100]	@ 0x64
 8004448:	f20f 7039 	addw	r0, pc, #1849	@ 0x739
 800444c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800444e:	f05f 0950 	movs.w	r9, #80	@ 0x50
 8004452:	9600      	str	r6, [sp, #0]
 8004454:	f117 0b70 	adds.w	fp, r7, #112	@ 0x70
 8004458:	464a      	mov	r2, r9
 800445a:	9900      	ldr	r1, [sp, #0]
 800445c:	4658      	mov	r0, fp
 800445e:	f011 fb5e 	bl	8015b1e <__aeabi_memcpy>
 8004462:	66fc      	str	r4, [r7, #108]	@ 0x6c
 8004464:	2205      	movs	r2, #5
 8004466:	498b      	ldr	r1, [pc, #556]	@ (8004694 <??DataTable1>)
 8004468:	0038      	movs	r0, r7
 800446a:	f7fd fc11 	bl	8001c90 <ZbZclAttrAppendList>
 800446e:	2800      	cmp	r0, #0
 8004470:	d004      	beq.n	800447c <??ZbZclColorServerAlloc_8>
 8004472:	0038      	movs	r0, r7
 8004474:	f7ff fd53 	bl	8003f1e <ZbZclClusterFree>
 8004478:	2000      	movs	r0, #0
 800447a:	e108      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800447c <??ZbZclColorServerAlloc_8>:
 800447c:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004480:	07c0      	lsls	r0, r0, #31
 8004482:	d50b      	bpl.n	800449c <??ZbZclColorServerAlloc_9>
 8004484:	2202      	movs	r2, #2
 8004486:	4984      	ldr	r1, [pc, #528]	@ (8004698 <??DataTable1_1>)
 8004488:	0038      	movs	r0, r7
 800448a:	f7fd fc01 	bl	8001c90 <ZbZclAttrAppendList>
 800448e:	2800      	cmp	r0, #0
 8004490:	d004      	beq.n	800449c <??ZbZclColorServerAlloc_9>
 8004492:	0038      	movs	r0, r7
 8004494:	f7ff fd43 	bl	8003f1e <ZbZclClusterFree>
 8004498:	2000      	movs	r0, #0
 800449a:	e0f8      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800449c <??ZbZclColorServerAlloc_9>:
 800449c:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80044a0:	0780      	lsls	r0, r0, #30
 80044a2:	d50b      	bpl.n	80044bc <??ZbZclColorServerAlloc_10>
 80044a4:	2201      	movs	r2, #1
 80044a6:	497d      	ldr	r1, [pc, #500]	@ (800469c <??DataTable1_2>)
 80044a8:	0038      	movs	r0, r7
 80044aa:	f7fd fbf1 	bl	8001c90 <ZbZclAttrAppendList>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d004      	beq.n	80044bc <??ZbZclColorServerAlloc_10>
 80044b2:	0038      	movs	r0, r7
 80044b4:	f7ff fd33 	bl	8003f1e <ZbZclClusterFree>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e0e8      	b.n	800468e <??ZbZclColorServerAlloc_1>

080044bc <??ZbZclColorServerAlloc_10>:
 80044bc:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80044c0:	0700      	lsls	r0, r0, #28
 80044c2:	d50b      	bpl.n	80044dc <??ZbZclColorServerAlloc_11>
 80044c4:	2202      	movs	r2, #2
 80044c6:	4976      	ldr	r1, [pc, #472]	@ (80046a0 <??DataTable1_3>)
 80044c8:	0038      	movs	r0, r7
 80044ca:	f7fd fbe1 	bl	8001c90 <ZbZclAttrAppendList>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d004      	beq.n	80044dc <??ZbZclColorServerAlloc_11>
 80044d2:	0038      	movs	r0, r7
 80044d4:	f7ff fd23 	bl	8003f1e <ZbZclClusterFree>
 80044d8:	2000      	movs	r0, #0
 80044da:	e0d8      	b.n	800468e <??ZbZclColorServerAlloc_1>

080044dc <??ZbZclColorServerAlloc_11>:
 80044dc:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80044e0:	06c0      	lsls	r0, r0, #27
 80044e2:	d50b      	bpl.n	80044fc <??ZbZclColorServerAlloc_12>
 80044e4:	2205      	movs	r2, #5
 80044e6:	496f      	ldr	r1, [pc, #444]	@ (80046a4 <??DataTable1_4>)
 80044e8:	0038      	movs	r0, r7
 80044ea:	f7fd fbd1 	bl	8001c90 <ZbZclAttrAppendList>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d004      	beq.n	80044fc <??ZbZclColorServerAlloc_12>
 80044f2:	0038      	movs	r0, r7
 80044f4:	f7ff fd13 	bl	8003f1e <ZbZclClusterFree>
 80044f8:	2000      	movs	r0, #0
 80044fa:	e0c8      	b.n	800468e <??ZbZclColorServerAlloc_1>

080044fc <??ZbZclColorServerAlloc_12>:
 80044fc:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004500:	0740      	lsls	r0, r0, #29
 8004502:	d50b      	bpl.n	800451c <??ZbZclColorServerAlloc_13>
 8004504:	2205      	movs	r2, #5
 8004506:	4968      	ldr	r1, [pc, #416]	@ (80046a8 <??DataTable1_5>)
 8004508:	0038      	movs	r0, r7
 800450a:	f7fd fbc1 	bl	8001c90 <ZbZclAttrAppendList>
 800450e:	2800      	cmp	r0, #0
 8004510:	d004      	beq.n	800451c <??ZbZclColorServerAlloc_13>
 8004512:	0038      	movs	r0, r7
 8004514:	f7ff fd03 	bl	8003f1e <ZbZclClusterFree>
 8004518:	2000      	movs	r0, #0
 800451a:	e0b8      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800451c <??ZbZclColorServerAlloc_13>:
 800451c:	2d00      	cmp	r5, #0
 800451e:	d00b      	beq.n	8004538 <??ZbZclColorServerAlloc_14>
 8004520:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004522:	0029      	movs	r1, r5
 8004524:	0038      	movs	r0, r7
 8004526:	f7fd fbb3 	bl	8001c90 <ZbZclAttrAppendList>
 800452a:	2800      	cmp	r0, #0
 800452c:	d004      	beq.n	8004538 <??ZbZclColorServerAlloc_14>
 800452e:	0038      	movs	r0, r7
 8004530:	f7ff fcf5 	bl	8003f1e <ZbZclClusterFree>
 8004534:	2000      	movs	r0, #0
 8004536:	e0aa      	b.n	800468e <??ZbZclColorServerAlloc_1>

08004538 <??ZbZclColorServerAlloc_14>:
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	210f      	movs	r1, #15
 800453e:	0038      	movs	r0, r7
 8004540:	f7fd fa8f 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004544:	2201      	movs	r2, #1
 8004546:	2300      	movs	r3, #0
 8004548:	2108      	movs	r1, #8
 800454a:	0038      	movs	r0, r7
 800454c:	f7fd fa89 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004550:	f244 090a 	movw	r9, #16394	@ 0x400a
 8004554:	2200      	movs	r2, #0
 8004556:	2300      	movs	r3, #0
 8004558:	4649      	mov	r1, r9
 800455a:	0038      	movs	r0, r7
 800455c:	f7fd fa81 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004560:	2201      	movs	r2, #1
 8004562:	2300      	movs	r3, #0
 8004564:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004568:	0038      	movs	r0, r7
 800456a:	f7fd fa7a 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800456e:	2200      	movs	r2, #0
 8004570:	2300      	movs	r3, #0
 8004572:	2110      	movs	r1, #16
 8004574:	0038      	movs	r0, r7
 8004576:	f7fd fa74 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800457a:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 800457e:	07c0      	lsls	r0, r0, #31
 8004580:	d50b      	bpl.n	800459a <??ZbZclColorServerAlloc_15>
 8004582:	2200      	movs	r2, #0
 8004584:	2300      	movs	r3, #0
 8004586:	2100      	movs	r1, #0
 8004588:	0038      	movs	r0, r7
 800458a:	f7fd fa6a 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800458e:	2200      	movs	r2, #0
 8004590:	2300      	movs	r3, #0
 8004592:	2101      	movs	r1, #1
 8004594:	0038      	movs	r0, r7
 8004596:	f7fd fa64 	bl	8001a62 <ZbZclAttrIntegerWrite>

0800459a <??ZbZclColorServerAlloc_15>:
 800459a:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 800459e:	0700      	lsls	r0, r0, #28
 80045a0:	d50d      	bpl.n	80045be <??ZbZclColorServerAlloc_16>
 80045a2:	f246 126b 	movw	r2, #24939	@ 0x616b
 80045a6:	2300      	movs	r3, #0
 80045a8:	2103      	movs	r1, #3
 80045aa:	0038      	movs	r0, r7
 80045ac:	f7fd fa59 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045b0:	f246 027d 	movw	r2, #24701	@ 0x607d
 80045b4:	2300      	movs	r3, #0
 80045b6:	2104      	movs	r1, #4
 80045b8:	0038      	movs	r0, r7
 80045ba:	f7fd fa52 	bl	8001a62 <ZbZclAttrIntegerWrite>

080045be <??ZbZclColorServerAlloc_16>:
 80045be:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80045c2:	06c0      	lsls	r0, r0, #27
 80045c4:	d523      	bpl.n	800460e <??ZbZclColorServerAlloc_17>
 80045c6:	22fa      	movs	r2, #250	@ 0xfa
 80045c8:	2300      	movs	r3, #0
 80045ca:	2107      	movs	r1, #7
 80045cc:	0038      	movs	r0, r7
 80045ce:	f7fd fa48 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	f244 010b 	movw	r1, #16395	@ 0x400b
 80045da:	0038      	movs	r0, r7
 80045dc:	f7fd fa41 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045e0:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80045e4:	2300      	movs	r3, #0
 80045e6:	f244 010c 	movw	r1, #16396	@ 0x400c
 80045ea:	0038      	movs	r0, r7
 80045ec:	f7fd fa39 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045f0:	2200      	movs	r2, #0
 80045f2:	2300      	movs	r3, #0
 80045f4:	f244 010d 	movw	r1, #16397	@ 0x400d
 80045f8:	0038      	movs	r0, r7
 80045fa:	f7fd fa32 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045fe:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8004602:	2300      	movs	r3, #0
 8004604:	f244 0110 	movw	r1, #16400	@ 0x4010
 8004608:	0038      	movs	r0, r7
 800460a:	f7fd fa2a 	bl	8001a62 <ZbZclAttrIntegerWrite>

0800460e <??ZbZclColorServerAlloc_17>:
 800460e:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004612:	0740      	lsls	r0, r0, #29
 8004614:	d523      	bpl.n	800465e <??ZbZclColorServerAlloc_18>
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800461e:	0038      	movs	r0, r7
 8004620:	f7fd fa1f 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004624:	2219      	movs	r2, #25
 8004626:	2300      	movs	r3, #0
 8004628:	f244 0104 	movw	r1, #16388	@ 0x4004
 800462c:	0038      	movs	r0, r7
 800462e:	f7fd fa18 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004632:	f44f 520c 	mov.w	r2, #8960	@ 0x2300
 8004636:	2300      	movs	r3, #0
 8004638:	f244 0105 	movw	r1, #16389	@ 0x4005
 800463c:	0038      	movs	r0, r7
 800463e:	f7fd fa10 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004642:	2200      	movs	r2, #0
 8004644:	2300      	movs	r3, #0
 8004646:	f244 0103 	movw	r1, #16387	@ 0x4003
 800464a:	0038      	movs	r0, r7
 800464c:	f7fd fa09 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004650:	2200      	movs	r2, #0
 8004652:	2300      	movs	r3, #0
 8004654:	f244 0106 	movw	r1, #16390	@ 0x4006
 8004658:	0038      	movs	r0, r7
 800465a:	f7fd fa02 	bl	8001a62 <ZbZclAttrIntegerWrite>

0800465e <??ZbZclColorServerAlloc_18>:
 800465e:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004662:	0780      	lsls	r0, r0, #30
 8004664:	d506      	bpl.n	8004674 <??ZbZclColorServerAlloc_19>
 8004666:	2200      	movs	r2, #0
 8004668:	2300      	movs	r3, #0
 800466a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800466e:	0038      	movs	r0, r7
 8004670:	f7fd f9f7 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004674 <??ZbZclColorServerAlloc_19>:
 8004674:	f8c7 a054 	str.w	sl, [r7, #84]	@ 0x54
 8004678:	f896 204c 	ldrb.w	r2, [r6, #76]	@ 0x4c
 800467c:	2300      	movs	r3, #0
 800467e:	4649      	mov	r1, r9
 8004680:	0038      	movs	r0, r7
 8004682:	f7fd f9ee 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004686:	0038      	movs	r0, r7
 8004688:	f7ff fc17 	bl	8003eba <ZbZclClusterAttach>
 800468c:	0038      	movs	r0, r7

0800468e <??ZbZclColorServerAlloc_1>:
 800468e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004694 <??DataTable1>:
 8004694:	7d60 0801                                   `}..

08004698 <??DataTable1_1>:
 8004698:	7e28 0801                                   (~..

0800469c <??DataTable1_2>:
 800469c:	7e78 0801                                   x~..

080046a0 <??DataTable1_3>:
 80046a0:	7ea0 0801                                   .~..

080046a4 <??DataTable1_4>:
 80046a4:	7ef0 0801                                   .~..

080046a8 <??DataTable1_5>:
 80046a8:	7fb8 0801                                   ....

080046ac <zcl_color_server_get_scene_data>:
 80046ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80046b0:	0004      	movs	r4, r0
 80046b2:	000d      	movs	r5, r1
 80046b4:	0016      	movs	r6, r2
 80046b6:	0027      	movs	r7, r4
 80046b8:	f05f 0803 	movs.w	r8, #3
 80046bc:	2000      	movs	r0, #0
 80046be:	9001      	str	r0, [sp, #4]
 80046c0:	2002      	movs	r0, #2
 80046c2:	9000      	str	r0, [sp, #0]
 80046c4:	f10d 030a 	add.w	r3, sp, #10
 80046c8:	2200      	movs	r2, #0
 80046ca:	2103      	movs	r1, #3
 80046cc:	0020      	movs	r0, r4
 80046ce:	f7fb fe8a 	bl	80003e6 <ZbZclAttrRead>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d001      	beq.n	80046da <??zcl_color_server_get_scene_data_0>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e0db      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

080046da <??zcl_color_server_get_scene_data_0>:
 80046da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80046de:	4640      	mov	r0, r8
 80046e0:	b2c0      	uxtb	r0, r0
 80046e2:	4428      	add	r0, r5
 80046e4:	f002 fc5f 	bl	8006fa6 <putle16>
 80046e8:	f118 0802 	adds.w	r8, r8, #2
 80046ec:	2000      	movs	r0, #0
 80046ee:	9001      	str	r0, [sp, #4]
 80046f0:	2002      	movs	r0, #2
 80046f2:	9000      	str	r0, [sp, #0]
 80046f4:	f10d 030a 	add.w	r3, sp, #10
 80046f8:	2200      	movs	r2, #0
 80046fa:	2104      	movs	r1, #4
 80046fc:	0020      	movs	r0, r4
 80046fe:	f7fb fe72 	bl	80003e6 <ZbZclAttrRead>
 8004702:	2800      	cmp	r0, #0
 8004704:	d001      	beq.n	800470a <??zcl_color_server_get_scene_data_2>
 8004706:	2000      	movs	r0, #0
 8004708:	e0c3      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

0800470a <??zcl_color_server_get_scene_data_2>:
 800470a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800470e:	4640      	mov	r0, r8
 8004710:	b2c0      	uxtb	r0, r0
 8004712:	4428      	add	r0, r5
 8004714:	f002 fc47 	bl	8006fa6 <putle16>
 8004718:	f118 0802 	adds.w	r8, r8, #2
 800471c:	f897 00bc 	ldrb.w	r0, [r7, #188]	@ 0xbc
 8004720:	0780      	lsls	r0, r0, #30
 8004722:	d50f      	bpl.n	8004744 <??zcl_color_server_get_scene_data_3>
 8004724:	2000      	movs	r0, #0
 8004726:	9001      	str	r0, [sp, #4]
 8004728:	2002      	movs	r0, #2
 800472a:	9000      	str	r0, [sp, #0]
 800472c:	f10d 030a 	add.w	r3, sp, #10
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004736:	0020      	movs	r0, r4
 8004738:	f7fb fe55 	bl	80003e6 <ZbZclAttrRead>
 800473c:	2800      	cmp	r0, #0
 800473e:	d004      	beq.n	800474a <??zcl_color_server_get_scene_data_4>
 8004740:	2000      	movs	r0, #0
 8004742:	e0a6      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004744 <??zcl_color_server_get_scene_data_3>:
 8004744:	2000      	movs	r0, #0
 8004746:	f8ad 000a 	strh.w	r0, [sp, #10]

0800474a <??zcl_color_server_get_scene_data_4>:
 800474a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800474e:	4640      	mov	r0, r8
 8004750:	b2c0      	uxtb	r0, r0
 8004752:	4428      	add	r0, r5
 8004754:	f002 fc27 	bl	8006fa6 <putle16>
 8004758:	f118 0802 	adds.w	r8, r8, #2
 800475c:	2000      	movs	r0, #0
 800475e:	9001      	str	r0, [sp, #4]
 8004760:	2001      	movs	r0, #1
 8004762:	9000      	str	r0, [sp, #0]
 8004764:	ab02      	add	r3, sp, #8
 8004766:	2200      	movs	r2, #0
 8004768:	2101      	movs	r1, #1
 800476a:	0020      	movs	r0, r4
 800476c:	f7fb fe3b 	bl	80003e6 <ZbZclAttrRead>
 8004770:	2800      	cmp	r0, #0
 8004772:	d001      	beq.n	8004778 <??zcl_color_server_get_scene_data_5>
 8004774:	2000      	movs	r0, #0
 8004776:	e08c      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004778 <??zcl_color_server_get_scene_data_5>:
 8004778:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800477c:	4641      	mov	r1, r8
 800477e:	b2c9      	uxtb	r1, r1
 8004780:	5468      	strb	r0, [r5, r1]
 8004782:	f118 0801 	adds.w	r8, r8, #1
 8004786:	f897 00bc 	ldrb.w	r0, [r7, #188]	@ 0xbc
 800478a:	0740      	lsls	r0, r0, #29
 800478c:	d545      	bpl.n	800481a <??zcl_color_server_get_scene_data_6>
 800478e:	2000      	movs	r0, #0
 8004790:	9001      	str	r0, [sp, #4]
 8004792:	2001      	movs	r0, #1
 8004794:	9000      	str	r0, [sp, #0]
 8004796:	ab02      	add	r3, sp, #8
 8004798:	2200      	movs	r2, #0
 800479a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800479e:	0020      	movs	r0, r4
 80047a0:	f7fb fe21 	bl	80003e6 <ZbZclAttrRead>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d001      	beq.n	80047ac <??zcl_color_server_get_scene_data_7>
 80047a8:	2000      	movs	r0, #0
 80047aa:	e072      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

080047ac <??zcl_color_server_get_scene_data_7>:
 80047ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80047b0:	4641      	mov	r1, r8
 80047b2:	b2c9      	uxtb	r1, r1
 80047b4:	5468      	strb	r0, [r5, r1]
 80047b6:	f118 0801 	adds.w	r8, r8, #1
 80047ba:	2000      	movs	r0, #0
 80047bc:	9001      	str	r0, [sp, #4]
 80047be:	2001      	movs	r0, #1
 80047c0:	9000      	str	r0, [sp, #0]
 80047c2:	ab02      	add	r3, sp, #8
 80047c4:	2200      	movs	r2, #0
 80047c6:	f244 0103 	movw	r1, #16387	@ 0x4003
 80047ca:	0020      	movs	r0, r4
 80047cc:	f7fb fe0b 	bl	80003e6 <ZbZclAttrRead>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d001      	beq.n	80047d8 <??zcl_color_server_get_scene_data_8>
 80047d4:	2000      	movs	r0, #0
 80047d6:	e05c      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

080047d8 <??zcl_color_server_get_scene_data_8>:
 80047d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80047dc:	4641      	mov	r1, r8
 80047de:	b2c9      	uxtb	r1, r1
 80047e0:	5468      	strb	r0, [r5, r1]
 80047e2:	f118 0801 	adds.w	r8, r8, #1
 80047e6:	2000      	movs	r0, #0
 80047e8:	9001      	str	r0, [sp, #4]
 80047ea:	2002      	movs	r0, #2
 80047ec:	9000      	str	r0, [sp, #0]
 80047ee:	f10d 030a 	add.w	r3, sp, #10
 80047f2:	2200      	movs	r2, #0
 80047f4:	f244 0104 	movw	r1, #16388	@ 0x4004
 80047f8:	0020      	movs	r0, r4
 80047fa:	f7fb fdf4 	bl	80003e6 <ZbZclAttrRead>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d001      	beq.n	8004806 <??zcl_color_server_get_scene_data_9>
 8004802:	2000      	movs	r0, #0
 8004804:	e045      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004806 <??zcl_color_server_get_scene_data_9>:
 8004806:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800480a:	4640      	mov	r0, r8
 800480c:	b2c0      	uxtb	r0, r0
 800480e:	4428      	add	r0, r5
 8004810:	f002 fbc9 	bl	8006fa6 <putle16>
 8004814:	f118 0802 	adds.w	r8, r8, #2
 8004818:	e013      	b.n	8004842 <??zcl_color_server_get_scene_data_10>

0800481a <??zcl_color_server_get_scene_data_6>:
 800481a:	2000      	movs	r0, #0
 800481c:	4641      	mov	r1, r8
 800481e:	b2c9      	uxtb	r1, r1
 8004820:	5468      	strb	r0, [r5, r1]
 8004822:	f118 0801 	adds.w	r8, r8, #1
 8004826:	2000      	movs	r0, #0
 8004828:	4641      	mov	r1, r8
 800482a:	b2c9      	uxtb	r1, r1
 800482c:	5468      	strb	r0, [r5, r1]
 800482e:	f118 0801 	adds.w	r8, r8, #1
 8004832:	2100      	movs	r1, #0
 8004834:	4640      	mov	r0, r8
 8004836:	b2c0      	uxtb	r0, r0
 8004838:	4428      	add	r0, r5
 800483a:	f002 fbb4 	bl	8006fa6 <putle16>
 800483e:	f118 0802 	adds.w	r8, r8, #2

08004842 <??zcl_color_server_get_scene_data_10>:
 8004842:	f897 00bc 	ldrb.w	r0, [r7, #188]	@ 0xbc
 8004846:	06c0      	lsls	r0, r0, #27
 8004848:	d50e      	bpl.n	8004868 <??zcl_color_server_get_scene_data_11>
 800484a:	2000      	movs	r0, #0
 800484c:	9001      	str	r0, [sp, #4]
 800484e:	2002      	movs	r0, #2
 8004850:	9000      	str	r0, [sp, #0]
 8004852:	f10d 030a 	add.w	r3, sp, #10
 8004856:	2200      	movs	r2, #0
 8004858:	2107      	movs	r1, #7
 800485a:	0020      	movs	r0, r4
 800485c:	f7fb fdc3 	bl	80003e6 <ZbZclAttrRead>
 8004860:	2800      	cmp	r0, #0
 8004862:	d004      	beq.n	800486e <??zcl_color_server_get_scene_data_12>
 8004864:	2000      	movs	r0, #0
 8004866:	e014      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004868 <??zcl_color_server_get_scene_data_11>:
 8004868:	2000      	movs	r0, #0
 800486a:	f8ad 000a 	strh.w	r0, [sp, #10]

0800486e <??zcl_color_server_get_scene_data_12>:
 800486e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8004872:	4640      	mov	r0, r8
 8004874:	b2c0      	uxtb	r0, r0
 8004876:	4428      	add	r0, r5
 8004878:	f002 fb95 	bl	8006fa6 <putle16>
 800487c:	f118 0802 	adds.w	r8, r8, #2
 8004880:	89a1      	ldrh	r1, [r4, #12]
 8004882:	0028      	movs	r0, r5
 8004884:	f002 fb8f 	bl	8006fa6 <putle16>
 8004888:	f1b8 0003 	subs.w	r0, r8, #3
 800488c:	70a8      	strb	r0, [r5, #2]
 800488e:	4640      	mov	r0, r8
 8004890:	b2c0      	uxtb	r0, r0

08004892 <??zcl_color_server_get_scene_data_1>:
 8004892:	b004      	add	sp, #16
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004898 <zcl_color_server_set_scene_data>:
 8004898:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	b08c      	sub	sp, #48	@ 0x30
 800489e:	4680      	mov	r8, r0
 80048a0:	000c      	movs	r4, r1
 80048a2:	001d      	movs	r5, r3
 80048a4:	4646      	mov	r6, r8
 80048a6:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 80048aa:	280d      	cmp	r0, #13
 80048ac:	d001      	beq.n	80048b2 <??zcl_color_server_set_scene_data_0>
 80048ae:	2087      	movs	r0, #135	@ 0x87
 80048b0:	e10b      	b.n	8004aca <??zcl_color_server_set_scene_data_1>

080048b2 <??zcl_color_server_set_scene_data_0>:
 80048b2:	0020      	movs	r0, r4
 80048b4:	f002 fb2b 	bl	8006f0e <pletoh16>
 80048b8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80048bc:	1ca0      	adds	r0, r4, #2
 80048be:	f002 fb26 	bl	8006f0e <pletoh16>
 80048c2:	f8ad 001c 	strh.w	r0, [sp, #28]
 80048c6:	1d20      	adds	r0, r4, #4
 80048c8:	f002 fb21 	bl	8006f0e <pletoh16>
 80048cc:	0007      	movs	r7, r0
 80048ce:	79a0      	ldrb	r0, [r4, #6]
 80048d0:	f88d 000a 	strb.w	r0, [sp, #10]
 80048d4:	79e0      	ldrb	r0, [r4, #7]
 80048d6:	f88d 0009 	strb.w	r0, [sp, #9]
 80048da:	7a20      	ldrb	r0, [r4, #8]
 80048dc:	f88d 0008 	strb.w	r0, [sp, #8]
 80048e0:	f114 0009 	adds.w	r0, r4, #9
 80048e4:	f002 fb13 	bl	8006f0e <pletoh16>
 80048e8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80048ec:	f114 000b 	adds.w	r0, r4, #11
 80048f0:	f002 fb0d 	bl	8006f0e <pletoh16>
 80048f4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80048f8:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 80048fc:	0700      	lsls	r0, r0, #28
 80048fe:	d535      	bpl.n	800496c <??zcl_color_server_set_scene_data_2>
 8004900:	f8d6 008c 	ldr.w	r0, [r6, #140]	@ 0x8c
 8004904:	2800      	cmp	r0, #0
 8004906:	d01d      	beq.n	8004944 <??zcl_color_server_set_scene_data_3>
 8004908:	f05f 0908 	movs.w	r9, #8
 800490c:	f05f 0a00 	movs.w	sl, #0
 8004910:	f10d 0b20 	add.w	fp, sp, #32
 8004914:	4652      	mov	r2, sl
 8004916:	4649      	mov	r1, r9
 8004918:	4658      	mov	r0, fp
 800491a:	f003 f923 	bl	8007b64 <__aeabi_memset>
 800491e:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8004922:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004926:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800492a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800492e:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
 8004932:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8004936:	2200      	movs	r2, #0
 8004938:	a908      	add	r1, sp, #32
 800493a:	4640      	mov	r0, r8
 800493c:	f8d6 c08c 	ldr.w	ip, [r6, #140]	@ 0x8c
 8004940:	47e0      	blx	ip
 8004942:	e013      	b.n	800496c <??zcl_color_server_set_scene_data_2>

08004944 <??zcl_color_server_set_scene_data_3>:
 8004944:	2002      	movs	r0, #2
 8004946:	9001      	str	r0, [sp, #4]
 8004948:	2002      	movs	r0, #2
 800494a:	9000      	str	r0, [sp, #0]
 800494c:	0023      	movs	r3, r4
 800494e:	2203      	movs	r2, #3
 8004950:	2100      	movs	r1, #0
 8004952:	4640      	mov	r0, r8
 8004954:	f7fb fe99 	bl	800068a <ZbZclAttrWrite>
 8004958:	2002      	movs	r0, #2
 800495a:	9001      	str	r0, [sp, #4]
 800495c:	2002      	movs	r0, #2
 800495e:	9000      	str	r0, [sp, #0]
 8004960:	1ca3      	adds	r3, r4, #2
 8004962:	2204      	movs	r2, #4
 8004964:	2100      	movs	r1, #0
 8004966:	4640      	mov	r0, r8
 8004968:	f7fb fe8f 	bl	800068a <ZbZclAttrWrite>

0800496c <??zcl_color_server_set_scene_data_2>:
 800496c:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 8004970:	0780      	lsls	r0, r0, #30
 8004972:	d526      	bpl.n	80049c2 <??zcl_color_server_set_scene_data_4>
 8004974:	f8d6 00a8 	ldr.w	r0, [r6, #168]	@ 0xa8
 8004978:	2800      	cmp	r0, #0
 800497a:	d01a      	beq.n	80049b2 <??zcl_color_server_set_scene_data_5>
 800497c:	f05f 0908 	movs.w	r9, #8
 8004980:	f05f 0a00 	movs.w	sl, #0
 8004984:	46eb      	mov	fp, sp
 8004986:	4652      	mov	r2, sl
 8004988:	4649      	mov	r1, r9
 800498a:	4658      	mov	r0, fp
 800498c:	f003 f8ea 	bl	8007b64 <__aeabi_memset>
 8004990:	f8ad 7000 	strh.w	r7, [sp]
 8004994:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004998:	f88d 0002 	strb.w	r0, [sp, #2]
 800499c:	f8ad 5004 	strh.w	r5, [sp, #4]
 80049a0:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 80049a4:	2200      	movs	r2, #0
 80049a6:	4669      	mov	r1, sp
 80049a8:	4640      	mov	r0, r8
 80049aa:	f8d6 c0a8 	ldr.w	ip, [r6, #168]	@ 0xa8
 80049ae:	47e0      	blx	ip
 80049b0:	e007      	b.n	80049c2 <??zcl_color_server_set_scene_data_4>

080049b2 <??zcl_color_server_set_scene_data_5>:
 80049b2:	003a      	movs	r2, r7
 80049b4:	b292      	uxth	r2, r2
 80049b6:	2300      	movs	r3, #0
 80049b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049bc:	4640      	mov	r0, r8
 80049be:	f7fd f850 	bl	8001a62 <ZbZclAttrIntegerWrite>

080049c2 <??zcl_color_server_set_scene_data_4>:
 80049c2:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 80049c6:	0740      	lsls	r0, r0, #29
 80049c8:	d555      	bpl.n	8004a76 <??zcl_color_server_set_scene_data_6>
 80049ca:	f8d6 00ac 	ldr.w	r0, [r6, #172]	@ 0xac
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d039      	beq.n	8004a46 <??zcl_color_server_set_scene_data_7>
 80049d2:	f05f 090a 	movs.w	r9, #10
 80049d6:	f05f 0a00 	movs.w	sl, #0
 80049da:	f10d 0b10 	add.w	fp, sp, #16
 80049de:	4652      	mov	r2, sl
 80049e0:	4649      	mov	r1, r9
 80049e2:	4658      	mov	r0, fp
 80049e4:	f003 f8be 	bl	8007b64 <__aeabi_memset>
 80049e8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80049ec:	f050 0001 	orrs.w	r0, r0, #1
 80049f0:	f88d 0010 	strb.w	r0, [sp, #16]
 80049f4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80049f8:	f050 0002 	orrs.w	r0, r0, #2
 80049fc:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a00:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8004a04:	f050 0004 	orrs.w	r0, r0, #4
 8004a08:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a0c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8004a10:	f050 0008 	orrs.w	r0, r0, #8
 8004a14:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a18:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004a1c:	f88d 0011 	strb.w	r0, [sp, #17]
 8004a20:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004a24:	f88d 0012 	strb.w	r0, [sp, #18]
 8004a28:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8004a2c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004a30:	f8ad 7016 	strh.w	r7, [sp, #22]
 8004a34:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8004a38:	2200      	movs	r2, #0
 8004a3a:	a904      	add	r1, sp, #16
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	f8d6 c0ac 	ldr.w	ip, [r6, #172]	@ 0xac
 8004a42:	47e0      	blx	ip
 8004a44:	e017      	b.n	8004a76 <??zcl_color_server_set_scene_data_6>

08004a46 <??zcl_color_server_set_scene_data_7>:
 8004a46:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004a50:	4640      	mov	r0, r8
 8004a52:	f7fd f806 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004a56:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f244 0103 	movw	r1, #16387	@ 0x4003
 8004a60:	4640      	mov	r0, r8
 8004a62:	f7fc fffe 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004a66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f244 0104 	movw	r1, #16388	@ 0x4004
 8004a70:	4640      	mov	r0, r8
 8004a72:	f7fc fff6 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004a76 <??zcl_color_server_set_scene_data_6>:
 8004a76:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 8004a7a:	06c0      	lsls	r0, r0, #27
 8004a7c:	d524      	bpl.n	8004ac8 <??zcl_color_server_set_scene_data_8>
 8004a7e:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d019      	beq.n	8004aba <??zcl_color_server_set_scene_data_9>
 8004a86:	f05f 0906 	movs.w	r9, #6
 8004a8a:	f05f 0a00 	movs.w	sl, #0
 8004a8e:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 8004a92:	4652      	mov	r2, sl
 8004a94:	4649      	mov	r1, r9
 8004a96:	4658      	mov	r0, fp
 8004a98:	f003 f864 	bl	8007b64 <__aeabi_memset>
 8004a9c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8004aa0:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 8004aa4:	f8ad 502a 	strh.w	r5, [sp, #42]	@ 0x2a
 8004aa8:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8004aac:	2200      	movs	r2, #0
 8004aae:	a90a      	add	r1, sp, #40	@ 0x28
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	f8d6 c098 	ldr.w	ip, [r6, #152]	@ 0x98
 8004ab6:	47e0      	blx	ip
 8004ab8:	e006      	b.n	8004ac8 <??zcl_color_server_set_scene_data_8>

08004aba <??zcl_color_server_set_scene_data_9>:
 8004aba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2107      	movs	r1, #7
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	f7fc ffcd 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004ac8 <??zcl_color_server_set_scene_data_8>:
 8004ac8:	2000      	movs	r0, #0

08004aca <??zcl_color_server_set_scene_data_1>:
 8004aca:	b00d      	add	sp, #52	@ 0x34
 8004acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ad0 <zcl_color_options_cmd_allow>:
 8004ad0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	0005      	movs	r5, r0
 8004ad6:	000e      	movs	r6, r1
 8004ad8:	0017      	movs	r7, r2
 8004ada:	46a8      	mov	r8, r5
 8004adc:	2000      	movs	r0, #0
 8004ade:	9001      	str	r0, [sp, #4]
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	9000      	str	r0, [sp, #0]
 8004ae4:	ab02      	add	r3, sp, #8
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	210f      	movs	r1, #15
 8004aea:	0028      	movs	r0, r5
 8004aec:	f7fb fc7b 	bl	80003e6 <ZbZclAttrRead>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d001      	beq.n	8004af8 <??zcl_color_options_cmd_allow_0>
 8004af4:	2000      	movs	r0, #0
 8004af6:	e042      	b.n	8004b7e <??zcl_color_options_cmd_allow_1>

08004af8 <??zcl_color_options_cmd_allow_0>:
 8004af8:	f05f 0900 	movs.w	r9, #0

08004afc <??zcl_color_options_cmd_allow_2>:
 8004afc:	4648      	mov	r0, r9
 8004afe:	b2c0      	uxtb	r0, r0
 8004b00:	2808      	cmp	r0, #8
 8004b02:	da1d      	bge.n	8004b40 <??zcl_color_options_cmd_allow_3>
 8004b04:	2001      	movs	r0, #1
 8004b06:	fa10 f009 	lsls.w	r0, r0, r9
 8004b0a:	0004      	movs	r4, r0
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	b2c0      	uxtb	r0, r0
 8004b10:	0021      	movs	r1, r4
 8004b12:	b2c9      	uxtb	r1, r1
 8004b14:	4208      	tst	r0, r1
 8004b16:	d010      	beq.n	8004b3a <??zcl_color_options_cmd_allow_4>

08004b18 <??zcl_color_options_cmd_allow_5>:
 8004b18:	0038      	movs	r0, r7
 8004b1a:	b2c0      	uxtb	r0, r0
 8004b1c:	0021      	movs	r1, r4
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	4208      	tst	r0, r1
 8004b22:	d105      	bne.n	8004b30 <??zcl_color_options_cmd_allow_6>
 8004b24:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b28:	43a0      	bics	r0, r4
 8004b2a:	f88d 0008 	strb.w	r0, [sp, #8]
 8004b2e:	e004      	b.n	8004b3a <??zcl_color_options_cmd_allow_4>

08004b30 <??zcl_color_options_cmd_allow_6>:
 8004b30:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b34:	4320      	orrs	r0, r4
 8004b36:	f88d 0008 	strb.w	r0, [sp, #8]

08004b3a <??zcl_color_options_cmd_allow_4>:
 8004b3a:	f119 0901 	adds.w	r9, r9, #1
 8004b3e:	e7dd      	b.n	8004afc <??zcl_color_options_cmd_allow_2>

08004b40 <??zcl_color_options_cmd_allow_3>:
 8004b40:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b44:	07c0      	lsls	r0, r0, #31
 8004b46:	d419      	bmi.n	8004b7c <??zcl_color_options_cmd_allow_7>
 8004b48:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d015      	beq.n	8004b7c <??zcl_color_options_cmd_allow_7>
 8004b50:	2000      	movs	r0, #0
 8004b52:	9001      	str	r0, [sp, #4]
 8004b54:	2001      	movs	r0, #1
 8004b56:	9000      	str	r0, [sp, #0]
 8004b58:	f10d 0309 	add.w	r3, sp, #9
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 8004b64:	f7fb fc3f 	bl	80003e6 <ZbZclAttrRead>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d001      	beq.n	8004b70 <??zcl_color_options_cmd_allow_8>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e006      	b.n	8004b7e <??zcl_color_options_cmd_allow_1>

08004b70 <??zcl_color_options_cmd_allow_8>:
 8004b70:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d101      	bne.n	8004b7c <??zcl_color_options_cmd_allow_7>
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e000      	b.n	8004b7e <??zcl_color_options_cmd_allow_1>

08004b7c <??zcl_color_options_cmd_allow_7>:
 8004b7c:	2001      	movs	r0, #1

08004b7e <??zcl_color_options_cmd_allow_1>:
 8004b7e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	...

08004b84 <zcl_color_server_handle_command>:
 8004b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	b0b4      	sub	sp, #208	@ 0xd0
 8004b8a:	0004      	movs	r4, r0
 8004b8c:	000d      	movs	r5, r1
 8004b8e:	0016      	movs	r6, r2
 8004b90:	0027      	movs	r7, r4
 8004b92:	f8b6 8028 	ldrh.w	r8, [r6, #40]	@ 0x28
 8004b96:	f05f 0918 	movs.w	r9, #24
 8004b9a:	f05f 0a00 	movs.w	sl, #0
 8004b9e:	f10d 0bb8 	add.w	fp, sp, #184	@ 0xb8
 8004ba2:	4652      	mov	r2, sl
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	4658      	mov	r0, fp
 8004ba8:	f002 ffdc 	bl	8007b64 <__aeabi_memset>
 8004bac:	a82e      	add	r0, sp, #184	@ 0xb8
 8004bae:	f116 0110 	adds.w	r1, r6, #16
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	f010 ffb3 	bl	8015b1e <__aeabi_memcpy>
 8004bb8:	79a8      	ldrb	r0, [r5, #6]
 8004bba:	f88d 00c8 	strb.w	r0, [sp, #200]	@ 0xc8
 8004bbe:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8004bc2:	f7ff f852 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8004bc6:	f8ad 00ca 	strh.w	r0, [sp, #202]	@ 0xca
 8004bca:	78a8      	ldrb	r0, [r5, #2]
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d002      	beq.n	8004bd6 <??zcl_color_server_handle_command_0>
 8004bd0:	2081      	movs	r0, #129	@ 0x81
 8004bd2:	f000 bf51 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004bd6 <??zcl_color_server_handle_command_0>:
 8004bd6:	79e8      	ldrb	r0, [r5, #7]
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d037      	beq.n	8004c4c <??zcl_color_server_handle_command_2>
 8004bdc:	2801      	cmp	r0, #1
 8004bde:	f000 8093 	beq.w	8004d08 <??zcl_color_server_handle_command_3>
 8004be2:	2802      	cmp	r0, #2
 8004be4:	f000 80f9 	beq.w	8004dda <??zcl_color_server_handle_command_4>
 8004be8:	2803      	cmp	r0, #3
 8004bea:	f000 8156 	beq.w	8004e9a <??zcl_color_server_handle_command_5>
 8004bee:	2804      	cmp	r0, #4
 8004bf0:	f000 81af 	beq.w	8004f52 <??zcl_color_server_handle_command_6>
 8004bf4:	2805      	cmp	r0, #5
 8004bf6:	f000 8214 	beq.w	8005022 <??zcl_color_server_handle_command_7>
 8004bfa:	2806      	cmp	r0, #6
 8004bfc:	f000 8272 	beq.w	80050e4 <??zcl_color_server_handle_command_8>
 8004c00:	2807      	cmp	r0, #7
 8004c02:	f000 82d0 	beq.w	80051a6 <??zcl_color_server_handle_command_9>
 8004c06:	2808      	cmp	r0, #8
 8004c08:	f000 8331 	beq.w	800526e <??zcl_color_server_handle_command_10>
 8004c0c:	2809      	cmp	r0, #9
 8004c0e:	f000 8390 	beq.w	8005332 <??zcl_color_server_handle_command_11>
 8004c12:	280a      	cmp	r0, #10
 8004c14:	f000 83ed 	beq.w	80053f2 <??zcl_color_server_handle_command_12>
 8004c18:	2840      	cmp	r0, #64	@ 0x40
 8004c1a:	f000 8448 	beq.w	80054ae <??zcl_color_server_handle_command_13>
 8004c1e:	2841      	cmp	r0, #65	@ 0x41
 8004c20:	f000 84a5 	beq.w	800556e <??zcl_color_server_handle_command_14>
 8004c24:	2842      	cmp	r0, #66	@ 0x42
 8004c26:	f000 850c 	beq.w	8005642 <??zcl_color_server_handle_command_15>
 8004c2a:	2843      	cmp	r0, #67	@ 0x43
 8004c2c:	f000 856a 	beq.w	8005704 <??zcl_color_server_handle_command_16>
 8004c30:	2844      	cmp	r0, #68	@ 0x44
 8004c32:	f000 85c8 	beq.w	80057c6 <??zcl_color_server_handle_command_17>
 8004c36:	2847      	cmp	r0, #71	@ 0x47
 8004c38:	f000 8612 	beq.w	8005860 <??zcl_color_server_handle_command_18>
 8004c3c:	284b      	cmp	r0, #75	@ 0x4b
 8004c3e:	f000 863e 	beq.w	80058be <??zcl_color_server_handle_command_19>
 8004c42:	284c      	cmp	r0, #76	@ 0x4c
 8004c44:	f000 86ae 	beq.w	80059a4 <??zcl_color_server_handle_command_20>
 8004c48:	f000 bf15 	b.w	8005a76 <??zcl_color_server_handle_command_21>

08004c4c <??zcl_color_server_handle_command_2>:
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f88d 0014 	strb.w	r0, [sp, #20]
 8004c52:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004c54:	2804      	cmp	r0, #4
 8004c56:	da02      	bge.n	8004c5e <??zcl_color_server_handle_command_22>
 8004c58:	2080      	movs	r0, #128	@ 0x80
 8004c5a:	f000 bf0d 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004c5e <??zcl_color_server_handle_command_22>:
 8004c5e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d102      	bne.n	8004c6a <??zcl_color_server_handle_command_23>
 8004c64:	2081      	movs	r0, #129	@ 0x81
 8004c66:	f000 bf07 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004c6a <??zcl_color_server_handle_command_23>:
 8004c6a:	f05f 0906 	movs.w	r9, #6
 8004c6e:	f05f 0a00 	movs.w	sl, #0
 8004c72:	f10d 0b80 	add.w	fp, sp, #128	@ 0x80
 8004c76:	4652      	mov	r2, sl
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4658      	mov	r0, fp
 8004c7c:	f002 ff72 	bl	8007b64 <__aeabi_memset>
 8004c80:	4640      	mov	r0, r8
 8004c82:	b280      	uxth	r0, r0
 8004c84:	2806      	cmp	r0, #6
 8004c86:	db07      	blt.n	8004c98 <??zcl_color_server_handle_command_24>
 8004c88:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004c8a:	7900      	ldrb	r0, [r0, #4]
 8004c8c:	f88d 0084 	strb.w	r0, [sp, #132]	@ 0x84
 8004c90:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004c92:	7940      	ldrb	r0, [r0, #5]
 8004c94:	f88d 0085 	strb.w	r0, [sp, #133]	@ 0x85

08004c98 <??zcl_color_server_handle_command_24>:
 8004c98:	f89d 2085 	ldrb.w	r2, [sp, #133]	@ 0x85
 8004c9c:	f89d 1084 	ldrb.w	r1, [sp, #132]	@ 0x84
 8004ca0:	0020      	movs	r0, r4
 8004ca2:	f7ff ff15 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d102      	bne.n	8004cb0 <??zcl_color_server_handle_command_25>
 8004caa:	2070      	movs	r0, #112	@ 0x70
 8004cac:	f000 bee4 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004cb0 <??zcl_color_server_handle_command_25>:
 8004cb0:	2002      	movs	r0, #2
 8004cb2:	9001      	str	r0, [sp, #4]
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	9000      	str	r0, [sp, #0]
 8004cb8:	ab05      	add	r3, sp, #20
 8004cba:	2208      	movs	r2, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	f7fb fce3 	bl	800068a <ZbZclAttrWrite>
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	9001      	str	r0, [sp, #4]
 8004cc8:	2001      	movs	r0, #1
 8004cca:	9000      	str	r0, [sp, #0]
 8004ccc:	ab05      	add	r3, sp, #20
 8004cce:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	0020      	movs	r0, r4
 8004cd6:	f7fb fcd8 	bl	800068a <ZbZclAttrWrite>
 8004cda:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004cdc:	7800      	ldrb	r0, [r0, #0]
 8004cde:	f88d 0080 	strb.w	r0, [sp, #128]	@ 0x80
 8004ce2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004ce4:	7840      	ldrb	r0, [r0, #1]
 8004ce6:	f88d 0081 	strb.w	r0, [sp, #129]	@ 0x81
 8004cea:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004cec:	1c80      	adds	r0, r0, #2
 8004cee:	f002 f90e 	bl	8006f0e <pletoh16>
 8004cf2:	f8ad 0082 	strh.w	r0, [sp, #130]	@ 0x82
 8004cf6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004cf8:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004cfa:	a920      	add	r1, sp, #128	@ 0x80
 8004cfc:	0020      	movs	r0, r4
 8004cfe:	f8d7 c070 	ldr.w	ip, [r7, #112]	@ 0x70
 8004d02:	47e0      	blx	ip
 8004d04:	f000 beb8 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d08 <??zcl_color_server_handle_command_3>:
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f88d 0013 	strb.w	r0, [sp, #19]
 8004d0e:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004d10:	2802      	cmp	r0, #2
 8004d12:	da02      	bge.n	8004d1a <??zcl_color_server_handle_command_26>
 8004d14:	2080      	movs	r0, #128	@ 0x80
 8004d16:	f000 beaf 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d1a <??zcl_color_server_handle_command_26>:
 8004d1a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d102      	bne.n	8004d26 <??zcl_color_server_handle_command_27>
 8004d20:	2081      	movs	r0, #129	@ 0x81
 8004d22:	f000 bea9 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d26 <??zcl_color_server_handle_command_27>:
 8004d26:	f05f 0904 	movs.w	r9, #4
 8004d2a:	f05f 0a00 	movs.w	sl, #0
 8004d2e:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8004d32:	4652      	mov	r2, sl
 8004d34:	4649      	mov	r1, r9
 8004d36:	4658      	mov	r0, fp
 8004d38:	f002 ff14 	bl	8007b64 <__aeabi_memset>
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	b280      	uxth	r0, r0
 8004d40:	2804      	cmp	r0, #4
 8004d42:	db07      	blt.n	8004d54 <??zcl_color_server_handle_command_28>
 8004d44:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d46:	7880      	ldrb	r0, [r0, #2]
 8004d48:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8004d4c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d4e:	78c0      	ldrb	r0, [r0, #3]
 8004d50:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27

08004d54 <??zcl_color_server_handle_command_28>:
 8004d54:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 8004d58:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 8004d5c:	0020      	movs	r0, r4
 8004d5e:	f7ff feb7 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d102      	bne.n	8004d6c <??zcl_color_server_handle_command_29>
 8004d66:	2070      	movs	r0, #112	@ 0x70
 8004d68:	f000 be86 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d6c <??zcl_color_server_handle_command_29>:
 8004d6c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d6e:	7800      	ldrb	r0, [r0, #0]
 8004d70:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
 8004d74:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d76:	7840      	ldrb	r0, [r0, #1]
 8004d78:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8004d7c:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004d80:	2801      	cmp	r0, #1
 8004d82:	d003      	beq.n	8004d8c <??zcl_color_server_handle_command_30>
 8004d84:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004d88:	2803      	cmp	r0, #3
 8004d8a:	d106      	bne.n	8004d9a <??zcl_color_server_handle_command_31>

08004d8c <??zcl_color_server_handle_command_30>:
 8004d8c:	f89d 0025 	ldrb.w	r0, [sp, #37]	@ 0x25
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d102      	bne.n	8004d9a <??zcl_color_server_handle_command_31>
 8004d94:	2085      	movs	r0, #133	@ 0x85
 8004d96:	f000 be6f 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d9a <??zcl_color_server_handle_command_31>:
 8004d9a:	2002      	movs	r0, #2
 8004d9c:	9001      	str	r0, [sp, #4]
 8004d9e:	2001      	movs	r0, #1
 8004da0:	9000      	str	r0, [sp, #0]
 8004da2:	f10d 0313 	add.w	r3, sp, #19
 8004da6:	2208      	movs	r2, #8
 8004da8:	2100      	movs	r1, #0
 8004daa:	0020      	movs	r0, r4
 8004dac:	f7fb fc6d 	bl	800068a <ZbZclAttrWrite>
 8004db0:	2002      	movs	r0, #2
 8004db2:	9001      	str	r0, [sp, #4]
 8004db4:	2001      	movs	r0, #1
 8004db6:	9000      	str	r0, [sp, #0]
 8004db8:	f10d 0313 	add.w	r3, sp, #19
 8004dbc:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	f7fb fc61 	bl	800068a <ZbZclAttrWrite>
 8004dc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004dca:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004dcc:	a909      	add	r1, sp, #36	@ 0x24
 8004dce:	0020      	movs	r0, r4
 8004dd0:	f8d7 c074 	ldr.w	ip, [r7, #116]	@ 0x74
 8004dd4:	47e0      	blx	ip
 8004dd6:	f000 be4f 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004dda <??zcl_color_server_handle_command_4>:
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f88d 0012 	strb.w	r0, [sp, #18]
 8004de0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004de2:	2804      	cmp	r0, #4
 8004de4:	da02      	bge.n	8004dec <??zcl_color_server_handle_command_32>
 8004de6:	2080      	movs	r0, #128	@ 0x80
 8004de8:	f000 be46 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004dec <??zcl_color_server_handle_command_32>:
 8004dec:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d102      	bne.n	8004df8 <??zcl_color_server_handle_command_33>
 8004df2:	2081      	movs	r0, #129	@ 0x81
 8004df4:	f000 be40 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004df8 <??zcl_color_server_handle_command_33>:
 8004df8:	f05f 0905 	movs.w	r9, #5
 8004dfc:	f05f 0a00 	movs.w	sl, #0
 8004e00:	f10d 0b78 	add.w	fp, sp, #120	@ 0x78
 8004e04:	4652      	mov	r2, sl
 8004e06:	4649      	mov	r1, r9
 8004e08:	4658      	mov	r0, fp
 8004e0a:	f002 feab 	bl	8007b64 <__aeabi_memset>
 8004e0e:	4640      	mov	r0, r8
 8004e10:	b280      	uxth	r0, r0
 8004e12:	2806      	cmp	r0, #6
 8004e14:	db07      	blt.n	8004e26 <??zcl_color_server_handle_command_34>
 8004e16:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e18:	7900      	ldrb	r0, [r0, #4]
 8004e1a:	f88d 007b 	strb.w	r0, [sp, #123]	@ 0x7b
 8004e1e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e20:	7940      	ldrb	r0, [r0, #5]
 8004e22:	f88d 007c 	strb.w	r0, [sp, #124]	@ 0x7c

08004e26 <??zcl_color_server_handle_command_34>:
 8004e26:	f89d 207c 	ldrb.w	r2, [sp, #124]	@ 0x7c
 8004e2a:	f89d 107b 	ldrb.w	r1, [sp, #123]	@ 0x7b
 8004e2e:	0020      	movs	r0, r4
 8004e30:	f7ff fe4e 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d102      	bne.n	8004e3e <??zcl_color_server_handle_command_35>
 8004e38:	2070      	movs	r0, #112	@ 0x70
 8004e3a:	f000 be1d 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004e3e <??zcl_color_server_handle_command_35>:
 8004e3e:	2002      	movs	r0, #2
 8004e40:	9001      	str	r0, [sp, #4]
 8004e42:	2001      	movs	r0, #1
 8004e44:	9000      	str	r0, [sp, #0]
 8004e46:	f10d 0312 	add.w	r3, sp, #18
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f7fb fc1b 	bl	800068a <ZbZclAttrWrite>
 8004e54:	2002      	movs	r0, #2
 8004e56:	9001      	str	r0, [sp, #4]
 8004e58:	2001      	movs	r0, #1
 8004e5a:	9000      	str	r0, [sp, #0]
 8004e5c:	f10d 0312 	add.w	r3, sp, #18
 8004e60:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004e64:	2100      	movs	r1, #0
 8004e66:	0020      	movs	r0, r4
 8004e68:	f7fb fc0f 	bl	800068a <ZbZclAttrWrite>
 8004e6c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e6e:	7800      	ldrb	r0, [r0, #0]
 8004e70:	f88d 0078 	strb.w	r0, [sp, #120]	@ 0x78
 8004e74:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e76:	7840      	ldrb	r0, [r0, #1]
 8004e78:	f88d 0079 	strb.w	r0, [sp, #121]	@ 0x79
 8004e7c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e7e:	1c80      	adds	r0, r0, #2
 8004e80:	f002 f845 	bl	8006f0e <pletoh16>
 8004e84:	f88d 007a 	strb.w	r0, [sp, #122]	@ 0x7a
 8004e88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004e8a:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004e8c:	a91e      	add	r1, sp, #120	@ 0x78
 8004e8e:	0020      	movs	r0, r4
 8004e90:	f8d7 c078 	ldr.w	ip, [r7, #120]	@ 0x78
 8004e94:	47e0      	blx	ip
 8004e96:	f000 bdef 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004e9a <??zcl_color_server_handle_command_5>:
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f88d 0011 	strb.w	r0, [sp, #17]
 8004ea0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004ea2:	2803      	cmp	r0, #3
 8004ea4:	da02      	bge.n	8004eac <??zcl_color_server_handle_command_36>
 8004ea6:	2080      	movs	r0, #128	@ 0x80
 8004ea8:	f000 bde6 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004eac <??zcl_color_server_handle_command_36>:
 8004eac:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d102      	bne.n	8004eb8 <??zcl_color_server_handle_command_37>
 8004eb2:	2081      	movs	r0, #129	@ 0x81
 8004eb4:	f000 bde0 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004eb8 <??zcl_color_server_handle_command_37>:
 8004eb8:	f05f 0906 	movs.w	r9, #6
 8004ebc:	f05f 0a00 	movs.w	sl, #0
 8004ec0:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 8004ec4:	4652      	mov	r2, sl
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f002 fe4b 	bl	8007b64 <__aeabi_memset>
 8004ece:	4640      	mov	r0, r8
 8004ed0:	b280      	uxth	r0, r0
 8004ed2:	2805      	cmp	r0, #5
 8004ed4:	db07      	blt.n	8004ee6 <??zcl_color_server_handle_command_38>
 8004ed6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004ed8:	78c0      	ldrb	r0, [r0, #3]
 8004eda:	f88d 0098 	strb.w	r0, [sp, #152]	@ 0x98
 8004ede:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004ee0:	7900      	ldrb	r0, [r0, #4]
 8004ee2:	f88d 0099 	strb.w	r0, [sp, #153]	@ 0x99

08004ee6 <??zcl_color_server_handle_command_38>:
 8004ee6:	f89d 2099 	ldrb.w	r2, [sp, #153]	@ 0x99
 8004eea:	f89d 1098 	ldrb.w	r1, [sp, #152]	@ 0x98
 8004eee:	0020      	movs	r0, r4
 8004ef0:	f7ff fdee 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d102      	bne.n	8004efe <??zcl_color_server_handle_command_39>
 8004ef8:	2070      	movs	r0, #112	@ 0x70
 8004efa:	f000 bdbd 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004efe <??zcl_color_server_handle_command_39>:
 8004efe:	2002      	movs	r0, #2
 8004f00:	9001      	str	r0, [sp, #4]
 8004f02:	2001      	movs	r0, #1
 8004f04:	9000      	str	r0, [sp, #0]
 8004f06:	f10d 0311 	add.w	r3, sp, #17
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	0020      	movs	r0, r4
 8004f10:	f7fb fbbb 	bl	800068a <ZbZclAttrWrite>
 8004f14:	2002      	movs	r0, #2
 8004f16:	9001      	str	r0, [sp, #4]
 8004f18:	2001      	movs	r0, #1
 8004f1a:	9000      	str	r0, [sp, #0]
 8004f1c:	f10d 0311 	add.w	r3, sp, #17
 8004f20:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004f24:	2100      	movs	r1, #0
 8004f26:	0020      	movs	r0, r4
 8004f28:	f7fb fbaf 	bl	800068a <ZbZclAttrWrite>
 8004f2c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f2e:	7800      	ldrb	r0, [r0, #0]
 8004f30:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
 8004f34:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f36:	1c40      	adds	r0, r0, #1
 8004f38:	f001 ffe9 	bl	8006f0e <pletoh16>
 8004f3c:	f8ad 0096 	strh.w	r0, [sp, #150]	@ 0x96
 8004f40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f42:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004f44:	a925      	add	r1, sp, #148	@ 0x94
 8004f46:	0020      	movs	r0, r4
 8004f48:	f8d7 c07c 	ldr.w	ip, [r7, #124]	@ 0x7c
 8004f4c:	47e0      	blx	ip
 8004f4e:	f000 bd93 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004f52 <??zcl_color_server_handle_command_6>:
 8004f52:	2000      	movs	r0, #0
 8004f54:	f88d 0010 	strb.w	r0, [sp, #16]
 8004f58:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004f5a:	2802      	cmp	r0, #2
 8004f5c:	da02      	bge.n	8004f64 <??zcl_color_server_handle_command_40>
 8004f5e:	2080      	movs	r0, #128	@ 0x80
 8004f60:	f000 bd8a 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004f64 <??zcl_color_server_handle_command_40>:
 8004f64:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d102      	bne.n	8004f72 <??zcl_color_server_handle_command_41>
 8004f6c:	2081      	movs	r0, #129	@ 0x81
 8004f6e:	f000 bd83 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004f72 <??zcl_color_server_handle_command_41>:
 8004f72:	f05f 0904 	movs.w	r9, #4
 8004f76:	f05f 0a00 	movs.w	sl, #0
 8004f7a:	f10d 0b20 	add.w	fp, sp, #32
 8004f7e:	4652      	mov	r2, sl
 8004f80:	4649      	mov	r1, r9
 8004f82:	4658      	mov	r0, fp
 8004f84:	f002 fdee 	bl	8007b64 <__aeabi_memset>
 8004f88:	4640      	mov	r0, r8
 8004f8a:	b280      	uxth	r0, r0
 8004f8c:	2804      	cmp	r0, #4
 8004f8e:	db07      	blt.n	8004fa0 <??zcl_color_server_handle_command_42>
 8004f90:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f92:	7880      	ldrb	r0, [r0, #2]
 8004f94:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8004f98:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f9a:	78c0      	ldrb	r0, [r0, #3]
 8004f9c:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23

08004fa0 <??zcl_color_server_handle_command_42>:
 8004fa0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004fa2:	7800      	ldrb	r0, [r0, #0]
 8004fa4:	f88d 0020 	strb.w	r0, [sp, #32]
 8004fa8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004faa:	7840      	ldrb	r0, [r0, #1]
 8004fac:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004fb0:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8004fb4:	2801      	cmp	r0, #1
 8004fb6:	d003      	beq.n	8004fc0 <??zcl_color_server_handle_command_43>
 8004fb8:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8004fbc:	2803      	cmp	r0, #3
 8004fbe:	d106      	bne.n	8004fce <??zcl_color_server_handle_command_44>

08004fc0 <??zcl_color_server_handle_command_43>:
 8004fc0:	f89d 0021 	ldrb.w	r0, [sp, #33]	@ 0x21
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d102      	bne.n	8004fce <??zcl_color_server_handle_command_44>
 8004fc8:	2085      	movs	r0, #133	@ 0x85
 8004fca:	f000 bd55 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004fce <??zcl_color_server_handle_command_44>:
 8004fce:	f89d 2023 	ldrb.w	r2, [sp, #35]	@ 0x23
 8004fd2:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
 8004fd6:	0020      	movs	r0, r4
 8004fd8:	f7ff fd7a 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d102      	bne.n	8004fe6 <??zcl_color_server_handle_command_45>
 8004fe0:	2070      	movs	r0, #112	@ 0x70
 8004fe2:	f000 bd49 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004fe6 <??zcl_color_server_handle_command_45>:
 8004fe6:	2002      	movs	r0, #2
 8004fe8:	9001      	str	r0, [sp, #4]
 8004fea:	2001      	movs	r0, #1
 8004fec:	9000      	str	r0, [sp, #0]
 8004fee:	ab04      	add	r3, sp, #16
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	0020      	movs	r0, r4
 8004ff6:	f7fb fb48 	bl	800068a <ZbZclAttrWrite>
 8004ffa:	2002      	movs	r0, #2
 8004ffc:	9001      	str	r0, [sp, #4]
 8004ffe:	2001      	movs	r0, #1
 8005000:	9000      	str	r0, [sp, #0]
 8005002:	ab04      	add	r3, sp, #16
 8005004:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005008:	2100      	movs	r1, #0
 800500a:	0020      	movs	r0, r4
 800500c:	f7fb fb3d 	bl	800068a <ZbZclAttrWrite>
 8005010:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005012:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005014:	a908      	add	r1, sp, #32
 8005016:	0020      	movs	r0, r4
 8005018:	f8d7 c080 	ldr.w	ip, [r7, #128]	@ 0x80
 800501c:	47e0      	blx	ip
 800501e:	f000 bd2b 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005022 <??zcl_color_server_handle_command_7>:
 8005022:	2000      	movs	r0, #0
 8005024:	f88d 000f 	strb.w	r0, [sp, #15]
 8005028:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800502a:	2804      	cmp	r0, #4
 800502c:	da02      	bge.n	8005034 <??zcl_color_server_handle_command_46>
 800502e:	2080      	movs	r0, #128	@ 0x80
 8005030:	f000 bd22 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005034 <??zcl_color_server_handle_command_46>:
 8005034:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8005038:	2800      	cmp	r0, #0
 800503a:	d102      	bne.n	8005042 <??zcl_color_server_handle_command_47>
 800503c:	2081      	movs	r0, #129	@ 0x81
 800503e:	f000 bd1b 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005042 <??zcl_color_server_handle_command_47>:
 8005042:	f05f 0905 	movs.w	r9, #5
 8005046:	f05f 0a00 	movs.w	sl, #0
 800504a:	f10d 0b70 	add.w	fp, sp, #112	@ 0x70
 800504e:	4652      	mov	r2, sl
 8005050:	4649      	mov	r1, r9
 8005052:	4658      	mov	r0, fp
 8005054:	f002 fd86 	bl	8007b64 <__aeabi_memset>
 8005058:	4640      	mov	r0, r8
 800505a:	b280      	uxth	r0, r0
 800505c:	2806      	cmp	r0, #6
 800505e:	db07      	blt.n	8005070 <??zcl_color_server_handle_command_48>
 8005060:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005062:	7900      	ldrb	r0, [r0, #4]
 8005064:	f88d 0073 	strb.w	r0, [sp, #115]	@ 0x73
 8005068:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800506a:	7940      	ldrb	r0, [r0, #5]
 800506c:	f88d 0074 	strb.w	r0, [sp, #116]	@ 0x74

08005070 <??zcl_color_server_handle_command_48>:
 8005070:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8005074:	f89d 1073 	ldrb.w	r1, [sp, #115]	@ 0x73
 8005078:	0020      	movs	r0, r4
 800507a:	f7ff fd29 	bl	8004ad0 <zcl_color_options_cmd_allow>
 800507e:	2800      	cmp	r0, #0
 8005080:	d102      	bne.n	8005088 <??zcl_color_server_handle_command_49>
 8005082:	2070      	movs	r0, #112	@ 0x70
 8005084:	f000 bcf8 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005088 <??zcl_color_server_handle_command_49>:
 8005088:	2002      	movs	r0, #2
 800508a:	9001      	str	r0, [sp, #4]
 800508c:	2001      	movs	r0, #1
 800508e:	9000      	str	r0, [sp, #0]
 8005090:	f10d 030f 	add.w	r3, sp, #15
 8005094:	2208      	movs	r2, #8
 8005096:	2100      	movs	r1, #0
 8005098:	0020      	movs	r0, r4
 800509a:	f7fb faf6 	bl	800068a <ZbZclAttrWrite>
 800509e:	2002      	movs	r0, #2
 80050a0:	9001      	str	r0, [sp, #4]
 80050a2:	2001      	movs	r0, #1
 80050a4:	9000      	str	r0, [sp, #0]
 80050a6:	f10d 030f 	add.w	r3, sp, #15
 80050aa:	f244 0201 	movw	r2, #16385	@ 0x4001
 80050ae:	2100      	movs	r1, #0
 80050b0:	0020      	movs	r0, r4
 80050b2:	f7fb faea 	bl	800068a <ZbZclAttrWrite>
 80050b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80050b8:	7800      	ldrb	r0, [r0, #0]
 80050ba:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80050be:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80050c0:	7840      	ldrb	r0, [r0, #1]
 80050c2:	f88d 0071 	strb.w	r0, [sp, #113]	@ 0x71
 80050c6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80050c8:	1c80      	adds	r0, r0, #2
 80050ca:	f001 ff20 	bl	8006f0e <pletoh16>
 80050ce:	f88d 0072 	strb.w	r0, [sp, #114]	@ 0x72
 80050d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80050d4:	aa2e      	add	r2, sp, #184	@ 0xb8
 80050d6:	a91c      	add	r1, sp, #112	@ 0x70
 80050d8:	0020      	movs	r0, r4
 80050da:	f8d7 c084 	ldr.w	ip, [r7, #132]	@ 0x84
 80050de:	47e0      	blx	ip
 80050e0:	f000 bcca 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080050e4 <??zcl_color_server_handle_command_8>:
 80050e4:	2000      	movs	r0, #0
 80050e6:	f88d 000e 	strb.w	r0, [sp, #14]
 80050ea:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80050ec:	2804      	cmp	r0, #4
 80050ee:	da02      	bge.n	80050f6 <??zcl_color_server_handle_command_50>
 80050f0:	2080      	movs	r0, #128	@ 0x80
 80050f2:	f000 bcc1 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080050f6 <??zcl_color_server_handle_command_50>:
 80050f6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d102      	bne.n	8005104 <??zcl_color_server_handle_command_51>
 80050fe:	2081      	movs	r0, #129	@ 0x81
 8005100:	f000 bcba 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005104 <??zcl_color_server_handle_command_51>:
 8005104:	f05f 0906 	movs.w	r9, #6
 8005108:	f05f 0a00 	movs.w	sl, #0
 800510c:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 8005110:	4652      	mov	r2, sl
 8005112:	4649      	mov	r1, r9
 8005114:	4658      	mov	r0, fp
 8005116:	f002 fd25 	bl	8007b64 <__aeabi_memset>
 800511a:	4640      	mov	r0, r8
 800511c:	b280      	uxth	r0, r0
 800511e:	2806      	cmp	r0, #6
 8005120:	db07      	blt.n	8005132 <??zcl_color_server_handle_command_52>
 8005122:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005124:	7900      	ldrb	r0, [r0, #4]
 8005126:	f88d 006c 	strb.w	r0, [sp, #108]	@ 0x6c
 800512a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800512c:	7940      	ldrb	r0, [r0, #5]
 800512e:	f88d 006d 	strb.w	r0, [sp, #109]	@ 0x6d

08005132 <??zcl_color_server_handle_command_52>:
 8005132:	f89d 206d 	ldrb.w	r2, [sp, #109]	@ 0x6d
 8005136:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 800513a:	0020      	movs	r0, r4
 800513c:	f7ff fcc8 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005140:	2800      	cmp	r0, #0
 8005142:	d102      	bne.n	800514a <??zcl_color_server_handle_command_53>
 8005144:	2070      	movs	r0, #112	@ 0x70
 8005146:	f000 bc97 	b.w	8005a78 <??zcl_color_server_handle_command_1>

0800514a <??zcl_color_server_handle_command_53>:
 800514a:	2002      	movs	r0, #2
 800514c:	9001      	str	r0, [sp, #4]
 800514e:	2001      	movs	r0, #1
 8005150:	9000      	str	r0, [sp, #0]
 8005152:	f10d 030e 	add.w	r3, sp, #14
 8005156:	2208      	movs	r2, #8
 8005158:	2100      	movs	r1, #0
 800515a:	0020      	movs	r0, r4
 800515c:	f7fb fa95 	bl	800068a <ZbZclAttrWrite>
 8005160:	2002      	movs	r0, #2
 8005162:	9001      	str	r0, [sp, #4]
 8005164:	2001      	movs	r0, #1
 8005166:	9000      	str	r0, [sp, #0]
 8005168:	f10d 030e 	add.w	r3, sp, #14
 800516c:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005170:	2100      	movs	r1, #0
 8005172:	0020      	movs	r0, r4
 8005174:	f7fb fa89 	bl	800068a <ZbZclAttrWrite>
 8005178:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800517a:	7800      	ldrb	r0, [r0, #0]
 800517c:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 8005180:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005182:	7840      	ldrb	r0, [r0, #1]
 8005184:	f88d 0069 	strb.w	r0, [sp, #105]	@ 0x69
 8005188:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800518a:	1c80      	adds	r0, r0, #2
 800518c:	f001 febf 	bl	8006f0e <pletoh16>
 8005190:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 8005194:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005196:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005198:	a91a      	add	r1, sp, #104	@ 0x68
 800519a:	0020      	movs	r0, r4
 800519c:	f8d7 c088 	ldr.w	ip, [r7, #136]	@ 0x88
 80051a0:	47e0      	blx	ip
 80051a2:	f000 bc69 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080051a6 <??zcl_color_server_handle_command_9>:
 80051a6:	2001      	movs	r0, #1
 80051a8:	f88d 000d 	strb.w	r0, [sp, #13]
 80051ac:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80051ae:	2806      	cmp	r0, #6
 80051b0:	da02      	bge.n	80051b8 <??zcl_color_server_handle_command_54>
 80051b2:	2080      	movs	r0, #128	@ 0x80
 80051b4:	f000 bc60 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080051b8 <??zcl_color_server_handle_command_54>:
 80051b8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80051bc:	2800      	cmp	r0, #0
 80051be:	d102      	bne.n	80051c6 <??zcl_color_server_handle_command_55>
 80051c0:	2081      	movs	r0, #129	@ 0x81
 80051c2:	f000 bc59 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080051c6 <??zcl_color_server_handle_command_55>:
 80051c6:	f05f 0908 	movs.w	r9, #8
 80051ca:	f05f 0a00 	movs.w	sl, #0
 80051ce:	f10d 0b60 	add.w	fp, sp, #96	@ 0x60
 80051d2:	4652      	mov	r2, sl
 80051d4:	4649      	mov	r1, r9
 80051d6:	4658      	mov	r0, fp
 80051d8:	f002 fcc4 	bl	8007b64 <__aeabi_memset>
 80051dc:	4640      	mov	r0, r8
 80051de:	b280      	uxth	r0, r0
 80051e0:	2808      	cmp	r0, #8
 80051e2:	db07      	blt.n	80051f4 <??zcl_color_server_handle_command_56>
 80051e4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80051e6:	7980      	ldrb	r0, [r0, #6]
 80051e8:	f88d 0066 	strb.w	r0, [sp, #102]	@ 0x66
 80051ec:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80051ee:	79c0      	ldrb	r0, [r0, #7]
 80051f0:	f88d 0067 	strb.w	r0, [sp, #103]	@ 0x67

080051f4 <??zcl_color_server_handle_command_56>:
 80051f4:	f89d 2067 	ldrb.w	r2, [sp, #103]	@ 0x67
 80051f8:	f89d 1066 	ldrb.w	r1, [sp, #102]	@ 0x66
 80051fc:	0020      	movs	r0, r4
 80051fe:	f7ff fc67 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005202:	2800      	cmp	r0, #0
 8005204:	d102      	bne.n	800520c <??zcl_color_server_handle_command_57>
 8005206:	2070      	movs	r0, #112	@ 0x70
 8005208:	f000 bc36 	b.w	8005a78 <??zcl_color_server_handle_command_1>

0800520c <??zcl_color_server_handle_command_57>:
 800520c:	2002      	movs	r0, #2
 800520e:	9001      	str	r0, [sp, #4]
 8005210:	2001      	movs	r0, #1
 8005212:	9000      	str	r0, [sp, #0]
 8005214:	f10d 030d 	add.w	r3, sp, #13
 8005218:	2208      	movs	r2, #8
 800521a:	2100      	movs	r1, #0
 800521c:	0020      	movs	r0, r4
 800521e:	f7fb fa34 	bl	800068a <ZbZclAttrWrite>
 8005222:	2002      	movs	r0, #2
 8005224:	9001      	str	r0, [sp, #4]
 8005226:	2001      	movs	r0, #1
 8005228:	9000      	str	r0, [sp, #0]
 800522a:	f10d 030d 	add.w	r3, sp, #13
 800522e:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005232:	2100      	movs	r1, #0
 8005234:	0020      	movs	r0, r4
 8005236:	f7fb fa28 	bl	800068a <ZbZclAttrWrite>
 800523a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800523c:	f001 fe67 	bl	8006f0e <pletoh16>
 8005240:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
 8005244:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005246:	1c80      	adds	r0, r0, #2
 8005248:	f001 fe61 	bl	8006f0e <pletoh16>
 800524c:	f8ad 0062 	strh.w	r0, [sp, #98]	@ 0x62
 8005250:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005252:	1d00      	adds	r0, r0, #4
 8005254:	f001 fe5b 	bl	8006f0e <pletoh16>
 8005258:	f8ad 0064 	strh.w	r0, [sp, #100]	@ 0x64
 800525c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800525e:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005260:	a918      	add	r1, sp, #96	@ 0x60
 8005262:	0020      	movs	r0, r4
 8005264:	f8d7 c08c 	ldr.w	ip, [r7, #140]	@ 0x8c
 8005268:	47e0      	blx	ip
 800526a:	f000 bc05 	b.w	8005a78 <??zcl_color_server_handle_command_1>

0800526e <??zcl_color_server_handle_command_10>:
 800526e:	2001      	movs	r0, #1
 8005270:	f88d 000c 	strb.w	r0, [sp, #12]
 8005274:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005276:	2804      	cmp	r0, #4
 8005278:	da01      	bge.n	800527e <??zcl_color_server_handle_command_58>
 800527a:	2080      	movs	r0, #128	@ 0x80
 800527c:	e3fc      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800527e <??zcl_color_server_handle_command_58>:
 800527e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8005282:	2800      	cmp	r0, #0
 8005284:	d101      	bne.n	800528a <??zcl_color_server_handle_command_59>
 8005286:	2081      	movs	r0, #129	@ 0x81
 8005288:	e3f6      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800528a <??zcl_color_server_handle_command_59>:
 800528a:	f05f 0906 	movs.w	r9, #6
 800528e:	f05f 0a00 	movs.w	sl, #0
 8005292:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8005296:	4652      	mov	r2, sl
 8005298:	4649      	mov	r1, r9
 800529a:	4658      	mov	r0, fp
 800529c:	f002 fc62 	bl	8007b64 <__aeabi_memset>
 80052a0:	4640      	mov	r0, r8
 80052a2:	b280      	uxth	r0, r0
 80052a4:	2806      	cmp	r0, #6
 80052a6:	db07      	blt.n	80052b8 <??zcl_color_server_handle_command_60>
 80052a8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052aa:	7900      	ldrb	r0, [r0, #4]
 80052ac:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80052b0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052b2:	7940      	ldrb	r0, [r0, #5]
 80052b4:	f88d 003d 	strb.w	r0, [sp, #61]	@ 0x3d

080052b8 <??zcl_color_server_handle_command_60>:
 80052b8:	f89d 203d 	ldrb.w	r2, [sp, #61]	@ 0x3d
 80052bc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80052c0:	0020      	movs	r0, r4
 80052c2:	f7ff fc05 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d101      	bne.n	80052ce <??zcl_color_server_handle_command_61>
 80052ca:	2070      	movs	r0, #112	@ 0x70
 80052cc:	e3d4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080052ce <??zcl_color_server_handle_command_61>:
 80052ce:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052d0:	f001 fe1d 	bl	8006f0e <pletoh16>
 80052d4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80052d8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052da:	1c80      	adds	r0, r0, #2
 80052dc:	f001 fe17 	bl	8006f0e <pletoh16>
 80052e0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80052e4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d105      	bne.n	80052f8 <??zcl_color_server_handle_command_62>
 80052ec:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d101      	bne.n	80052f8 <??zcl_color_server_handle_command_62>
 80052f4:	2000      	movs	r0, #0
 80052f6:	e3bf      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080052f8 <??zcl_color_server_handle_command_62>:
 80052f8:	2002      	movs	r0, #2
 80052fa:	9001      	str	r0, [sp, #4]
 80052fc:	2001      	movs	r0, #1
 80052fe:	9000      	str	r0, [sp, #0]
 8005300:	ab03      	add	r3, sp, #12
 8005302:	2208      	movs	r2, #8
 8005304:	2100      	movs	r1, #0
 8005306:	0020      	movs	r0, r4
 8005308:	f7fb f9bf 	bl	800068a <ZbZclAttrWrite>
 800530c:	2002      	movs	r0, #2
 800530e:	9001      	str	r0, [sp, #4]
 8005310:	2001      	movs	r0, #1
 8005312:	9000      	str	r0, [sp, #0]
 8005314:	ab03      	add	r3, sp, #12
 8005316:	f244 0201 	movw	r2, #16385	@ 0x4001
 800531a:	2100      	movs	r1, #0
 800531c:	0020      	movs	r0, r4
 800531e:	f7fb f9b4 	bl	800068a <ZbZclAttrWrite>
 8005322:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005324:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005326:	a90e      	add	r1, sp, #56	@ 0x38
 8005328:	0020      	movs	r0, r4
 800532a:	f8d7 c090 	ldr.w	ip, [r7, #144]	@ 0x90
 800532e:	47e0      	blx	ip
 8005330:	e3a2      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005332 <??zcl_color_server_handle_command_11>:
 8005332:	2001      	movs	r0, #1
 8005334:	f88d 000b 	strb.w	r0, [sp, #11]
 8005338:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800533a:	2806      	cmp	r0, #6
 800533c:	da01      	bge.n	8005342 <??zcl_color_server_handle_command_63>
 800533e:	2080      	movs	r0, #128	@ 0x80
 8005340:	e39a      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005342 <??zcl_color_server_handle_command_63>:
 8005342:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8005346:	2800      	cmp	r0, #0
 8005348:	d101      	bne.n	800534e <??zcl_color_server_handle_command_64>
 800534a:	2081      	movs	r0, #129	@ 0x81
 800534c:	e394      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800534e <??zcl_color_server_handle_command_64>:
 800534e:	f05f 0908 	movs.w	r9, #8
 8005352:	f05f 0a00 	movs.w	sl, #0
 8005356:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 800535a:	4652      	mov	r2, sl
 800535c:	4649      	mov	r1, r9
 800535e:	4658      	mov	r0, fp
 8005360:	f002 fc00 	bl	8007b64 <__aeabi_memset>
 8005364:	4640      	mov	r0, r8
 8005366:	b280      	uxth	r0, r0
 8005368:	2808      	cmp	r0, #8
 800536a:	db07      	blt.n	800537c <??zcl_color_server_handle_command_65>
 800536c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800536e:	7980      	ldrb	r0, [r0, #6]
 8005370:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8005374:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005376:	79c0      	ldrb	r0, [r0, #7]
 8005378:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f

0800537c <??zcl_color_server_handle_command_65>:
 800537c:	f89d 205f 	ldrb.w	r2, [sp, #95]	@ 0x5f
 8005380:	f89d 105e 	ldrb.w	r1, [sp, #94]	@ 0x5e
 8005384:	0020      	movs	r0, r4
 8005386:	f7ff fba3 	bl	8004ad0 <zcl_color_options_cmd_allow>
 800538a:	2800      	cmp	r0, #0
 800538c:	d101      	bne.n	8005392 <??zcl_color_server_handle_command_66>
 800538e:	2070      	movs	r0, #112	@ 0x70
 8005390:	e372      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005392 <??zcl_color_server_handle_command_66>:
 8005392:	2002      	movs	r0, #2
 8005394:	9001      	str	r0, [sp, #4]
 8005396:	2001      	movs	r0, #1
 8005398:	9000      	str	r0, [sp, #0]
 800539a:	f10d 030b 	add.w	r3, sp, #11
 800539e:	2208      	movs	r2, #8
 80053a0:	2100      	movs	r1, #0
 80053a2:	0020      	movs	r0, r4
 80053a4:	f7fb f971 	bl	800068a <ZbZclAttrWrite>
 80053a8:	2002      	movs	r0, #2
 80053aa:	9001      	str	r0, [sp, #4]
 80053ac:	2001      	movs	r0, #1
 80053ae:	9000      	str	r0, [sp, #0]
 80053b0:	f10d 030b 	add.w	r3, sp, #11
 80053b4:	f244 0201 	movw	r2, #16385	@ 0x4001
 80053b8:	2100      	movs	r1, #0
 80053ba:	0020      	movs	r0, r4
 80053bc:	f7fb f965 	bl	800068a <ZbZclAttrWrite>
 80053c0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80053c2:	f001 fda4 	bl	8006f0e <pletoh16>
 80053c6:	f8ad 0058 	strh.w	r0, [sp, #88]	@ 0x58
 80053ca:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80053cc:	1c80      	adds	r0, r0, #2
 80053ce:	f001 fd9e 	bl	8006f0e <pletoh16>
 80053d2:	f8ad 005a 	strh.w	r0, [sp, #90]	@ 0x5a
 80053d6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80053d8:	1d00      	adds	r0, r0, #4
 80053da:	f001 fd98 	bl	8006f0e <pletoh16>
 80053de:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80053e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80053e4:	aa2e      	add	r2, sp, #184	@ 0xb8
 80053e6:	a916      	add	r1, sp, #88	@ 0x58
 80053e8:	0020      	movs	r0, r4
 80053ea:	f8d7 c094 	ldr.w	ip, [r7, #148]	@ 0x94
 80053ee:	47e0      	blx	ip
 80053f0:	e342      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080053f2 <??zcl_color_server_handle_command_12>:
 80053f2:	2002      	movs	r0, #2
 80053f4:	f88d 000a 	strb.w	r0, [sp, #10]
 80053f8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d101      	bne.n	8005404 <??zcl_color_server_handle_command_67>
 8005400:	2081      	movs	r0, #129	@ 0x81
 8005402:	e339      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005404 <??zcl_color_server_handle_command_67>:
 8005404:	f05f 0906 	movs.w	r9, #6
 8005408:	f05f 0a00 	movs.w	sl, #0
 800540c:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
 8005410:	4652      	mov	r2, sl
 8005412:	4649      	mov	r1, r9
 8005414:	4658      	mov	r0, fp
 8005416:	f002 fba5 	bl	8007b64 <__aeabi_memset>
 800541a:	4640      	mov	r0, r8
 800541c:	b280      	uxth	r0, r0
 800541e:	2806      	cmp	r0, #6
 8005420:	db07      	blt.n	8005432 <??zcl_color_server_handle_command_68>
 8005422:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005424:	7900      	ldrb	r0, [r0, #4]
 8005426:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 800542a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800542c:	7940      	ldrb	r0, [r0, #5]
 800542e:	f88d 0035 	strb.w	r0, [sp, #53]	@ 0x35

08005432 <??zcl_color_server_handle_command_68>:
 8005432:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 8005436:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800543a:	0020      	movs	r0, r4
 800543c:	f7ff fb48 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005440:	2800      	cmp	r0, #0
 8005442:	d101      	bne.n	8005448 <??zcl_color_server_handle_command_69>
 8005444:	2070      	movs	r0, #112	@ 0x70
 8005446:	e317      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005448 <??zcl_color_server_handle_command_69>:
 8005448:	2002      	movs	r0, #2
 800544a:	9001      	str	r0, [sp, #4]
 800544c:	2001      	movs	r0, #1
 800544e:	9000      	str	r0, [sp, #0]
 8005450:	f10d 030a 	add.w	r3, sp, #10
 8005454:	2208      	movs	r2, #8
 8005456:	2100      	movs	r1, #0
 8005458:	0020      	movs	r0, r4
 800545a:	f7fb f916 	bl	800068a <ZbZclAttrWrite>
 800545e:	2002      	movs	r0, #2
 8005460:	9001      	str	r0, [sp, #4]
 8005462:	2001      	movs	r0, #1
 8005464:	9000      	str	r0, [sp, #0]
 8005466:	f10d 030a 	add.w	r3, sp, #10
 800546a:	f244 0201 	movw	r2, #16385	@ 0x4001
 800546e:	2100      	movs	r1, #0
 8005470:	0020      	movs	r0, r4
 8005472:	f7fb f90a 	bl	800068a <ZbZclAttrWrite>
 8005476:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005478:	f001 fd49 	bl	8006f0e <pletoh16>
 800547c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8005480:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8005484:	f5b0 4f7f 	cmp.w	r0, #65280	@ 0xff00
 8005488:	db03      	blt.n	8005492 <??zcl_color_server_handle_command_70>
 800548a:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 800548e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30

08005492 <??zcl_color_server_handle_command_70>:
 8005492:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005494:	1c80      	adds	r0, r0, #2
 8005496:	f001 fd3a 	bl	8006f0e <pletoh16>
 800549a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800549e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054a0:	aa2e      	add	r2, sp, #184	@ 0xb8
 80054a2:	a90c      	add	r1, sp, #48	@ 0x30
 80054a4:	0020      	movs	r0, r4
 80054a6:	f8d7 c098 	ldr.w	ip, [r7, #152]	@ 0x98
 80054aa:	47e0      	blx	ip
 80054ac:	e2e4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080054ae <??zcl_color_server_handle_command_13>:
 80054ae:	2000      	movs	r0, #0
 80054b0:	f88d 001c 	strb.w	r0, [sp, #28]
 80054b4:	2003      	movs	r0, #3
 80054b6:	f88d 001b 	strb.w	r0, [sp, #27]
 80054ba:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80054bc:	2805      	cmp	r0, #5
 80054be:	da01      	bge.n	80054c4 <??zcl_color_server_handle_command_71>
 80054c0:	2080      	movs	r0, #128	@ 0x80
 80054c2:	e2d9      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080054c4 <??zcl_color_server_handle_command_71>:
 80054c4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d101      	bne.n	80054d0 <??zcl_color_server_handle_command_72>
 80054cc:	2081      	movs	r0, #129	@ 0x81
 80054ce:	e2d3      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080054d0 <??zcl_color_server_handle_command_72>:
 80054d0:	f05f 0908 	movs.w	r9, #8
 80054d4:	f05f 0a00 	movs.w	sl, #0
 80054d8:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 80054dc:	4652      	mov	r2, sl
 80054de:	4649      	mov	r1, r9
 80054e0:	4658      	mov	r0, fp
 80054e2:	f002 fb3f 	bl	8007b64 <__aeabi_memset>
 80054e6:	4640      	mov	r0, r8
 80054e8:	b280      	uxth	r0, r0
 80054ea:	2807      	cmp	r0, #7
 80054ec:	db07      	blt.n	80054fe <??zcl_color_server_handle_command_73>
 80054ee:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80054f0:	7940      	ldrb	r0, [r0, #5]
 80054f2:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
 80054f6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80054f8:	7980      	ldrb	r0, [r0, #6]
 80054fa:	f88d 0057 	strb.w	r0, [sp, #87]	@ 0x57

080054fe <??zcl_color_server_handle_command_73>:
 80054fe:	f89d 2057 	ldrb.w	r2, [sp, #87]	@ 0x57
 8005502:	f89d 1056 	ldrb.w	r1, [sp, #86]	@ 0x56
 8005506:	0020      	movs	r0, r4
 8005508:	f7ff fae2 	bl	8004ad0 <zcl_color_options_cmd_allow>
 800550c:	2800      	cmp	r0, #0
 800550e:	d101      	bne.n	8005514 <??zcl_color_server_handle_command_74>
 8005510:	2070      	movs	r0, #112	@ 0x70
 8005512:	e2b1      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005514 <??zcl_color_server_handle_command_74>:
 8005514:	2002      	movs	r0, #2
 8005516:	9001      	str	r0, [sp, #4]
 8005518:	2001      	movs	r0, #1
 800551a:	9000      	str	r0, [sp, #0]
 800551c:	ab07      	add	r3, sp, #28
 800551e:	2208      	movs	r2, #8
 8005520:	2100      	movs	r1, #0
 8005522:	0020      	movs	r0, r4
 8005524:	f7fb f8b1 	bl	800068a <ZbZclAttrWrite>
 8005528:	2002      	movs	r0, #2
 800552a:	9001      	str	r0, [sp, #4]
 800552c:	2001      	movs	r0, #1
 800552e:	9000      	str	r0, [sp, #0]
 8005530:	f10d 031b 	add.w	r3, sp, #27
 8005534:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005538:	2100      	movs	r1, #0
 800553a:	0020      	movs	r0, r4
 800553c:	f7fb f8a5 	bl	800068a <ZbZclAttrWrite>
 8005540:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005542:	f001 fce4 	bl	8006f0e <pletoh16>
 8005546:	f8ad 0050 	strh.w	r0, [sp, #80]	@ 0x50
 800554a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800554c:	7880      	ldrb	r0, [r0, #2]
 800554e:	f88d 0052 	strb.w	r0, [sp, #82]	@ 0x52
 8005552:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005554:	1cc0      	adds	r0, r0, #3
 8005556:	f001 fcda 	bl	8006f0e <pletoh16>
 800555a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 800555e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005560:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005562:	a914      	add	r1, sp, #80	@ 0x50
 8005564:	0020      	movs	r0, r4
 8005566:	f8d7 c09c 	ldr.w	ip, [r7, #156]	@ 0x9c
 800556a:	47e0      	blx	ip
 800556c:	e284      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800556e <??zcl_color_server_handle_command_14>:
 800556e:	2000      	movs	r0, #0
 8005570:	f88d 001a 	strb.w	r0, [sp, #26]
 8005574:	2003      	movs	r0, #3
 8005576:	f88d 0019 	strb.w	r0, [sp, #25]
 800557a:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800557c:	2803      	cmp	r0, #3
 800557e:	da01      	bge.n	8005584 <??zcl_color_server_handle_command_75>
 8005580:	2080      	movs	r0, #128	@ 0x80
 8005582:	e279      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005584 <??zcl_color_server_handle_command_75>:
 8005584:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8005588:	2800      	cmp	r0, #0
 800558a:	d101      	bne.n	8005590 <??zcl_color_server_handle_command_76>
 800558c:	2081      	movs	r0, #129	@ 0x81
 800558e:	e273      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005590 <??zcl_color_server_handle_command_76>:
 8005590:	f05f 0906 	movs.w	r9, #6
 8005594:	f05f 0a00 	movs.w	sl, #0
 8005598:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800559c:	4652      	mov	r2, sl
 800559e:	4649      	mov	r1, r9
 80055a0:	4658      	mov	r0, fp
 80055a2:	f002 fadf 	bl	8007b64 <__aeabi_memset>
 80055a6:	4640      	mov	r0, r8
 80055a8:	b280      	uxth	r0, r0
 80055aa:	2805      	cmp	r0, #5
 80055ac:	db07      	blt.n	80055be <??zcl_color_server_handle_command_77>
 80055ae:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055b0:	78c0      	ldrb	r0, [r0, #3]
 80055b2:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
 80055b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055b8:	7900      	ldrb	r0, [r0, #4]
 80055ba:	f88d 002d 	strb.w	r0, [sp, #45]	@ 0x2d

080055be <??zcl_color_server_handle_command_77>:
 80055be:	f89d 202d 	ldrb.w	r2, [sp, #45]	@ 0x2d
 80055c2:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 80055c6:	0020      	movs	r0, r4
 80055c8:	f7ff fa82 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d101      	bne.n	80055d4 <??zcl_color_server_handle_command_78>
 80055d0:	2070      	movs	r0, #112	@ 0x70
 80055d2:	e251      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080055d4 <??zcl_color_server_handle_command_78>:
 80055d4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055d6:	7800      	ldrb	r0, [r0, #0]
 80055d8:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80055dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055de:	1c40      	adds	r0, r0, #1
 80055e0:	f001 fc95 	bl	8006f0e <pletoh16>
 80055e4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80055e8:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 80055ec:	2801      	cmp	r0, #1
 80055ee:	d003      	beq.n	80055f8 <??zcl_color_server_handle_command_79>
 80055f0:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 80055f4:	2803      	cmp	r0, #3
 80055f6:	d105      	bne.n	8005604 <??zcl_color_server_handle_command_80>

080055f8 <??zcl_color_server_handle_command_79>:
 80055f8:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d101      	bne.n	8005604 <??zcl_color_server_handle_command_80>
 8005600:	2085      	movs	r0, #133	@ 0x85
 8005602:	e239      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005604 <??zcl_color_server_handle_command_80>:
 8005604:	2002      	movs	r0, #2
 8005606:	9001      	str	r0, [sp, #4]
 8005608:	2001      	movs	r0, #1
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	f10d 031a 	add.w	r3, sp, #26
 8005610:	2208      	movs	r2, #8
 8005612:	2100      	movs	r1, #0
 8005614:	0020      	movs	r0, r4
 8005616:	f7fb f838 	bl	800068a <ZbZclAttrWrite>
 800561a:	2002      	movs	r0, #2
 800561c:	9001      	str	r0, [sp, #4]
 800561e:	2001      	movs	r0, #1
 8005620:	9000      	str	r0, [sp, #0]
 8005622:	f10d 0319 	add.w	r3, sp, #25
 8005626:	f244 0201 	movw	r2, #16385	@ 0x4001
 800562a:	2100      	movs	r1, #0
 800562c:	0020      	movs	r0, r4
 800562e:	f7fb f82c 	bl	800068a <ZbZclAttrWrite>
 8005632:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005634:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005636:	a90a      	add	r1, sp, #40	@ 0x28
 8005638:	0020      	movs	r0, r4
 800563a:	f8d7 c0a0 	ldr.w	ip, [r7, #160]	@ 0xa0
 800563e:	47e0      	blx	ip
 8005640:	e21a      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005642 <??zcl_color_server_handle_command_15>:
 8005642:	2000      	movs	r0, #0
 8005644:	f88d 0018 	strb.w	r0, [sp, #24]
 8005648:	2003      	movs	r0, #3
 800564a:	f88d 0017 	strb.w	r0, [sp, #23]
 800564e:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005650:	2805      	cmp	r0, #5
 8005652:	da01      	bge.n	8005658 <??zcl_color_server_handle_command_81>
 8005654:	2080      	movs	r0, #128	@ 0x80
 8005656:	e20f      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005658 <??zcl_color_server_handle_command_81>:
 8005658:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800565c:	2800      	cmp	r0, #0
 800565e:	d101      	bne.n	8005664 <??zcl_color_server_handle_command_82>
 8005660:	2081      	movs	r0, #129	@ 0x81
 8005662:	e209      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005664 <??zcl_color_server_handle_command_82>:
 8005664:	f05f 0908 	movs.w	r9, #8
 8005668:	f05f 0a00 	movs.w	sl, #0
 800566c:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8005670:	4652      	mov	r2, sl
 8005672:	4649      	mov	r1, r9
 8005674:	4658      	mov	r0, fp
 8005676:	f002 fa75 	bl	8007b64 <__aeabi_memset>
 800567a:	4640      	mov	r0, r8
 800567c:	b280      	uxth	r0, r0
 800567e:	2807      	cmp	r0, #7
 8005680:	db07      	blt.n	8005692 <??zcl_color_server_handle_command_83>
 8005682:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005684:	7940      	ldrb	r0, [r0, #5]
 8005686:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
 800568a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800568c:	7980      	ldrb	r0, [r0, #6]
 800568e:	f88d 004f 	strb.w	r0, [sp, #79]	@ 0x4f

08005692 <??zcl_color_server_handle_command_83>:
 8005692:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 8005696:	f89d 104e 	ldrb.w	r1, [sp, #78]	@ 0x4e
 800569a:	0020      	movs	r0, r4
 800569c:	f7ff fa18 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d101      	bne.n	80056a8 <??zcl_color_server_handle_command_84>
 80056a4:	2070      	movs	r0, #112	@ 0x70
 80056a6:	e1e7      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080056a8 <??zcl_color_server_handle_command_84>:
 80056a8:	2002      	movs	r0, #2
 80056aa:	9001      	str	r0, [sp, #4]
 80056ac:	2001      	movs	r0, #1
 80056ae:	9000      	str	r0, [sp, #0]
 80056b0:	ab06      	add	r3, sp, #24
 80056b2:	2208      	movs	r2, #8
 80056b4:	2100      	movs	r1, #0
 80056b6:	0020      	movs	r0, r4
 80056b8:	f7fa ffe7 	bl	800068a <ZbZclAttrWrite>
 80056bc:	2002      	movs	r0, #2
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	2001      	movs	r0, #1
 80056c2:	9000      	str	r0, [sp, #0]
 80056c4:	f10d 0317 	add.w	r3, sp, #23
 80056c8:	f244 0201 	movw	r2, #16385	@ 0x4001
 80056cc:	2100      	movs	r1, #0
 80056ce:	0020      	movs	r0, r4
 80056d0:	f7fa ffdb 	bl	800068a <ZbZclAttrWrite>
 80056d4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80056d6:	7800      	ldrb	r0, [r0, #0]
 80056d8:	f88d 0048 	strb.w	r0, [sp, #72]	@ 0x48
 80056dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80056de:	1c40      	adds	r0, r0, #1
 80056e0:	f001 fc15 	bl	8006f0e <pletoh16>
 80056e4:	f8ad 004a 	strh.w	r0, [sp, #74]	@ 0x4a
 80056e8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80056ea:	1cc0      	adds	r0, r0, #3
 80056ec:	f001 fc0f 	bl	8006f0e <pletoh16>
 80056f0:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
 80056f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80056f6:	aa2e      	add	r2, sp, #184	@ 0xb8
 80056f8:	a912      	add	r1, sp, #72	@ 0x48
 80056fa:	0020      	movs	r0, r4
 80056fc:	f8d7 c0a4 	ldr.w	ip, [r7, #164]	@ 0xa4
 8005700:	47e0      	blx	ip
 8005702:	e1b9      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005704 <??zcl_color_server_handle_command_16>:
 8005704:	2000      	movs	r0, #0
 8005706:	f88d 0016 	strb.w	r0, [sp, #22]
 800570a:	2003      	movs	r0, #3
 800570c:	f88d 0015 	strb.w	r0, [sp, #21]
 8005710:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005712:	2805      	cmp	r0, #5
 8005714:	da01      	bge.n	800571a <??zcl_color_server_handle_command_85>
 8005716:	2080      	movs	r0, #128	@ 0x80
 8005718:	e1ae      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800571a <??zcl_color_server_handle_command_85>:
 800571a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800571e:	2800      	cmp	r0, #0
 8005720:	d101      	bne.n	8005726 <??zcl_color_server_handle_command_86>
 8005722:	2081      	movs	r0, #129	@ 0x81
 8005724:	e1a8      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005726 <??zcl_color_server_handle_command_86>:
 8005726:	f05f 0908 	movs.w	r9, #8
 800572a:	f05f 0a00 	movs.w	sl, #0
 800572e:	f10d 0b40 	add.w	fp, sp, #64	@ 0x40
 8005732:	4652      	mov	r2, sl
 8005734:	4649      	mov	r1, r9
 8005736:	4658      	mov	r0, fp
 8005738:	f002 fa14 	bl	8007b64 <__aeabi_memset>
 800573c:	4640      	mov	r0, r8
 800573e:	b280      	uxth	r0, r0
 8005740:	2807      	cmp	r0, #7
 8005742:	db07      	blt.n	8005754 <??zcl_color_server_handle_command_87>
 8005744:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005746:	7940      	ldrb	r0, [r0, #5]
 8005748:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 800574c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800574e:	7980      	ldrb	r0, [r0, #6]
 8005750:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47

08005754 <??zcl_color_server_handle_command_87>:
 8005754:	f89d 2047 	ldrb.w	r2, [sp, #71]	@ 0x47
 8005758:	f89d 1046 	ldrb.w	r1, [sp, #70]	@ 0x46
 800575c:	0020      	movs	r0, r4
 800575e:	f7ff f9b7 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005762:	2800      	cmp	r0, #0
 8005764:	d101      	bne.n	800576a <??zcl_color_server_handle_command_88>
 8005766:	2070      	movs	r0, #112	@ 0x70
 8005768:	e186      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800576a <??zcl_color_server_handle_command_88>:
 800576a:	2002      	movs	r0, #2
 800576c:	9001      	str	r0, [sp, #4]
 800576e:	2001      	movs	r0, #1
 8005770:	9000      	str	r0, [sp, #0]
 8005772:	f10d 0316 	add.w	r3, sp, #22
 8005776:	2208      	movs	r2, #8
 8005778:	2100      	movs	r1, #0
 800577a:	0020      	movs	r0, r4
 800577c:	f7fa ff85 	bl	800068a <ZbZclAttrWrite>
 8005780:	2002      	movs	r0, #2
 8005782:	9001      	str	r0, [sp, #4]
 8005784:	2001      	movs	r0, #1
 8005786:	9000      	str	r0, [sp, #0]
 8005788:	f10d 0315 	add.w	r3, sp, #21
 800578c:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005790:	2100      	movs	r1, #0
 8005792:	0020      	movs	r0, r4
 8005794:	f7fa ff79 	bl	800068a <ZbZclAttrWrite>
 8005798:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800579a:	f001 fbb8 	bl	8006f0e <pletoh16>
 800579e:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80057a2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80057a4:	7880      	ldrb	r0, [r0, #2]
 80057a6:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
 80057aa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80057ac:	1cc0      	adds	r0, r0, #3
 80057ae:	f001 fbae 	bl	8006f0e <pletoh16>
 80057b2:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 80057b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057b8:	aa2e      	add	r2, sp, #184	@ 0xb8
 80057ba:	a910      	add	r1, sp, #64	@ 0x40
 80057bc:	0020      	movs	r0, r4
 80057be:	f8d7 c0a8 	ldr.w	ip, [r7, #168]	@ 0xa8
 80057c2:	47e0      	blx	ip
 80057c4:	e158      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080057c6 <??zcl_color_server_handle_command_17>:
 80057c6:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80057c8:	2807      	cmp	r0, #7
 80057ca:	da01      	bge.n	80057d0 <??zcl_color_server_handle_command_89>
 80057cc:	2080      	movs	r0, #128	@ 0x80
 80057ce:	e153      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080057d0 <??zcl_color_server_handle_command_89>:
 80057d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d101      	bne.n	80057dc <??zcl_color_server_handle_command_90>
 80057d8:	2081      	movs	r0, #129	@ 0x81
 80057da:	e14d      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080057dc <??zcl_color_server_handle_command_90>:
 80057dc:	f05f 090a 	movs.w	r9, #10
 80057e0:	f05f 0a00 	movs.w	sl, #0
 80057e4:	f10d 0ba8 	add.w	fp, sp, #168	@ 0xa8
 80057e8:	4652      	mov	r2, sl
 80057ea:	4649      	mov	r1, r9
 80057ec:	4658      	mov	r0, fp
 80057ee:	f002 f9b9 	bl	8007b64 <__aeabi_memset>
 80057f2:	4640      	mov	r0, r8
 80057f4:	b280      	uxth	r0, r0
 80057f6:	2809      	cmp	r0, #9
 80057f8:	db07      	blt.n	800580a <??zcl_color_server_handle_command_91>
 80057fa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80057fc:	79c0      	ldrb	r0, [r0, #7]
 80057fe:	f88d 00b0 	strb.w	r0, [sp, #176]	@ 0xb0
 8005802:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005804:	7a00      	ldrb	r0, [r0, #8]
 8005806:	f88d 00b1 	strb.w	r0, [sp, #177]	@ 0xb1

0800580a <??zcl_color_server_handle_command_91>:
 800580a:	f89d 20b1 	ldrb.w	r2, [sp, #177]	@ 0xb1
 800580e:	f89d 10b0 	ldrb.w	r1, [sp, #176]	@ 0xb0
 8005812:	0020      	movs	r0, r4
 8005814:	f7ff f95c 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005818:	2800      	cmp	r0, #0
 800581a:	d101      	bne.n	8005820 <??zcl_color_server_handle_command_92>
 800581c:	2070      	movs	r0, #112	@ 0x70
 800581e:	e12b      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005820 <??zcl_color_server_handle_command_92>:
 8005820:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005822:	7800      	ldrb	r0, [r0, #0]
 8005824:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
 8005828:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800582a:	7840      	ldrb	r0, [r0, #1]
 800582c:	f88d 00a9 	strb.w	r0, [sp, #169]	@ 0xa9
 8005830:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005832:	7880      	ldrb	r0, [r0, #2]
 8005834:	f88d 00aa 	strb.w	r0, [sp, #170]	@ 0xaa
 8005838:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800583a:	1cc0      	adds	r0, r0, #3
 800583c:	f001 fb67 	bl	8006f0e <pletoh16>
 8005840:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 8005844:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005846:	1d40      	adds	r0, r0, #5
 8005848:	f001 fb61 	bl	8006f0e <pletoh16>
 800584c:	f8ad 00ae 	strh.w	r0, [sp, #174]	@ 0xae
 8005850:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005852:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005854:	a92a      	add	r1, sp, #168	@ 0xa8
 8005856:	0020      	movs	r0, r4
 8005858:	f8d7 c0ac 	ldr.w	ip, [r7, #172]	@ 0xac
 800585c:	47e0      	blx	ip
 800585e:	e10b      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005860 <??zcl_color_server_handle_command_18>:
 8005860:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8005864:	2800      	cmp	r0, #0
 8005866:	d101      	bne.n	800586c <??zcl_color_server_handle_command_93>
 8005868:	2081      	movs	r0, #129	@ 0x81
 800586a:	e105      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800586c <??zcl_color_server_handle_command_93>:
 800586c:	f05f 0902 	movs.w	r9, #2
 8005870:	f05f 0a00 	movs.w	sl, #0
 8005874:	46eb      	mov	fp, sp
 8005876:	4652      	mov	r2, sl
 8005878:	4649      	mov	r1, r9
 800587a:	4658      	mov	r0, fp
 800587c:	f002 f972 	bl	8007b64 <__aeabi_memset>
 8005880:	4640      	mov	r0, r8
 8005882:	b280      	uxth	r0, r0
 8005884:	2802      	cmp	r0, #2
 8005886:	db07      	blt.n	8005898 <??zcl_color_server_handle_command_94>
 8005888:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800588a:	7800      	ldrb	r0, [r0, #0]
 800588c:	f88d 0000 	strb.w	r0, [sp]
 8005890:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005892:	7840      	ldrb	r0, [r0, #1]
 8005894:	f88d 0001 	strb.w	r0, [sp, #1]

08005898 <??zcl_color_server_handle_command_94>:
 8005898:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800589c:	f89d 1000 	ldrb.w	r1, [sp]
 80058a0:	0020      	movs	r0, r4
 80058a2:	f7ff f915 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d101      	bne.n	80058ae <??zcl_color_server_handle_command_95>
 80058aa:	2070      	movs	r0, #112	@ 0x70
 80058ac:	e0e4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058ae <??zcl_color_server_handle_command_95>:
 80058ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80058b0:	aa2e      	add	r2, sp, #184	@ 0xb8
 80058b2:	4669      	mov	r1, sp
 80058b4:	0020      	movs	r0, r4
 80058b6:	f8d7 c0b0 	ldr.w	ip, [r7, #176]	@ 0xb0
 80058ba:	47e0      	blx	ip
 80058bc:	e0dc      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058be <??zcl_color_server_handle_command_19>:
 80058be:	2002      	movs	r0, #2
 80058c0:	f88d 0009 	strb.w	r0, [sp, #9]
 80058c4:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80058c6:	2807      	cmp	r0, #7
 80058c8:	da01      	bge.n	80058ce <??zcl_color_server_handle_command_96>
 80058ca:	2080      	movs	r0, #128	@ 0x80
 80058cc:	e0d4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058ce <??zcl_color_server_handle_command_96>:
 80058ce:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d101      	bne.n	80058da <??zcl_color_server_handle_command_97>
 80058d6:	2081      	movs	r0, #129	@ 0x81
 80058d8:	e0ce      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058da <??zcl_color_server_handle_command_97>:
 80058da:	f05f 090a 	movs.w	r9, #10
 80058de:	f05f 0a00 	movs.w	sl, #0
 80058e2:	f10d 0b88 	add.w	fp, sp, #136	@ 0x88
 80058e6:	4652      	mov	r2, sl
 80058e8:	4649      	mov	r1, r9
 80058ea:	4658      	mov	r0, fp
 80058ec:	f002 f93a 	bl	8007b64 <__aeabi_memset>
 80058f0:	4640      	mov	r0, r8
 80058f2:	b280      	uxth	r0, r0
 80058f4:	2809      	cmp	r0, #9
 80058f6:	db07      	blt.n	8005908 <??zcl_color_server_handle_command_98>
 80058f8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80058fa:	79c0      	ldrb	r0, [r0, #7]
 80058fc:	f88d 0090 	strb.w	r0, [sp, #144]	@ 0x90
 8005900:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005902:	7a00      	ldrb	r0, [r0, #8]
 8005904:	f88d 0091 	strb.w	r0, [sp, #145]	@ 0x91

08005908 <??zcl_color_server_handle_command_98>:
 8005908:	f89d 2091 	ldrb.w	r2, [sp, #145]	@ 0x91
 800590c:	f89d 1090 	ldrb.w	r1, [sp, #144]	@ 0x90
 8005910:	0020      	movs	r0, r4
 8005912:	f7ff f8dd 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005916:	2800      	cmp	r0, #0
 8005918:	d101      	bne.n	800591e <??zcl_color_server_handle_command_99>
 800591a:	2070      	movs	r0, #112	@ 0x70
 800591c:	e0ac      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800591e <??zcl_color_server_handle_command_99>:
 800591e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005920:	7800      	ldrb	r0, [r0, #0]
 8005922:	f88d 0088 	strb.w	r0, [sp, #136]	@ 0x88
 8005926:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005928:	1c40      	adds	r0, r0, #1
 800592a:	f001 faf0 	bl	8006f0e <pletoh16>
 800592e:	f8ad 008a 	strh.w	r0, [sp, #138]	@ 0x8a
 8005932:	f89d 0088 	ldrb.w	r0, [sp, #136]	@ 0x88
 8005936:	2801      	cmp	r0, #1
 8005938:	d003      	beq.n	8005942 <??zcl_color_server_handle_command_100>
 800593a:	f89d 0088 	ldrb.w	r0, [sp, #136]	@ 0x88
 800593e:	2803      	cmp	r0, #3
 8005940:	d105      	bne.n	800594e <??zcl_color_server_handle_command_101>

08005942 <??zcl_color_server_handle_command_100>:
 8005942:	f8bd 008a 	ldrh.w	r0, [sp, #138]	@ 0x8a
 8005946:	2800      	cmp	r0, #0
 8005948:	d101      	bne.n	800594e <??zcl_color_server_handle_command_101>
 800594a:	2085      	movs	r0, #133	@ 0x85
 800594c:	e094      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800594e <??zcl_color_server_handle_command_101>:
 800594e:	2002      	movs	r0, #2
 8005950:	9001      	str	r0, [sp, #4]
 8005952:	2001      	movs	r0, #1
 8005954:	9000      	str	r0, [sp, #0]
 8005956:	f10d 0309 	add.w	r3, sp, #9
 800595a:	2208      	movs	r2, #8
 800595c:	2100      	movs	r1, #0
 800595e:	0020      	movs	r0, r4
 8005960:	f7fa fe93 	bl	800068a <ZbZclAttrWrite>
 8005964:	2002      	movs	r0, #2
 8005966:	9001      	str	r0, [sp, #4]
 8005968:	2001      	movs	r0, #1
 800596a:	9000      	str	r0, [sp, #0]
 800596c:	f10d 0309 	add.w	r3, sp, #9
 8005970:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005974:	2100      	movs	r1, #0
 8005976:	0020      	movs	r0, r4
 8005978:	f7fa fe87 	bl	800068a <ZbZclAttrWrite>
 800597c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800597e:	1cc0      	adds	r0, r0, #3
 8005980:	f001 fac5 	bl	8006f0e <pletoh16>
 8005984:	f8ad 008c 	strh.w	r0, [sp, #140]	@ 0x8c
 8005988:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800598a:	1d40      	adds	r0, r0, #5
 800598c:	f001 fabf 	bl	8006f0e <pletoh16>
 8005990:	f8ad 008e 	strh.w	r0, [sp, #142]	@ 0x8e
 8005994:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005996:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005998:	a922      	add	r1, sp, #136	@ 0x88
 800599a:	0020      	movs	r0, r4
 800599c:	f8d7 c0b4 	ldr.w	ip, [r7, #180]	@ 0xb4
 80059a0:	47e0      	blx	ip
 80059a2:	e069      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080059a4 <??zcl_color_server_handle_command_20>:
 80059a4:	2002      	movs	r0, #2
 80059a6:	f88d 0008 	strb.w	r0, [sp, #8]
 80059aa:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80059ac:	2809      	cmp	r0, #9
 80059ae:	da01      	bge.n	80059b4 <??zcl_color_server_handle_command_102>
 80059b0:	2080      	movs	r0, #128	@ 0x80
 80059b2:	e061      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080059b4 <??zcl_color_server_handle_command_102>:
 80059b4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d101      	bne.n	80059c0 <??zcl_color_server_handle_command_103>
 80059bc:	2081      	movs	r0, #129	@ 0x81
 80059be:	e05b      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080059c0 <??zcl_color_server_handle_command_103>:
 80059c0:	f05f 090c 	movs.w	r9, #12
 80059c4:	f05f 0a00 	movs.w	sl, #0
 80059c8:	f10d 0b9c 	add.w	fp, sp, #156	@ 0x9c
 80059cc:	4652      	mov	r2, sl
 80059ce:	4649      	mov	r1, r9
 80059d0:	4658      	mov	r0, fp
 80059d2:	f002 f8c7 	bl	8007b64 <__aeabi_memset>
 80059d6:	4640      	mov	r0, r8
 80059d8:	b280      	uxth	r0, r0
 80059da:	280b      	cmp	r0, #11
 80059dc:	db07      	blt.n	80059ee <??zcl_color_server_handle_command_104>
 80059de:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80059e0:	7a40      	ldrb	r0, [r0, #9]
 80059e2:	f88d 00a6 	strb.w	r0, [sp, #166]	@ 0xa6
 80059e6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80059e8:	7a80      	ldrb	r0, [r0, #10]
 80059ea:	f88d 00a7 	strb.w	r0, [sp, #167]	@ 0xa7

080059ee <??zcl_color_server_handle_command_104>:
 80059ee:	f89d 20a7 	ldrb.w	r2, [sp, #167]	@ 0xa7
 80059f2:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80059f6:	0020      	movs	r0, r4
 80059f8:	f7ff f86a 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d101      	bne.n	8005a04 <??zcl_color_server_handle_command_105>
 8005a00:	2070      	movs	r0, #112	@ 0x70
 8005a02:	e039      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005a04 <??zcl_color_server_handle_command_105>:
 8005a04:	2002      	movs	r0, #2
 8005a06:	9001      	str	r0, [sp, #4]
 8005a08:	2001      	movs	r0, #1
 8005a0a:	9000      	str	r0, [sp, #0]
 8005a0c:	ab02      	add	r3, sp, #8
 8005a0e:	2208      	movs	r2, #8
 8005a10:	2100      	movs	r1, #0
 8005a12:	0020      	movs	r0, r4
 8005a14:	f7fa fe39 	bl	800068a <ZbZclAttrWrite>
 8005a18:	2002      	movs	r0, #2
 8005a1a:	9001      	str	r0, [sp, #4]
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	9000      	str	r0, [sp, #0]
 8005a20:	ab02      	add	r3, sp, #8
 8005a22:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005a26:	2100      	movs	r1, #0
 8005a28:	0020      	movs	r0, r4
 8005a2a:	f7fa fe2e 	bl	800068a <ZbZclAttrWrite>
 8005a2e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a30:	7800      	ldrb	r0, [r0, #0]
 8005a32:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
 8005a36:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a38:	1c40      	adds	r0, r0, #1
 8005a3a:	f001 fa68 	bl	8006f0e <pletoh16>
 8005a3e:	f8ad 009e 	strh.w	r0, [sp, #158]	@ 0x9e
 8005a42:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a44:	1cc0      	adds	r0, r0, #3
 8005a46:	f001 fa62 	bl	8006f0e <pletoh16>
 8005a4a:	f8ad 00a0 	strh.w	r0, [sp, #160]	@ 0xa0
 8005a4e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a50:	1d40      	adds	r0, r0, #5
 8005a52:	f001 fa5c 	bl	8006f0e <pletoh16>
 8005a56:	f8ad 00a2 	strh.w	r0, [sp, #162]	@ 0xa2
 8005a5a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a5c:	1dc0      	adds	r0, r0, #7
 8005a5e:	f001 fa56 	bl	8006f0e <pletoh16>
 8005a62:	f8ad 00a4 	strh.w	r0, [sp, #164]	@ 0xa4
 8005a66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a68:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005a6a:	a927      	add	r1, sp, #156	@ 0x9c
 8005a6c:	0020      	movs	r0, r4
 8005a6e:	f8d7 c0b8 	ldr.w	ip, [r7, #184]	@ 0xb8
 8005a72:	47e0      	blx	ip
 8005a74:	e000      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005a76 <??zcl_color_server_handle_command_21>:
 8005a76:	2081      	movs	r0, #129	@ 0x81

08005a78 <??zcl_color_server_handle_command_1>:
 8005a78:	b035      	add	sp, #212	@ 0xd4
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a7e <zcl_attr_write_cb>:
 8005a7e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	0005      	movs	r5, r0
 8005a86:	0016      	movs	r6, r2
 8005a88:	001f      	movs	r7, r3
 8005a8a:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8005a8e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005a90:	f05f 0900 	movs.w	r9, #0
 8005a94:	0030      	movs	r0, r6
 8005a96:	b280      	uxth	r0, r0
 8005a98:	f244 010d 	movw	r1, #16397	@ 0x400d
 8005a9c:	4288      	cmp	r0, r1
 8005a9e:	d129      	bne.n	8005af4 <??zcl_attr_write_cb_0>
 8005aa0:	0038      	movs	r0, r7
 8005aa2:	f001 fa34 	bl	8006f0e <pletoh16>
 8005aa6:	f8ad 0000 	strh.w	r0, [sp]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2200      	movs	r2, #0
 8005aae:	f244 010b 	movw	r1, #16395	@ 0x400b
 8005ab2:	0028      	movs	r0, r5
 8005ab4:	f7fb ff88 	bl	80019c8 <ZbZclAttrIntegerRead>
 8005ab8:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005abc:	2300      	movs	r3, #0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2107      	movs	r1, #7
 8005ac2:	0028      	movs	r0, r5
 8005ac4:	f7fb ff80 	bl	80019c8 <ZbZclAttrIntegerRead>
 8005ac8:	f8ad 0002 	strh.w	r0, [sp, #2]
 8005acc:	f8bd 0000 	ldrh.w	r0, [sp]
 8005ad0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005ad4:	4288      	cmp	r0, r1
 8005ad6:	d305      	bcc.n	8005ae4 <??zcl_attr_write_cb_1>
 8005ad8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8005adc:	f8bd 1000 	ldrh.w	r1, [sp]
 8005ae0:	4288      	cmp	r0, r1
 8005ae2:	d202      	bcs.n	8005aea <??zcl_attr_write_cb_2>

08005ae4 <??zcl_attr_write_cb_1>:
 8005ae4:	f05f 0a87 	movs.w	sl, #135	@ 0x87
 8005ae8:	e006      	b.n	8005af8 <??zcl_attr_write_cb_3>

08005aea <??zcl_attr_write_cb_2>:
 8005aea:	2002      	movs	r0, #2
 8005aec:	4681      	mov	r9, r0
 8005aee:	f05f 0a00 	movs.w	sl, #0
 8005af2:	e001      	b.n	8005af8 <??zcl_attr_write_cb_3>

08005af4 <??zcl_attr_write_cb_0>:
 8005af4:	f05f 0a86 	movs.w	sl, #134	@ 0x86

08005af8 <??zcl_attr_write_cb_3>:
 8005af8:	0020      	movs	r0, r4
 8005afa:	b280      	uxth	r0, r0
 8005afc:	07c0      	lsls	r0, r0, #31
 8005afe:	d40c      	bmi.n	8005b1a <??zcl_attr_write_cb_4>
 8005b00:	4650      	mov	r0, sl
 8005b02:	b2c0      	uxtb	r0, r0
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d108      	bne.n	8005b1a <??zcl_attr_write_cb_4>
 8005b08:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b0c:	9702      	str	r7, [sp, #8]
 8005b0e:	46c3      	mov	fp, r8
 8005b10:	9a03      	ldr	r2, [sp, #12]
 8005b12:	9902      	ldr	r1, [sp, #8]
 8005b14:	4658      	mov	r0, fp
 8005b16:	f010 f802 	bl	8015b1e <__aeabi_memcpy>

08005b1a <??zcl_attr_write_cb_4>:
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	b2c0      	uxtb	r0, r0
 8005b1e:	b005      	add	sp, #20
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b24 <zcl_persist_handle_set>:
 8005b24:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	0004      	movs	r4, r0
 8005b2a:	000d      	movs	r5, r1
 8005b2c:	0016      	movs	r6, r2
 8005b2e:	f05f 0b00 	movs.w	fp, #0

08005b32 <??zcl_persist_handle_set_0>:
 8005b32:	4658      	mov	r0, fp
 8005b34:	0031      	movs	r1, r6
 8005b36:	b280      	uxth	r0, r0
 8005b38:	b289      	uxth	r1, r1
 8005b3a:	4288      	cmp	r0, r1
 8005b3c:	d23c      	bcs.n	8005bb8 <??zcl_persist_handle_set_1>
 8005b3e:	0030      	movs	r0, r6
 8005b40:	b280      	uxth	r0, r0
 8005b42:	4659      	mov	r1, fp
 8005b44:	b289      	uxth	r1, r1
 8005b46:	1d09      	adds	r1, r1, #4
 8005b48:	4288      	cmp	r0, r1
 8005b4a:	d201      	bcs.n	8005b50 <??zcl_persist_handle_set_2>
 8005b4c:	2087      	movs	r0, #135	@ 0x87
 8005b4e:	e034      	b.n	8005bba <??zcl_persist_handle_set_3>

08005b50 <??zcl_persist_handle_set_2>:
 8005b50:	4658      	mov	r0, fp
 8005b52:	b280      	uxth	r0, r0
 8005b54:	4428      	add	r0, r5
 8005b56:	f001 f9da 	bl	8006f0e <pletoh16>
 8005b5a:	0007      	movs	r7, r0
 8005b5c:	f11b 0b02 	adds.w	fp, fp, #2
 8005b60:	4658      	mov	r0, fp
 8005b62:	b280      	uxth	r0, r0
 8005b64:	4428      	add	r0, r5
 8005b66:	f001 f9d2 	bl	8006f0e <pletoh16>
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	f11b 0b02 	adds.w	fp, fp, #2
 8005b70:	0030      	movs	r0, r6
 8005b72:	b280      	uxth	r0, r0
 8005b74:	4641      	mov	r1, r8
 8005b76:	b289      	uxth	r1, r1
 8005b78:	fa11 f18b 	uxtah	r1, r1, fp
 8005b7c:	4288      	cmp	r0, r1
 8005b7e:	da01      	bge.n	8005b84 <??zcl_persist_handle_set_4>
 8005b80:	2087      	movs	r0, #135	@ 0x87
 8005b82:	e01a      	b.n	8005bba <??zcl_persist_handle_set_3>

08005b84 <??zcl_persist_handle_set_4>:
 8005b84:	4658      	mov	r0, fp
 8005b86:	b280      	uxth	r0, r0
 8005b88:	4428      	add	r0, r5
 8005b8a:	4681      	mov	r9, r0
 8005b8c:	eb18 0b0b 	adds.w	fp, r8, fp
 8005b90:	2006      	movs	r0, #6
 8005b92:	9001      	str	r0, [sp, #4]
 8005b94:	4640      	mov	r0, r8
 8005b96:	b280      	uxth	r0, r0
 8005b98:	9000      	str	r0, [sp, #0]
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	003a      	movs	r2, r7
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	0020      	movs	r0, r4
 8005ba4:	f7fa fd71 	bl	800068a <ZbZclAttrWrite>
 8005ba8:	4682      	mov	sl, r0
 8005baa:	4650      	mov	r0, sl
 8005bac:	b2c0      	uxtb	r0, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d0bf      	beq.n	8005b32 <??zcl_persist_handle_set_0>
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	b2c0      	uxtb	r0, r0
 8005bb6:	e000      	b.n	8005bba <??zcl_persist_handle_set_3>

08005bb8 <??zcl_persist_handle_set_1>:
 8005bb8:	2000      	movs	r0, #0

08005bba <??zcl_persist_handle_set_3>:
 8005bba:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bbe <ZbZclHandleReadAttr>:
 8005bbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc2:	b092      	sub	sp, #72	@ 0x48
 8005bc4:	0005      	movs	r5, r0
 8005bc6:	000e      	movs	r6, r1
 8005bc8:	0017      	movs	r7, r2
 8005bca:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8005bce:	2300      	movs	r3, #0
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	8b69      	ldrh	r1, [r5, #26]
 8005bd4:	68a8      	ldr	r0, [r5, #8]
 8005bd6:	f00c fa6d 	bl	80120b4 <zb_heap_alloc>
 8005bda:	0004      	movs	r4, r0
 8005bdc:	2c00      	cmp	r4, #0
 8005bde:	d106      	bne.n	8005bee <??ZbZclHandleReadAttr_0>
 8005be0:	2389      	movs	r3, #137	@ 0x89
 8005be2:	0032      	movs	r2, r6
 8005be4:	0039      	movs	r1, r7
 8005be6:	0028      	movs	r0, r5
 8005be8:	f00c f8dc 	bl	8011da4 <ZbZclSendDefaultResponse>
 8005bec:	e0bd      	b.n	8005d6a <??ZbZclHandleReadAttr_1>

08005bee <??ZbZclHandleReadAttr_0>:
 8005bee:	f05f 0808 	movs.w	r8, #8
 8005bf2:	f05f 0a00 	movs.w	sl, #0
 8005bf6:	f10d 0b0c 	add.w	fp, sp, #12
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	4658      	mov	r0, fp
 8005c00:	f001 ffb0 	bl	8007b64 <__aeabi_memset>
 8005c04:	2000      	movs	r0, #0
 8005c06:	f88d 000c 	strb.w	r0, [sp, #12]
 8005c0a:	7870      	ldrb	r0, [r6, #1]
 8005c0c:	f88d 000d 	strb.w	r0, [sp, #13]
 8005c10:	78b0      	ldrb	r0, [r6, #2]
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d101      	bne.n	8005c1a <??ZbZclHandleReadAttr_2>
 8005c16:	2001      	movs	r0, #1
 8005c18:	e000      	b.n	8005c1c <??ZbZclHandleReadAttr_3>

08005c1a <??ZbZclHandleReadAttr_2>:
 8005c1a:	2000      	movs	r0, #0

08005c1c <??ZbZclHandleReadAttr_3>:
 8005c1c:	f88d 000e 	strb.w	r0, [sp, #14]
 8005c20:	2001      	movs	r0, #1
 8005c22:	f88d 000f 	strb.w	r0, [sp, #15]
 8005c26:	88b0      	ldrh	r0, [r6, #4]
 8005c28:	f8ad 0010 	strh.w	r0, [sp, #16]
 8005c2c:	79b0      	ldrb	r0, [r6, #6]
 8005c2e:	f88d 0012 	strb.w	r0, [sp, #18]
 8005c32:	2001      	movs	r0, #1
 8005c34:	f88d 0013 	strb.w	r0, [sp, #19]
 8005c38:	8b6a      	ldrh	r2, [r5, #26]
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	a803      	add	r0, sp, #12
 8005c3e:	f000 fca5 	bl	800658c <ZbZclAppendHeader>
 8005c42:	4680      	mov	r8, r0
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	d50c      	bpl.n	8005c64 <??ZbZclHandleReadAttr_4>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	464a      	mov	r2, r9
 8005c4e:	0021      	movs	r1, r4
 8005c50:	68a8      	ldr	r0, [r5, #8]
 8005c52:	f00c fa3e 	bl	80120d2 <zb_heap_free>
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	0032      	movs	r2, r6
 8005c5a:	0039      	movs	r1, r7
 8005c5c:	0028      	movs	r0, r5
 8005c5e:	f00c f8a1 	bl	8011da4 <ZbZclSendDefaultResponse>
 8005c62:	e082      	b.n	8005d6a <??ZbZclHandleReadAttr_1>

08005c64 <??ZbZclHandleReadAttr_4>:
 8005c64:	46c3      	mov	fp, r8

08005c66 <??ZbZclHandleReadAttr_5>:
 8005c66:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8005c68:	2802      	cmp	r0, #2
 8005c6a:	d353      	bcc.n	8005d14 <??ZbZclHandleReadAttr_6>

08005c6c <??ZbZclHandleReadAttr_7>:
 8005c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c6e:	f001 f94e 	bl	8006f0e <pletoh16>
 8005c72:	f8ad 000a 	strh.w	r0, [sp, #10]
 8005c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c78:	1c80      	adds	r0, r0, #2
 8005c7a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c7c:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8005c7e:	1e80      	subs	r0, r0, #2
 8005c80:	8538      	strh	r0, [r7, #40]	@ 0x28
 8005c82:	f11b 0004 	adds.w	r0, fp, #4
 8005c86:	8b69      	ldrh	r1, [r5, #26]
 8005c88:	4288      	cmp	r0, r1
 8005c8a:	d243      	bcs.n	8005d14 <??ZbZclHandleReadAttr_6>

08005c8c <??ZbZclHandleReadAttr_8>:
 8005c8c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005c90:	eb04 000b 	add.w	r0, r4, fp
 8005c94:	f001 f987 	bl	8006fa6 <putle16>
 8005c98:	f11b 0b02 	adds.w	fp, fp, #2
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	9001      	str	r0, [sp, #4]
 8005ca0:	8b68      	ldrh	r0, [r5, #26]
 8005ca2:	ebb0 000b 	subs.w	r0, r0, fp
 8005ca6:	1e80      	subs	r0, r0, #2
 8005ca8:	9000      	str	r0, [sp, #0]
 8005caa:	eb04 000b 	add.w	r0, r4, fp
 8005cae:	1c83      	adds	r3, r0, #2
 8005cb0:	aa02      	add	r2, sp, #8
 8005cb2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005cb6:	0028      	movs	r0, r5
 8005cb8:	f7fa fb95 	bl	80003e6 <ZbZclAttrRead>
 8005cbc:	4682      	mov	sl, r0
 8005cbe:	f804 a00b 	strb.w	sl, [r4, fp]
 8005cc2:	f11b 0b01 	adds.w	fp, fp, #1
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	b2c0      	uxtb	r0, r0
 8005cca:	2889      	cmp	r0, #137	@ 0x89
 8005ccc:	d022      	beq.n	8005d14 <??ZbZclHandleReadAttr_6>

08005cce <??ZbZclHandleReadAttr_9>:
 8005cce:	4650      	mov	r0, sl
 8005cd0:	b2c0      	uxtb	r0, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1c7      	bne.n	8005c66 <??ZbZclHandleReadAttr_5>

08005cd6 <??ZbZclHandleReadAttr_10>:
 8005cd6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005cda:	f804 000b 	strb.w	r0, [r4, fp]
 8005cde:	f11b 0b01 	adds.w	fp, fp, #1
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	8b6a      	ldrh	r2, [r5, #26]
 8005ce6:	ebb2 020b 	subs.w	r2, r2, fp
 8005cea:	eb04 010b 	add.w	r1, r4, fp
 8005cee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005cf2:	f7fb f9a0 	bl	8001036 <ZbZclAttrParseLength>
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	d507      	bpl.n	8005d0e <??ZbZclHandleReadAttr_11>
 8005cfe:	f1bb 0b01 	subs.w	fp, fp, #1
 8005d02:	2087      	movs	r0, #135	@ 0x87
 8005d04:	eb04 010b 	add.w	r1, r4, fp
 8005d08:	f801 0c01 	strb.w	r0, [r1, #-1]
 8005d0c:	e7ab      	b.n	8005c66 <??ZbZclHandleReadAttr_5>

08005d0e <??ZbZclHandleReadAttr_11>:
 8005d0e:	eb18 0b0b 	adds.w	fp, r8, fp
 8005d12:	e7a8      	b.n	8005c66 <??ZbZclHandleReadAttr_5>

08005d14 <??ZbZclHandleReadAttr_6>:
 8005d14:	003a      	movs	r2, r7
 8005d16:	a906      	add	r1, sp, #24
 8005d18:	0028      	movs	r0, r5
 8005d1a:	f7fe f80e 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8005d1e:	a806      	add	r0, sp, #24
 8005d20:	f117 0110 	adds.w	r1, r7, #16
 8005d24:	2210      	movs	r2, #16
 8005d26:	f00f fefa 	bl	8015b1e <__aeabi_memcpy>
 8005d2a:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8005d2e:	f7fd ff9c 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8005d32:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8005d36:	7da8      	ldrb	r0, [r5, #22]
 8005d38:	0700      	lsls	r0, r0, #28
 8005d3a:	d406      	bmi.n	8005d4a <??ZbZclHandleReadAttr_12>
 8005d3c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8005d40:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 8005d44:	4001      	ands	r1, r0
 8005d46:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

08005d4a <??ZbZclHandleReadAttr_12>:
 8005d4a:	940c      	str	r4, [sp, #48]	@ 0x30
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8005d52:	2300      	movs	r3, #0
 8005d54:	2200      	movs	r2, #0
 8005d56:	a906      	add	r1, sp, #24
 8005d58:	68a8      	ldr	r0, [r5, #8]
 8005d5a:	f00b fb83 	bl	8011464 <ZbApsdeDataReqCallback>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	464a      	mov	r2, r9
 8005d62:	0021      	movs	r1, r4
 8005d64:	68a8      	ldr	r0, [r5, #8]
 8005d66:	f00c f9b4 	bl	80120d2 <zb_heap_free>

08005d6a <??ZbZclHandleReadAttr_1>:
 8005d6a:	b013      	add	sp, #76	@ 0x4c
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d70 <??DataTable1>:
 8005d70:	0000 0000                                   ....

08005d74 <ZbZclHandleWriteAttr>:
 8005d74:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	b0a3      	sub	sp, #140	@ 0x8c
 8005d7a:	0016      	movs	r6, r2
 8005d7c:	2701      	movs	r7, #1
 8005d7e:	2500      	movs	r5, #0
 8005d80:	2400      	movs	r4, #0
 8005d82:	f05f 0800 	movs.w	r8, #0
 8005d86:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005d88:	79c0      	ldrb	r0, [r0, #7]
 8005d8a:	f88d 000a 	strb.w	r0, [sp, #10]
 8005d8e:	f05f 0900 	movs.w	r9, #0
 8005d92:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005d96:	2802      	cmp	r0, #2
 8005d98:	d007      	beq.n	8005daa <??ZbZclHandleWriteAttr_0>
 8005d9a:	2803      	cmp	r0, #3
 8005d9c:	d003      	beq.n	8005da6 <??ZbZclHandleWriteAttr_1>
 8005d9e:	2805      	cmp	r0, #5
 8005da0:	f000 80c3 	beq.w	8005f2a <??ZbZclHandleWriteAttr_2>
 8005da4:	e116      	b.n	8005fd4 <??ZbZclHandleWriteAttr_3>

08005da6 <??ZbZclHandleWriteAttr_1>:
 8005da6:	f059 0901 	orrs.w	r9, r9, #1

08005daa <??ZbZclHandleWriteAttr_0>:
 8005daa:	2008      	movs	r0, #8
 8005dac:	9001      	str	r0, [sp, #4]
 8005dae:	2000      	movs	r0, #0
 8005db0:	9000      	str	r0, [sp, #0]
 8005db2:	f10d 0b14 	add.w	fp, sp, #20
 8005db6:	9a00      	ldr	r2, [sp, #0]
 8005db8:	9901      	ldr	r1, [sp, #4]
 8005dba:	4658      	mov	r0, fp
 8005dbc:	f001 fed2 	bl	8007b64 <__aeabi_memset>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f88d 0014 	strb.w	r0, [sp, #20]
 8005dc6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005dc8:	7840      	ldrb	r0, [r0, #1]
 8005dca:	f88d 0015 	strb.w	r0, [sp, #21]
 8005dce:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005dd0:	7880      	ldrb	r0, [r0, #2]
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d101      	bne.n	8005dda <??ZbZclHandleWriteAttr_4>
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e000      	b.n	8005ddc <??ZbZclHandleWriteAttr_5>

08005dda <??ZbZclHandleWriteAttr_4>:
 8005dda:	2000      	movs	r0, #0

08005ddc <??ZbZclHandleWriteAttr_5>:
 8005ddc:	f88d 0016 	strb.w	r0, [sp, #22]
 8005de0:	2001      	movs	r0, #1
 8005de2:	f88d 0017 	strb.w	r0, [sp, #23]
 8005de6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005de8:	8880      	ldrh	r0, [r0, #4]
 8005dea:	f8ad 0018 	strh.w	r0, [sp, #24]
 8005dee:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005df0:	7980      	ldrb	r0, [r0, #6]
 8005df2:	f88d 001a 	strb.w	r0, [sp, #26]
 8005df6:	2004      	movs	r0, #4
 8005df8:	f88d 001b 	strb.w	r0, [sp, #27]
 8005dfc:	2239      	movs	r2, #57	@ 0x39
 8005dfe:	a907      	add	r1, sp, #28
 8005e00:	a805      	add	r0, sp, #20
 8005e02:	f000 fbc3 	bl	800658c <ZbZclAppendHeader>
 8005e06:	0005      	movs	r5, r0
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	d502      	bpl.n	8005e12 <??ZbZclHandleWriteAttr_6>
 8005e0c:	2080      	movs	r0, #128	@ 0x80
 8005e0e:	4680      	mov	r8, r0
 8005e10:	e0e2      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005e12 <??ZbZclHandleWriteAttr_6>:
 8005e12:	0032      	movs	r2, r6
 8005e14:	a916      	add	r1, sp, #88	@ 0x58
 8005e16:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005e18:	f7fd ff8f 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8005e1c:	a816      	add	r0, sp, #88	@ 0x58
 8005e1e:	f116 0110 	adds.w	r1, r6, #16
 8005e22:	2210      	movs	r2, #16
 8005e24:	f00f fe7b 	bl	8015b1e <__aeabi_memcpy>
 8005e28:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8005e2c:	f7fd ff1d 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8005e30:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 8005e34:	2000      	movs	r0, #0
 8005e36:	4682      	mov	sl, r0
 8005e38:	2080      	movs	r0, #128	@ 0x80
 8005e3a:	0007      	movs	r7, r0
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f88d 0008 	strb.w	r0, [sp, #8]
 8005e42:	2000      	movs	r0, #0
 8005e44:	0004      	movs	r4, r0

08005e46 <??ZbZclHandleWriteAttr_8>:
 8005e46:	f11a 0003 	adds.w	r0, sl, #3
 8005e4a:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005e4c:	4288      	cmp	r0, r1
 8005e4e:	d302      	bcc.n	8005e56 <??ZbZclHandleWriteAttr_9>
 8005e50:	2080      	movs	r0, #128	@ 0x80
 8005e52:	0007      	movs	r7, r0
 8005e54:	e05c      	b.n	8005f10 <??ZbZclHandleWriteAttr_10>

08005e56 <??ZbZclHandleWriteAttr_9>:
 8005e56:	1ce8      	adds	r0, r5, #3
 8005e58:	283a      	cmp	r0, #58	@ 0x3a
 8005e5a:	d305      	bcc.n	8005e68 <??ZbZclHandleWriteAttr_11>
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	f88d 0008 	strb.w	r0, [sp, #8]
 8005e62:	2089      	movs	r0, #137	@ 0x89
 8005e64:	0007      	movs	r7, r0
 8005e66:	e053      	b.n	8005f10 <??ZbZclHandleWriteAttr_10>

08005e68 <??ZbZclHandleWriteAttr_11>:
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f88d 0008 	strb.w	r0, [sp, #8]
 8005e6e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005e70:	4450      	add	r0, sl
 8005e72:	f001 f84c 	bl	8006f0e <pletoh16>
 8005e76:	f8ad 000c 	strh.w	r0, [sp, #12]
 8005e7a:	f11a 0a02 	adds.w	sl, sl, #2
 8005e7e:	4650      	mov	r0, sl
 8005e80:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8005e82:	5c09      	ldrb	r1, [r1, r0]
 8005e84:	f88d 1009 	strb.w	r1, [sp, #9]
 8005e88:	4682      	mov	sl, r0
 8005e8a:	f11a 0a01 	adds.w	sl, sl, #1
 8005e8e:	2300      	movs	r3, #0
 8005e90:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8005e92:	ebb2 020a 	subs.w	r2, r2, sl
 8005e96:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005e98:	eb00 010a 	add.w	r1, r0, sl
 8005e9c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005ea0:	f7fb f8c9 	bl	8001036 <ZbZclAttrParseLength>
 8005ea4:	9004      	str	r0, [sp, #16]
 8005ea6:	9804      	ldr	r0, [sp, #16]
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d50c      	bpl.n	8005ec6 <??ZbZclHandleWriteAttr_12>
 8005eac:	1c64      	adds	r4, r4, #1
 8005eae:	2087      	movs	r0, #135	@ 0x87
 8005eb0:	a907      	add	r1, sp, #28
 8005eb2:	5548      	strb	r0, [r1, r5]
 8005eb4:	1c6d      	adds	r5, r5, #1
 8005eb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005eba:	a807      	add	r0, sp, #28
 8005ebc:	4428      	add	r0, r5
 8005ebe:	f001 f872 	bl	8006fa6 <putle16>
 8005ec2:	1cad      	adds	r5, r5, #2
 8005ec4:	e024      	b.n	8005f10 <??ZbZclHandleWriteAttr_10>

08005ec6 <??ZbZclHandleWriteAttr_12>:
 8005ec6:	4648      	mov	r0, r9
 8005ec8:	b280      	uxth	r0, r0
 8005eca:	9001      	str	r0, [sp, #4]
 8005ecc:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005ece:	ebb0 000a 	subs.w	r0, r0, sl
 8005ed2:	9000      	str	r0, [sp, #0]
 8005ed4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005ed6:	eb00 030a 	add.w	r3, r0, sl
 8005eda:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005ede:	f116 0110 	adds.w	r1, r6, #16
 8005ee2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005ee4:	f7fa fbd1 	bl	800068a <ZbZclAttrWrite>
 8005ee8:	0007      	movs	r7, r0
 8005eea:	9804      	ldr	r0, [sp, #16]
 8005eec:	eb10 0a0a 	adds.w	sl, r0, sl
 8005ef0:	0038      	movs	r0, r7
 8005ef2:	b2c0      	uxtb	r0, r0
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0a6      	beq.n	8005e46 <??ZbZclHandleWriteAttr_8>
 8005ef8:	1c64      	adds	r4, r4, #1
 8005efa:	a807      	add	r0, sp, #28
 8005efc:	5547      	strb	r7, [r0, r5]
 8005efe:	1c6d      	adds	r5, r5, #1
 8005f00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005f04:	a807      	add	r0, sp, #28
 8005f06:	4428      	add	r0, r5
 8005f08:	f001 f84d 	bl	8006fa6 <putle16>
 8005f0c:	1cad      	adds	r5, r5, #2
 8005f0e:	e79a      	b.n	8005e46 <??ZbZclHandleWriteAttr_8>

08005f10 <??ZbZclHandleWriteAttr_10>:
 8005f10:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d001      	beq.n	8005f1c <??ZbZclHandleWriteAttr_13>
 8005f18:	46b8      	mov	r8, r7
 8005f1a:	e05d      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005f1c <??ZbZclHandleWriteAttr_13>:
 8005f1c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005f20:	2802      	cmp	r0, #2
 8005f22:	d001      	beq.n	8005f28 <??ZbZclHandleWriteAttr_14>
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	d000      	beq.n	8005f2a <??ZbZclHandleWriteAttr_2>

08005f28 <??ZbZclHandleWriteAttr_14>:
 8005f28:	e056      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005f2a <??ZbZclHandleWriteAttr_2>:
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	f05f 0b00 	movs.w	fp, #0

08005f32 <??ZbZclHandleWriteAttr_15>:
 8005f32:	f11a 0003 	adds.w	r0, sl, #3
 8005f36:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005f38:	4288      	cmp	r0, r1
 8005f3a:	d302      	bcc.n	8005f42 <??ZbZclHandleWriteAttr_16>
 8005f3c:	465c      	mov	r4, fp
 8005f3e:	1c64      	adds	r4, r4, #1
 8005f40:	e03b      	b.n	8005fba <??ZbZclHandleWriteAttr_17>

08005f42 <??ZbZclHandleWriteAttr_16>:
 8005f42:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f44:	4450      	add	r0, sl
 8005f46:	f000 ffe2 	bl	8006f0e <pletoh16>
 8005f4a:	f8ad 000c 	strh.w	r0, [sp, #12]
 8005f4e:	f11a 0a02 	adds.w	sl, sl, #2
 8005f52:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f54:	f810 000a 	ldrb.w	r0, [r0, sl]
 8005f58:	f88d 0009 	strb.w	r0, [sp, #9]
 8005f5c:	f11a 0a01 	adds.w	sl, sl, #1
 8005f60:	2300      	movs	r3, #0
 8005f62:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8005f64:	ebb2 020a 	subs.w	r2, r2, sl
 8005f68:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f6a:	eb00 010a 	add.w	r1, r0, sl
 8005f6e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005f72:	f7fb f860 	bl	8001036 <ZbZclAttrParseLength>
 8005f76:	9004      	str	r0, [sp, #16]
 8005f78:	9804      	ldr	r0, [sp, #16]
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d502      	bpl.n	8005f84 <??ZbZclHandleWriteAttr_18>
 8005f7e:	465c      	mov	r4, fp
 8005f80:	1c64      	adds	r4, r4, #1
 8005f82:	e01a      	b.n	8005fba <??ZbZclHandleWriteAttr_17>

08005f84 <??ZbZclHandleWriteAttr_18>:
 8005f84:	2000      	movs	r0, #0
 8005f86:	9001      	str	r0, [sp, #4]
 8005f88:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005f8a:	ebb0 000a 	subs.w	r0, r0, sl
 8005f8e:	9000      	str	r0, [sp, #0]
 8005f90:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f92:	eb00 030a 	add.w	r3, r0, sl
 8005f96:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005f9a:	f116 0110 	adds.w	r1, r6, #16
 8005f9e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005fa0:	f7fa fb73 	bl	800068a <ZbZclAttrWrite>
 8005fa4:	0007      	movs	r7, r0
 8005fa6:	0038      	movs	r0, r7
 8005fa8:	b2c0      	uxtb	r0, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d001      	beq.n	8005fb2 <??ZbZclHandleWriteAttr_19>
 8005fae:	f11b 0b01 	adds.w	fp, fp, #1

08005fb2 <??ZbZclHandleWriteAttr_19>:
 8005fb2:	9804      	ldr	r0, [sp, #16]
 8005fb4:	eb10 0a0a 	adds.w	sl, r0, sl
 8005fb8:	e7bb      	b.n	8005f32 <??ZbZclHandleWriteAttr_15>

08005fba <??ZbZclHandleWriteAttr_17>:
 8005fba:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005fbe:	2803      	cmp	r0, #3
 8005fc0:	d105      	bne.n	8005fce <??ZbZclHandleWriteAttr_20>
 8005fc2:	2c00      	cmp	r4, #0
 8005fc4:	d002      	beq.n	8005fcc <??ZbZclHandleWriteAttr_21>
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	4680      	mov	r8, r0
 8005fca:	e005      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005fcc <??ZbZclHandleWriteAttr_21>:
 8005fcc:	e004      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005fce <??ZbZclHandleWriteAttr_20>:
 8005fce:	20ff      	movs	r0, #255	@ 0xff
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	e001      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005fd4 <??ZbZclHandleWriteAttr_3>:
 8005fd4:	2081      	movs	r0, #129	@ 0x81
 8005fd6:	4680      	mov	r8, r0

08005fd8 <??ZbZclHandleWriteAttr_7>:
 8005fd8:	4640      	mov	r0, r8
 8005fda:	b2c0      	uxtb	r0, r0
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d00b      	beq.n	8005ff8 <??ZbZclHandleWriteAttr_22>
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	b2c0      	uxtb	r0, r0
 8005fe4:	28ff      	cmp	r0, #255	@ 0xff
 8005fe6:	d006      	beq.n	8005ff6 <??ZbZclHandleWriteAttr_23>
 8005fe8:	4643      	mov	r3, r8
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005fee:	0031      	movs	r1, r6
 8005ff0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005ff2:	f00b fed7 	bl	8011da4 <ZbZclSendDefaultResponse>

08005ff6 <??ZbZclHandleWriteAttr_23>:
 8005ff6:	e01a      	b.n	800602e <??ZbZclHandleWriteAttr_24>

08005ff8 <??ZbZclHandleWriteAttr_22>:
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d10c      	bne.n	8006016 <??ZbZclHandleWriteAttr_25>
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	d106      	bne.n	800600e <??ZbZclHandleWriteAttr_26>
 8006000:	2301      	movs	r3, #1
 8006002:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006004:	0031      	movs	r1, r6
 8006006:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8006008:	f00b fecc 	bl	8011da4 <ZbZclSendDefaultResponse>
 800600c:	e00f      	b.n	800602e <??ZbZclHandleWriteAttr_24>

0800600e <??ZbZclHandleWriteAttr_26>:
 800600e:	2000      	movs	r0, #0
 8006010:	a907      	add	r1, sp, #28
 8006012:	5548      	strb	r0, [r1, r5]
 8006014:	1c6d      	adds	r5, r5, #1

08006016 <??ZbZclHandleWriteAttr_25>:
 8006016:	a807      	add	r0, sp, #28
 8006018:	901c      	str	r0, [sp, #112]	@ 0x70
 800601a:	0028      	movs	r0, r5
 800601c:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 8006020:	2300      	movs	r3, #0
 8006022:	2200      	movs	r2, #0
 8006024:	a916      	add	r1, sp, #88	@ 0x58
 8006026:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8006028:	6880      	ldr	r0, [r0, #8]
 800602a:	f00b fa1b 	bl	8011464 <ZbApsdeDataReqCallback>

0800602e <??ZbZclHandleWriteAttr_24>:
 800602e:	b025      	add	sp, #148	@ 0x94
 8006030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006034 <zcl_handle_command>:
 8006034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006038:	0004      	movs	r4, r0
 800603a:	000d      	movs	r5, r1
 800603c:	0016      	movs	r6, r2
 800603e:	79f7      	ldrb	r7, [r6, #7]
 8006040:	8868      	ldrh	r0, [r5, #2]
 8006042:	28ff      	cmp	r0, #255	@ 0xff
 8006044:	d102      	bne.n	800604c <??zcl_handle_command_0>
 8006046:	f05f 0800 	movs.w	r8, #0
 800604a:	e001      	b.n	8006050 <??zcl_handle_command_1>

0800604c <??zcl_handle_command_0>:
 800604c:	f05f 0801 	movs.w	r8, #1

08006050 <??zcl_handle_command_1>:
 8006050:	f115 0110 	adds.w	r1, r5, #16
 8006054:	68a0      	ldr	r0, [r4, #8]
 8006056:	f00b faa2 	bl	801159e <ZbApsAddrIsLocal>
 800605a:	2800      	cmp	r0, #0
 800605c:	d121      	bne.n	80060a2 <??zcl_handle_command_2>

0800605e <??zcl_handle_command_3>:
 800605e:	89a0      	ldrh	r0, [r4, #12]
 8006060:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006064:	d01d      	beq.n	80060a2 <??zcl_handle_command_2>

08006066 <??zcl_handle_command_4>:
 8006066:	0032      	movs	r2, r6
 8006068:	0029      	movs	r1, r5
 800606a:	0020      	movs	r0, r4
 800606c:	f7fd fd70 	bl	8003b50 <ZbZclClusterCheckMinSecurity>
 8006070:	2800      	cmp	r0, #0
 8006072:	d107      	bne.n	8006084 <??zcl_handle_command_5>
 8006074:	2301      	movs	r3, #1
 8006076:	0032      	movs	r2, r6
 8006078:	0029      	movs	r1, r5
 800607a:	0020      	movs	r0, r4
 800607c:	f00b fe92 	bl	8011da4 <ZbZclSendDefaultResponse>
 8006080:	4640      	mov	r0, r8
 8006082:	e0f7      	b.n	8006274 <??zcl_handle_command_6>

08006084 <??zcl_handle_command_5>:
 8006084:	0032      	movs	r2, r6
 8006086:	0029      	movs	r1, r5
 8006088:	68a0      	ldr	r0, [r4, #8]
 800608a:	f00b fd71 	bl	8011b70 <ZbZclDeviceLogCheckAllow>
 800608e:	2800      	cmp	r0, #0
 8006090:	d107      	bne.n	80060a2 <??zcl_handle_command_2>
 8006092:	2301      	movs	r3, #1
 8006094:	0032      	movs	r2, r6
 8006096:	0029      	movs	r1, r5
 8006098:	0020      	movs	r0, r4
 800609a:	f00b fe83 	bl	8011da4 <ZbZclSendDefaultResponse>
 800609e:	4640      	mov	r0, r8
 80060a0:	e0e8      	b.n	8006274 <??zcl_handle_command_6>

080060a2 <??zcl_handle_command_2>:
 80060a2:	7830      	ldrb	r0, [r6, #0]
 80060a4:	2801      	cmp	r0, #1
 80060a6:	d13a      	bne.n	800611e <??zcl_handle_command_8>
 80060a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d107      	bne.n	80060be <??zcl_handle_command_9>
 80060ae:	2381      	movs	r3, #129	@ 0x81
 80060b0:	0032      	movs	r2, r6
 80060b2:	0029      	movs	r1, r5
 80060b4:	0020      	movs	r0, r4
 80060b6:	f00b fe75 	bl	8011da4 <ZbZclSendDefaultResponse>
 80060ba:	4640      	mov	r0, r8
 80060bc:	e0da      	b.n	8006274 <??zcl_handle_command_6>

080060be <??zcl_handle_command_9>:
 80060be:	7870      	ldrb	r0, [r6, #1]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d00e      	beq.n	80060e2 <??zcl_handle_command_10>
 80060c4:	8a20      	ldrh	r0, [r4, #16]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d003      	beq.n	80060d2 <??zcl_handle_command_11>
 80060ca:	8a20      	ldrh	r0, [r4, #16]
 80060cc:	88b1      	ldrh	r1, [r6, #4]
 80060ce:	4288      	cmp	r0, r1
 80060d0:	d012      	beq.n	80060f8 <??zcl_handle_command_12>

080060d2 <??zcl_handle_command_11>:
 80060d2:	2381      	movs	r3, #129	@ 0x81
 80060d4:	0032      	movs	r2, r6
 80060d6:	0029      	movs	r1, r5
 80060d8:	0020      	movs	r0, r4
 80060da:	f00b fe63 	bl	8011da4 <ZbZclSendDefaultResponse>
 80060de:	4640      	mov	r0, r8
 80060e0:	e0c8      	b.n	8006274 <??zcl_handle_command_6>

080060e2 <??zcl_handle_command_10>:
 80060e2:	8a20      	ldrh	r0, [r4, #16]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d007      	beq.n	80060f8 <??zcl_handle_command_12>
 80060e8:	2381      	movs	r3, #129	@ 0x81
 80060ea:	0032      	movs	r2, r6
 80060ec:	0029      	movs	r1, r5
 80060ee:	0020      	movs	r0, r4
 80060f0:	f00b fe58 	bl	8011da4 <ZbZclSendDefaultResponse>
 80060f4:	4640      	mov	r0, r8
 80060f6:	e0bd      	b.n	8006274 <??zcl_handle_command_6>

080060f8 <??zcl_handle_command_12>:
 80060f8:	002a      	movs	r2, r5
 80060fa:	0031      	movs	r1, r6
 80060fc:	0020      	movs	r0, r4
 80060fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006100:	4798      	blx	r3
 8006102:	4681      	mov	r9, r0
 8006104:	4648      	mov	r0, r9
 8006106:	b2c0      	uxtb	r0, r0
 8006108:	28ff      	cmp	r0, #255	@ 0xff
 800610a:	d006      	beq.n	800611a <??zcl_handle_command_13>
 800610c:	464b      	mov	r3, r9
 800610e:	b2db      	uxtb	r3, r3
 8006110:	0032      	movs	r2, r6
 8006112:	0029      	movs	r1, r5
 8006114:	0020      	movs	r0, r4
 8006116:	f00b fe45 	bl	8011da4 <ZbZclSendDefaultResponse>

0800611a <??zcl_handle_command_13>:
 800611a:	4640      	mov	r0, r8
 800611c:	e0aa      	b.n	8006274 <??zcl_handle_command_6>

0800611e <??zcl_handle_command_8>:
 800611e:	7830      	ldrb	r0, [r6, #0]
 8006120:	2800      	cmp	r0, #0
 8006122:	d007      	beq.n	8006134 <??zcl_handle_command_14>
 8006124:	2385      	movs	r3, #133	@ 0x85
 8006126:	0032      	movs	r2, r6
 8006128:	0029      	movs	r1, r5
 800612a:	0020      	movs	r0, r4
 800612c:	f00b fe3a 	bl	8011da4 <ZbZclSendDefaultResponse>
 8006130:	4640      	mov	r0, r8
 8006132:	e09f      	b.n	8006274 <??zcl_handle_command_6>

08006134 <??zcl_handle_command_14>:
 8006134:	0038      	movs	r0, r7
 8006136:	b2c0      	uxtb	r0, r0
 8006138:	2800      	cmp	r0, #0
 800613a:	d01c      	beq.n	8006176 <??zcl_handle_command_15>
 800613c:	2801      	cmp	r0, #1
 800613e:	d03f      	beq.n	80061c0 <??zcl_handle_command_16>
 8006140:	2802      	cmp	r0, #2
 8006142:	d01e      	beq.n	8006182 <??zcl_handle_command_17>
 8006144:	2803      	cmp	r0, #3
 8006146:	d01c      	beq.n	8006182 <??zcl_handle_command_17>
 8006148:	2804      	cmp	r0, #4
 800614a:	d039      	beq.n	80061c0 <??zcl_handle_command_16>
 800614c:	2805      	cmp	r0, #5
 800614e:	d018      	beq.n	8006182 <??zcl_handle_command_17>
 8006150:	2806      	cmp	r0, #6
 8006152:	d01c      	beq.n	800618e <??zcl_handle_command_18>
 8006154:	2807      	cmp	r0, #7
 8006156:	d033      	beq.n	80061c0 <??zcl_handle_command_16>
 8006158:	2808      	cmp	r0, #8
 800615a:	d01e      	beq.n	800619a <??zcl_handle_command_19>
 800615c:	2809      	cmp	r0, #9
 800615e:	d02f      	beq.n	80061c0 <??zcl_handle_command_16>
 8006160:	280a      	cmp	r0, #10
 8006162:	d020      	beq.n	80061a6 <??zcl_handle_command_20>
 8006164:	280b      	cmp	r0, #11
 8006166:	d02a      	beq.n	80061be <??zcl_handle_command_21>
 8006168:	280c      	cmp	r0, #12
 800616a:	d022      	beq.n	80061b2 <??zcl_handle_command_22>
 800616c:	280d      	cmp	r0, #13
 800616e:	d027      	beq.n	80061c0 <??zcl_handle_command_16>
 8006170:	2810      	cmp	r0, #16
 8006172:	d025      	beq.n	80061c0 <??zcl_handle_command_16>
 8006174:	e025      	b.n	80061c2 <??zcl_handle_command_23>

08006176 <??zcl_handle_command_15>:
 8006176:	002a      	movs	r2, r5
 8006178:	0031      	movs	r1, r6
 800617a:	0020      	movs	r0, r4
 800617c:	f7ff fd1f 	bl	8005bbe <ZbZclHandleReadAttr>
 8006180:	e077      	b.n	8006272 <??zcl_handle_command_24>

08006182 <??zcl_handle_command_17>:
 8006182:	002a      	movs	r2, r5
 8006184:	0031      	movs	r1, r6
 8006186:	0020      	movs	r0, r4
 8006188:	f7ff fdf4 	bl	8005d74 <ZbZclHandleWriteAttr>
 800618c:	e071      	b.n	8006272 <??zcl_handle_command_24>

0800618e <??zcl_handle_command_18>:
 800618e:	002a      	movs	r2, r5
 8006190:	0031      	movs	r1, r6
 8006192:	0020      	movs	r0, r4
 8006194:	f7fc fdf1 	bl	8002d7a <ZbZclHandleConfigReport>
 8006198:	e06b      	b.n	8006272 <??zcl_handle_command_24>

0800619a <??zcl_handle_command_19>:
 800619a:	002a      	movs	r2, r5
 800619c:	0031      	movs	r1, r6
 800619e:	0020      	movs	r0, r4
 80061a0:	f7fd f86f 	bl	8003282 <ZbZclHandleReadReport>
 80061a4:	e065      	b.n	8006272 <??zcl_handle_command_24>

080061a6 <??zcl_handle_command_20>:
 80061a6:	002a      	movs	r2, r5
 80061a8:	0031      	movs	r1, r6
 80061aa:	0020      	movs	r0, r4
 80061ac:	f7fd f98e 	bl	80034cc <ZbZclHandleReportAttr>
 80061b0:	e05f      	b.n	8006272 <??zcl_handle_command_24>

080061b2 <??zcl_handle_command_22>:
 80061b2:	002a      	movs	r2, r5
 80061b4:	0031      	movs	r1, r6
 80061b6:	0020      	movs	r0, r4
 80061b8:	f7fa f833 	bl	8000222 <ZbZclAttrHandleDiscover>
 80061bc:	e059      	b.n	8006272 <??zcl_handle_command_24>

080061be <??zcl_handle_command_21>:
 80061be:	e058      	b.n	8006272 <??zcl_handle_command_24>

080061c0 <??zcl_handle_command_16>:
 80061c0:	e057      	b.n	8006272 <??zcl_handle_command_24>

080061c2 <??zcl_handle_command_23>:
 80061c2:	7870      	ldrb	r0, [r6, #1]
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d04e      	beq.n	8006266 <??zcl_handle_command_25>
 80061c8:	88b0      	ldrh	r0, [r6, #4]
 80061ca:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80061ce:	4288      	cmp	r0, r1
 80061d0:	d141      	bne.n	8006256 <??zcl_handle_command_26>
 80061d2:	f115 0110 	adds.w	r1, r5, #16
 80061d6:	68a0      	ldr	r0, [r4, #8]
 80061d8:	f00b f9e1 	bl	801159e <ZbApsAddrIsLocal>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d107      	bne.n	80061f0 <??zcl_handle_command_27>
 80061e0:	2381      	movs	r3, #129	@ 0x81
 80061e2:	0032      	movs	r2, r6
 80061e4:	0029      	movs	r1, r5
 80061e6:	0020      	movs	r0, r4
 80061e8:	f00b fddc 	bl	8011da4 <ZbZclSendDefaultResponse>
 80061ec:	4640      	mov	r0, r8
 80061ee:	e041      	b.n	8006274 <??zcl_handle_command_6>

080061f0 <??zcl_handle_command_27>:
 80061f0:	0038      	movs	r0, r7
 80061f2:	b2c0      	uxtb	r0, r0
 80061f4:	28f0      	cmp	r0, #240	@ 0xf0
 80061f6:	d108      	bne.n	800620a <??zcl_handle_command_28>
 80061f8:	78b0      	ldrb	r0, [r6, #2]
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d131      	bne.n	8006262 <??zcl_handle_command_29>
 80061fe:	002a      	movs	r2, r5
 8006200:	0031      	movs	r1, r6
 8006202:	0020      	movs	r0, r4
 8006204:	f001 fb95 	bl	8007932 <ZbZclHandleGetSceneData>
 8006208:	e02b      	b.n	8006262 <??zcl_handle_command_29>

0800620a <??zcl_handle_command_28>:
 800620a:	0038      	movs	r0, r7
 800620c:	b2c0      	uxtb	r0, r0
 800620e:	28f1      	cmp	r0, #241	@ 0xf1
 8006210:	d108      	bne.n	8006224 <??zcl_handle_command_30>
 8006212:	78b0      	ldrb	r0, [r6, #2]
 8006214:	2800      	cmp	r0, #0
 8006216:	d124      	bne.n	8006262 <??zcl_handle_command_29>
 8006218:	002a      	movs	r2, r5
 800621a:	0031      	movs	r1, r6
 800621c:	0020      	movs	r0, r4
 800621e:	f001 fc07 	bl	8007a30 <ZbZclHandleSetSceneData>
 8006222:	e01e      	b.n	8006262 <??zcl_handle_command_29>

08006224 <??zcl_handle_command_30>:
 8006224:	0038      	movs	r0, r7
 8006226:	b2c0      	uxtb	r0, r0
 8006228:	28f2      	cmp	r0, #242	@ 0xf2
 800622a:	d10d      	bne.n	8006248 <??zcl_handle_command_31>
 800622c:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800622e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8006230:	0020      	movs	r0, r4
 8006232:	f7ff fc77 	bl	8005b24 <zcl_persist_handle_set>
 8006236:	4681      	mov	r9, r0
 8006238:	464b      	mov	r3, r9
 800623a:	b2db      	uxtb	r3, r3
 800623c:	0032      	movs	r2, r6
 800623e:	0029      	movs	r1, r5
 8006240:	0020      	movs	r0, r4
 8006242:	f00b fdaf 	bl	8011da4 <ZbZclSendDefaultResponse>
 8006246:	e00c      	b.n	8006262 <??zcl_handle_command_29>

08006248 <??zcl_handle_command_31>:
 8006248:	2381      	movs	r3, #129	@ 0x81
 800624a:	0032      	movs	r2, r6
 800624c:	0029      	movs	r1, r5
 800624e:	0020      	movs	r0, r4
 8006250:	f00b fda8 	bl	8011da4 <ZbZclSendDefaultResponse>
 8006254:	e005      	b.n	8006262 <??zcl_handle_command_29>

08006256 <??zcl_handle_command_26>:
 8006256:	2381      	movs	r3, #129	@ 0x81
 8006258:	0032      	movs	r2, r6
 800625a:	0029      	movs	r1, r5
 800625c:	0020      	movs	r0, r4
 800625e:	f00b fda1 	bl	8011da4 <ZbZclSendDefaultResponse>

08006262 <??zcl_handle_command_29>:
 8006262:	4640      	mov	r0, r8
 8006264:	e006      	b.n	8006274 <??zcl_handle_command_6>

08006266 <??zcl_handle_command_25>:
 8006266:	2381      	movs	r3, #129	@ 0x81
 8006268:	0032      	movs	r2, r6
 800626a:	0029      	movs	r1, r5
 800626c:	0020      	movs	r0, r4
 800626e:	f00b fd99 	bl	8011da4 <ZbZclSendDefaultResponse>

08006272 <??zcl_handle_command_24>:
 8006272:	4640      	mov	r0, r8

08006274 <??zcl_handle_command_6>:
 8006274:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08006278 <zcl_cluster_data_ind>:
 8006278:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800627a:	0004      	movs	r4, r0
 800627c:	000d      	movs	r5, r1
 800627e:	002e      	movs	r6, r5
 8006280:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8006282:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006284:	4668      	mov	r0, sp
 8006286:	f000 f8fe 	bl	8006486 <ZbZclParseHeader>
 800628a:	0007      	movs	r7, r0
 800628c:	2f00      	cmp	r7, #0
 800628e:	d501      	bpl.n	8006294 <??zcl_cluster_data_ind_0>
 8006290:	2000      	movs	r0, #0
 8006292:	e00a      	b.n	80062aa <??zcl_cluster_data_ind_1>

08006294 <??zcl_cluster_data_ind_0>:
 8006294:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006296:	4438      	add	r0, r7
 8006298:	6260      	str	r0, [r4, #36]	@ 0x24
 800629a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800629c:	1bc0      	subs	r0, r0, r7
 800629e:	8520      	strh	r0, [r4, #40]	@ 0x28
 80062a0:	466a      	mov	r2, sp
 80062a2:	0021      	movs	r1, r4
 80062a4:	0030      	movs	r0, r6
 80062a6:	f7ff fec5 	bl	8006034 <zcl_handle_command>

080062aa <??zcl_cluster_data_ind_1>:
 80062aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080062ac <zcl_cluster_alarm_data_ind>:
 80062ac:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	b098      	sub	sp, #96	@ 0x60
 80062b2:	0004      	movs	r4, r0
 80062b4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80062b6:	26ff      	movs	r6, #255	@ 0xff
 80062b8:	2700      	movs	r7, #0
 80062ba:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80062bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80062be:	a802      	add	r0, sp, #8
 80062c0:	f000 f8e1 	bl	8006486 <ZbZclParseHeader>
 80062c4:	4680      	mov	r8, r0
 80062c6:	f1b8 0f00 	cmp.w	r8, #0
 80062ca:	d501      	bpl.n	80062d0 <??zcl_cluster_alarm_data_ind_0>
 80062cc:	2000      	movs	r0, #0
 80062ce:	e0d7      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062d0 <??zcl_cluster_alarm_data_ind_0>:
 80062d0:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 80062d2:	ebb0 0008 	subs.w	r0, r0, r8
 80062d6:	8520      	strh	r0, [r4, #40]	@ 0x28
 80062d8:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80062da:	2809      	cmp	r0, #9
 80062dc:	d001      	beq.n	80062e2 <??zcl_cluster_alarm_data_ind_2>
 80062de:	2000      	movs	r0, #0
 80062e0:	e0ce      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062e2 <??zcl_cluster_alarm_data_ind_2>:
 80062e2:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d001      	beq.n	80062ee <??zcl_cluster_alarm_data_ind_3>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e0c8      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062ee <??zcl_cluster_alarm_data_ind_3>:
 80062ee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80062f2:	2801      	cmp	r0, #1
 80062f4:	d001      	beq.n	80062fa <??zcl_cluster_alarm_data_ind_4>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e0c2      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062fa <??zcl_cluster_alarm_data_ind_4>:
 80062fa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80062fe:	2800      	cmp	r0, #0
 8006300:	d002      	beq.n	8006308 <??zcl_cluster_alarm_data_ind_5>
 8006302:	2801      	cmp	r0, #1
 8006304:	d02a      	beq.n	800635c <??zcl_cluster_alarm_data_ind_6>
 8006306:	e03f      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

08006308 <??zcl_cluster_alarm_data_ind_5>:
 8006308:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800630a:	f810 0008 	ldrb.w	r0, [r0, r8]
 800630e:	f88d 0004 	strb.w	r0, [sp, #4]
 8006312:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006314:	4440      	add	r0, r8
 8006316:	1c40      	adds	r0, r0, #1
 8006318:	f000 fdf9 	bl	8006f0e <pletoh16>
 800631c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8006320:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8006324:	0028      	movs	r0, r5
 8006326:	f7fd fbaf 	bl	8003a88 <ZbZclClusterGetClusterId>
 800632a:	4581      	cmp	r9, r0
 800632c:	d12c      	bne.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800632e <??zcl_cluster_alarm_data_ind_9>:
 800632e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8006330:	2800      	cmp	r0, #0
 8006332:	d104      	bne.n	800633e <??zcl_cluster_alarm_data_ind_10>
 8006334:	2081      	movs	r0, #129	@ 0x81
 8006336:	0006      	movs	r6, r0
 8006338:	2001      	movs	r0, #1
 800633a:	0007      	movs	r7, r0
 800633c:	e024      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800633e <??zcl_cluster_alarm_data_ind_10>:
 800633e:	a802      	add	r0, sp, #8
 8006340:	9000      	str	r0, [sp, #0]
 8006342:	0023      	movs	r3, r4
 8006344:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006348:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800634c:	0028      	movs	r0, r5
 800634e:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8006352:	47e0      	blx	ip
 8006354:	0006      	movs	r6, r0
 8006356:	2001      	movs	r0, #1
 8006358:	0007      	movs	r7, r0
 800635a:	e015      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800635c <??zcl_cluster_alarm_data_ind_6>:
 800635c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800635e:	2800      	cmp	r0, #0
 8006360:	d104      	bne.n	800636c <??zcl_cluster_alarm_data_ind_11>
 8006362:	2081      	movs	r0, #129	@ 0x81
 8006364:	0006      	movs	r6, r0
 8006366:	2001      	movs	r0, #1
 8006368:	0007      	movs	r7, r0
 800636a:	e00d      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800636c <??zcl_cluster_alarm_data_ind_11>:
 800636c:	a802      	add	r0, sp, #8
 800636e:	9000      	str	r0, [sp, #0]
 8006370:	0023      	movs	r3, r4
 8006372:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006376:	21ff      	movs	r1, #255	@ 0xff
 8006378:	0028      	movs	r0, r5
 800637a:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 800637e:	47e0      	blx	ip
 8006380:	0006      	movs	r6, r0
 8006382:	2001      	movs	r0, #1
 8006384:	0007      	movs	r7, r0
 8006386:	e7ff      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

08006388 <??zcl_cluster_alarm_data_ind_7>:
 8006388:	0030      	movs	r0, r6
 800638a:	b2c0      	uxtb	r0, r0
 800638c:	28ff      	cmp	r0, #255	@ 0xff
 800638e:	d076      	beq.n	800647e <??zcl_cluster_alarm_data_ind_12>
 8006390:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006394:	f88d 0000 	strb.w	r0, [sp]
 8006398:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800639c:	f88d 0002 	strb.w	r0, [sp, #2]
 80063a0:	f88d 6003 	strb.w	r6, [sp, #3]
 80063a4:	f05f 0a08 	movs.w	sl, #8
 80063a8:	f05f 0b00 	movs.w	fp, #0
 80063ac:	f10d 0908 	add.w	r9, sp, #8
 80063b0:	465a      	mov	r2, fp
 80063b2:	4651      	mov	r1, sl
 80063b4:	4648      	mov	r0, r9
 80063b6:	f001 fbd5 	bl	8007b64 <__aeabi_memset>
 80063ba:	2000      	movs	r0, #0
 80063bc:	f88d 0008 	strb.w	r0, [sp, #8]
 80063c0:	2000      	movs	r0, #0
 80063c2:	f88d 0009 	strb.w	r0, [sp, #9]
 80063c6:	2001      	movs	r0, #1
 80063c8:	f88d 000a 	strb.w	r0, [sp, #10]
 80063cc:	2001      	movs	r0, #1
 80063ce:	f88d 000b 	strb.w	r0, [sp, #11]
 80063d2:	2000      	movs	r0, #0
 80063d4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80063d8:	f89d 0000 	ldrb.w	r0, [sp]
 80063dc:	f88d 000e 	strb.w	r0, [sp, #14]
 80063e0:	200b      	movs	r0, #11
 80063e2:	f88d 000f 	strb.w	r0, [sp, #15]
 80063e6:	2205      	movs	r2, #5
 80063e8:	a905      	add	r1, sp, #20
 80063ea:	a802      	add	r0, sp, #8
 80063ec:	f000 f8ce 	bl	800658c <ZbZclAppendHeader>
 80063f0:	4681      	mov	r9, r0
 80063f2:	f1b9 0f00 	cmp.w	r9, #0
 80063f6:	d501      	bpl.n	80063fc <??zcl_cluster_alarm_data_ind_13>
 80063f8:	2089      	movs	r0, #137	@ 0x89
 80063fa:	e041      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080063fc <??zcl_cluster_alarm_data_ind_13>:
 80063fc:	a805      	add	r0, sp, #20
 80063fe:	9014      	str	r0, [sp, #80]	@ 0x50
 8006400:	a814      	add	r0, sp, #80	@ 0x50
 8006402:	f8c0 9004 	str.w	r9, [r0, #4]
 8006406:	f10d 0102 	add.w	r1, sp, #2
 800640a:	6081      	str	r1, [r0, #8]
 800640c:	2002      	movs	r0, #2
 800640e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006410:	2030      	movs	r0, #48	@ 0x30
 8006412:	9004      	str	r0, [sp, #16]
 8006414:	f05f 0a00 	movs.w	sl, #0
 8006418:	f10d 0b20 	add.w	fp, sp, #32
 800641c:	4652      	mov	r2, sl
 800641e:	9904      	ldr	r1, [sp, #16]
 8006420:	4658      	mov	r0, fp
 8006422:	f001 fb9f 	bl	8007b64 <__aeabi_memset>
 8006426:	a808      	add	r0, sp, #32
 8006428:	f114 0110 	adds.w	r1, r4, #16
 800642c:	2210      	movs	r2, #16
 800642e:	f00f fb76 	bl	8015b1e <__aeabi_memcpy>
 8006432:	8aa8      	ldrh	r0, [r5, #20]
 8006434:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8006438:	2009      	movs	r0, #9
 800643a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800643e:	7ba8      	ldrb	r0, [r5, #14]
 8006440:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8006444:	a814      	add	r0, sp, #80	@ 0x50
 8006446:	900e      	str	r0, [sp, #56]	@ 0x38
 8006448:	2002      	movs	r0, #2
 800644a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800644e:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8006452:	f7fd fc0a 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8006456:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 800645a:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 800645e:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8006462:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8006466:	2000      	movs	r0, #0
 8006468:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 800646c:	2000      	movs	r0, #0
 800646e:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 8006472:	2300      	movs	r3, #0
 8006474:	2200      	movs	r2, #0
 8006476:	a908      	add	r1, sp, #32
 8006478:	68a8      	ldr	r0, [r5, #8]
 800647a:	f00a fff3 	bl	8011464 <ZbApsdeDataReqCallback>

0800647e <??zcl_cluster_alarm_data_ind_12>:
 800647e:	0038      	movs	r0, r7

08006480 <??zcl_cluster_alarm_data_ind_1>:
 8006480:	b019      	add	sp, #100	@ 0x64
 8006482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006486 <ZbZclParseHeader>:
 8006486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648a:	0004      	movs	r4, r0
 800648c:	000d      	movs	r5, r1
 800648e:	0016      	movs	r6, r2
 8006490:	2700      	movs	r7, #0
 8006492:	2e03      	cmp	r6, #3
 8006494:	d202      	bcs.n	800649c <??ZbZclParseHeader_0>
 8006496:	f05f 30ff 	movs.w	r0, #4294967295
 800649a:	e035      	b.n	8006508 <??ZbZclParseHeader_1>

0800649c <??ZbZclParseHeader_0>:
 800649c:	f05f 0808 	movs.w	r8, #8
 80064a0:	f05f 0900 	movs.w	r9, #0
 80064a4:	46a2      	mov	sl, r4
 80064a6:	464a      	mov	r2, r9
 80064a8:	4641      	mov	r1, r8
 80064aa:	4650      	mov	r0, sl
 80064ac:	f001 fb5a 	bl	8007b64 <__aeabi_memset>
 80064b0:	5de8      	ldrb	r0, [r5, r7]
 80064b2:	f010 0003 	ands.w	r0, r0, #3
 80064b6:	7020      	strb	r0, [r4, #0]
 80064b8:	5de8      	ldrb	r0, [r5, r7]
 80064ba:	b2c0      	uxtb	r0, r0
 80064bc:	0880      	lsrs	r0, r0, #2
 80064be:	f010 0001 	ands.w	r0, r0, #1
 80064c2:	7060      	strb	r0, [r4, #1]
 80064c4:	5de8      	ldrb	r0, [r5, r7]
 80064c6:	b2c0      	uxtb	r0, r0
 80064c8:	08c0      	lsrs	r0, r0, #3
 80064ca:	f010 0001 	ands.w	r0, r0, #1
 80064ce:	70a0      	strb	r0, [r4, #2]
 80064d0:	5de8      	ldrb	r0, [r5, r7]
 80064d2:	b2c0      	uxtb	r0, r0
 80064d4:	0900      	lsrs	r0, r0, #4
 80064d6:	f010 0001 	ands.w	r0, r0, #1
 80064da:	70e0      	strb	r0, [r4, #3]
 80064dc:	1c7f      	adds	r7, r7, #1
 80064de:	7860      	ldrb	r0, [r4, #1]
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d00a      	beq.n	80064fa <??ZbZclParseHeader_2>
 80064e4:	2e05      	cmp	r6, #5
 80064e6:	d202      	bcs.n	80064ee <??ZbZclParseHeader_3>
 80064e8:	f05f 30ff 	movs.w	r0, #4294967295
 80064ec:	e00c      	b.n	8006508 <??ZbZclParseHeader_1>

080064ee <??ZbZclParseHeader_3>:
 80064ee:	eb05 0007 	add.w	r0, r5, r7
 80064f2:	f000 fd0c 	bl	8006f0e <pletoh16>
 80064f6:	80a0      	strh	r0, [r4, #4]
 80064f8:	1cbf      	adds	r7, r7, #2

080064fa <??ZbZclParseHeader_2>:
 80064fa:	5de8      	ldrb	r0, [r5, r7]
 80064fc:	71a0      	strb	r0, [r4, #6]
 80064fe:	1c7f      	adds	r7, r7, #1
 8006500:	5de8      	ldrb	r0, [r5, r7]
 8006502:	71e0      	strb	r0, [r4, #7]
 8006504:	1c7f      	adds	r7, r7, #1
 8006506:	0038      	movs	r0, r7

08006508 <??ZbZclParseHeader_1>:
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800650c <ZbZclPrependHeader>:
 800650c:	b470      	push	{r4, r5, r6}
 800650e:	0003      	movs	r3, r0
 8006510:	2400      	movs	r4, #0
 8006512:	0015      	movs	r5, r2
 8006514:	2600      	movs	r6, #0
 8006516:	7858      	ldrb	r0, [r3, #1]
 8006518:	2800      	cmp	r0, #0
 800651a:	d004      	beq.n	8006526 <??ZbZclPrependHeader_0>
 800651c:	2a05      	cmp	r2, #5
 800651e:	d202      	bcs.n	8006526 <??ZbZclPrependHeader_0>
 8006520:	f05f 30ff 	movs.w	r0, #4294967295
 8006524:	e030      	b.n	8006588 <??ZbZclPrependHeader_1>

08006526 <??ZbZclPrependHeader_0>:
 8006526:	2a03      	cmp	r2, #3
 8006528:	d202      	bcs.n	8006530 <??ZbZclPrependHeader_2>
 800652a:	f05f 30ff 	movs.w	r0, #4294967295
 800652e:	e02b      	b.n	8006588 <??ZbZclPrependHeader_1>

08006530 <??ZbZclPrependHeader_2>:
 8006530:	1e6d      	subs	r5, r5, #1
 8006532:	79d8      	ldrb	r0, [r3, #7]
 8006534:	5548      	strb	r0, [r1, r5]
 8006536:	1c76      	adds	r6, r6, #1
 8006538:	1e6d      	subs	r5, r5, #1
 800653a:	7998      	ldrb	r0, [r3, #6]
 800653c:	5548      	strb	r0, [r1, r5]
 800653e:	1c76      	adds	r6, r6, #1
 8006540:	7858      	ldrb	r0, [r3, #1]
 8006542:	2800      	cmp	r0, #0
 8006544:	d009      	beq.n	800655a <??ZbZclPrependHeader_3>
 8006546:	1e6d      	subs	r5, r5, #1
 8006548:	8898      	ldrh	r0, [r3, #4]
 800654a:	b280      	uxth	r0, r0
 800654c:	0a00      	lsrs	r0, r0, #8
 800654e:	5548      	strb	r0, [r1, r5]
 8006550:	1c76      	adds	r6, r6, #1
 8006552:	1e6d      	subs	r5, r5, #1
 8006554:	8898      	ldrh	r0, [r3, #4]
 8006556:	5548      	strb	r0, [r1, r5]
 8006558:	1c76      	adds	r6, r6, #1

0800655a <??ZbZclPrependHeader_3>:
 800655a:	7818      	ldrb	r0, [r3, #0]
 800655c:	f010 0003 	ands.w	r0, r0, #3
 8006560:	4304      	orrs	r4, r0
 8006562:	7858      	ldrb	r0, [r3, #1]
 8006564:	2800      	cmp	r0, #0
 8006566:	d001      	beq.n	800656c <??ZbZclPrependHeader_4>
 8006568:	f054 0404 	orrs.w	r4, r4, #4

0800656c <??ZbZclPrependHeader_4>:
 800656c:	7898      	ldrb	r0, [r3, #2]
 800656e:	2801      	cmp	r0, #1
 8006570:	d101      	bne.n	8006576 <??ZbZclPrependHeader_5>
 8006572:	f054 0408 	orrs.w	r4, r4, #8

08006576 <??ZbZclPrependHeader_5>:
 8006576:	78d8      	ldrb	r0, [r3, #3]
 8006578:	2801      	cmp	r0, #1
 800657a:	d101      	bne.n	8006580 <??ZbZclPrependHeader_6>
 800657c:	f054 0410 	orrs.w	r4, r4, #16

08006580 <??ZbZclPrependHeader_6>:
 8006580:	1e6d      	subs	r5, r5, #1
 8006582:	554c      	strb	r4, [r1, r5]
 8006584:	1c76      	adds	r6, r6, #1
 8006586:	0030      	movs	r0, r6

08006588 <??ZbZclPrependHeader_1>:
 8006588:	bc70      	pop	{r4, r5, r6}
 800658a:	4770      	bx	lr

0800658c <ZbZclAppendHeader>:
 800658c:	b430      	push	{r4, r5}
 800658e:	0003      	movs	r3, r0
 8006590:	2400      	movs	r4, #0
 8006592:	2500      	movs	r5, #0
 8006594:	7858      	ldrb	r0, [r3, #1]
 8006596:	2800      	cmp	r0, #0
 8006598:	d004      	beq.n	80065a4 <??ZbZclAppendHeader_0>
 800659a:	2a05      	cmp	r2, #5
 800659c:	d202      	bcs.n	80065a4 <??ZbZclAppendHeader_0>
 800659e:	f05f 30ff 	movs.w	r0, #4294967295
 80065a2:	e02b      	b.n	80065fc <??ZbZclAppendHeader_1>

080065a4 <??ZbZclAppendHeader_0>:
 80065a4:	2a03      	cmp	r2, #3
 80065a6:	d202      	bcs.n	80065ae <??ZbZclAppendHeader_2>
 80065a8:	f05f 30ff 	movs.w	r0, #4294967295
 80065ac:	e026      	b.n	80065fc <??ZbZclAppendHeader_1>

080065ae <??ZbZclAppendHeader_2>:
 80065ae:	7818      	ldrb	r0, [r3, #0]
 80065b0:	f010 0003 	ands.w	r0, r0, #3
 80065b4:	4304      	orrs	r4, r0
 80065b6:	7858      	ldrb	r0, [r3, #1]
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d001      	beq.n	80065c0 <??ZbZclAppendHeader_3>
 80065bc:	f054 0404 	orrs.w	r4, r4, #4

080065c0 <??ZbZclAppendHeader_3>:
 80065c0:	7898      	ldrb	r0, [r3, #2]
 80065c2:	2801      	cmp	r0, #1
 80065c4:	d101      	bne.n	80065ca <??ZbZclAppendHeader_4>
 80065c6:	f054 0408 	orrs.w	r4, r4, #8

080065ca <??ZbZclAppendHeader_4>:
 80065ca:	78d8      	ldrb	r0, [r3, #3]
 80065cc:	2801      	cmp	r0, #1
 80065ce:	d101      	bne.n	80065d4 <??ZbZclAppendHeader_5>
 80065d0:	f054 0410 	orrs.w	r4, r4, #16

080065d4 <??ZbZclAppendHeader_5>:
 80065d4:	554c      	strb	r4, [r1, r5]
 80065d6:	1c6d      	adds	r5, r5, #1
 80065d8:	7858      	ldrb	r0, [r3, #1]
 80065da:	2800      	cmp	r0, #0
 80065dc:	d007      	beq.n	80065ee <??ZbZclAppendHeader_6>
 80065de:	8898      	ldrh	r0, [r3, #4]
 80065e0:	5548      	strb	r0, [r1, r5]
 80065e2:	1c6d      	adds	r5, r5, #1
 80065e4:	8898      	ldrh	r0, [r3, #4]
 80065e6:	b280      	uxth	r0, r0
 80065e8:	0a00      	lsrs	r0, r0, #8
 80065ea:	5548      	strb	r0, [r1, r5]
 80065ec:	1c6d      	adds	r5, r5, #1

080065ee <??ZbZclAppendHeader_6>:
 80065ee:	7998      	ldrb	r0, [r3, #6]
 80065f0:	5548      	strb	r0, [r1, r5]
 80065f2:	1c6d      	adds	r5, r5, #1
 80065f4:	79d8      	ldrb	r0, [r3, #7]
 80065f6:	5548      	strb	r0, [r1, r5]
 80065f8:	1c6d      	adds	r5, r5, #1
 80065fa:	0028      	movs	r0, r5

080065fc <??ZbZclAppendHeader_1>:
 80065fc:	bc30      	pop	{r4, r5}
 80065fe:	4770      	bx	lr

08006600 <ZbZclLevelServerAlloc>:
 8006600:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	000f      	movs	r7, r1
 8006608:	0014      	movs	r4, r2
 800660a:	001d      	movs	r5, r3
 800660c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8006610:	2c00      	cmp	r4, #0
 8006612:	d016      	beq.n	8006642 <??ZbZclLevelServerAlloc_0>
 8006614:	0020      	movs	r0, r4
 8006616:	f7fd fa37 	bl	8003a88 <ZbZclClusterGetClusterId>
 800661a:	2806      	cmp	r0, #6
 800661c:	d001      	beq.n	8006622 <??ZbZclLevelServerAlloc_1>
 800661e:	2000      	movs	r0, #0
 8006620:	e05a      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

08006622 <??ZbZclLevelServerAlloc_1>:
 8006622:	0020      	movs	r0, r4
 8006624:	f7fd fb38 	bl	8003c98 <ZbZclClusterGetDirection>
 8006628:	2800      	cmp	r0, #0
 800662a:	d001      	beq.n	8006630 <??ZbZclLevelServerAlloc_3>
 800662c:	2000      	movs	r0, #0
 800662e:	e053      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

08006630 <??ZbZclLevelServerAlloc_3>:
 8006630:	0020      	movs	r0, r4
 8006632:	f7fd fa23 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8006636:	0039      	movs	r1, r7
 8006638:	b2c9      	uxtb	r1, r1
 800663a:	4288      	cmp	r0, r1
 800663c:	d001      	beq.n	8006642 <??ZbZclLevelServerAlloc_0>
 800663e:	2000      	movs	r0, #0
 8006640:	e04a      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

08006642 <??ZbZclLevelServerAlloc_0>:
 8006642:	2000      	movs	r0, #0
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	003b      	movs	r3, r7
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2208      	movs	r2, #8
 800664c:	2180      	movs	r1, #128	@ 0x80
 800664e:	9802      	ldr	r0, [sp, #8]
 8006650:	f7fd fba3 	bl	8003d9a <ZbZclClusterAlloc>
 8006654:	0006      	movs	r6, r0
 8006656:	2e00      	cmp	r6, #0
 8006658:	d101      	bne.n	800665e <??ZbZclLevelServerAlloc_4>
 800665a:	2000      	movs	r0, #0
 800665c:	e03c      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

0800665e <??ZbZclLevelServerAlloc_4>:
 800665e:	2202      	movs	r2, #2
 8006660:	2300      	movs	r3, #0
 8006662:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006666:	0030      	movs	r0, r6
 8006668:	f7fb f9fb 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800666c:	f20f 0071 	addw	r0, pc, #113	@ 0x71
 8006670:	6630      	str	r0, [r6, #96]	@ 0x60
 8006672:	f20f 00b1 	addw	r0, pc, #177	@ 0xb1
 8006676:	6670      	str	r0, [r6, #100]	@ 0x64
 8006678:	f20f 10f1 	addw	r0, pc, #497	@ 0x1f1
 800667c:	65b0      	str	r0, [r6, #88]	@ 0x58
 800667e:	2d00      	cmp	r5, #0
 8006680:	d00a      	beq.n	8006698 <??ZbZclLevelServerAlloc_5>
 8006682:	f05f 0910 	movs.w	r9, #16
 8006686:	46aa      	mov	sl, r5
 8006688:	f116 0b70 	adds.w	fp, r6, #112	@ 0x70
 800668c:	464a      	mov	r2, r9
 800668e:	4651      	mov	r1, sl
 8006690:	4658      	mov	r0, fp
 8006692:	f00f fa44 	bl	8015b1e <__aeabi_memcpy>
 8006696:	e00a      	b.n	80066ae <??ZbZclLevelServerAlloc_6>

08006698 <??ZbZclLevelServerAlloc_5>:
 8006698:	f05f 0910 	movs.w	r9, #16
 800669c:	f05f 0a00 	movs.w	sl, #0
 80066a0:	f116 0b70 	adds.w	fp, r6, #112	@ 0x70
 80066a4:	4652      	mov	r2, sl
 80066a6:	4649      	mov	r1, r9
 80066a8:	4658      	mov	r0, fp
 80066aa:	f001 fa5b 	bl	8007b64 <__aeabi_memset>

080066ae <??ZbZclLevelServerAlloc_6>:
 80066ae:	4641      	mov	r1, r8
 80066b0:	0030      	movs	r0, r6
 80066b2:	f7fd f9e5 	bl	8003a80 <ZbZclClusterSetCallbackArg>
 80066b6:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80066b8:	2202      	movs	r2, #2
 80066ba:	4908      	ldr	r1, [pc, #32]	@ (80066dc <??DataTable0>)
 80066bc:	0030      	movs	r0, r6
 80066be:	f7fb fae7 	bl	8001c90 <ZbZclAttrAppendList>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d004      	beq.n	80066d0 <??ZbZclLevelServerAlloc_7>
 80066c6:	0030      	movs	r0, r6
 80066c8:	f7fd fc29 	bl	8003f1e <ZbZclClusterFree>
 80066cc:	2000      	movs	r0, #0
 80066ce:	e003      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

080066d0 <??ZbZclLevelServerAlloc_7>:
 80066d0:	0030      	movs	r0, r6
 80066d2:	f7fd fbf2 	bl	8003eba <ZbZclClusterAttach>
 80066d6:	0030      	movs	r0, r6

080066d8 <??ZbZclLevelServerAlloc_2>:
 80066d8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066dc <??DataTable0>:
 80066dc:	8080 0801                                   ....

080066e0 <zcl_level_server_get_scene_data>:
 80066e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80066e2:	0004      	movs	r4, r0
 80066e4:	000d      	movs	r5, r1
 80066e6:	0016      	movs	r6, r2
 80066e8:	2703      	movs	r7, #3
 80066ea:	2000      	movs	r0, #0
 80066ec:	9001      	str	r0, [sp, #4]
 80066ee:	2001      	movs	r0, #1
 80066f0:	9000      	str	r0, [sp, #0]
 80066f2:	ab02      	add	r3, sp, #8
 80066f4:	2200      	movs	r2, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	0020      	movs	r0, r4
 80066fa:	f7f9 fe74 	bl	80003e6 <ZbZclAttrRead>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d001      	beq.n	8006706 <??zcl_level_server_get_scene_data_0>
 8006702:	2000      	movs	r0, #0
 8006704:	e00d      	b.n	8006722 <??zcl_level_server_get_scene_data_1>

08006706 <??zcl_level_server_get_scene_data_0>:
 8006706:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800670a:	0039      	movs	r1, r7
 800670c:	b2c9      	uxtb	r1, r1
 800670e:	5468      	strb	r0, [r5, r1]
 8006710:	1c7f      	adds	r7, r7, #1
 8006712:	89a1      	ldrh	r1, [r4, #12]
 8006714:	0028      	movs	r0, r5
 8006716:	f000 fc46 	bl	8006fa6 <putle16>
 800671a:	1ef8      	subs	r0, r7, #3
 800671c:	70a8      	strb	r0, [r5, #2]
 800671e:	0038      	movs	r0, r7
 8006720:	b2c0      	uxtb	r0, r0

08006722 <??zcl_level_server_get_scene_data_1>:
 8006722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006724 <zcl_level_server_set_scene_data>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	b085      	sub	sp, #20
 800672a:	4680      	mov	r8, r0
 800672c:	000c      	movs	r4, r1
 800672e:	0015      	movs	r5, r2
 8006730:	001e      	movs	r6, r3
 8006732:	f8cd 8010 	str.w	r8, [sp, #16]
 8006736:	0028      	movs	r0, r5
 8006738:	b2c0      	uxtb	r0, r0
 800673a:	2801      	cmp	r0, #1
 800673c:	d001      	beq.n	8006742 <??zcl_level_server_set_scene_data_0>
 800673e:	2087      	movs	r0, #135	@ 0x87
 8006740:	e037      	b.n	80067b2 <??zcl_level_server_set_scene_data_1>

08006742 <??zcl_level_server_set_scene_data_0>:
 8006742:	7827      	ldrb	r7, [r4, #0]
 8006744:	9804      	ldr	r0, [sp, #16]
 8006746:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 8006748:	2800      	cmp	r0, #0
 800674a:	d02a      	beq.n	80067a2 <??zcl_level_server_set_scene_data_2>
 800674c:	f05f 0906 	movs.w	r9, #6
 8006750:	f05f 0a00 	movs.w	sl, #0
 8006754:	f10d 0b08 	add.w	fp, sp, #8
 8006758:	4652      	mov	r2, sl
 800675a:	4649      	mov	r1, r9
 800675c:	4658      	mov	r0, fp
 800675e:	f001 fa01 	bl	8007b64 <__aeabi_memset>
 8006762:	2000      	movs	r0, #0
 8006764:	f88d 0008 	strb.w	r0, [sp, #8]
 8006768:	f88d 7009 	strb.w	r7, [sp, #9]
 800676c:	2000      	movs	r0, #0
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	2002      	movs	r0, #2
 8006772:	9000      	str	r0, [sp, #0]
 8006774:	f10d 030a 	add.w	r3, sp, #10
 8006778:	2200      	movs	r2, #0
 800677a:	2110      	movs	r1, #16
 800677c:	4640      	mov	r0, r8
 800677e:	f7f9 fe32 	bl	80003e6 <ZbZclAttrRead>
 8006782:	2800      	cmp	r0, #0
 8006784:	d002      	beq.n	800678c <??zcl_level_server_set_scene_data_3>
 8006786:	2000      	movs	r0, #0
 8006788:	f8ad 000a 	strh.w	r0, [sp, #10]

0800678c <??zcl_level_server_set_scene_data_3>:
 800678c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8006790:	2200      	movs	r2, #0
 8006792:	a902      	add	r1, sp, #8
 8006794:	4640      	mov	r0, r8
 8006796:	f8dd c010 	ldr.w	ip, [sp, #16]
 800679a:	f8dc c070 	ldr.w	ip, [ip, #112]	@ 0x70
 800679e:	47e0      	blx	ip
 80067a0:	e006      	b.n	80067b0 <??zcl_level_server_set_scene_data_4>

080067a2 <??zcl_level_server_set_scene_data_2>:
 80067a2:	003a      	movs	r2, r7
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	2300      	movs	r3, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7fb f959 	bl	8001a62 <ZbZclAttrIntegerWrite>

080067b0 <??zcl_level_server_set_scene_data_4>:
 80067b0:	2000      	movs	r0, #0

080067b2 <??zcl_level_server_set_scene_data_1>:
 80067b2:	b005      	add	sp, #20
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067b8 <zcl_level_options_cmd_allow>:
 80067b8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80067bc:	0005      	movs	r5, r0
 80067be:	000e      	movs	r6, r1
 80067c0:	0017      	movs	r7, r2
 80067c2:	46a8      	mov	r8, r5
 80067c4:	2000      	movs	r0, #0
 80067c6:	9001      	str	r0, [sp, #4]
 80067c8:	2001      	movs	r0, #1
 80067ca:	9000      	str	r0, [sp, #0]
 80067cc:	ab02      	add	r3, sp, #8
 80067ce:	2200      	movs	r2, #0
 80067d0:	210f      	movs	r1, #15
 80067d2:	0028      	movs	r0, r5
 80067d4:	f7f9 fe07 	bl	80003e6 <ZbZclAttrRead>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d001      	beq.n	80067e0 <??zcl_level_options_cmd_allow_0>
 80067dc:	2000      	movs	r0, #0
 80067de:	e042      	b.n	8006866 <??zcl_level_options_cmd_allow_1>

080067e0 <??zcl_level_options_cmd_allow_0>:
 80067e0:	f05f 0900 	movs.w	r9, #0

080067e4 <??zcl_level_options_cmd_allow_2>:
 80067e4:	4648      	mov	r0, r9
 80067e6:	b2c0      	uxtb	r0, r0
 80067e8:	2808      	cmp	r0, #8
 80067ea:	da1d      	bge.n	8006828 <??zcl_level_options_cmd_allow_3>
 80067ec:	2001      	movs	r0, #1
 80067ee:	fa10 f009 	lsls.w	r0, r0, r9
 80067f2:	0004      	movs	r4, r0
 80067f4:	0030      	movs	r0, r6
 80067f6:	b2c0      	uxtb	r0, r0
 80067f8:	0021      	movs	r1, r4
 80067fa:	b2c9      	uxtb	r1, r1
 80067fc:	4208      	tst	r0, r1
 80067fe:	d010      	beq.n	8006822 <??zcl_level_options_cmd_allow_4>

08006800 <??zcl_level_options_cmd_allow_5>:
 8006800:	0038      	movs	r0, r7
 8006802:	b2c0      	uxtb	r0, r0
 8006804:	0021      	movs	r1, r4
 8006806:	b2c9      	uxtb	r1, r1
 8006808:	4208      	tst	r0, r1
 800680a:	d105      	bne.n	8006818 <??zcl_level_options_cmd_allow_6>
 800680c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006810:	43a0      	bics	r0, r4
 8006812:	f88d 0008 	strb.w	r0, [sp, #8]
 8006816:	e004      	b.n	8006822 <??zcl_level_options_cmd_allow_4>

08006818 <??zcl_level_options_cmd_allow_6>:
 8006818:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800681c:	4320      	orrs	r0, r4
 800681e:	f88d 0008 	strb.w	r0, [sp, #8]

08006822 <??zcl_level_options_cmd_allow_4>:
 8006822:	f119 0901 	adds.w	r9, r9, #1
 8006826:	e7dd      	b.n	80067e4 <??zcl_level_options_cmd_allow_2>

08006828 <??zcl_level_options_cmd_allow_3>:
 8006828:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800682c:	07c0      	lsls	r0, r0, #31
 800682e:	d419      	bmi.n	8006864 <??zcl_level_options_cmd_allow_7>
 8006830:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 8006834:	2800      	cmp	r0, #0
 8006836:	d015      	beq.n	8006864 <??zcl_level_options_cmd_allow_7>
 8006838:	2000      	movs	r0, #0
 800683a:	9001      	str	r0, [sp, #4]
 800683c:	2001      	movs	r0, #1
 800683e:	9000      	str	r0, [sp, #0]
 8006840:	f10d 0309 	add.w	r3, sp, #9
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 800684c:	f7f9 fdcb 	bl	80003e6 <ZbZclAttrRead>
 8006850:	2800      	cmp	r0, #0
 8006852:	d001      	beq.n	8006858 <??zcl_level_options_cmd_allow_8>
 8006854:	2000      	movs	r0, #0
 8006856:	e006      	b.n	8006866 <??zcl_level_options_cmd_allow_1>

08006858 <??zcl_level_options_cmd_allow_8>:
 8006858:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800685c:	2800      	cmp	r0, #0
 800685e:	d101      	bne.n	8006864 <??zcl_level_options_cmd_allow_7>
 8006860:	2000      	movs	r0, #0
 8006862:	e000      	b.n	8006866 <??zcl_level_options_cmd_allow_1>

08006864 <??zcl_level_options_cmd_allow_7>:
 8006864:	2001      	movs	r0, #1

08006866 <??zcl_level_options_cmd_allow_1>:
 8006866:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800686c <zcl_level_server_handle_command>:
 800686c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	b08e      	sub	sp, #56	@ 0x38
 8006872:	0004      	movs	r4, r0
 8006874:	000d      	movs	r5, r1
 8006876:	0016      	movs	r6, r2
 8006878:	0027      	movs	r7, r4
 800687a:	f8b6 8028 	ldrh.w	r8, [r6, #40]	@ 0x28
 800687e:	f05f 0918 	movs.w	r9, #24
 8006882:	f05f 0a00 	movs.w	sl, #0
 8006886:	f10d 0b20 	add.w	fp, sp, #32
 800688a:	4652      	mov	r2, sl
 800688c:	4649      	mov	r1, r9
 800688e:	4658      	mov	r0, fp
 8006890:	f001 f968 	bl	8007b64 <__aeabi_memset>
 8006894:	a808      	add	r0, sp, #32
 8006896:	f116 0110 	adds.w	r1, r6, #16
 800689a:	2210      	movs	r2, #16
 800689c:	f00f f93f 	bl	8015b1e <__aeabi_memcpy>
 80068a0:	79a8      	ldrb	r0, [r5, #6]
 80068a2:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
 80068a6:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 80068aa:	f7fd f9de 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 80068ae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80068b2:	78a8      	ldrb	r0, [r5, #2]
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d001      	beq.n	80068bc <??zcl_level_server_handle_command_0>
 80068b8:	2081      	movs	r0, #129	@ 0x81
 80068ba:	e124      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080068bc <??zcl_level_server_handle_command_0>:
 80068bc:	79e8      	ldrb	r0, [r5, #7]
 80068be:	2800      	cmp	r0, #0
 80068c0:	d00f      	beq.n	80068e2 <??zcl_level_server_handle_command_2>
 80068c2:	2802      	cmp	r0, #2
 80068c4:	f000 809b 	beq.w	80069fe <??zcl_level_server_handle_command_3>
 80068c8:	d353      	bcc.n	8006972 <??zcl_level_server_handle_command_4>
 80068ca:	2804      	cmp	r0, #4
 80068cc:	d009      	beq.n	80068e2 <??zcl_level_server_handle_command_2>
 80068ce:	f0c0 80e2 	bcc.w	8006a96 <??zcl_level_server_handle_command_5>
 80068d2:	2806      	cmp	r0, #6
 80068d4:	f000 8093 	beq.w	80069fe <??zcl_level_server_handle_command_3>
 80068d8:	d34b      	bcc.n	8006972 <??zcl_level_server_handle_command_4>
 80068da:	2807      	cmp	r0, #7
 80068dc:	f000 80db 	beq.w	8006a96 <??zcl_level_server_handle_command_5>
 80068e0:	e110      	b.n	8006b04 <??zcl_level_server_handle_command_6>

080068e2 <??zcl_level_server_handle_command_2>:
 80068e2:	4640      	mov	r0, r8
 80068e4:	b280      	uxth	r0, r0
 80068e6:	2803      	cmp	r0, #3
 80068e8:	da01      	bge.n	80068ee <??zcl_level_server_handle_command_7>
 80068ea:	2080      	movs	r0, #128	@ 0x80
 80068ec:	e10b      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080068ee <??zcl_level_server_handle_command_7>:
 80068ee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d101      	bne.n	80068f8 <??zcl_level_server_handle_command_8>
 80068f4:	2081      	movs	r0, #129	@ 0x81
 80068f6:	e106      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080068f8 <??zcl_level_server_handle_command_8>:
 80068f8:	f05f 0906 	movs.w	r9, #6
 80068fc:	f05f 0a00 	movs.w	sl, #0
 8006900:	f10d 0b14 	add.w	fp, sp, #20
 8006904:	4652      	mov	r2, sl
 8006906:	4649      	mov	r1, r9
 8006908:	4658      	mov	r0, fp
 800690a:	f001 f92b 	bl	8007b64 <__aeabi_memset>
 800690e:	79e8      	ldrb	r0, [r5, #7]
 8006910:	2804      	cmp	r0, #4
 8006912:	d102      	bne.n	800691a <??zcl_level_server_handle_command_9>
 8006914:	2001      	movs	r0, #1
 8006916:	f88d 0014 	strb.w	r0, [sp, #20]

0800691a <??zcl_level_server_handle_command_9>:
 800691a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800691c:	7800      	ldrb	r0, [r0, #0]
 800691e:	f88d 0015 	strb.w	r0, [sp, #21]
 8006922:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006924:	1c40      	adds	r0, r0, #1
 8006926:	f000 faf2 	bl	8006f0e <pletoh16>
 800692a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800692e:	79e8      	ldrb	r0, [r5, #7]
 8006930:	2800      	cmp	r0, #0
 8006932:	d116      	bne.n	8006962 <??zcl_level_server_handle_command_10>
 8006934:	4640      	mov	r0, r8
 8006936:	b280      	uxth	r0, r0
 8006938:	2805      	cmp	r0, #5
 800693a:	db07      	blt.n	800694c <??zcl_level_server_handle_command_11>
 800693c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800693e:	78c0      	ldrb	r0, [r0, #3]
 8006940:	f88d 0018 	strb.w	r0, [sp, #24]
 8006944:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006946:	7900      	ldrb	r0, [r0, #4]
 8006948:	f88d 0019 	strb.w	r0, [sp, #25]

0800694c <??zcl_level_server_handle_command_11>:
 800694c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8006950:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8006954:	0020      	movs	r0, r4
 8006956:	f7ff ff2f 	bl	80067b8 <zcl_level_options_cmd_allow>
 800695a:	2800      	cmp	r0, #0
 800695c:	d101      	bne.n	8006962 <??zcl_level_server_handle_command_10>
 800695e:	2070      	movs	r0, #112	@ 0x70
 8006960:	e0d1      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006962 <??zcl_level_server_handle_command_10>:
 8006962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006964:	aa08      	add	r2, sp, #32
 8006966:	a905      	add	r1, sp, #20
 8006968:	0020      	movs	r0, r4
 800696a:	f8d7 c070 	ldr.w	ip, [r7, #112]	@ 0x70
 800696e:	47e0      	blx	ip
 8006970:	e0c9      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006972 <??zcl_level_server_handle_command_4>:
 8006972:	4640      	mov	r0, r8
 8006974:	b280      	uxth	r0, r0
 8006976:	2802      	cmp	r0, #2
 8006978:	da01      	bge.n	800697e <??zcl_level_server_handle_command_12>
 800697a:	2080      	movs	r0, #128	@ 0x80
 800697c:	e0c3      	b.n	8006b06 <??zcl_level_server_handle_command_1>

0800697e <??zcl_level_server_handle_command_12>:
 800697e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006980:	2800      	cmp	r0, #0
 8006982:	d101      	bne.n	8006988 <??zcl_level_server_handle_command_13>
 8006984:	2081      	movs	r0, #129	@ 0x81
 8006986:	e0be      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006988 <??zcl_level_server_handle_command_13>:
 8006988:	f05f 0905 	movs.w	r9, #5
 800698c:	f05f 0a00 	movs.w	sl, #0
 8006990:	f10d 0b0c 	add.w	fp, sp, #12
 8006994:	4652      	mov	r2, sl
 8006996:	4649      	mov	r1, r9
 8006998:	4658      	mov	r0, fp
 800699a:	f001 f8e3 	bl	8007b64 <__aeabi_memset>
 800699e:	79e8      	ldrb	r0, [r5, #7]
 80069a0:	2805      	cmp	r0, #5
 80069a2:	d102      	bne.n	80069aa <??zcl_level_server_handle_command_14>
 80069a4:	2001      	movs	r0, #1
 80069a6:	f88d 000c 	strb.w	r0, [sp, #12]

080069aa <??zcl_level_server_handle_command_14>:
 80069aa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069ac:	7800      	ldrb	r0, [r0, #0]
 80069ae:	f88d 000d 	strb.w	r0, [sp, #13]
 80069b2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069b4:	7840      	ldrb	r0, [r0, #1]
 80069b6:	f88d 000e 	strb.w	r0, [sp, #14]
 80069ba:	79e8      	ldrb	r0, [r5, #7]
 80069bc:	2801      	cmp	r0, #1
 80069be:	d116      	bne.n	80069ee <??zcl_level_server_handle_command_15>
 80069c0:	4640      	mov	r0, r8
 80069c2:	b280      	uxth	r0, r0
 80069c4:	2804      	cmp	r0, #4
 80069c6:	db07      	blt.n	80069d8 <??zcl_level_server_handle_command_16>
 80069c8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069ca:	7880      	ldrb	r0, [r0, #2]
 80069cc:	f88d 000f 	strb.w	r0, [sp, #15]
 80069d0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069d2:	78c0      	ldrb	r0, [r0, #3]
 80069d4:	f88d 0010 	strb.w	r0, [sp, #16]

080069d8 <??zcl_level_server_handle_command_16>:
 80069d8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80069dc:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80069e0:	0020      	movs	r0, r4
 80069e2:	f7ff fee9 	bl	80067b8 <zcl_level_options_cmd_allow>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d101      	bne.n	80069ee <??zcl_level_server_handle_command_15>
 80069ea:	2070      	movs	r0, #112	@ 0x70
 80069ec:	e08b      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080069ee <??zcl_level_server_handle_command_15>:
 80069ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80069f0:	aa08      	add	r2, sp, #32
 80069f2:	a903      	add	r1, sp, #12
 80069f4:	0020      	movs	r0, r4
 80069f6:	f8d7 c074 	ldr.w	ip, [r7, #116]	@ 0x74
 80069fa:	47e0      	blx	ip
 80069fc:	e083      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080069fe <??zcl_level_server_handle_command_3>:
 80069fe:	4640      	mov	r0, r8
 8006a00:	b280      	uxth	r0, r0
 8006a02:	2804      	cmp	r0, #4
 8006a04:	da01      	bge.n	8006a0a <??zcl_level_server_handle_command_17>
 8006a06:	2080      	movs	r0, #128	@ 0x80
 8006a08:	e07d      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a0a <??zcl_level_server_handle_command_17>:
 8006a0a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d101      	bne.n	8006a14 <??zcl_level_server_handle_command_18>
 8006a10:	2081      	movs	r0, #129	@ 0x81
 8006a12:	e078      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a14 <??zcl_level_server_handle_command_18>:
 8006a14:	f05f 0908 	movs.w	r9, #8
 8006a18:	f05f 0a00 	movs.w	sl, #0
 8006a1c:	f10d 0b04 	add.w	fp, sp, #4
 8006a20:	4652      	mov	r2, sl
 8006a22:	4649      	mov	r1, r9
 8006a24:	4658      	mov	r0, fp
 8006a26:	f001 f89d 	bl	8007b64 <__aeabi_memset>
 8006a2a:	79e8      	ldrb	r0, [r5, #7]
 8006a2c:	2806      	cmp	r0, #6
 8006a2e:	d102      	bne.n	8006a36 <??zcl_level_server_handle_command_19>
 8006a30:	2001      	movs	r0, #1
 8006a32:	f88d 0004 	strb.w	r0, [sp, #4]

08006a36 <??zcl_level_server_handle_command_19>:
 8006a36:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a38:	7800      	ldrb	r0, [r0, #0]
 8006a3a:	f88d 0005 	strb.w	r0, [sp, #5]
 8006a3e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a40:	7840      	ldrb	r0, [r0, #1]
 8006a42:	f88d 0006 	strb.w	r0, [sp, #6]
 8006a46:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a48:	1c80      	adds	r0, r0, #2
 8006a4a:	f000 fa60 	bl	8006f0e <pletoh16>
 8006a4e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8006a52:	79e8      	ldrb	r0, [r5, #7]
 8006a54:	2802      	cmp	r0, #2
 8006a56:	d116      	bne.n	8006a86 <??zcl_level_server_handle_command_20>
 8006a58:	4640      	mov	r0, r8
 8006a5a:	b280      	uxth	r0, r0
 8006a5c:	2806      	cmp	r0, #6
 8006a5e:	db07      	blt.n	8006a70 <??zcl_level_server_handle_command_21>
 8006a60:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a62:	7900      	ldrb	r0, [r0, #4]
 8006a64:	f88d 000a 	strb.w	r0, [sp, #10]
 8006a68:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a6a:	7940      	ldrb	r0, [r0, #5]
 8006a6c:	f88d 000b 	strb.w	r0, [sp, #11]

08006a70 <??zcl_level_server_handle_command_21>:
 8006a70:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8006a74:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8006a78:	0020      	movs	r0, r4
 8006a7a:	f7ff fe9d 	bl	80067b8 <zcl_level_options_cmd_allow>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d101      	bne.n	8006a86 <??zcl_level_server_handle_command_20>
 8006a82:	2070      	movs	r0, #112	@ 0x70
 8006a84:	e03f      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a86 <??zcl_level_server_handle_command_20>:
 8006a86:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006a88:	aa08      	add	r2, sp, #32
 8006a8a:	a901      	add	r1, sp, #4
 8006a8c:	0020      	movs	r0, r4
 8006a8e:	f8d7 c078 	ldr.w	ip, [r7, #120]	@ 0x78
 8006a92:	47e0      	blx	ip
 8006a94:	e037      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a96 <??zcl_level_server_handle_command_5>:
 8006a96:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d101      	bne.n	8006aa0 <??zcl_level_server_handle_command_22>
 8006a9c:	2081      	movs	r0, #129	@ 0x81
 8006a9e:	e032      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006aa0 <??zcl_level_server_handle_command_22>:
 8006aa0:	f05f 0903 	movs.w	r9, #3
 8006aa4:	f05f 0a00 	movs.w	sl, #0
 8006aa8:	46eb      	mov	fp, sp
 8006aaa:	4652      	mov	r2, sl
 8006aac:	4649      	mov	r1, r9
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f001 f858 	bl	8007b64 <__aeabi_memset>
 8006ab4:	79e8      	ldrb	r0, [r5, #7]
 8006ab6:	2807      	cmp	r0, #7
 8006ab8:	d102      	bne.n	8006ac0 <??zcl_level_server_handle_command_23>
 8006aba:	2001      	movs	r0, #1
 8006abc:	f88d 0000 	strb.w	r0, [sp]

08006ac0 <??zcl_level_server_handle_command_23>:
 8006ac0:	79e8      	ldrb	r0, [r5, #7]
 8006ac2:	2803      	cmp	r0, #3
 8006ac4:	d116      	bne.n	8006af4 <??zcl_level_server_handle_command_24>
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	b280      	uxth	r0, r0
 8006aca:	2802      	cmp	r0, #2
 8006acc:	db07      	blt.n	8006ade <??zcl_level_server_handle_command_25>
 8006ace:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006ad0:	7800      	ldrb	r0, [r0, #0]
 8006ad2:	f88d 0001 	strb.w	r0, [sp, #1]
 8006ad6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006ad8:	7840      	ldrb	r0, [r0, #1]
 8006ada:	f88d 0002 	strb.w	r0, [sp, #2]

08006ade <??zcl_level_server_handle_command_25>:
 8006ade:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006ae2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	f7ff fe66 	bl	80067b8 <zcl_level_options_cmd_allow>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d101      	bne.n	8006af4 <??zcl_level_server_handle_command_24>
 8006af0:	2070      	movs	r0, #112	@ 0x70
 8006af2:	e008      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006af4 <??zcl_level_server_handle_command_24>:
 8006af4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006af6:	aa08      	add	r2, sp, #32
 8006af8:	4669      	mov	r1, sp
 8006afa:	0020      	movs	r0, r4
 8006afc:	f8d7 c07c 	ldr.w	ip, [r7, #124]	@ 0x7c
 8006b00:	47e0      	blx	ip
 8006b02:	e000      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006b04 <??zcl_level_server_handle_command_6>:
 8006b04:	2081      	movs	r0, #129	@ 0x81

08006b06 <??zcl_level_server_handle_command_1>:
 8006b06:	b00f      	add	sp, #60	@ 0x3c
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b0c <ZbZclOnOffServerAlloc>:
 8006b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	0006      	movs	r6, r0
 8006b12:	000f      	movs	r7, r1
 8006b14:	0014      	movs	r4, r2
 8006b16:	4698      	mov	r8, r3
 8006b18:	2000      	movs	r0, #0
 8006b1a:	9000      	str	r0, [sp, #0]
 8006b1c:	003b      	movs	r3, r7
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2206      	movs	r2, #6
 8006b22:	2180      	movs	r1, #128	@ 0x80
 8006b24:	0030      	movs	r0, r6
 8006b26:	f7fd f938 	bl	8003d9a <ZbZclClusterAlloc>
 8006b2a:	0005      	movs	r5, r0
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	d101      	bne.n	8006b34 <??ZbZclOnOffServerAlloc_0>
 8006b30:	2000      	movs	r0, #0
 8006b32:	e041      	b.n	8006bb8 <??ZbZclOnOffServerAlloc_1>

08006b34 <??ZbZclOnOffServerAlloc_0>:
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d00a      	beq.n	8006b4e <??ZbZclOnOffServerAlloc_2>
 8006b38:	f05f 090c 	movs.w	r9, #12
 8006b3c:	46a2      	mov	sl, r4
 8006b3e:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8006b42:	464a      	mov	r2, r9
 8006b44:	4651      	mov	r1, sl
 8006b46:	4658      	mov	r0, fp
 8006b48:	f00e ffe9 	bl	8015b1e <__aeabi_memcpy>
 8006b4c:	e00a      	b.n	8006b64 <??ZbZclOnOffServerAlloc_3>

08006b4e <??ZbZclOnOffServerAlloc_2>:
 8006b4e:	f05f 090c 	movs.w	r9, #12
 8006b52:	f05f 0a00 	movs.w	sl, #0
 8006b56:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f001 f800 	bl	8007b64 <__aeabi_memset>

08006b64 <??ZbZclOnOffServerAlloc_3>:
 8006b64:	2201      	movs	r2, #1
 8006b66:	2300      	movs	r3, #0
 8006b68:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006b6c:	0028      	movs	r0, r5
 8006b6e:	f7fa ff78 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006b72:	f20f 004d 	addw	r0, pc, #77	@ 0x4d
 8006b76:	6628      	str	r0, [r5, #96]	@ 0x60
 8006b78:	f20f 0089 	addw	r0, pc, #137	@ 0x89
 8006b7c:	6668      	str	r0, [r5, #100]	@ 0x64
 8006b7e:	f20f 00c1 	addw	r0, pc, #193	@ 0xc1
 8006b82:	65a8      	str	r0, [r5, #88]	@ 0x58
 8006b84:	2201      	movs	r2, #1
 8006b86:	490d      	ldr	r1, [pc, #52]	@ (8006bbc <??DataTable0>)
 8006b88:	0028      	movs	r0, r5
 8006b8a:	f7fb f881 	bl	8001c90 <ZbZclAttrAppendList>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d004      	beq.n	8006b9c <??ZbZclOnOffServerAlloc_4>
 8006b92:	0028      	movs	r0, r5
 8006b94:	f7fd f9c3 	bl	8003f1e <ZbZclClusterFree>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e00d      	b.n	8006bb8 <??ZbZclOnOffServerAlloc_1>

08006b9c <??ZbZclOnOffServerAlloc_4>:
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	0028      	movs	r0, r5
 8006ba4:	f7fa ff5d 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006ba8:	4641      	mov	r1, r8
 8006baa:	0028      	movs	r0, r5
 8006bac:	f7fc ff68 	bl	8003a80 <ZbZclClusterSetCallbackArg>
 8006bb0:	0028      	movs	r0, r5
 8006bb2:	f7fd f982 	bl	8003eba <ZbZclClusterAttach>
 8006bb6:	0028      	movs	r0, r5

08006bb8 <??ZbZclOnOffServerAlloc_1>:
 8006bb8:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bbc <??DataTable0>:
 8006bbc:	80d0 0801                                   ....

08006bc0 <onOffServerGetSceneData>:
 8006bc0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8006bc2:	0004      	movs	r4, r0
 8006bc4:	000d      	movs	r5, r1
 8006bc6:	0016      	movs	r6, r2
 8006bc8:	2703      	movs	r7, #3
 8006bca:	2000      	movs	r0, #0
 8006bcc:	9001      	str	r0, [sp, #4]
 8006bce:	2001      	movs	r0, #1
 8006bd0:	9000      	str	r0, [sp, #0]
 8006bd2:	ab02      	add	r3, sp, #8
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	0020      	movs	r0, r4
 8006bda:	f7f9 fc04 	bl	80003e6 <ZbZclAttrRead>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d001      	beq.n	8006be6 <??onOffServerGetSceneData_0>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e00d      	b.n	8006c02 <??onOffServerGetSceneData_1>

08006be6 <??onOffServerGetSceneData_0>:
 8006be6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006bea:	0039      	movs	r1, r7
 8006bec:	b2c9      	uxtb	r1, r1
 8006bee:	5468      	strb	r0, [r5, r1]
 8006bf0:	1c7f      	adds	r7, r7, #1
 8006bf2:	89a1      	ldrh	r1, [r4, #12]
 8006bf4:	0028      	movs	r0, r5
 8006bf6:	f000 f9d6 	bl	8006fa6 <putle16>
 8006bfa:	1ef8      	subs	r0, r7, #3
 8006bfc:	70a8      	strb	r0, [r5, #2]
 8006bfe:	0038      	movs	r0, r7
 8006c00:	b2c0      	uxtb	r0, r0

08006c02 <??onOffServerGetSceneData_1>:
 8006c02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006c04 <onOffServerSetSceneData>:
 8006c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c08:	0007      	movs	r7, r0
 8006c0a:	000c      	movs	r4, r1
 8006c0c:	0015      	movs	r5, r2
 8006c0e:	001e      	movs	r6, r3
 8006c10:	0028      	movs	r0, r5
 8006c12:	b2c0      	uxtb	r0, r0
 8006c14:	2801      	cmp	r0, #1
 8006c16:	d001      	beq.n	8006c1c <??onOffServerSetSceneData_0>
 8006c18:	2087      	movs	r0, #135	@ 0x87
 8006c1a:	e00f      	b.n	8006c3c <??onOffServerSetSceneData_1>

08006c1c <??onOffServerSetSceneData_0>:
 8006c1c:	7820      	ldrb	r0, [r4, #0]
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d002      	beq.n	8006c28 <??onOffServerSetSceneData_2>
 8006c22:	f05f 0801 	movs.w	r8, #1
 8006c26:	e001      	b.n	8006c2c <??onOffServerSetSceneData_3>

08006c28 <??onOffServerSetSceneData_2>:
 8006c28:	f05f 0800 	movs.w	r8, #0

08006c2c <??onOffServerSetSceneData_3>:
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	2300      	movs	r3, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	0038      	movs	r0, r7
 8006c36:	f7fa ff14 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006c3a:	2000      	movs	r0, #0

08006c3c <??onOffServerSetSceneData_1>:
 8006c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c40 <onOffServerCommand>:
 8006c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	b08a      	sub	sp, #40	@ 0x28
 8006c46:	4680      	mov	r8, r0
 8006c48:	000c      	movs	r4, r1
 8006c4a:	0015      	movs	r5, r2
 8006c4c:	4646      	mov	r6, r8
 8006c4e:	27ff      	movs	r7, #255	@ 0xff
 8006c50:	f05f 0918 	movs.w	r9, #24
 8006c54:	f05f 0a00 	movs.w	sl, #0
 8006c58:	f10d 0b10 	add.w	fp, sp, #16
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4658      	mov	r0, fp
 8006c62:	f000 ff7f 	bl	8007b64 <__aeabi_memset>
 8006c66:	a804      	add	r0, sp, #16
 8006c68:	f115 0110 	adds.w	r1, r5, #16
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	f00e ff56 	bl	8015b1e <__aeabi_memcpy>
 8006c72:	79a0      	ldrb	r0, [r4, #6]
 8006c74:	f88d 0020 	strb.w	r0, [sp, #32]
 8006c78:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8006c7c:	f7fc fff5 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8006c80:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8006c84:	79e0      	ldrb	r0, [r4, #7]
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d003      	beq.n	8006c92 <??onOffServerCommand_0>
 8006c8a:	2802      	cmp	r0, #2
 8006c8c:	d025      	beq.n	8006cda <??onOffServerCommand_1>
 8006c8e:	d312      	bcc.n	8006cb6 <??onOffServerCommand_2>
 8006c90:	e050      	b.n	8006d34 <??onOffServerCommand_3>

08006c92 <??onOffServerCommand_0>:
 8006c92:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d007      	beq.n	8006ca8 <??onOffServerCommand_4>
 8006c98:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8006c9c:	a904      	add	r1, sp, #16
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 8006ca2:	4798      	blx	r3
 8006ca4:	0007      	movs	r7, r0
 8006ca6:	e005      	b.n	8006cb4 <??onOffServerCommand_5>

08006ca8 <??onOffServerCommand_4>:
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7fa fed7 	bl	8001a62 <ZbZclAttrIntegerWrite>

08006cb4 <??onOffServerCommand_5>:
 8006cb4:	e040      	b.n	8006d38 <??onOffServerCommand_6>

08006cb6 <??onOffServerCommand_2>:
 8006cb6:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d007      	beq.n	8006ccc <??onOffServerCommand_7>
 8006cbc:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8006cc0:	a904      	add	r1, sp, #16
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8006cc6:	4798      	blx	r3
 8006cc8:	0007      	movs	r7, r0
 8006cca:	e005      	b.n	8006cd8 <??onOffServerCommand_8>

08006ccc <??onOffServerCommand_7>:
 8006ccc:	2201      	movs	r2, #1
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f7fa fec5 	bl	8001a62 <ZbZclAttrIntegerWrite>

08006cd8 <??onOffServerCommand_8>:
 8006cd8:	e02e      	b.n	8006d38 <??onOffServerCommand_6>

08006cda <??onOffServerCommand_1>:
 8006cda:	6f70      	ldr	r0, [r6, #116]	@ 0x74
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d007      	beq.n	8006cf0 <??onOffServerCommand_9>
 8006ce0:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006cea:	4798      	blx	r3
 8006cec:	0007      	movs	r7, r0
 8006cee:	e020      	b.n	8006d32 <??onOffServerCommand_10>

08006cf0 <??onOffServerCommand_9>:
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	9001      	str	r0, [sp, #4]
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	9000      	str	r0, [sp, #0]
 8006cf8:	ab02      	add	r3, sp, #8
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f7f9 fb71 	bl	80003e6 <ZbZclAttrRead>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d002      	beq.n	8006d0e <??onOffServerCommand_11>
 8006d08:	2086      	movs	r0, #134	@ 0x86
 8006d0a:	0007      	movs	r7, r0
 8006d0c:	e014      	b.n	8006d38 <??onOffServerCommand_6>

08006d0e <??onOffServerCommand_11>:
 8006d0e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d003      	beq.n	8006d1e <??onOffServerCommand_12>
 8006d16:	2000      	movs	r0, #0
 8006d18:	f88d 0008 	strb.w	r0, [sp, #8]
 8006d1c:	e002      	b.n	8006d24 <??onOffServerCommand_13>

08006d1e <??onOffServerCommand_12>:
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f88d 0008 	strb.w	r0, [sp, #8]

08006d24 <??onOffServerCommand_13>:
 8006d24:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	f7fa fe98 	bl	8001a62 <ZbZclAttrIntegerWrite>

08006d32 <??onOffServerCommand_10>:
 8006d32:	e001      	b.n	8006d38 <??onOffServerCommand_6>

08006d34 <??onOffServerCommand_3>:
 8006d34:	2081      	movs	r0, #129	@ 0x81
 8006d36:	0007      	movs	r7, r0

08006d38 <??onOffServerCommand_6>:
 8006d38:	0038      	movs	r0, r7
 8006d3a:	b2c0      	uxtb	r0, r0
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d106      	bne.n	8006d4e <??onOffServerCommand_14>
 8006d40:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d003      	beq.n	8006d4e <??onOffServerCommand_14>
 8006d46:	79e1      	ldrb	r1, [r4, #7]
 8006d48:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 8006d4a:	6ff2      	ldr	r2, [r6, #124]	@ 0x7c
 8006d4c:	4790      	blx	r2

08006d4e <??onOffServerCommand_14>:
 8006d4e:	0038      	movs	r0, r7
 8006d50:	b2c0      	uxtb	r0, r0
 8006d52:	b00b      	add	sp, #44	@ 0x2c
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d58 <ZbZclOnOffServerSetLevelControlCallback>:
 8006d58:	0003      	movs	r3, r0
 8006d5a:	6799      	str	r1, [r3, #120]	@ 0x78
 8006d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006d5e:	4770      	bx	lr

08006d60 <zcl_attr_cb>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	0004      	movs	r4, r0
 8006d66:	000d      	movs	r5, r1
 8006d68:	7928      	ldrb	r0, [r5, #4]
 8006d6a:	2801      	cmp	r0, #1
 8006d6c:	d10f      	bne.n	8006d8e <??zcl_attr_cb_0>
 8006d6e:	69e8      	ldr	r0, [r5, #28]
 8006d70:	9003      	str	r0, [sp, #12]
 8006d72:	8a28      	ldrh	r0, [r5, #16]
 8006d74:	9002      	str	r0, [sp, #8]
 8006d76:	6968      	ldr	r0, [r5, #20]
 8006d78:	9001      	str	r0, [sp, #4]
 8006d7a:	68e8      	ldr	r0, [r5, #12]
 8006d7c:	9000      	str	r0, [sp, #0]
 8006d7e:	68ab      	ldr	r3, [r5, #8]
 8006d80:	6828      	ldr	r0, [r5, #0]
 8006d82:	8802      	ldrh	r2, [r0, #0]
 8006d84:	69a9      	ldr	r1, [r5, #24]
 8006d86:	0020      	movs	r0, r4
 8006d88:	f000 f862 	bl	8006e50 <zcl_attr_write_cb>
 8006d8c:	e000      	b.n	8006d90 <??zcl_attr_cb_1>

08006d8e <??zcl_attr_cb_0>:
 8006d8e:	2001      	movs	r0, #1

08006d90 <??zcl_attr_cb_1>:
 8006d90:	b005      	add	sp, #20
 8006d92:	bd30      	pop	{r4, r5, pc}

08006d94 <ZbZclWaterContentMeasServerAlloc>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	0006      	movs	r6, r0
 8006d9a:	000f      	movs	r7, r1
 8006d9c:	4690      	mov	r8, r2
 8006d9e:	4699      	mov	r9, r3
 8006da0:	9d08      	ldr	r5, [sp, #32]
 8006da2:	4640      	mov	r0, r8
 8006da4:	b280      	uxth	r0, r0
 8006da6:	f240 4105 	movw	r1, #1029	@ 0x405
 8006daa:	4288      	cmp	r0, r1
 8006dac:	d00c      	beq.n	8006dc8 <??ZbZclWaterContentMeasServerAlloc_0>
 8006dae:	4640      	mov	r0, r8
 8006db0:	b280      	uxth	r0, r0
 8006db2:	f240 4107 	movw	r1, #1031	@ 0x407
 8006db6:	4288      	cmp	r0, r1
 8006db8:	d006      	beq.n	8006dc8 <??ZbZclWaterContentMeasServerAlloc_0>
 8006dba:	4640      	mov	r0, r8
 8006dbc:	b280      	uxth	r0, r0
 8006dbe:	f5b0 6f81 	cmp.w	r0, #1032	@ 0x408
 8006dc2:	d001      	beq.n	8006dc8 <??ZbZclWaterContentMeasServerAlloc_0>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e03e      	b.n	8006e46 <??ZbZclWaterContentMeasServerAlloc_1>

08006dc8 <??ZbZclWaterContentMeasServerAlloc_0>:
 8006dc8:	2000      	movs	r0, #0
 8006dca:	9000      	str	r0, [sp, #0]
 8006dcc:	003b      	movs	r3, r7
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	b292      	uxth	r2, r2
 8006dd4:	2170      	movs	r1, #112	@ 0x70
 8006dd6:	0030      	movs	r0, r6
 8006dd8:	f7fc ffdf 	bl	8003d9a <ZbZclClusterAlloc>
 8006ddc:	0004      	movs	r4, r0
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	d101      	bne.n	8006de6 <??ZbZclWaterContentMeasServerAlloc_2>
 8006de2:	2000      	movs	r0, #0
 8006de4:	e02f      	b.n	8006e46 <??ZbZclWaterContentMeasServerAlloc_1>

08006de6 <??ZbZclWaterContentMeasServerAlloc_2>:
 8006de6:	2201      	movs	r2, #1
 8006de8:	2300      	movs	r3, #0
 8006dea:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006dee:	0020      	movs	r0, r4
 8006df0:	f7fa fe37 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006df4:	f8a4 906c 	strh.w	r9, [r4, #108]	@ 0x6c
 8006df8:	f8a4 506e 	strh.w	r5, [r4, #110]	@ 0x6e
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	4913      	ldr	r1, [pc, #76]	@ (8006e4c <??DataTable1>)
 8006e00:	0020      	movs	r0, r4
 8006e02:	f7fa ff45 	bl	8001c90 <ZbZclAttrAppendList>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d004      	beq.n	8006e14 <??ZbZclWaterContentMeasServerAlloc_3>
 8006e0a:	0020      	movs	r0, r4
 8006e0c:	f7fd f887 	bl	8003f1e <ZbZclClusterFree>
 8006e10:	2000      	movs	r0, #0
 8006e12:	e018      	b.n	8006e46 <??ZbZclWaterContentMeasServerAlloc_1>

08006e14 <??ZbZclWaterContentMeasServerAlloc_3>:
 8006e14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7fa fe20 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e22:	f8b4 206c 	ldrh.w	r2, [r4, #108]	@ 0x6c
 8006e26:	2300      	movs	r3, #0
 8006e28:	2101      	movs	r1, #1
 8006e2a:	0020      	movs	r0, r4
 8006e2c:	f7fa fe19 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e30:	f8b4 206e 	ldrh.w	r2, [r4, #110]	@ 0x6e
 8006e34:	2300      	movs	r3, #0
 8006e36:	2102      	movs	r1, #2
 8006e38:	0020      	movs	r0, r4
 8006e3a:	f7fa fe12 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e3e:	0020      	movs	r0, r4
 8006e40:	f7fd f83b 	bl	8003eba <ZbZclClusterAttach>
 8006e44:	0020      	movs	r0, r4

08006e46 <??ZbZclWaterContentMeasServerAlloc_1>:
 8006e46:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08006e4c <??DataTable1>:
 8006e4c:	80f8 0801                                   ....

08006e50 <zcl_attr_write_cb>:
 8006e50:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	b083      	sub	sp, #12
 8006e56:	0005      	movs	r5, r0
 8006e58:	001e      	movs	r6, r3
 8006e5a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8006e5c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8006e5e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d136      	bne.n	8006ed4 <??zcl_attr_write_cb_0>
 8006e66:	0030      	movs	r0, r6
 8006e68:	f000 f851 	bl	8006f0e <pletoh16>
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	2101      	movs	r1, #1
 8006e74:	0028      	movs	r0, r5
 8006e76:	f7fa fda7 	bl	80019c8 <ZbZclAttrIntegerRead>
 8006e7a:	f8ad 0000 	strh.w	r0, [sp]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2200      	movs	r2, #0
 8006e82:	2102      	movs	r1, #2
 8006e84:	0028      	movs	r0, r5
 8006e86:	f7fa fd9f 	bl	80019c8 <ZbZclAttrIntegerRead>
 8006e8a:	4681      	mov	r9, r0
 8006e8c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006e90:	f8bd 1000 	ldrh.w	r1, [sp]
 8006e94:	4281      	cmp	r1, r0
 8006e96:	d016      	beq.n	8006ec6 <??zcl_attr_write_cb_1>
 8006e98:	4649      	mov	r1, r9
 8006e9a:	0002      	movs	r2, r0
 8006e9c:	b289      	uxth	r1, r1
 8006e9e:	4291      	cmp	r1, r2
 8006ea0:	d011      	beq.n	8006ec6 <??zcl_attr_write_cb_1>
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	f8bd 2000 	ldrh.w	r2, [sp]
 8006ea8:	b289      	uxth	r1, r1
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	d305      	bcc.n	8006eba <??zcl_attr_write_cb_2>
 8006eae:	4649      	mov	r1, r9
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	4291      	cmp	r1, r2
 8006eb8:	d205      	bcs.n	8006ec6 <??zcl_attr_write_cb_1>

08006eba <??zcl_attr_write_cb_2>:
 8006eba:	4641      	mov	r1, r8
 8006ebc:	b289      	uxth	r1, r1
 8006ebe:	4281      	cmp	r1, r0
 8006ec0:	d001      	beq.n	8006ec6 <??zcl_attr_write_cb_1>
 8006ec2:	2087      	movs	r0, #135	@ 0x87
 8006ec4:	e012      	b.n	8006eec <??zcl_attr_write_cb_3>

08006ec6 <??zcl_attr_write_cb_1>:
 8006ec6:	f05f 0a02 	movs.w	sl, #2
 8006eca:	0020      	movs	r0, r4
 8006ecc:	b280      	uxth	r0, r0
 8006ece:	07c0      	lsls	r0, r0, #31
 8006ed0:	d40b      	bmi.n	8006eea <??zcl_attr_write_cb_4>
 8006ed2:	e001      	b.n	8006ed8 <??zcl_attr_write_cb_5>

08006ed4 <??zcl_attr_write_cb_0>:
 8006ed4:	2086      	movs	r0, #134	@ 0x86
 8006ed6:	e009      	b.n	8006eec <??zcl_attr_write_cb_3>

08006ed8 <??zcl_attr_write_cb_5>:
 8006ed8:	f8cd a008 	str.w	sl, [sp, #8]
 8006edc:	9601      	str	r6, [sp, #4]
 8006ede:	46bb      	mov	fp, r7
 8006ee0:	9a02      	ldr	r2, [sp, #8]
 8006ee2:	9901      	ldr	r1, [sp, #4]
 8006ee4:	4658      	mov	r0, fp
 8006ee6:	f00e fe1a 	bl	8015b1e <__aeabi_memcpy>

08006eea <??zcl_attr_write_cb_4>:
 8006eea:	2000      	movs	r0, #0

08006eec <??zcl_attr_write_cb_3>:
 8006eec:	b005      	add	sp, #20
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ef2 <is_little_endian>:
 8006ef2:	b081      	sub	sp, #4
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f8ad 0000 	strh.w	r0, [sp]
 8006efa:	4668      	mov	r0, sp
 8006efc:	7800      	ldrb	r0, [r0, #0]
 8006efe:	2801      	cmp	r0, #1
 8006f00:	d101      	bne.n	8006f06 <??is_little_endian_0>
 8006f02:	2001      	movs	r0, #1
 8006f04:	e000      	b.n	8006f08 <??is_little_endian_1>

08006f06 <??is_little_endian_0>:
 8006f06:	2000      	movs	r0, #0

08006f08 <??is_little_endian_1>:
 8006f08:	b2c0      	uxtb	r0, r0
 8006f0a:	b001      	add	sp, #4
 8006f0c:	4770      	bx	lr

08006f0e <pletoh16>:
 8006f0e:	0001      	movs	r1, r0
 8006f10:	7808      	ldrb	r0, [r1, #0]
 8006f12:	7849      	ldrb	r1, [r1, #1]
 8006f14:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8006f18:	b280      	uxth	r0, r0
 8006f1a:	4770      	bx	lr

08006f1c <pletoh24>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	0004      	movs	r4, r0
 8006f20:	0020      	movs	r0, r4
 8006f22:	f7ff fff4 	bl	8006f0e <pletoh16>
 8006f26:	b280      	uxth	r0, r0
 8006f28:	78a1      	ldrb	r1, [r4, #2]
 8006f2a:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <pletoh32>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	0004      	movs	r4, r0
 8006f34:	0020      	movs	r0, r4
 8006f36:	f7ff ffea 	bl	8006f0e <pletoh16>
 8006f3a:	0005      	movs	r5, r0
 8006f3c:	b2ad      	uxth	r5, r5
 8006f3e:	1ca0      	adds	r0, r4, #2
 8006f40:	f7ff ffe5 	bl	8006f0e <pletoh16>
 8006f44:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8006f48:	0028      	movs	r0, r5
 8006f4a:	bd32      	pop	{r1, r4, r5, pc}

08006f4c <pletoh40>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	0004      	movs	r4, r0
 8006f50:	0020      	movs	r0, r4
 8006f52:	f7ff ffed 	bl	8006f30 <pletoh32>
 8006f56:	7921      	ldrb	r1, [r4, #4]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <pletoh48>:
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	0004      	movs	r4, r0
 8006f5e:	0020      	movs	r0, r4
 8006f60:	f7ff fff4 	bl	8006f4c <pletoh40>
 8006f64:	7962      	ldrb	r2, [r4, #5]
 8006f66:	2300      	movs	r3, #0
 8006f68:	0213      	lsls	r3, r2, #8
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	4310      	orrs	r0, r2
 8006f6e:	4319      	orrs	r1, r3
 8006f70:	bd10      	pop	{r4, pc}

08006f72 <pletoh56>:
 8006f72:	b510      	push	{r4, lr}
 8006f74:	0004      	movs	r4, r0
 8006f76:	0020      	movs	r0, r4
 8006f78:	f7ff ffef 	bl	8006f5a <pletoh48>
 8006f7c:	79a2      	ldrb	r2, [r4, #6]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	0413      	lsls	r3, r2, #16
 8006f82:	2200      	movs	r2, #0
 8006f84:	4310      	orrs	r0, r2
 8006f86:	4319      	orrs	r1, r3
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <pletoh64>:
 8006f8a:	b538      	push	{r3, r4, r5, lr}
 8006f8c:	0005      	movs	r5, r0
 8006f8e:	0028      	movs	r0, r5
 8006f90:	f7ff ffce 	bl	8006f30 <pletoh32>
 8006f94:	0004      	movs	r4, r0
 8006f96:	1d28      	adds	r0, r5, #4
 8006f98:	f7ff ffca 	bl	8006f30 <pletoh32>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	0022      	movs	r2, r4
 8006fa0:	0010      	movs	r0, r2
 8006fa2:	0019      	movs	r1, r3
 8006fa4:	bd34      	pop	{r2, r4, r5, pc}

08006fa6 <putle16>:
 8006fa6:	7001      	strb	r1, [r0, #0]
 8006fa8:	000a      	movs	r2, r1
 8006faa:	b292      	uxth	r2, r2
 8006fac:	0a12      	lsrs	r2, r2, #8
 8006fae:	7042      	strb	r2, [r0, #1]
 8006fb0:	4770      	bx	lr

08006fb2 <putle24>:
 8006fb2:	b538      	push	{r3, r4, r5, lr}
 8006fb4:	0004      	movs	r4, r0
 8006fb6:	000d      	movs	r5, r1
 8006fb8:	0029      	movs	r1, r5
 8006fba:	b289      	uxth	r1, r1
 8006fbc:	0020      	movs	r0, r4
 8006fbe:	f7ff fff2 	bl	8006fa6 <putle16>
 8006fc2:	0028      	movs	r0, r5
 8006fc4:	0c00      	lsrs	r0, r0, #16
 8006fc6:	70a0      	strb	r0, [r4, #2]
 8006fc8:	bd31      	pop	{r0, r4, r5, pc}

08006fca <putle32>:
 8006fca:	b538      	push	{r3, r4, r5, lr}
 8006fcc:	0004      	movs	r4, r0
 8006fce:	000d      	movs	r5, r1
 8006fd0:	0029      	movs	r1, r5
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	f7ff ffed 	bl	8006fb2 <putle24>
 8006fd8:	0028      	movs	r0, r5
 8006fda:	0e00      	lsrs	r0, r0, #24
 8006fdc:	70e0      	strb	r0, [r4, #3]
 8006fde:	bd31      	pop	{r0, r4, r5, pc}

08006fe0 <putle40>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	0006      	movs	r6, r0
 8006fe4:	0014      	movs	r4, r2
 8006fe6:	001d      	movs	r5, r3
 8006fe8:	0021      	movs	r1, r4
 8006fea:	0030      	movs	r0, r6
 8006fec:	f7ff ffed 	bl	8006fca <putle32>
 8006ff0:	7135      	strb	r5, [r6, #4]
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <putle48>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	0006      	movs	r6, r0
 8006ff8:	0014      	movs	r4, r2
 8006ffa:	001d      	movs	r5, r3
 8006ffc:	0022      	movs	r2, r4
 8006ffe:	002b      	movs	r3, r5
 8007000:	0030      	movs	r0, r6
 8007002:	f7ff ffed 	bl	8006fe0 <putle40>
 8007006:	0020      	movs	r0, r4
 8007008:	0029      	movs	r1, r5
 800700a:	0a08      	lsrs	r0, r1, #8
 800700c:	2100      	movs	r1, #0
 800700e:	7170      	strb	r0, [r6, #5]
 8007010:	bd70      	pop	{r4, r5, r6, pc}

08007012 <putle56>:
 8007012:	b570      	push	{r4, r5, r6, lr}
 8007014:	0006      	movs	r6, r0
 8007016:	0014      	movs	r4, r2
 8007018:	001d      	movs	r5, r3
 800701a:	0022      	movs	r2, r4
 800701c:	002b      	movs	r3, r5
 800701e:	0030      	movs	r0, r6
 8007020:	f7ff ffe8 	bl	8006ff4 <putle48>
 8007024:	0020      	movs	r0, r4
 8007026:	0029      	movs	r1, r5
 8007028:	0c08      	lsrs	r0, r1, #16
 800702a:	2100      	movs	r1, #0
 800702c:	71b0      	strb	r0, [r6, #6]
 800702e:	bd70      	pop	{r4, r5, r6, pc}

08007030 <putle64>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	0006      	movs	r6, r0
 8007034:	0014      	movs	r4, r2
 8007036:	001d      	movs	r5, r3
 8007038:	0022      	movs	r2, r4
 800703a:	002b      	movs	r3, r5
 800703c:	0030      	movs	r0, r6
 800703e:	f7ff ffe8 	bl	8007012 <putle56>
 8007042:	0020      	movs	r0, r4
 8007044:	0029      	movs	r1, r5
 8007046:	0e08      	lsrs	r0, r1, #24
 8007048:	2100      	movs	r1, #0
 800704a:	71f0      	strb	r0, [r6, #7]
 800704c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007050 <ZbZclAppendFloat>:
 8007050:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	b081      	sub	sp, #4
 8007056:	ed2d 8b04 	vpush	{d8-d9}
 800705a:	b084      	sub	sp, #16
 800705c:	eeb0 8a40 	vmov.f32	s16, s0
 8007060:	eef0 8a60 	vmov.f32	s17, s1
 8007064:	000e      	movs	r6, r1
 8007066:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800706a:	2838      	cmp	r0, #56	@ 0x38
 800706c:	d149      	bne.n	8007102 <??ZbZclAppendFloat_0>
 800706e:	2400      	movs	r4, #0
 8007070:	2510      	movs	r5, #16
 8007072:	f07f 070e 	mvns.w	r7, #14
 8007076:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007078:	2802      	cmp	r0, #2
 800707a:	d202      	bcs.n	8007082 <??ZbZclAppendFloat_1>
 800707c:	f05f 30ff 	movs.w	r0, #4294967295
 8007080:	e120      	b.n	80072c4 <??ZbZclAppendFloat_2>

08007082 <??ZbZclAppendFloat_1>:
 8007082:	003a      	movs	r2, r7
 8007084:	0029      	movs	r1, r5
 8007086:	4668      	mov	r0, sp
 8007088:	eeb0 0a48 	vmov.f32	s0, s16
 800708c:	eef0 0a68 	vmov.f32	s1, s17
 8007090:	f000 fb08 	bl	80076a4 <ZbZclFloatFrexp>
 8007094:	eeb0 9a40 	vmov.f32	s18, s0
 8007098:	eef0 9a60 	vmov.f32	s19, s1
 800709c:	f8dd 8000 	ldr.w	r8, [sp]
 80070a0:	ebb8 0807 	subs.w	r8, r8, r7
 80070a4:	ea5f 2888 	movs.w	r8, r8, lsl #10
 80070a8:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 80070ac:	ec51 0b19 	vmov	r0, r1, d9
 80070b0:	2200      	movs	r2, #0
 80070b2:	2300      	movs	r3, #0
 80070b4:	f001 fa1c 	bl	80084f0 <__aeabi_cdcmpeq>
 80070b8:	d210      	bcs.n	80070dc <??ZbZclAppendFloat_3>
 80070ba:	ec51 0b19 	vmov	r0, r1, d9
 80070be:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80070c2:	f001 fa65 	bl	8008590 <__aeabi_d2iz>
 80070c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80070ca:	fb10 f101 	smulbb	r1, r0, r1
 80070ce:	0589      	lsls	r1, r1, #22
 80070d0:	0d89      	lsrs	r1, r1, #22
 80070d2:	ea58 0101 	orrs.w	r1, r8, r1
 80070d6:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 80070da:	e00b      	b.n	80070f4 <??ZbZclAppendFloat_4>

080070dc <??ZbZclAppendFloat_3>:
 80070dc:	ec51 0b19 	vmov	r0, r1, d9
 80070e0:	f001 fa56 	bl	8008590 <__aeabi_d2iz>
 80070e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80070e8:	fb10 f101 	smulbb	r1, r0, r1
 80070ec:	0589      	lsls	r1, r1, #22
 80070ee:	0d89      	lsrs	r1, r1, #22
 80070f0:	ea58 0101 	orrs.w	r1, r8, r1

080070f4 <??ZbZclAppendFloat_4>:
 80070f4:	7031      	strb	r1, [r6, #0]
 80070f6:	0008      	movs	r0, r1
 80070f8:	b280      	uxth	r0, r0
 80070fa:	0a00      	lsrs	r0, r0, #8
 80070fc:	7070      	strb	r0, [r6, #1]
 80070fe:	2002      	movs	r0, #2
 8007100:	e0e0      	b.n	80072c4 <??ZbZclAppendFloat_2>

08007102 <??ZbZclAppendFloat_0>:
 8007102:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8007106:	2839      	cmp	r0, #57	@ 0x39
 8007108:	d14e      	bne.n	80071a8 <??ZbZclAppendFloat_5>
 800710a:	2400      	movs	r4, #0
 800710c:	2580      	movs	r5, #128	@ 0x80
 800710e:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 8007112:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007114:	2804      	cmp	r0, #4
 8007116:	d202      	bcs.n	800711e <??ZbZclAppendFloat_6>
 8007118:	f05f 30ff 	movs.w	r0, #4294967295
 800711c:	e0d2      	b.n	80072c4 <??ZbZclAppendFloat_2>

0800711e <??ZbZclAppendFloat_6>:
 800711e:	003a      	movs	r2, r7
 8007120:	0029      	movs	r1, r5
 8007122:	4668      	mov	r0, sp
 8007124:	eeb0 0a48 	vmov.f32	s0, s16
 8007128:	eef0 0a68 	vmov.f32	s1, s17
 800712c:	f000 faba 	bl	80076a4 <ZbZclFloatFrexp>
 8007130:	eeb0 9a40 	vmov.f32	s18, s0
 8007134:	eef0 9a60 	vmov.f32	s19, s1
 8007138:	f8dd 8000 	ldr.w	r8, [sp]
 800713c:	ebb8 0807 	subs.w	r8, r8, r7
 8007140:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 8007144:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 8007148:	ec51 0b19 	vmov	r0, r1, d9
 800714c:	2200      	movs	r2, #0
 800714e:	2300      	movs	r3, #0
 8007150:	f001 f9ce 	bl	80084f0 <__aeabi_cdcmpeq>
 8007154:	d210      	bcs.n	8007178 <??ZbZclAppendFloat_7>
 8007156:	ec51 0b19 	vmov	r0, r1, d9
 800715a:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800715e:	f001 fa3f 	bl	80085e0 <__aeabi_d2uiz>
 8007162:	0001      	movs	r1, r0
 8007164:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8007168:	4341      	muls	r1, r0
 800716a:	0249      	lsls	r1, r1, #9
 800716c:	0a49      	lsrs	r1, r1, #9
 800716e:	ea58 0101 	orrs.w	r1, r8, r1
 8007172:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 8007176:	e00b      	b.n	8007190 <??ZbZclAppendFloat_8>

08007178 <??ZbZclAppendFloat_7>:
 8007178:	ec51 0b19 	vmov	r0, r1, d9
 800717c:	f001 fa30 	bl	80085e0 <__aeabi_d2uiz>
 8007180:	0001      	movs	r1, r0
 8007182:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8007186:	4341      	muls	r1, r0
 8007188:	0249      	lsls	r1, r1, #9
 800718a:	0a49      	lsrs	r1, r1, #9
 800718c:	ea58 0101 	orrs.w	r1, r8, r1

08007190 <??ZbZclAppendFloat_8>:
 8007190:	7031      	strb	r1, [r6, #0]
 8007192:	0008      	movs	r0, r1
 8007194:	0a00      	lsrs	r0, r0, #8
 8007196:	7070      	strb	r0, [r6, #1]
 8007198:	0008      	movs	r0, r1
 800719a:	0c00      	lsrs	r0, r0, #16
 800719c:	70b0      	strb	r0, [r6, #2]
 800719e:	0008      	movs	r0, r1
 80071a0:	0e00      	lsrs	r0, r0, #24
 80071a2:	70f0      	strb	r0, [r6, #3]
 80071a4:	2004      	movs	r0, #4
 80071a6:	e08d      	b.n	80072c4 <??ZbZclAppendFloat_2>

080071a8 <??ZbZclAppendFloat_5>:
 80071a8:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80071ac:	283a      	cmp	r0, #58	@ 0x3a
 80071ae:	f040 8087 	bne.w	80072c0 <??ZbZclAppendFloat_9>
 80071b2:	2400      	movs	r4, #0
 80071b4:	2500      	movs	r5, #0
 80071b6:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 80071ba:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8007900 <??DataTable3>
 80071be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80071c0:	2808      	cmp	r0, #8
 80071c2:	d202      	bcs.n	80071ca <??ZbZclAppendFloat_10>
 80071c4:	f05f 30ff 	movs.w	r0, #4294967295
 80071c8:	e07c      	b.n	80072c4 <??ZbZclAppendFloat_2>

080071ca <??ZbZclAppendFloat_10>:
 80071ca:	4642      	mov	r2, r8
 80071cc:	0039      	movs	r1, r7
 80071ce:	4668      	mov	r0, sp
 80071d0:	eeb0 0a48 	vmov.f32	s0, s16
 80071d4:	eef0 0a68 	vmov.f32	s1, s17
 80071d8:	f000 fa64 	bl	80076a4 <ZbZclFloatFrexp>
 80071dc:	eeb0 9a40 	vmov.f32	s18, s0
 80071e0:	eef0 9a60 	vmov.f32	s19, s1
 80071e4:	9800      	ldr	r0, [sp, #0]
 80071e6:	17c1      	asrs	r1, r0, #31
 80071e8:	ea5f 79e8 	movs.w	r9, r8, asr #31
 80071ec:	ebb0 0008 	subs.w	r0, r0, r8
 80071f0:	eb71 0109 	sbcs.w	r1, r1, r9
 80071f4:	0501      	lsls	r1, r0, #20
 80071f6:	2000      	movs	r0, #0
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 8007904 <??DataTable3_1>
 80071fe:	4010      	ands	r0, r2
 8007200:	4019      	ands	r1, r3
 8007202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007206:	ec51 0b19 	vmov	r0, r1, d9
 800720a:	2200      	movs	r2, #0
 800720c:	2300      	movs	r3, #0
 800720e:	f001 f96f 	bl	80084f0 <__aeabi_cdcmpeq>
 8007212:	d21f      	bcs.n	8007254 <??ZbZclAppendFloat_11>
 8007214:	ec51 0b19 	vmov	r0, r1, d9
 8007218:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800721c:	f001 fa80 	bl	8008720 <__aeabi_d2ulz>
 8007220:	2200      	movs	r2, #0
 8007222:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8007226:	fba2 ab00 	umull	sl, fp, r2, r0
 800722a:	fb02 bb01 	mla	fp, r2, r1, fp
 800722e:	fb03 bb00 	mla	fp, r3, r0, fp
 8007232:	f05f 30ff 	movs.w	r0, #4294967295
 8007236:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8007908 <??DataTable3_2>
 800723a:	ea1a 0000 	ands.w	r0, sl, r0
 800723e:	ea1b 0101 	ands.w	r1, fp, r1
 8007242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007246:	4310      	orrs	r0, r2
 8007248:	4319      	orrs	r1, r3
 800724a:	f050 0200 	orrs.w	r2, r0, #0
 800724e:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 8007252:	e018      	b.n	8007286 <??ZbZclAppendFloat_12>

08007254 <??ZbZclAppendFloat_11>:
 8007254:	ec51 0b19 	vmov	r0, r1, d9
 8007258:	f001 fa62 	bl	8008720 <__aeabi_d2ulz>
 800725c:	2200      	movs	r2, #0
 800725e:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8007262:	fba2 ab00 	umull	sl, fp, r2, r0
 8007266:	fb02 bb01 	mla	fp, r2, r1, fp
 800726a:	fb03 bb00 	mla	fp, r3, r0, fp
 800726e:	f05f 30ff 	movs.w	r0, #4294967295
 8007272:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8007908 <??DataTable3_2>
 8007276:	ea1a 0000 	ands.w	r0, sl, r0
 800727a:	ea1b 0101 	ands.w	r1, fp, r1
 800727e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007282:	4302      	orrs	r2, r0
 8007284:	430b      	orrs	r3, r1

08007286 <??ZbZclAppendFloat_12>:
 8007286:	7032      	strb	r2, [r6, #0]
 8007288:	0010      	movs	r0, r2
 800728a:	b280      	uxth	r0, r0
 800728c:	0a00      	lsrs	r0, r0, #8
 800728e:	7070      	strb	r0, [r6, #1]
 8007290:	0010      	movs	r0, r2
 8007292:	0c00      	lsrs	r0, r0, #16
 8007294:	70b0      	strb	r0, [r6, #2]
 8007296:	0010      	movs	r0, r2
 8007298:	0e00      	lsrs	r0, r0, #24
 800729a:	70f0      	strb	r0, [r6, #3]
 800729c:	7133      	strb	r3, [r6, #4]
 800729e:	0010      	movs	r0, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	0a08      	lsrs	r0, r1, #8
 80072a4:	2100      	movs	r1, #0
 80072a6:	7170      	strb	r0, [r6, #5]
 80072a8:	0010      	movs	r0, r2
 80072aa:	0019      	movs	r1, r3
 80072ac:	0c08      	lsrs	r0, r1, #16
 80072ae:	2100      	movs	r1, #0
 80072b0:	71b0      	strb	r0, [r6, #6]
 80072b2:	0010      	movs	r0, r2
 80072b4:	0019      	movs	r1, r3
 80072b6:	0e08      	lsrs	r0, r1, #24
 80072b8:	2100      	movs	r1, #0
 80072ba:	71f0      	strb	r0, [r6, #7]
 80072bc:	2008      	movs	r0, #8
 80072be:	e001      	b.n	80072c4 <??ZbZclAppendFloat_2>

080072c0 <??ZbZclAppendFloat_9>:
 80072c0:	f05f 30ff 	movs.w	r0, #4294967295

080072c4 <??ZbZclAppendFloat_2>:
 80072c4:	b004      	add	sp, #16
 80072c6:	ecbd 8b04 	vpop	{d8-d9}
 80072ca:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072ce <ZbZclParseFloat>:
 80072ce:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d2:	ed2d 8b02 	vpush	{d8}
 80072d6:	000e      	movs	r6, r1
 80072d8:	4691      	mov	r9, r2
 80072da:	2000      	movs	r0, #0
 80072dc:	f889 0000 	strb.w	r0, [r9]
 80072e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80072e4:	2838      	cmp	r0, #56	@ 0x38
 80072e6:	d006      	beq.n	80072f6 <??ZbZclParseFloat_0>
 80072e8:	f0c0 8138 	bcc.w	800755c <??ZbZclParseFloat_1>
 80072ec:	283a      	cmp	r0, #58	@ 0x3a
 80072ee:	f000 80ad 	beq.w	800744c <??ZbZclParseFloat_2>
 80072f2:	d354      	bcc.n	800739e <??ZbZclParseFloat_3>
 80072f4:	e132      	b.n	800755c <??ZbZclParseFloat_1>

080072f6 <??ZbZclParseFloat_0>:
 80072f6:	0030      	movs	r0, r6
 80072f8:	f7ff fe09 	bl	8006f0e <pletoh16>
 80072fc:	0004      	movs	r4, r0
 80072fe:	0020      	movs	r0, r4
 8007300:	b280      	uxth	r0, r0
 8007302:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 8007306:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 800730a:	d121      	bne.n	8007350 <??ZbZclParseFloat_4>
 800730c:	05a0      	lsls	r0, r4, #22
 800730e:	d008      	beq.n	8007322 <??ZbZclParseFloat_5>
 8007310:	2000      	movs	r0, #0
 8007312:	2100      	movs	r1, #0
 8007314:	2200      	movs	r2, #0
 8007316:	2300      	movs	r3, #0
 8007318:	f000 ffb4 	bl	8008284 <__aeabi_ddiv>
 800731c:	ec41 0b10 	vmov	d0, r0, r1
 8007320:	e127      	b.n	8007572 <??ZbZclParseFloat_6>

08007322 <??ZbZclParseFloat_5>:
 8007322:	0420      	lsls	r0, r4, #16
 8007324:	d50a      	bpl.n	800733c <??ZbZclParseFloat_7>
 8007326:	2000      	movs	r0, #0
 8007328:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 800790c <??DataTable3_3>
 800732c:	2200      	movs	r2, #0
 800732e:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8007332:	f000 ffa7 	bl	8008284 <__aeabi_ddiv>
 8007336:	ec41 0b10 	vmov	d0, r0, r1
 800733a:	e008      	b.n	800734e <??ZbZclParseFloat_8>

0800733c <??ZbZclParseFloat_7>:
 800733c:	2000      	movs	r0, #0
 800733e:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 800790c <??DataTable3_3>
 8007342:	2200      	movs	r2, #0
 8007344:	2300      	movs	r3, #0
 8007346:	f000 ff9d 	bl	8008284 <__aeabi_ddiv>
 800734a:	ec41 0b10 	vmov	d0, r0, r1

0800734e <??ZbZclParseFloat_8>:
 800734e:	e110      	b.n	8007572 <??ZbZclParseFloat_6>

08007350 <??ZbZclParseFloat_4>:
 8007350:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8007354:	4645      	mov	r5, r8
 8007356:	b2ad      	uxth	r5, r5
 8007358:	3d0f      	subs	r5, #15
 800735a:	3d0a      	subs	r5, #10
 800735c:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 8007360:	d004      	beq.n	800736c <??ZbZclParseFloat_9>
 8007362:	05a7      	lsls	r7, r4, #22
 8007364:	0dbf      	lsrs	r7, r7, #22
 8007366:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 800736a:	e002      	b.n	8007372 <??ZbZclParseFloat_10>

0800736c <??ZbZclParseFloat_9>:
 800736c:	1c6d      	adds	r5, r5, #1
 800736e:	05a7      	lsls	r7, r4, #22
 8007370:	0dbf      	lsrs	r7, r7, #22

08007372 <??ZbZclParseFloat_10>:
 8007372:	0038      	movs	r0, r7
 8007374:	b280      	uxth	r0, r0
 8007376:	f000 fde1 	bl	8007f3c <__aeabi_ui2d>
 800737a:	ec41 0b18 	vmov	d8, r0, r1
 800737e:	0420      	lsls	r0, r4, #16
 8007380:	d505      	bpl.n	800738e <??ZbZclParseFloat_11>
 8007382:	ec51 0b18 	vmov	r0, r1, d8
 8007386:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800738a:	ec41 0b18 	vmov	d8, r0, r1

0800738e <??ZbZclParseFloat_11>:
 800738e:	0028      	movs	r0, r5
 8007390:	eeb0 0a48 	vmov.f32	s0, s16
 8007394:	eef0 0a68 	vmov.f32	s1, s17
 8007398:	f000 f8ef 	bl	800757a <ZbZclFloatLdexp>
 800739c:	e0e9      	b.n	8007572 <??ZbZclParseFloat_6>

0800739e <??ZbZclParseFloat_3>:
 800739e:	0030      	movs	r0, r6
 80073a0:	f7ff fdc6 	bl	8006f30 <pletoh32>
 80073a4:	0004      	movs	r4, r0
 80073a6:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 80073aa:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80073ae:	d121      	bne.n	80073f4 <??ZbZclParseFloat_12>
 80073b0:	0260      	lsls	r0, r4, #9
 80073b2:	d008      	beq.n	80073c6 <??ZbZclParseFloat_13>
 80073b4:	2000      	movs	r0, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	f000 ff62 	bl	8008284 <__aeabi_ddiv>
 80073c0:	ec41 0b10 	vmov	d0, r0, r1
 80073c4:	e0d5      	b.n	8007572 <??ZbZclParseFloat_6>

080073c6 <??ZbZclParseFloat_13>:
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	d50a      	bpl.n	80073e0 <??ZbZclParseFloat_14>
 80073ca:	2000      	movs	r0, #0
 80073cc:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 800790c <??DataTable3_3>
 80073d0:	2200      	movs	r2, #0
 80073d2:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80073d6:	f000 ff55 	bl	8008284 <__aeabi_ddiv>
 80073da:	ec41 0b10 	vmov	d0, r0, r1
 80073de:	e008      	b.n	80073f2 <??ZbZclParseFloat_15>

080073e0 <??ZbZclParseFloat_14>:
 80073e0:	2000      	movs	r0, #0
 80073e2:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 800790c <??DataTable3_3>
 80073e6:	2200      	movs	r2, #0
 80073e8:	2300      	movs	r3, #0
 80073ea:	f000 ff4b 	bl	8008284 <__aeabi_ddiv>
 80073ee:	ec41 0b10 	vmov	d0, r0, r1

080073f2 <??ZbZclParseFloat_15>:
 80073f2:	e0be      	b.n	8007572 <??ZbZclParseFloat_6>

080073f4 <??ZbZclParseFloat_12>:
 80073f4:	0025      	movs	r5, r4
 80073f6:	0ded      	lsrs	r5, r5, #23
 80073f8:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 80073fc:	002f      	movs	r7, r5
 80073fe:	b2bf      	uxth	r7, r7
 8007400:	3f7f      	subs	r7, #127	@ 0x7f
 8007402:	3f17      	subs	r7, #23
 8007404:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8007408:	d006      	beq.n	8007418 <??ZbZclParseFloat_16>
 800740a:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800740e:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8007412:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 8007416:	e004      	b.n	8007422 <??ZbZclParseFloat_17>

08007418 <??ZbZclParseFloat_16>:
 8007418:	1c7f      	adds	r7, r7, #1
 800741a:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800741e:	ea5f 2858 	movs.w	r8, r8, lsr #9

08007422 <??ZbZclParseFloat_17>:
 8007422:	4640      	mov	r0, r8
 8007424:	f000 fd8a 	bl	8007f3c <__aeabi_ui2d>
 8007428:	ec41 0b18 	vmov	d8, r0, r1
 800742c:	2c00      	cmp	r4, #0
 800742e:	d505      	bpl.n	800743c <??ZbZclParseFloat_18>
 8007430:	ec51 0b18 	vmov	r0, r1, d8
 8007434:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8007438:	ec41 0b18 	vmov	d8, r0, r1

0800743c <??ZbZclParseFloat_18>:
 800743c:	0038      	movs	r0, r7
 800743e:	eeb0 0a48 	vmov.f32	s0, s16
 8007442:	eef0 0a68 	vmov.f32	s1, s17
 8007446:	f000 f898 	bl	800757a <ZbZclFloatLdexp>
 800744a:	e092      	b.n	8007572 <??ZbZclParseFloat_6>

0800744c <??ZbZclParseFloat_2>:
 800744c:	0030      	movs	r0, r6
 800744e:	f7ff fd9c 	bl	8006f8a <pletoh64>
 8007452:	0004      	movs	r4, r0
 8007454:	000d      	movs	r5, r1
 8007456:	2000      	movs	r0, #0
 8007458:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 8007904 <??DataTable3_1>
 800745c:	ea14 0200 	ands.w	r2, r4, r0
 8007460:	ea15 0301 	ands.w	r3, r5, r1
 8007464:	f05f 0a00 	movs.w	sl, #0
 8007468:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 8007904 <??DataTable3_1>
 800746c:	455b      	cmp	r3, fp
 800746e:	d131      	bne.n	80074d4 <??ZbZclParseFloat_19>
 8007470:	4552      	cmp	r2, sl
 8007472:	d12f      	bne.n	80074d4 <??ZbZclParseFloat_19>
 8007474:	f05f 30ff 	movs.w	r0, #4294967295
 8007478:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8007908 <??DataTable3_2>
 800747c:	4020      	ands	r0, r4
 800747e:	4029      	ands	r1, r5
 8007480:	2900      	cmp	r1, #0
 8007482:	d101      	bne.n	8007488 <??ZbZclParseFloat_20>
 8007484:	2800      	cmp	r0, #0
 8007486:	d008      	beq.n	800749a <??ZbZclParseFloat_21>

08007488 <??ZbZclParseFloat_20>:
 8007488:	2000      	movs	r0, #0
 800748a:	2100      	movs	r1, #0
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	f000 fef8 	bl	8008284 <__aeabi_ddiv>
 8007494:	ec41 0b10 	vmov	d0, r0, r1
 8007498:	e06b      	b.n	8007572 <??ZbZclParseFloat_6>

0800749a <??ZbZclParseFloat_21>:
 800749a:	f014 0000 	ands.w	r0, r4, #0
 800749e:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 80074a2:	2900      	cmp	r1, #0
 80074a4:	d101      	bne.n	80074aa <??ZbZclParseFloat_22>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d00a      	beq.n	80074c0 <??ZbZclParseFloat_23>

080074aa <??ZbZclParseFloat_22>:
 80074aa:	2000      	movs	r0, #0
 80074ac:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 800790c <??DataTable3_3>
 80074b0:	2200      	movs	r2, #0
 80074b2:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80074b6:	f000 fee5 	bl	8008284 <__aeabi_ddiv>
 80074ba:	ec41 0b10 	vmov	d0, r0, r1
 80074be:	e008      	b.n	80074d2 <??ZbZclParseFloat_24>

080074c0 <??ZbZclParseFloat_23>:
 80074c0:	2000      	movs	r0, #0
 80074c2:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 800790c <??DataTable3_3>
 80074c6:	2200      	movs	r2, #0
 80074c8:	2300      	movs	r3, #0
 80074ca:	f000 fedb 	bl	8008284 <__aeabi_ddiv>
 80074ce:	ec41 0b10 	vmov	d0, r0, r1

080074d2 <??ZbZclParseFloat_24>:
 80074d2:	e04e      	b.n	8007572 <??ZbZclParseFloat_6>

080074d4 <??ZbZclParseFloat_19>:
 80074d4:	0022      	movs	r2, r4
 80074d6:	002b      	movs	r3, r5
 80074d8:	0d1a      	lsrs	r2, r3, #20
 80074da:	2300      	movs	r3, #0
 80074dc:	4690      	mov	r8, r2
 80074de:	ea5f 5848 	movs.w	r8, r8, lsl #21
 80074e2:	ea5f 5858 	movs.w	r8, r8, lsr #21
 80074e6:	4647      	mov	r7, r8
 80074e8:	b2bf      	uxth	r7, r7
 80074ea:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 80074ee:	3f34      	subs	r7, #52	@ 0x34
 80074f0:	4020      	ands	r0, r4
 80074f2:	4029      	ands	r1, r5
 80074f4:	2900      	cmp	r1, #0
 80074f6:	d101      	bne.n	80074fc <??ZbZclParseFloat_25>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d00a      	beq.n	8007512 <??ZbZclParseFloat_26>

080074fc <??ZbZclParseFloat_25>:
 80074fc:	f05f 30ff 	movs.w	r0, #4294967295
 8007500:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8007908 <??DataTable3_2>
 8007504:	4020      	ands	r0, r4
 8007506:	4029      	ands	r1, r5
 8007508:	f110 0a00 	adds.w	sl, r0, #0
 800750c:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 8007510:	e008      	b.n	8007524 <??ZbZclParseFloat_27>

08007512 <??ZbZclParseFloat_26>:
 8007512:	1c7f      	adds	r7, r7, #1
 8007514:	f05f 30ff 	movs.w	r0, #4294967295
 8007518:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8007908 <??DataTable3_2>
 800751c:	ea14 0a00 	ands.w	sl, r4, r0
 8007520:	ea15 0b01 	ands.w	fp, r5, r1

08007524 <??ZbZclParseFloat_27>:
 8007524:	4650      	mov	r0, sl
 8007526:	4659      	mov	r1, fp
 8007528:	f000 fd4c 	bl	8007fc4 <__aeabi_ul2d>
 800752c:	ec41 0b18 	vmov	d8, r0, r1
 8007530:	f014 0000 	ands.w	r0, r4, #0
 8007534:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8007538:	2900      	cmp	r1, #0
 800753a:	d101      	bne.n	8007540 <??ZbZclParseFloat_28>
 800753c:	2800      	cmp	r0, #0
 800753e:	d005      	beq.n	800754c <??ZbZclParseFloat_29>

08007540 <??ZbZclParseFloat_28>:
 8007540:	ec51 0b18 	vmov	r0, r1, d8
 8007544:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8007548:	ec41 0b18 	vmov	d8, r0, r1

0800754c <??ZbZclParseFloat_29>:
 800754c:	0038      	movs	r0, r7
 800754e:	eeb0 0a48 	vmov.f32	s0, s16
 8007552:	eef0 0a68 	vmov.f32	s1, s17
 8007556:	f000 f810 	bl	800757a <ZbZclFloatLdexp>
 800755a:	e00a      	b.n	8007572 <??ZbZclParseFloat_6>

0800755c <??ZbZclParseFloat_1>:
 800755c:	208d      	movs	r0, #141	@ 0x8d
 800755e:	f889 0000 	strb.w	r0, [r9]
 8007562:	2000      	movs	r0, #0
 8007564:	2100      	movs	r1, #0
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	f000 fe8b 	bl	8008284 <__aeabi_ddiv>
 800756e:	ec41 0b10 	vmov	d0, r0, r1

08007572 <??ZbZclParseFloat_6>:
 8007572:	ecbd 8b02 	vpop	{d8}
 8007576:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800757a <ZbZclFloatLdexp>:
 800757a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757e:	ed2d 8b04 	vpush	{d8-d9}
 8007582:	b084      	sub	sp, #16
 8007584:	eeb0 8a40 	vmov.f32	s16, s0
 8007588:	eef0 8a60 	vmov.f32	s17, s1
 800758c:	0006      	movs	r6, r0
 800758e:	2730      	movs	r7, #48	@ 0x30
 8007590:	ec53 2b18 	vmov	r2, r3, d8
 8007594:	ec51 0b18 	vmov	r0, r1, d8
 8007598:	f000 ffaa 	bl	80084f0 <__aeabi_cdcmpeq>
 800759c:	d10c      	bne.n	80075b8 <??ZbZclFloatLdexp_0>
 800759e:	ec53 2b18 	vmov	r2, r3, d8
 80075a2:	ec51 0b18 	vmov	r0, r1, d8
 80075a6:	f000 fb8d 	bl	8007cc4 <__adddf3>
 80075aa:	0002      	movs	r2, r0
 80075ac:	000b      	movs	r3, r1
 80075ae:	ec51 0b18 	vmov	r0, r1, d8
 80075b2:	f000 ff9d 	bl	80084f0 <__aeabi_cdcmpeq>
 80075b6:	d104      	bne.n	80075c2 <??ZbZclFloatLdexp_1>

080075b8 <??ZbZclFloatLdexp_0>:
 80075b8:	eeb0 0a48 	vmov.f32	s0, s16
 80075bc:	eef0 0a68 	vmov.f32	s1, s17
 80075c0:	e06b      	b.n	800769a <??ZbZclFloatLdexp_2>

080075c2 <??ZbZclFloatLdexp_1>:
 80075c2:	2e01      	cmp	r6, #1
 80075c4:	db2c      	blt.n	8007620 <??ZbZclFloatLdexp_3>
 80075c6:	2401      	movs	r4, #1
 80075c8:	2500      	movs	r5, #0
 80075ca:	0020      	movs	r0, r4
 80075cc:	0029      	movs	r1, r5
 80075ce:	003a      	movs	r2, r7
 80075d0:	f000 fb66 	bl	8007ca0 <__aeabi_llsl>
 80075d4:	4680      	mov	r8, r0
 80075d6:	4689      	mov	r9, r1
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f000 fcf2 	bl	8007fc4 <__aeabi_ul2d>
 80075e0:	ec41 0b19 	vmov	d9, r0, r1

080075e4 <??ZbZclFloatLdexp_4>:
 80075e4:	42be      	cmp	r6, r7
 80075e6:	db09      	blt.n	80075fc <??ZbZclFloatLdexp_5>
 80075e8:	ec51 0b18 	vmov	r0, r1, d8
 80075ec:	ec53 2b19 	vmov	r2, r3, d9
 80075f0:	f000 fd1e 	bl	8008030 <__aeabi_dmul>
 80075f4:	ec41 0b18 	vmov	d8, r0, r1
 80075f8:	1bf6      	subs	r6, r6, r7
 80075fa:	e7f3      	b.n	80075e4 <??ZbZclFloatLdexp_4>

080075fc <??ZbZclFloatLdexp_5>:
 80075fc:	0020      	movs	r0, r4
 80075fe:	0029      	movs	r1, r5
 8007600:	0032      	movs	r2, r6
 8007602:	f000 fb4d 	bl	8007ca0 <__aeabi_llsl>
 8007606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760e:	f000 fcd9 	bl	8007fc4 <__aeabi_ul2d>
 8007612:	ec53 2b18 	vmov	r2, r3, d8
 8007616:	f000 fd0b 	bl	8008030 <__aeabi_dmul>
 800761a:	ec41 0b18 	vmov	d8, r0, r1
 800761e:	e038      	b.n	8007692 <??ZbZclFloatLdexp_6>

08007620 <??ZbZclFloatLdexp_3>:
 8007620:	2e00      	cmp	r6, #0
 8007622:	d536      	bpl.n	8007692 <??ZbZclFloatLdexp_6>
 8007624:	2401      	movs	r4, #1
 8007626:	2500      	movs	r5, #0
 8007628:	0020      	movs	r0, r4
 800762a:	0029      	movs	r1, r5
 800762c:	003a      	movs	r2, r7
 800762e:	f000 fb37 	bl	8007ca0 <__aeabi_llsl>
 8007632:	4682      	mov	sl, r0
 8007634:	468b      	mov	fp, r1
 8007636:	4650      	mov	r0, sl
 8007638:	4659      	mov	r1, fp
 800763a:	f000 fcc3 	bl	8007fc4 <__aeabi_ul2d>
 800763e:	0002      	movs	r2, r0
 8007640:	000b      	movs	r3, r1
 8007642:	2000      	movs	r0, #0
 8007644:	49b1      	ldr	r1, [pc, #708]	@ (800790c <??DataTable3_3>)
 8007646:	f000 fe1d 	bl	8008284 <__aeabi_ddiv>
 800764a:	ec41 0b19 	vmov	d9, r0, r1
 800764e:	f1d6 0800 	rsbs	r8, r6, #0

08007652 <??ZbZclFloatLdexp_7>:
 8007652:	45b8      	cmp	r8, r7
 8007654:	db0a      	blt.n	800766c <??ZbZclFloatLdexp_8>
 8007656:	ec53 2b18 	vmov	r2, r3, d8
 800765a:	ec51 0b19 	vmov	r0, r1, d9
 800765e:	f000 fce7 	bl	8008030 <__aeabi_dmul>
 8007662:	ec41 0b18 	vmov	d8, r0, r1
 8007666:	ebb8 0807 	subs.w	r8, r8, r7
 800766a:	e7f2      	b.n	8007652 <??ZbZclFloatLdexp_7>

0800766c <??ZbZclFloatLdexp_8>:
 800766c:	0020      	movs	r0, r4
 800766e:	0029      	movs	r1, r5
 8007670:	4642      	mov	r2, r8
 8007672:	f000 fb15 	bl	8007ca0 <__aeabi_llsl>
 8007676:	e9cd 0100 	strd	r0, r1, [sp]
 800767a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800767e:	f000 fca1 	bl	8007fc4 <__aeabi_ul2d>
 8007682:	0002      	movs	r2, r0
 8007684:	000b      	movs	r3, r1
 8007686:	ec51 0b18 	vmov	r0, r1, d8
 800768a:	f000 fdfb 	bl	8008284 <__aeabi_ddiv>
 800768e:	ec41 0b18 	vmov	d8, r0, r1

08007692 <??ZbZclFloatLdexp_6>:
 8007692:	eeb0 0a48 	vmov.f32	s0, s16
 8007696:	eef0 0a68 	vmov.f32	s1, s17

0800769a <??ZbZclFloatLdexp_2>:
 800769a:	b004      	add	sp, #16
 800769c:	ecbd 8b04 	vpop	{d8-d9}
 80076a0:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076a4 <ZbZclFloatFrexp>:
 80076a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	ed2d 8b06 	vpush	{d8-d10}
 80076ac:	b086      	sub	sp, #24
 80076ae:	eeb0 8a40 	vmov.f32	s16, s0
 80076b2:	eef0 8a60 	vmov.f32	s17, s1
 80076b6:	4682      	mov	sl, r0
 80076b8:	000e      	movs	r6, r1
 80076ba:	4693      	mov	fp, r2
 80076bc:	2730      	movs	r7, #48	@ 0x30
 80076be:	f05f 0800 	movs.w	r8, #0
 80076c2:	f05f 0901 	movs.w	r9, #1
 80076c6:	eeb0 9a48 	vmov.f32	s18, s16
 80076ca:	eef0 9a68 	vmov.f32	s19, s17
 80076ce:	ec51 0b18 	vmov	r0, r1, d8
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	f000 ff0b 	bl	80084f0 <__aeabi_cdcmpeq>
 80076da:	d208      	bcs.n	80076ee <??ZbZclFloatFrexp_0>
 80076dc:	f05f 30ff 	movs.w	r0, #4294967295
 80076e0:	4681      	mov	r9, r0
 80076e2:	ec51 0b19 	vmov	r0, r1, d9
 80076e6:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80076ea:	ec41 0b19 	vmov	d9, r0, r1

080076ee <??ZbZclFloatFrexp_0>:
 80076ee:	ec53 2b19 	vmov	r2, r3, d9
 80076f2:	ec51 0b19 	vmov	r0, r1, d9
 80076f6:	f000 fefb 	bl	80084f0 <__aeabi_cdcmpeq>
 80076fa:	d00b      	beq.n	8007714 <??ZbZclFloatFrexp_1>
 80076fc:	f8ca 6000 	str.w	r6, [sl]
 8007700:	4648      	mov	r0, r9
 8007702:	f000 fc2b 	bl	8007f5c <__aeabi_i2d>
 8007706:	2200      	movs	r2, #0
 8007708:	4b81      	ldr	r3, [pc, #516]	@ (8007910 <??DataTable3_4>)
 800770a:	f000 fc91 	bl	8008030 <__aeabi_dmul>
 800770e:	ec41 0b10 	vmov	d0, r0, r1
 8007712:	e0ef      	b.n	80078f4 <??ZbZclFloatFrexp_2>

08007714 <??ZbZclFloatFrexp_1>:
 8007714:	2000      	movs	r0, #0
 8007716:	497d      	ldr	r1, [pc, #500]	@ (800790c <??DataTable3_3>)
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	f000 fdb2 	bl	8008284 <__aeabi_ddiv>
 8007720:	ec53 2b19 	vmov	r2, r3, d9
 8007724:	f000 fee4 	bl	80084f0 <__aeabi_cdcmpeq>
 8007728:	d00b      	beq.n	8007742 <??ZbZclFloatFrexp_3>
 800772a:	2000      	movs	r0, #0
 800772c:	4977      	ldr	r1, [pc, #476]	@ (800790c <??DataTable3_3>)
 800772e:	2200      	movs	r2, #0
 8007730:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8007734:	f000 fda6 	bl	8008284 <__aeabi_ddiv>
 8007738:	ec53 2b19 	vmov	r2, r3, d9
 800773c:	f000 fed8 	bl	80084f0 <__aeabi_cdcmpeq>
 8007740:	d107      	bne.n	8007752 <??ZbZclFloatFrexp_4>

08007742 <??ZbZclFloatFrexp_3>:
 8007742:	f8ca 6000 	str.w	r6, [sl]
 8007746:	4648      	mov	r0, r9
 8007748:	f000 fc08 	bl	8007f5c <__aeabi_i2d>
 800774c:	ec41 0b10 	vmov	d0, r0, r1
 8007750:	e0d0      	b.n	80078f4 <??ZbZclFloatFrexp_2>

08007752 <??ZbZclFloatFrexp_4>:
 8007752:	ec53 2b19 	vmov	r2, r3, d9
 8007756:	ec51 0b19 	vmov	r0, r1, d9
 800775a:	f000 fab3 	bl	8007cc4 <__adddf3>
 800775e:	ec53 2b19 	vmov	r2, r3, d9
 8007762:	f000 fec5 	bl	80084f0 <__aeabi_cdcmpeq>
 8007766:	d10b      	bne.n	8007780 <??ZbZclFloatFrexp_5>
 8007768:	f8ca b000 	str.w	fp, [sl]
 800776c:	4648      	mov	r0, r9
 800776e:	f000 fbf5 	bl	8007f5c <__aeabi_i2d>
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	f000 fc5b 	bl	8008030 <__aeabi_dmul>
 800777a:	ec41 0b10 	vmov	d0, r0, r1
 800777e:	e0b9      	b.n	80078f4 <??ZbZclFloatFrexp_2>

08007780 <??ZbZclFloatFrexp_5>:
 8007780:	ec51 0b19 	vmov	r0, r1, d9
 8007784:	2200      	movs	r2, #0
 8007786:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 800778a:	f000 fea9 	bl	80084e0 <__aeabi_cdrcmple>
 800778e:	d854      	bhi.n	800783a <??ZbZclFloatFrexp_6>
 8007790:	2001      	movs	r0, #1
 8007792:	2100      	movs	r1, #0
 8007794:	003a      	movs	r2, r7
 8007796:	f000 fa83 	bl	8007ca0 <__aeabi_llsl>
 800779a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800779e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a2:	f000 fc0f 	bl	8007fc4 <__aeabi_ul2d>
 80077a6:	0002      	movs	r2, r0
 80077a8:	000b      	movs	r3, r1
 80077aa:	2000      	movs	r0, #0
 80077ac:	4957      	ldr	r1, [pc, #348]	@ (800790c <??DataTable3_3>)
 80077ae:	f000 fd69 	bl	8008284 <__aeabi_ddiv>
 80077b2:	ec41 0b1a 	vmov	d10, r0, r1
 80077b6:	2002      	movs	r0, #2
 80077b8:	2100      	movs	r1, #0
 80077ba:	003a      	movs	r2, r7
 80077bc:	f000 fa70 	bl	8007ca0 <__aeabi_llsl>
 80077c0:	e9cd 0100 	strd	r0, r1, [sp]

080077c4 <??ZbZclFloatFrexp_7>:
 80077c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077c8:	f000 fbfc 	bl	8007fc4 <__aeabi_ul2d>
 80077cc:	0002      	movs	r2, r0
 80077ce:	000b      	movs	r3, r1
 80077d0:	ec51 0b19 	vmov	r0, r1, d9
 80077d4:	f000 fe84 	bl	80084e0 <__aeabi_cdrcmple>
 80077d8:	d813      	bhi.n	8007802 <??ZbZclFloatFrexp_8>
 80077da:	ec53 2b19 	vmov	r2, r3, d9
 80077de:	ec51 0b1a 	vmov	r0, r1, d10
 80077e2:	f000 fc25 	bl	8008030 <__aeabi_dmul>
 80077e6:	ec41 0b19 	vmov	d9, r0, r1
 80077ea:	eb17 0808 	adds.w	r8, r7, r8
 80077ee:	45b0      	cmp	r8, r6
 80077f0:	dbe8      	blt.n	80077c4 <??ZbZclFloatFrexp_7>
 80077f2:	f8ca 6000 	str.w	r6, [sl]
 80077f6:	4648      	mov	r0, r9
 80077f8:	f000 fbb0 	bl	8007f5c <__aeabi_i2d>
 80077fc:	ec41 0b10 	vmov	d0, r0, r1
 8007800:	e078      	b.n	80078f4 <??ZbZclFloatFrexp_2>

08007802 <??ZbZclFloatFrexp_8>:
 8007802:	ec51 0b19 	vmov	r0, r1, d9
 8007806:	2200      	movs	r2, #0
 8007808:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 800780c:	f000 fe68 	bl	80084e0 <__aeabi_cdrcmple>
 8007810:	d865      	bhi.n	80078de <??ZbZclFloatFrexp_9>
 8007812:	ec53 2b19 	vmov	r2, r3, d9
 8007816:	2000      	movs	r0, #0
 8007818:	493e      	ldr	r1, [pc, #248]	@ (8007914 <??DataTable3_5>)
 800781a:	f000 fc09 	bl	8008030 <__aeabi_dmul>
 800781e:	ec41 0b19 	vmov	d9, r0, r1
 8007822:	f118 0801 	adds.w	r8, r8, #1
 8007826:	45b0      	cmp	r8, r6
 8007828:	dbeb      	blt.n	8007802 <??ZbZclFloatFrexp_8>
 800782a:	f8ca 6000 	str.w	r6, [sl]
 800782e:	4648      	mov	r0, r9
 8007830:	f000 fb94 	bl	8007f5c <__aeabi_i2d>
 8007834:	ec41 0b10 	vmov	d0, r0, r1
 8007838:	e05c      	b.n	80078f4 <??ZbZclFloatFrexp_2>

0800783a <??ZbZclFloatFrexp_6>:
 800783a:	ec51 0b19 	vmov	r0, r1, d9
 800783e:	2200      	movs	r2, #0
 8007840:	4b32      	ldr	r3, [pc, #200]	@ (800790c <??DataTable3_3>)
 8007842:	f000 fe55 	bl	80084f0 <__aeabi_cdcmpeq>
 8007846:	d24a      	bcs.n	80078de <??ZbZclFloatFrexp_9>
 8007848:	2401      	movs	r4, #1
 800784a:	2500      	movs	r5, #0
 800784c:	0020      	movs	r0, r4
 800784e:	0029      	movs	r1, r5
 8007850:	003a      	movs	r2, r7
 8007852:	f000 fa25 	bl	8007ca0 <__aeabi_llsl>
 8007856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800785a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800785e:	f000 fbb1 	bl	8007fc4 <__aeabi_ul2d>
 8007862:	ec41 0b1a 	vmov	d10, r0, r1
 8007866:	0020      	movs	r0, r4
 8007868:	0029      	movs	r1, r5
 800786a:	003a      	movs	r2, r7
 800786c:	f000 fa18 	bl	8007ca0 <__aeabi_llsl>
 8007870:	e9cd 0100 	strd	r0, r1, [sp]

08007874 <??ZbZclFloatFrexp_10>:
 8007874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007878:	f000 fba4 	bl	8007fc4 <__aeabi_ul2d>
 800787c:	0002      	movs	r2, r0
 800787e:	000b      	movs	r3, r1
 8007880:	2000      	movs	r0, #0
 8007882:	4922      	ldr	r1, [pc, #136]	@ (800790c <??DataTable3_3>)
 8007884:	f000 fcfe 	bl	8008284 <__aeabi_ddiv>
 8007888:	0002      	movs	r2, r0
 800788a:	000b      	movs	r3, r1
 800788c:	ec51 0b18 	vmov	r0, r1, d8
 8007890:	f000 fe2e 	bl	80084f0 <__aeabi_cdcmpeq>
 8007894:	d20e      	bcs.n	80078b4 <??ZbZclFloatFrexp_11>
 8007896:	ebb8 0007 	subs.w	r0, r8, r7
 800789a:	4583      	cmp	fp, r0
 800789c:	da0a      	bge.n	80078b4 <??ZbZclFloatFrexp_11>

0800789e <??ZbZclFloatFrexp_12>:
 800789e:	ec53 2b19 	vmov	r2, r3, d9
 80078a2:	ec51 0b1a 	vmov	r0, r1, d10
 80078a6:	f000 fbc3 	bl	8008030 <__aeabi_dmul>
 80078aa:	ec41 0b19 	vmov	d9, r0, r1
 80078ae:	ebb8 0807 	subs.w	r8, r8, r7
 80078b2:	e7df      	b.n	8007874 <??ZbZclFloatFrexp_10>

080078b4 <??ZbZclFloatFrexp_11>:
 80078b4:	ec51 0b19 	vmov	r0, r1, d9
 80078b8:	2200      	movs	r2, #0
 80078ba:	4b14      	ldr	r3, [pc, #80]	@ (800790c <??DataTable3_3>)
 80078bc:	f000 fe18 	bl	80084f0 <__aeabi_cdcmpeq>
 80078c0:	d20d      	bcs.n	80078de <??ZbZclFloatFrexp_9>
 80078c2:	f1b8 0801 	subs.w	r8, r8, #1
 80078c6:	45d8      	cmp	r8, fp
 80078c8:	d009      	beq.n	80078de <??ZbZclFloatFrexp_9>

080078ca <??ZbZclFloatFrexp_13>:
 80078ca:	ec53 2b19 	vmov	r2, r3, d9
 80078ce:	2000      	movs	r0, #0
 80078d0:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 80078d4:	f000 fbac 	bl	8008030 <__aeabi_dmul>
 80078d8:	ec41 0b19 	vmov	d9, r0, r1
 80078dc:	e7ea      	b.n	80078b4 <??ZbZclFloatFrexp_11>

080078de <??ZbZclFloatFrexp_9>:
 80078de:	f8ca 8000 	str.w	r8, [sl]
 80078e2:	4648      	mov	r0, r9
 80078e4:	f000 fb3a 	bl	8007f5c <__aeabi_i2d>
 80078e8:	ec53 2b19 	vmov	r2, r3, d9
 80078ec:	f000 fba0 	bl	8008030 <__aeabi_dmul>
 80078f0:	ec41 0b10 	vmov	d0, r0, r1

080078f4 <??ZbZclFloatFrexp_2>:
 80078f4:	b006      	add	sp, #24
 80078f6:	ecbd 8b06 	vpop	{d8-d10}
 80078fa:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007900 <??DataTable3>:
 8007900:	fc01 ffff                                   ....

08007904 <??DataTable3_1>:
 8007904:	0000 7ff0                                   ....

08007908 <??DataTable3_2>:
 8007908:	ffff 000f                                   ....

0800790c <??DataTable3_3>:
 800790c:	0000 3ff0                                   ...?

08007910 <??DataTable3_4>:
 8007910:	0000 3ff8                                   ...?

08007914 <??DataTable3_5>:
 8007914:	0000 3fe0                                   ...?

08007918 <ZbZclAttrIsFloat>:
 8007918:	0001      	movs	r1, r0
 800791a:	0008      	movs	r0, r1
 800791c:	b2c0      	uxtb	r0, r0
 800791e:	2838      	cmp	r0, #56	@ 0x38
 8007920:	db05      	blt.n	800792e <??ZbZclAttrIsFloat_0>
 8007922:	0008      	movs	r0, r1
 8007924:	b2c0      	uxtb	r0, r0
 8007926:	283b      	cmp	r0, #59	@ 0x3b
 8007928:	da01      	bge.n	800792e <??ZbZclAttrIsFloat_0>
 800792a:	2001      	movs	r0, #1
 800792c:	e000      	b.n	8007930 <??ZbZclAttrIsFloat_1>

0800792e <??ZbZclAttrIsFloat_0>:
 800792e:	2000      	movs	r0, #0

08007930 <??ZbZclAttrIsFloat_1>:
 8007930:	4770      	bx	lr

08007932 <ZbZclHandleGetSceneData>:
 8007932:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007936:	b0a2      	sub	sp, #136	@ 0x88
 8007938:	0004      	movs	r4, r0
 800793a:	000d      	movs	r5, r1
 800793c:	0016      	movs	r6, r2
 800793e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8007940:	2800      	cmp	r0, #0
 8007942:	d106      	bne.n	8007952 <??ZbZclHandleGetSceneData_0>
 8007944:	2381      	movs	r3, #129	@ 0x81
 8007946:	002a      	movs	r2, r5
 8007948:	0031      	movs	r1, r6
 800794a:	0020      	movs	r0, r4
 800794c:	f00a fa2a 	bl	8011da4 <ZbZclSendDefaultResponse>
 8007950:	e06b      	b.n	8007a2a <??ZbZclHandleGetSceneData_1>

08007952 <??ZbZclHandleGetSceneData_0>:
 8007952:	2708      	movs	r7, #8
 8007954:	f05f 0800 	movs.w	r8, #0
 8007958:	46e9      	mov	r9, sp
 800795a:	4642      	mov	r2, r8
 800795c:	0039      	movs	r1, r7
 800795e:	4648      	mov	r0, r9
 8007960:	f000 f900 	bl	8007b64 <__aeabi_memset>
 8007964:	2000      	movs	r0, #0
 8007966:	f88d 0000 	strb.w	r0, [sp]
 800796a:	2001      	movs	r0, #1
 800796c:	f88d 0001 	strb.w	r0, [sp, #1]
 8007970:	78a8      	ldrb	r0, [r5, #2]
 8007972:	2800      	cmp	r0, #0
 8007974:	d103      	bne.n	800797e <??ZbZclHandleGetSceneData_2>
 8007976:	2001      	movs	r0, #1
 8007978:	f88d 0002 	strb.w	r0, [sp, #2]
 800797c:	e002      	b.n	8007984 <??ZbZclHandleGetSceneData_3>

0800797e <??ZbZclHandleGetSceneData_2>:
 800797e:	2000      	movs	r0, #0
 8007980:	f88d 0002 	strb.w	r0, [sp, #2]

08007984 <??ZbZclHandleGetSceneData_3>:
 8007984:	2001      	movs	r0, #1
 8007986:	f88d 0003 	strb.w	r0, [sp, #3]
 800798a:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 800798e:	f8ad 0004 	strh.w	r0, [sp, #4]
 8007992:	79a8      	ldrb	r0, [r5, #6]
 8007994:	f88d 0006 	strb.w	r0, [sp, #6]
 8007998:	20f0      	movs	r0, #240	@ 0xf0
 800799a:	f88d 0007 	strb.w	r0, [sp, #7]
 800799e:	8b62      	ldrh	r2, [r4, #26]
 80079a0:	a90e      	add	r1, sp, #56	@ 0x38
 80079a2:	4668      	mov	r0, sp
 80079a4:	f7fe fdf2 	bl	800658c <ZbZclAppendHeader>
 80079a8:	0007      	movs	r7, r0
 80079aa:	2f00      	cmp	r7, #0
 80079ac:	d506      	bpl.n	80079bc <??ZbZclHandleGetSceneData_4>
 80079ae:	2380      	movs	r3, #128	@ 0x80
 80079b0:	002a      	movs	r2, r5
 80079b2:	0031      	movs	r1, r6
 80079b4:	0020      	movs	r0, r4
 80079b6:	f00a f9f5 	bl	8011da4 <ZbZclSendDefaultResponse>
 80079ba:	e036      	b.n	8007a2a <??ZbZclHandleGetSceneData_1>

080079bc <??ZbZclHandleGetSceneData_4>:
 80079bc:	46b9      	mov	r9, r7
 80079be:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	a80e      	add	r0, sp, #56	@ 0x38
 80079c6:	eb00 0109 	add.w	r1, r0, r9
 80079ca:	0020      	movs	r0, r4
 80079cc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80079ce:	4798      	blx	r3
 80079d0:	4680      	mov	r8, r0
 80079d2:	4640      	mov	r0, r8
 80079d4:	b2c0      	uxtb	r0, r0
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d106      	bne.n	80079e8 <??ZbZclHandleGetSceneData_5>
 80079da:	2381      	movs	r3, #129	@ 0x81
 80079dc:	002a      	movs	r2, r5
 80079de:	0031      	movs	r1, r6
 80079e0:	0020      	movs	r0, r4
 80079e2:	f00a f9df 	bl	8011da4 <ZbZclSendDefaultResponse>
 80079e6:	e020      	b.n	8007a2a <??ZbZclHandleGetSceneData_1>

080079e8 <??ZbZclHandleGetSceneData_5>:
 80079e8:	fa59 f988 	uxtab	r9, r9, r8
 80079ec:	0032      	movs	r2, r6
 80079ee:	a902      	add	r1, sp, #8
 80079f0:	0020      	movs	r0, r4
 80079f2:	f7fc f9a2 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 80079f6:	a802      	add	r0, sp, #8
 80079f8:	f116 0110 	adds.w	r1, r6, #16
 80079fc:	2210      	movs	r2, #16
 80079fe:	f00e f88e 	bl	8015b1e <__aeabi_memcpy>
 8007a02:	2000      	movs	r0, #0
 8007a04:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 8007a14:	a80e      	add	r0, sp, #56	@ 0x38
 8007a16:	9008      	str	r0, [sp, #32]
 8007a18:	4648      	mov	r0, r9
 8007a1a:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2200      	movs	r2, #0
 8007a22:	a902      	add	r1, sp, #8
 8007a24:	68a0      	ldr	r0, [r4, #8]
 8007a26:	f009 fd1d 	bl	8011464 <ZbApsdeDataReqCallback>

08007a2a <??ZbZclHandleGetSceneData_1>:
 8007a2a:	b023      	add	sp, #140	@ 0x8c
 8007a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007a30 <ZbZclHandleSetSceneData>:
 8007a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	b0a4      	sub	sp, #144	@ 0x90
 8007a36:	0004      	movs	r4, r0
 8007a38:	000d      	movs	r5, r1
 8007a3a:	0016      	movs	r6, r2
 8007a3c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d106      	bne.n	8007a50 <??ZbZclHandleSetSceneData_0>
 8007a42:	2381      	movs	r3, #129	@ 0x81
 8007a44:	002a      	movs	r2, r5
 8007a46:	0031      	movs	r1, r6
 8007a48:	0020      	movs	r0, r4
 8007a4a:	f00a f9ab 	bl	8011da4 <ZbZclSendDefaultResponse>
 8007a4e:	e086      	b.n	8007b5e <??ZbZclHandleSetSceneData_1>

08007a50 <??ZbZclHandleSetSceneData_0>:
 8007a50:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8007a52:	2805      	cmp	r0, #5
 8007a54:	da06      	bge.n	8007a64 <??ZbZclHandleSetSceneData_2>
 8007a56:	2380      	movs	r3, #128	@ 0x80
 8007a58:	002a      	movs	r2, r5
 8007a5a:	0031      	movs	r1, r6
 8007a5c:	0020      	movs	r0, r4
 8007a5e:	f00a f9a1 	bl	8011da4 <ZbZclSendDefaultResponse>
 8007a62:	e07c      	b.n	8007b5e <??ZbZclHandleSetSceneData_1>

08007a64 <??ZbZclHandleSetSceneData_2>:
 8007a64:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8007a66:	f7ff fa63 	bl	8006f30 <pletoh32>
 8007a6a:	0007      	movs	r7, r0
 8007a6c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8007a6e:	7900      	ldrb	r0, [r0, #4]
 8007a70:	f88d 0000 	strb.w	r0, [sp]
 8007a74:	f89d 0000 	ldrb.w	r0, [sp]
 8007a78:	1d40      	adds	r0, r0, #5
 8007a7a:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8007a7c:	4288      	cmp	r0, r1
 8007a7e:	d206      	bcs.n	8007a8e <??ZbZclHandleSetSceneData_3>
 8007a80:	2380      	movs	r3, #128	@ 0x80
 8007a82:	002a      	movs	r2, r5
 8007a84:	0031      	movs	r1, r6
 8007a86:	0020      	movs	r0, r4
 8007a88:	f00a f98c 	bl	8011da4 <ZbZclSendDefaultResponse>
 8007a8c:	e067      	b.n	8007b5e <??ZbZclHandleSetSceneData_1>

08007a8e <??ZbZclHandleSetSceneData_3>:
 8007a8e:	003b      	movs	r3, r7
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f89d 2000 	ldrb.w	r2, [sp]
 8007a96:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8007a98:	1d41      	adds	r1, r0, #5
 8007a9a:	0020      	movs	r0, r4
 8007a9c:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8007aa0:	47e0      	blx	ip
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	f05f 0908 	movs.w	r9, #8
 8007aa8:	f05f 0a00 	movs.w	sl, #0
 8007aac:	f10d 0b04 	add.w	fp, sp, #4
 8007ab0:	4652      	mov	r2, sl
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	4658      	mov	r0, fp
 8007ab6:	f000 f855 	bl	8007b64 <__aeabi_memset>
 8007aba:	2000      	movs	r0, #0
 8007abc:	f88d 0004 	strb.w	r0, [sp, #4]
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	f88d 0005 	strb.w	r0, [sp, #5]
 8007ac6:	78a8      	ldrb	r0, [r5, #2]
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d103      	bne.n	8007ad4 <??ZbZclHandleSetSceneData_4>
 8007acc:	2001      	movs	r0, #1
 8007ace:	f88d 0006 	strb.w	r0, [sp, #6]
 8007ad2:	e002      	b.n	8007ada <??ZbZclHandleSetSceneData_5>

08007ad4 <??ZbZclHandleSetSceneData_4>:
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f88d 0006 	strb.w	r0, [sp, #6]

08007ada <??ZbZclHandleSetSceneData_5>:
 8007ada:	2001      	movs	r0, #1
 8007adc:	f88d 0007 	strb.w	r0, [sp, #7]
 8007ae0:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8007ae4:	f8ad 0008 	strh.w	r0, [sp, #8]
 8007ae8:	79a8      	ldrb	r0, [r5, #6]
 8007aea:	f88d 000a 	strb.w	r0, [sp, #10]
 8007aee:	20f1      	movs	r0, #241	@ 0xf1
 8007af0:	f88d 000b 	strb.w	r0, [sp, #11]
 8007af4:	8b62      	ldrh	r2, [r4, #26]
 8007af6:	a910      	add	r1, sp, #64	@ 0x40
 8007af8:	a801      	add	r0, sp, #4
 8007afa:	f7fe fd47 	bl	800658c <ZbZclAppendHeader>
 8007afe:	4681      	mov	r9, r0
 8007b00:	f1b9 0f00 	cmp.w	r9, #0
 8007b04:	d506      	bpl.n	8007b14 <??ZbZclHandleSetSceneData_6>
 8007b06:	2380      	movs	r3, #128	@ 0x80
 8007b08:	002a      	movs	r2, r5
 8007b0a:	0031      	movs	r1, r6
 8007b0c:	0020      	movs	r0, r4
 8007b0e:	f00a f949 	bl	8011da4 <ZbZclSendDefaultResponse>
 8007b12:	e024      	b.n	8007b5e <??ZbZclHandleSetSceneData_1>

08007b14 <??ZbZclHandleSetSceneData_6>:
 8007b14:	46ca      	mov	sl, r9
 8007b16:	a810      	add	r0, sp, #64	@ 0x40
 8007b18:	f800 800a 	strb.w	r8, [r0, sl]
 8007b1c:	f11a 0a01 	adds.w	sl, sl, #1
 8007b20:	0032      	movs	r2, r6
 8007b22:	a904      	add	r1, sp, #16
 8007b24:	0020      	movs	r0, r4
 8007b26:	f7fc f908 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8007b2a:	a804      	add	r0, sp, #16
 8007b2c:	f116 0110 	adds.w	r1, r6, #16
 8007b30:	2210      	movs	r2, #16
 8007b32:	f00d fff4 	bl	8015b1e <__aeabi_memcpy>
 8007b36:	2000      	movs	r0, #0
 8007b38:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 8007b42:	2000      	movs	r0, #0
 8007b44:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 8007b48:	a810      	add	r0, sp, #64	@ 0x40
 8007b4a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8007b52:	2300      	movs	r3, #0
 8007b54:	2200      	movs	r2, #0
 8007b56:	a904      	add	r1, sp, #16
 8007b58:	68a0      	ldr	r0, [r4, #8]
 8007b5a:	f009 fc83 	bl	8011464 <ZbApsdeDataReqCallback>

08007b5e <??ZbZclHandleSetSceneData_1>:
 8007b5e:	b025      	add	sp, #148	@ 0x94
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b64 <__aeabi_memset>:
 8007b64:	b470      	push	{r4, r5, r6}
 8007b66:	0784      	lsls	r4, r0, #30
 8007b68:	d046      	beq.n	8007bf8 <__aeabi_memset+0x94>
 8007b6a:	1e4c      	subs	r4, r1, #1
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d041      	beq.n	8007bf4 <__aeabi_memset+0x90>
 8007b70:	b2d5      	uxtb	r5, r2
 8007b72:	4603      	mov	r3, r0
 8007b74:	e002      	b.n	8007b7c <__aeabi_memset+0x18>
 8007b76:	1e61      	subs	r1, r4, #1
 8007b78:	b3e4      	cbz	r4, 8007bf4 <__aeabi_memset+0x90>
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	f803 5b01 	strb.w	r5, [r3], #1
 8007b80:	0799      	lsls	r1, r3, #30
 8007b82:	d1f8      	bne.n	8007b76 <__aeabi_memset+0x12>
 8007b84:	2c03      	cmp	r4, #3
 8007b86:	d92e      	bls.n	8007be6 <__aeabi_memset+0x82>
 8007b88:	b2d5      	uxtb	r5, r2
 8007b8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007b8e:	2c0f      	cmp	r4, #15
 8007b90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007b94:	d919      	bls.n	8007bca <__aeabi_memset+0x66>
 8007b96:	4626      	mov	r6, r4
 8007b98:	f103 0110 	add.w	r1, r3, #16
 8007b9c:	3e10      	subs	r6, #16
 8007b9e:	2e0f      	cmp	r6, #15
 8007ba0:	f841 5c10 	str.w	r5, [r1, #-16]
 8007ba4:	f841 5c0c 	str.w	r5, [r1, #-12]
 8007ba8:	f841 5c08 	str.w	r5, [r1, #-8]
 8007bac:	f841 5c04 	str.w	r5, [r1, #-4]
 8007bb0:	f101 0110 	add.w	r1, r1, #16
 8007bb4:	d8f2      	bhi.n	8007b9c <__aeabi_memset+0x38>
 8007bb6:	f1a4 0110 	sub.w	r1, r4, #16
 8007bba:	f021 010f 	bic.w	r1, r1, #15
 8007bbe:	f004 040f 	and.w	r4, r4, #15
 8007bc2:	3110      	adds	r1, #16
 8007bc4:	2c03      	cmp	r4, #3
 8007bc6:	440b      	add	r3, r1
 8007bc8:	d90d      	bls.n	8007be6 <__aeabi_memset+0x82>
 8007bca:	461e      	mov	r6, r3
 8007bcc:	4621      	mov	r1, r4
 8007bce:	3904      	subs	r1, #4
 8007bd0:	2903      	cmp	r1, #3
 8007bd2:	f846 5b04 	str.w	r5, [r6], #4
 8007bd6:	d8fa      	bhi.n	8007bce <__aeabi_memset+0x6a>
 8007bd8:	1f21      	subs	r1, r4, #4
 8007bda:	f021 0103 	bic.w	r1, r1, #3
 8007bde:	3104      	adds	r1, #4
 8007be0:	440b      	add	r3, r1
 8007be2:	f004 0403 	and.w	r4, r4, #3
 8007be6:	b12c      	cbz	r4, 8007bf4 <__aeabi_memset+0x90>
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	441c      	add	r4, r3
 8007bec:	f803 2b01 	strb.w	r2, [r3], #1
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d1fb      	bne.n	8007bec <__aeabi_memset+0x88>
 8007bf4:	bc70      	pop	{r4, r5, r6}
 8007bf6:	4770      	bx	lr
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	e7c2      	b.n	8007b84 <__aeabi_memset+0x20>
	...

08007c00 <memchr>:
 8007c00:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8007c04:	2a10      	cmp	r2, #16
 8007c06:	db2b      	blt.n	8007c60 <memchr+0x60>
 8007c08:	f010 0f07 	tst.w	r0, #7
 8007c0c:	d008      	beq.n	8007c20 <memchr+0x20>
 8007c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007c12:	3a01      	subs	r2, #1
 8007c14:	428b      	cmp	r3, r1
 8007c16:	d02d      	beq.n	8007c74 <memchr+0x74>
 8007c18:	f010 0f07 	tst.w	r0, #7
 8007c1c:	b342      	cbz	r2, 8007c70 <memchr+0x70>
 8007c1e:	d1f6      	bne.n	8007c0e <memchr+0xe>
 8007c20:	b4f0      	push	{r4, r5, r6, r7}
 8007c22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007c26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8007c2a:	f022 0407 	bic.w	r4, r2, #7
 8007c2e:	f07f 0700 	mvns.w	r7, #0
 8007c32:	2300      	movs	r3, #0
 8007c34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007c38:	3c08      	subs	r4, #8
 8007c3a:	ea85 0501 	eor.w	r5, r5, r1
 8007c3e:	ea86 0601 	eor.w	r6, r6, r1
 8007c42:	fa85 f547 	uadd8	r5, r5, r7
 8007c46:	faa3 f587 	sel	r5, r3, r7
 8007c4a:	fa86 f647 	uadd8	r6, r6, r7
 8007c4e:	faa5 f687 	sel	r6, r5, r7
 8007c52:	b98e      	cbnz	r6, 8007c78 <memchr+0x78>
 8007c54:	d1ee      	bne.n	8007c34 <memchr+0x34>
 8007c56:	bcf0      	pop	{r4, r5, r6, r7}
 8007c58:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8007c5c:	f002 0207 	and.w	r2, r2, #7
 8007c60:	b132      	cbz	r2, 8007c70 <memchr+0x70>
 8007c62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007c66:	3a01      	subs	r2, #1
 8007c68:	ea83 0301 	eor.w	r3, r3, r1
 8007c6c:	b113      	cbz	r3, 8007c74 <memchr+0x74>
 8007c6e:	d1f8      	bne.n	8007c62 <memchr+0x62>
 8007c70:	2000      	movs	r0, #0
 8007c72:	4770      	bx	lr
 8007c74:	3801      	subs	r0, #1
 8007c76:	4770      	bx	lr
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	bf06      	itte	eq
 8007c7c:	4635      	moveq	r5, r6
 8007c7e:	3803      	subeq	r0, #3
 8007c80:	3807      	subne	r0, #7
 8007c82:	f015 0f01 	tst.w	r5, #1
 8007c86:	d107      	bne.n	8007c98 <memchr+0x98>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8007c8e:	bf02      	ittt	eq
 8007c90:	3001      	addeq	r0, #1
 8007c92:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8007c96:	3001      	addeq	r0, #1
 8007c98:	bcf0      	pop	{r4, r5, r6, r7}
 8007c9a:	3801      	subs	r0, #1
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop

08007ca0 <__aeabi_llsl>:
 8007ca0:	4091      	lsls	r1, r2
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	4090      	lsls	r0, r2
 8007ca6:	469c      	mov	ip, r3
 8007ca8:	3a20      	subs	r2, #32
 8007caa:	4093      	lsls	r3, r2
 8007cac:	4319      	orrs	r1, r3
 8007cae:	4252      	negs	r2, r2
 8007cb0:	4663      	mov	r3, ip
 8007cb2:	40d3      	lsrs	r3, r2
 8007cb4:	4319      	orrs	r1, r3
 8007cb6:	4770      	bx	lr

08007cb8 <__aeabi_drsub>:
 8007cb8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8007cbc:	e002      	b.n	8007cc4 <__adddf3>
 8007cbe:	bf00      	nop

08007cc0 <__aeabi_dsub>:
 8007cc0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08007cc4 <__adddf3>:
 8007cc4:	b530      	push	{r4, r5, lr}
 8007cc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007cca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007cce:	ea94 0f05 	teq	r4, r5
 8007cd2:	bf08      	it	eq
 8007cd4:	ea90 0f02 	teqeq	r0, r2
 8007cd8:	bf1f      	itttt	ne
 8007cda:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007cde:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007ce2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ce6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007cea:	f000 80e2 	beq.w	8007eb2 <__adddf3+0x1ee>
 8007cee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007cf2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007cf6:	bfb8      	it	lt
 8007cf8:	426d      	neglt	r5, r5
 8007cfa:	dd0c      	ble.n	8007d16 <__adddf3+0x52>
 8007cfc:	442c      	add	r4, r5
 8007cfe:	ea80 0202 	eor.w	r2, r0, r2
 8007d02:	ea81 0303 	eor.w	r3, r1, r3
 8007d06:	ea82 0000 	eor.w	r0, r2, r0
 8007d0a:	ea83 0101 	eor.w	r1, r3, r1
 8007d0e:	ea80 0202 	eor.w	r2, r0, r2
 8007d12:	ea81 0303 	eor.w	r3, r1, r3
 8007d16:	2d36      	cmp	r5, #54	@ 0x36
 8007d18:	bf88      	it	hi
 8007d1a:	bd30      	pophi	{r4, r5, pc}
 8007d1c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8007d20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007d24:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8007d28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007d2c:	d002      	beq.n	8007d34 <__adddf3+0x70>
 8007d2e:	4240      	negs	r0, r0
 8007d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d34:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8007d38:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007d3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007d40:	d002      	beq.n	8007d48 <__adddf3+0x84>
 8007d42:	4252      	negs	r2, r2
 8007d44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007d48:	ea94 0f05 	teq	r4, r5
 8007d4c:	f000 80a7 	beq.w	8007e9e <__adddf3+0x1da>
 8007d50:	f1a4 0401 	sub.w	r4, r4, #1
 8007d54:	f1d5 0e20 	rsbs	lr, r5, #32
 8007d58:	db0d      	blt.n	8007d76 <__adddf3+0xb2>
 8007d5a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007d5e:	fa22 f205 	lsr.w	r2, r2, r5
 8007d62:	1880      	adds	r0, r0, r2
 8007d64:	f141 0100 	adc.w	r1, r1, #0
 8007d68:	fa03 f20e 	lsl.w	r2, r3, lr
 8007d6c:	1880      	adds	r0, r0, r2
 8007d6e:	fa43 f305 	asr.w	r3, r3, r5
 8007d72:	4159      	adcs	r1, r3
 8007d74:	e00e      	b.n	8007d94 <__adddf3+0xd0>
 8007d76:	f1a5 0520 	sub.w	r5, r5, #32
 8007d7a:	f10e 0e20 	add.w	lr, lr, #32
 8007d7e:	2a01      	cmp	r2, #1
 8007d80:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007d84:	bf28      	it	cs
 8007d86:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007d8a:	fa43 f305 	asr.w	r3, r3, r5
 8007d8e:	18c0      	adds	r0, r0, r3
 8007d90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007d94:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007d98:	d507      	bpl.n	8007daa <__adddf3+0xe6>
 8007d9a:	f04f 0e00 	mov.w	lr, #0
 8007d9e:	f1dc 0c00 	rsbs	ip, ip, #0
 8007da2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007da6:	eb6e 0101 	sbc.w	r1, lr, r1
 8007daa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007dae:	d31b      	bcc.n	8007de8 <__adddf3+0x124>
 8007db0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007db4:	d30c      	bcc.n	8007dd0 <__adddf3+0x10c>
 8007db6:	0849      	lsrs	r1, r1, #1
 8007db8:	ea5f 0030 	movs.w	r0, r0, rrx
 8007dbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007dc0:	f104 0401 	add.w	r4, r4, #1
 8007dc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007dc8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8007dcc:	f080 809a 	bcs.w	8007f04 <__adddf3+0x240>
 8007dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8007dd4:	bf08      	it	eq
 8007dd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007dda:	f150 0000 	adcs.w	r0, r0, #0
 8007dde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007de2:	ea41 0105 	orr.w	r1, r1, r5
 8007de6:	bd30      	pop	{r4, r5, pc}
 8007de8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007dec:	4140      	adcs	r0, r0
 8007dee:	eb41 0101 	adc.w	r1, r1, r1
 8007df2:	3c01      	subs	r4, #1
 8007df4:	bf28      	it	cs
 8007df6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8007dfa:	d2e9      	bcs.n	8007dd0 <__adddf3+0x10c>
 8007dfc:	f091 0f00 	teq	r1, #0
 8007e00:	bf04      	itt	eq
 8007e02:	4601      	moveq	r1, r0
 8007e04:	2000      	moveq	r0, #0
 8007e06:	fab1 f381 	clz	r3, r1
 8007e0a:	bf08      	it	eq
 8007e0c:	3320      	addeq	r3, #32
 8007e0e:	f1a3 030b 	sub.w	r3, r3, #11
 8007e12:	f1b3 0220 	subs.w	r2, r3, #32
 8007e16:	da0c      	bge.n	8007e32 <__adddf3+0x16e>
 8007e18:	320c      	adds	r2, #12
 8007e1a:	dd08      	ble.n	8007e2e <__adddf3+0x16a>
 8007e1c:	f102 0c14 	add.w	ip, r2, #20
 8007e20:	f1c2 020c 	rsb	r2, r2, #12
 8007e24:	fa01 f00c 	lsl.w	r0, r1, ip
 8007e28:	fa21 f102 	lsr.w	r1, r1, r2
 8007e2c:	e00c      	b.n	8007e48 <__adddf3+0x184>
 8007e2e:	f102 0214 	add.w	r2, r2, #20
 8007e32:	bfd8      	it	le
 8007e34:	f1c2 0c20 	rsble	ip, r2, #32
 8007e38:	fa01 f102 	lsl.w	r1, r1, r2
 8007e3c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007e40:	bfdc      	itt	le
 8007e42:	ea41 010c 	orrle.w	r1, r1, ip
 8007e46:	4090      	lslle	r0, r2
 8007e48:	1ae4      	subs	r4, r4, r3
 8007e4a:	bfa2      	ittt	ge
 8007e4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007e50:	4329      	orrge	r1, r5
 8007e52:	bd30      	popge	{r4, r5, pc}
 8007e54:	ea6f 0404 	mvn.w	r4, r4
 8007e58:	3c1f      	subs	r4, #31
 8007e5a:	da1c      	bge.n	8007e96 <__adddf3+0x1d2>
 8007e5c:	340c      	adds	r4, #12
 8007e5e:	dc0e      	bgt.n	8007e7e <__adddf3+0x1ba>
 8007e60:	f104 0414 	add.w	r4, r4, #20
 8007e64:	f1c4 0220 	rsb	r2, r4, #32
 8007e68:	fa20 f004 	lsr.w	r0, r0, r4
 8007e6c:	fa01 f302 	lsl.w	r3, r1, r2
 8007e70:	ea40 0003 	orr.w	r0, r0, r3
 8007e74:	fa21 f304 	lsr.w	r3, r1, r4
 8007e78:	ea45 0103 	orr.w	r1, r5, r3
 8007e7c:	bd30      	pop	{r4, r5, pc}
 8007e7e:	f1c4 040c 	rsb	r4, r4, #12
 8007e82:	f1c4 0220 	rsb	r2, r4, #32
 8007e86:	fa20 f002 	lsr.w	r0, r0, r2
 8007e8a:	fa01 f304 	lsl.w	r3, r1, r4
 8007e8e:	ea40 0003 	orr.w	r0, r0, r3
 8007e92:	4629      	mov	r1, r5
 8007e94:	bd30      	pop	{r4, r5, pc}
 8007e96:	fa21 f004 	lsr.w	r0, r1, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	bd30      	pop	{r4, r5, pc}
 8007e9e:	f094 0f00 	teq	r4, #0
 8007ea2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8007ea6:	bf06      	itte	eq
 8007ea8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8007eac:	3401      	addeq	r4, #1
 8007eae:	3d01      	subne	r5, #1
 8007eb0:	e74e      	b.n	8007d50 <__adddf3+0x8c>
 8007eb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007eb6:	bf18      	it	ne
 8007eb8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ebc:	d029      	beq.n	8007f12 <__adddf3+0x24e>
 8007ebe:	ea94 0f05 	teq	r4, r5
 8007ec2:	bf08      	it	eq
 8007ec4:	ea90 0f02 	teqeq	r0, r2
 8007ec8:	d005      	beq.n	8007ed6 <__adddf3+0x212>
 8007eca:	ea54 0c00 	orrs.w	ip, r4, r0
 8007ece:	bf04      	itt	eq
 8007ed0:	4619      	moveq	r1, r3
 8007ed2:	4610      	moveq	r0, r2
 8007ed4:	bd30      	pop	{r4, r5, pc}
 8007ed6:	ea91 0f03 	teq	r1, r3
 8007eda:	bf1e      	ittt	ne
 8007edc:	2100      	movne	r1, #0
 8007ede:	2000      	movne	r0, #0
 8007ee0:	bd30      	popne	{r4, r5, pc}
 8007ee2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007ee6:	d105      	bne.n	8007ef4 <__adddf3+0x230>
 8007ee8:	0040      	lsls	r0, r0, #1
 8007eea:	4149      	adcs	r1, r1
 8007eec:	bf28      	it	cs
 8007eee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8007ef2:	bd30      	pop	{r4, r5, pc}
 8007ef4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8007ef8:	bf3c      	itt	cc
 8007efa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8007efe:	bd30      	popcc	{r4, r5, pc}
 8007f00:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007f04:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8007f08:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f0c:	f04f 0000 	mov.w	r0, #0
 8007f10:	bd30      	pop	{r4, r5, pc}
 8007f12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007f16:	bf1a      	itte	ne
 8007f18:	4619      	movne	r1, r3
 8007f1a:	4610      	movne	r0, r2
 8007f1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007f20:	bf1c      	itt	ne
 8007f22:	460b      	movne	r3, r1
 8007f24:	4602      	movne	r2, r0
 8007f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007f2a:	bf06      	itte	eq
 8007f2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007f30:	ea91 0f03 	teqeq	r1, r3
 8007f34:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8007f38:	bd30      	pop	{r4, r5, pc}
 8007f3a:	bf00      	nop

08007f3c <__aeabi_ui2d>:
 8007f3c:	f090 0f00 	teq	r0, #0
 8007f40:	bf04      	itt	eq
 8007f42:	2100      	moveq	r1, #0
 8007f44:	4770      	bxeq	lr
 8007f46:	b530      	push	{r4, r5, lr}
 8007f48:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8007f4c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8007f50:	f04f 0500 	mov.w	r5, #0
 8007f54:	f04f 0100 	mov.w	r1, #0
 8007f58:	e750      	b.n	8007dfc <__adddf3+0x138>
 8007f5a:	bf00      	nop

08007f5c <__aeabi_i2d>:
 8007f5c:	f090 0f00 	teq	r0, #0
 8007f60:	bf04      	itt	eq
 8007f62:	2100      	moveq	r1, #0
 8007f64:	4770      	bxeq	lr
 8007f66:	b530      	push	{r4, r5, lr}
 8007f68:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8007f6c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8007f70:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8007f74:	bf48      	it	mi
 8007f76:	4240      	negmi	r0, r0
 8007f78:	f04f 0100 	mov.w	r1, #0
 8007f7c:	e73e      	b.n	8007dfc <__adddf3+0x138>
 8007f7e:	bf00      	nop

08007f80 <__aeabi_f2d>:
 8007f80:	0042      	lsls	r2, r0, #1
 8007f82:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007f86:	ea4f 0131 	mov.w	r1, r1, rrx
 8007f8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007f8e:	bf1f      	itttt	ne
 8007f90:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8007f94:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8007f98:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8007f9c:	4770      	bxne	lr
 8007f9e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8007fa2:	bf08      	it	eq
 8007fa4:	4770      	bxeq	lr
 8007fa6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8007faa:	bf04      	itt	eq
 8007fac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8007fb0:	4770      	bxeq	lr
 8007fb2:	b530      	push	{r4, r5, lr}
 8007fb4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8007fb8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007fbc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007fc0:	e71c      	b.n	8007dfc <__adddf3+0x138>
 8007fc2:	bf00      	nop

08007fc4 <__aeabi_ul2d>:
 8007fc4:	ea50 0201 	orrs.w	r2, r0, r1
 8007fc8:	bf08      	it	eq
 8007fca:	4770      	bxeq	lr
 8007fcc:	b530      	push	{r4, r5, lr}
 8007fce:	f04f 0500 	mov.w	r5, #0
 8007fd2:	e00a      	b.n	8007fea <__aeabi_l2d+0x16>

08007fd4 <__aeabi_l2d>:
 8007fd4:	ea50 0201 	orrs.w	r2, r0, r1
 8007fd8:	bf08      	it	eq
 8007fda:	4770      	bxeq	lr
 8007fdc:	b530      	push	{r4, r5, lr}
 8007fde:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8007fe2:	d502      	bpl.n	8007fea <__aeabi_l2d+0x16>
 8007fe4:	4240      	negs	r0, r0
 8007fe6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007fea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8007fee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8007ff2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007ff6:	f43f aed8 	beq.w	8007daa <__adddf3+0xe6>
 8007ffa:	f04f 0203 	mov.w	r2, #3
 8007ffe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008002:	bf18      	it	ne
 8008004:	3203      	addne	r2, #3
 8008006:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800800a:	bf18      	it	ne
 800800c:	3203      	addne	r2, #3
 800800e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008012:	f1c2 0320 	rsb	r3, r2, #32
 8008016:	fa00 fc03 	lsl.w	ip, r0, r3
 800801a:	fa20 f002 	lsr.w	r0, r0, r2
 800801e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008022:	ea40 000e 	orr.w	r0, r0, lr
 8008026:	fa21 f102 	lsr.w	r1, r1, r2
 800802a:	4414      	add	r4, r2
 800802c:	e6bd      	b.n	8007daa <__adddf3+0xe6>
 800802e:	bf00      	nop

08008030 <__aeabi_dmul>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008036:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800803a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800803e:	bf1d      	ittte	ne
 8008040:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008044:	ea94 0f0c 	teqne	r4, ip
 8008048:	ea95 0f0c 	teqne	r5, ip
 800804c:	f000 f8de 	bleq	800820c <__aeabi_dmul+0x1dc>
 8008050:	442c      	add	r4, r5
 8008052:	ea81 0603 	eor.w	r6, r1, r3
 8008056:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800805a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800805e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008062:	bf18      	it	ne
 8008064:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008068:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800806c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008070:	d038      	beq.n	80080e4 <__aeabi_dmul+0xb4>
 8008072:	fba0 ce02 	umull	ip, lr, r0, r2
 8008076:	f04f 0500 	mov.w	r5, #0
 800807a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800807e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8008082:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008086:	f04f 0600 	mov.w	r6, #0
 800808a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800808e:	f09c 0f00 	teq	ip, #0
 8008092:	bf18      	it	ne
 8008094:	f04e 0e01 	orrne.w	lr, lr, #1
 8008098:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800809c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80080a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80080a4:	d204      	bcs.n	80080b0 <__aeabi_dmul+0x80>
 80080a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80080aa:	416d      	adcs	r5, r5
 80080ac:	eb46 0606 	adc.w	r6, r6, r6
 80080b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80080b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80080b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80080bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80080c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80080c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80080c8:	bf88      	it	hi
 80080ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80080ce:	d81e      	bhi.n	800810e <__aeabi_dmul+0xde>
 80080d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80080d4:	bf08      	it	eq
 80080d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80080da:	f150 0000 	adcs.w	r0, r0, #0
 80080de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80080e8:	ea46 0101 	orr.w	r1, r6, r1
 80080ec:	ea40 0002 	orr.w	r0, r0, r2
 80080f0:	ea81 0103 	eor.w	r1, r1, r3
 80080f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80080f8:	bfc2      	ittt	gt
 80080fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80080fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008102:	bd70      	popgt	{r4, r5, r6, pc}
 8008104:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008108:	f04f 0e00 	mov.w	lr, #0
 800810c:	3c01      	subs	r4, #1
 800810e:	f300 80ab 	bgt.w	8008268 <__aeabi_dmul+0x238>
 8008112:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8008116:	bfde      	ittt	le
 8008118:	2000      	movle	r0, #0
 800811a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800811e:	bd70      	pople	{r4, r5, r6, pc}
 8008120:	f1c4 0400 	rsb	r4, r4, #0
 8008124:	3c20      	subs	r4, #32
 8008126:	da35      	bge.n	8008194 <__aeabi_dmul+0x164>
 8008128:	340c      	adds	r4, #12
 800812a:	dc1b      	bgt.n	8008164 <__aeabi_dmul+0x134>
 800812c:	f104 0414 	add.w	r4, r4, #20
 8008130:	f1c4 0520 	rsb	r5, r4, #32
 8008134:	fa00 f305 	lsl.w	r3, r0, r5
 8008138:	fa20 f004 	lsr.w	r0, r0, r4
 800813c:	fa01 f205 	lsl.w	r2, r1, r5
 8008140:	ea40 0002 	orr.w	r0, r0, r2
 8008144:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008148:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800814c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008150:	fa21 f604 	lsr.w	r6, r1, r4
 8008154:	eb42 0106 	adc.w	r1, r2, r6
 8008158:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800815c:	bf08      	it	eq
 800815e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f1c4 040c 	rsb	r4, r4, #12
 8008168:	f1c4 0520 	rsb	r5, r4, #32
 800816c:	fa00 f304 	lsl.w	r3, r0, r4
 8008170:	fa20 f005 	lsr.w	r0, r0, r5
 8008174:	fa01 f204 	lsl.w	r2, r1, r4
 8008178:	ea40 0002 	orr.w	r0, r0, r2
 800817c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008184:	f141 0100 	adc.w	r1, r1, #0
 8008188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800818c:	bf08      	it	eq
 800818e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f1c4 0520 	rsb	r5, r4, #32
 8008198:	fa00 f205 	lsl.w	r2, r0, r5
 800819c:	ea4e 0e02 	orr.w	lr, lr, r2
 80081a0:	fa20 f304 	lsr.w	r3, r0, r4
 80081a4:	fa01 f205 	lsl.w	r2, r1, r5
 80081a8:	ea43 0302 	orr.w	r3, r3, r2
 80081ac:	fa21 f004 	lsr.w	r0, r1, r4
 80081b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80081b4:	fa21 f204 	lsr.w	r2, r1, r4
 80081b8:	ea20 0002 	bic.w	r0, r0, r2
 80081bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80081c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80081c4:	bf08      	it	eq
 80081c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	f094 0f00 	teq	r4, #0
 80081d0:	d10f      	bne.n	80081f2 <__aeabi_dmul+0x1c2>
 80081d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80081d6:	0040      	lsls	r0, r0, #1
 80081d8:	eb41 0101 	adc.w	r1, r1, r1
 80081dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80081e0:	bf08      	it	eq
 80081e2:	3c01      	subeq	r4, #1
 80081e4:	d0f7      	beq.n	80081d6 <__aeabi_dmul+0x1a6>
 80081e6:	ea41 0106 	orr.w	r1, r1, r6
 80081ea:	f095 0f00 	teq	r5, #0
 80081ee:	bf18      	it	ne
 80081f0:	4770      	bxne	lr
 80081f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80081f6:	0052      	lsls	r2, r2, #1
 80081f8:	eb43 0303 	adc.w	r3, r3, r3
 80081fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008200:	bf08      	it	eq
 8008202:	3d01      	subeq	r5, #1
 8008204:	d0f7      	beq.n	80081f6 <__aeabi_dmul+0x1c6>
 8008206:	ea43 0306 	orr.w	r3, r3, r6
 800820a:	4770      	bx	lr
 800820c:	ea94 0f0c 	teq	r4, ip
 8008210:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008214:	bf18      	it	ne
 8008216:	ea95 0f0c 	teqne	r5, ip
 800821a:	d00c      	beq.n	8008236 <__aeabi_dmul+0x206>
 800821c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008220:	bf18      	it	ne
 8008222:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008226:	d1d1      	bne.n	80081cc <__aeabi_dmul+0x19c>
 8008228:	ea81 0103 	eor.w	r1, r1, r3
 800822c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008230:	f04f 0000 	mov.w	r0, #0
 8008234:	bd70      	pop	{r4, r5, r6, pc}
 8008236:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800823a:	bf06      	itte	eq
 800823c:	4610      	moveq	r0, r2
 800823e:	4619      	moveq	r1, r3
 8008240:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008244:	d019      	beq.n	800827a <__aeabi_dmul+0x24a>
 8008246:	ea94 0f0c 	teq	r4, ip
 800824a:	d102      	bne.n	8008252 <__aeabi_dmul+0x222>
 800824c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008250:	d113      	bne.n	800827a <__aeabi_dmul+0x24a>
 8008252:	ea95 0f0c 	teq	r5, ip
 8008256:	d105      	bne.n	8008264 <__aeabi_dmul+0x234>
 8008258:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800825c:	bf1c      	itt	ne
 800825e:	4610      	movne	r0, r2
 8008260:	4619      	movne	r1, r3
 8008262:	d10a      	bne.n	800827a <__aeabi_dmul+0x24a>
 8008264:	ea81 0103 	eor.w	r1, r1, r3
 8008268:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800826c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008270:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008274:	f04f 0000 	mov.w	r0, #0
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800827e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8008282:	bd70      	pop	{r4, r5, r6, pc}

08008284 <__aeabi_ddiv>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800828a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800828e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008292:	bf1d      	ittte	ne
 8008294:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008298:	ea94 0f0c 	teqne	r4, ip
 800829c:	ea95 0f0c 	teqne	r5, ip
 80082a0:	f000 f8a7 	bleq	80083f2 <__aeabi_ddiv+0x16e>
 80082a4:	eba4 0405 	sub.w	r4, r4, r5
 80082a8:	ea81 0e03 	eor.w	lr, r1, r3
 80082ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80082b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082b4:	f000 8088 	beq.w	80083c8 <__aeabi_ddiv+0x144>
 80082b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80082bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80082c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80082c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80082c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80082cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80082d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80082d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80082d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80082dc:	429d      	cmp	r5, r3
 80082de:	bf08      	it	eq
 80082e0:	4296      	cmpeq	r6, r2
 80082e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80082e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80082ea:	d202      	bcs.n	80082f2 <__aeabi_ddiv+0x6e>
 80082ec:	085b      	lsrs	r3, r3, #1
 80082ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80082f2:	1ab6      	subs	r6, r6, r2
 80082f4:	eb65 0503 	sbc.w	r5, r5, r3
 80082f8:	085b      	lsrs	r3, r3, #1
 80082fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80082fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008302:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8008306:	ebb6 0e02 	subs.w	lr, r6, r2
 800830a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800830e:	bf22      	ittt	cs
 8008310:	1ab6      	subcs	r6, r6, r2
 8008312:	4675      	movcs	r5, lr
 8008314:	ea40 000c 	orrcs.w	r0, r0, ip
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	ea4f 0232 	mov.w	r2, r2, rrx
 800831e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008322:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008326:	bf22      	ittt	cs
 8008328:	1ab6      	subcs	r6, r6, r2
 800832a:	4675      	movcs	r5, lr
 800832c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008330:	085b      	lsrs	r3, r3, #1
 8008332:	ea4f 0232 	mov.w	r2, r2, rrx
 8008336:	ebb6 0e02 	subs.w	lr, r6, r2
 800833a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800833e:	bf22      	ittt	cs
 8008340:	1ab6      	subcs	r6, r6, r2
 8008342:	4675      	movcs	r5, lr
 8008344:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	ea4f 0232 	mov.w	r2, r2, rrx
 800834e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008352:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008356:	bf22      	ittt	cs
 8008358:	1ab6      	subcs	r6, r6, r2
 800835a:	4675      	movcs	r5, lr
 800835c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008360:	ea55 0e06 	orrs.w	lr, r5, r6
 8008364:	d018      	beq.n	8008398 <__aeabi_ddiv+0x114>
 8008366:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800836a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800836e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008372:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008376:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800837a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800837e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008382:	d1c0      	bne.n	8008306 <__aeabi_ddiv+0x82>
 8008384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008388:	d10b      	bne.n	80083a2 <__aeabi_ddiv+0x11e>
 800838a:	ea41 0100 	orr.w	r1, r1, r0
 800838e:	f04f 0000 	mov.w	r0, #0
 8008392:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008396:	e7b6      	b.n	8008306 <__aeabi_ddiv+0x82>
 8008398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800839c:	bf04      	itt	eq
 800839e:	4301      	orreq	r1, r0
 80083a0:	2000      	moveq	r0, #0
 80083a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80083a6:	bf88      	it	hi
 80083a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80083ac:	f63f aeaf 	bhi.w	800810e <__aeabi_dmul+0xde>
 80083b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80083b4:	bf04      	itt	eq
 80083b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80083ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80083be:	f150 0000 	adcs.w	r0, r0, #0
 80083c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80083cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80083d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80083d4:	bfc2      	ittt	gt
 80083d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80083da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80083de:	bd70      	popgt	{r4, r5, r6, pc}
 80083e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80083e4:	f04f 0e00 	mov.w	lr, #0
 80083e8:	3c01      	subs	r4, #1
 80083ea:	e690      	b.n	800810e <__aeabi_dmul+0xde>
 80083ec:	ea45 0e06 	orr.w	lr, r5, r6
 80083f0:	e68d      	b.n	800810e <__aeabi_dmul+0xde>
 80083f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80083f6:	ea94 0f0c 	teq	r4, ip
 80083fa:	bf08      	it	eq
 80083fc:	ea95 0f0c 	teqeq	r5, ip
 8008400:	f43f af3b 	beq.w	800827a <__aeabi_dmul+0x24a>
 8008404:	ea94 0f0c 	teq	r4, ip
 8008408:	d10a      	bne.n	8008420 <__aeabi_ddiv+0x19c>
 800840a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800840e:	f47f af34 	bne.w	800827a <__aeabi_dmul+0x24a>
 8008412:	ea95 0f0c 	teq	r5, ip
 8008416:	f47f af25 	bne.w	8008264 <__aeabi_dmul+0x234>
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	e72c      	b.n	800827a <__aeabi_dmul+0x24a>
 8008420:	ea95 0f0c 	teq	r5, ip
 8008424:	d106      	bne.n	8008434 <__aeabi_ddiv+0x1b0>
 8008426:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800842a:	f43f aefd 	beq.w	8008228 <__aeabi_dmul+0x1f8>
 800842e:	4610      	mov	r0, r2
 8008430:	4619      	mov	r1, r3
 8008432:	e722      	b.n	800827a <__aeabi_dmul+0x24a>
 8008434:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008438:	bf18      	it	ne
 800843a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800843e:	f47f aec5 	bne.w	80081cc <__aeabi_dmul+0x19c>
 8008442:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008446:	f47f af0d 	bne.w	8008264 <__aeabi_dmul+0x234>
 800844a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800844e:	f47f aeeb 	bne.w	8008228 <__aeabi_dmul+0x1f8>
 8008452:	e712      	b.n	800827a <__aeabi_dmul+0x24a>

08008454 <__gedf2>:
 8008454:	f04f 3cff 	mov.w	ip, #4294967295
 8008458:	e006      	b.n	8008468 <__cmpdf2+0x4>
 800845a:	bf00      	nop

0800845c <__ledf2>:
 800845c:	f04f 0c01 	mov.w	ip, #1
 8008460:	e002      	b.n	8008468 <__cmpdf2+0x4>
 8008462:	bf00      	nop

08008464 <__cmpdf2>:
 8008464:	f04f 0c01 	mov.w	ip, #1
 8008468:	f84d cd04 	str.w	ip, [sp, #-4]!
 800846c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008474:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008478:	bf18      	it	ne
 800847a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800847e:	d01b      	beq.n	80084b8 <__cmpdf2+0x54>
 8008480:	b001      	add	sp, #4
 8008482:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008486:	bf0c      	ite	eq
 8008488:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800848c:	ea91 0f03 	teqne	r1, r3
 8008490:	bf02      	ittt	eq
 8008492:	ea90 0f02 	teqeq	r0, r2
 8008496:	2000      	moveq	r0, #0
 8008498:	4770      	bxeq	lr
 800849a:	f110 0f00 	cmn.w	r0, #0
 800849e:	ea91 0f03 	teq	r1, r3
 80084a2:	bf58      	it	pl
 80084a4:	4299      	cmppl	r1, r3
 80084a6:	bf08      	it	eq
 80084a8:	4290      	cmpeq	r0, r2
 80084aa:	bf2c      	ite	cs
 80084ac:	17d8      	asrcs	r0, r3, #31
 80084ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80084b2:	f040 0001 	orr.w	r0, r0, #1
 80084b6:	4770      	bx	lr
 80084b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80084bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80084c0:	d102      	bne.n	80084c8 <__cmpdf2+0x64>
 80084c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80084c6:	d107      	bne.n	80084d8 <__cmpdf2+0x74>
 80084c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80084cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80084d0:	d1d6      	bne.n	8008480 <__cmpdf2+0x1c>
 80084d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80084d6:	d0d3      	beq.n	8008480 <__cmpdf2+0x1c>
 80084d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop

080084e0 <__aeabi_cdrcmple>:
 80084e0:	4684      	mov	ip, r0
 80084e2:	4610      	mov	r0, r2
 80084e4:	4662      	mov	r2, ip
 80084e6:	468c      	mov	ip, r1
 80084e8:	4619      	mov	r1, r3
 80084ea:	4663      	mov	r3, ip
 80084ec:	e000      	b.n	80084f0 <__aeabi_cdcmpeq>
 80084ee:	bf00      	nop

080084f0 <__aeabi_cdcmpeq>:
 80084f0:	b501      	push	{r0, lr}
 80084f2:	f7ff ffb7 	bl	8008464 <__cmpdf2>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	bf48      	it	mi
 80084fa:	f110 0f00 	cmnmi.w	r0, #0
 80084fe:	bd01      	pop	{r0, pc}

08008500 <__aeabi_dcmpeq>:
 8008500:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008504:	f7ff fff4 	bl	80084f0 <__aeabi_cdcmpeq>
 8008508:	bf0c      	ite	eq
 800850a:	2001      	moveq	r0, #1
 800850c:	2000      	movne	r0, #0
 800850e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008512:	bf00      	nop

08008514 <__aeabi_dcmplt>:
 8008514:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008518:	f7ff ffea 	bl	80084f0 <__aeabi_cdcmpeq>
 800851c:	bf34      	ite	cc
 800851e:	2001      	movcc	r0, #1
 8008520:	2000      	movcs	r0, #0
 8008522:	f85d fb08 	ldr.w	pc, [sp], #8
 8008526:	bf00      	nop

08008528 <__aeabi_dcmple>:
 8008528:	f84d ed08 	str.w	lr, [sp, #-8]!
 800852c:	f7ff ffe0 	bl	80084f0 <__aeabi_cdcmpeq>
 8008530:	bf94      	ite	ls
 8008532:	2001      	movls	r0, #1
 8008534:	2000      	movhi	r0, #0
 8008536:	f85d fb08 	ldr.w	pc, [sp], #8
 800853a:	bf00      	nop

0800853c <__aeabi_dcmpge>:
 800853c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008540:	f7ff ffce 	bl	80084e0 <__aeabi_cdrcmple>
 8008544:	bf94      	ite	ls
 8008546:	2001      	movls	r0, #1
 8008548:	2000      	movhi	r0, #0
 800854a:	f85d fb08 	ldr.w	pc, [sp], #8
 800854e:	bf00      	nop

08008550 <__aeabi_dcmpgt>:
 8008550:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008554:	f7ff ffc4 	bl	80084e0 <__aeabi_cdrcmple>
 8008558:	bf34      	ite	cc
 800855a:	2001      	movcc	r0, #1
 800855c:	2000      	movcs	r0, #0
 800855e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008562:	bf00      	nop

08008564 <__aeabi_dcmpun>:
 8008564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800856c:	d102      	bne.n	8008574 <__aeabi_dcmpun+0x10>
 800856e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008572:	d10a      	bne.n	800858a <__aeabi_dcmpun+0x26>
 8008574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800857c:	d102      	bne.n	8008584 <__aeabi_dcmpun+0x20>
 800857e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008582:	d102      	bne.n	800858a <__aeabi_dcmpun+0x26>
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	4770      	bx	lr
 800858a:	f04f 0001 	mov.w	r0, #1
 800858e:	4770      	bx	lr

08008590 <__aeabi_d2iz>:
 8008590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008594:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008598:	d215      	bcs.n	80085c6 <__aeabi_d2iz+0x36>
 800859a:	d511      	bpl.n	80085c0 <__aeabi_d2iz+0x30>
 800859c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80085a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80085a4:	d912      	bls.n	80085cc <__aeabi_d2iz+0x3c>
 80085a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80085aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80085b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80085b6:	fa23 f002 	lsr.w	r0, r3, r2
 80085ba:	bf18      	it	ne
 80085bc:	4240      	negne	r0, r0
 80085be:	4770      	bx	lr
 80085c0:	f04f 0000 	mov.w	r0, #0
 80085c4:	4770      	bx	lr
 80085c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80085ca:	d105      	bne.n	80085d8 <__aeabi_d2iz+0x48>
 80085cc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80085d0:	bf08      	it	eq
 80085d2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80085d6:	4770      	bx	lr
 80085d8:	f04f 0000 	mov.w	r0, #0
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop

080085e0 <__aeabi_d2uiz>:
 80085e0:	004a      	lsls	r2, r1, #1
 80085e2:	d211      	bcs.n	8008608 <__aeabi_d2uiz+0x28>
 80085e4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80085e8:	d211      	bcs.n	800860e <__aeabi_d2uiz+0x2e>
 80085ea:	d50d      	bpl.n	8008608 <__aeabi_d2uiz+0x28>
 80085ec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80085f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80085f4:	d40e      	bmi.n	8008614 <__aeabi_d2uiz+0x34>
 80085f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80085fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008602:	fa23 f002 	lsr.w	r0, r3, r2
 8008606:	4770      	bx	lr
 8008608:	f04f 0000 	mov.w	r0, #0
 800860c:	4770      	bx	lr
 800860e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008612:	d102      	bne.n	800861a <__aeabi_d2uiz+0x3a>
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	4770      	bx	lr
 800861a:	f04f 0000 	mov.w	r0, #0
 800861e:	4770      	bx	lr

08008620 <__aeabi_d2f>:
 8008620:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008624:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008628:	bf24      	itt	cs
 800862a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800862e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008632:	d90d      	bls.n	8008650 <__aeabi_d2f+0x30>
 8008634:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008638:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800863c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008640:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008644:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008648:	bf08      	it	eq
 800864a:	f020 0001 	biceq.w	r0, r0, #1
 800864e:	4770      	bx	lr
 8008650:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008654:	d121      	bne.n	800869a <__aeabi_d2f+0x7a>
 8008656:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800865a:	bfbc      	itt	lt
 800865c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008660:	4770      	bxlt	lr
 8008662:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008666:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800866a:	f1c2 0218 	rsb	r2, r2, #24
 800866e:	f1c2 0c20 	rsb	ip, r2, #32
 8008672:	fa10 f30c 	lsls.w	r3, r0, ip
 8008676:	fa20 f002 	lsr.w	r0, r0, r2
 800867a:	bf18      	it	ne
 800867c:	f040 0001 	orrne.w	r0, r0, #1
 8008680:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008684:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008688:	fa03 fc0c 	lsl.w	ip, r3, ip
 800868c:	ea40 000c 	orr.w	r0, r0, ip
 8008690:	fa23 f302 	lsr.w	r3, r3, r2
 8008694:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008698:	e7cc      	b.n	8008634 <__aeabi_d2f+0x14>
 800869a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800869e:	d107      	bne.n	80086b0 <__aeabi_d2f+0x90>
 80086a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80086a4:	bf1e      	ittt	ne
 80086a6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80086aa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80086ae:	4770      	bxne	lr
 80086b0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80086b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80086b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <__aeabi_uldivmod>:
 80086c0:	b953      	cbnz	r3, 80086d8 <__aeabi_uldivmod+0x18>
 80086c2:	b94a      	cbnz	r2, 80086d8 <__aeabi_uldivmod+0x18>
 80086c4:	2900      	cmp	r1, #0
 80086c6:	bf08      	it	eq
 80086c8:	2800      	cmpeq	r0, #0
 80086ca:	bf1c      	itt	ne
 80086cc:	f04f 31ff 	movne.w	r1, #4294967295
 80086d0:	f04f 30ff 	movne.w	r0, #4294967295
 80086d4:	f000 b9a0 	b.w	8008a18 <__aeabi_idiv0>
 80086d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80086dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80086e0:	f000 f83c 	bl	800875c <__udivmoddi4>
 80086e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80086e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ec:	b004      	add	sp, #16
 80086ee:	4770      	bx	lr

080086f0 <__aeabi_d2lz>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	2200      	movs	r2, #0
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	f7ff ff0b 	bl	8008514 <__aeabi_dcmplt>
 80086fe:	b928      	cbnz	r0, 800870c <__aeabi_d2lz+0x1c>
 8008700:	4620      	mov	r0, r4
 8008702:	4629      	mov	r1, r5
 8008704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008708:	f000 b80a 	b.w	8008720 <__aeabi_d2ulz>
 800870c:	4620      	mov	r0, r4
 800870e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008712:	f000 f805 	bl	8008720 <__aeabi_d2ulz>
 8008716:	4240      	negs	r0, r0
 8008718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800871c:	bd38      	pop	{r3, r4, r5, pc}
 800871e:	bf00      	nop

08008720 <__aeabi_d2ulz>:
 8008720:	b5d0      	push	{r4, r6, r7, lr}
 8008722:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <__aeabi_d2ulz+0x34>)
 8008724:	2200      	movs	r2, #0
 8008726:	4606      	mov	r6, r0
 8008728:	460f      	mov	r7, r1
 800872a:	f7ff fc81 	bl	8008030 <__aeabi_dmul>
 800872e:	f7ff ff57 	bl	80085e0 <__aeabi_d2uiz>
 8008732:	4604      	mov	r4, r0
 8008734:	f7ff fc02 	bl	8007f3c <__aeabi_ui2d>
 8008738:	4b07      	ldr	r3, [pc, #28]	@ (8008758 <__aeabi_d2ulz+0x38>)
 800873a:	2200      	movs	r2, #0
 800873c:	f7ff fc78 	bl	8008030 <__aeabi_dmul>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4630      	mov	r0, r6
 8008746:	4639      	mov	r1, r7
 8008748:	f7ff faba 	bl	8007cc0 <__aeabi_dsub>
 800874c:	f7ff ff48 	bl	80085e0 <__aeabi_d2uiz>
 8008750:	4621      	mov	r1, r4
 8008752:	bdd0      	pop	{r4, r6, r7, pc}
 8008754:	3df00000 	.word	0x3df00000
 8008758:	41f00000 	.word	0x41f00000

0800875c <__udivmoddi4>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	9d08      	ldr	r5, [sp, #32]
 8008762:	460c      	mov	r4, r1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d14e      	bne.n	8008806 <__udivmoddi4+0xaa>
 8008768:	4694      	mov	ip, r2
 800876a:	458c      	cmp	ip, r1
 800876c:	4686      	mov	lr, r0
 800876e:	fab2 f282 	clz	r2, r2
 8008772:	d962      	bls.n	800883a <__udivmoddi4+0xde>
 8008774:	b14a      	cbz	r2, 800878a <__udivmoddi4+0x2e>
 8008776:	f1c2 0320 	rsb	r3, r2, #32
 800877a:	4091      	lsls	r1, r2
 800877c:	fa20 f303 	lsr.w	r3, r0, r3
 8008780:	fa0c fc02 	lsl.w	ip, ip, r2
 8008784:	4319      	orrs	r1, r3
 8008786:	fa00 fe02 	lsl.w	lr, r0, r2
 800878a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800878e:	fa1f f68c 	uxth.w	r6, ip
 8008792:	fbb1 f4f7 	udiv	r4, r1, r7
 8008796:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800879a:	fb07 1114 	mls	r1, r7, r4, r1
 800879e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087a2:	fb04 f106 	mul.w	r1, r4, r6
 80087a6:	4299      	cmp	r1, r3
 80087a8:	d90a      	bls.n	80087c0 <__udivmoddi4+0x64>
 80087aa:	eb1c 0303 	adds.w	r3, ip, r3
 80087ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80087b2:	f080 8112 	bcs.w	80089da <__udivmoddi4+0x27e>
 80087b6:	4299      	cmp	r1, r3
 80087b8:	f240 810f 	bls.w	80089da <__udivmoddi4+0x27e>
 80087bc:	3c02      	subs	r4, #2
 80087be:	4463      	add	r3, ip
 80087c0:	1a59      	subs	r1, r3, r1
 80087c2:	fa1f f38e 	uxth.w	r3, lr
 80087c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80087ca:	fb07 1110 	mls	r1, r7, r0, r1
 80087ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087d2:	fb00 f606 	mul.w	r6, r0, r6
 80087d6:	429e      	cmp	r6, r3
 80087d8:	d90a      	bls.n	80087f0 <__udivmoddi4+0x94>
 80087da:	eb1c 0303 	adds.w	r3, ip, r3
 80087de:	f100 31ff 	add.w	r1, r0, #4294967295
 80087e2:	f080 80fc 	bcs.w	80089de <__udivmoddi4+0x282>
 80087e6:	429e      	cmp	r6, r3
 80087e8:	f240 80f9 	bls.w	80089de <__udivmoddi4+0x282>
 80087ec:	4463      	add	r3, ip
 80087ee:	3802      	subs	r0, #2
 80087f0:	1b9b      	subs	r3, r3, r6
 80087f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80087f6:	2100      	movs	r1, #0
 80087f8:	b11d      	cbz	r5, 8008802 <__udivmoddi4+0xa6>
 80087fa:	40d3      	lsrs	r3, r2
 80087fc:	2200      	movs	r2, #0
 80087fe:	e9c5 3200 	strd	r3, r2, [r5]
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	428b      	cmp	r3, r1
 8008808:	d905      	bls.n	8008816 <__udivmoddi4+0xba>
 800880a:	b10d      	cbz	r5, 8008810 <__udivmoddi4+0xb4>
 800880c:	e9c5 0100 	strd	r0, r1, [r5]
 8008810:	2100      	movs	r1, #0
 8008812:	4608      	mov	r0, r1
 8008814:	e7f5      	b.n	8008802 <__udivmoddi4+0xa6>
 8008816:	fab3 f183 	clz	r1, r3
 800881a:	2900      	cmp	r1, #0
 800881c:	d146      	bne.n	80088ac <__udivmoddi4+0x150>
 800881e:	42a3      	cmp	r3, r4
 8008820:	d302      	bcc.n	8008828 <__udivmoddi4+0xcc>
 8008822:	4290      	cmp	r0, r2
 8008824:	f0c0 80f0 	bcc.w	8008a08 <__udivmoddi4+0x2ac>
 8008828:	1a86      	subs	r6, r0, r2
 800882a:	eb64 0303 	sbc.w	r3, r4, r3
 800882e:	2001      	movs	r0, #1
 8008830:	2d00      	cmp	r5, #0
 8008832:	d0e6      	beq.n	8008802 <__udivmoddi4+0xa6>
 8008834:	e9c5 6300 	strd	r6, r3, [r5]
 8008838:	e7e3      	b.n	8008802 <__udivmoddi4+0xa6>
 800883a:	2a00      	cmp	r2, #0
 800883c:	f040 8090 	bne.w	8008960 <__udivmoddi4+0x204>
 8008840:	eba1 040c 	sub.w	r4, r1, ip
 8008844:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008848:	fa1f f78c 	uxth.w	r7, ip
 800884c:	2101      	movs	r1, #1
 800884e:	fbb4 f6f8 	udiv	r6, r4, r8
 8008852:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008856:	fb08 4416 	mls	r4, r8, r6, r4
 800885a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800885e:	fb07 f006 	mul.w	r0, r7, r6
 8008862:	4298      	cmp	r0, r3
 8008864:	d908      	bls.n	8008878 <__udivmoddi4+0x11c>
 8008866:	eb1c 0303 	adds.w	r3, ip, r3
 800886a:	f106 34ff 	add.w	r4, r6, #4294967295
 800886e:	d202      	bcs.n	8008876 <__udivmoddi4+0x11a>
 8008870:	4298      	cmp	r0, r3
 8008872:	f200 80cd 	bhi.w	8008a10 <__udivmoddi4+0x2b4>
 8008876:	4626      	mov	r6, r4
 8008878:	1a1c      	subs	r4, r3, r0
 800887a:	fa1f f38e 	uxth.w	r3, lr
 800887e:	fbb4 f0f8 	udiv	r0, r4, r8
 8008882:	fb08 4410 	mls	r4, r8, r0, r4
 8008886:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800888a:	fb00 f707 	mul.w	r7, r0, r7
 800888e:	429f      	cmp	r7, r3
 8008890:	d908      	bls.n	80088a4 <__udivmoddi4+0x148>
 8008892:	eb1c 0303 	adds.w	r3, ip, r3
 8008896:	f100 34ff 	add.w	r4, r0, #4294967295
 800889a:	d202      	bcs.n	80088a2 <__udivmoddi4+0x146>
 800889c:	429f      	cmp	r7, r3
 800889e:	f200 80b0 	bhi.w	8008a02 <__udivmoddi4+0x2a6>
 80088a2:	4620      	mov	r0, r4
 80088a4:	1bdb      	subs	r3, r3, r7
 80088a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80088aa:	e7a5      	b.n	80087f8 <__udivmoddi4+0x9c>
 80088ac:	f1c1 0620 	rsb	r6, r1, #32
 80088b0:	408b      	lsls	r3, r1
 80088b2:	fa22 f706 	lsr.w	r7, r2, r6
 80088b6:	431f      	orrs	r7, r3
 80088b8:	fa20 fc06 	lsr.w	ip, r0, r6
 80088bc:	fa04 f301 	lsl.w	r3, r4, r1
 80088c0:	ea43 030c 	orr.w	r3, r3, ip
 80088c4:	40f4      	lsrs	r4, r6
 80088c6:	fa00 f801 	lsl.w	r8, r0, r1
 80088ca:	0c38      	lsrs	r0, r7, #16
 80088cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80088d0:	fbb4 fef0 	udiv	lr, r4, r0
 80088d4:	fa1f fc87 	uxth.w	ip, r7
 80088d8:	fb00 441e 	mls	r4, r0, lr, r4
 80088dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80088e0:	fb0e f90c 	mul.w	r9, lr, ip
 80088e4:	45a1      	cmp	r9, r4
 80088e6:	fa02 f201 	lsl.w	r2, r2, r1
 80088ea:	d90a      	bls.n	8008902 <__udivmoddi4+0x1a6>
 80088ec:	193c      	adds	r4, r7, r4
 80088ee:	f10e 3aff 	add.w	sl, lr, #4294967295
 80088f2:	f080 8084 	bcs.w	80089fe <__udivmoddi4+0x2a2>
 80088f6:	45a1      	cmp	r9, r4
 80088f8:	f240 8081 	bls.w	80089fe <__udivmoddi4+0x2a2>
 80088fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8008900:	443c      	add	r4, r7
 8008902:	eba4 0409 	sub.w	r4, r4, r9
 8008906:	fa1f f983 	uxth.w	r9, r3
 800890a:	fbb4 f3f0 	udiv	r3, r4, r0
 800890e:	fb00 4413 	mls	r4, r0, r3, r4
 8008912:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008916:	fb03 fc0c 	mul.w	ip, r3, ip
 800891a:	45a4      	cmp	ip, r4
 800891c:	d907      	bls.n	800892e <__udivmoddi4+0x1d2>
 800891e:	193c      	adds	r4, r7, r4
 8008920:	f103 30ff 	add.w	r0, r3, #4294967295
 8008924:	d267      	bcs.n	80089f6 <__udivmoddi4+0x29a>
 8008926:	45a4      	cmp	ip, r4
 8008928:	d965      	bls.n	80089f6 <__udivmoddi4+0x29a>
 800892a:	3b02      	subs	r3, #2
 800892c:	443c      	add	r4, r7
 800892e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008932:	fba0 9302 	umull	r9, r3, r0, r2
 8008936:	eba4 040c 	sub.w	r4, r4, ip
 800893a:	429c      	cmp	r4, r3
 800893c:	46ce      	mov	lr, r9
 800893e:	469c      	mov	ip, r3
 8008940:	d351      	bcc.n	80089e6 <__udivmoddi4+0x28a>
 8008942:	d04e      	beq.n	80089e2 <__udivmoddi4+0x286>
 8008944:	b155      	cbz	r5, 800895c <__udivmoddi4+0x200>
 8008946:	ebb8 030e 	subs.w	r3, r8, lr
 800894a:	eb64 040c 	sbc.w	r4, r4, ip
 800894e:	fa04 f606 	lsl.w	r6, r4, r6
 8008952:	40cb      	lsrs	r3, r1
 8008954:	431e      	orrs	r6, r3
 8008956:	40cc      	lsrs	r4, r1
 8008958:	e9c5 6400 	strd	r6, r4, [r5]
 800895c:	2100      	movs	r1, #0
 800895e:	e750      	b.n	8008802 <__udivmoddi4+0xa6>
 8008960:	f1c2 0320 	rsb	r3, r2, #32
 8008964:	fa20 f103 	lsr.w	r1, r0, r3
 8008968:	fa0c fc02 	lsl.w	ip, ip, r2
 800896c:	fa24 f303 	lsr.w	r3, r4, r3
 8008970:	4094      	lsls	r4, r2
 8008972:	430c      	orrs	r4, r1
 8008974:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008978:	fa00 fe02 	lsl.w	lr, r0, r2
 800897c:	fa1f f78c 	uxth.w	r7, ip
 8008980:	fbb3 f0f8 	udiv	r0, r3, r8
 8008984:	fb08 3110 	mls	r1, r8, r0, r3
 8008988:	0c23      	lsrs	r3, r4, #16
 800898a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800898e:	fb00 f107 	mul.w	r1, r0, r7
 8008992:	4299      	cmp	r1, r3
 8008994:	d908      	bls.n	80089a8 <__udivmoddi4+0x24c>
 8008996:	eb1c 0303 	adds.w	r3, ip, r3
 800899a:	f100 36ff 	add.w	r6, r0, #4294967295
 800899e:	d22c      	bcs.n	80089fa <__udivmoddi4+0x29e>
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d92a      	bls.n	80089fa <__udivmoddi4+0x29e>
 80089a4:	3802      	subs	r0, #2
 80089a6:	4463      	add	r3, ip
 80089a8:	1a5b      	subs	r3, r3, r1
 80089aa:	b2a4      	uxth	r4, r4
 80089ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80089b0:	fb08 3311 	mls	r3, r8, r1, r3
 80089b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80089b8:	fb01 f307 	mul.w	r3, r1, r7
 80089bc:	42a3      	cmp	r3, r4
 80089be:	d908      	bls.n	80089d2 <__udivmoddi4+0x276>
 80089c0:	eb1c 0404 	adds.w	r4, ip, r4
 80089c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80089c8:	d213      	bcs.n	80089f2 <__udivmoddi4+0x296>
 80089ca:	42a3      	cmp	r3, r4
 80089cc:	d911      	bls.n	80089f2 <__udivmoddi4+0x296>
 80089ce:	3902      	subs	r1, #2
 80089d0:	4464      	add	r4, ip
 80089d2:	1ae4      	subs	r4, r4, r3
 80089d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089d8:	e739      	b.n	800884e <__udivmoddi4+0xf2>
 80089da:	4604      	mov	r4, r0
 80089dc:	e6f0      	b.n	80087c0 <__udivmoddi4+0x64>
 80089de:	4608      	mov	r0, r1
 80089e0:	e706      	b.n	80087f0 <__udivmoddi4+0x94>
 80089e2:	45c8      	cmp	r8, r9
 80089e4:	d2ae      	bcs.n	8008944 <__udivmoddi4+0x1e8>
 80089e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80089ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80089ee:	3801      	subs	r0, #1
 80089f0:	e7a8      	b.n	8008944 <__udivmoddi4+0x1e8>
 80089f2:	4631      	mov	r1, r6
 80089f4:	e7ed      	b.n	80089d2 <__udivmoddi4+0x276>
 80089f6:	4603      	mov	r3, r0
 80089f8:	e799      	b.n	800892e <__udivmoddi4+0x1d2>
 80089fa:	4630      	mov	r0, r6
 80089fc:	e7d4      	b.n	80089a8 <__udivmoddi4+0x24c>
 80089fe:	46d6      	mov	lr, sl
 8008a00:	e77f      	b.n	8008902 <__udivmoddi4+0x1a6>
 8008a02:	4463      	add	r3, ip
 8008a04:	3802      	subs	r0, #2
 8008a06:	e74d      	b.n	80088a4 <__udivmoddi4+0x148>
 8008a08:	4606      	mov	r6, r0
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	e70f      	b.n	8008830 <__udivmoddi4+0xd4>
 8008a10:	3e02      	subs	r6, #2
 8008a12:	4463      	add	r3, ip
 8008a14:	e730      	b.n	8008878 <__udivmoddi4+0x11c>
 8008a16:	bf00      	nop

08008a18 <__aeabi_idiv0>:
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8008a24:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <LL_C2_PWR_SetPowerMode+0x28>)
 8008a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a2a:	f023 0207 	bic.w	r2, r3, #7
 8008a2e:	4905      	ldr	r1, [pc, #20]	@ (8008a44 <LL_C2_PWR_SetPowerMode+0x28>)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	58000400 	.word	0x58000400

08008a48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008a50:	4b06      	ldr	r3, [pc, #24]	@ (8008a6c <LL_EXTI_EnableIT_32_63+0x24>)
 8008a52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008a56:	4905      	ldr	r1, [pc, #20]	@ (8008a6c <LL_EXTI_EnableIT_32_63+0x24>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	58000800 	.word	0x58000800

08008a70 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8008a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008aa8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8008a7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8008a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a8a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	021b      	lsls	r3, r3, #8
 8008a92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	cafecafe 	.word	0xcafecafe

08008aac <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 8008ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008aba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008abe:	6013      	str	r3, [r2, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8008ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008adc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	608b      	str	r3, [r1, #8]
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008af8:	4b05      	ldr	r3, [pc, #20]	@ (8008b10 <LL_LPM_EnableSleep+0x1c>)
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	4a04      	ldr	r2, [pc, #16]	@ (8008b10 <LL_LPM_EnableSleep+0x1c>)
 8008afe:	f023 0304 	bic.w	r3, r3, #4
 8008b02:	6113      	str	r3, [r2, #16]
}
 8008b04:	bf00      	nop
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	e000ed00 	.word	0xe000ed00

08008b14 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	22ff      	movs	r2, #255	@ 0xff
 8008b20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	22ca      	movs	r2, #202	@ 0xca
 8008b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2253      	movs	r2, #83	@ 0x53
 8008b40:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f023 0207 	bic.w	r2, r3, #7
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	609a      	str	r2, [r3, #8]
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008b78:	4b04      	ldr	r3, [pc, #16]	@ (8008b8c <MX_APPE_Config+0x18>)
 8008b7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008b7e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8008b80:	f000 f824 	bl	8008bcc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8008b84:	f000 f829 	bl	8008bda <Config_HSE>

  return;
 8008b88:	bf00      	nop
}
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	58004000 	.word	0x58004000

08008b90 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8008b94:	f000 f835 	bl	8008c02 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8008b98:	f000 f84e 	bl	8008c38 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8008b9c:	4903      	ldr	r1, [pc, #12]	@ (8008bac <MX_APPE_Init+0x1c>)
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f000 f9b0 	bl	8008f04 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8008ba4:	f000 f860 	bl	8008c68 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8008ba8:	bf00      	nop
}
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	200002bc 	.word	0x200002bc

08008bb0 <Init_Smps>:

void Init_Smps(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8008bb4:	bf00      	nop
}
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <Init_Exti>:

void Init_Exti(void)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8008bc2:	2050      	movs	r0, #80	@ 0x50
 8008bc4:	f7ff ff40 	bl	8008a48 <LL_EXTI_EnableIT_32_63>

  return;
 8008bc8:	bf00      	nop
}
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8008bd0:	bf00      	nop
}
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8008be0:	2000      	movs	r0, #0
 8008be2:	f007 fceb 	bl	80105bc <OTP_Read>
 8008be6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	799b      	ldrb	r3, [r3, #6]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff ff3c 	bl	8008a70 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
}
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <System_Init>:

static void System_Init(void)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	af00      	add	r7, sp, #0
  Init_Smps();
 8008c06:	f7ff ffd3 	bl	8008bb0 <Init_Smps>

  Init_Exti();
 8008c0a:	f7ff ffd8 	bl	8008bbe <Init_Exti>

  Init_Rtc();
 8008c0e:	f000 f803 	bl	8008c18 <Init_Rtc>

  return;
 8008c12:	bf00      	nop
}
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <Init_Rtc>:

static void Init_Rtc(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8008c1c:	4805      	ldr	r0, [pc, #20]	@ (8008c34 <Init_Rtc+0x1c>)
 8008c1e:	f7ff ff86 	bl	8008b2e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8008c22:	2100      	movs	r1, #0
 8008c24:	4803      	ldr	r0, [pc, #12]	@ (8008c34 <Init_Rtc+0x1c>)
 8008c26:	f7ff ff92 	bl	8008b4e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8008c2a:	4802      	ldr	r0, [pc, #8]	@ (8008c34 <Init_Rtc+0x1c>)
 8008c2c:	f7ff ff72 	bl	8008b14 <LL_RTC_EnableWriteProtection>

  return;
 8008c30:	bf00      	nop
}
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	40002800 	.word	0x40002800

08008c38 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 8008c3c:	f7ff ff36 	bl	8008aac <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8008c40:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008c44:	f7ff ff41 	bl	8008aca <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8008c48:	f00c f882 	bl	8014d50 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8008c4c:	2004      	movs	r0, #4
 8008c4e:	f7ff fee5 	bl	8008a1c <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8008c52:	2101      	movs	r1, #1
 8008c54:	2001      	movs	r0, #1
 8008c56:	f00c f8bd 	bl	8014dd4 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	f00c f889 	bl	8014d74 <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8008c62:	bf00      	nop
}
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8008c6e:	f007 ff8b 	bl	8010b88 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8008c72:	4a14      	ldr	r2, [pc, #80]	@ (8008cc4 <appe_Tl_Init+0x5c>)
 8008c74:	2100      	movs	r1, #0
 8008c76:	2008      	movs	r0, #8
 8008c78:	f00c f9d8 	bl	801502c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8008c7c:	4b12      	ldr	r3, [pc, #72]	@ (8008cc8 <appe_Tl_Init+0x60>)
 8008c7e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8008c80:	4b12      	ldr	r3, [pc, #72]	@ (8008ccc <appe_Tl_Init+0x64>)
 8008c82:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8008c84:	463b      	mov	r3, r7
 8008c86:	4619      	mov	r1, r3
 8008c88:	4811      	ldr	r0, [pc, #68]	@ (8008cd0 <appe_Tl_Init+0x68>)
 8008c8a:	f007 fd81 	bl	8010790 <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 8008c8e:	f107 0308 	add.w	r3, r7, #8
 8008c92:	2218      	movs	r2, #24
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f00c fe92 	bl	80159c0 <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd4 <appe_Tl_Init+0x6c>)
 8008ca2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <appe_Tl_Init+0x70>)
 8008ca6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8008ca8:	f240 533c 	movw	r3, #1340	@ 0x53c
 8008cac:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f008 f8c4 	bl	8010e40 <TL_MM_Init>

  TL_Enable();
 8008cb8:	f007 ff60 	bl	8010b7c <TL_Enable>

  return;
 8008cbc:	bf00      	nop
}
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	080107c9 	.word	0x080107c9
 8008cc8:	20030620 	.word	0x20030620
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008cf3 	.word	0x08008cf3
 8008cd4:	2003072c 	.word	0x2003072c
 8008cd8:	200300e4 	.word	0x200300e4

08008cdc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8008ce6:	bf00      	nop
}
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	330b      	adds	r3, #11
 8008d00:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 8008d0c:	d004      	beq.n	8008d18 <APPE_SysUserEvtRx+0x26>
 8008d0e:	f249 2201 	movw	r2, #37377	@ 0x9201
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d003      	beq.n	8008d1e <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8008d16:	e008      	b.n	8008d2a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8008d18:	f000 f844 	bl	8008da4 <APPE_SysEvtReadyProcessing>
         break;
 8008d1c:	e005      	b.n	8008d2a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	789b      	ldrb	r3, [r3, #2]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f806 	bl	8008d34 <APPE_SysEvtError>
         break;
 8008d28:	bf00      	nop
  }
  return;
 8008d2a:	bf00      	nop
}
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	2bc8      	cmp	r3, #200	@ 0xc8
 8008d42:	d10f      	bne.n	8008d64 <APPE_SysEvtError+0x30>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8008d44:	4812      	ldr	r0, [pc, #72]	@ (8008d90 <APPE_SysEvtError+0x5c>)
 8008d46:	f007 fc11 	bl	801056c <DbgTraceGetFileName>
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	f240 13bd 	movw	r3, #445	@ 0x1bd
 8008d50:	4a10      	ldr	r2, [pc, #64]	@ (8008d94 <APPE_SysEvtError+0x60>)
 8008d52:	4811      	ldr	r0, [pc, #68]	@ (8008d98 <APPE_SysEvtError+0x64>)
 8008d54:	f00c fc18 	bl	8015588 <iprintf>
 8008d58:	4a10      	ldr	r2, [pc, #64]	@ (8008d9c <APPE_SysEvtError+0x68>)
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f000 ffb3 	bl	8009cc8 <logApplication>
       break;
 8008d62:	e010      	b.n	8008d86 <APPE_SysEvtError+0x52>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8008d64:	480a      	ldr	r0, [pc, #40]	@ (8008d90 <APPE_SysEvtError+0x5c>)
 8008d66:	f007 fc01 	bl	801056c <DbgTraceGetFileName>
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8008d70:	4a08      	ldr	r2, [pc, #32]	@ (8008d94 <APPE_SysEvtError+0x60>)
 8008d72:	4809      	ldr	r0, [pc, #36]	@ (8008d98 <APPE_SysEvtError+0x64>)
 8008d74:	f00c fc08 	bl	8015588 <iprintf>
 8008d78:	79fb      	ldrb	r3, [r7, #7]
 8008d7a:	4a09      	ldr	r2, [pc, #36]	@ (8008da0 <APPE_SysEvtError+0x6c>)
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f000 ffa2 	bl	8009cc8 <logApplication>
       break;
 8008d84:	bf00      	nop
  }
  return;
 8008d86:	bf00      	nop
}
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	08017690 	.word	0x08017690
 8008d94:	08018170 	.word	0x08018170
 8008d98:	080176a8 	.word	0x080176a8
 8008d9c:	080176b8 	.word	0x080176b8
 8008da0:	080176d8 	.word	0x080176d8

08008da4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8008da8:	f008 f8be 	bl	8010f28 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 8008dac:	f00a ff34 	bl	8013c18 <APP_ZIGBEE_Init>
  return;
 8008db0:	bf00      	nop
}
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008dbc:	f001 fc7c 	bl	800a6b8 <HAL_GetTick>
 8008dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d00a      	beq.n	8008de4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8008dce:	f001 fc8b 	bl	800a6e8 <HAL_GetTickFreq>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4413      	add	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ddc:	e002      	b.n	8008de4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8008dde:	f7ff fe89 	bl	8008af4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8008de2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8008de4:	f001 fc68 	bl	800a6b8 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d8f4      	bhi.n	8008dde <HAL_Delay+0x2a>
  }
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008e02:	f04f 30ff 	mov.w	r0, #4294967295
 8008e06:	f00c f815 	bl	8014e34 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8008e12:	bf00      	nop
}
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d003      	beq.n	8008e34 <UTIL_SEQ_EvtIdle+0x18>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d004      	beq.n	8008e3c <UTIL_SEQ_EvtIdle+0x20>
 8008e32:	e00a      	b.n	8008e4a <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8008e34:	2002      	movs	r0, #2
 8008e36:	f00b fffd 	bl	8014e34 <UTIL_SEQ_Run>
    break;
 8008e3a:	e00b      	b.n	8008e54 <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8008e3c:	2004      	movs	r0, #4
 8008e3e:	f00c f943 	bl	80150c8 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8008e42:	2003      	movs	r0, #3
 8008e44:	f00b fff6 	bl	8014e34 <UTIL_SEQ_Run>
    break;
 8008e48:	e004      	b.n	8008e54 <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8008e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4e:	f00b fff1 	bl	8014e34 <UTIL_SEQ_Run>
    break;
 8008e52:	bf00      	nop
  }
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8008e64:	2100      	movs	r1, #0
 8008e66:	2008      	movs	r0, #8
 8008e68:	f00c f902 	bl	8015070 <UTIL_SEQ_SetTask>
  return;
 8008e6c:	bf00      	nop
}
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f00c f923 	bl	80150c8 <UTIL_SEQ_SetEvt>
  return;
 8008e82:	bf00      	nop
}
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8008e92:	2001      	movs	r0, #1
 8008e94:	f00c f938 	bl	8015108 <UTIL_SEQ_WaitEvt>
  return;
 8008e98:	bf00      	nop
}
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f008 f805 	bl	8010eb8 <TL_MM_EvtDone>
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <LL_EXTI_EnableIT_0_31>:
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <LL_EXTI_EnableIT_0_31+0x24>)
 8008ec2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008ec6:	4905      	ldr	r1, [pc, #20]	@ (8008edc <LL_EXTI_EnableIT_0_31+0x24>)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	58000800 	.word	0x58000800

08008ee0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008ee8:	4b05      	ldr	r3, [pc, #20]	@ (8008f00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	4904      	ldr	r1, [pc, #16]	@ (8008f00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	600b      	str	r3, [r1, #0]

}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	58000800 	.word	0x58000800

08008f04 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8008f10:	4b5e      	ldr	r3, [pc, #376]	@ (800908c <HW_TS_Init+0x188>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	22ca      	movs	r2, #202	@ 0xca
 8008f16:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f18:	4b5c      	ldr	r3, [pc, #368]	@ (800908c <HW_TS_Init+0x188>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2253      	movs	r2, #83	@ 0x53
 8008f1e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f20:	4b5b      	ldr	r3, [pc, #364]	@ (8009090 <HW_TS_Init+0x18c>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	4a5a      	ldr	r2, [pc, #360]	@ (8009090 <HW_TS_Init+0x18c>)
 8008f26:	f043 0320 	orr.w	r3, r3, #32
 8008f2a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8008f2c:	4b58      	ldr	r3, [pc, #352]	@ (8009090 <HW_TS_Init+0x18c>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f1c3 0304 	rsb	r3, r3, #4
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	4b55      	ldr	r3, [pc, #340]	@ (8009094 <HW_TS_Init+0x190>)
 8008f40:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8008f42:	4b53      	ldr	r3, [pc, #332]	@ (8009090 <HW_TS_Init+0x18c>)
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f4a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8008f4e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	fa92 f2a2 	rbit	r2, r2
 8008f56:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	d101      	bne.n	8008f66 <HW_TS_Init+0x62>
  {
    return 32U;
 8008f62:	2220      	movs	r2, #32
 8008f64:	e003      	b.n	8008f6e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	fab2 f282 	clz	r2, r2
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	40d3      	lsrs	r3, r2
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	3301      	adds	r3, #1
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4b48      	ldr	r3, [pc, #288]	@ (8009098 <HW_TS_Init+0x194>)
 8008f78:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8008f7a:	4b45      	ldr	r3, [pc, #276]	@ (8009090 <HW_TS_Init+0x18c>)
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	3301      	adds	r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	4b44      	ldr	r3, [pc, #272]	@ (800909c <HW_TS_Init+0x198>)
 8008f8c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8008f8e:	4b43      	ldr	r3, [pc, #268]	@ (800909c <HW_TS_Init+0x198>)
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	4a40      	ldr	r2, [pc, #256]	@ (8009098 <HW_TS_Init+0x194>)
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	fb02 f303 	mul.w	r3, r2, r3
 8008f9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8008fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8009094 <HW_TS_Init+0x190>)
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	40d3      	lsrs	r3, r2
 8008fa6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d904      	bls.n	8008fbc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8008fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80090a0 <HW_TS_Init+0x19c>)
 8008fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	e003      	b.n	8008fc4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	4b37      	ldr	r3, [pc, #220]	@ (80090a0 <HW_TS_Init+0x19c>)
 8008fc2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8008fc4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008fc8:	f7ff ff8a 	bl	8008ee0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8008fcc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008fd0:	f7ff ff72 	bl	8008eb8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d13d      	bne.n	8009056 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8008fda:	4b32      	ldr	r3, [pc, #200]	@ (80090a4 <HW_TS_Init+0x1a0>)
 8008fdc:	2201      	movs	r2, #1
 8008fde:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8008fe0:	4b31      	ldr	r3, [pc, #196]	@ (80090a8 <HW_TS_Init+0x1a4>)
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	e00c      	b.n	8009008 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8008fee:	7ffa      	ldrb	r2, [r7, #31]
 8008ff0:	492e      	ldr	r1, [pc, #184]	@ (80090ac <HW_TS_Init+0x1a8>)
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4413      	add	r3, r2
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	440b      	add	r3, r1
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8009002:	7ffb      	ldrb	r3, [r7, #31]
 8009004:	3301      	adds	r3, #1
 8009006:	77fb      	strb	r3, [r7, #31]
 8009008:	7ffb      	ldrb	r3, [r7, #31]
 800900a:	2b05      	cmp	r3, #5
 800900c:	d9ef      	bls.n	8008fee <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800900e:	4b28      	ldr	r3, [pc, #160]	@ (80090b0 <HW_TS_Init+0x1ac>)
 8009010:	2206      	movs	r2, #6
 8009012:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8009014:	4b1d      	ldr	r3, [pc, #116]	@ (800908c <HW_TS_Init+0x188>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689a      	ldr	r2, [r3, #8]
 800901a:	4b1c      	ldr	r3, [pc, #112]	@ (800908c <HW_TS_Init+0x188>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009022:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8009024:	4b19      	ldr	r3, [pc, #100]	@ (800908c <HW_TS_Init+0x188>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	b2da      	uxtb	r2, r3
 800902c:	4b17      	ldr	r3, [pc, #92]	@ (800908c <HW_TS_Init+0x188>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009034:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8009036:	4b1f      	ldr	r3, [pc, #124]	@ (80090b4 <HW_TS_Init+0x1b0>)
 8009038:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800903c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800903e:	2003      	movs	r0, #3
 8009040:	f002 fcf9 	bl	800ba36 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8009044:	4b11      	ldr	r3, [pc, #68]	@ (800908c <HW_TS_Init+0x188>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	4b10      	ldr	r3, [pc, #64]	@ (800908c <HW_TS_Init+0x188>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	e009      	b.n	800906a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <HW_TS_Init+0x188>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8009064:	2003      	movs	r0, #3
 8009066:	f002 fcd8 	bl	800ba1a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800906a:	4b08      	ldr	r3, [pc, #32]	@ (800908c <HW_TS_Init+0x188>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	22ff      	movs	r2, #255	@ 0xff
 8009070:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8009072:	2200      	movs	r2, #0
 8009074:	2103      	movs	r1, #3
 8009076:	2003      	movs	r0, #3
 8009078:	f002 fc9b 	bl	800b9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800907c:	2003      	movs	r0, #3
 800907e:	f002 fcb2 	bl	800b9e6 <HAL_NVIC_EnableIRQ>

  return;
 8009082:	bf00      	nop
}
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200002bc 	.word	0x200002bc
 8009090:	40002800 	.word	0x40002800
 8009094:	200001c1 	.word	0x200001c1
 8009098:	200001c2 	.word	0x200001c2
 800909c:	200001c4 	.word	0x200001c4
 80090a0:	200001c6 	.word	0x200001c6
 80090a4:	200001c0 	.word	0x200001c0
 80090a8:	200001bc 	.word	0x200001bc
 80090ac:	20000128 	.word	0x20000128
 80090b0:	200001b8 	.word	0x200001b8
 80090b4:	58000800 	.word	0x58000800

080090b8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80090c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80090d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4013      	ands	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define HAL_SMALL_WAIT  50
// Define serial output function using UART2
int __io_putchar(int ch)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 80090f4:	1d39      	adds	r1, r7, #4
 80090f6:	2332      	movs	r3, #50	@ 0x32
 80090f8:	2201      	movs	r2, #1
 80090fa:	4804      	ldr	r0, [pc, #16]	@ (800910c <__io_putchar+0x20>)
 80090fc:	f006 f89b 	bl	800f236 <HAL_UART_Transmit>
    return 1;
 8009100:	2301      	movs	r3, #1
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	200003dc 	.word	0x200003dc

08009110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009114:	f001 fa62 	bl	800a5dc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8009118:	f7ff fd2c 	bl	8008b74 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800911c:	f000 f856 	bl	80091cc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8009120:	f000 f8c4 	bl	80092ac <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8009124:	f000 f986 	bl	8009434 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009128:	f000 faf4 	bl	8009714 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800912c:	f000 faa6 	bl	800967c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8009130:	f000 f99c 	bl	800946c <MX_RTC_Init>
  MX_I2C1_Init();
 8009134:	f000 f93e 	bl	80093b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8009138:	f000 f9cc 	bl	80094d4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800913c:	f000 fa08 	bl	8009550 <MX_TIM2_Init>
  MX_TIM16_Init();
 8009140:	f000 fa76 	bl	8009630 <MX_TIM16_Init>
  MX_ADC1_Init();
 8009144:	f000 f8d2 	bl	80092ec <MX_ADC1_Init>
  MX_RF_Init();
 8009148:	f000 f988 	bl	800945c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 800914c:	4b17      	ldr	r3, [pc, #92]	@ (80091ac <main+0x9c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6898      	ldr	r0, [r3, #8]
 8009152:	2300      	movs	r3, #0
 8009154:	2202      	movs	r2, #2
 8009156:	2100      	movs	r1, #0
 8009158:	f00c fa86 	bl	8015668 <setvbuf>
  printf("\n\n\nNew start\n");
 800915c:	4814      	ldr	r0, [pc, #80]	@ (80091b0 <main+0xa0>)
 800915e:	f00c fa7b 	bl	8015658 <puts>

  // init DHT11
  init_dht11(&dht11, &htim16, button_1_GPIO_Port, button_1_Pin);
 8009162:	2340      	movs	r3, #64	@ 0x40
 8009164:	4a13      	ldr	r2, [pc, #76]	@ (80091b4 <main+0xa4>)
 8009166:	4914      	ldr	r1, [pc, #80]	@ (80091b8 <main+0xa8>)
 8009168:	4814      	ldr	r0, [pc, #80]	@ (80091bc <main+0xac>)
 800916a:	f000 ff0e 	bl	8009f8a <init_dht11>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800916e:	f7ff fd0f 	bl	8008b90 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8009172:	f7ff fe44 	bl	8008dfe <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 8009176:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800917a:	f7ff fe1b 	bl	8008db4 <HAL_Delay>
//	readDHT11(&dht11);
//	printf("Temperature: %d, Humidity: %d\n", dht11.temperature, dht11.humidty);

  HAL_ADC_Start(&hadc1);
 800917e:	4810      	ldr	r0, [pc, #64]	@ (80091c0 <main+0xb0>)
 8009180:	f001 fdd2 	bl	800ad28 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8009184:	f04f 31ff 	mov.w	r1, #4294967295
 8009188:	480d      	ldr	r0, [pc, #52]	@ (80091c0 <main+0xb0>)
 800918a:	f001 fe21 	bl	800add0 <HAL_ADC_PollForConversion>
  value_adc = HAL_ADC_GetValue(&hadc1);
 800918e:	480c      	ldr	r0, [pc, #48]	@ (80091c0 <main+0xb0>)
 8009190:	f001 feab 	bl	800aeea <HAL_ADC_GetValue>
 8009194:	4603      	mov	r3, r0
 8009196:	4a0b      	ldr	r2, [pc, #44]	@ (80091c4 <main+0xb4>)
 8009198:	6013      	str	r3, [r2, #0]

	printf("ADC: %d\n", value_adc);
 800919a:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <main+0xb4>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4619      	mov	r1, r3
 80091a0:	4809      	ldr	r0, [pc, #36]	@ (80091c8 <main+0xb8>)
 80091a2:	f00c f9f1 	bl	8015588 <iprintf>
    MX_APPE_Process();
 80091a6:	bf00      	nop
 80091a8:	e7e3      	b.n	8009172 <main+0x62>
 80091aa:	bf00      	nop
 80091ac:	20000094 	.word	0x20000094
 80091b0:	080176f8 	.word	0x080176f8
 80091b4:	48000400 	.word	0x48000400
 80091b8:	20000390 	.word	0x20000390
 80091bc:	20000470 	.word	0x20000470
 80091c0:	200001c8 	.word	0x200001c8
 80091c4:	20000480 	.word	0x20000480
 80091c8:	08017708 	.word	0x08017708

080091cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b09a      	sub	sp, #104	@ 0x68
 80091d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091d2:	f107 0320 	add.w	r3, r7, #32
 80091d6:	2248      	movs	r2, #72	@ 0x48
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f00c fbf0 	bl	80159c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091e0:	1d3b      	adds	r3, r7, #4
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	605a      	str	r2, [r3, #4]
 80091e8:	609a      	str	r2, [r3, #8]
 80091ea:	60da      	str	r2, [r3, #12]
 80091ec:	611a      	str	r2, [r3, #16]
 80091ee:	615a      	str	r2, [r3, #20]
 80091f0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80091f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009200:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8009202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f023 0303 	bic.w	r3, r3, #3
 800920c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009210:	f043 0301 	orr.w	r3, r3, #1
 8009214:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009216:	4b24      	ldr	r3, [pc, #144]	@ (80092a8 <SystemClock_Config+0xdc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800921e:	4a22      	ldr	r2, [pc, #136]	@ (80092a8 <SystemClock_Config+0xdc>)
 8009220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4b20      	ldr	r3, [pc, #128]	@ (80092a8 <SystemClock_Config+0xdc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8009232:	232b      	movs	r3, #43	@ 0x2b
 8009234:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800923c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009242:	2301      	movs	r3, #1
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009246:	2340      	movs	r3, #64	@ 0x40
 8009248:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800924a:	2300      	movs	r3, #0
 800924c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800924e:	2360      	movs	r3, #96	@ 0x60
 8009250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009252:	2305      	movs	r3, #5
 8009254:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009256:	2300      	movs	r3, #0
 8009258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800925a:	f107 0320 	add.w	r3, r7, #32
 800925e:	4618      	mov	r0, r3
 8009260:	f003 fbae 	bl	800c9c0 <HAL_RCC_OscConfig>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800926a:	f000 fa9f 	bl	80097ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800926e:	236f      	movs	r3, #111	@ 0x6f
 8009270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009272:	2302      	movs	r3, #2
 8009274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800927a:	2300      	movs	r3, #0
 800927c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800927e:	2300      	movs	r3, #0
 8009280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8009286:	2300      	movs	r3, #0
 8009288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800928a:	1d3b      	adds	r3, r7, #4
 800928c:	2101      	movs	r1, #1
 800928e:	4618      	mov	r0, r3
 8009290:	f003 ff0a 	bl	800d0a8 <HAL_RCC_ClockConfig>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800929a:	f000 fa87 	bl	80097ac <Error_Handler>
  }
}
 800929e:	bf00      	nop
 80092a0:	3768      	adds	r7, #104	@ 0x68
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	58000400 	.word	0x58000400

080092ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b094      	sub	sp, #80	@ 0x50
 80092b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80092b2:	463b      	mov	r3, r7
 80092b4:	2250      	movs	r2, #80	@ 0x50
 80092b6:	2100      	movs	r1, #0
 80092b8:	4618      	mov	r0, r3
 80092ba:	f00c fb81 	bl	80159c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80092be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80092c2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80092c4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80092c8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80092ca:	2300      	movs	r3, #0
 80092cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80092ce:	2310      	movs	r3, #16
 80092d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80092d2:	463b      	mov	r3, r7
 80092d4:	4618      	mov	r0, r3
 80092d6:	f004 fb24 	bl	800d922 <HAL_RCCEx_PeriphCLKConfig>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80092e0:	f000 fa64 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80092e4:	bf00      	nop
 80092e6:	3750      	adds	r7, #80	@ 0x50
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80092f2:	463b      	mov	r3, r7
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	605a      	str	r2, [r3, #4]
 80092fa:	609a      	str	r2, [r3, #8]
 80092fc:	60da      	str	r2, [r3, #12]
 80092fe:	611a      	str	r2, [r3, #16]
 8009300:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009302:	4b29      	ldr	r3, [pc, #164]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009304:	4a29      	ldr	r2, [pc, #164]	@ (80093ac <MX_ADC1_Init+0xc0>)
 8009306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009308:	4b27      	ldr	r3, [pc, #156]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 800930a:	2200      	movs	r2, #0
 800930c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800930e:	4b26      	ldr	r3, [pc, #152]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009310:	2200      	movs	r2, #0
 8009312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009314:	4b24      	ldr	r3, [pc, #144]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009316:	2200      	movs	r2, #0
 8009318:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800931a:	4b23      	ldr	r3, [pc, #140]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 800931c:	2200      	movs	r2, #0
 800931e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009320:	4b21      	ldr	r3, [pc, #132]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009322:	2204      	movs	r2, #4
 8009324:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009326:	4b20      	ldr	r3, [pc, #128]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009328:	2200      	movs	r2, #0
 800932a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800932c:	4b1e      	ldr	r3, [pc, #120]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 800932e:	2200      	movs	r2, #0
 8009330:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8009332:	4b1d      	ldr	r3, [pc, #116]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009334:	2201      	movs	r2, #1
 8009336:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009338:	4b1b      	ldr	r3, [pc, #108]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009340:	4b19      	ldr	r3, [pc, #100]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009342:	2200      	movs	r2, #0
 8009344:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009346:	4b18      	ldr	r3, [pc, #96]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009348:	2200      	movs	r2, #0
 800934a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800934c:	4b16      	ldr	r3, [pc, #88]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009354:	4b14      	ldr	r3, [pc, #80]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009356:	2200      	movs	r2, #0
 8009358:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800935a:	4b13      	ldr	r3, [pc, #76]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009362:	4811      	ldr	r0, [pc, #68]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009364:	f001 fb94 	bl	800aa90 <HAL_ADC_Init>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800936e:	f000 fa1d 	bl	80097ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8009372:	4b0f      	ldr	r3, [pc, #60]	@ (80093b0 <MX_ADC1_Init+0xc4>)
 8009374:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009376:	2306      	movs	r3, #6
 8009378:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800937e:	237f      	movs	r3, #127	@ 0x7f
 8009380:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009382:	2304      	movs	r3, #4
 8009384:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800938a:	463b      	mov	r3, r7
 800938c:	4619      	mov	r1, r3
 800938e:	4806      	ldr	r0, [pc, #24]	@ (80093a8 <MX_ADC1_Init+0xbc>)
 8009390:	f001 fdb8 	bl	800af04 <HAL_ADC_ConfigChannel>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800939a:	f000 fa07 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800939e:	bf00      	nop
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	200001c8 	.word	0x200001c8
 80093ac:	50040000 	.word	0x50040000
 80093b0:	25b00200 	.word	0x25b00200

080093b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80093b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093ba:	4a1c      	ldr	r2, [pc, #112]	@ (800942c <MX_I2C1_Init+0x78>)
 80093bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80093be:	4b1a      	ldr	r3, [pc, #104]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009430 <MX_I2C1_Init+0x7c>)
 80093c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80093c4:	4b18      	ldr	r3, [pc, #96]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80093ca:	4b17      	ldr	r3, [pc, #92]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80093d0:	4b15      	ldr	r3, [pc, #84]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80093d6:	4b14      	ldr	r3, [pc, #80]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093d8:	2200      	movs	r2, #0
 80093da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80093dc:	4b12      	ldr	r3, [pc, #72]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093de:	2200      	movs	r2, #0
 80093e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80093e2:	4b11      	ldr	r3, [pc, #68]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80093e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80093ee:	480e      	ldr	r0, [pc, #56]	@ (8009428 <MX_I2C1_Init+0x74>)
 80093f0:	f002 fd9a 	bl	800bf28 <HAL_I2C_Init>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80093fa:	f000 f9d7 	bl	80097ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80093fe:	2100      	movs	r1, #0
 8009400:	4809      	ldr	r0, [pc, #36]	@ (8009428 <MX_I2C1_Init+0x74>)
 8009402:	f002 fe2c 	bl	800c05e <HAL_I2CEx_ConfigAnalogFilter>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800940c:	f000 f9ce 	bl	80097ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009410:	2100      	movs	r1, #0
 8009412:	4805      	ldr	r0, [pc, #20]	@ (8009428 <MX_I2C1_Init+0x74>)
 8009414:	f002 fe6e 	bl	800c0f4 <HAL_I2CEx_ConfigDigitalFilter>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800941e:	f000 f9c5 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009422:	bf00      	nop
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	2000022c 	.word	0x2000022c
 800942c:	40005400 	.word	0x40005400
 8009430:	00b07cb4 	.word	0x00b07cb4

08009434 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8009438:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <MX_IPCC_Init+0x20>)
 800943a:	4a07      	ldr	r2, [pc, #28]	@ (8009458 <MX_IPCC_Init+0x24>)
 800943c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800943e:	4805      	ldr	r0, [pc, #20]	@ (8009454 <MX_IPCC_Init+0x20>)
 8009440:	f002 fea4 	bl	800c18c <HAL_IPCC_Init>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800944a:	f000 f9af 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800944e:	bf00      	nop
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000280 	.word	0x20000280
 8009458:	58000c00 	.word	0x58000c00

0800945c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8009460:	bf00      	nop
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
	...

0800946c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009470:	4b16      	ldr	r3, [pc, #88]	@ (80094cc <MX_RTC_Init+0x60>)
 8009472:	4a17      	ldr	r2, [pc, #92]	@ (80094d0 <MX_RTC_Init+0x64>)
 8009474:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009476:	4b15      	ldr	r3, [pc, #84]	@ (80094cc <MX_RTC_Init+0x60>)
 8009478:	2200      	movs	r2, #0
 800947a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800947c:	4b13      	ldr	r3, [pc, #76]	@ (80094cc <MX_RTC_Init+0x60>)
 800947e:	220f      	movs	r2, #15
 8009480:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8009482:	4b12      	ldr	r3, [pc, #72]	@ (80094cc <MX_RTC_Init+0x60>)
 8009484:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009488:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800948a:	4b10      	ldr	r3, [pc, #64]	@ (80094cc <MX_RTC_Init+0x60>)
 800948c:	2200      	movs	r2, #0
 800948e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009490:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <MX_RTC_Init+0x60>)
 8009492:	2200      	movs	r2, #0
 8009494:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009496:	4b0d      	ldr	r3, [pc, #52]	@ (80094cc <MX_RTC_Init+0x60>)
 8009498:	2200      	movs	r2, #0
 800949a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800949c:	4b0b      	ldr	r3, [pc, #44]	@ (80094cc <MX_RTC_Init+0x60>)
 800949e:	2200      	movs	r2, #0
 80094a0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80094a2:	480a      	ldr	r0, [pc, #40]	@ (80094cc <MX_RTC_Init+0x60>)
 80094a4:	f004 fcc4 	bl	800de30 <HAL_RTC_Init>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80094ae:	f000 f97d 	bl	80097ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80094b2:	2200      	movs	r2, #0
 80094b4:	2100      	movs	r1, #0
 80094b6:	4805      	ldr	r0, [pc, #20]	@ (80094cc <MX_RTC_Init+0x60>)
 80094b8:	f004 fdba 	bl	800e030 <HAL_RTCEx_SetWakeUpTimer>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80094c2:	f000 f973 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80094c6:	bf00      	nop
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200002bc 	.word	0x200002bc
 80094d0:	40002800 	.word	0x40002800

080094d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80094d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009548 <MX_SPI1_Init+0x74>)
 80094da:	4a1c      	ldr	r2, [pc, #112]	@ (800954c <MX_SPI1_Init+0x78>)
 80094dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80094de:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <MX_SPI1_Init+0x74>)
 80094e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80094e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80094e6:	4b18      	ldr	r3, [pc, #96]	@ (8009548 <MX_SPI1_Init+0x74>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80094ec:	4b16      	ldr	r3, [pc, #88]	@ (8009548 <MX_SPI1_Init+0x74>)
 80094ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80094f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80094f4:	4b14      	ldr	r3, [pc, #80]	@ (8009548 <MX_SPI1_Init+0x74>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80094fa:	4b13      	ldr	r3, [pc, #76]	@ (8009548 <MX_SPI1_Init+0x74>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009500:	4b11      	ldr	r3, [pc, #68]	@ (8009548 <MX_SPI1_Init+0x74>)
 8009502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009506:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009508:	4b0f      	ldr	r3, [pc, #60]	@ (8009548 <MX_SPI1_Init+0x74>)
 800950a:	2200      	movs	r2, #0
 800950c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <MX_SPI1_Init+0x74>)
 8009510:	2200      	movs	r2, #0
 8009512:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009514:	4b0c      	ldr	r3, [pc, #48]	@ (8009548 <MX_SPI1_Init+0x74>)
 8009516:	2200      	movs	r2, #0
 8009518:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800951a:	4b0b      	ldr	r3, [pc, #44]	@ (8009548 <MX_SPI1_Init+0x74>)
 800951c:	2200      	movs	r2, #0
 800951e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009520:	4b09      	ldr	r3, [pc, #36]	@ (8009548 <MX_SPI1_Init+0x74>)
 8009522:	2207      	movs	r2, #7
 8009524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009526:	4b08      	ldr	r3, [pc, #32]	@ (8009548 <MX_SPI1_Init+0x74>)
 8009528:	2200      	movs	r2, #0
 800952a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800952c:	4b06      	ldr	r3, [pc, #24]	@ (8009548 <MX_SPI1_Init+0x74>)
 800952e:	2208      	movs	r2, #8
 8009530:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009532:	4805      	ldr	r0, [pc, #20]	@ (8009548 <MX_SPI1_Init+0x74>)
 8009534:	f004 fe17 	bl	800e166 <HAL_SPI_Init>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800953e:	f000 f935 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009542:	bf00      	nop
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	200002e0 	.word	0x200002e0
 800954c:	40013000 	.word	0x40013000

08009550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	@ 0x28
 8009554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009556:	f107 031c 	add.w	r3, r7, #28
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	605a      	str	r2, [r3, #4]
 8009560:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009562:	463b      	mov	r3, r7
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	605a      	str	r2, [r3, #4]
 800956a:	609a      	str	r2, [r3, #8]
 800956c:	60da      	str	r2, [r3, #12]
 800956e:	611a      	str	r2, [r3, #16]
 8009570:	615a      	str	r2, [r3, #20]
 8009572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009574:	4b2d      	ldr	r3, [pc, #180]	@ (800962c <MX_TIM2_Init+0xdc>)
 8009576:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800957a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 800957c:	4b2b      	ldr	r3, [pc, #172]	@ (800962c <MX_TIM2_Init+0xdc>)
 800957e:	f240 123f 	movw	r2, #319	@ 0x13f
 8009582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009584:	4b29      	ldr	r3, [pc, #164]	@ (800962c <MX_TIM2_Init+0xdc>)
 8009586:	2200      	movs	r2, #0
 8009588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800958a:	4b28      	ldr	r3, [pc, #160]	@ (800962c <MX_TIM2_Init+0xdc>)
 800958c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009592:	4b26      	ldr	r3, [pc, #152]	@ (800962c <MX_TIM2_Init+0xdc>)
 8009594:	2200      	movs	r2, #0
 8009596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009598:	4b24      	ldr	r3, [pc, #144]	@ (800962c <MX_TIM2_Init+0xdc>)
 800959a:	2200      	movs	r2, #0
 800959c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800959e:	4823      	ldr	r0, [pc, #140]	@ (800962c <MX_TIM2_Init+0xdc>)
 80095a0:	f004 fedb 	bl	800e35a <HAL_TIM_PWM_Init>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80095aa:	f000 f8ff 	bl	80097ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80095b6:	f107 031c 	add.w	r3, r7, #28
 80095ba:	4619      	mov	r1, r3
 80095bc:	481b      	ldr	r0, [pc, #108]	@ (800962c <MX_TIM2_Init+0xdc>)
 80095be:	f005 fd45 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80095c8:	f000 f8f0 	bl	80097ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095cc:	2360      	movs	r3, #96	@ 0x60
 80095ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095d4:	2300      	movs	r3, #0
 80095d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095dc:	463b      	mov	r3, r7
 80095de:	2200      	movs	r2, #0
 80095e0:	4619      	mov	r1, r3
 80095e2:	4812      	ldr	r0, [pc, #72]	@ (800962c <MX_TIM2_Init+0xdc>)
 80095e4:	f005 f872 	bl	800e6cc <HAL_TIM_PWM_ConfigChannel>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80095ee:	f000 f8dd 	bl	80097ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80095f2:	463b      	mov	r3, r7
 80095f4:	2208      	movs	r2, #8
 80095f6:	4619      	mov	r1, r3
 80095f8:	480c      	ldr	r0, [pc, #48]	@ (800962c <MX_TIM2_Init+0xdc>)
 80095fa:	f005 f867 	bl	800e6cc <HAL_TIM_PWM_ConfigChannel>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8009604:	f000 f8d2 	bl	80097ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009608:	463b      	mov	r3, r7
 800960a:	220c      	movs	r2, #12
 800960c:	4619      	mov	r1, r3
 800960e:	4807      	ldr	r0, [pc, #28]	@ (800962c <MX_TIM2_Init+0xdc>)
 8009610:	f005 f85c 	bl	800e6cc <HAL_TIM_PWM_ConfigChannel>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800961a:	f000 f8c7 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800961e:	4803      	ldr	r0, [pc, #12]	@ (800962c <MX_TIM2_Init+0xdc>)
 8009620:	f000 fa8e 	bl	8009b40 <HAL_TIM_MspPostInit>

}
 8009624:	bf00      	nop
 8009626:	3728      	adds	r7, #40	@ 0x28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000344 	.word	0x20000344

08009630 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009634:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <MX_TIM16_Init+0x44>)
 8009636:	4a10      	ldr	r2, [pc, #64]	@ (8009678 <MX_TIM16_Init+0x48>)
 8009638:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 800963a:	4b0e      	ldr	r3, [pc, #56]	@ (8009674 <MX_TIM16_Init+0x44>)
 800963c:	221f      	movs	r2, #31
 800963e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009640:	4b0c      	ldr	r3, [pc, #48]	@ (8009674 <MX_TIM16_Init+0x44>)
 8009642:	2200      	movs	r2, #0
 8009644:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8009646:	4b0b      	ldr	r3, [pc, #44]	@ (8009674 <MX_TIM16_Init+0x44>)
 8009648:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800964c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800964e:	4b09      	ldr	r3, [pc, #36]	@ (8009674 <MX_TIM16_Init+0x44>)
 8009650:	2200      	movs	r2, #0
 8009652:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009654:	4b07      	ldr	r3, [pc, #28]	@ (8009674 <MX_TIM16_Init+0x44>)
 8009656:	2200      	movs	r2, #0
 8009658:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800965a:	4b06      	ldr	r3, [pc, #24]	@ (8009674 <MX_TIM16_Init+0x44>)
 800965c:	2200      	movs	r2, #0
 800965e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009660:	4804      	ldr	r0, [pc, #16]	@ (8009674 <MX_TIM16_Init+0x44>)
 8009662:	f004 fe23 	bl	800e2ac <HAL_TIM_Base_Init>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800966c:	f000 f89e 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009670:	bf00      	nop
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20000390 	.word	0x20000390
 8009678:	40014400 	.word	0x40014400

0800967c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009680:	4b22      	ldr	r3, [pc, #136]	@ (800970c <MX_USART1_UART_Init+0x90>)
 8009682:	4a23      	ldr	r2, [pc, #140]	@ (8009710 <MX_USART1_UART_Init+0x94>)
 8009684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009686:	4b21      	ldr	r3, [pc, #132]	@ (800970c <MX_USART1_UART_Init+0x90>)
 8009688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800968c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800968e:	4b1f      	ldr	r3, [pc, #124]	@ (800970c <MX_USART1_UART_Init+0x90>)
 8009690:	2200      	movs	r2, #0
 8009692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009694:	4b1d      	ldr	r3, [pc, #116]	@ (800970c <MX_USART1_UART_Init+0x90>)
 8009696:	2200      	movs	r2, #0
 8009698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800969a:	4b1c      	ldr	r3, [pc, #112]	@ (800970c <MX_USART1_UART_Init+0x90>)
 800969c:	2200      	movs	r2, #0
 800969e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096a0:	4b1a      	ldr	r3, [pc, #104]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096a2:	220c      	movs	r2, #12
 80096a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096a6:	4b19      	ldr	r3, [pc, #100]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096ac:	4b17      	ldr	r3, [pc, #92]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096b2:	4b16      	ldr	r3, [pc, #88]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80096b8:	4b14      	ldr	r3, [pc, #80]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096be:	4b13      	ldr	r3, [pc, #76]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096c4:	4811      	ldr	r0, [pc, #68]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096c6:	f005 fd66 	bl	800f196 <HAL_UART_Init>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80096d0:	f000 f86c 	bl	80097ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096d4:	2100      	movs	r1, #0
 80096d6:	480d      	ldr	r0, [pc, #52]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096d8:	f006 fe7d 	bl	80103d6 <HAL_UARTEx_SetTxFifoThreshold>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80096e2:	f000 f863 	bl	80097ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80096e6:	2100      	movs	r1, #0
 80096e8:	4808      	ldr	r0, [pc, #32]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096ea:	f006 feb2 	bl	8010452 <HAL_UARTEx_SetRxFifoThreshold>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80096f4:	f000 f85a 	bl	80097ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80096f8:	4804      	ldr	r0, [pc, #16]	@ (800970c <MX_USART1_UART_Init+0x90>)
 80096fa:	f006 fe33 	bl	8010364 <HAL_UARTEx_DisableFifoMode>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009704:	f000 f852 	bl	80097ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009708:	bf00      	nop
 800970a:	bd80      	pop	{r7, pc}
 800970c:	200003dc 	.word	0x200003dc
 8009710:	40013800 	.word	0x40013800

08009714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800971a:	1d3b      	adds	r3, r7, #4
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	605a      	str	r2, [r3, #4]
 8009722:	609a      	str	r2, [r3, #8]
 8009724:	60da      	str	r2, [r3, #12]
 8009726:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009728:	2004      	movs	r0, #4
 800972a:	f7ff fcc5 	bl	80090b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800972e:	2002      	movs	r0, #2
 8009730:	f7ff fcc2 	bl	80090b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009734:	2001      	movs	r0, #1
 8009736:	f7ff fcbf 	bl	80090b8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relais_1_Pin|relais_3_Pin, GPIO_PIN_RESET);
 800973a:	2200      	movs	r2, #0
 800973c:	210a      	movs	r1, #10
 800973e:	481a      	ldr	r0, [pc, #104]	@ (80097a8 <MX_GPIO_Init+0x94>)
 8009740:	f002 fbb6 	bl	800beb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rlais_2_GPIO_Port, rlais_2_Pin, GPIO_PIN_RESET);
 8009744:	2200      	movs	r2, #0
 8009746:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800974a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800974e:	f002 fbaf 	bl	800beb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_4_Pin button_3_Pin button_2_Pin button_1_Pin */
  GPIO_InitStruct.Pin = button_4_Pin|button_3_Pin|button_2_Pin|button_1_Pin;
 8009752:	2371      	movs	r3, #113	@ 0x71
 8009754:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800975a:	2301      	movs	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800975e:	1d3b      	adds	r3, r7, #4
 8009760:	4619      	mov	r1, r3
 8009762:	4811      	ldr	r0, [pc, #68]	@ (80097a8 <MX_GPIO_Init+0x94>)
 8009764:	f002 fa34 	bl	800bbd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : relais_1_Pin relais_3_Pin */
  GPIO_InitStruct.Pin = relais_1_Pin|relais_3_Pin;
 8009768:	230a      	movs	r3, #10
 800976a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800976c:	2301      	movs	r3, #1
 800976e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009770:	2302      	movs	r3, #2
 8009772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009774:	2300      	movs	r3, #0
 8009776:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009778:	1d3b      	adds	r3, r7, #4
 800977a:	4619      	mov	r1, r3
 800977c:	480a      	ldr	r0, [pc, #40]	@ (80097a8 <MX_GPIO_Init+0x94>)
 800977e:	f002 fa27 	bl	800bbd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : rlais_2_Pin */
  GPIO_InitStruct.Pin = rlais_2_Pin;
 8009782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009788:	2301      	movs	r3, #1
 800978a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800978c:	2302      	movs	r3, #2
 800978e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009790:	2300      	movs	r3, #0
 8009792:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(rlais_2_GPIO_Port, &GPIO_InitStruct);
 8009794:	1d3b      	adds	r3, r7, #4
 8009796:	4619      	mov	r1, r3
 8009798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800979c:	f002 fa18 	bl	800bbd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80097a0:	bf00      	nop
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	48000400 	.word	0x48000400

080097ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80097b0:	b672      	cpsid	i
}
 80097b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <Error_Handler+0x8>

080097b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80097b8:	b480      	push	{r7}
 80097ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80097bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80097c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80097d0:	bf00      	nop
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <LL_AHB2_GRP1_EnableClock>:
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80097e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80097f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4013      	ands	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097fe:	68fb      	ldr	r3, [r7, #12]
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800981a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4313      	orrs	r3, r2
 8009822:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4013      	ands	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800984a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800984c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4313      	orrs	r3, r2
 8009854:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800985a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4013      	ands	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009862:	68fb      	ldr	r3, [r7, #12]
}
 8009864:	bf00      	nop
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800987c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800987e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4313      	orrs	r3, r2
 8009886:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800988c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4013      	ands	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009894:	68fb      	ldr	r3, [r7, #12]
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80098a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80098aa:	f7ff ffaf 	bl	800980c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	202e      	movs	r0, #46	@ 0x2e
 80098b4:	f002 f87d 	bl	800b9b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80098b8:	202e      	movs	r0, #46	@ 0x2e
 80098ba:	f002 f894 	bl	800b9e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098be:	bf00      	nop
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b09c      	sub	sp, #112	@ 0x70
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	605a      	str	r2, [r3, #4]
 80098d6:	609a      	str	r2, [r3, #8]
 80098d8:	60da      	str	r2, [r3, #12]
 80098da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	2250      	movs	r2, #80	@ 0x50
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f00c f86b 	bl	80159c0 <memset>
  if(hadc->Instance==ADC1)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009960 <HAL_ADC_MspInit+0x9c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d131      	bne.n	8009958 <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80098f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80098fa:	2318      	movs	r3, #24
 80098fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80098fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009902:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009908:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800990a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800990e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8009910:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009914:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8009916:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800991a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	4618      	mov	r0, r3
 8009922:	f003 fffe 	bl	800d922 <HAL_RCCEx_PeriphCLKConfig>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 800992c:	f7ff ff3e 	bl	80097ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009930:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009934:	f7ff ff51 	bl	80097da <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009938:	2001      	movs	r0, #1
 800993a:	f7ff ff4e 	bl	80097da <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800993e:	2310      	movs	r3, #16
 8009940:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009942:	2303      	movs	r3, #3
 8009944:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009946:	2300      	movs	r3, #0
 8009948:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800994a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800994e:	4619      	mov	r1, r3
 8009950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009954:	f002 f93c 	bl	800bbd0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8009958:	bf00      	nop
 800995a:	3770      	adds	r7, #112	@ 0x70
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	50040000 	.word	0x50040000

08009964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b09c      	sub	sp, #112	@ 0x70
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800996c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	605a      	str	r2, [r3, #4]
 8009976:	609a      	str	r2, [r3, #8]
 8009978:	60da      	str	r2, [r3, #12]
 800997a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800997c:	f107 030c 	add.w	r3, r7, #12
 8009980:	2250      	movs	r2, #80	@ 0x50
 8009982:	2100      	movs	r1, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f00c f81b 	bl	80159c0 <memset>
  if(hi2c->Instance==I2C1)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a17      	ldr	r2, [pc, #92]	@ (80099ec <HAL_I2C_MspInit+0x88>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d126      	bne.n	80099e2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009994:	2304      	movs	r3, #4
 8009996:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009998:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800999c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800999e:	f107 030c 	add.w	r3, r7, #12
 80099a2:	4618      	mov	r0, r3
 80099a4:	f003 ffbd 	bl	800d922 <HAL_RCCEx_PeriphCLKConfig>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80099ae:	f7ff fefd 	bl	80097ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099b2:	2002      	movs	r0, #2
 80099b4:	f7ff ff11 	bl	80097da <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80099b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80099bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80099be:	2312      	movs	r3, #18
 80099c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099c6:	2300      	movs	r3, #0
 80099c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80099ca:	2304      	movs	r3, #4
 80099cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80099d2:	4619      	mov	r1, r3
 80099d4:	4806      	ldr	r0, [pc, #24]	@ (80099f0 <HAL_I2C_MspInit+0x8c>)
 80099d6:	f002 f8fb 	bl	800bbd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80099da:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80099de:	f7ff ff2e 	bl	800983e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80099e2:	bf00      	nop
 80099e4:	3770      	adds	r7, #112	@ 0x70
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	40005400 	.word	0x40005400
 80099f0:	48000400 	.word	0x48000400

080099f4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a0d      	ldr	r2, [pc, #52]	@ (8009a38 <HAL_IPCC_MspInit+0x44>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d113      	bne.n	8009a2e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8009a06:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009a0a:	f7ff feff 	bl	800980c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2100      	movs	r1, #0
 8009a12:	202c      	movs	r0, #44	@ 0x2c
 8009a14:	f001 ffcd 	bl	800b9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009a18:	202c      	movs	r0, #44	@ 0x2c
 8009a1a:	f001 ffe4 	bl	800b9e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	202d      	movs	r0, #45	@ 0x2d
 8009a24:	f001 ffc5 	bl	800b9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009a28:	202d      	movs	r0, #45	@ 0x2d
 8009a2a:	f001 ffdc 	bl	800b9e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	58000c00 	.word	0x58000c00

08009a3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b096      	sub	sp, #88	@ 0x58
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a44:	f107 0308 	add.w	r3, r7, #8
 8009a48:	2250      	movs	r2, #80	@ 0x50
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f00b ffb7 	bl	80159c0 <memset>
  if(hrtc->Instance==RTC)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a0f      	ldr	r2, [pc, #60]	@ (8009a94 <HAL_RTC_MspInit+0x58>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d117      	bne.n	8009a8c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8009a5c:	f002 fc1c 	bl	800c298 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009a60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a64:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a6c:	f107 0308 	add.w	r3, r7, #8
 8009a70:	4618      	mov	r0, r3
 8009a72:	f003 ff56 	bl	800d922 <HAL_RCCEx_PeriphCLKConfig>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8009a7c:	f7ff fe96 	bl	80097ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009a80:	f7ff fe9a 	bl	80097b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8009a84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009a88:	f7ff fed9 	bl	800983e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8009a8c:	bf00      	nop
 8009a8e:	3758      	adds	r7, #88	@ 0x58
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40002800 	.word	0x40002800

08009a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	609a      	str	r2, [r3, #8]
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8009af4 <HAL_SPI_MspInit+0x5c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d117      	bne.n	8009aea <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009aba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009abe:	f7ff fed7 	bl	8009870 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f7ff fe89 	bl	80097da <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8009ac8:	23c2      	movs	r3, #194	@ 0xc2
 8009aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009acc:	2302      	movs	r3, #2
 8009ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009ad8:	2305      	movs	r3, #5
 8009ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009adc:	f107 030c 	add.w	r3, r7, #12
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ae6:	f002 f873 	bl	800bbd0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8009aea:	bf00      	nop
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	40013000 	.word	0x40013000

08009af8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b08:	d102      	bne.n	8009b10 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	f7ff fe97 	bl	800983e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a05      	ldr	r2, [pc, #20]	@ (8009b3c <HAL_TIM_Base_MspInit+0x24>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d103      	bne.n	8009b32 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009b2a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009b2e:	f7ff fe9f 	bl	8009870 <LL_APB2_GRP1_EnableClock>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	40014400 	.word	0x40014400

08009b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b48:	f107 030c 	add.w	r3, r7, #12
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	609a      	str	r2, [r3, #8]
 8009b54:	60da      	str	r2, [r3, #12]
 8009b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b60:	d113      	bne.n	8009b8a <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b62:	2001      	movs	r0, #1
 8009b64:	f7ff fe39 	bl	80097da <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 8009b68:	230d      	movs	r3, #13
 8009b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009b70:	2302      	movs	r3, #2
 8009b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b74:	2300      	movs	r3, #0
 8009b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009b86:	f002 f823 	bl	800bbd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009b8a:	bf00      	nop
 8009b8c:	3720      	adds	r7, #32
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b09c      	sub	sp, #112	@ 0x70
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	609a      	str	r2, [r3, #8]
 8009ba8:	60da      	str	r2, [r3, #12]
 8009baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	2250      	movs	r2, #80	@ 0x50
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f00b ff03 	bl	80159c0 <memset>
  if(huart->Instance==USART1)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8009c2c <HAL_UART_MspInit+0x98>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d12e      	bne.n	8009c22 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009bcc:	f107 030c 	add.w	r3, r7, #12
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f003 fea6 	bl	800d922 <HAL_RCCEx_PeriphCLKConfig>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009bdc:	f7ff fde6 	bl	80097ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009be0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009be4:	f7ff fe44 	bl	8009870 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009be8:	2001      	movs	r0, #1
 8009bea:	f7ff fdf6 	bl	80097da <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009bee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c00:	2307      	movs	r3, #7
 8009c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009c0e:	f001 ffdf 	bl	800bbd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009c12:	2200      	movs	r2, #0
 8009c14:	2100      	movs	r1, #0
 8009c16:	2024      	movs	r0, #36	@ 0x24
 8009c18:	f001 fecb 	bl	800b9b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009c1c:	2024      	movs	r0, #36	@ 0x24
 8009c1e:	f001 fee2 	bl	800b9e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009c22:	bf00      	nop
 8009c24:	3770      	adds	r7, #112	@ 0x70
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40013800 	.word	0x40013800

08009c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <NMI_Handler+0x4>

08009c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c3c:	bf00      	nop
 8009c3e:	e7fd      	b.n	8009c3c <HardFault_Handler+0x4>

08009c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <MemManage_Handler+0x4>

08009c48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <BusFault_Handler+0x4>

08009c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <UsageFault_Handler+0x4>

08009c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c5c:	bf00      	nop
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c66:	b480      	push	{r7}
 8009c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c6a:	bf00      	nop
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c78:	bf00      	nop
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c86:	f000 fd03 	bl	800a690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009c94:	4802      	ldr	r0, [pc, #8]	@ (8009ca0 <USART1_IRQHandler+0x10>)
 8009c96:	f005 fb5d 	bl	800f354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009c9a:	bf00      	nop
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200003dc 	.word	0x200003dc

08009ca4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8009ca8:	f00a fe9c 	bl	80149e4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8009cac:	bf00      	nop
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8009cb4:	f00a feec 	bl	8014a90 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8009cb8:	bf00      	nop
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8009cc0:	f002 f90e 	bl	800bee0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8009cc4:	bf00      	nop
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8009cc8:	b40c      	push	{r2, r3}
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	71fb      	strb	r3, [r7, #7]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8009cda:	bf00      	nop
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	b002      	add	sp, #8
 8009ce6:	4770      	bx	lr

08009ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
  return 1;
 8009cec:	2301      	movs	r3, #1
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <_kill>:

int _kill(int pid, int sig)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009d02:	f00b fedf 	bl	8015ac4 <__errno>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2216      	movs	r2, #22
 8009d0a:	601a      	str	r2, [r3, #0]
  return -1;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <_exit>:

void _exit (int status)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009d20:	f04f 31ff 	mov.w	r1, #4294967295
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff ffe7 	bl	8009cf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <_exit+0x12>

08009d2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	e00a      	b.n	8009d56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009d40:	f3af 8000 	nop.w
 8009d44:	4601      	mov	r1, r0
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	60ba      	str	r2, [r7, #8]
 8009d4c:	b2ca      	uxtb	r2, r1
 8009d4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	3301      	adds	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	dbf0      	blt.n	8009d40 <_read+0x12>
  }

  return len;
 8009d5e:	687b      	ldr	r3, [r7, #4]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e009      	b.n	8009d8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	60ba      	str	r2, [r7, #8]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff f9b2 	bl	80090ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	dbf1      	blt.n	8009d7a <_write+0x12>
  }
  return len;
 8009d96:	687b      	ldr	r3, [r7, #4]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <_close>:

int _close(int file)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009dc8:	605a      	str	r2, [r3, #4]
  return 0;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <_isatty>:

int _isatty(int file)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009de0:	2301      	movs	r3, #1
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b085      	sub	sp, #20
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009e10:	4a14      	ldr	r2, [pc, #80]	@ (8009e64 <_sbrk+0x5c>)
 8009e12:	4b15      	ldr	r3, [pc, #84]	@ (8009e68 <_sbrk+0x60>)
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009e1c:	4b13      	ldr	r3, [pc, #76]	@ (8009e6c <_sbrk+0x64>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009e24:	4b11      	ldr	r3, [pc, #68]	@ (8009e6c <_sbrk+0x64>)
 8009e26:	4a12      	ldr	r2, [pc, #72]	@ (8009e70 <_sbrk+0x68>)
 8009e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009e2a:	4b10      	ldr	r3, [pc, #64]	@ (8009e6c <_sbrk+0x64>)
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4413      	add	r3, r2
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d207      	bcs.n	8009e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009e38:	f00b fe44 	bl	8015ac4 <__errno>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	220c      	movs	r2, #12
 8009e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009e42:	f04f 33ff 	mov.w	r3, #4294967295
 8009e46:	e009      	b.n	8009e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009e48:	4b08      	ldr	r3, [pc, #32]	@ (8009e6c <_sbrk+0x64>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009e4e:	4b07      	ldr	r3, [pc, #28]	@ (8009e6c <_sbrk+0x64>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	4a05      	ldr	r2, [pc, #20]	@ (8009e6c <_sbrk+0x64>)
 8009e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	20030000 	.word	0x20030000
 8009e68:	00000400 	.word	0x00000400
 8009e6c:	20000484 	.word	0x20000484
 8009e70:	20000988 	.word	0x20000988

08009e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8009e78:	4b24      	ldr	r3, [pc, #144]	@ (8009f0c <SystemInit+0x98>)
 8009e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e7e:	4a23      	ldr	r2, [pc, #140]	@ (8009f0c <SystemInit+0x98>)
 8009e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009e92:	f043 0301 	orr.w	r3, r3, #1
 8009e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8009e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e9c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8009ea0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8009ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009eac:	4b18      	ldr	r3, [pc, #96]	@ (8009f10 <SystemInit+0x9c>)
 8009eae:	4013      	ands	r3, r2
 8009eb0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8009eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009ebe:	f023 0305 	bic.w	r3, r3, #5
 8009ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8009ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009ed2:	f023 0301 	bic.w	r3, r3, #1
 8009ed6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8009eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ede:	4a0d      	ldr	r2, [pc, #52]	@ (8009f14 <SystemInit+0xa0>)
 8009ee0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8009ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8009f14 <SystemInit+0xa0>)
 8009ee8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ef8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009efe:	2200      	movs	r2, #0
 8009f00:	619a      	str	r2, [r3, #24]
}
 8009f02:	bf00      	nop
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	e000ed00 	.word	0xe000ed00
 8009f10:	faf6fefb 	.word	0xfaf6fefb
 8009f14:	22041000 	.word	0x22041000

08009f18 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8009f18:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f1a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f1c:	3304      	adds	r3, #4

08009f1e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f1e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f20:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8009f22:	d3f9      	bcc.n	8009f18 <CopyDataInit>
  bx lr
 8009f24:	4770      	bx	lr

08009f26 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8009f26:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8009f28:	3004      	adds	r0, #4

08009f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8009f2a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8009f2c:	d3fb      	bcc.n	8009f26 <FillZerobss>
  bx lr
 8009f2e:	4770      	bx	lr

08009f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009f30:	480c      	ldr	r0, [pc, #48]	@ (8009f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009f32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009f34:	f7ff ff9e 	bl	8009e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8009f38:	480b      	ldr	r0, [pc, #44]	@ (8009f68 <LoopForever+0x6>)
 8009f3a:	490c      	ldr	r1, [pc, #48]	@ (8009f6c <LoopForever+0xa>)
 8009f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f70 <LoopForever+0xe>)
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f7ff ffed 	bl	8009f1e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8009f44:	480b      	ldr	r0, [pc, #44]	@ (8009f74 <LoopForever+0x12>)
 8009f46:	490c      	ldr	r1, [pc, #48]	@ (8009f78 <LoopForever+0x16>)
 8009f48:	4a0c      	ldr	r2, [pc, #48]	@ (8009f7c <LoopForever+0x1a>)
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f7ff ffe7 	bl	8009f1e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8009f50:	480b      	ldr	r0, [pc, #44]	@ (8009f80 <LoopForever+0x1e>)
 8009f52:	490c      	ldr	r1, [pc, #48]	@ (8009f84 <LoopForever+0x22>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	f7ff ffe8 	bl	8009f2a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009f5a:	f00b fdb9 	bl	8015ad0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009f5e:	f7ff f8d7 	bl	8009110 <main>

08009f62 <LoopForever>:

LoopForever:
  b LoopForever
 8009f62:	e7fe      	b.n	8009f62 <LoopForever>
  ldr   r0, =_estack
 8009f64:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8009f68:	20000008 	.word	0x20000008
 8009f6c:	200000f8 	.word	0x200000f8
 8009f70:	08018678 	.word	0x08018678
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8009f74:	200300e4 	.word	0x200300e4
 8009f78:	20030b5a 	.word	0x20030b5a
 8009f7c:	08018779 	.word	0x08018779
  INIT_BSS _sbss, _ebss
 8009f80:	2000010c 	.word	0x2000010c
 8009f84:	20000984 	.word	0x20000984

08009f88 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009f88:	e7fe      	b.n	8009f88 <ADC1_IRQHandler>

08009f8a <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	887a      	ldrh	r2, [r7, #2]
 8009fa8:	809a      	strh	r2, [r3, #4]
}
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <update_RGB>:
void setPWM_normal_timer(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse);
uint16_t saturate_color(uint16_t in);
struct RGB_t xy_to_RGB(float x, float y, float brightness);


void update_RGB(struct RGB_object_t data){
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	e883 0003 	stmia.w	r3, {r0, r1}
	float x = 1.0f*data.color_x/0xFFFF;
 8009fc4:	883b      	ldrh	r3, [r7, #0]
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fce:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800a020 <update_RGB+0x68>
 8009fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fd6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = 1.0f*data.color_y/0xFFFF;
 8009fda:	887b      	ldrh	r3, [r7, #2]
 8009fdc:	ee07 3a90 	vmov	s15, r3
 8009fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fe4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a020 <update_RGB+0x68>
 8009fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fec:	edc7 7a04 	vstr	s15, [r7, #16]
	float brightness = 1.0f*data.brightness/0xFF;
 8009ff0:	88bb      	ldrh	r3, [r7, #4]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ffa:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800a024 <update_RGB+0x6c>
 8009ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a002:	edc7 7a03 	vstr	s15, [r7, #12]
	set_color_xy(x, y, brightness);
 800a006:	ed97 1a03 	vldr	s2, [r7, #12]
 800a00a:	edd7 0a04 	vldr	s1, [r7, #16]
 800a00e:	ed97 0a05 	vldr	s0, [r7, #20]
 800a012:	f000 fabb 	bl	800a58c <set_color_xy>
}
 800a016:	bf00      	nop
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	477fff00 	.word	0x477fff00
 800a024:	437f0000 	.word	0x437f0000

0800a028 <set_RGB>:




void set_RGB(uint16_t red, uint16_t green, uint16_t blue){
 800a028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02a:	b095      	sub	sp, #84	@ 0x54
 800a02c:	af12      	add	r7, sp, #72	@ 0x48
 800a02e:	4603      	mov	r3, r0
 800a030:	80fb      	strh	r3, [r7, #6]
 800a032:	460b      	mov	r3, r1
 800a034:	80bb      	strh	r3, [r7, #4]
 800a036:	4613      	mov	r3, r2
 800a038:	807b      	strh	r3, [r7, #2]
	setPWM_normal_timer(htim2, TIM_CHANNEL_4, blue);					// normal timer
 800a03a:	4e23      	ldr	r6, [pc, #140]	@ (800a0c8 <set_RGB+0xa0>)
 800a03c:	887b      	ldrh	r3, [r7, #2]
 800a03e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a040:	230c      	movs	r3, #12
 800a042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a044:	466d      	mov	r5, sp
 800a046:	f106 0410 	add.w	r4, r6, #16
 800a04a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a04c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a04e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a056:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a05a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a05e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a062:	f000 f833 	bl	800a0cc <setPWM_normal_timer>
	setPWM_normal_timer(htim2, TIM_CHANNEL_3, green);		// negative timer
 800a066:	4e18      	ldr	r6, [pc, #96]	@ (800a0c8 <set_RGB+0xa0>)
 800a068:	88bb      	ldrh	r3, [r7, #4]
 800a06a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a06c:	2308      	movs	r3, #8
 800a06e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a070:	466d      	mov	r5, sp
 800a072:	f106 0410 	add.w	r4, r6, #16
 800a076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a07a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a07c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a07e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a082:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a086:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a08a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a08e:	f000 f81d 	bl	800a0cc <setPWM_normal_timer>
	setPWM_normal_timer(htim2, TIM_CHANNEL_1, red);					// normal timer
 800a092:	4e0d      	ldr	r6, [pc, #52]	@ (800a0c8 <set_RGB+0xa0>)
 800a094:	88fb      	ldrh	r3, [r7, #6]
 800a096:	9310      	str	r3, [sp, #64]	@ 0x40
 800a098:	2300      	movs	r3, #0
 800a09a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a09c:	466d      	mov	r5, sp
 800a09e:	f106 0410 	add.w	r4, r6, #16
 800a0a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a0b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a0b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a0ba:	f000 f807 	bl	800a0cc <setPWM_normal_timer>
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20000344 	.word	0x20000344

0800a0cc <setPWM_normal_timer>:

void setPWM_normal_timer(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse) {
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b088      	sub	sp, #32
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800a0d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); 								// stop generation of pwm
 800a0dc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a0de:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a0e2:	f004 fa6b 	bl	800e5bc <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = MAX_BRIGHTNESS; 							// set the period duration
 800a0e6:	2364      	movs	r3, #100	@ 0x64
 800a0e8:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer); 										// re-inititialize with new period value
 800a0ea:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a0ee:	f004 f934 	bl	800e35a <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a0f2:	2360      	movs	r3, #96	@ 0x60
 800a0f4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = saturate_color(pulse); 										// set the pulse duration
 800a0f6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f81e 	bl	800a13c <saturate_color>
 800a100:	4603      	mov	r3, r0
 800a102:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800a10c:	1d3b      	adds	r3, r7, #4
 800a10e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a110:	4619      	mov	r1, r3
 800a112:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a116:	f004 fad9 	bl	800e6cc <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800a11a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a11c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a120:	f004 f972 	bl	800e408 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&timer, channel);
 800a124:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a126:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a12a:	f004 fef7 	bl	800ef1c <HAL_TIMEx_PWMN_Start>
}
 800a12e:	bf00      	nop
 800a130:	3720      	adds	r7, #32
 800a132:	46bd      	mov	sp, r7
 800a134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a138:	b004      	add	sp, #16
 800a13a:	4770      	bx	lr

0800a13c <saturate_color>:

uint16_t saturate_color(uint16_t in){
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	80fb      	strh	r3, [r7, #6]
	if(in > MAX_BRIGHTNESS){
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	2b64      	cmp	r3, #100	@ 0x64
 800a14a:	d901      	bls.n	800a150 <saturate_color+0x14>
		return MAX_BRIGHTNESS;
 800a14c:	2364      	movs	r3, #100	@ 0x64
 800a14e:	e000      	b.n	800a152 <saturate_color+0x16>
	}else{
		return in;
 800a150:	88fb      	ldrh	r3, [r7, #6]
	}
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
	...

0800a160 <xy_to_RGB>:

//https://gist.github.com/popcorn245/30afa0f98eea1c2fd34d
struct RGB_t xy_to_RGB(float x, float y, float brightness){
 800a160:	b5b0      	push	{r4, r5, r7, lr}
 800a162:	b08e      	sub	sp, #56	@ 0x38
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	ed87 0a02 	vstr	s0, [r7, #8]
 800a16c:	edc7 0a01 	vstr	s1, [r7, #4]
 800a170:	ed87 1a00 	vstr	s2, [r7]
	float z = 1.0f - x - y;
 800a174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a178:	edd7 7a02 	vldr	s15, [r7, #8]
 800a17c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a180:	edd7 7a01 	vldr	s15, [r7, #4]
 800a184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a188:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float Y = brightness; // The given brightness value
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	623b      	str	r3, [r7, #32]
	float X = (Y / y) * x;
 800a190:	edd7 6a08 	vldr	s13, [r7, #32]
 800a194:	ed97 7a01 	vldr	s14, [r7, #4]
 800a198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19c:	ed97 7a02 	vldr	s14, [r7, #8]
 800a1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a4:	edc7 7a07 	vstr	s15, [r7, #28]
	float Z = (Y / y) * z;
 800a1a8:	edd7 6a08 	vldr	s13, [r7, #32]
 800a1ac:	ed97 7a01 	vldr	s14, [r7, #4]
 800a1b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1bc:	edc7 7a06 	vstr	s15, [r7, #24]
	float r = X * 1.656492 - Y * 0.354851 - Z * 0.255038;
 800a1c0:	69f8      	ldr	r0, [r7, #28]
 800a1c2:	f7fd fedd 	bl	8007f80 <__aeabi_f2d>
 800a1c6:	a3df      	add	r3, pc, #892	@ (adr r3, 800a544 <xy_to_RGB+0x3e4>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f7fd ff30 	bl	8008030 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	461d      	mov	r5, r3
 800a1d8:	6a38      	ldr	r0, [r7, #32]
 800a1da:	f7fd fed1 	bl	8007f80 <__aeabi_f2d>
 800a1de:	a3db      	add	r3, pc, #876	@ (adr r3, 800a54c <xy_to_RGB+0x3ec>)
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7fd ff24 	bl	8008030 <__aeabi_dmul>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	f7fd fd66 	bl	8007cc0 <__aeabi_dsub>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	461d      	mov	r5, r3
 800a1fc:	69b8      	ldr	r0, [r7, #24]
 800a1fe:	f7fd febf 	bl	8007f80 <__aeabi_f2d>
 800a202:	a3d4      	add	r3, pc, #848	@ (adr r3, 800a554 <xy_to_RGB+0x3f4>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7fd ff12 	bl	8008030 <__aeabi_dmul>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4620      	mov	r0, r4
 800a212:	4629      	mov	r1, r5
 800a214:	f7fd fd54 	bl	8007cc0 <__aeabi_dsub>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4610      	mov	r0, r2
 800a21e:	4619      	mov	r1, r3
 800a220:	f7fe f9fe 	bl	8008620 <__aeabi_d2f>
 800a224:	4603      	mov	r3, r0
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
	float g = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;
 800a228:	edd7 7a07 	vldr	s15, [r7, #28]
 800a22c:	eef1 7a67 	vneg.f32	s15, s15
 800a230:	ee17 3a90 	vmov	r3, s15
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fea3 	bl	8007f80 <__aeabi_f2d>
 800a23a:	a3c8      	add	r3, pc, #800	@ (adr r3, 800a55c <xy_to_RGB+0x3fc>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7fd fef6 	bl	8008030 <__aeabi_dmul>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	461d      	mov	r5, r3
 800a24c:	6a38      	ldr	r0, [r7, #32]
 800a24e:	f7fd fe97 	bl	8007f80 <__aeabi_f2d>
 800a252:	a3c4      	add	r3, pc, #784	@ (adr r3, 800a564 <xy_to_RGB+0x404>)
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f7fd feea 	bl	8008030 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7fd fd2e 	bl	8007cc4 <__adddf3>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4614      	mov	r4, r2
 800a26e:	461d      	mov	r5, r3
 800a270:	69b8      	ldr	r0, [r7, #24]
 800a272:	f7fd fe85 	bl	8007f80 <__aeabi_f2d>
 800a276:	a3bd      	add	r3, pc, #756	@ (adr r3, 800a56c <xy_to_RGB+0x40c>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7fd fed8 	bl	8008030 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7fd fd1c 	bl	8007cc4 <__adddf3>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4610      	mov	r0, r2
 800a292:	4619      	mov	r1, r3
 800a294:	f7fe f9c4 	bl	8008620 <__aeabi_d2f>
 800a298:	4603      	mov	r3, r0
 800a29a:	633b      	str	r3, [r7, #48]	@ 0x30
	float b = X * 0.051713 - Y * 0.121364 + Z * 1.011530;
 800a29c:	69f8      	ldr	r0, [r7, #28]
 800a29e:	f7fd fe6f 	bl	8007f80 <__aeabi_f2d>
 800a2a2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a574 <xy_to_RGB+0x414>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7fd fec2 	bl	8008030 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4614      	mov	r4, r2
 800a2b2:	461d      	mov	r5, r3
 800a2b4:	6a38      	ldr	r0, [r7, #32]
 800a2b6:	f7fd fe63 	bl	8007f80 <__aeabi_f2d>
 800a2ba:	a3b0      	add	r3, pc, #704	@ (adr r3, 800a57c <xy_to_RGB+0x41c>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7fd feb6 	bl	8008030 <__aeabi_dmul>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f7fd fcf8 	bl	8007cc0 <__aeabi_dsub>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4614      	mov	r4, r2
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	69b8      	ldr	r0, [r7, #24]
 800a2da:	f7fd fe51 	bl	8007f80 <__aeabi_f2d>
 800a2de:	a3a9      	add	r3, pc, #676	@ (adr r3, 800a584 <xy_to_RGB+0x424>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7fd fea4 	bl	8008030 <__aeabi_dmul>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7fd fce8 	bl	8007cc4 <__adddf3>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f7fe f990 	bl	8008620 <__aeabi_d2f>
 800a300:	4603      	mov	r3, r0
 800a302:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float max = 0.0f;
 800a304:	f04f 0300 	mov.w	r3, #0
 800a308:	62bb      	str	r3, [r7, #40]	@ 0x28
	r = r <= 0.0031308f ? 12.92f * r : (1.0f + 0.055f) * pow(r, (1.0f / 2.4f)) - 0.055f;
 800a30a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a30e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800a538 <xy_to_RGB+0x3d8>
 800a312:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31a:	d806      	bhi.n	800a32a <xy_to_RGB+0x1ca>
 800a31c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a320:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800a53c <xy_to_RGB+0x3dc>
 800a324:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a328:	e022      	b.n	800a370 <xy_to_RGB+0x210>
 800a32a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a32c:	f7fd fe28 	bl	8007f80 <__aeabi_f2d>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 800a520 <xy_to_RGB+0x3c0>
 800a338:	ec43 2b10 	vmov	d0, r2, r3
 800a33c:	f00c fa3c 	bl	80167b8 <pow>
 800a340:	ec51 0b10 	vmov	r0, r1, d0
 800a344:	a378      	add	r3, pc, #480	@ (adr r3, 800a528 <xy_to_RGB+0x3c8>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7fd fe71 	bl	8008030 <__aeabi_dmul>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4610      	mov	r0, r2
 800a354:	4619      	mov	r1, r3
 800a356:	a376      	add	r3, pc, #472	@ (adr r3, 800a530 <xy_to_RGB+0x3d0>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7fd fcb0 	bl	8007cc0 <__aeabi_dsub>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	4610      	mov	r0, r2
 800a366:	4619      	mov	r1, r3
 800a368:	f7fe f95a 	bl	8008620 <__aeabi_d2f>
 800a36c:	ee07 0a90 	vmov	s15, r0
 800a370:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	g = g <= 0.0031308f ? 12.92f * g : (1.0f + 0.055f) * pow(g, (1.0f / 2.4f)) - 0.055f;
 800a374:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a378:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800a538 <xy_to_RGB+0x3d8>
 800a37c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a384:	d806      	bhi.n	800a394 <xy_to_RGB+0x234>
 800a386:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a38a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800a53c <xy_to_RGB+0x3dc>
 800a38e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a392:	e022      	b.n	800a3da <xy_to_RGB+0x27a>
 800a394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a396:	f7fd fdf3 	bl	8007f80 <__aeabi_f2d>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 800a520 <xy_to_RGB+0x3c0>
 800a3a2:	ec43 2b10 	vmov	d0, r2, r3
 800a3a6:	f00c fa07 	bl	80167b8 <pow>
 800a3aa:	ec51 0b10 	vmov	r0, r1, d0
 800a3ae:	a35e      	add	r3, pc, #376	@ (adr r3, 800a528 <xy_to_RGB+0x3c8>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7fd fe3c 	bl	8008030 <__aeabi_dmul>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	a35b      	add	r3, pc, #364	@ (adr r3, 800a530 <xy_to_RGB+0x3d0>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7fd fc7b 	bl	8007cc0 <__aeabi_dsub>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	f7fe f925 	bl	8008620 <__aeabi_d2f>
 800a3d6:	ee07 0a90 	vmov	s15, r0
 800a3da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	b = b <= 0.0031308f ? 12.92f * b : (1.0f + 0.055f) * pow(b, (1.0f / 2.4f)) - 0.055f;
 800a3de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a3e2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a538 <xy_to_RGB+0x3d8>
 800a3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ee:	d806      	bhi.n	800a3fe <xy_to_RGB+0x29e>
 800a3f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a3f4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800a53c <xy_to_RGB+0x3dc>
 800a3f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3fc:	e022      	b.n	800a444 <xy_to_RGB+0x2e4>
 800a3fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a400:	f7fd fdbe 	bl	8007f80 <__aeabi_f2d>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 800a520 <xy_to_RGB+0x3c0>
 800a40c:	ec43 2b10 	vmov	d0, r2, r3
 800a410:	f00c f9d2 	bl	80167b8 <pow>
 800a414:	ec51 0b10 	vmov	r0, r1, d0
 800a418:	a343      	add	r3, pc, #268	@ (adr r3, 800a528 <xy_to_RGB+0x3c8>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7fd fe07 	bl	8008030 <__aeabi_dmul>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4610      	mov	r0, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	a341      	add	r3, pc, #260	@ (adr r3, 800a530 <xy_to_RGB+0x3d0>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7fd fc46 	bl	8007cc0 <__aeabi_dsub>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4610      	mov	r0, r2
 800a43a:	4619      	mov	r1, r3
 800a43c:	f7fe f8f0 	bl	8008620 <__aeabi_d2f>
 800a440:	ee07 0a90 	vmov	s15, r0
 800a444:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	if(r>g){
 800a448:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800a44c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a458:	dd02      	ble.n	800a460 <xy_to_RGB+0x300>
		max = r;
 800a45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a45e:	e001      	b.n	800a464 <xy_to_RGB+0x304>
	}else{
		max = g;
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	if(b>max){
 800a464:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a468:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a46c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a474:	dd01      	ble.n	800a47a <xy_to_RGB+0x31a>
		max = b;
 800a476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a478:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	if(max>1.0f){
 800a47a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800a47e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a482:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48a:	dd17      	ble.n	800a4bc <xy_to_RGB+0x35c>
	r = r/max;
 800a48c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800a490:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a498:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	g = g/max;
 800a49c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800a4a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4a8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	b = b/max;
 800a4ac:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800a4b0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	}

	struct RGB_t out = {
		.red = MAX_BRIGHTNESS*r,
 800a4bc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a4c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a540 <xy_to_RGB+0x3e0>
 800a4c4:	ee67 7a87 	vmul.f32	s15, s15, s14
	struct RGB_t out = {
 800a4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4cc:	ee17 3a90 	vmov	r3, s15
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	823b      	strh	r3, [r7, #16]
		.green = MAX_BRIGHTNESS*g,
 800a4d4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a4d8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a540 <xy_to_RGB+0x3e0>
 800a4dc:	ee67 7a87 	vmul.f32	s15, s15, s14
	struct RGB_t out = {
 800a4e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e4:	ee17 3a90 	vmov	r3, s15
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	827b      	strh	r3, [r7, #18]
		.blue = MAX_BRIGHTNESS*b
 800a4ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a4f0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a540 <xy_to_RGB+0x3e0>
 800a4f4:	ee67 7a87 	vmul.f32	s15, s15, s14
	struct RGB_t out = {
 800a4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fc:	ee17 3a90 	vmov	r3, s15
 800a500:	b29b      	uxth	r3, r3
 800a502:	82bb      	strh	r3, [r7, #20]
	};
	return out;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	461a      	mov	r2, r3
 800a508:	f107 0310 	add.w	r3, r7, #16
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	6010      	str	r0, [r2, #0]
 800a510:	889b      	ldrh	r3, [r3, #4]
 800a512:	8093      	strh	r3, [r2, #4]
}
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	3738      	adds	r7, #56	@ 0x38
 800a518:	46bd      	mov	sp, r7
 800a51a:	bdb0      	pop	{r4, r5, r7, pc}
 800a51c:	f3af 8000 	nop.w
 800a520:	a0000000 	.word	0xa0000000
 800a524:	3fdaaaaa 	.word	0x3fdaaaaa
 800a528:	a0000000 	.word	0xa0000000
 800a52c:	3ff0e147 	.word	0x3ff0e147
 800a530:	c0000000 	.word	0xc0000000
 800a534:	3fac28f5 	.word	0x3fac28f5
 800a538:	3b4d2e1c 	.word	0x3b4d2e1c
 800a53c:	414eb852 	.word	0x414eb852
 800a540:	42c80000 	.word	0x42c80000
 800a544:	c1615ec0 	.word	0xc1615ec0
 800a548:	3ffa80fd 	.word	0x3ffa80fd
 800a54c:	f7fcfc40 	.word	0xf7fcfc40
 800a550:	3fd6b5e0 	.word	0x3fd6b5e0
 800a554:	e74f2f12 	.word	0xe74f2f12
 800a558:	3fd0528a 	.word	0x3fd0528a
 800a55c:	817b95a3 	.word	0x817b95a3
 800a560:	3fe6a159 	.word	0x3fe6a159
 800a564:	908e581d 	.word	0x908e581d
 800a568:	3ffa7c81 	.word	0x3ffa7c81
 800a56c:	d35eb745 	.word	0xd35eb745
 800a570:	3fa28283 	.word	0x3fa28283
 800a574:	578e5c4f 	.word	0x578e5c4f
 800a578:	3faa7a20 	.word	0x3faa7a20
 800a57c:	0ae9680e 	.word	0x0ae9680e
 800a580:	3fbf11b6 	.word	0x3fbf11b6
 800a584:	14cec41e 	.word	0x14cec41e
 800a588:	3ff02f3a 	.word	0x3ff02f3a

0800a58c <set_color_xy>:

void set_color_xy(float x, float y, float brightness){
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	ed87 0a03 	vstr	s0, [r7, #12]
 800a596:	edc7 0a02 	vstr	s1, [r7, #8]
 800a59a:	ed87 1a01 	vstr	s2, [r7, #4]
	struct RGB_t RGB = xy_to_RGB(x, y, brightness);
 800a59e:	f107 0310 	add.w	r3, r7, #16
 800a5a2:	ed97 1a01 	vldr	s2, [r7, #4]
 800a5a6:	edd7 0a02 	vldr	s1, [r7, #8]
 800a5aa:	ed97 0a03 	vldr	s0, [r7, #12]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7ff fdd6 	bl	800a160 <xy_to_RGB>
    printf("R: %d, G: %d, B: %d", RGB.red, RGB.green, RGB.blue);
 800a5b4:	8a3b      	ldrh	r3, [r7, #16]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	8a7b      	ldrh	r3, [r7, #18]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	8abb      	ldrh	r3, [r7, #20]
 800a5be:	4806      	ldr	r0, [pc, #24]	@ (800a5d8 <set_color_xy+0x4c>)
 800a5c0:	f00a ffe2 	bl	8015588 <iprintf>

	set_RGB(RGB.red, RGB.green, RGB.blue);
 800a5c4:	8a3b      	ldrh	r3, [r7, #16]
 800a5c6:	8a79      	ldrh	r1, [r7, #18]
 800a5c8:	8aba      	ldrh	r2, [r7, #20]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fd2c 	bl	800a028 <set_RGB>
}
 800a5d0:	bf00      	nop
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	08017714 	.word	0x08017714

0800a5dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a618 <HAL_Init+0x3c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a0b      	ldr	r2, [pc, #44]	@ (800a618 <HAL_Init+0x3c>)
 800a5ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5f2:	2003      	movs	r0, #3
 800a5f4:	f001 f9d2 	bl	800b99c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5f8:	200f      	movs	r0, #15
 800a5fa:	f000 f80f 	bl	800a61c <HAL_InitTick>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	71fb      	strb	r3, [r7, #7]
 800a608:	e001      	b.n	800a60e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a60a:	f7ff f94a 	bl	80098a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a60e:	79fb      	ldrb	r3, [r7, #7]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	58004000 	.word	0x58004000

0800a61c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800a628:	4b17      	ldr	r3, [pc, #92]	@ (800a688 <HAL_InitTick+0x6c>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d024      	beq.n	800a67a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a630:	f002 fee6 	bl	800d400 <HAL_RCC_GetHCLKFreq>
 800a634:	4602      	mov	r2, r0
 800a636:	4b14      	ldr	r3, [pc, #80]	@ (800a688 <HAL_InitTick+0x6c>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	4619      	mov	r1, r3
 800a63c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a640:	fbb3 f3f1 	udiv	r3, r3, r1
 800a644:	fbb2 f3f3 	udiv	r3, r2, r3
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 f9da 	bl	800ba02 <HAL_SYSTICK_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10f      	bne.n	800a674 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d809      	bhi.n	800a66e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a65a:	2200      	movs	r2, #0
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	f04f 30ff 	mov.w	r0, #4294967295
 800a662:	f001 f9a6 	bl	800b9b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a666:	4a09      	ldr	r2, [pc, #36]	@ (800a68c <HAL_InitTick+0x70>)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	e007      	b.n	800a67e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	73fb      	strb	r3, [r7, #15]
 800a672:	e004      	b.n	800a67e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	73fb      	strb	r3, [r7, #15]
 800a678:	e001      	b.n	800a67e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000010 	.word	0x20000010
 800a68c:	2000000c 	.word	0x2000000c

0800a690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a690:	b480      	push	{r7}
 800a692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a694:	4b06      	ldr	r3, [pc, #24]	@ (800a6b0 <HAL_IncTick+0x20>)
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	461a      	mov	r2, r3
 800a69a:	4b06      	ldr	r3, [pc, #24]	@ (800a6b4 <HAL_IncTick+0x24>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4413      	add	r3, r2
 800a6a0:	4a04      	ldr	r2, [pc, #16]	@ (800a6b4 <HAL_IncTick+0x24>)
 800a6a2:	6013      	str	r3, [r2, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	20000010 	.word	0x20000010
 800a6b4:	20000488 	.word	0x20000488

0800a6b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
  return uwTick;
 800a6bc:	4b03      	ldr	r3, [pc, #12]	@ (800a6cc <HAL_GetTick+0x14>)
 800a6be:	681b      	ldr	r3, [r3, #0]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	20000488 	.word	0x20000488

0800a6d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800a6d4:	4b03      	ldr	r3, [pc, #12]	@ (800a6e4 <HAL_GetTickPrio+0x14>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	2000000c 	.word	0x2000000c

0800a6e8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800a6ec:	4b03      	ldr	r3, [pc, #12]	@ (800a6fc <HAL_GetTickFreq+0x14>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20000010 	.word	0x20000010

0800a700 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	431a      	orrs	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a726:	b480      	push	{r7}
 800a728:	b083      	sub	sp, #12
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	431a      	orrs	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	609a      	str	r2, [r3, #8]
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3360      	adds	r3, #96	@ 0x60
 800a77a:	461a      	mov	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b08      	ldr	r3, [pc, #32]	@ (800a7ac <LL_ADC_SetOffset+0x44>)
 800a78a:	4013      	ands	r3, r2
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	430a      	orrs	r2, r1
 800a796:	4313      	orrs	r3, r2
 800a798:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a7a0:	bf00      	nop
 800a7a2:	371c      	adds	r7, #28
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	03fff000 	.word	0x03fff000

0800a7b0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3360      	adds	r3, #96	@ 0x60
 800a7be:	461a      	mov	r2, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3360      	adds	r3, #96	@ 0x60
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	431a      	orrs	r2, r3
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a806:	bf00      	nop
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a826:	2301      	movs	r3, #1
 800a828:	e000      	b.n	800a82c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a82a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3330      	adds	r3, #48	@ 0x30
 800a848:	461a      	mov	r2, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	f003 030c 	and.w	r3, r3, #12
 800a854:	4413      	add	r3, r2
 800a856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f003 031f 	and.w	r3, r3, #31
 800a862:	211f      	movs	r1, #31
 800a864:	fa01 f303 	lsl.w	r3, r1, r3
 800a868:	43db      	mvns	r3, r3
 800a86a:	401a      	ands	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	0e9b      	lsrs	r3, r3, #26
 800a870:	f003 011f 	and.w	r1, r3, #31
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f003 031f 	and.w	r3, r3, #31
 800a87a:	fa01 f303 	lsl.w	r3, r1, r3
 800a87e:	431a      	orrs	r2, r3
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a884:	bf00      	nop
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3314      	adds	r3, #20
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	0e5b      	lsrs	r3, r3, #25
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	4413      	add	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	0d1b      	lsrs	r3, r3, #20
 800a8b8:	f003 031f 	and.w	r3, r3, #31
 800a8bc:	2107      	movs	r1, #7
 800a8be:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c2:	43db      	mvns	r3, r3
 800a8c4:	401a      	ands	r2, r3
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	0d1b      	lsrs	r3, r3, #20
 800a8ca:	f003 031f 	and.w	r3, r3, #31
 800a8ce:	6879      	ldr	r1, [r7, #4]
 800a8d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800a8da:	bf00      	nop
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
	...

0800a8e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a900:	43db      	mvns	r3, r3
 800a902:	401a      	ands	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f003 0318 	and.w	r3, r3, #24
 800a90a:	4908      	ldr	r1, [pc, #32]	@ (800a92c <LL_ADC_SetChannelSingleDiff+0x44>)
 800a90c:	40d9      	lsrs	r1, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	400b      	ands	r3, r1
 800a912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a916:	431a      	orrs	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	0007ffff 	.word	0x0007ffff

0800a930 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6093      	str	r3, [r2, #8]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a968:	d101      	bne.n	800a96e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a98c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a990:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9b8:	d101      	bne.n	800a9be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e000      	b.n	800a9c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a9e0:	f043 0201 	orr.w	r2, r3, #1
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <LL_ADC_IsEnabled+0x18>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <LL_ADC_IsEnabled+0x1a>
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aa2e:	f043 0204 	orr.w	r2, r3, #4
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d101      	bne.n	800aa5a <LL_ADC_REG_IsConversionOngoing+0x18>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d101      	bne.n	800aa80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e000      	b.n	800aa82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e12e      	b.n	800ad0c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7fe ff01 	bl	80098c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7ff ff3d 	bl	800a954 <LL_ADC_IsDeepPowerDownEnabled>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff ff23 	bl	800a930 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7ff ff58 	bl	800a9a4 <LL_ADC_IsInternalRegulatorEnabled>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d115      	bne.n	800ab26 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff ff3c 	bl	800a97c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ab04:	4b83      	ldr	r3, [pc, #524]	@ (800ad14 <HAL_ADC_Init+0x284>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	099b      	lsrs	r3, r3, #6
 800ab0a:	4a83      	ldr	r2, [pc, #524]	@ (800ad18 <HAL_ADC_Init+0x288>)
 800ab0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab10:	099b      	lsrs	r3, r3, #6
 800ab12:	3301      	adds	r3, #1
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ab18:	e002      	b.n	800ab20 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f9      	bne.n	800ab1a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff ff3a 	bl	800a9a4 <LL_ADC_IsInternalRegulatorEnabled>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10d      	bne.n	800ab52 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab3a:	f043 0210 	orr.w	r2, r3, #16
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab46:	f043 0201 	orr.w	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff ff73 	bl	800aa42 <LL_ADC_REG_IsConversionOngoing>
 800ab5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f040 80c7 	bne.w	800acfa <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f040 80c3 	bne.w	800acfa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800ab7c:	f043 0202 	orr.w	r2, r3, #2
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff ff33 	bl	800a9f4 <LL_ADC_IsEnabled>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ab94:	4861      	ldr	r0, [pc, #388]	@ (800ad1c <HAL_ADC_Init+0x28c>)
 800ab96:	f7ff ff2d 	bl	800a9f4 <LL_ADC_IsEnabled>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d105      	bne.n	800abac <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4619      	mov	r1, r3
 800aba6:	485e      	ldr	r0, [pc, #376]	@ (800ad20 <HAL_ADC_Init+0x290>)
 800aba8:	f7ff fdaa 	bl	800a700 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7e5b      	ldrb	r3, [r3, #25]
 800abb0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800abb6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800abbc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800abc2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abca:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800abcc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d106      	bne.n	800abec <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe2:	3b01      	subs	r3, #1
 800abe4:	045b      	lsls	r3, r3, #17
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	4313      	orrs	r3, r2
 800abea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d009      	beq.n	800ac08 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	4b45      	ldr	r3, [pc, #276]	@ (800ad24 <HAL_ADC_Init+0x294>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6812      	ldr	r2, [r2, #0]
 800ac16:	69b9      	ldr	r1, [r7, #24]
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ff0e 	bl	800aa42 <LL_ADC_REG_IsConversionOngoing>
 800ac26:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff ff1b 	bl	800aa68 <LL_ADC_INJ_IsConversionOngoing>
 800ac32:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d13d      	bne.n	800acb6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d13a      	bne.n	800acb6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800ac44:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac4c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac5c:	f023 0302 	bic.w	r3, r3, #2
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	69b9      	ldr	r1, [r7, #24]
 800ac66:	430b      	orrs	r3, r1
 800ac68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d118      	bne.n	800aca6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ac7e:	f023 0304 	bic.w	r3, r3, #4
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ac8a:	4311      	orrs	r1, r2
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ac90:	4311      	orrs	r1, r2
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ac96:	430a      	orrs	r2, r1
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0201 	orr.w	r2, r2, #1
 800aca2:	611a      	str	r2, [r3, #16]
 800aca4:	e007      	b.n	800acb6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 0201 	bic.w	r2, r2, #1
 800acb4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d10c      	bne.n	800acd8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc4:	f023 010f 	bic.w	r1, r3, #15
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	1e5a      	subs	r2, r3, #1
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	631a      	str	r2, [r3, #48]	@ 0x30
 800acd6:	e007      	b.n	800ace8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 020f 	bic.w	r2, r2, #15
 800ace6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acec:	f023 0303 	bic.w	r3, r3, #3
 800acf0:	f043 0201 	orr.w	r2, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	655a      	str	r2, [r3, #84]	@ 0x54
 800acf8:	e007      	b.n	800ad0a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acfe:	f043 0210 	orr.w	r2, r3, #16
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800ad0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3720      	adds	r7, #32
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20000008 	.word	0x20000008
 800ad18:	053e2d63 	.word	0x053e2d63
 800ad1c:	50040000 	.word	0x50040000
 800ad20:	50040300 	.word	0x50040300
 800ad24:	fff0c007 	.word	0xfff0c007

0800ad28 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff fe84 	bl	800aa42 <LL_ADC_REG_IsConversionOngoing>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d140      	bne.n	800adc2 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d101      	bne.n	800ad4e <HAL_ADC_Start+0x26>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e03c      	b.n	800adc8 <HAL_ADC_Start+0xa0>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fc9a 	bl	800b690 <ADC_Enable>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d128      	bne.n	800adb8 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad6a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ad6e:	f023 0301 	bic.w	r3, r3, #1
 800ad72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad86:	d106      	bne.n	800ad96 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad8c:	f023 0206 	bic.w	r2, r3, #6
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	659a      	str	r2, [r3, #88]	@ 0x58
 800ad94:	e002      	b.n	800ad9c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	221c      	movs	r2, #28
 800ada2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7ff fe32 	bl	800aa1a <LL_ADC_REG_StartConversion>
 800adb6:	e006      	b.n	800adc6 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800adc0:	e001      	b.n	800adc6 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800adc2:	2302      	movs	r3, #2
 800adc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	2b08      	cmp	r3, #8
 800ade0:	d102      	bne.n	800ade8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800ade2:	2308      	movs	r3, #8
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	e010      	b.n	800ae0a <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adfa:	f043 0220 	orr.w	r2, r3, #32
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e06d      	b.n	800aee2 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800ae06:	2304      	movs	r3, #4
 800ae08:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800ae0a:	f7ff fc55 	bl	800a6b8 <HAL_GetTick>
 800ae0e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ae10:	e021      	b.n	800ae56 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d01d      	beq.n	800ae56 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800ae1a:	f7ff fc4d 	bl	800a6b8 <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d302      	bcc.n	800ae30 <HAL_ADC_PollForConversion+0x60>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d112      	bne.n	800ae56 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4013      	ands	r3, r2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10b      	bne.n	800ae56 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae42:	f043 0204 	orr.w	r2, r3, #4
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e045      	b.n	800aee2 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0d6      	beq.n	800ae12 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7ff fccc 	bl	800a812 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d01c      	beq.n	800aeba <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7e5b      	ldrb	r3, [r3, #25]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d118      	bne.n	800aeba <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0308 	and.w	r3, r3, #8
 800ae92:	2b08      	cmp	r3, #8
 800ae94:	d111      	bne.n	800aeba <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d105      	bne.n	800aeba <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb2:	f043 0201 	orr.w	r2, r3, #1
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2b08      	cmp	r3, #8
 800aebe:	d104      	bne.n	800aeca <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2208      	movs	r2, #8
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	e00a      	b.n	800aee0 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d103      	bne.n	800aee0 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	220c      	movs	r2, #12
 800aede:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b0b6      	sub	sp, #216	@ 0xd8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d101      	bne.n	800af26 <HAL_ADC_ConfigChannel+0x22>
 800af22:	2302      	movs	r3, #2
 800af24:	e39f      	b.n	800b666 <HAL_ADC_ConfigChannel+0x762>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fd85 	bl	800aa42 <LL_ADC_REG_IsConversionOngoing>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f040 8384 	bne.w	800b648 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6818      	ldr	r0, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	6859      	ldr	r1, [r3, #4]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	461a      	mov	r2, r3
 800af4e:	f7ff fc73 	bl	800a838 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff fd73 	bl	800aa42 <LL_ADC_REG_IsConversionOngoing>
 800af5c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fd7f 	bl	800aa68 <LL_ADC_INJ_IsConversionOngoing>
 800af6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800af6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800af72:	2b00      	cmp	r3, #0
 800af74:	f040 81a6 	bne.w	800b2c4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800af78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f040 81a1 	bne.w	800b2c4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	6819      	ldr	r1, [r3, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	461a      	mov	r2, r3
 800af90:	f7ff fc7e 	bl	800a890 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	695a      	ldr	r2, [r3, #20]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	08db      	lsrs	r3, r3, #3
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	fa02 f303 	lsl.w	r3, r2, r3
 800afaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	d00a      	beq.n	800afcc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	6919      	ldr	r1, [r3, #16]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800afc6:	f7ff fbcf 	bl	800a768 <LL_ADC_SetOffset>
 800afca:	e17b      	b.n	800b2c4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2100      	movs	r1, #0
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fbec 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800afd8:	4603      	mov	r3, r0
 800afda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <HAL_ADC_ConfigChannel+0xf4>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2100      	movs	r1, #0
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff fbe1 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800afee:	4603      	mov	r3, r0
 800aff0:	0e9b      	lsrs	r3, r3, #26
 800aff2:	f003 021f 	and.w	r2, r3, #31
 800aff6:	e01e      	b.n	800b036 <HAL_ADC_ConfigChannel+0x132>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2100      	movs	r1, #0
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fbd6 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b004:	4603      	mov	r3, r0
 800b006:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b00a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b00e:	fa93 f3a3 	rbit	r3, r3
 800b012:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800b016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b01a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800b01e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800b026:	2320      	movs	r3, #32
 800b028:	e004      	b.n	800b034 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800b02a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b02e:	fab3 f383 	clz	r3, r3
 800b032:	b2db      	uxtb	r3, r3
 800b034:	461a      	mov	r2, r3
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d105      	bne.n	800b04e <HAL_ADC_ConfigChannel+0x14a>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	0e9b      	lsrs	r3, r3, #26
 800b048:	f003 031f 	and.w	r3, r3, #31
 800b04c:	e018      	b.n	800b080 <HAL_ADC_ConfigChannel+0x17c>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b056:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b05a:	fa93 f3a3 	rbit	r3, r3
 800b05e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b066:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b06a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800b072:	2320      	movs	r3, #32
 800b074:	e004      	b.n	800b080 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800b076:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b07a:	fab3 f383 	clz	r3, r3
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	429a      	cmp	r2, r3
 800b082:	d106      	bne.n	800b092 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2200      	movs	r2, #0
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7ff fba5 	bl	800a7dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2101      	movs	r1, #1
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff fb89 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <HAL_ADC_ConfigChannel+0x1ba>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7ff fb7e 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	0e9b      	lsrs	r3, r3, #26
 800b0b8:	f003 021f 	and.w	r2, r3, #31
 800b0bc:	e01e      	b.n	800b0fc <HAL_ADC_ConfigChannel+0x1f8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff fb73 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0d4:	fa93 f3a3 	rbit	r3, r3
 800b0d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b0dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b0e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800b0ec:	2320      	movs	r3, #32
 800b0ee:	e004      	b.n	800b0fa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800b0f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0f4:	fab3 f383 	clz	r3, r3
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b104:	2b00      	cmp	r3, #0
 800b106:	d105      	bne.n	800b114 <HAL_ADC_ConfigChannel+0x210>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	0e9b      	lsrs	r3, r3, #26
 800b10e:	f003 031f 	and.w	r3, r3, #31
 800b112:	e018      	b.n	800b146 <HAL_ADC_ConfigChannel+0x242>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b120:	fa93 f3a3 	rbit	r3, r3
 800b124:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b128:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b12c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800b138:	2320      	movs	r3, #32
 800b13a:	e004      	b.n	800b146 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800b13c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b140:	fab3 f383 	clz	r3, r3
 800b144:	b2db      	uxtb	r3, r3
 800b146:	429a      	cmp	r2, r3
 800b148:	d106      	bne.n	800b158 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2200      	movs	r2, #0
 800b150:	2101      	movs	r1, #1
 800b152:	4618      	mov	r0, r3
 800b154:	f7ff fb42 	bl	800a7dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2102      	movs	r1, #2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff fb26 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b164:	4603      	mov	r3, r0
 800b166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <HAL_ADC_ConfigChannel+0x280>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2102      	movs	r1, #2
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fb1b 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b17a:	4603      	mov	r3, r0
 800b17c:	0e9b      	lsrs	r3, r3, #26
 800b17e:	f003 021f 	and.w	r2, r3, #31
 800b182:	e01e      	b.n	800b1c2 <HAL_ADC_ConfigChannel+0x2be>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2102      	movs	r1, #2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff fb10 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b190:	4603      	mov	r3, r0
 800b192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b19a:	fa93 f3a3 	rbit	r3, r3
 800b19e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b1a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b1aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800b1b2:	2320      	movs	r3, #32
 800b1b4:	e004      	b.n	800b1c0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800b1b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b1ba:	fab3 f383 	clz	r3, r3
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <HAL_ADC_ConfigChannel+0x2d6>
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	0e9b      	lsrs	r3, r3, #26
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	e016      	b.n	800b208 <HAL_ADC_ConfigChannel+0x304>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b1e6:	fa93 f3a3 	rbit	r3, r3
 800b1ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b1ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b1f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800b1fa:	2320      	movs	r3, #32
 800b1fc:	e004      	b.n	800b208 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800b1fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b202:	fab3 f383 	clz	r3, r3
 800b206:	b2db      	uxtb	r3, r3
 800b208:	429a      	cmp	r2, r3
 800b20a:	d106      	bne.n	800b21a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2200      	movs	r2, #0
 800b212:	2102      	movs	r1, #2
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fae1 	bl	800a7dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2103      	movs	r1, #3
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff fac5 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b226:	4603      	mov	r3, r0
 800b228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <HAL_ADC_ConfigChannel+0x342>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2103      	movs	r1, #3
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff faba 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b23c:	4603      	mov	r3, r0
 800b23e:	0e9b      	lsrs	r3, r3, #26
 800b240:	f003 021f 	and.w	r2, r3, #31
 800b244:	e017      	b.n	800b276 <HAL_ADC_ConfigChannel+0x372>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2103      	movs	r1, #3
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff faaf 	bl	800a7b0 <LL_ADC_GetOffsetChannel>
 800b252:	4603      	mov	r3, r0
 800b254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b258:	fa93 f3a3 	rbit	r3, r3
 800b25c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b25e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b260:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800b268:	2320      	movs	r3, #32
 800b26a:	e003      	b.n	800b274 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800b26c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b26e:	fab3 f383 	clz	r3, r3
 800b272:	b2db      	uxtb	r3, r3
 800b274:	461a      	mov	r2, r3
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d105      	bne.n	800b28e <HAL_ADC_ConfigChannel+0x38a>
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	0e9b      	lsrs	r3, r3, #26
 800b288:	f003 031f 	and.w	r3, r3, #31
 800b28c:	e011      	b.n	800b2b2 <HAL_ADC_ConfigChannel+0x3ae>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b296:	fa93 f3a3 	rbit	r3, r3
 800b29a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b29c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b29e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800b2a6:	2320      	movs	r3, #32
 800b2a8:	e003      	b.n	800b2b2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800b2aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ac:	fab3 f383 	clz	r3, r3
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d106      	bne.n	800b2c4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2103      	movs	r1, #3
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fa8c 	bl	800a7dc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff fb93 	bl	800a9f4 <LL_ADC_IsEnabled>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f040 81c2 	bne.w	800b65a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	6819      	ldr	r1, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f7ff fb00 	bl	800a8e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4a8e      	ldr	r2, [pc, #568]	@ (800b528 <HAL_ADC_ConfigChannel+0x624>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	f040 8130 	bne.w	800b554 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10b      	bne.n	800b31c <HAL_ADC_ConfigChannel+0x418>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	0e9b      	lsrs	r3, r3, #26
 800b30a:	3301      	adds	r3, #1
 800b30c:	f003 031f 	and.w	r3, r3, #31
 800b310:	2b09      	cmp	r3, #9
 800b312:	bf94      	ite	ls
 800b314:	2301      	movls	r3, #1
 800b316:	2300      	movhi	r3, #0
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	e019      	b.n	800b350 <HAL_ADC_ConfigChannel+0x44c>
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b324:	fa93 f3a3 	rbit	r3, r3
 800b328:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b32a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b32c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b32e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800b334:	2320      	movs	r3, #32
 800b336:	e003      	b.n	800b340 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800b338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b33a:	fab3 f383 	clz	r3, r3
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	3301      	adds	r3, #1
 800b342:	f003 031f 	and.w	r3, r3, #31
 800b346:	2b09      	cmp	r3, #9
 800b348:	bf94      	ite	ls
 800b34a:	2301      	movls	r3, #1
 800b34c:	2300      	movhi	r3, #0
 800b34e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b350:	2b00      	cmp	r3, #0
 800b352:	d079      	beq.n	800b448 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d107      	bne.n	800b370 <HAL_ADC_ConfigChannel+0x46c>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	0e9b      	lsrs	r3, r3, #26
 800b366:	3301      	adds	r3, #1
 800b368:	069b      	lsls	r3, r3, #26
 800b36a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b36e:	e015      	b.n	800b39c <HAL_ADC_ConfigChannel+0x498>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b378:	fa93 f3a3 	rbit	r3, r3
 800b37c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b37e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b380:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800b388:	2320      	movs	r3, #32
 800b38a:	e003      	b.n	800b394 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800b38c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b38e:	fab3 f383 	clz	r3, r3
 800b392:	b2db      	uxtb	r3, r3
 800b394:	3301      	adds	r3, #1
 800b396:	069b      	lsls	r3, r3, #26
 800b398:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d109      	bne.n	800b3bc <HAL_ADC_ConfigChannel+0x4b8>
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	0e9b      	lsrs	r3, r3, #26
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	f003 031f 	and.w	r3, r3, #31
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ba:	e017      	b.n	800b3ec <HAL_ADC_ConfigChannel+0x4e8>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3c4:	fa93 f3a3 	rbit	r3, r3
 800b3c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b3ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b3ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	e003      	b.n	800b3e0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800b3d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3da:	fab3 f383 	clz	r3, r3
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	f003 031f 	and.w	r3, r3, #31
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ec:	ea42 0103 	orr.w	r1, r2, r3
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <HAL_ADC_ConfigChannel+0x50e>
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	0e9b      	lsrs	r3, r3, #26
 800b402:	3301      	adds	r3, #1
 800b404:	f003 021f 	and.w	r2, r3, #31
 800b408:	4613      	mov	r3, r2
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	4413      	add	r3, r2
 800b40e:	051b      	lsls	r3, r3, #20
 800b410:	e018      	b.n	800b444 <HAL_ADC_ConfigChannel+0x540>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41a:	fa93 f3a3 	rbit	r3, r3
 800b41e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800b42a:	2320      	movs	r3, #32
 800b42c:	e003      	b.n	800b436 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800b42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b430:	fab3 f383 	clz	r3, r3
 800b434:	b2db      	uxtb	r3, r3
 800b436:	3301      	adds	r3, #1
 800b438:	f003 021f 	and.w	r2, r3, #31
 800b43c:	4613      	mov	r3, r2
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	4413      	add	r3, r2
 800b442:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b444:	430b      	orrs	r3, r1
 800b446:	e080      	b.n	800b54a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b450:	2b00      	cmp	r3, #0
 800b452:	d107      	bne.n	800b464 <HAL_ADC_ConfigChannel+0x560>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	0e9b      	lsrs	r3, r3, #26
 800b45a:	3301      	adds	r3, #1
 800b45c:	069b      	lsls	r3, r3, #26
 800b45e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b462:	e015      	b.n	800b490 <HAL_ADC_ConfigChannel+0x58c>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46c:	fa93 f3a3 	rbit	r3, r3
 800b470:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b474:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800b47c:	2320      	movs	r3, #32
 800b47e:	e003      	b.n	800b488 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800b480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b482:	fab3 f383 	clz	r3, r3
 800b486:	b2db      	uxtb	r3, r3
 800b488:	3301      	adds	r3, #1
 800b48a:	069b      	lsls	r3, r3, #26
 800b48c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d109      	bne.n	800b4b0 <HAL_ADC_ConfigChannel+0x5ac>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	0e9b      	lsrs	r3, r3, #26
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	f003 031f 	and.w	r3, r3, #31
 800b4a8:	2101      	movs	r1, #1
 800b4aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ae:	e017      	b.n	800b4e0 <HAL_ADC_ConfigChannel+0x5dc>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	fa93 f3a3 	rbit	r3, r3
 800b4bc:	61fb      	str	r3, [r7, #28]
  return result;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	e003      	b.n	800b4d4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ce:	fab3 f383 	clz	r3, r3
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	f003 031f 	and.w	r3, r3, #31
 800b4da:	2101      	movs	r1, #1
 800b4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e0:	ea42 0103 	orr.w	r1, r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10d      	bne.n	800b50c <HAL_ADC_ConfigChannel+0x608>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	0e9b      	lsrs	r3, r3, #26
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	f003 021f 	and.w	r2, r3, #31
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	005b      	lsls	r3, r3, #1
 800b500:	4413      	add	r3, r2
 800b502:	3b1e      	subs	r3, #30
 800b504:	051b      	lsls	r3, r3, #20
 800b506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b50a:	e01d      	b.n	800b548 <HAL_ADC_ConfigChannel+0x644>
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	fa93 f3a3 	rbit	r3, r3
 800b518:	613b      	str	r3, [r7, #16]
  return result;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d103      	bne.n	800b52c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800b524:	2320      	movs	r3, #32
 800b526:	e005      	b.n	800b534 <HAL_ADC_ConfigChannel+0x630>
 800b528:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	fab3 f383 	clz	r3, r3
 800b532:	b2db      	uxtb	r3, r3
 800b534:	3301      	adds	r3, #1
 800b536:	f003 021f 	and.w	r2, r3, #31
 800b53a:	4613      	mov	r3, r2
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	4413      	add	r3, r2
 800b540:	3b1e      	subs	r3, #30
 800b542:	051b      	lsls	r3, r3, #20
 800b544:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b548:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b54e:	4619      	mov	r1, r3
 800b550:	f7ff f99e 	bl	800a890 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	4b45      	ldr	r3, [pc, #276]	@ (800b670 <HAL_ADC_ConfigChannel+0x76c>)
 800b55a:	4013      	ands	r3, r2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d07c      	beq.n	800b65a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b560:	4844      	ldr	r0, [pc, #272]	@ (800b674 <HAL_ADC_ConfigChannel+0x770>)
 800b562:	f7ff f8f3 	bl	800a74c <LL_ADC_GetCommonPathInternalCh>
 800b566:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b56a:	4843      	ldr	r0, [pc, #268]	@ (800b678 <HAL_ADC_ConfigChannel+0x774>)
 800b56c:	f7ff fa42 	bl	800a9f4 <LL_ADC_IsEnabled>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d15e      	bne.n	800b634 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a40      	ldr	r2, [pc, #256]	@ (800b67c <HAL_ADC_ConfigChannel+0x778>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d127      	bne.n	800b5d0 <HAL_ADC_ConfigChannel+0x6cc>
 800b580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b584:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d121      	bne.n	800b5d0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a39      	ldr	r2, [pc, #228]	@ (800b678 <HAL_ADC_ConfigChannel+0x774>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d161      	bne.n	800b65a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b59a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4834      	ldr	r0, [pc, #208]	@ (800b674 <HAL_ADC_ConfigChannel+0x770>)
 800b5a2:	f7ff f8c0 	bl	800a726 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b5a6:	4b36      	ldr	r3, [pc, #216]	@ (800b680 <HAL_ADC_ConfigChannel+0x77c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	099b      	lsrs	r3, r3, #6
 800b5ac:	4a35      	ldr	r2, [pc, #212]	@ (800b684 <HAL_ADC_ConfigChannel+0x780>)
 800b5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b2:	099b      	lsrs	r3, r3, #6
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b5c0:	e002      	b.n	800b5c8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1f9      	bne.n	800b5c2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b5ce:	e044      	b.n	800b65a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a2c      	ldr	r2, [pc, #176]	@ (800b688 <HAL_ADC_ConfigChannel+0x784>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d113      	bne.n	800b602 <HAL_ADC_ConfigChannel+0x6fe>
 800b5da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b5de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10d      	bne.n	800b602 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a23      	ldr	r2, [pc, #140]	@ (800b678 <HAL_ADC_ConfigChannel+0x774>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d134      	bne.n	800b65a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b5f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b5f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	481e      	ldr	r0, [pc, #120]	@ (800b674 <HAL_ADC_ConfigChannel+0x770>)
 800b5fc:	f7ff f893 	bl	800a726 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b600:	e02b      	b.n	800b65a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a21      	ldr	r2, [pc, #132]	@ (800b68c <HAL_ADC_ConfigChannel+0x788>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d126      	bne.n	800b65a <HAL_ADC_ConfigChannel+0x756>
 800b60c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d120      	bne.n	800b65a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a16      	ldr	r2, [pc, #88]	@ (800b678 <HAL_ADC_ConfigChannel+0x774>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d11b      	bne.n	800b65a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b626:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b62a:	4619      	mov	r1, r3
 800b62c:	4811      	ldr	r0, [pc, #68]	@ (800b674 <HAL_ADC_ConfigChannel+0x770>)
 800b62e:	f7ff f87a 	bl	800a726 <LL_ADC_SetCommonPathInternalCh>
 800b632:	e012      	b.n	800b65a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b638:	f043 0220 	orr.w	r2, r3, #32
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b646:	e008      	b.n	800b65a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b64c:	f043 0220 	orr.w	r2, r3, #32
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800b662:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b666:	4618      	mov	r0, r3
 800b668:	37d8      	adds	r7, #216	@ 0xd8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	80080000 	.word	0x80080000
 800b674:	50040300 	.word	0x50040300
 800b678:	50040000 	.word	0x50040000
 800b67c:	c7520000 	.word	0xc7520000
 800b680:	20000008 	.word	0x20000008
 800b684:	053e2d63 	.word	0x053e2d63
 800b688:	cb840000 	.word	0xcb840000
 800b68c:	80000001 	.word	0x80000001

0800b690 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b698:	2300      	movs	r3, #0
 800b69a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff f9a7 	bl	800a9f4 <LL_ADC_IsEnabled>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d15e      	bne.n	800b76a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	4b30      	ldr	r3, [pc, #192]	@ (800b774 <ADC_Enable+0xe4>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00d      	beq.n	800b6d6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6be:	f043 0210 	orr.w	r2, r3, #16
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ca:	f043 0201 	orr.w	r2, r3, #1
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e04a      	b.n	800b76c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff f976 	bl	800a9cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b6e0:	4825      	ldr	r0, [pc, #148]	@ (800b778 <ADC_Enable+0xe8>)
 800b6e2:	f7ff f833 	bl	800a74c <LL_ADC_GetCommonPathInternalCh>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00f      	beq.n	800b710 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b6f0:	4b22      	ldr	r3, [pc, #136]	@ (800b77c <ADC_Enable+0xec>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	099b      	lsrs	r3, r3, #6
 800b6f6:	4a22      	ldr	r2, [pc, #136]	@ (800b780 <ADC_Enable+0xf0>)
 800b6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fc:	099b      	lsrs	r3, r3, #6
 800b6fe:	3301      	adds	r3, #1
 800b700:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800b702:	e002      	b.n	800b70a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3b01      	subs	r3, #1
 800b708:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1f9      	bne.n	800b704 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800b710:	f7fe ffd2 	bl	800a6b8 <HAL_GetTick>
 800b714:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b716:	e021      	b.n	800b75c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff f969 	bl	800a9f4 <LL_ADC_IsEnabled>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d104      	bne.n	800b732 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff f94d 	bl	800a9cc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b732:	f7fe ffc1 	bl	800a6b8 <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d90d      	bls.n	800b75c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b744:	f043 0210 	orr.w	r2, r3, #16
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b750:	f043 0201 	orr.w	r2, r3, #1
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e007      	b.n	800b76c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b01      	cmp	r3, #1
 800b768:	d1d6      	bne.n	800b718 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	8000003f 	.word	0x8000003f
 800b778:	50040300 	.word	0x50040300
 800b77c:	20000008 	.word	0x20000008
 800b780:	053e2d63 	.word	0x053e2d63

0800b784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b794:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b7b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7b6:	4a04      	ldr	r2, [pc, #16]	@ (800b7c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	60d3      	str	r3, [r2, #12]
}
 800b7bc:	bf00      	nop
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000ed00 	.word	0xe000ed00

0800b7cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7d0:	4b04      	ldr	r3, [pc, #16]	@ (800b7e4 <__NVIC_GetPriorityGrouping+0x18>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	0a1b      	lsrs	r3, r3, #8
 800b7d6:	f003 0307 	and.w	r3, r3, #7
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	e000ed00 	.word	0xe000ed00

0800b7e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	db0b      	blt.n	800b812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	f003 021f 	and.w	r2, r3, #31
 800b800:	4907      	ldr	r1, [pc, #28]	@ (800b820 <__NVIC_EnableIRQ+0x38>)
 800b802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	2001      	movs	r0, #1
 800b80a:	fa00 f202 	lsl.w	r2, r0, r2
 800b80e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b812:	bf00      	nop
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	e000e100 	.word	0xe000e100

0800b824 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b82e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b832:	2b00      	cmp	r3, #0
 800b834:	db0c      	blt.n	800b850 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	f003 021f 	and.w	r2, r3, #31
 800b83c:	4907      	ldr	r1, [pc, #28]	@ (800b85c <__NVIC_SetPendingIRQ+0x38>)
 800b83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	2001      	movs	r0, #1
 800b846:	fa00 f202 	lsl.w	r2, r0, r2
 800b84a:	3340      	adds	r3, #64	@ 0x40
 800b84c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	e000e100 	.word	0xe000e100

0800b860 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	db0c      	blt.n	800b88c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	f003 021f 	and.w	r2, r3, #31
 800b878:	4907      	ldr	r1, [pc, #28]	@ (800b898 <__NVIC_ClearPendingIRQ+0x38>)
 800b87a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b87e:	095b      	lsrs	r3, r3, #5
 800b880:	2001      	movs	r0, #1
 800b882:	fa00 f202 	lsl.w	r2, r0, r2
 800b886:	3360      	adds	r3, #96	@ 0x60
 800b888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	e000e100 	.word	0xe000e100

0800b89c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	6039      	str	r1, [r7, #0]
 800b8a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	db0a      	blt.n	800b8c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	490c      	ldr	r1, [pc, #48]	@ (800b8e8 <__NVIC_SetPriority+0x4c>)
 800b8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8ba:	0112      	lsls	r2, r2, #4
 800b8bc:	b2d2      	uxtb	r2, r2
 800b8be:	440b      	add	r3, r1
 800b8c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b8c4:	e00a      	b.n	800b8dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	4908      	ldr	r1, [pc, #32]	@ (800b8ec <__NVIC_SetPriority+0x50>)
 800b8cc:	79fb      	ldrb	r3, [r7, #7]
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	3b04      	subs	r3, #4
 800b8d4:	0112      	lsls	r2, r2, #4
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	440b      	add	r3, r1
 800b8da:	761a      	strb	r2, [r3, #24]
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	e000e100 	.word	0xe000e100
 800b8ec:	e000ed00 	.word	0xe000ed00

0800b8f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b089      	sub	sp, #36	@ 0x24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	f1c3 0307 	rsb	r3, r3, #7
 800b90a:	2b04      	cmp	r3, #4
 800b90c:	bf28      	it	cs
 800b90e:	2304      	movcs	r3, #4
 800b910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	3304      	adds	r3, #4
 800b916:	2b06      	cmp	r3, #6
 800b918:	d902      	bls.n	800b920 <NVIC_EncodePriority+0x30>
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	3b03      	subs	r3, #3
 800b91e:	e000      	b.n	800b922 <NVIC_EncodePriority+0x32>
 800b920:	2300      	movs	r3, #0
 800b922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b924:	f04f 32ff 	mov.w	r2, #4294967295
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	fa02 f303 	lsl.w	r3, r2, r3
 800b92e:	43da      	mvns	r2, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	401a      	ands	r2, r3
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b938:	f04f 31ff 	mov.w	r1, #4294967295
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	fa01 f303 	lsl.w	r3, r1, r3
 800b942:	43d9      	mvns	r1, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b948:	4313      	orrs	r3, r2
         );
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3724      	adds	r7, #36	@ 0x24
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3b01      	subs	r3, #1
 800b964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b968:	d301      	bcc.n	800b96e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b96a:	2301      	movs	r3, #1
 800b96c:	e00f      	b.n	800b98e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b96e:	4a0a      	ldr	r2, [pc, #40]	@ (800b998 <SysTick_Config+0x40>)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3b01      	subs	r3, #1
 800b974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b976:	210f      	movs	r1, #15
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	f7ff ff8e 	bl	800b89c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b980:	4b05      	ldr	r3, [pc, #20]	@ (800b998 <SysTick_Config+0x40>)
 800b982:	2200      	movs	r2, #0
 800b984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b986:	4b04      	ldr	r3, [pc, #16]	@ (800b998 <SysTick_Config+0x40>)
 800b988:	2207      	movs	r2, #7
 800b98a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	e000e010 	.word	0xe000e010

0800b99c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff feed 	bl	800b784 <__NVIC_SetPriorityGrouping>
}
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b9c0:	f7ff ff04 	bl	800b7cc <__NVIC_GetPriorityGrouping>
 800b9c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	68b9      	ldr	r1, [r7, #8]
 800b9ca:	6978      	ldr	r0, [r7, #20]
 800b9cc:	f7ff ff90 	bl	800b8f0 <NVIC_EncodePriority>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff ff5f 	bl	800b89c <__NVIC_SetPriority>
}
 800b9de:	bf00      	nop
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b9f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fef7 	bl	800b7e8 <__NVIC_EnableIRQ>
}
 800b9fa:	bf00      	nop
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f7ff ffa4 	bl	800b958 <SysTick_Config>
 800ba10:	4603      	mov	r3, r0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	4603      	mov	r3, r0
 800ba22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800ba24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fefb 	bl	800b824 <__NVIC_SetPendingIRQ>
}
 800ba2e:	bf00      	nop
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800ba40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff ff0b 	bl	800b860 <__NVIC_ClearPendingIRQ>
}
 800ba4a:	bf00      	nop
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e04f      	b.n	800bb04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d008      	beq.n	800ba82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2204      	movs	r2, #4
 800ba74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e040      	b.n	800bb04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 020e 	bic.w	r2, r2, #14
 800ba90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800baa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f022 0201 	bic.w	r2, r2, #1
 800bab0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bab6:	f003 021c 	and.w	r2, r3, #28
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800babe:	2101      	movs	r1, #1
 800bac0:	fa01 f202 	lsl.w	r2, r1, r2
 800bac4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bace:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00c      	beq.n	800baf2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bae2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bae6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800baf0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d005      	beq.n	800bb34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	73fb      	strb	r3, [r7, #15]
 800bb32:	e047      	b.n	800bbc4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f022 020e 	bic.w	r2, r2, #14
 800bb42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f022 0201 	bic.w	r2, r2, #1
 800bb52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb68:	f003 021c 	and.w	r2, r3, #28
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb70:	2101      	movs	r1, #1
 800bb72:	fa01 f202 	lsl.w	r2, r1, r2
 800bb76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bb80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00c      	beq.n	800bba4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bba2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	4798      	blx	r3
    }
  }
  return status;
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
	...

0800bbd0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bbde:	e14c      	b.n	800be7a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbec:	4013      	ands	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 813e 	beq.w	800be74 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d005      	beq.n	800bc10 <HAL_GPIO_Init+0x40>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f003 0303 	and.w	r3, r3, #3
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d130      	bne.n	800bc72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc20:	43db      	mvns	r3, r3
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4013      	ands	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	68da      	ldr	r2, [r3, #12]
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	fa02 f303 	lsl.w	r3, r2, r3
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc46:	2201      	movs	r2, #1
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc4e:	43db      	mvns	r3, r3
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	4013      	ands	r3, r2
 800bc54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	091b      	lsrs	r3, r3, #4
 800bc5c:	f003 0201 	and.w	r2, r3, #1
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	fa02 f303 	lsl.w	r3, r2, r3
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f003 0303 	and.w	r3, r3, #3
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d017      	beq.n	800bcae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	2203      	movs	r2, #3
 800bc8a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8e:	43db      	mvns	r3, r3
 800bc90:	693a      	ldr	r2, [r7, #16]
 800bc92:	4013      	ands	r3, r2
 800bc94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	689a      	ldr	r2, [r3, #8]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	005b      	lsls	r3, r3, #1
 800bc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f003 0303 	and.w	r3, r3, #3
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d123      	bne.n	800bd02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	08da      	lsrs	r2, r3, #3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3208      	adds	r2, #8
 800bcc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f003 0307 	and.w	r3, r3, #7
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	220f      	movs	r2, #15
 800bcd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd6:	43db      	mvns	r3, r3
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	4013      	ands	r3, r2
 800bcdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	691a      	ldr	r2, [r3, #16]
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f003 0307 	and.w	r3, r3, #7
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	fa02 f303 	lsl.w	r3, r2, r3
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	08da      	lsrs	r2, r3, #3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3208      	adds	r2, #8
 800bcfc:	6939      	ldr	r1, [r7, #16]
 800bcfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	2203      	movs	r2, #3
 800bd0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd12:	43db      	mvns	r3, r3
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	4013      	ands	r3, r2
 800bd18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f003 0203 	and.w	r2, r3, #3
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 8098 	beq.w	800be74 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800bd44:	4a54      	ldr	r2, [pc, #336]	@ (800be98 <HAL_GPIO_Init+0x2c8>)
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	089b      	lsrs	r3, r3, #2
 800bd4a:	3302      	adds	r3, #2
 800bd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f003 0303 	and.w	r3, r3, #3
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	220f      	movs	r2, #15
 800bd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd60:	43db      	mvns	r3, r3
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	4013      	ands	r3, r2
 800bd66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800bd6e:	d019      	beq.n	800bda4 <HAL_GPIO_Init+0x1d4>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a4a      	ldr	r2, [pc, #296]	@ (800be9c <HAL_GPIO_Init+0x2cc>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d013      	beq.n	800bda0 <HAL_GPIO_Init+0x1d0>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a49      	ldr	r2, [pc, #292]	@ (800bea0 <HAL_GPIO_Init+0x2d0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d00d      	beq.n	800bd9c <HAL_GPIO_Init+0x1cc>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a48      	ldr	r2, [pc, #288]	@ (800bea4 <HAL_GPIO_Init+0x2d4>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d007      	beq.n	800bd98 <HAL_GPIO_Init+0x1c8>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a47      	ldr	r2, [pc, #284]	@ (800bea8 <HAL_GPIO_Init+0x2d8>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d101      	bne.n	800bd94 <HAL_GPIO_Init+0x1c4>
 800bd90:	2304      	movs	r3, #4
 800bd92:	e008      	b.n	800bda6 <HAL_GPIO_Init+0x1d6>
 800bd94:	2307      	movs	r3, #7
 800bd96:	e006      	b.n	800bda6 <HAL_GPIO_Init+0x1d6>
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e004      	b.n	800bda6 <HAL_GPIO_Init+0x1d6>
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e002      	b.n	800bda6 <HAL_GPIO_Init+0x1d6>
 800bda0:	2301      	movs	r3, #1
 800bda2:	e000      	b.n	800bda6 <HAL_GPIO_Init+0x1d6>
 800bda4:	2300      	movs	r3, #0
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	f002 0203 	and.w	r2, r2, #3
 800bdac:	0092      	lsls	r2, r2, #2
 800bdae:	4093      	lsls	r3, r2
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800bdb6:	4938      	ldr	r1, [pc, #224]	@ (800be98 <HAL_GPIO_Init+0x2c8>)
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	089b      	lsrs	r3, r3, #2
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bdc4:	4b39      	ldr	r3, [pc, #228]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	43db      	mvns	r3, r3
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bde8:	4a30      	ldr	r2, [pc, #192]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bdee:	4b2f      	ldr	r3, [pc, #188]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	43db      	mvns	r3, r3
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800be06:	2b00      	cmp	r3, #0
 800be08:	d003      	beq.n	800be12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4313      	orrs	r3, r2
 800be10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800be12:	4a26      	ldr	r2, [pc, #152]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800be18:	4b24      	ldr	r3, [pc, #144]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800be1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	43db      	mvns	r3, r3
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4013      	ands	r3, r2
 800be28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800be3e:	4a1b      	ldr	r2, [pc, #108]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800be46:	4b19      	ldr	r3, [pc, #100]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800be48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	43db      	mvns	r3, r3
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4013      	ands	r3, r2
 800be56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4313      	orrs	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800be6c:	4a0f      	ldr	r2, [pc, #60]	@ (800beac <HAL_GPIO_Init+0x2dc>)
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	3301      	adds	r3, #1
 800be78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	fa22 f303 	lsr.w	r3, r2, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	f47f aeab 	bne.w	800bbe0 <HAL_GPIO_Init+0x10>
  }
}
 800be8a:	bf00      	nop
 800be8c:	bf00      	nop
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	40010000 	.word	0x40010000
 800be9c:	48000400 	.word	0x48000400
 800bea0:	48000800 	.word	0x48000800
 800bea4:	48000c00 	.word	0x48000c00
 800bea8:	48001000 	.word	0x48001000
 800beac:	58000800 	.word	0x58000800

0800beb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	807b      	strh	r3, [r7, #2]
 800bebc:	4613      	mov	r3, r2
 800bebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bec0:	787b      	ldrb	r3, [r7, #1]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bec6:	887a      	ldrh	r2, [r7, #2]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800becc:	e002      	b.n	800bed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bece:	887a      	ldrh	r2, [r7, #2]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800bee6:	4b0a      	ldr	r3, [pc, #40]	@ (800bf10 <HAL_HSEM_IRQHandler+0x30>)
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800beec:	4b08      	ldr	r3, [pc, #32]	@ (800bf10 <HAL_HSEM_IRQHandler+0x30>)
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	43db      	mvns	r3, r3
 800bef4:	4906      	ldr	r1, [pc, #24]	@ (800bf10 <HAL_HSEM_IRQHandler+0x30>)
 800bef6:	4013      	ands	r3, r2
 800bef8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800befa:	4a05      	ldr	r2, [pc, #20]	@ (800bf10 <HAL_HSEM_IRQHandler+0x30>)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f807 	bl	800bf14 <HAL_HSEM_FreeCallback>
}
 800bf06:	bf00      	nop
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	58001500 	.word	0x58001500

0800bf14 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e08d      	b.n	800c056 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fd fd08 	bl	8009964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2224      	movs	r2, #36	@ 0x24
 800bf58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f022 0201 	bic.w	r2, r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800bf78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	689a      	ldr	r2, [r3, #8]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bf88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d107      	bne.n	800bfa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	689a      	ldr	r2, [r3, #8]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bf9e:	609a      	str	r2, [r3, #8]
 800bfa0:	e006      	b.n	800bfb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800bfae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d108      	bne.n	800bfca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bfc6:	605a      	str	r2, [r3, #4]
 800bfc8:	e007      	b.n	800bfda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bfd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bfe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68da      	ldr	r2, [r3, #12]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691a      	ldr	r2, [r3, #16]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	430a      	orrs	r2, r1
 800c016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	69d9      	ldr	r1, [r3, #28]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a1a      	ldr	r2, [r3, #32]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f042 0201 	orr.w	r2, r2, #1
 800c036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2220      	movs	r2, #32
 800c042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b20      	cmp	r3, #32
 800c072:	d138      	bne.n	800c0e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d101      	bne.n	800c082 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c07e:	2302      	movs	r3, #2
 800c080:	e032      	b.n	800c0e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2224      	movs	r2, #36	@ 0x24
 800c08e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f022 0201 	bic.w	r2, r2, #1
 800c0a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c0b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	6819      	ldr	r1, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	430a      	orrs	r2, r1
 800c0c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f042 0201 	orr.w	r2, r2, #1
 800c0d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2220      	movs	r2, #32
 800c0d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e000      	b.n	800c0e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c0e6:	2302      	movs	r3, #2
  }
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b20      	cmp	r3, #32
 800c108:	d139      	bne.n	800c17e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c110:	2b01      	cmp	r3, #1
 800c112:	d101      	bne.n	800c118 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c114:	2302      	movs	r3, #2
 800c116:	e033      	b.n	800c180 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2224      	movs	r2, #36	@ 0x24
 800c124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f022 0201 	bic.w	r2, r2, #1
 800c136:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c146:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	021b      	lsls	r3, r3, #8
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f042 0201 	orr.w	r2, r2, #1
 800c168:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e000      	b.n	800c180 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c17e:	2302      	movs	r3, #2
  }
}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d01e      	beq.n	800c1dc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800c19e:	4b13      	ldr	r3, [pc, #76]	@ (800c1ec <HAL_IPCC_Init+0x60>)
 800c1a0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d102      	bne.n	800c1b4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7fd fc20 	bl	80099f4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800c1b4:	68b8      	ldr	r0, [r7, #8]
 800c1b6:	f000 f85b 	bl	800c270 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f82c 	bl	800c224 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c1da:	e001      	b.n	800c1e0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	58000c00 	.word	0x58000c00

0800c1f0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800c20a:	b480      	push	{r7}
 800c20c:	b085      	sub	sp, #20
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	4613      	mov	r3, r2
 800c216:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800c218:	bf00      	nop
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	e00f      	b.n	800c252 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	4413      	add	r3, r2
 800c23a:	4a0b      	ldr	r2, [pc, #44]	@ (800c268 <IPCC_SetDefaultCallbacks+0x44>)
 800c23c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3306      	adds	r3, #6
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	4a08      	ldr	r2, [pc, #32]	@ (800c26c <IPCC_SetDefaultCallbacks+0x48>)
 800c24a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3301      	adds	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b05      	cmp	r3, #5
 800c256:	d9ec      	bls.n	800c232 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800c258:	bf00      	nop
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	0800c1f1 	.word	0x0800c1f1
 800c26c:	0800c20b 	.word	0x0800c20b

0800c270 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800c284:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	223f      	movs	r2, #63	@ 0x3f
 800c28a:	609a      	str	r2, [r3, #8]
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c29c:	4b05      	ldr	r3, [pc, #20]	@ (800c2b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a04      	ldr	r2, [pc, #16]	@ (800c2b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c2a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2a6:	6013      	str	r3, [r2, #0]
}
 800c2a8:	bf00      	nop
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	58000400 	.word	0x58000400

0800c2b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800c2bc:	4b04      	ldr	r3, [pc, #16]	@ (800c2d0 <HAL_PWREx_GetVoltageRange+0x18>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	58000400 	.word	0x58000400

0800c2d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c2d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c2e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2e6:	d101      	bne.n	800c2ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e000      	b.n	800c2ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <LL_RCC_HSE_Enable>:
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c2fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c30a:	6013      	str	r3, [r2, #0]
}
 800c30c:	bf00      	nop
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <LL_RCC_HSE_Disable>:
{
 800c316:	b480      	push	{r7}
 800c318:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c31a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c328:	6013      	str	r3, [r2, #0]
}
 800c32a:	bf00      	nop
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <LL_RCC_HSE_IsReady>:
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c346:	d101      	bne.n	800c34c <LL_RCC_HSE_IsReady+0x18>
 800c348:	2301      	movs	r3, #1
 800c34a:	e000      	b.n	800c34e <LL_RCC_HSE_IsReady+0x1a>
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <LL_RCC_HSI_Enable>:
{
 800c358:	b480      	push	{r7}
 800c35a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c35c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c36a:	6013      	str	r3, [r2, #0]
}
 800c36c:	bf00      	nop
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <LL_RCC_HSI_Disable>:
{
 800c376:	b480      	push	{r7}
 800c378:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c37a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c388:	6013      	str	r3, [r2, #0]
}
 800c38a:	bf00      	nop
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <LL_RCC_HSI_IsReady>:
{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3a6:	d101      	bne.n	800c3ac <LL_RCC_HSI_IsReady+0x18>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <LL_RCC_HSI_IsReady+0x1a>
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c3c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	061b      	lsls	r3, r3, #24
 800c3ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	604b      	str	r3, [r1, #4]
}
 800c3d6:	bf00      	nop
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <LL_RCC_HSI48_Enable>:
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c3e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c3ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3f2:	f043 0301 	orr.w	r3, r3, #1
 800c3f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800c3fa:	bf00      	nop
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <LL_RCC_HSI48_Disable>:
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c414:	f023 0301 	bic.w	r3, r3, #1
 800c418:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800c41c:	bf00      	nop
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <LL_RCC_HSI48_IsReady>:
{
 800c426:	b480      	push	{r7}
 800c428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c42a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c42e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	2b02      	cmp	r3, #2
 800c438:	d101      	bne.n	800c43e <LL_RCC_HSI48_IsReady+0x18>
 800c43a:	2301      	movs	r3, #1
 800c43c:	e000      	b.n	800c440 <LL_RCC_HSI48_IsReady+0x1a>
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <LL_RCC_LSE_Enable>:
{
 800c44a:	b480      	push	{r7}
 800c44c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c44e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c45a:	f043 0301 	orr.w	r3, r3, #1
 800c45e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c462:	bf00      	nop
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <LL_RCC_LSE_Disable>:
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c47c:	f023 0301 	bic.w	r3, r3, #1
 800c480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c484:	bf00      	nop
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <LL_RCC_LSE_EnableBypass>:
{
 800c48e:	b480      	push	{r7}
 800c490:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c49a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c49e:	f043 0304 	orr.w	r3, r3, #4
 800c4a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c4a6:	bf00      	nop
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <LL_RCC_LSE_DisableBypass>:
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c4b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4c0:	f023 0304 	bic.w	r3, r3, #4
 800c4c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c4c8:	bf00      	nop
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr

0800c4d2 <LL_RCC_LSE_IsReady>:
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c4d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4de:	f003 0302 	and.w	r3, r3, #2
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d101      	bne.n	800c4ea <LL_RCC_LSE_IsReady+0x18>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e000      	b.n	800c4ec <LL_RCC_LSE_IsReady+0x1a>
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <LL_RCC_LSI1_Enable>:
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c4fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c502:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c506:	f043 0301 	orr.w	r3, r3, #1
 800c50a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c50e:	bf00      	nop
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <LL_RCC_LSI1_Disable>:
{
 800c518:	b480      	push	{r7}
 800c51a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c524:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c528:	f023 0301 	bic.w	r3, r3, #1
 800c52c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c530:	bf00      	nop
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <LL_RCC_LSI1_IsReady>:
{
 800c53a:	b480      	push	{r7}
 800c53c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c53e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c546:	f003 0302 	and.w	r3, r3, #2
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d101      	bne.n	800c552 <LL_RCC_LSI1_IsReady+0x18>
 800c54e:	2301      	movs	r3, #1
 800c550:	e000      	b.n	800c554 <LL_RCC_LSI1_IsReady+0x1a>
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <LL_RCC_LSI2_Enable>:
{
 800c55e:	b480      	push	{r7}
 800c560:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c56a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c56e:	f043 0304 	orr.w	r3, r3, #4
 800c572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c576:	bf00      	nop
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <LL_RCC_LSI2_Disable>:
{
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c58c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c590:	f023 0304 	bic.w	r3, r3, #4
 800c594:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c598:	bf00      	nop
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <LL_RCC_LSI2_IsReady>:
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c5a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5ae:	f003 0308 	and.w	r3, r3, #8
 800c5b2:	2b08      	cmp	r3, #8
 800c5b4:	d101      	bne.n	800c5ba <LL_RCC_LSI2_IsReady+0x18>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e000      	b.n	800c5bc <LL_RCC_LSI2_IsReady+0x1a>
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <LL_RCC_LSI2_SetTrimming>:
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c5ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	021b      	lsls	r3, r3, #8
 800c5de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <LL_RCC_MSI_Enable>:
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c5f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c602:	f043 0301 	orr.w	r3, r3, #1
 800c606:	6013      	str	r3, [r2, #0]
}
 800c608:	bf00      	nop
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <LL_RCC_MSI_Disable>:
{
 800c612:	b480      	push	{r7}
 800c614:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c620:	f023 0301 	bic.w	r3, r3, #1
 800c624:	6013      	str	r3, [r2, #0]
}
 800c626:	bf00      	nop
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <LL_RCC_MSI_IsReady>:
{
 800c630:	b480      	push	{r7}
 800c632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 0302 	and.w	r3, r3, #2
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d101      	bne.n	800c646 <LL_RCC_MSI_IsReady+0x16>
 800c642:	2301      	movs	r3, #1
 800c644:	e000      	b.n	800c648 <LL_RCC_MSI_IsReady+0x18>
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <LL_RCC_MSI_SetRange>:
{
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c65a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	600b      	str	r3, [r1, #0]
}
 800c66e:	bf00      	nop
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr

0800c67a <LL_RCC_MSI_GetRange>:
{
 800c67a:	b480      	push	{r7}
 800c67c:	b083      	sub	sp, #12
 800c67e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c68a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2bb0      	cmp	r3, #176	@ 0xb0
 800c690:	d901      	bls.n	800c696 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c692:	23b0      	movs	r3, #176	@ 0xb0
 800c694:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c696:	687b      	ldr	r3, [r7, #4]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c6ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	021b      	lsls	r3, r3, #8
 800c6ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	604b      	str	r3, [r1, #4]
}
 800c6c2:	bf00      	nop
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <LL_RCC_SetSysClkSource>:
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b083      	sub	sp, #12
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c6d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f023 0203 	bic.w	r2, r3, #3
 800c6e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	608b      	str	r3, [r1, #8]
}
 800c6ea:	bf00      	nop
 800c6ec:	370c      	adds	r7, #12
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr

0800c6f6 <LL_RCC_GetSysClkSource>:
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c6fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f003 030c 	and.w	r3, r3, #12
}
 800c704:	4618      	mov	r0, r3
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <LL_RCC_SetAHBPrescaler>:
{
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4313      	orrs	r3, r2
 800c728:	608b      	str	r3, [r1, #8]
}
 800c72a:	bf00      	nop
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c73e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c742:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c746:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c74a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4313      	orrs	r3, r2
 800c752:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <LL_RCC_SetAHB4Prescaler>:
{
 800c762:	b480      	push	{r7}
 800c764:	b083      	sub	sp, #12
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c76e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c772:	f023 020f 	bic.w	r2, r3, #15
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	091b      	lsrs	r3, r3, #4
 800c77a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c77e:	4313      	orrs	r3, r2
 800c780:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <LL_RCC_SetAPB1Prescaler>:
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c7a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	608b      	str	r3, [r1, #8]
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <LL_RCC_SetAPB2Prescaler>:
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c7c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c7ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	608b      	str	r3, [r1, #8]
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <LL_RCC_GetAHBPrescaler>:
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c7e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <LL_RCC_GetAHB4Prescaler>:
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c7fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c800:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c804:	011b      	lsls	r3, r3, #4
 800c806:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <LL_RCC_GetAPB1Prescaler>:
{
 800c814:	b480      	push	{r7}
 800c816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c822:	4618      	mov	r0, r3
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <LL_RCC_GetAPB2Prescaler>:
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c844:	b480      	push	{r7}
 800c846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c856:	6013      	str	r3, [r2, #0]
}
 800c858:	bf00      	nop
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c862:	b480      	push	{r7}
 800c864:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c870:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c874:	6013      	str	r3, [r2, #0]
}
 800c876:	bf00      	nop
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c880:	b480      	push	{r7}
 800c882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c88e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c892:	d101      	bne.n	800c898 <LL_RCC_PLL_IsReady+0x18>
 800c894:	2301      	movs	r3, #1
 800c896:	e000      	b.n	800c89a <LL_RCC_PLL_IsReady+0x1a>
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	0a1b      	lsrs	r3, r3, #8
 800c8b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c8c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c8d6:	b480      	push	{r7}
 800c8d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c8da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c8f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	f003 0303 	and.w	r3, r3, #3
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c906:	b480      	push	{r7}
 800c908:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c90a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c918:	d101      	bne.n	800c91e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c92a:	b480      	push	{r7}
 800c92c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c92e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c932:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c93a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c93e:	d101      	bne.n	800c944 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c940:	2301      	movs	r3, #1
 800c942:	e000      	b.n	800c946 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c950:	b480      	push	{r7}
 800c952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c958:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c95c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c964:	d101      	bne.n	800c96a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c976:	b480      	push	{r7}
 800c978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c97a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c984:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c988:	d101      	bne.n	800c98e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c98a:	2301      	movs	r3, #1
 800c98c:	e000      	b.n	800c990 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c99a:	b480      	push	{r7}
 800c99c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c99e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c9a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c9ac:	d101      	bne.n	800c9b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e000      	b.n	800c9b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
	...

0800c9c0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c9c0:	b590      	push	{r4, r7, lr}
 800c9c2:	b08d      	sub	sp, #52	@ 0x34
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e363      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0320 	and.w	r3, r3, #32
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 808d 	beq.w	800cafa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9e0:	f7ff fe89 	bl	800c6f6 <LL_RCC_GetSysClkSource>
 800c9e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c9e6:	f7ff ff82 	bl	800c8ee <LL_RCC_PLL_GetMainSource>
 800c9ea:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <HAL_RCC_OscConfig+0x3e>
 800c9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f4:	2b0c      	cmp	r3, #12
 800c9f6:	d147      	bne.n	800ca88 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d144      	bne.n	800ca88 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e347      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ca0e:	f7ff fe34 	bl	800c67a <LL_RCC_MSI_GetRange>
 800ca12:	4603      	mov	r3, r0
 800ca14:	429c      	cmp	r4, r3
 800ca16:	d914      	bls.n	800ca42 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fd2f 	bl	800d480 <RCC_SetFlashLatencyFromMSIRange>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e336      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff fe0e 	bl	800c652 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7ff fe32 	bl	800c6a4 <LL_RCC_MSI_SetCalibTrimming>
 800ca40:	e013      	b.n	800ca6a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff fe03 	bl	800c652 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7ff fe27 	bl	800c6a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 fd10 	bl	800d480 <RCC_SetFlashLatencyFromMSIRange>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e317      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ca6a:	f000 fcc9 	bl	800d400 <HAL_RCC_GetHCLKFreq>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	4aa4      	ldr	r2, [pc, #656]	@ (800cd04 <HAL_RCC_OscConfig+0x344>)
 800ca72:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ca74:	4ba4      	ldr	r3, [pc, #656]	@ (800cd08 <HAL_RCC_OscConfig+0x348>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fd fdcf 	bl	800a61c <HAL_InitTick>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d039      	beq.n	800caf8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e308      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	69db      	ldr	r3, [r3, #28]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d01e      	beq.n	800cace <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ca90:	f7ff fdb0 	bl	800c5f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ca94:	f7fd fe10 	bl	800a6b8 <HAL_GetTick>
 800ca98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800ca9a:	e008      	b.n	800caae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ca9c:	f7fd fe0c 	bl	800a6b8 <HAL_GetTick>
 800caa0:	4602      	mov	r2, r0
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d901      	bls.n	800caae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800caaa:	2303      	movs	r3, #3
 800caac:	e2f5      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800caae:	f7ff fdbf 	bl	800c630 <LL_RCC_MSI_IsReady>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d0f1      	beq.n	800ca9c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fdc8 	bl	800c652 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a1b      	ldr	r3, [r3, #32]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fdec 	bl	800c6a4 <LL_RCC_MSI_SetCalibTrimming>
 800cacc:	e015      	b.n	800cafa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800cace:	f7ff fda0 	bl	800c612 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cad2:	f7fd fdf1 	bl	800a6b8 <HAL_GetTick>
 800cad6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800cad8:	e008      	b.n	800caec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cada:	f7fd fded 	bl	800a6b8 <HAL_GetTick>
 800cade:	4602      	mov	r2, r0
 800cae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d901      	bls.n	800caec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800cae8:	2303      	movs	r3, #3
 800caea:	e2d6      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800caec:	f7ff fda0 	bl	800c630 <LL_RCC_MSI_IsReady>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f1      	bne.n	800cada <HAL_RCC_OscConfig+0x11a>
 800caf6:	e000      	b.n	800cafa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800caf8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d047      	beq.n	800cb96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb06:	f7ff fdf6 	bl	800c6f6 <LL_RCC_GetSysClkSource>
 800cb0a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cb0c:	f7ff feef 	bl	800c8ee <LL_RCC_PLL_GetMainSource>
 800cb10:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800cb12:	6a3b      	ldr	r3, [r7, #32]
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	d005      	beq.n	800cb24 <HAL_RCC_OscConfig+0x164>
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	2b0c      	cmp	r3, #12
 800cb1c:	d108      	bne.n	800cb30 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d105      	bne.n	800cb30 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d134      	bne.n	800cb96 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e2b4      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb38:	d102      	bne.n	800cb40 <HAL_RCC_OscConfig+0x180>
 800cb3a:	f7ff fbdd 	bl	800c2f8 <LL_RCC_HSE_Enable>
 800cb3e:	e001      	b.n	800cb44 <HAL_RCC_OscConfig+0x184>
 800cb40:	f7ff fbe9 	bl	800c316 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d012      	beq.n	800cb72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4c:	f7fd fdb4 	bl	800a6b8 <HAL_GetTick>
 800cb50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800cb52:	e008      	b.n	800cb66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb54:	f7fd fdb0 	bl	800a6b8 <HAL_GetTick>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	2b64      	cmp	r3, #100	@ 0x64
 800cb60:	d901      	bls.n	800cb66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e299      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800cb66:	f7ff fbe5 	bl	800c334 <LL_RCC_HSE_IsReady>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d0f1      	beq.n	800cb54 <HAL_RCC_OscConfig+0x194>
 800cb70:	e011      	b.n	800cb96 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb72:	f7fd fda1 	bl	800a6b8 <HAL_GetTick>
 800cb76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800cb78:	e008      	b.n	800cb8c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb7a:	f7fd fd9d 	bl	800a6b8 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b64      	cmp	r3, #100	@ 0x64
 800cb86:	d901      	bls.n	800cb8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e286      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800cb8c:	f7ff fbd2 	bl	800c334 <LL_RCC_HSE_IsReady>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f1      	bne.n	800cb7a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0302 	and.w	r3, r3, #2
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d04c      	beq.n	800cc3c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cba2:	f7ff fda8 	bl	800c6f6 <LL_RCC_GetSysClkSource>
 800cba6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cba8:	f7ff fea1 	bl	800c8ee <LL_RCC_PLL_GetMainSource>
 800cbac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d005      	beq.n	800cbc0 <HAL_RCC_OscConfig+0x200>
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	2b0c      	cmp	r3, #12
 800cbb8:	d10e      	bne.n	800cbd8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d10b      	bne.n	800cbd8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d101      	bne.n	800cbcc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e266      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fbf1 	bl	800c3b8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cbd6:	e031      	b.n	800cc3c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d019      	beq.n	800cc14 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cbe0:	f7ff fbba 	bl	800c358 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbe4:	f7fd fd68 	bl	800a6b8 <HAL_GetTick>
 800cbe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800cbea:	e008      	b.n	800cbfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbec:	f7fd fd64 	bl	800a6b8 <HAL_GetTick>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d901      	bls.n	800cbfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	e24d      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800cbfe:	f7ff fbc9 	bl	800c394 <LL_RCC_HSI_IsReady>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0f1      	beq.n	800cbec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff fbd3 	bl	800c3b8 <LL_RCC_HSI_SetCalibTrimming>
 800cc12:	e013      	b.n	800cc3c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc14:	f7ff fbaf 	bl	800c376 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc18:	f7fd fd4e 	bl	800a6b8 <HAL_GetTick>
 800cc1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800cc1e:	e008      	b.n	800cc32 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc20:	f7fd fd4a 	bl	800a6b8 <HAL_GetTick>
 800cc24:	4602      	mov	r2, r0
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d901      	bls.n	800cc32 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800cc2e:	2303      	movs	r3, #3
 800cc30:	e233      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800cc32:	f7ff fbaf 	bl	800c394 <LL_RCC_HSI_IsReady>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1f1      	bne.n	800cc20 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0308 	and.w	r3, r3, #8
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 80a3 	beq.w	800cd9c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d076      	beq.n	800cd4c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0310 	and.w	r3, r3, #16
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d046      	beq.n	800ccf8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800cc6a:	f7ff fc66 	bl	800c53a <LL_RCC_LSI1_IsReady>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d113      	bne.n	800cc9c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800cc74:	f7ff fc3f 	bl	800c4f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cc78:	f7fd fd1e 	bl	800a6b8 <HAL_GetTick>
 800cc7c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800cc7e:	e008      	b.n	800cc92 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cc80:	f7fd fd1a 	bl	800a6b8 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d901      	bls.n	800cc92 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e203      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800cc92:	f7ff fc52 	bl	800c53a <LL_RCC_LSI1_IsReady>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d0f1      	beq.n	800cc80 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800cc9c:	f7ff fc5f 	bl	800c55e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cca0:	f7fd fd0a 	bl	800a6b8 <HAL_GetTick>
 800cca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800cca6:	e008      	b.n	800ccba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cca8:	f7fd fd06 	bl	800a6b8 <HAL_GetTick>
 800ccac:	4602      	mov	r2, r0
 800ccae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d901      	bls.n	800ccba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	e1ef      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ccba:	f7ff fc72 	bl	800c5a2 <LL_RCC_LSI2_IsReady>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d0f1      	beq.n	800cca8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff fc7c 	bl	800c5c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ccce:	f7ff fc23 	bl	800c518 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccd2:	f7fd fcf1 	bl	800a6b8 <HAL_GetTick>
 800ccd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ccd8:	e008      	b.n	800ccec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ccda:	f7fd fced 	bl	800a6b8 <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d901      	bls.n	800ccec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e1d6      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ccec:	f7ff fc25 	bl	800c53a <LL_RCC_LSI1_IsReady>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1f1      	bne.n	800ccda <HAL_RCC_OscConfig+0x31a>
 800ccf6:	e051      	b.n	800cd9c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ccf8:	f7ff fbfd 	bl	800c4f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccfc:	f7fd fcdc 	bl	800a6b8 <HAL_GetTick>
 800cd00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800cd02:	e00c      	b.n	800cd1e <HAL_RCC_OscConfig+0x35e>
 800cd04:	20000008 	.word	0x20000008
 800cd08:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cd0c:	f7fd fcd4 	bl	800a6b8 <HAL_GetTick>
 800cd10:	4602      	mov	r2, r0
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d901      	bls.n	800cd1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	e1bd      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800cd1e:	f7ff fc0c 	bl	800c53a <LL_RCC_LSI1_IsReady>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0f1      	beq.n	800cd0c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800cd28:	f7ff fc2a 	bl	800c580 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800cd2c:	e008      	b.n	800cd40 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cd2e:	f7fd fcc3 	bl	800a6b8 <HAL_GetTick>
 800cd32:	4602      	mov	r2, r0
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d901      	bls.n	800cd40 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e1ac      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800cd40:	f7ff fc2f 	bl	800c5a2 <LL_RCC_LSI2_IsReady>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1f1      	bne.n	800cd2e <HAL_RCC_OscConfig+0x36e>
 800cd4a:	e027      	b.n	800cd9c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800cd4c:	f7ff fc18 	bl	800c580 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd50:	f7fd fcb2 	bl	800a6b8 <HAL_GetTick>
 800cd54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cd56:	e008      	b.n	800cd6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cd58:	f7fd fcae 	bl	800a6b8 <HAL_GetTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d901      	bls.n	800cd6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e197      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cd6a:	f7ff fc1a 	bl	800c5a2 <LL_RCC_LSI2_IsReady>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1f1      	bne.n	800cd58 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800cd74:	f7ff fbd0 	bl	800c518 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd78:	f7fd fc9e 	bl	800a6b8 <HAL_GetTick>
 800cd7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cd7e:	e008      	b.n	800cd92 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cd80:	f7fd fc9a 	bl	800a6b8 <HAL_GetTick>
 800cd84:	4602      	mov	r2, r0
 800cd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d901      	bls.n	800cd92 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e183      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cd92:	f7ff fbd2 	bl	800c53a <LL_RCC_LSI1_IsReady>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1f1      	bne.n	800cd80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0304 	and.w	r3, r3, #4
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d05b      	beq.n	800ce60 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cda8:	4ba7      	ldr	r3, [pc, #668]	@ (800d048 <HAL_RCC_OscConfig+0x688>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d114      	bne.n	800cdde <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cdb4:	f7ff fa70 	bl	800c298 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cdb8:	f7fd fc7e 	bl	800a6b8 <HAL_GetTick>
 800cdbc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cdbe:	e008      	b.n	800cdd2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdc0:	f7fd fc7a 	bl	800a6b8 <HAL_GetTick>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d901      	bls.n	800cdd2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e163      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cdd2:	4b9d      	ldr	r3, [pc, #628]	@ (800d048 <HAL_RCC_OscConfig+0x688>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0f0      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d102      	bne.n	800cdec <HAL_RCC_OscConfig+0x42c>
 800cde6:	f7ff fb30 	bl	800c44a <LL_RCC_LSE_Enable>
 800cdea:	e00c      	b.n	800ce06 <HAL_RCC_OscConfig+0x446>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	2b05      	cmp	r3, #5
 800cdf2:	d104      	bne.n	800cdfe <HAL_RCC_OscConfig+0x43e>
 800cdf4:	f7ff fb4b 	bl	800c48e <LL_RCC_LSE_EnableBypass>
 800cdf8:	f7ff fb27 	bl	800c44a <LL_RCC_LSE_Enable>
 800cdfc:	e003      	b.n	800ce06 <HAL_RCC_OscConfig+0x446>
 800cdfe:	f7ff fb35 	bl	800c46c <LL_RCC_LSE_Disable>
 800ce02:	f7ff fb55 	bl	800c4b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d014      	beq.n	800ce38 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce0e:	f7fd fc53 	bl	800a6b8 <HAL_GetTick>
 800ce12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ce14:	e00a      	b.n	800ce2c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce16:	f7fd fc4f 	bl	800a6b8 <HAL_GetTick>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d901      	bls.n	800ce2c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e136      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ce2c:	f7ff fb51 	bl	800c4d2 <LL_RCC_LSE_IsReady>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d0ef      	beq.n	800ce16 <HAL_RCC_OscConfig+0x456>
 800ce36:	e013      	b.n	800ce60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce38:	f7fd fc3e 	bl	800a6b8 <HAL_GetTick>
 800ce3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ce3e:	e00a      	b.n	800ce56 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce40:	f7fd fc3a 	bl	800a6b8 <HAL_GetTick>
 800ce44:	4602      	mov	r2, r0
 800ce46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d901      	bls.n	800ce56 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e121      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ce56:	f7ff fb3c 	bl	800c4d2 <LL_RCC_LSE_IsReady>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1ef      	bne.n	800ce40 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d02c      	beq.n	800cec6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d014      	beq.n	800ce9e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ce74:	f7ff fab5 	bl	800c3e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce78:	f7fd fc1e 	bl	800a6b8 <HAL_GetTick>
 800ce7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ce7e:	e008      	b.n	800ce92 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce80:	f7fd fc1a 	bl	800a6b8 <HAL_GetTick>
 800ce84:	4602      	mov	r2, r0
 800ce86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d901      	bls.n	800ce92 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	e103      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ce92:	f7ff fac8 	bl	800c426 <LL_RCC_HSI48_IsReady>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0f1      	beq.n	800ce80 <HAL_RCC_OscConfig+0x4c0>
 800ce9c:	e013      	b.n	800cec6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce9e:	f7ff fab1 	bl	800c404 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cea2:	f7fd fc09 	bl	800a6b8 <HAL_GetTick>
 800cea6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cea8:	e008      	b.n	800cebc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ceaa:	f7fd fc05 	bl	800a6b8 <HAL_GetTick>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d901      	bls.n	800cebc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e0ee      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cebc:	f7ff fab3 	bl	800c426 <LL_RCC_HSI48_IsReady>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f1      	bne.n	800ceaa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 80e4 	beq.w	800d098 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ced0:	f7ff fc11 	bl	800c6f6 <LL_RCC_GetSysClkSource>
 800ced4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ced6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	f040 80b4 	bne.w	800d050 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f003 0203 	and.w	r2, r3, #3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d123      	bne.n	800cf3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d11c      	bne.n	800cf3e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	0a1b      	lsrs	r3, r3, #8
 800cf08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d114      	bne.n	800cf3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d10d      	bne.n	800cf3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d106      	bne.n	800cf3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d05d      	beq.n	800cffa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b0c      	cmp	r3, #12
 800cf42:	d058      	beq.n	800cff6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cf44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d001      	beq.n	800cf56 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e0a1      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cf56:	f7ff fc84 	bl	800c862 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cf5a:	f7fd fbad 	bl	800a6b8 <HAL_GetTick>
 800cf5e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf60:	e008      	b.n	800cf74 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf62:	f7fd fba9 	bl	800a6b8 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d901      	bls.n	800cf74 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e092      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1ef      	bne.n	800cf62 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf86:	68da      	ldr	r2, [r3, #12]
 800cf88:	4b30      	ldr	r3, [pc, #192]	@ (800d04c <HAL_RCC_OscConfig+0x68c>)
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cf94:	4311      	orrs	r1, r2
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cf9a:	0212      	lsls	r2, r2, #8
 800cf9c:	4311      	orrs	r1, r2
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cfa2:	4311      	orrs	r1, r2
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cfa8:	4311      	orrs	r1, r2
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800cfae:	430a      	orrs	r2, r1
 800cfb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cfb8:	f7ff fc44 	bl	800c844 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cfbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cfc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cfcc:	f7fd fb74 	bl	800a6b8 <HAL_GetTick>
 800cfd0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfd2:	e008      	b.n	800cfe6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfd4:	f7fd fb70 	bl	800a6b8 <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d901      	bls.n	800cfe6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	e059      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d0ef      	beq.n	800cfd4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cff4:	e050      	b.n	800d098 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e04f      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d147      	bne.n	800d098 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d008:	f7ff fc1c 	bl	800c844 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d00c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d01a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d01c:	f7fd fb4c 	bl	800a6b8 <HAL_GetTick>
 800d020:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d022:	e008      	b.n	800d036 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d024:	f7fd fb48 	bl	800a6b8 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d901      	bls.n	800d036 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	e031      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d0ef      	beq.n	800d024 <HAL_RCC_OscConfig+0x664>
 800d044:	e028      	b.n	800d098 <HAL_RCC_OscConfig+0x6d8>
 800d046:	bf00      	nop
 800d048:	58000400 	.word	0x58000400
 800d04c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2b0c      	cmp	r3, #12
 800d054:	d01e      	beq.n	800d094 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d056:	f7ff fc04 	bl	800c862 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d05a:	f7fd fb2d 	bl	800a6b8 <HAL_GetTick>
 800d05e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d060:	e008      	b.n	800d074 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d062:	f7fd fb29 	bl	800a6b8 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d901      	bls.n	800d074 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800d070:	2303      	movs	r3, #3
 800d072:	e012      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1ef      	bne.n	800d062 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800d082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d086:	68da      	ldr	r2, [r3, #12]
 800d088:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d08c:	4b05      	ldr	r3, [pc, #20]	@ (800d0a4 <HAL_RCC_OscConfig+0x6e4>)
 800d08e:	4013      	ands	r3, r2
 800d090:	60cb      	str	r3, [r1, #12]
 800d092:	e001      	b.n	800d098 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e000      	b.n	800d09a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3734      	adds	r7, #52	@ 0x34
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd90      	pop	{r4, r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	eefefffc 	.word	0xeefefffc

0800d0a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e12d      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d0bc:	4b98      	ldr	r3, [pc, #608]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 0307 	and.w	r3, r3, #7
 800d0c4:	683a      	ldr	r2, [r7, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d91b      	bls.n	800d102 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0ca:	4b95      	ldr	r3, [pc, #596]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f023 0207 	bic.w	r2, r3, #7
 800d0d2:	4993      	ldr	r1, [pc, #588]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0da:	f7fd faed 	bl	800a6b8 <HAL_GetTick>
 800d0de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0e0:	e008      	b.n	800d0f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d0e2:	f7fd fae9 	bl	800a6b8 <HAL_GetTick>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d901      	bls.n	800d0f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e111      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0f4:	4b8a      	ldr	r3, [pc, #552]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 0307 	and.w	r3, r3, #7
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d1ef      	bne.n	800d0e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 0302 	and.w	r3, r3, #2
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d016      	beq.n	800d13c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	4618      	mov	r0, r3
 800d114:	f7ff fafb 	bl	800c70e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d118:	f7fd face 	bl	800a6b8 <HAL_GetTick>
 800d11c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d11e:	e008      	b.n	800d132 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d120:	f7fd faca 	bl	800a6b8 <HAL_GetTick>
 800d124:	4602      	mov	r2, r0
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d901      	bls.n	800d132 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800d12e:	2303      	movs	r3, #3
 800d130:	e0f2      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d132:	f7ff fbe8 	bl	800c906 <LL_RCC_IsActiveFlag_HPRE>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d0f1      	beq.n	800d120 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f003 0320 	and.w	r3, r3, #32
 800d144:	2b00      	cmp	r3, #0
 800d146:	d016      	beq.n	800d176 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	695b      	ldr	r3, [r3, #20]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7ff faf2 	bl	800c736 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d152:	f7fd fab1 	bl	800a6b8 <HAL_GetTick>
 800d156:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d158:	e008      	b.n	800d16c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d15a:	f7fd faad 	bl	800a6b8 <HAL_GetTick>
 800d15e:	4602      	mov	r2, r0
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	2b02      	cmp	r3, #2
 800d166:	d901      	bls.n	800d16c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800d168:	2303      	movs	r3, #3
 800d16a:	e0d5      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d16c:	f7ff fbdd 	bl	800c92a <LL_RCC_IsActiveFlag_C2HPRE>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d0f1      	beq.n	800d15a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d016      	beq.n	800d1b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff faeb 	bl	800c762 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d18c:	f7fd fa94 	bl	800a6b8 <HAL_GetTick>
 800d190:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d192:	e008      	b.n	800d1a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d194:	f7fd fa90 	bl	800a6b8 <HAL_GetTick>
 800d198:	4602      	mov	r2, r0
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d901      	bls.n	800d1a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e0b8      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d1a6:	f7ff fbd3 	bl	800c950 <LL_RCC_IsActiveFlag_SHDHPRE>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0f1      	beq.n	800d194 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f003 0304 	and.w	r3, r3, #4
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d016      	beq.n	800d1ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff fae5 	bl	800c790 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d1c6:	f7fd fa77 	bl	800a6b8 <HAL_GetTick>
 800d1ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d1cc:	e008      	b.n	800d1e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d1ce:	f7fd fa73 	bl	800a6b8 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d901      	bls.n	800d1e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e09b      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d1e0:	f7ff fbc9 	bl	800c976 <LL_RCC_IsActiveFlag_PPRE1>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d0f1      	beq.n	800d1ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f003 0308 	and.w	r3, r3, #8
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d017      	beq.n	800d226 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7ff fadb 	bl	800c7b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d202:	f7fd fa59 	bl	800a6b8 <HAL_GetTick>
 800d206:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d208:	e008      	b.n	800d21c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d20a:	f7fd fa55 	bl	800a6b8 <HAL_GetTick>
 800d20e:	4602      	mov	r2, r0
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	1ad3      	subs	r3, r2, r3
 800d214:	2b02      	cmp	r3, #2
 800d216:	d901      	bls.n	800d21c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800d218:	2303      	movs	r3, #3
 800d21a:	e07d      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d21c:	f7ff fbbd 	bl	800c99a <LL_RCC_IsActiveFlag_PPRE2>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0f1      	beq.n	800d20a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d043      	beq.n	800d2ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	2b02      	cmp	r3, #2
 800d238:	d106      	bne.n	800d248 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800d23a:	f7ff f87b 	bl	800c334 <LL_RCC_HSE_IsReady>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d11e      	bne.n	800d282 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e067      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	2b03      	cmp	r3, #3
 800d24e:	d106      	bne.n	800d25e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800d250:	f7ff fb16 	bl	800c880 <LL_RCC_PLL_IsReady>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d113      	bne.n	800d282 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e05c      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800d266:	f7ff f9e3 	bl	800c630 <LL_RCC_MSI_IsReady>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d108      	bne.n	800d282 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e051      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800d274:	f7ff f88e 	bl	800c394 <LL_RCC_HSI_IsReady>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d101      	bne.n	800d282 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	e04a      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff fa21 	bl	800c6ce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d28c:	f7fd fa14 	bl	800a6b8 <HAL_GetTick>
 800d290:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d292:	e00a      	b.n	800d2aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d294:	f7fd fa10 	bl	800a6b8 <HAL_GetTick>
 800d298:	4602      	mov	r2, r0
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d901      	bls.n	800d2aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e036      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2aa:	f7ff fa24 	bl	800c6f6 <LL_RCC_GetSysClkSource>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d1ec      	bne.n	800d294 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d2ba:	4b19      	ldr	r3, [pc, #100]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0307 	and.w	r3, r3, #7
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d21b      	bcs.n	800d300 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2c8:	4b15      	ldr	r3, [pc, #84]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f023 0207 	bic.w	r2, r3, #7
 800d2d0:	4913      	ldr	r1, [pc, #76]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2d8:	f7fd f9ee 	bl	800a6b8 <HAL_GetTick>
 800d2dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2de:	e008      	b.n	800d2f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d2e0:	f7fd f9ea 	bl	800a6b8 <HAL_GetTick>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d901      	bls.n	800d2f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	e012      	b.n	800d318 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d320 <HAL_RCC_ClockConfig+0x278>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d1ef      	bne.n	800d2e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d300:	f000 f87e 	bl	800d400 <HAL_RCC_GetHCLKFreq>
 800d304:	4603      	mov	r3, r0
 800d306:	4a07      	ldr	r2, [pc, #28]	@ (800d324 <HAL_RCC_ClockConfig+0x27c>)
 800d308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800d30a:	f7fd f9e1 	bl	800a6d0 <HAL_GetTickPrio>
 800d30e:	4603      	mov	r3, r0
 800d310:	4618      	mov	r0, r3
 800d312:	f7fd f983 	bl	800a61c <HAL_InitTick>
 800d316:	4603      	mov	r3, r0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	58004000 	.word	0x58004000
 800d324:	20000008 	.word	0x20000008

0800d328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d328:	b590      	push	{r4, r7, lr}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d32e:	f7ff f9e2 	bl	800c6f6 <LL_RCC_GetSysClkSource>
 800d332:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d33a:	f7ff f99e 	bl	800c67a <LL_RCC_MSI_GetRange>
 800d33e:	4603      	mov	r3, r0
 800d340:	091b      	lsrs	r3, r3, #4
 800d342:	f003 030f 	and.w	r3, r3, #15
 800d346:	4a2b      	ldr	r2, [pc, #172]	@ (800d3f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d34c:	60fb      	str	r3, [r7, #12]
 800d34e:	e04b      	b.n	800d3e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b04      	cmp	r3, #4
 800d354:	d102      	bne.n	800d35c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d356:	4b28      	ldr	r3, [pc, #160]	@ (800d3f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d358:	60fb      	str	r3, [r7, #12]
 800d35a:	e045      	b.n	800d3e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b08      	cmp	r3, #8
 800d360:	d10a      	bne.n	800d378 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d362:	f7fe ffb7 	bl	800c2d4 <LL_RCC_HSE_IsEnabledDiv2>
 800d366:	4603      	mov	r3, r0
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d102      	bne.n	800d372 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d36c:	4b22      	ldr	r3, [pc, #136]	@ (800d3f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	e03a      	b.n	800d3e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d372:	4b22      	ldr	r3, [pc, #136]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800d374:	60fb      	str	r3, [r7, #12]
 800d376:	e037      	b.n	800d3e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d378:	f7ff fab9 	bl	800c8ee <LL_RCC_PLL_GetMainSource>
 800d37c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d003      	beq.n	800d38c <HAL_RCC_GetSysClockFreq+0x64>
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b03      	cmp	r3, #3
 800d388:	d003      	beq.n	800d392 <HAL_RCC_GetSysClockFreq+0x6a>
 800d38a:	e00d      	b.n	800d3a8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d38c:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d38e:	60bb      	str	r3, [r7, #8]
        break;
 800d390:	e015      	b.n	800d3be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d392:	f7fe ff9f 	bl	800c2d4 <LL_RCC_HSE_IsEnabledDiv2>
 800d396:	4603      	mov	r3, r0
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d102      	bne.n	800d3a2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d39c:	4b16      	ldr	r3, [pc, #88]	@ (800d3f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d39e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d3a0:	e00d      	b.n	800d3be <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800d3a2:	4b16      	ldr	r3, [pc, #88]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800d3a4:	60bb      	str	r3, [r7, #8]
        break;
 800d3a6:	e00a      	b.n	800d3be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d3a8:	f7ff f967 	bl	800c67a <LL_RCC_MSI_GetRange>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	091b      	lsrs	r3, r3, #4
 800d3b0:	f003 030f 	and.w	r3, r3, #15
 800d3b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d3f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d3b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ba:	60bb      	str	r3, [r7, #8]
        break;
 800d3bc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800d3be:	f7ff fa71 	bl	800c8a4 <LL_RCC_PLL_GetN>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	fb03 f402 	mul.w	r4, r3, r2
 800d3ca:	f7ff fa84 	bl	800c8d6 <LL_RCC_PLL_GetDivider>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	091b      	lsrs	r3, r3, #4
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	fbb4 f4f3 	udiv	r4, r4, r3
 800d3d8:	f7ff fa71 	bl	800c8be <LL_RCC_PLL_GetR>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	0f5b      	lsrs	r3, r3, #29
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	fbb4 f3f3 	udiv	r3, r4, r3
 800d3e6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd90      	pop	{r4, r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	080181e4 	.word	0x080181e4
 800d3f8:	00f42400 	.word	0x00f42400
 800d3fc:	01e84800 	.word	0x01e84800

0800d400 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d400:	b598      	push	{r3, r4, r7, lr}
 800d402:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d404:	f7ff ff90 	bl	800d328 <HAL_RCC_GetSysClockFreq>
 800d408:	4604      	mov	r4, r0
 800d40a:	f7ff f9e9 	bl	800c7e0 <LL_RCC_GetAHBPrescaler>
 800d40e:	4603      	mov	r3, r0
 800d410:	091b      	lsrs	r3, r3, #4
 800d412:	f003 030f 	and.w	r3, r3, #15
 800d416:	4a03      	ldr	r2, [pc, #12]	@ (800d424 <HAL_RCC_GetHCLKFreq+0x24>)
 800d418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d41c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d420:	4618      	mov	r0, r3
 800d422:	bd98      	pop	{r3, r4, r7, pc}
 800d424:	08018184 	.word	0x08018184

0800d428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d428:	b598      	push	{r3, r4, r7, lr}
 800d42a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d42c:	f7ff ffe8 	bl	800d400 <HAL_RCC_GetHCLKFreq>
 800d430:	4604      	mov	r4, r0
 800d432:	f7ff f9ef 	bl	800c814 <LL_RCC_GetAPB1Prescaler>
 800d436:	4603      	mov	r3, r0
 800d438:	0a1b      	lsrs	r3, r3, #8
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	4a04      	ldr	r2, [pc, #16]	@ (800d450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d444:	f003 031f 	and.w	r3, r3, #31
 800d448:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	bd98      	pop	{r3, r4, r7, pc}
 800d450:	080181c4 	.word	0x080181c4

0800d454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d454:	b598      	push	{r3, r4, r7, lr}
 800d456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800d458:	f7ff ffd2 	bl	800d400 <HAL_RCC_GetHCLKFreq>
 800d45c:	4604      	mov	r4, r0
 800d45e:	f7ff f9e5 	bl	800c82c <LL_RCC_GetAPB2Prescaler>
 800d462:	4603      	mov	r3, r0
 800d464:	0adb      	lsrs	r3, r3, #11
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	4a04      	ldr	r2, [pc, #16]	@ (800d47c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d470:	f003 031f 	and.w	r3, r3, #31
 800d474:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d478:	4618      	mov	r0, r3
 800d47a:	bd98      	pop	{r3, r4, r7, pc}
 800d47c:	080181c4 	.word	0x080181c4

0800d480 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800d480:	b590      	push	{r4, r7, lr}
 800d482:	b085      	sub	sp, #20
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2bb0      	cmp	r3, #176	@ 0xb0
 800d48c:	d903      	bls.n	800d496 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800d48e:	4b15      	ldr	r3, [pc, #84]	@ (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d492:	60fb      	str	r3, [r7, #12]
 800d494:	e007      	b.n	800d4a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	091b      	lsrs	r3, r3, #4
 800d49a:	f003 030f 	and.w	r3, r3, #15
 800d49e:	4a11      	ldr	r2, [pc, #68]	@ (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800d4a6:	f7ff f9a7 	bl	800c7f8 <LL_RCC_GetAHB4Prescaler>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	091b      	lsrs	r3, r3, #4
 800d4ae:	f003 030f 	and.w	r3, r3, #15
 800d4b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d4e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800d4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d4ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800d4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c8:	0c9c      	lsrs	r4, r3, #18
 800d4ca:	f7fe fef5 	bl	800c2b8 <HAL_PWREx_GetVoltageRange>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 f80c 	bl	800d4f0 <RCC_SetFlashLatency>
 800d4d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd90      	pop	{r4, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	080181e4 	.word	0x080181e4
 800d4e8:	08018184 	.word	0x08018184
 800d4ec:	431bde83 	.word	0x431bde83

0800d4f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d4f0:	b590      	push	{r4, r7, lr}
 800d4f2:	b093      	sub	sp, #76	@ 0x4c
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800d4fa:	4b37      	ldr	r3, [pc, #220]	@ (800d5d8 <RCC_SetFlashLatency+0xe8>)
 800d4fc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800d500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d502:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800d506:	4a35      	ldr	r2, [pc, #212]	@ (800d5dc <RCC_SetFlashLatency+0xec>)
 800d508:	f107 031c 	add.w	r3, r7, #28
 800d50c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d50e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800d512:	4b33      	ldr	r3, [pc, #204]	@ (800d5e0 <RCC_SetFlashLatency+0xf0>)
 800d514:	f107 040c 	add.w	r4, r7, #12
 800d518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d51a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d51e:	2300      	movs	r3, #0
 800d520:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d528:	d11a      	bne.n	800d560 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d52a:	2300      	movs	r3, #0
 800d52c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d52e:	e013      	b.n	800d558 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	3348      	adds	r3, #72	@ 0x48
 800d536:	443b      	add	r3, r7
 800d538:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d807      	bhi.n	800d552 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	3348      	adds	r3, #72	@ 0x48
 800d548:	443b      	add	r3, r7
 800d54a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d54e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800d550:	e020      	b.n	800d594 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d554:	3301      	adds	r3, #1
 800d556:	643b      	str	r3, [r7, #64]	@ 0x40
 800d558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d9e8      	bls.n	800d530 <RCC_SetFlashLatency+0x40>
 800d55e:	e019      	b.n	800d594 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d560:	2300      	movs	r3, #0
 800d562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d564:	e013      	b.n	800d58e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	3348      	adds	r3, #72	@ 0x48
 800d56c:	443b      	add	r3, r7
 800d56e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d807      	bhi.n	800d588 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	3348      	adds	r3, #72	@ 0x48
 800d57e:	443b      	add	r3, r7
 800d580:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d584:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800d586:	e005      	b.n	800d594 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d58a:	3301      	adds	r3, #1
 800d58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d590:	2b02      	cmp	r3, #2
 800d592:	d9e8      	bls.n	800d566 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800d594:	4b13      	ldr	r3, [pc, #76]	@ (800d5e4 <RCC_SetFlashLatency+0xf4>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f023 0207 	bic.w	r2, r3, #7
 800d59c:	4911      	ldr	r1, [pc, #68]	@ (800d5e4 <RCC_SetFlashLatency+0xf4>)
 800d59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5a4:	f7fd f888 	bl	800a6b8 <HAL_GetTick>
 800d5a8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d5aa:	e008      	b.n	800d5be <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d5ac:	f7fd f884 	bl	800a6b8 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d901      	bls.n	800d5be <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e007      	b.n	800d5ce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d5be:	4b09      	ldr	r3, [pc, #36]	@ (800d5e4 <RCC_SetFlashLatency+0xf4>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d1ef      	bne.n	800d5ac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	374c      	adds	r7, #76	@ 0x4c
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd90      	pop	{r4, r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	08017728 	.word	0x08017728
 800d5dc:	08017738 	.word	0x08017738
 800d5e0:	08017744 	.word	0x08017744
 800d5e4:	58004000 	.word	0x58004000

0800d5e8 <LL_RCC_LSE_IsEnabled>:
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d5ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5f4:	f003 0301 	and.w	r3, r3, #1
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d101      	bne.n	800d600 <LL_RCC_LSE_IsEnabled+0x18>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e000      	b.n	800d602 <LL_RCC_LSE_IsEnabled+0x1a>
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <LL_RCC_LSE_IsReady>:
{
 800d60c:	b480      	push	{r7}
 800d60e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d618:	f003 0302 	and.w	r3, r3, #2
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d101      	bne.n	800d624 <LL_RCC_LSE_IsReady+0x18>
 800d620:	2301      	movs	r3, #1
 800d622:	e000      	b.n	800d626 <LL_RCC_LSE_IsReady+0x1a>
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <LL_RCC_SetRFWKPClockSource>:
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d63c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d640:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d644:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <LL_RCC_SetSMPSClockSource>:
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66a:	f023 0203 	bic.w	r2, r3, #3
 800d66e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4313      	orrs	r3, r2
 800d676:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <LL_RCC_SetSMPSPrescaler>:
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d68c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d692:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <LL_RCC_SetUSARTClockSource>:
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6bc:	f023 0203 	bic.w	r2, r3, #3
 800d6c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <LL_RCC_SetLPUARTClockSource>:
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d6e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d6ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <LL_RCC_SetI2CClockSource>:
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d70c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d710:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	091b      	lsrs	r3, r3, #4
 800d718:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d71c:	43db      	mvns	r3, r3
 800d71e:	401a      	ands	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	011b      	lsls	r3, r3, #4
 800d724:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d72c:	4313      	orrs	r3, r2
 800d72e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d732:	bf00      	nop
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <LL_RCC_SetLPTIMClockSource>:
{
 800d73e:	b480      	push	{r7}
 800d740:	b083      	sub	sp, #12
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d74a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	0c1b      	lsrs	r3, r3, #16
 800d752:	041b      	lsls	r3, r3, #16
 800d754:	43db      	mvns	r3, r3
 800d756:	401a      	ands	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	041b      	lsls	r3, r3, #16
 800d75c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d760:	4313      	orrs	r3, r2
 800d762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d766:	bf00      	nop
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr

0800d772 <LL_RCC_SetSAIClockSource>:
{
 800d772:	b480      	push	{r7}
 800d774:	b083      	sub	sp, #12
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d77a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d782:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d786:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d792:	bf00      	nop
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <LL_RCC_SetRNGClockSource>:
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b083      	sub	sp, #12
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d7a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d7b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <LL_RCC_SetCLK48ClockSource>:
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d7d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d7de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d7ea:	bf00      	nop
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <LL_RCC_SetUSBClockSource>:
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff ffe3 	bl	800d7ca <LL_RCC_SetCLK48ClockSource>
}
 800d804:	bf00      	nop
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <LL_RCC_SetADCClockSource>:
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d81c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d820:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4313      	orrs	r3, r2
 800d828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <LL_RCC_SetRTCClockSource>:
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d84c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4313      	orrs	r3, r2
 800d854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <LL_RCC_GetRTCClockSource>:
{
 800d864:	b480      	push	{r7}
 800d866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d870:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d874:	4618      	mov	r0, r3
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <LL_RCC_ForceBackupDomainReset>:
{
 800d87e:	b480      	push	{r7}
 800d880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d88a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d88e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d896:	bf00      	nop
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d8a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d8b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d8b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d8b8:	bf00      	nop
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <LL_RCC_PLLSAI1_Enable>:
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d8c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d8d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d8d4:	6013      	str	r3, [r2, #0]
}
 800d8d6:	bf00      	nop
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <LL_RCC_PLLSAI1_Disable>:
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d8e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d8ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d8f2:	6013      	str	r3, [r2, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <LL_RCC_PLLSAI1_IsReady>:
{
 800d8fe:	b480      	push	{r7}
 800d900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d90c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d910:	d101      	bne.n	800d916 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d912:	2301      	movs	r3, #1
 800d914:	e000      	b.n	800d918 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b088      	sub	sp, #32
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d92a:	2300      	movs	r3, #0
 800d92c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d92e:	2300      	movs	r3, #0
 800d930:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d034      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d942:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d946:	d021      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d948:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d94c:	d81b      	bhi.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d94e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d952:	d01d      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d954:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d958:	d815      	bhi.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00b      	beq.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d95e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d962:	d110      	bne.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d96e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d972:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d974:	e00d      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	3304      	adds	r3, #4
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 f947 	bl	800dc0e <RCCEx_PLLSAI1_ConfigNP>
 800d980:	4603      	mov	r3, r0
 800d982:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d984:	e005      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	77fb      	strb	r3, [r7, #31]
        break;
 800d98a:	e002      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d98c:	bf00      	nop
 800d98e:	e000      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d990:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d992:	7ffb      	ldrb	r3, [r7, #31]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d105      	bne.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7ff fee8 	bl	800d772 <LL_RCC_SetSAIClockSource>
 800d9a2:	e001      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9a4:	7ffb      	ldrb	r3, [r7, #31]
 800d9a6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d046      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d9b4:	f7ff ff56 	bl	800d864 <LL_RCC_GetRTCClockSource>
 800d9b8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d03c      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d9c4:	f7fe fc68 	bl	800c298 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d105      	bne.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff ff30 	bl	800d838 <LL_RCC_SetRTCClockSource>
 800d9d8:	e02e      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d9da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d9e4:	f7ff ff4b 	bl	800d87e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d9e8:	f7ff ff5a 	bl	800d8a0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d9fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800da04:	f7ff fdf0 	bl	800d5e8 <LL_RCC_LSE_IsEnabled>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d114      	bne.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800da0e:	f7fc fe53 	bl	800a6b8 <HAL_GetTick>
 800da12:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800da14:	e00b      	b.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da16:	f7fc fe4f 	bl	800a6b8 <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da24:	4293      	cmp	r3, r2
 800da26:	d902      	bls.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800da28:	2303      	movs	r3, #3
 800da2a:	77fb      	strb	r3, [r7, #31]
              break;
 800da2c:	e004      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800da2e:	f7ff fded 	bl	800d60c <LL_RCC_LSE_IsReady>
 800da32:	4603      	mov	r3, r0
 800da34:	2b01      	cmp	r3, #1
 800da36:	d1ee      	bne.n	800da16 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800da38:	7ffb      	ldrb	r3, [r7, #31]
 800da3a:	77bb      	strb	r3, [r7, #30]
 800da3c:	e001      	b.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da3e:	7ffb      	ldrb	r3, [r7, #31]
 800da40:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d004      	beq.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	699b      	ldr	r3, [r3, #24]
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff fe2a 	bl	800d6ac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f003 0302 	and.w	r3, r3, #2
 800da60:	2b00      	cmp	r3, #0
 800da62:	d004      	beq.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	69db      	ldr	r3, [r3, #28]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fe35 	bl	800d6d8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 0310 	and.w	r3, r3, #16
 800da76:	2b00      	cmp	r3, #0
 800da78:	d004      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff fe5d 	bl	800d73e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f003 0320 	and.w	r3, r3, #32
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d004      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff fe52 	bl	800d73e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f003 0304 	and.w	r3, r3, #4
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d004      	beq.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fe2a 	bl	800d704 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f003 0308 	and.w	r3, r3, #8
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d004      	beq.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff fe1f 	bl	800d704 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d022      	beq.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff fe8d 	bl	800d7f6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dae4:	d107      	bne.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800dae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800daf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800daf4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dafa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dafe:	d10b      	bne.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3304      	adds	r3, #4
 800db04:	4618      	mov	r0, r3
 800db06:	f000 f8dd 	bl	800dcc4 <RCCEx_PLLSAI1_ConfigNQ>
 800db0a:	4603      	mov	r3, r0
 800db0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800db0e:	7ffb      	ldrb	r3, [r7, #31]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800db14:	7ffb      	ldrb	r3, [r7, #31]
 800db16:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800db20:	2b00      	cmp	r3, #0
 800db22:	d02b      	beq.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db2c:	d008      	beq.n	800db40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db36:	d003      	beq.n	800db40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d105      	bne.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff fe2a 	bl	800d79e <LL_RCC_SetRNGClockSource>
 800db4a:	e00a      	b.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	2000      	movs	r0, #0
 800db58:	f7ff fe21 	bl	800d79e <LL_RCC_SetRNGClockSource>
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f7ff fe34 	bl	800d7ca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db66:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800db6a:	d107      	bne.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800db6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800db76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db84:	2b00      	cmp	r3, #0
 800db86:	d022      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7ff fe3d 	bl	800d80c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db9a:	d107      	bne.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800db9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dbaa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dbb4:	d10b      	bne.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 f8dd 	bl	800dd7a <RCCEx_PLLSAI1_ConfigNR>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800dbc4:	7ffb      	ldrb	r3, [r7, #31]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800dbca:	7ffb      	ldrb	r3, [r7, #31]
 800dbcc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d004      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff fd26 	bl	800d630 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d009      	beq.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7ff fd45 	bl	800d684 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fd2c 	bl	800d65c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800dc04:	7fbb      	ldrb	r3, [r7, #30]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3720      	adds	r7, #32
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800dc1a:	f7ff fe61 	bl	800d8e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc1e:	f7fc fd4b 	bl	800a6b8 <HAL_GetTick>
 800dc22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dc24:	e009      	b.n	800dc3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc26:	f7fc fd47 	bl	800a6b8 <HAL_GetTick>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d902      	bls.n	800dc3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800dc34:	2303      	movs	r3, #3
 800dc36:	73fb      	strb	r3, [r7, #15]
      break;
 800dc38:	e004      	b.n	800dc44 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dc3a:	f7ff fe60 	bl	800d8fe <LL_RCC_PLLSAI1_IsReady>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1f0      	bne.n	800dc26 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d137      	bne.n	800dcba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800dc4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800dc62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dc74:	4313      	orrs	r3, r2
 800dc76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dc78:	f7ff fe23 	bl	800d8c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc7c:	f7fc fd1c 	bl	800a6b8 <HAL_GetTick>
 800dc80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dc82:	e009      	b.n	800dc98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc84:	f7fc fd18 	bl	800a6b8 <HAL_GetTick>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d902      	bls.n	800dc98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800dc92:	2303      	movs	r3, #3
 800dc94:	73fb      	strb	r3, [r7, #15]
        break;
 800dc96:	e004      	b.n	800dca2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dc98:	f7ff fe31 	bl	800d8fe <LL_RCC_PLLSAI1_IsReady>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d1f0      	bne.n	800dc84 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d108      	bne.n	800dcba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dcac:	691a      	ldr	r2, [r3, #16]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800dcd0:	f7ff fe06 	bl	800d8e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dcd4:	f7fc fcf0 	bl	800a6b8 <HAL_GetTick>
 800dcd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dcda:	e009      	b.n	800dcf0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dcdc:	f7fc fcec 	bl	800a6b8 <HAL_GetTick>
 800dce0:	4602      	mov	r2, r0
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d902      	bls.n	800dcf0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800dcea:	2303      	movs	r3, #3
 800dcec:	73fb      	strb	r3, [r7, #15]
      break;
 800dcee:	e004      	b.n	800dcfa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dcf0:	f7ff fe05 	bl	800d8fe <LL_RCC_PLLSAI1_IsReady>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1f0      	bne.n	800dcdc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d137      	bne.n	800dd70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800dd00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	021b      	lsls	r3, r3, #8
 800dd10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd14:	4313      	orrs	r3, r2
 800dd16:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800dd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dd2e:	f7ff fdc8 	bl	800d8c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd32:	f7fc fcc1 	bl	800a6b8 <HAL_GetTick>
 800dd36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dd38:	e009      	b.n	800dd4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dd3a:	f7fc fcbd 	bl	800a6b8 <HAL_GetTick>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d902      	bls.n	800dd4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800dd48:	2303      	movs	r3, #3
 800dd4a:	73fb      	strb	r3, [r7, #15]
        break;
 800dd4c:	e004      	b.n	800dd58 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dd4e:	f7ff fdd6 	bl	800d8fe <LL_RCC_PLLSAI1_IsReady>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d1f0      	bne.n	800dd3a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800dd58:	7bfb      	ldrb	r3, [r7, #15]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d108      	bne.n	800dd70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dd5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd62:	691a      	ldr	r2, [r3, #16]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b084      	sub	sp, #16
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800dd86:	f7ff fdab 	bl	800d8e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd8a:	f7fc fc95 	bl	800a6b8 <HAL_GetTick>
 800dd8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dd90:	e009      	b.n	800dda6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dd92:	f7fc fc91 	bl	800a6b8 <HAL_GetTick>
 800dd96:	4602      	mov	r2, r0
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d902      	bls.n	800dda6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800dda0:	2303      	movs	r3, #3
 800dda2:	73fb      	strb	r3, [r7, #15]
      break;
 800dda4:	e004      	b.n	800ddb0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dda6:	f7ff fdaa 	bl	800d8fe <LL_RCC_PLLSAI1_IsReady>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1f0      	bne.n	800dd92 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d137      	bne.n	800de26 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ddb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	021b      	lsls	r3, r3, #8
 800ddc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ddce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dde0:	4313      	orrs	r3, r2
 800dde2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dde4:	f7ff fd6d 	bl	800d8c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dde8:	f7fc fc66 	bl	800a6b8 <HAL_GetTick>
 800ddec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ddee:	e009      	b.n	800de04 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ddf0:	f7fc fc62 	bl	800a6b8 <HAL_GetTick>
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d902      	bls.n	800de04 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ddfe:	2303      	movs	r3, #3
 800de00:	73fb      	strb	r3, [r7, #15]
        break;
 800de02:	e004      	b.n	800de0e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800de04:	f7ff fd7b 	bl	800d8fe <LL_RCC_PLLSAI1_IsReady>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d1f0      	bne.n	800ddf0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d108      	bne.n	800de26 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800de14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de22:	4313      	orrs	r3, r2
 800de24:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800de26:	7bfb      	ldrb	r3, [r7, #15]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e09f      	b.n	800df82 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7fb fdf0 	bl	8009a3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2202      	movs	r2, #2
 800de60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de64:	4b49      	ldr	r3, [pc, #292]	@ (800df8c <HAL_RTC_Init+0x15c>)
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	f003 0310 	and.w	r3, r3, #16
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	d07e      	beq.n	800df6e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	22ca      	movs	r2, #202	@ 0xca
 800de76:	625a      	str	r2, [r3, #36]	@ 0x24
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2253      	movs	r2, #83	@ 0x53
 800de7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f8ab 	bl	800dfdc <RTC_EnterInitMode>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00a      	beq.n	800dea2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	22ff      	movs	r2, #255	@ 0xff
 800de92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2204      	movs	r2, #4
 800de98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]
 800dea0:	e067      	b.n	800df72 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	6812      	ldr	r2, [r2, #0]
 800deac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800deb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800deb4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6899      	ldr	r1, [r3, #8]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	431a      	orrs	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	699b      	ldr	r3, [r3, #24]
 800deca:	431a      	orrs	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	430a      	orrs	r2, r1
 800ded2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	68d2      	ldr	r2, [r2, #12]
 800dedc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	6919      	ldr	r1, [r3, #16]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	041a      	lsls	r2, r3, #16
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	430a      	orrs	r2, r1
 800def0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68da      	ldr	r2, [r3, #12]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800df00:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f022 0203 	bic.w	r2, r2, #3
 800df10:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	69da      	ldr	r2, [r3, #28]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	695b      	ldr	r3, [r3, #20]
 800df20:	431a      	orrs	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	430a      	orrs	r2, r1
 800df28:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	f003 0320 	and.w	r3, r3, #32
 800df34:	2b00      	cmp	r3, #0
 800df36:	d113      	bne.n	800df60 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f829 	bl	800df90 <HAL_RTC_WaitForSynchro>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00d      	beq.n	800df60 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	22ff      	movs	r2, #255	@ 0xff
 800df4a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2204      	movs	r2, #4
 800df50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	e010      	b.n	800df82 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	22ff      	movs	r2, #255	@ 0xff
 800df66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]
 800df6c:	e001      	b.n	800df72 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800df6e:	2300      	movs	r3, #0
 800df70:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	40002800 	.word	0x40002800

0800df90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68da      	ldr	r2, [r3, #12]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dfa6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dfa8:	f7fc fb86 	bl	800a6b8 <HAL_GetTick>
 800dfac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dfae:	e009      	b.n	800dfc4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dfb0:	f7fc fb82 	bl	800a6b8 <HAL_GetTick>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfbe:	d901      	bls.n	800dfc4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	e007      	b.n	800dfd4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	f003 0320 	and.w	r3, r3, #32
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0ee      	beq.n	800dfb0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d119      	bne.n	800e026 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f04f 32ff 	mov.w	r2, #4294967295
 800dffa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dffc:	f7fc fb5c 	bl	800a6b8 <HAL_GetTick>
 800e000:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e002:	e009      	b.n	800e018 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e004:	f7fc fb58 	bl	800a6b8 <HAL_GetTick>
 800e008:	4602      	mov	r2, r0
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e012:	d901      	bls.n	800e018 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800e014:	2303      	movs	r3, #3
 800e016:	e007      	b.n	800e028 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0ee      	beq.n	800e004 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d101      	bne.n	800e04a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800e046:	2302      	movs	r3, #2
 800e048:	e089      	b.n	800e15e <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2202      	movs	r2, #2
 800e056:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	22ca      	movs	r2, #202	@ 0xca
 800e060:	625a      	str	r2, [r3, #36]	@ 0x24
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2253      	movs	r2, #83	@ 0x53
 800e068:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e074:	2b00      	cmp	r3, #0
 800e076:	d020      	beq.n	800e0ba <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800e078:	f7fc fb1e 	bl	800a6b8 <HAL_GetTick>
 800e07c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800e07e:	e015      	b.n	800e0ac <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e080:	f7fc fb1a 	bl	800a6b8 <HAL_GetTick>
 800e084:	4602      	mov	r2, r0
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	1ad3      	subs	r3, r2, r3
 800e08a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e08e:	d90d      	bls.n	800e0ac <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	22ff      	movs	r2, #255	@ 0xff
 800e096:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2203      	movs	r2, #3
 800e09c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	e058      	b.n	800e15e <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	f003 0304 	and.w	r3, r3, #4
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1e2      	bne.n	800e080 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	689a      	ldr	r2, [r3, #8]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0c8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800e0ca:	f7fc faf5 	bl	800a6b8 <HAL_GetTick>
 800e0ce:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e0d0:	e015      	b.n	800e0fe <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e0d2:	f7fc faf1 	bl	800a6b8 <HAL_GetTick>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0e0:	d90d      	bls.n	800e0fe <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	22ff      	movs	r2, #255	@ 0xff
 800e0e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2203      	movs	r2, #3
 800e0ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	e02f      	b.n	800e15e <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	f003 0304 	and.w	r3, r3, #4
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0e2      	beq.n	800e0d2 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	689a      	ldr	r2, [r3, #8]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f022 0207 	bic.w	r2, r2, #7
 800e11a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	6899      	ldr	r1, [r3, #8]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	430a      	orrs	r2, r1
 800e12a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	689a      	ldr	r2, [r3, #8]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e142:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	22ff      	movs	r2, #255	@ 0xff
 800e14a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b084      	sub	sp, #16
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d101      	bne.n	800e178 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e095      	b.n	800e2a4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d108      	bne.n	800e192 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e188:	d009      	beq.n	800e19e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	61da      	str	r2, [r3, #28]
 800e190:	e005      	b.n	800e19e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d106      	bne.n	800e1be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7fb fc6d 	bl	8009a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e1d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e1de:	d902      	bls.n	800e1e6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	60fb      	str	r3, [r7, #12]
 800e1e4:	e002      	b.n	800e1ec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e1e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e1ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800e1f4:	d007      	beq.n	800e206 <HAL_SPI_Init+0xa0>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e1fe:	d002      	beq.n	800e206 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e216:	431a      	orrs	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	691b      	ldr	r3, [r3, #16]
 800e21c:	f003 0302 	and.w	r3, r3, #2
 800e220:	431a      	orrs	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	695b      	ldr	r3, [r3, #20]
 800e226:	f003 0301 	and.w	r3, r3, #1
 800e22a:	431a      	orrs	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e234:	431a      	orrs	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a1b      	ldr	r3, [r3, #32]
 800e244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e248:	ea42 0103 	orr.w	r1, r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e250:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	430a      	orrs	r2, r1
 800e25a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	0c1b      	lsrs	r3, r3, #16
 800e262:	f003 0204 	and.w	r2, r3, #4
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e26a:	f003 0310 	and.w	r3, r3, #16
 800e26e:	431a      	orrs	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e274:	f003 0308 	and.w	r3, r3, #8
 800e278:	431a      	orrs	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e282:	ea42 0103 	orr.w	r1, r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	430a      	orrs	r2, r1
 800e292:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e049      	b.n	800e352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d106      	bne.n	800e2d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7fb fc20 	bl	8009b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f000 fb02 	bl	800e8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b082      	sub	sp, #8
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d101      	bne.n	800e36c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	e049      	b.n	800e400 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d106      	bne.n	800e386 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7fb fbb9 	bl	8009af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2202      	movs	r2, #2
 800e38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3304      	adds	r3, #4
 800e396:	4619      	mov	r1, r3
 800e398:	4610      	mov	r0, r2
 800e39a:	f000 faab 	bl	800e8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d109      	bne.n	800e42c <HAL_TIM_PWM_Start+0x24>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e41e:	b2db      	uxtb	r3, r3
 800e420:	2b01      	cmp	r3, #1
 800e422:	bf14      	ite	ne
 800e424:	2301      	movne	r3, #1
 800e426:	2300      	moveq	r3, #0
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	e03c      	b.n	800e4a6 <HAL_TIM_PWM_Start+0x9e>
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b04      	cmp	r3, #4
 800e430:	d109      	bne.n	800e446 <HAL_TIM_PWM_Start+0x3e>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	bf14      	ite	ne
 800e43e:	2301      	movne	r3, #1
 800e440:	2300      	moveq	r3, #0
 800e442:	b2db      	uxtb	r3, r3
 800e444:	e02f      	b.n	800e4a6 <HAL_TIM_PWM_Start+0x9e>
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b08      	cmp	r3, #8
 800e44a:	d109      	bne.n	800e460 <HAL_TIM_PWM_Start+0x58>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b01      	cmp	r3, #1
 800e456:	bf14      	ite	ne
 800e458:	2301      	movne	r3, #1
 800e45a:	2300      	moveq	r3, #0
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	e022      	b.n	800e4a6 <HAL_TIM_PWM_Start+0x9e>
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2b0c      	cmp	r3, #12
 800e464:	d109      	bne.n	800e47a <HAL_TIM_PWM_Start+0x72>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b01      	cmp	r3, #1
 800e470:	bf14      	ite	ne
 800e472:	2301      	movne	r3, #1
 800e474:	2300      	moveq	r3, #0
 800e476:	b2db      	uxtb	r3, r3
 800e478:	e015      	b.n	800e4a6 <HAL_TIM_PWM_Start+0x9e>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b10      	cmp	r3, #16
 800e47e:	d109      	bne.n	800e494 <HAL_TIM_PWM_Start+0x8c>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2b01      	cmp	r3, #1
 800e48a:	bf14      	ite	ne
 800e48c:	2301      	movne	r3, #1
 800e48e:	2300      	moveq	r3, #0
 800e490:	b2db      	uxtb	r3, r3
 800e492:	e008      	b.n	800e4a6 <HAL_TIM_PWM_Start+0x9e>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	bf14      	ite	ne
 800e4a0:	2301      	movne	r3, #1
 800e4a2:	2300      	moveq	r3, #0
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e079      	b.n	800e5a2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d104      	bne.n	800e4be <HAL_TIM_PWM_Start+0xb6>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e4bc:	e023      	b.n	800e506 <HAL_TIM_PWM_Start+0xfe>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b04      	cmp	r3, #4
 800e4c2:	d104      	bne.n	800e4ce <HAL_TIM_PWM_Start+0xc6>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e4cc:	e01b      	b.n	800e506 <HAL_TIM_PWM_Start+0xfe>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b08      	cmp	r3, #8
 800e4d2:	d104      	bne.n	800e4de <HAL_TIM_PWM_Start+0xd6>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4dc:	e013      	b.n	800e506 <HAL_TIM_PWM_Start+0xfe>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2b0c      	cmp	r3, #12
 800e4e2:	d104      	bne.n	800e4ee <HAL_TIM_PWM_Start+0xe6>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e4ec:	e00b      	b.n	800e506 <HAL_TIM_PWM_Start+0xfe>
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b10      	cmp	r3, #16
 800e4f2:	d104      	bne.n	800e4fe <HAL_TIM_PWM_Start+0xf6>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e4fc:	e003      	b.n	800e506 <HAL_TIM_PWM_Start+0xfe>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2202      	movs	r2, #2
 800e502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2201      	movs	r2, #1
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 fcde 	bl	800eed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a24      	ldr	r2, [pc, #144]	@ (800e5ac <HAL_TIM_PWM_Start+0x1a4>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d009      	beq.n	800e532 <HAL_TIM_PWM_Start+0x12a>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4a23      	ldr	r2, [pc, #140]	@ (800e5b0 <HAL_TIM_PWM_Start+0x1a8>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d004      	beq.n	800e532 <HAL_TIM_PWM_Start+0x12a>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a21      	ldr	r2, [pc, #132]	@ (800e5b4 <HAL_TIM_PWM_Start+0x1ac>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d101      	bne.n	800e536 <HAL_TIM_PWM_Start+0x12e>
 800e532:	2301      	movs	r3, #1
 800e534:	e000      	b.n	800e538 <HAL_TIM_PWM_Start+0x130>
 800e536:	2300      	movs	r3, #0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d007      	beq.n	800e54c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e54a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a16      	ldr	r2, [pc, #88]	@ (800e5ac <HAL_TIM_PWM_Start+0x1a4>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d004      	beq.n	800e560 <HAL_TIM_PWM_Start+0x158>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e55e:	d115      	bne.n	800e58c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	689a      	ldr	r2, [r3, #8]
 800e566:	4b14      	ldr	r3, [pc, #80]	@ (800e5b8 <HAL_TIM_PWM_Start+0x1b0>)
 800e568:	4013      	ands	r3, r2
 800e56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2b06      	cmp	r3, #6
 800e570:	d015      	beq.n	800e59e <HAL_TIM_PWM_Start+0x196>
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e578:	d011      	beq.n	800e59e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f042 0201 	orr.w	r2, r2, #1
 800e588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e58a:	e008      	b.n	800e59e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f042 0201 	orr.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	e000      	b.n	800e5a0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e59e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	40012c00 	.word	0x40012c00
 800e5b0:	40014400 	.word	0x40014400
 800e5b4:	40014800 	.word	0x40014800
 800e5b8:	00010007 	.word	0x00010007

0800e5bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 fc7e 	bl	800eed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a39      	ldr	r2, [pc, #228]	@ (800e6c0 <HAL_TIM_PWM_Stop+0x104>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d009      	beq.n	800e5f2 <HAL_TIM_PWM_Stop+0x36>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a38      	ldr	r2, [pc, #224]	@ (800e6c4 <HAL_TIM_PWM_Stop+0x108>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d004      	beq.n	800e5f2 <HAL_TIM_PWM_Stop+0x36>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a36      	ldr	r2, [pc, #216]	@ (800e6c8 <HAL_TIM_PWM_Stop+0x10c>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d101      	bne.n	800e5f6 <HAL_TIM_PWM_Stop+0x3a>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e000      	b.n	800e5f8 <HAL_TIM_PWM_Stop+0x3c>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d017      	beq.n	800e62c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6a1a      	ldr	r2, [r3, #32]
 800e602:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e606:	4013      	ands	r3, r2
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10f      	bne.n	800e62c <HAL_TIM_PWM_Stop+0x70>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6a1a      	ldr	r2, [r3, #32]
 800e612:	f240 4344 	movw	r3, #1092	@ 0x444
 800e616:	4013      	ands	r3, r2
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d107      	bne.n	800e62c <HAL_TIM_PWM_Stop+0x70>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e62a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6a1a      	ldr	r2, [r3, #32]
 800e632:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e636:	4013      	ands	r3, r2
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10f      	bne.n	800e65c <HAL_TIM_PWM_Stop+0xa0>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6a1a      	ldr	r2, [r3, #32]
 800e642:	f240 4344 	movw	r3, #1092	@ 0x444
 800e646:	4013      	ands	r3, r2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d107      	bne.n	800e65c <HAL_TIM_PWM_Stop+0xa0>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f022 0201 	bic.w	r2, r2, #1
 800e65a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d104      	bne.n	800e66c <HAL_TIM_PWM_Stop+0xb0>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2201      	movs	r2, #1
 800e666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e66a:	e023      	b.n	800e6b4 <HAL_TIM_PWM_Stop+0xf8>
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d104      	bne.n	800e67c <HAL_TIM_PWM_Stop+0xc0>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e67a:	e01b      	b.n	800e6b4 <HAL_TIM_PWM_Stop+0xf8>
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	2b08      	cmp	r3, #8
 800e680:	d104      	bne.n	800e68c <HAL_TIM_PWM_Stop+0xd0>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2201      	movs	r2, #1
 800e686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e68a:	e013      	b.n	800e6b4 <HAL_TIM_PWM_Stop+0xf8>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b0c      	cmp	r3, #12
 800e690:	d104      	bne.n	800e69c <HAL_TIM_PWM_Stop+0xe0>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2201      	movs	r2, #1
 800e696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e69a:	e00b      	b.n	800e6b4 <HAL_TIM_PWM_Stop+0xf8>
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b10      	cmp	r3, #16
 800e6a0:	d104      	bne.n	800e6ac <HAL_TIM_PWM_Stop+0xf0>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e6aa:	e003      	b.n	800e6b4 <HAL_TIM_PWM_Stop+0xf8>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e6b4:	2300      	movs	r3, #0
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3708      	adds	r7, #8
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	40012c00 	.word	0x40012c00
 800e6c4:	40014400 	.word	0x40014400
 800e6c8:	40014800 	.word	0x40014800

0800e6cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d101      	bne.n	800e6ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	e0ff      	b.n	800e8ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b14      	cmp	r3, #20
 800e6f6:	f200 80f0 	bhi.w	800e8da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e755 	.word	0x0800e755
 800e704:	0800e8db 	.word	0x0800e8db
 800e708:	0800e8db 	.word	0x0800e8db
 800e70c:	0800e8db 	.word	0x0800e8db
 800e710:	0800e795 	.word	0x0800e795
 800e714:	0800e8db 	.word	0x0800e8db
 800e718:	0800e8db 	.word	0x0800e8db
 800e71c:	0800e8db 	.word	0x0800e8db
 800e720:	0800e7d7 	.word	0x0800e7d7
 800e724:	0800e8db 	.word	0x0800e8db
 800e728:	0800e8db 	.word	0x0800e8db
 800e72c:	0800e8db 	.word	0x0800e8db
 800e730:	0800e817 	.word	0x0800e817
 800e734:	0800e8db 	.word	0x0800e8db
 800e738:	0800e8db 	.word	0x0800e8db
 800e73c:	0800e8db 	.word	0x0800e8db
 800e740:	0800e859 	.word	0x0800e859
 800e744:	0800e8db 	.word	0x0800e8db
 800e748:	0800e8db 	.word	0x0800e8db
 800e74c:	0800e8db 	.word	0x0800e8db
 800e750:	0800e899 	.word	0x0800e899
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68b9      	ldr	r1, [r7, #8]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f000 f93a 	bl	800e9d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699a      	ldr	r2, [r3, #24]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f042 0208 	orr.w	r2, r2, #8
 800e76e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	699a      	ldr	r2, [r3, #24]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f022 0204 	bic.w	r2, r2, #4
 800e77e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6999      	ldr	r1, [r3, #24]
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	691a      	ldr	r2, [r3, #16]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	430a      	orrs	r2, r1
 800e790:	619a      	str	r2, [r3, #24]
      break;
 800e792:	e0a5      	b.n	800e8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68b9      	ldr	r1, [r7, #8]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 f996 	bl	800eacc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	699a      	ldr	r2, [r3, #24]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	699a      	ldr	r2, [r3, #24]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e7be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6999      	ldr	r1, [r3, #24]
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	691b      	ldr	r3, [r3, #16]
 800e7ca:	021a      	lsls	r2, r3, #8
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	430a      	orrs	r2, r1
 800e7d2:	619a      	str	r2, [r3, #24]
      break;
 800e7d4:	e084      	b.n	800e8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f9ef 	bl	800ebc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	69da      	ldr	r2, [r3, #28]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f042 0208 	orr.w	r2, r2, #8
 800e7f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	69da      	ldr	r2, [r3, #28]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f022 0204 	bic.w	r2, r2, #4
 800e800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	69d9      	ldr	r1, [r3, #28]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	691a      	ldr	r2, [r3, #16]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	430a      	orrs	r2, r1
 800e812:	61da      	str	r2, [r3, #28]
      break;
 800e814:	e064      	b.n	800e8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68b9      	ldr	r1, [r7, #8]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f000 fa47 	bl	800ecb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	69da      	ldr	r2, [r3, #28]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	69da      	ldr	r2, [r3, #28]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	69d9      	ldr	r1, [r3, #28]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	021a      	lsls	r2, r3, #8
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	430a      	orrs	r2, r1
 800e854:	61da      	str	r2, [r3, #28]
      break;
 800e856:	e043      	b.n	800e8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68b9      	ldr	r1, [r7, #8]
 800e85e:	4618      	mov	r0, r3
 800e860:	f000 fa84 	bl	800ed6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f042 0208 	orr.w	r2, r2, #8
 800e872:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f022 0204 	bic.w	r2, r2, #4
 800e882:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	691a      	ldr	r2, [r3, #16]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	430a      	orrs	r2, r1
 800e894:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e896:	e023      	b.n	800e8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	68b9      	ldr	r1, [r7, #8]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f000 fabc 	bl	800ee1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	021a      	lsls	r2, r3, #8
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	430a      	orrs	r2, r1
 800e8d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e8d8:	e002      	b.n	800e8e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e8de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3718      	adds	r7, #24
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop

0800e8f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a30      	ldr	r2, [pc, #192]	@ (800e9c8 <TIM_Base_SetConfig+0xd4>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d003      	beq.n	800e914 <TIM_Base_SetConfig+0x20>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e912:	d108      	bne.n	800e926 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e91a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4313      	orrs	r3, r2
 800e924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a27      	ldr	r2, [pc, #156]	@ (800e9c8 <TIM_Base_SetConfig+0xd4>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d00b      	beq.n	800e946 <TIM_Base_SetConfig+0x52>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e934:	d007      	beq.n	800e946 <TIM_Base_SetConfig+0x52>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a24      	ldr	r2, [pc, #144]	@ (800e9cc <TIM_Base_SetConfig+0xd8>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d003      	beq.n	800e946 <TIM_Base_SetConfig+0x52>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4a23      	ldr	r2, [pc, #140]	@ (800e9d0 <TIM_Base_SetConfig+0xdc>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d108      	bne.n	800e958 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e94c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	4313      	orrs	r3, r2
 800e956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	695b      	ldr	r3, [r3, #20]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	689a      	ldr	r2, [r3, #8]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a12      	ldr	r2, [pc, #72]	@ (800e9c8 <TIM_Base_SetConfig+0xd4>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d007      	beq.n	800e994 <TIM_Base_SetConfig+0xa0>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a11      	ldr	r2, [pc, #68]	@ (800e9cc <TIM_Base_SetConfig+0xd8>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d003      	beq.n	800e994 <TIM_Base_SetConfig+0xa0>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a10      	ldr	r2, [pc, #64]	@ (800e9d0 <TIM_Base_SetConfig+0xdc>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d103      	bne.n	800e99c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	691a      	ldr	r2, [r3, #16]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2201      	movs	r2, #1
 800e9a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	f003 0301 	and.w	r3, r3, #1
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d105      	bne.n	800e9ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	f023 0201 	bic.w	r2, r3, #1
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	611a      	str	r2, [r3, #16]
  }
}
 800e9ba:	bf00      	nop
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	40012c00 	.word	0x40012c00
 800e9cc:	40014400 	.word	0x40014400
 800e9d0:	40014800 	.word	0x40014800

0800e9d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b087      	sub	sp, #28
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a1b      	ldr	r3, [r3, #32]
 800e9e8:	f023 0201 	bic.w	r2, r3, #1
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	699b      	ldr	r3, [r3, #24]
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f023 0303 	bic.w	r3, r3, #3
 800ea0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	f023 0302 	bic.w	r3, r3, #2
 800ea20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a24      	ldr	r2, [pc, #144]	@ (800eac0 <TIM_OC1_SetConfig+0xec>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d007      	beq.n	800ea44 <TIM_OC1_SetConfig+0x70>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a23      	ldr	r2, [pc, #140]	@ (800eac4 <TIM_OC1_SetConfig+0xf0>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d003      	beq.n	800ea44 <TIM_OC1_SetConfig+0x70>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a22      	ldr	r2, [pc, #136]	@ (800eac8 <TIM_OC1_SetConfig+0xf4>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d10c      	bne.n	800ea5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f023 0308 	bic.w	r3, r3, #8
 800ea4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f023 0304 	bic.w	r3, r3, #4
 800ea5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a17      	ldr	r2, [pc, #92]	@ (800eac0 <TIM_OC1_SetConfig+0xec>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d007      	beq.n	800ea76 <TIM_OC1_SetConfig+0xa2>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a17      	ldr	r2, [pc, #92]	@ (800eac8 <TIM_OC1_SetConfig+0xf4>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d003      	beq.n	800ea76 <TIM_OC1_SetConfig+0xa2>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a14      	ldr	r2, [pc, #80]	@ (800eac4 <TIM_OC1_SetConfig+0xf0>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d111      	bne.n	800ea9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	695b      	ldr	r3, [r3, #20]
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	693a      	ldr	r2, [r7, #16]
 800ea9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	68fa      	ldr	r2, [r7, #12]
 800eaa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	685a      	ldr	r2, [r3, #4]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	697a      	ldr	r2, [r7, #20]
 800eab2:	621a      	str	r2, [r3, #32]
}
 800eab4:	bf00      	nop
 800eab6:	371c      	adds	r7, #28
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	40012c00 	.word	0x40012c00
 800eac4:	40014800 	.word	0x40014800
 800eac8:	40014400 	.word	0x40014400

0800eacc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eacc:	b480      	push	{r7}
 800eace:	b087      	sub	sp, #28
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a1b      	ldr	r3, [r3, #32]
 800eae0:	f023 0210 	bic.w	r2, r3, #16
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	699b      	ldr	r3, [r3, #24]
 800eaf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eafa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	021b      	lsls	r3, r3, #8
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	4313      	orrs	r3, r2
 800eb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	f023 0320 	bic.w	r3, r3, #32
 800eb1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	011b      	lsls	r3, r3, #4
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4a22      	ldr	r2, [pc, #136]	@ (800ebb4 <TIM_OC2_SetConfig+0xe8>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d10d      	bne.n	800eb4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	011b      	lsls	r3, r3, #4
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a19      	ldr	r2, [pc, #100]	@ (800ebb4 <TIM_OC2_SetConfig+0xe8>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d007      	beq.n	800eb64 <TIM_OC2_SetConfig+0x98>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a18      	ldr	r2, [pc, #96]	@ (800ebb8 <TIM_OC2_SetConfig+0xec>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <TIM_OC2_SetConfig+0x98>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a17      	ldr	r2, [pc, #92]	@ (800ebbc <TIM_OC2_SetConfig+0xf0>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d113      	bne.n	800eb8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	695b      	ldr	r3, [r3, #20]
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	621a      	str	r2, [r3, #32]
}
 800eba6:	bf00      	nop
 800eba8:	371c      	adds	r7, #28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	40012c00 	.word	0x40012c00
 800ebb8:	40014400 	.word	0x40014400
 800ebbc:	40014800 	.word	0x40014800

0800ebc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a1b      	ldr	r3, [r3, #32]
 800ebd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	69db      	ldr	r3, [r3, #28]
 800ebe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ebee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ebf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f023 0303 	bic.w	r3, r3, #3
 800ebfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	021b      	lsls	r3, r3, #8
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	4313      	orrs	r3, r2
 800ec18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4a21      	ldr	r2, [pc, #132]	@ (800eca4 <TIM_OC3_SetConfig+0xe4>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d10d      	bne.n	800ec3e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	021b      	lsls	r3, r3, #8
 800ec30:	697a      	ldr	r2, [r7, #20]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4a18      	ldr	r2, [pc, #96]	@ (800eca4 <TIM_OC3_SetConfig+0xe4>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d007      	beq.n	800ec56 <TIM_OC3_SetConfig+0x96>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	4a17      	ldr	r2, [pc, #92]	@ (800eca8 <TIM_OC3_SetConfig+0xe8>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d003      	beq.n	800ec56 <TIM_OC3_SetConfig+0x96>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4a16      	ldr	r2, [pc, #88]	@ (800ecac <TIM_OC3_SetConfig+0xec>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d113      	bne.n	800ec7e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	695b      	ldr	r3, [r3, #20]
 800ec6a:	011b      	lsls	r3, r3, #4
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	011b      	lsls	r3, r3, #4
 800ec78:	693a      	ldr	r2, [r7, #16]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	621a      	str	r2, [r3, #32]
}
 800ec98:	bf00      	nop
 800ec9a:	371c      	adds	r7, #28
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr
 800eca4:	40012c00 	.word	0x40012c00
 800eca8:	40014400 	.word	0x40014400
 800ecac:	40014800 	.word	0x40014800

0800ecb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b087      	sub	sp, #28
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a1b      	ldr	r3, [r3, #32]
 800ecbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a1b      	ldr	r3, [r3, #32]
 800ecc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	69db      	ldr	r3, [r3, #28]
 800ecd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ecde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ece2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	021b      	lsls	r3, r3, #8
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	031b      	lsls	r3, r3, #12
 800ed06:	693a      	ldr	r2, [r7, #16]
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a14      	ldr	r2, [pc, #80]	@ (800ed60 <TIM_OC4_SetConfig+0xb0>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d007      	beq.n	800ed24 <TIM_OC4_SetConfig+0x74>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a13      	ldr	r2, [pc, #76]	@ (800ed64 <TIM_OC4_SetConfig+0xb4>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d003      	beq.n	800ed24 <TIM_OC4_SetConfig+0x74>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a12      	ldr	r2, [pc, #72]	@ (800ed68 <TIM_OC4_SetConfig+0xb8>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d109      	bne.n	800ed38 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	019b      	lsls	r3, r3, #6
 800ed32:	697a      	ldr	r2, [r7, #20]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	685a      	ldr	r2, [r3, #4]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	693a      	ldr	r2, [r7, #16]
 800ed50:	621a      	str	r2, [r3, #32]
}
 800ed52:	bf00      	nop
 800ed54:	371c      	adds	r7, #28
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	40012c00 	.word	0x40012c00
 800ed64:	40014400 	.word	0x40014400
 800ed68:	40014800 	.word	0x40014800

0800ed6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a1b      	ldr	r3, [r3, #32]
 800ed7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a1b      	ldr	r3, [r3, #32]
 800ed80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800edb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	041b      	lsls	r3, r3, #16
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	4313      	orrs	r3, r2
 800edbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a13      	ldr	r2, [pc, #76]	@ (800ee10 <TIM_OC5_SetConfig+0xa4>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d007      	beq.n	800edd6 <TIM_OC5_SetConfig+0x6a>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a12      	ldr	r2, [pc, #72]	@ (800ee14 <TIM_OC5_SetConfig+0xa8>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d003      	beq.n	800edd6 <TIM_OC5_SetConfig+0x6a>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a11      	ldr	r2, [pc, #68]	@ (800ee18 <TIM_OC5_SetConfig+0xac>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d109      	bne.n	800edea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	695b      	ldr	r3, [r3, #20]
 800ede2:	021b      	lsls	r3, r3, #8
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	4313      	orrs	r3, r2
 800ede8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	697a      	ldr	r2, [r7, #20]
 800edee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	621a      	str	r2, [r3, #32]
}
 800ee04:	bf00      	nop
 800ee06:	371c      	adds	r7, #28
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	40012c00 	.word	0x40012c00
 800ee14:	40014400 	.word	0x40014400
 800ee18:	40014800 	.word	0x40014800

0800ee1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ee4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	021b      	lsls	r3, r3, #8
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ee62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	051b      	lsls	r3, r3, #20
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a14      	ldr	r2, [pc, #80]	@ (800eec4 <TIM_OC6_SetConfig+0xa8>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d007      	beq.n	800ee88 <TIM_OC6_SetConfig+0x6c>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a13      	ldr	r2, [pc, #76]	@ (800eec8 <TIM_OC6_SetConfig+0xac>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d003      	beq.n	800ee88 <TIM_OC6_SetConfig+0x6c>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a12      	ldr	r2, [pc, #72]	@ (800eecc <TIM_OC6_SetConfig+0xb0>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d109      	bne.n	800ee9c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	029b      	lsls	r3, r3, #10
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	685a      	ldr	r2, [r3, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	621a      	str	r2, [r3, #32]
}
 800eeb6:	bf00      	nop
 800eeb8:	371c      	adds	r7, #28
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	40012c00 	.word	0x40012c00
 800eec8:	40014400 	.word	0x40014400
 800eecc:	40014800 	.word	0x40014800

0800eed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	60b9      	str	r1, [r7, #8]
 800eeda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	f003 031f 	and.w	r3, r3, #31
 800eee2:	2201      	movs	r2, #1
 800eee4:	fa02 f303 	lsl.w	r3, r2, r3
 800eee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6a1a      	ldr	r2, [r3, #32]
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	43db      	mvns	r3, r3
 800eef2:	401a      	ands	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6a1a      	ldr	r2, [r3, #32]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	f003 031f 	and.w	r3, r3, #31
 800ef02:	6879      	ldr	r1, [r7, #4]
 800ef04:	fa01 f303 	lsl.w	r3, r1, r3
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	621a      	str	r2, [r3, #32]
}
 800ef0e:	bf00      	nop
 800ef10:	371c      	adds	r7, #28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
	...

0800ef1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d109      	bne.n	800ef40 <HAL_TIMEx_PWMN_Start+0x24>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	bf14      	ite	ne
 800ef38:	2301      	movne	r3, #1
 800ef3a:	2300      	moveq	r3, #0
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	e022      	b.n	800ef86 <HAL_TIMEx_PWMN_Start+0x6a>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b04      	cmp	r3, #4
 800ef44:	d109      	bne.n	800ef5a <HAL_TIMEx_PWMN_Start+0x3e>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	bf14      	ite	ne
 800ef52:	2301      	movne	r3, #1
 800ef54:	2300      	moveq	r3, #0
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	e015      	b.n	800ef86 <HAL_TIMEx_PWMN_Start+0x6a>
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	2b08      	cmp	r3, #8
 800ef5e:	d109      	bne.n	800ef74 <HAL_TIMEx_PWMN_Start+0x58>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	bf14      	ite	ne
 800ef6c:	2301      	movne	r3, #1
 800ef6e:	2300      	moveq	r3, #0
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	e008      	b.n	800ef86 <HAL_TIMEx_PWMN_Start+0x6a>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	bf14      	ite	ne
 800ef80:	2301      	movne	r3, #1
 800ef82:	2300      	moveq	r3, #0
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e055      	b.n	800f03a <HAL_TIMEx_PWMN_Start+0x11e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d104      	bne.n	800ef9e <HAL_TIMEx_PWMN_Start+0x82>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2202      	movs	r2, #2
 800ef98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef9c:	e013      	b.n	800efc6 <HAL_TIMEx_PWMN_Start+0xaa>
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d104      	bne.n	800efae <HAL_TIMEx_PWMN_Start+0x92>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2202      	movs	r2, #2
 800efa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efac:	e00b      	b.n	800efc6 <HAL_TIMEx_PWMN_Start+0xaa>
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b08      	cmp	r3, #8
 800efb2:	d104      	bne.n	800efbe <HAL_TIMEx_PWMN_Start+0xa2>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2202      	movs	r2, #2
 800efb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800efbc:	e003      	b.n	800efc6 <HAL_TIMEx_PWMN_Start+0xaa>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2202      	movs	r2, #2
 800efc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2204      	movs	r2, #4
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 f89c 	bl	800f10c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800efe2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a16      	ldr	r2, [pc, #88]	@ (800f044 <HAL_TIMEx_PWMN_Start+0x128>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d004      	beq.n	800eff8 <HAL_TIMEx_PWMN_Start+0xdc>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eff6:	d115      	bne.n	800f024 <HAL_TIMEx_PWMN_Start+0x108>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	689a      	ldr	r2, [r3, #8]
 800effe:	4b12      	ldr	r3, [pc, #72]	@ (800f048 <HAL_TIMEx_PWMN_Start+0x12c>)
 800f000:	4013      	ands	r3, r2
 800f002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b06      	cmp	r3, #6
 800f008:	d015      	beq.n	800f036 <HAL_TIMEx_PWMN_Start+0x11a>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f010:	d011      	beq.n	800f036 <HAL_TIMEx_PWMN_Start+0x11a>
    {
      __HAL_TIM_ENABLE(htim);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f042 0201 	orr.w	r2, r2, #1
 800f020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f022:	e008      	b.n	800f036 <HAL_TIMEx_PWMN_Start+0x11a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f042 0201 	orr.w	r2, r2, #1
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	e000      	b.n	800f038 <HAL_TIMEx_PWMN_Start+0x11c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	40012c00 	.word	0x40012c00
 800f048:	00010007 	.word	0x00010007

0800f04c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d101      	bne.n	800f064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f060:	2302      	movs	r3, #2
 800f062:	e04a      	b.n	800f0fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2202      	movs	r2, #2
 800f070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a1f      	ldr	r2, [pc, #124]	@ (800f108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d108      	bne.n	800f0a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4a12      	ldr	r2, [pc, #72]	@ (800f108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d004      	beq.n	800f0ce <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0cc:	d10c      	bne.n	800f0e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	689b      	ldr	r3, [r3, #8]
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3714      	adds	r7, #20
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	40012c00 	.word	0x40012c00

0800f10c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b087      	sub	sp, #28
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f003 030f 	and.w	r3, r3, #15
 800f11e:	2204      	movs	r2, #4
 800f120:	fa02 f303 	lsl.w	r3, r2, r3
 800f124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6a1a      	ldr	r2, [r3, #32]
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	43db      	mvns	r3, r3
 800f12e:	401a      	ands	r2, r3
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6a1a      	ldr	r2, [r3, #32]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	f003 030f 	and.w	r3, r3, #15
 800f13e:	6879      	ldr	r1, [r7, #4]
 800f140:	fa01 f303 	lsl.w	r3, r1, r3
 800f144:	431a      	orrs	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	621a      	str	r2, [r3, #32]
}
 800f14a:	bf00      	nop
 800f14c:	371c      	adds	r7, #28
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr

0800f156 <LL_RCC_GetUSARTClockSource>:
{
 800f156:	b480      	push	{r7}
 800f158:	b083      	sub	sp, #12
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f15e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f162:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4013      	ands	r3, r2
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	370c      	adds	r7, #12
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <LL_RCC_GetLPUARTClockSource>:
{
 800f176:	b480      	push	{r7}
 800f178:	b083      	sub	sp, #12
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f17e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f182:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4013      	ands	r3, r2
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr

0800f196 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b082      	sub	sp, #8
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d101      	bne.n	800f1a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e042      	b.n	800f22e <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d106      	bne.n	800f1c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7fa fcea 	bl	8009b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2224      	movs	r2, #36	@ 0x24
 800f1c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f022 0201 	bic.w	r2, r2, #1
 800f1d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fe41 	bl	800fe68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fc16 	bl	800fa18 <UART_SetConfig>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d101      	bne.n	800f1f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e01b      	b.n	800f22e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	685a      	ldr	r2, [r3, #4]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f204:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	689a      	ldr	r2, [r3, #8]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f214:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f042 0201 	orr.w	r2, r2, #1
 800f224:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fec0 	bl	800ffac <UART_CheckIdleState>
 800f22c:	4603      	mov	r3, r0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b08a      	sub	sp, #40	@ 0x28
 800f23a:	af02      	add	r7, sp, #8
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	60b9      	str	r1, [r7, #8]
 800f240:	603b      	str	r3, [r7, #0]
 800f242:	4613      	mov	r3, r2
 800f244:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f24c:	2b20      	cmp	r3, #32
 800f24e:	d17b      	bne.n	800f348 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d002      	beq.n	800f25c <HAL_UART_Transmit+0x26>
 800f256:	88fb      	ldrh	r3, [r7, #6]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d101      	bne.n	800f260 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e074      	b.n	800f34a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2200      	movs	r2, #0
 800f264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2221      	movs	r2, #33	@ 0x21
 800f26c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f270:	f7fb fa22 	bl	800a6b8 <HAL_GetTick>
 800f274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	88fa      	ldrh	r2, [r7, #6]
 800f27a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	88fa      	ldrh	r2, [r7, #6]
 800f282:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f28e:	d108      	bne.n	800f2a2 <HAL_UART_Transmit+0x6c>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d104      	bne.n	800f2a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f298:	2300      	movs	r3, #0
 800f29a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	61bb      	str	r3, [r7, #24]
 800f2a0:	e003      	b.n	800f2aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f2aa:	e030      	b.n	800f30e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	2180      	movs	r1, #128	@ 0x80
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f000 ff22 	bl	8010100 <UART_WaitOnFlagUntilTimeout>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d005      	beq.n	800f2ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2220      	movs	r2, #32
 800f2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f2ca:	2303      	movs	r3, #3
 800f2cc:	e03d      	b.n	800f34a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10b      	bne.n	800f2ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	3302      	adds	r3, #2
 800f2e8:	61bb      	str	r3, [r7, #24]
 800f2ea:	e007      	b.n	800f2fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f302:	b29b      	uxth	r3, r3
 800f304:	3b01      	subs	r3, #1
 800f306:	b29a      	uxth	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f314:	b29b      	uxth	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1c8      	bne.n	800f2ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2200      	movs	r2, #0
 800f322:	2140      	movs	r1, #64	@ 0x40
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 feeb 	bl	8010100 <UART_WaitOnFlagUntilTimeout>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d005      	beq.n	800f33c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2220      	movs	r2, #32
 800f334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f338:	2303      	movs	r3, #3
 800f33a:	e006      	b.n	800f34a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2220      	movs	r2, #32
 800f340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	e000      	b.n	800f34a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f348:	2302      	movs	r3, #2
  }
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3720      	adds	r7, #32
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
	...

0800f354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b0ba      	sub	sp, #232	@ 0xe8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	69db      	ldr	r3, [r3, #28]
 800f362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f37a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f37e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f382:	4013      	ands	r3, r2
 800f384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d11b      	bne.n	800f3c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f394:	f003 0320 	and.w	r3, r3, #32
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d015      	beq.n	800f3c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3a0:	f003 0320 	and.w	r3, r3, #32
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d105      	bne.n	800f3b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d009      	beq.n	800f3c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f000 8300 	beq.w	800f9be <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	4798      	blx	r3
      }
      return;
 800f3c6:	e2fa      	b.n	800f9be <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f000 8123 	beq.w	800f618 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f3d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f3d6:	4b8d      	ldr	r3, [pc, #564]	@ (800f60c <HAL_UART_IRQHandler+0x2b8>)
 800f3d8:	4013      	ands	r3, r2
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d106      	bne.n	800f3ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f3de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f3e2:	4b8b      	ldr	r3, [pc, #556]	@ (800f610 <HAL_UART_IRQHandler+0x2bc>)
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f000 8116 	beq.w	800f618 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3f0:	f003 0301 	and.w	r3, r3, #1
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d011      	beq.n	800f41c <HAL_UART_IRQHandler+0xc8>
 800f3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f400:	2b00      	cmp	r3, #0
 800f402:	d00b      	beq.n	800f41c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2201      	movs	r2, #1
 800f40a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f412:	f043 0201 	orr.w	r2, r3, #1
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f420:	f003 0302 	and.w	r3, r3, #2
 800f424:	2b00      	cmp	r3, #0
 800f426:	d011      	beq.n	800f44c <HAL_UART_IRQHandler+0xf8>
 800f428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00b      	beq.n	800f44c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2202      	movs	r2, #2
 800f43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f442:	f043 0204 	orr.w	r2, r3, #4
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f450:	f003 0304 	and.w	r3, r3, #4
 800f454:	2b00      	cmp	r3, #0
 800f456:	d011      	beq.n	800f47c <HAL_UART_IRQHandler+0x128>
 800f458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00b      	beq.n	800f47c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2204      	movs	r2, #4
 800f46a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f472:	f043 0202 	orr.w	r2, r3, #2
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f480:	f003 0308 	and.w	r3, r3, #8
 800f484:	2b00      	cmp	r3, #0
 800f486:	d017      	beq.n	800f4b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f48c:	f003 0320 	and.w	r3, r3, #32
 800f490:	2b00      	cmp	r3, #0
 800f492:	d105      	bne.n	800f4a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f494:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f498:	4b5c      	ldr	r3, [pc, #368]	@ (800f60c <HAL_UART_IRQHandler+0x2b8>)
 800f49a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00b      	beq.n	800f4b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2208      	movs	r2, #8
 800f4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4ae:	f043 0208 	orr.w	r2, r3, #8
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d012      	beq.n	800f4ea <HAL_UART_IRQHandler+0x196>
 800f4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00c      	beq.n	800f4ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4e0:	f043 0220 	orr.w	r2, r3, #32
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f000 8266 	beq.w	800f9c2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4fa:	f003 0320 	and.w	r3, r3, #32
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d013      	beq.n	800f52a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f506:	f003 0320 	and.w	r3, r3, #32
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d105      	bne.n	800f51a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f516:	2b00      	cmp	r3, #0
 800f518:	d007      	beq.n	800f52a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f530:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f53e:	2b40      	cmp	r3, #64	@ 0x40
 800f540:	d005      	beq.n	800f54e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f546:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d054      	beq.n	800f5f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 fe43 	bl	80101da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f55e:	2b40      	cmp	r3, #64	@ 0x40
 800f560:	d146      	bne.n	800f5f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3308      	adds	r3, #8
 800f568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f570:	e853 3f00 	ldrex	r3, [r3]
 800f574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f57c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	3308      	adds	r3, #8
 800f58a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f58e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f59a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f59e:	e841 2300 	strex	r3, r2, [r1]
 800f5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1d9      	bne.n	800f562 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d017      	beq.n	800f5e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5be:	4a15      	ldr	r2, [pc, #84]	@ (800f614 <HAL_UART_IRQHandler+0x2c0>)
 800f5c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7fc faa1 	bl	800bb10 <HAL_DMA_Abort_IT>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d019      	beq.n	800f608 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f5e2:	4610      	mov	r0, r2
 800f5e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5e6:	e00f      	b.n	800f608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f9ff 	bl	800f9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5ee:	e00b      	b.n	800f608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 f9fb 	bl	800f9ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5f6:	e007      	b.n	800f608 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 f9f7 	bl	800f9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f606:	e1dc      	b.n	800f9c2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f608:	bf00      	nop
    return;
 800f60a:	e1da      	b.n	800f9c2 <HAL_UART_IRQHandler+0x66e>
 800f60c:	10000001 	.word	0x10000001
 800f610:	04000120 	.word	0x04000120
 800f614:	080102a7 	.word	0x080102a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	f040 8170 	bne.w	800f902 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f626:	f003 0310 	and.w	r3, r3, #16
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f000 8169 	beq.w	800f902 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f634:	f003 0310 	and.w	r3, r3, #16
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 8162 	beq.w	800f902 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2210      	movs	r2, #16
 800f644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f650:	2b40      	cmp	r3, #64	@ 0x40
 800f652:	f040 80d8 	bne.w	800f806 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f000 80af 	beq.w	800f7cc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f678:	429a      	cmp	r2, r3
 800f67a:	f080 80a7 	bcs.w	800f7cc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f684:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f003 0320 	and.w	r3, r3, #32
 800f696:	2b00      	cmp	r3, #0
 800f698:	f040 8087 	bne.w	800f7aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f6a8:	e853 3f00 	ldrex	r3, [r3]
 800f6ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f6b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f6b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f6c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f6ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f6d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1da      	bne.n	800f69c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f6f0:	e853 3f00 	ldrex	r3, [r3]
 800f6f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f6f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6f8:	f023 0301 	bic.w	r3, r3, #1
 800f6fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3308      	adds	r3, #8
 800f706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f70a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f70e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f710:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f712:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f716:	e841 2300 	strex	r3, r2, [r1]
 800f71a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f71c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1e1      	bne.n	800f6e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3308      	adds	r3, #8
 800f728:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f72c:	e853 3f00 	ldrex	r3, [r3]
 800f730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	3308      	adds	r3, #8
 800f742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f748:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f74c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f74e:	e841 2300 	strex	r3, r2, [r1]
 800f752:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1e3      	bne.n	800f722 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2220      	movs	r2, #32
 800f75e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f770:	e853 3f00 	ldrex	r3, [r3]
 800f774:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f778:	f023 0310 	bic.w	r3, r3, #16
 800f77c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	461a      	mov	r2, r3
 800f786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f78a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f78c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f792:	e841 2300 	strex	r3, r2, [r1]
 800f796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1e4      	bne.n	800f768 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fc f954 	bl	800ba52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2202      	movs	r2, #2
 800f7ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f91b 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f7ca:	e0fc      	b.n	800f9c6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f7d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	f040 80f5 	bne.w	800f9c6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f003 0320 	and.w	r3, r3, #32
 800f7ea:	2b20      	cmp	r3, #32
 800f7ec:	f040 80eb 	bne.w	800f9c6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2202      	movs	r2, #2
 800f7f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f8fe 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
      return;
 800f804:	e0df      	b.n	800f9c6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f812:	b29b      	uxth	r3, r3
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f820:	b29b      	uxth	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 80d1 	beq.w	800f9ca <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800f828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f000 80cc 	beq.w	800f9ca <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83a:	e853 3f00 	ldrex	r3, [r3]
 800f83e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	461a      	mov	r2, r3
 800f850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f854:	647b      	str	r3, [r7, #68]	@ 0x44
 800f856:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f85a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f85c:	e841 2300 	strex	r3, r2, [r1]
 800f860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1e4      	bne.n	800f832 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3308      	adds	r3, #8
 800f86e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f872:	e853 3f00 	ldrex	r3, [r3]
 800f876:	623b      	str	r3, [r7, #32]
   return(result);
 800f878:	6a3b      	ldr	r3, [r7, #32]
 800f87a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f87e:	f023 0301 	bic.w	r3, r3, #1
 800f882:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	3308      	adds	r3, #8
 800f88c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f890:	633a      	str	r2, [r7, #48]	@ 0x30
 800f892:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f894:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f898:	e841 2300 	strex	r3, r2, [r1]
 800f89c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1e1      	bne.n	800f868 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2220      	movs	r2, #32
 800f8a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	e853 3f00 	ldrex	r3, [r3]
 800f8c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f023 0310 	bic.w	r3, r3, #16
 800f8cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f8da:	61fb      	str	r3, [r7, #28]
 800f8dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	69b9      	ldr	r1, [r7, #24]
 800f8e0:	69fa      	ldr	r2, [r7, #28]
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	617b      	str	r3, [r7, #20]
   return(result);
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e4      	bne.n	800f8b8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2202      	movs	r2, #2
 800f8f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f8f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 f880 	bl	800fa00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f900:	e063      	b.n	800f9ca <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00e      	beq.n	800f92c <HAL_UART_IRQHandler+0x5d8>
 800f90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f922:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fcff 	bl	8010328 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f92a:	e051      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f934:	2b00      	cmp	r3, #0
 800f936:	d014      	beq.n	800f962 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f93c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f940:	2b00      	cmp	r3, #0
 800f942:	d105      	bne.n	800f950 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f948:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d008      	beq.n	800f962 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f954:	2b00      	cmp	r3, #0
 800f956:	d03a      	beq.n	800f9ce <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	4798      	blx	r3
    }
    return;
 800f960:	e035      	b.n	800f9ce <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d009      	beq.n	800f982 <HAL_UART_IRQHandler+0x62e>
 800f96e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f976:	2b00      	cmp	r3, #0
 800f978:	d003      	beq.n	800f982 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 fca9 	bl	80102d2 <UART_EndTransmit_IT>
    return;
 800f980:	e026      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d009      	beq.n	800f9a2 <HAL_UART_IRQHandler+0x64e>
 800f98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f992:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f996:	2b00      	cmp	r3, #0
 800f998:	d003      	beq.n	800f9a2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fcd8 	bl	8010350 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9a0:	e016      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d010      	beq.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
 800f9ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	da0c      	bge.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fcc0 	bl	801033c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9bc:	e008      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
      return;
 800f9be:	bf00      	nop
 800f9c0:	e006      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
    return;
 800f9c2:	bf00      	nop
 800f9c4:	e004      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
      return;
 800f9c6:	bf00      	nop
 800f9c8:	e002      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
      return;
 800f9ca:	bf00      	nop
 800f9cc:	e000      	b.n	800f9d0 <HAL_UART_IRQHandler+0x67c>
    return;
 800f9ce:	bf00      	nop
  }
}
 800f9d0:	37e8      	adds	r7, #232	@ 0xe8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop

0800f9d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f9f4:	bf00      	nop
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa1c:	b08c      	sub	sp, #48	@ 0x30
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fa22:	2300      	movs	r3, #0
 800fa24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	689a      	ldr	r2, [r3, #8]
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	431a      	orrs	r2, r3
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	431a      	orrs	r2, r3
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	69db      	ldr	r3, [r3, #28]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	4baf      	ldr	r3, [pc, #700]	@ (800fd04 <UART_SetConfig+0x2ec>)
 800fa48:	4013      	ands	r3, r2
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	6812      	ldr	r2, [r2, #0]
 800fa4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa50:	430b      	orrs	r3, r1
 800fa52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	68da      	ldr	r2, [r3, #12]
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	430a      	orrs	r2, r1
 800fa68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	699b      	ldr	r3, [r3, #24]
 800fa6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4aa4      	ldr	r2, [pc, #656]	@ (800fd08 <UART_SetConfig+0x2f0>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d004      	beq.n	800fa84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	6a1b      	ldr	r3, [r3, #32]
 800fa7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa80:	4313      	orrs	r3, r2
 800fa82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800fa8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800fa92:	697a      	ldr	r2, [r7, #20]
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa98:	430b      	orrs	r3, r1
 800fa9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa2:	f023 010f 	bic.w	r1, r3, #15
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	430a      	orrs	r2, r1
 800fab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a95      	ldr	r2, [pc, #596]	@ (800fd0c <UART_SetConfig+0x2f4>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d125      	bne.n	800fb08 <UART_SetConfig+0xf0>
 800fabc:	2003      	movs	r0, #3
 800fabe:	f7ff fb4a 	bl	800f156 <LL_RCC_GetUSARTClockSource>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b03      	cmp	r3, #3
 800fac6:	d81b      	bhi.n	800fb00 <UART_SetConfig+0xe8>
 800fac8:	a201      	add	r2, pc, #4	@ (adr r2, 800fad0 <UART_SetConfig+0xb8>)
 800faca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800face:	bf00      	nop
 800fad0:	0800fae1 	.word	0x0800fae1
 800fad4:	0800faf1 	.word	0x0800faf1
 800fad8:	0800fae9 	.word	0x0800fae9
 800fadc:	0800faf9 	.word	0x0800faf9
 800fae0:	2301      	movs	r3, #1
 800fae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fae6:	e042      	b.n	800fb6e <UART_SetConfig+0x156>
 800fae8:	2302      	movs	r3, #2
 800faea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800faee:	e03e      	b.n	800fb6e <UART_SetConfig+0x156>
 800faf0:	2304      	movs	r3, #4
 800faf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800faf6:	e03a      	b.n	800fb6e <UART_SetConfig+0x156>
 800faf8:	2308      	movs	r3, #8
 800fafa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fafe:	e036      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb00:	2310      	movs	r3, #16
 800fb02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fb06:	e032      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a7e      	ldr	r2, [pc, #504]	@ (800fd08 <UART_SetConfig+0x2f0>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d12a      	bne.n	800fb68 <UART_SetConfig+0x150>
 800fb12:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800fb16:	f7ff fb2e 	bl	800f176 <LL_RCC_GetLPUARTClockSource>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fb20:	d01a      	beq.n	800fb58 <UART_SetConfig+0x140>
 800fb22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fb26:	d81b      	bhi.n	800fb60 <UART_SetConfig+0x148>
 800fb28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb2c:	d00c      	beq.n	800fb48 <UART_SetConfig+0x130>
 800fb2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb32:	d815      	bhi.n	800fb60 <UART_SetConfig+0x148>
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d003      	beq.n	800fb40 <UART_SetConfig+0x128>
 800fb38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb3c:	d008      	beq.n	800fb50 <UART_SetConfig+0x138>
 800fb3e:	e00f      	b.n	800fb60 <UART_SetConfig+0x148>
 800fb40:	2300      	movs	r3, #0
 800fb42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fb46:	e012      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb48:	2302      	movs	r3, #2
 800fb4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fb4e:	e00e      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb50:	2304      	movs	r3, #4
 800fb52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fb56:	e00a      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb58:	2308      	movs	r3, #8
 800fb5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fb5e:	e006      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb60:	2310      	movs	r3, #16
 800fb62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fb66:	e002      	b.n	800fb6e <UART_SetConfig+0x156>
 800fb68:	2310      	movs	r3, #16
 800fb6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a65      	ldr	r2, [pc, #404]	@ (800fd08 <UART_SetConfig+0x2f0>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	f040 8097 	bne.w	800fca8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fb7e:	2b08      	cmp	r3, #8
 800fb80:	d823      	bhi.n	800fbca <UART_SetConfig+0x1b2>
 800fb82:	a201      	add	r2, pc, #4	@ (adr r2, 800fb88 <UART_SetConfig+0x170>)
 800fb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb88:	0800fbad 	.word	0x0800fbad
 800fb8c:	0800fbcb 	.word	0x0800fbcb
 800fb90:	0800fbb5 	.word	0x0800fbb5
 800fb94:	0800fbcb 	.word	0x0800fbcb
 800fb98:	0800fbbb 	.word	0x0800fbbb
 800fb9c:	0800fbcb 	.word	0x0800fbcb
 800fba0:	0800fbcb 	.word	0x0800fbcb
 800fba4:	0800fbcb 	.word	0x0800fbcb
 800fba8:	0800fbc3 	.word	0x0800fbc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbac:	f7fd fc3c 	bl	800d428 <HAL_RCC_GetPCLK1Freq>
 800fbb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fbb2:	e010      	b.n	800fbd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fbb4:	4b56      	ldr	r3, [pc, #344]	@ (800fd10 <UART_SetConfig+0x2f8>)
 800fbb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fbb8:	e00d      	b.n	800fbd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbba:	f7fd fbb5 	bl	800d328 <HAL_RCC_GetSysClockFreq>
 800fbbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fbc0:	e009      	b.n	800fbd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fbc8:	e005      	b.n	800fbd6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fbd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	f000 812b 	beq.w	800fe34 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbe2:	4a4c      	ldr	r2, [pc, #304]	@ (800fd14 <UART_SetConfig+0x2fc>)
 800fbe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbec:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	685a      	ldr	r2, [r3, #4]
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	4413      	add	r3, r2
 800fbfc:	69ba      	ldr	r2, [r7, #24]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d305      	bcc.n	800fc0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc08:	69ba      	ldr	r2, [r7, #24]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d903      	bls.n	800fc16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fc14:	e10e      	b.n	800fe34 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc18:	2200      	movs	r2, #0
 800fc1a:	60bb      	str	r3, [r7, #8]
 800fc1c:	60fa      	str	r2, [r7, #12]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc22:	4a3c      	ldr	r2, [pc, #240]	@ (800fd14 <UART_SetConfig+0x2fc>)
 800fc24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	603b      	str	r3, [r7, #0]
 800fc2e:	607a      	str	r2, [r7, #4]
 800fc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc38:	f7f8 fd42 	bl	80086c0 <__aeabi_uldivmod>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	460b      	mov	r3, r1
 800fc40:	4610      	mov	r0, r2
 800fc42:	4619      	mov	r1, r3
 800fc44:	f04f 0200 	mov.w	r2, #0
 800fc48:	f04f 0300 	mov.w	r3, #0
 800fc4c:	020b      	lsls	r3, r1, #8
 800fc4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc52:	0202      	lsls	r2, r0, #8
 800fc54:	6979      	ldr	r1, [r7, #20]
 800fc56:	6849      	ldr	r1, [r1, #4]
 800fc58:	0849      	lsrs	r1, r1, #1
 800fc5a:	2000      	movs	r0, #0
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	4605      	mov	r5, r0
 800fc60:	eb12 0804 	adds.w	r8, r2, r4
 800fc64:	eb43 0905 	adc.w	r9, r3, r5
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	469a      	mov	sl, r3
 800fc70:	4693      	mov	fp, r2
 800fc72:	4652      	mov	r2, sl
 800fc74:	465b      	mov	r3, fp
 800fc76:	4640      	mov	r0, r8
 800fc78:	4649      	mov	r1, r9
 800fc7a:	f7f8 fd21 	bl	80086c0 <__aeabi_uldivmod>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	460b      	mov	r3, r1
 800fc82:	4613      	mov	r3, r2
 800fc84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc86:	6a3b      	ldr	r3, [r7, #32]
 800fc88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc8c:	d308      	bcc.n	800fca0 <UART_SetConfig+0x288>
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc94:	d204      	bcs.n	800fca0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	6a3a      	ldr	r2, [r7, #32]
 800fc9c:	60da      	str	r2, [r3, #12]
 800fc9e:	e0c9      	b.n	800fe34 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fca6:	e0c5      	b.n	800fe34 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	69db      	ldr	r3, [r3, #28]
 800fcac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fcb0:	d16d      	bne.n	800fd8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800fcb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	2b07      	cmp	r3, #7
 800fcba:	d82d      	bhi.n	800fd18 <UART_SetConfig+0x300>
 800fcbc:	a201      	add	r2, pc, #4	@ (adr r2, 800fcc4 <UART_SetConfig+0x2ac>)
 800fcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc2:	bf00      	nop
 800fcc4:	0800fce5 	.word	0x0800fce5
 800fcc8:	0800fced 	.word	0x0800fced
 800fccc:	0800fd19 	.word	0x0800fd19
 800fcd0:	0800fcf3 	.word	0x0800fcf3
 800fcd4:	0800fd19 	.word	0x0800fd19
 800fcd8:	0800fd19 	.word	0x0800fd19
 800fcdc:	0800fd19 	.word	0x0800fd19
 800fce0:	0800fcfb 	.word	0x0800fcfb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fce4:	f7fd fbb6 	bl	800d454 <HAL_RCC_GetPCLK2Freq>
 800fce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fcea:	e01b      	b.n	800fd24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fcec:	4b08      	ldr	r3, [pc, #32]	@ (800fd10 <UART_SetConfig+0x2f8>)
 800fcee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fcf0:	e018      	b.n	800fd24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fcf2:	f7fd fb19 	bl	800d328 <HAL_RCC_GetSysClockFreq>
 800fcf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fcf8:	e014      	b.n	800fd24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fcfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fd00:	e010      	b.n	800fd24 <UART_SetConfig+0x30c>
 800fd02:	bf00      	nop
 800fd04:	cfff69f3 	.word	0xcfff69f3
 800fd08:	40008000 	.word	0x40008000
 800fd0c:	40013800 	.word	0x40013800
 800fd10:	00f42400 	.word	0x00f42400
 800fd14:	08018224 	.word	0x08018224
      default:
        pclk = 0U;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fd22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 8084 	beq.w	800fe34 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd30:	4a4b      	ldr	r2, [pc, #300]	@ (800fe60 <UART_SetConfig+0x448>)
 800fd32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd36:	461a      	mov	r2, r3
 800fd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd3e:	005a      	lsls	r2, r3, #1
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	085b      	lsrs	r3, r3, #1
 800fd46:	441a      	add	r2, r3
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd52:	6a3b      	ldr	r3, [r7, #32]
 800fd54:	2b0f      	cmp	r3, #15
 800fd56:	d916      	bls.n	800fd86 <UART_SetConfig+0x36e>
 800fd58:	6a3b      	ldr	r3, [r7, #32]
 800fd5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd5e:	d212      	bcs.n	800fd86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd60:	6a3b      	ldr	r3, [r7, #32]
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	f023 030f 	bic.w	r3, r3, #15
 800fd68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	085b      	lsrs	r3, r3, #1
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	f003 0307 	and.w	r3, r3, #7
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	8bfb      	ldrh	r3, [r7, #30]
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	8bfa      	ldrh	r2, [r7, #30]
 800fd82:	60da      	str	r2, [r3, #12]
 800fd84:	e056      	b.n	800fe34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800fd8c:	e052      	b.n	800fe34 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fd8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fd92:	3b01      	subs	r3, #1
 800fd94:	2b07      	cmp	r3, #7
 800fd96:	d822      	bhi.n	800fdde <UART_SetConfig+0x3c6>
 800fd98:	a201      	add	r2, pc, #4	@ (adr r2, 800fda0 <UART_SetConfig+0x388>)
 800fd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9e:	bf00      	nop
 800fda0:	0800fdc1 	.word	0x0800fdc1
 800fda4:	0800fdc9 	.word	0x0800fdc9
 800fda8:	0800fddf 	.word	0x0800fddf
 800fdac:	0800fdcf 	.word	0x0800fdcf
 800fdb0:	0800fddf 	.word	0x0800fddf
 800fdb4:	0800fddf 	.word	0x0800fddf
 800fdb8:	0800fddf 	.word	0x0800fddf
 800fdbc:	0800fdd7 	.word	0x0800fdd7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdc0:	f7fd fb48 	bl	800d454 <HAL_RCC_GetPCLK2Freq>
 800fdc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fdc6:	e010      	b.n	800fdea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fdc8:	4b26      	ldr	r3, [pc, #152]	@ (800fe64 <UART_SetConfig+0x44c>)
 800fdca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fdcc:	e00d      	b.n	800fdea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdce:	f7fd faab 	bl	800d328 <HAL_RCC_GetSysClockFreq>
 800fdd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800fdd4:	e009      	b.n	800fdea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fdda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800fddc:	e005      	b.n	800fdea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800fdde:	2300      	movs	r3, #0
 800fde0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800fde8:	bf00      	nop
    }

    if (pclk != 0U)
 800fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d021      	beq.n	800fe34 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdf4:	4a1a      	ldr	r2, [pc, #104]	@ (800fe60 <UART_SetConfig+0x448>)
 800fdf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdfe:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	085b      	lsrs	r3, r3, #1
 800fe08:	441a      	add	r2, r3
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe14:	6a3b      	ldr	r3, [r7, #32]
 800fe16:	2b0f      	cmp	r3, #15
 800fe18:	d909      	bls.n	800fe2e <UART_SetConfig+0x416>
 800fe1a:	6a3b      	ldr	r3, [r7, #32]
 800fe1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe20:	d205      	bcs.n	800fe2e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe22:	6a3b      	ldr	r3, [r7, #32]
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	60da      	str	r2, [r3, #12]
 800fe2c:	e002      	b.n	800fe34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2200      	movs	r2, #0
 800fe48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fe50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3730      	adds	r7, #48	@ 0x30
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe5e:	bf00      	nop
 800fe60:	08018224 	.word	0x08018224
 800fe64:	00f42400 	.word	0x00f42400

0800fe68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe74:	f003 0308 	and.w	r3, r3, #8
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d00a      	beq.n	800fe92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	430a      	orrs	r2, r1
 800fe90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe96:	f003 0301 	and.w	r3, r3, #1
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00a      	beq.n	800feb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feb8:	f003 0302 	and.w	r3, r3, #2
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00a      	beq.n	800fed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	430a      	orrs	r2, r1
 800fed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feda:	f003 0304 	and.w	r3, r3, #4
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00a      	beq.n	800fef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	430a      	orrs	r2, r1
 800fef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fefc:	f003 0310 	and.w	r3, r3, #16
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00a      	beq.n	800ff1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	430a      	orrs	r2, r1
 800ff18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff1e:	f003 0320 	and.w	r3, r3, #32
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00a      	beq.n	800ff3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	430a      	orrs	r2, r1
 800ff3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d01a      	beq.n	800ff7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	430a      	orrs	r2, r1
 800ff5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ff66:	d10a      	bne.n	800ff7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	430a      	orrs	r2, r1
 800ff7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	605a      	str	r2, [r3, #4]
  }
}
 800ffa0:	bf00      	nop
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b098      	sub	sp, #96	@ 0x60
 800ffb0:	af02      	add	r7, sp, #8
 800ffb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ffbc:	f7fa fb7c 	bl	800a6b8 <HAL_GetTick>
 800ffc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f003 0308 	and.w	r3, r3, #8
 800ffcc:	2b08      	cmp	r3, #8
 800ffce:	d12f      	bne.n	8010030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 f88e 	bl	8010100 <UART_WaitOnFlagUntilTimeout>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d022      	beq.n	8010030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff2:	e853 3f00 	ldrex	r3, [r3]
 800fff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	461a      	mov	r2, r3
 8010006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010008:	647b      	str	r3, [r7, #68]	@ 0x44
 801000a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801000c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801000e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010010:	e841 2300 	strex	r3, r2, [r1]
 8010014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1e6      	bne.n	800ffea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2220      	movs	r2, #32
 8010020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801002c:	2303      	movs	r3, #3
 801002e:	e063      	b.n	80100f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 0304 	and.w	r3, r3, #4
 801003a:	2b04      	cmp	r3, #4
 801003c:	d149      	bne.n	80100d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801003e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010046:	2200      	movs	r2, #0
 8010048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 f857 	bl	8010100 <UART_WaitOnFlagUntilTimeout>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d03c      	beq.n	80100d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010060:	e853 3f00 	ldrex	r3, [r3]
 8010064:	623b      	str	r3, [r7, #32]
   return(result);
 8010066:	6a3b      	ldr	r3, [r7, #32]
 8010068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801006c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	461a      	mov	r2, r3
 8010074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010076:	633b      	str	r3, [r7, #48]	@ 0x30
 8010078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801007c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801007e:	e841 2300 	strex	r3, r2, [r1]
 8010082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1e6      	bne.n	8010058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	3308      	adds	r3, #8
 8010090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	60fb      	str	r3, [r7, #12]
   return(result);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f023 0301 	bic.w	r3, r3, #1
 80100a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3308      	adds	r3, #8
 80100a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80100aa:	61fa      	str	r2, [r7, #28]
 80100ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	69b9      	ldr	r1, [r7, #24]
 80100b0:	69fa      	ldr	r2, [r7, #28]
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	617b      	str	r3, [r7, #20]
   return(result);
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e5      	bne.n	801008a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2220      	movs	r2, #32
 80100c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100ce:	2303      	movs	r3, #3
 80100d0:	e012      	b.n	80100f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2220      	movs	r2, #32
 80100d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2220      	movs	r2, #32
 80100de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80100f6:	2300      	movs	r3, #0
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3758      	adds	r7, #88	@ 0x58
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	603b      	str	r3, [r7, #0]
 801010c:	4613      	mov	r3, r2
 801010e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010110:	e04f      	b.n	80101b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010118:	d04b      	beq.n	80101b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801011a:	f7fa facd 	bl	800a6b8 <HAL_GetTick>
 801011e:	4602      	mov	r2, r0
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	69ba      	ldr	r2, [r7, #24]
 8010126:	429a      	cmp	r2, r3
 8010128:	d302      	bcc.n	8010130 <UART_WaitOnFlagUntilTimeout+0x30>
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010130:	2303      	movs	r3, #3
 8010132:	e04e      	b.n	80101d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f003 0304 	and.w	r3, r3, #4
 801013e:	2b00      	cmp	r3, #0
 8010140:	d037      	beq.n	80101b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2b80      	cmp	r3, #128	@ 0x80
 8010146:	d034      	beq.n	80101b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	2b40      	cmp	r3, #64	@ 0x40
 801014c:	d031      	beq.n	80101b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	69db      	ldr	r3, [r3, #28]
 8010154:	f003 0308 	and.w	r3, r3, #8
 8010158:	2b08      	cmp	r3, #8
 801015a:	d110      	bne.n	801017e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2208      	movs	r2, #8
 8010162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	f000 f838 	bl	80101da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2208      	movs	r2, #8
 801016e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	e029      	b.n	80101d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	69db      	ldr	r3, [r3, #28]
 8010184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801018c:	d111      	bne.n	80101b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010198:	68f8      	ldr	r0, [r7, #12]
 801019a:	f000 f81e 	bl	80101da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2220      	movs	r2, #32
 80101a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80101ae:	2303      	movs	r3, #3
 80101b0:	e00f      	b.n	80101d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	69da      	ldr	r2, [r3, #28]
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	4013      	ands	r3, r2
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	429a      	cmp	r2, r3
 80101c0:	bf0c      	ite	eq
 80101c2:	2301      	moveq	r3, #1
 80101c4:	2300      	movne	r3, #0
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	461a      	mov	r2, r3
 80101ca:	79fb      	ldrb	r3, [r7, #7]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d0a0      	beq.n	8010112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80101da:	b480      	push	{r7}
 80101dc:	b095      	sub	sp, #84	@ 0x54
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101ea:	e853 3f00 	ldrex	r3, [r3]
 80101ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80101f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80101f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	461a      	mov	r2, r3
 80101fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010200:	643b      	str	r3, [r7, #64]	@ 0x40
 8010202:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010204:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010208:	e841 2300 	strex	r3, r2, [r1]
 801020c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801020e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010210:	2b00      	cmp	r3, #0
 8010212:	d1e6      	bne.n	80101e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	3308      	adds	r3, #8
 801021a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	e853 3f00 	ldrex	r3, [r3]
 8010222:	61fb      	str	r3, [r7, #28]
   return(result);
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801022a:	f023 0301 	bic.w	r3, r3, #1
 801022e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3308      	adds	r3, #8
 8010236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010238:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801023a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801023e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010240:	e841 2300 	strex	r3, r2, [r1]
 8010244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1e3      	bne.n	8010214 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010250:	2b01      	cmp	r3, #1
 8010252:	d118      	bne.n	8010286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	e853 3f00 	ldrex	r3, [r3]
 8010260:	60bb      	str	r3, [r7, #8]
   return(result);
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	f023 0310 	bic.w	r3, r3, #16
 8010268:	647b      	str	r3, [r7, #68]	@ 0x44
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	461a      	mov	r2, r3
 8010270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010272:	61bb      	str	r3, [r7, #24]
 8010274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010276:	6979      	ldr	r1, [r7, #20]
 8010278:	69ba      	ldr	r2, [r7, #24]
 801027a:	e841 2300 	strex	r3, r2, [r1]
 801027e:	613b      	str	r3, [r7, #16]
   return(result);
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1e6      	bne.n	8010254 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2220      	movs	r2, #32
 801028a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801029a:	bf00      	nop
 801029c:	3754      	adds	r7, #84	@ 0x54
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr

080102a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b084      	sub	sp, #16
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2200      	movs	r2, #0
 80102b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2200      	movs	r2, #0
 80102c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f7ff fb91 	bl	800f9ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80102ca:	bf00      	nop
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b088      	sub	sp, #32
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	e853 3f00 	ldrex	r3, [r3]
 80102e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102ee:	61fb      	str	r3, [r7, #28]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	461a      	mov	r2, r3
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	61bb      	str	r3, [r7, #24]
 80102fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fc:	6979      	ldr	r1, [r7, #20]
 80102fe:	69ba      	ldr	r2, [r7, #24]
 8010300:	e841 2300 	strex	r3, r2, [r1]
 8010304:	613b      	str	r3, [r7, #16]
   return(result);
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1e6      	bne.n	80102da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2220      	movs	r2, #32
 8010310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7ff fb5c 	bl	800f9d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010320:	bf00      	nop
 8010322:	3720      	adds	r7, #32
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010344:	bf00      	nop
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010372:	2b01      	cmp	r3, #1
 8010374:	d101      	bne.n	801037a <HAL_UARTEx_DisableFifoMode+0x16>
 8010376:	2302      	movs	r3, #2
 8010378:	e027      	b.n	80103ca <HAL_UARTEx_DisableFifoMode+0x66>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2201      	movs	r2, #1
 801037e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2224      	movs	r2, #36	@ 0x24
 8010386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f022 0201 	bic.w	r2, r2, #1
 80103a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80103a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2200      	movs	r2, #0
 80103ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2220      	movs	r2, #32
 80103bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3714      	adds	r7, #20
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
 80103de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d101      	bne.n	80103ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80103ea:	2302      	movs	r3, #2
 80103ec:	e02d      	b.n	801044a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2224      	movs	r2, #36	@ 0x24
 80103fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f022 0201 	bic.w	r2, r2, #1
 8010414:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	689b      	ldr	r3, [r3, #8]
 801041c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	430a      	orrs	r2, r1
 8010428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f850 	bl	80104d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2220      	movs	r2, #32
 801043c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010448:	2300      	movs	r3, #0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010462:	2b01      	cmp	r3, #1
 8010464:	d101      	bne.n	801046a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010466:	2302      	movs	r3, #2
 8010468:	e02d      	b.n	80104c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2201      	movs	r2, #1
 801046e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2224      	movs	r2, #36	@ 0x24
 8010476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f022 0201 	bic.w	r2, r2, #1
 8010490:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	683a      	ldr	r2, [r7, #0]
 80104a2:	430a      	orrs	r2, r1
 80104a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f812 	bl	80104d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2220      	movs	r2, #32
 80104b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2200      	movs	r2, #0
 80104c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80104c4:	2300      	movs	r3, #0
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
	...

080104d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b085      	sub	sp, #20
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d108      	bne.n	80104f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80104f0:	e031      	b.n	8010556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80104f2:	2308      	movs	r3, #8
 80104f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80104f6:	2308      	movs	r3, #8
 80104f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	0e5b      	lsrs	r3, r3, #25
 8010502:	b2db      	uxtb	r3, r3
 8010504:	f003 0307 	and.w	r3, r3, #7
 8010508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	689b      	ldr	r3, [r3, #8]
 8010510:	0f5b      	lsrs	r3, r3, #29
 8010512:	b2db      	uxtb	r3, r3
 8010514:	f003 0307 	and.w	r3, r3, #7
 8010518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801051a:	7bbb      	ldrb	r3, [r7, #14]
 801051c:	7b3a      	ldrb	r2, [r7, #12]
 801051e:	4911      	ldr	r1, [pc, #68]	@ (8010564 <UARTEx_SetNbDataToProcess+0x94>)
 8010520:	5c8a      	ldrb	r2, [r1, r2]
 8010522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010526:	7b3a      	ldrb	r2, [r7, #12]
 8010528:	490f      	ldr	r1, [pc, #60]	@ (8010568 <UARTEx_SetNbDataToProcess+0x98>)
 801052a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801052c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010530:	b29a      	uxth	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	7b7a      	ldrb	r2, [r7, #13]
 801053c:	4909      	ldr	r1, [pc, #36]	@ (8010564 <UARTEx_SetNbDataToProcess+0x94>)
 801053e:	5c8a      	ldrb	r2, [r1, r2]
 8010540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010544:	7b7a      	ldrb	r2, [r7, #13]
 8010546:	4908      	ldr	r1, [pc, #32]	@ (8010568 <UARTEx_SetNbDataToProcess+0x98>)
 8010548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801054a:	fb93 f3f2 	sdiv	r3, r3, r2
 801054e:	b29a      	uxth	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010556:	bf00      	nop
 8010558:	3714      	adds	r7, #20
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	0801823c 	.word	0x0801823c
 8010568:	08018244 	.word	0x08018244

0801056c <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8010578:	215c      	movs	r1, #92	@ 0x5c
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f005 fa35 	bl	80159ea <strrchr>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d007      	beq.n	8010596 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8010586:	215c      	movs	r1, #92	@ 0x5c
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f005 fa2e 	bl	80159ea <strrchr>
 801058e:	4603      	mov	r3, r0
 8010590:	3301      	adds	r3, #1
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	e00d      	b.n	80105b2 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8010596:	212f      	movs	r1, #47	@ 0x2f
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f005 fa26 	bl	80159ea <strrchr>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d006      	beq.n	80105b2 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80105a4:	212f      	movs	r1, #47	@ 0x2f
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f005 fa1f 	bl	80159ea <strrchr>
 80105ac:	4603      	mov	r3, r0
 80105ae:	3301      	adds	r3, #1
 80105b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80105b2:	68fb      	ldr	r3, [r7, #12]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80105c6:	4b0f      	ldr	r3, [pc, #60]	@ (8010604 <OTP_Read+0x48>)
 80105c8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80105ca:	e002      	b.n	80105d2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	3b08      	subs	r3, #8
 80105d0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	3307      	adds	r3, #7
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	79fa      	ldrb	r2, [r7, #7]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d003      	beq.n	80105e6 <OTP_Read+0x2a>
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	4a09      	ldr	r2, [pc, #36]	@ (8010608 <OTP_Read+0x4c>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d1f2      	bne.n	80105cc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3307      	adds	r3, #7
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	79fa      	ldrb	r2, [r7, #7]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d001      	beq.n	80105f6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80105f2:	2300      	movs	r3, #0
 80105f4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80105f6:	68fb      	ldr	r3, [r7, #12]
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3714      	adds	r7, #20
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
 8010604:	1fff73f8 	.word	0x1fff73f8
 8010608:	1fff7000 	.word	0x1fff7000

0801060c <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b086      	sub	sp, #24
 8010610:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010612:	1d3b      	adds	r3, r7, #4
 8010614:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	2200      	movs	r2, #0
 801061a:	2100      	movs	r1, #0
 801061c:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 8010620:	f000 f920 	bl	8010864 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	330b      	adds	r3, #11
 8010628:	78db      	ldrb	r3, [r3, #3]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
	...

08010634 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010634:	b480      	push	{r7}
 8010636:	b08b      	sub	sp, #44	@ 0x2c
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 801063c:	2300      	movs	r3, #0
 801063e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010640:	2300      	movs	r3, #0
 8010642:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010648:	2300      	movs	r3, #0
 801064a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010650:	2300      	movs	r3, #0
 8010652:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801065c:	4b4a      	ldr	r3, [pc, #296]	@ (8010788 <SHCI_GetWirelessFwInfo+0x154>)
 801065e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010660:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010664:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801066e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a44      	ldr	r2, [pc, #272]	@ (801078c <SHCI_GetWirelessFwInfo+0x158>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d10f      	bne.n	80106a0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	695b      	ldr	r3, [r3, #20]
 8010684:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	699b      	ldr	r3, [r3, #24]
 801068a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	69db      	ldr	r3, [r3, #28]
 8010690:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	e01a      	b.n	80106d6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	009b      	lsls	r3, r3, #2
 80106a4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80106a8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80106ac:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	691b      	ldr	r3, [r3, #16]
 80106b4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	695b      	ldr	r3, [r3, #20]
 80106bc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	699b      	ldr	r3, [r3, #24]
 80106c4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80106d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d8:	0e1b      	lsrs	r3, r3, #24
 80106da:	b2da      	uxtb	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80106e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e2:	0c1b      	lsrs	r3, r3, #16
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80106ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106ec:	0a1b      	lsrs	r3, r3, #8
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80106f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f6:	091b      	lsrs	r3, r3, #4
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	f003 030f 	and.w	r3, r3, #15
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010706:	b2db      	uxtb	r3, r3
 8010708:	f003 030f 	and.w	r3, r3, #15
 801070c:	b2da      	uxtb	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010712:	6a3b      	ldr	r3, [r7, #32]
 8010714:	0e1b      	lsrs	r3, r3, #24
 8010716:	b2da      	uxtb	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801071c:	6a3b      	ldr	r3, [r7, #32]
 801071e:	0c1b      	lsrs	r3, r3, #16
 8010720:	b2da      	uxtb	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8010726:	6a3b      	ldr	r3, [r7, #32]
 8010728:	0a1b      	lsrs	r3, r3, #8
 801072a:	b2da      	uxtb	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	b2da      	uxtb	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	b2da      	uxtb	r2, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	0e1b      	lsrs	r3, r3, #24
 8010744:	b2da      	uxtb	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	0c1b      	lsrs	r3, r3, #16
 801074e:	b2da      	uxtb	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	0a1b      	lsrs	r3, r3, #8
 8010758:	b2da      	uxtb	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	0e1b      	lsrs	r3, r3, #24
 8010762:	b2da      	uxtb	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	0c1b      	lsrs	r3, r3, #16
 801076c:	b2da      	uxtb	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	b2da      	uxtb	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	372c      	adds	r7, #44	@ 0x2c
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr
 8010788:	58004000 	.word	0x58004000
 801078c:	a94656b9 	.word	0xa94656b9

08010790 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	4a08      	ldr	r2, [pc, #32]	@ (80107c0 <shci_init+0x30>)
 80107a0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80107a2:	4a08      	ldr	r2, [pc, #32]	@ (80107c4 <shci_init+0x34>)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80107a8:	4806      	ldr	r0, [pc, #24]	@ (80107c4 <shci_init+0x34>)
 80107aa:	f000 f915 	bl	80109d8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f000 f898 	bl	80108e8 <TlInit>

  return;
 80107b8:	bf00      	nop
}
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	200004ac 	.word	0x200004ac
 80107c4:	2000048c 	.word	0x2000048c

080107c8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80107ce:	4822      	ldr	r0, [pc, #136]	@ (8010858 <shci_user_evt_proc+0x90>)
 80107d0:	f000 f926 	bl	8010a20 <LST_is_empty>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d12b      	bne.n	8010832 <shci_user_evt_proc+0x6a>
 80107da:	4b20      	ldr	r3, [pc, #128]	@ (801085c <shci_user_evt_proc+0x94>)
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d027      	beq.n	8010832 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80107e2:	f107 030c 	add.w	r3, r7, #12
 80107e6:	4619      	mov	r1, r3
 80107e8:	481b      	ldr	r0, [pc, #108]	@ (8010858 <shci_user_evt_proc+0x90>)
 80107ea:	f000 f9a8 	bl	8010b3e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80107ee:	4b1c      	ldr	r3, [pc, #112]	@ (8010860 <shci_user_evt_proc+0x98>)
 80107f0:	69db      	ldr	r3, [r3, #28]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00c      	beq.n	8010810 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80107fa:	2301      	movs	r3, #1
 80107fc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80107fe:	4b18      	ldr	r3, [pc, #96]	@ (8010860 <shci_user_evt_proc+0x98>)
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	1d3a      	adds	r2, r7, #4
 8010804:	4610      	mov	r0, r2
 8010806:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010808:	793a      	ldrb	r2, [r7, #4]
 801080a:	4b14      	ldr	r3, [pc, #80]	@ (801085c <shci_user_evt_proc+0x94>)
 801080c:	701a      	strb	r2, [r3, #0]
 801080e:	e002      	b.n	8010816 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010810:	4b12      	ldr	r3, [pc, #72]	@ (801085c <shci_user_evt_proc+0x94>)
 8010812:	2201      	movs	r2, #1
 8010814:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010816:	4b11      	ldr	r3, [pc, #68]	@ (801085c <shci_user_evt_proc+0x94>)
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d004      	beq.n	8010828 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	4618      	mov	r0, r3
 8010822:	f000 fb49 	bl	8010eb8 <TL_MM_EvtDone>
 8010826:	e004      	b.n	8010832 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4619      	mov	r1, r3
 801082c:	480a      	ldr	r0, [pc, #40]	@ (8010858 <shci_user_evt_proc+0x90>)
 801082e:	f000 f919 	bl	8010a64 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8010832:	4809      	ldr	r0, [pc, #36]	@ (8010858 <shci_user_evt_proc+0x90>)
 8010834:	f000 f8f4 	bl	8010a20 <LST_is_empty>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d107      	bne.n	801084e <shci_user_evt_proc+0x86>
 801083e:	4b07      	ldr	r3, [pc, #28]	@ (801085c <shci_user_evt_proc+0x94>)
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d003      	beq.n	801084e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8010846:	4804      	ldr	r0, [pc, #16]	@ (8010858 <shci_user_evt_proc+0x90>)
 8010848:	f7f8 fb08 	bl	8008e5c <shci_notify_asynch_evt>
  }


  return;
 801084c:	bf00      	nop
 801084e:	bf00      	nop
}
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	200000f8 	.word	0x200000f8
 801085c:	20000108 	.word	0x20000108
 8010860:	2000048c 	.word	0x2000048c

08010864 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	60ba      	str	r2, [r7, #8]
 801086c:	607b      	str	r3, [r7, #4]
 801086e:	4603      	mov	r3, r0
 8010870:	81fb      	strh	r3, [r7, #14]
 8010872:	460b      	mov	r3, r1
 8010874:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8010876:	2000      	movs	r0, #0
 8010878:	f000 f868 	bl	801094c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 801087c:	4b17      	ldr	r3, [pc, #92]	@ (80108dc <shci_send+0x78>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	89fa      	ldrh	r2, [r7, #14]
 8010882:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8010886:	4b15      	ldr	r3, [pc, #84]	@ (80108dc <shci_send+0x78>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	7b7a      	ldrb	r2, [r7, #13]
 801088c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801088e:	4b13      	ldr	r3, [pc, #76]	@ (80108dc <shci_send+0x78>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	330c      	adds	r3, #12
 8010894:	7b7a      	ldrb	r2, [r7, #13]
 8010896:	68b9      	ldr	r1, [r7, #8]
 8010898:	4618      	mov	r0, r3
 801089a:	f005 f942 	bl	8015b22 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801089e:	4b10      	ldr	r3, [pc, #64]	@ (80108e0 <shci_send+0x7c>)
 80108a0:	2201      	movs	r2, #1
 80108a2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80108a4:	4b0f      	ldr	r3, [pc, #60]	@ (80108e4 <shci_send+0x80>)
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	2100      	movs	r1, #0
 80108aa:	2000      	movs	r0, #0
 80108ac:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80108ae:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80108b2:	f7f8 faea 	bl	8008e8a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f103 0008 	add.w	r0, r3, #8
 80108bc:	4b07      	ldr	r3, [pc, #28]	@ (80108dc <shci_send+0x78>)
 80108be:	6819      	ldr	r1, [r3, #0]
 80108c0:	4b06      	ldr	r3, [pc, #24]	@ (80108dc <shci_send+0x78>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	789b      	ldrb	r3, [r3, #2]
 80108c6:	3303      	adds	r3, #3
 80108c8:	461a      	mov	r2, r3
 80108ca:	f005 f92a 	bl	8015b22 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80108ce:	2001      	movs	r0, #1
 80108d0:	f000 f83c 	bl	801094c <Cmd_SetStatus>

  return;
 80108d4:	bf00      	nop
}
 80108d6:	3710      	adds	r7, #16
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	20000104 	.word	0x20000104
 80108e0:	200004b0 	.word	0x200004b0
 80108e4:	2000048c 	.word	0x2000048c

080108e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80108f0:	4a10      	ldr	r2, [pc, #64]	@ (8010934 <TlInit+0x4c>)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80108f6:	4810      	ldr	r0, [pc, #64]	@ (8010938 <TlInit+0x50>)
 80108f8:	f000 f882 	bl	8010a00 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80108fc:	2001      	movs	r0, #1
 80108fe:	f000 f825 	bl	801094c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010902:	4b0e      	ldr	r3, [pc, #56]	@ (801093c <TlInit+0x54>)
 8010904:	2201      	movs	r2, #1
 8010906:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010908:	4b0d      	ldr	r3, [pc, #52]	@ (8010940 <TlInit+0x58>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00c      	beq.n	801092a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010914:	4b0b      	ldr	r3, [pc, #44]	@ (8010944 <TlInit+0x5c>)
 8010916:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010918:	4b0b      	ldr	r3, [pc, #44]	@ (8010948 <TlInit+0x60>)
 801091a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 801091c:	4b08      	ldr	r3, [pc, #32]	@ (8010940 <TlInit+0x58>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f107 020c 	add.w	r2, r7, #12
 8010924:	4610      	mov	r0, r2
 8010926:	4798      	blx	r3
  }

  return;
 8010928:	bf00      	nop
 801092a:	bf00      	nop
}
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	20000104 	.word	0x20000104
 8010938:	200000f8 	.word	0x200000f8
 801093c:	20000108 	.word	0x20000108
 8010940:	2000048c 	.word	0x2000048c
 8010944:	0801099d 	.word	0x0801099d
 8010948:	080109b5 	.word	0x080109b5

0801094c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	4603      	mov	r3, r0
 8010954:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8010956:	79fb      	ldrb	r3, [r7, #7]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10b      	bne.n	8010974 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 801095c:	4b0d      	ldr	r3, [pc, #52]	@ (8010994 <Cmd_SetStatus+0x48>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d003      	beq.n	801096c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8010964:	4b0b      	ldr	r3, [pc, #44]	@ (8010994 <Cmd_SetStatus+0x48>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2000      	movs	r0, #0
 801096a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801096c:	4b0a      	ldr	r3, [pc, #40]	@ (8010998 <Cmd_SetStatus+0x4c>)
 801096e:	2200      	movs	r2, #0
 8010970:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8010972:	e00b      	b.n	801098c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8010974:	4b08      	ldr	r3, [pc, #32]	@ (8010998 <Cmd_SetStatus+0x4c>)
 8010976:	2201      	movs	r2, #1
 8010978:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801097a:	4b06      	ldr	r3, [pc, #24]	@ (8010994 <Cmd_SetStatus+0x48>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d004      	beq.n	801098c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8010982:	4b04      	ldr	r3, [pc, #16]	@ (8010994 <Cmd_SetStatus+0x48>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2001      	movs	r0, #1
 8010988:	4798      	blx	r3
  return;
 801098a:	bf00      	nop
 801098c:	bf00      	nop
}
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	200004ac 	.word	0x200004ac
 8010998:	20000100 	.word	0x20000100

0801099c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80109a4:	2000      	movs	r0, #0
 80109a6:	f7f8 fa65 	bl	8008e74 <shci_cmd_resp_release>

  return;
 80109aa:	bf00      	nop
}
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
	...

080109b4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80109bc:	6879      	ldr	r1, [r7, #4]
 80109be:	4805      	ldr	r0, [pc, #20]	@ (80109d4 <TlUserEvtReceived+0x20>)
 80109c0:	f000 f876 	bl	8010ab0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80109c4:	4803      	ldr	r0, [pc, #12]	@ (80109d4 <TlUserEvtReceived+0x20>)
 80109c6:	f7f8 fa49 	bl	8008e5c <shci_notify_asynch_evt>

  return;
 80109ca:	bf00      	nop
}
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	200000f8 	.word	0x200000f8

080109d8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4a05      	ldr	r2, [pc, #20]	@ (80109f8 <shci_register_io_bus+0x20>)
 80109e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4a04      	ldr	r2, [pc, #16]	@ (80109fc <shci_register_io_bus+0x24>)
 80109ea:	611a      	str	r2, [r3, #16]

  return;
 80109ec:	bf00      	nop
}
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	08010c71 	.word	0x08010c71
 80109fc:	08010cc5 	.word	0x08010cc5

08010a00 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	605a      	str	r2, [r3, #4]
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b087      	sub	sp, #28
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a28:	f3ef 8310 	mrs	r3, PRIMASK
 8010a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010a32:	b672      	cpsid	i
}
 8010a34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d102      	bne.n	8010a46 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010a40:	2301      	movs	r3, #1
 8010a42:	75fb      	strb	r3, [r7, #23]
 8010a44:	e001      	b.n	8010a4a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010a46:	2300      	movs	r3, #0
 8010a48:	75fb      	strb	r3, [r7, #23]
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	f383 8810 	msr	PRIMASK, r3
}
 8010a54:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	371c      	adds	r7, #28
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b087      	sub	sp, #28
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8010a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a74:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010a76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010a78:	b672      	cpsid	i
}
 8010a7a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	605a      	str	r2, [r3, #4]
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	f383 8810 	msr	PRIMASK, r3
}
 8010aa2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010aa4:	bf00      	nop
 8010aa6:	371c      	adds	r7, #28
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b087      	sub	sp, #28
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010aba:	f3ef 8310 	mrs	r3, PRIMASK
 8010abe:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010ac2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ac4:	b672      	cpsid	i
}
 8010ac6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	685a      	ldr	r2, [r3, #4]
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	683a      	ldr	r2, [r7, #0]
 8010ada:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	601a      	str	r2, [r3, #0]
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	f383 8810 	msr	PRIMASK, r3
}
 8010aee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010af0:	bf00      	nop
 8010af2:	371c      	adds	r7, #28
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b087      	sub	sp, #28
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b04:	f3ef 8310 	mrs	r3, PRIMASK
 8010b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b0e:	b672      	cpsid	i
}
 8010b10:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	6812      	ldr	r2, [r2, #0]
 8010b1a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	6852      	ldr	r2, [r2, #4]
 8010b24:	605a      	str	r2, [r3, #4]
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	f383 8810 	msr	PRIMASK, r3
}
 8010b30:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010b32:	bf00      	nop
 8010b34:	371c      	adds	r7, #28
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr

08010b3e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b086      	sub	sp, #24
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b48:	f3ef 8310 	mrs	r3, PRIMASK
 8010b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010b50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b52:	b672      	cpsid	i
}
 8010b54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7ff ffca 	bl	8010afc <LST_remove_node>
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	f383 8810 	msr	PRIMASK, r3
}
 8010b72:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010b74:	bf00      	nop
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010b80:	f003 ffcc 	bl	8014b1c <HW_IPCC_Enable>

  return;
 8010b84:	bf00      	nop
}
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <TL_Init>:


void TL_Init( void )
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010b8c:	4b10      	ldr	r3, [pc, #64]	@ (8010bd0 <TL_Init+0x48>)
 8010b8e:	4a11      	ldr	r2, [pc, #68]	@ (8010bd4 <TL_Init+0x4c>)
 8010b90:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8010b92:	4b0f      	ldr	r3, [pc, #60]	@ (8010bd0 <TL_Init+0x48>)
 8010b94:	4a10      	ldr	r2, [pc, #64]	@ (8010bd8 <TL_Init+0x50>)
 8010b96:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010b98:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd0 <TL_Init+0x48>)
 8010b9a:	4a10      	ldr	r2, [pc, #64]	@ (8010bdc <TL_Init+0x54>)
 8010b9c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8010b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8010bd0 <TL_Init+0x48>)
 8010ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8010be0 <TL_Init+0x58>)
 8010ba2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8010bd0 <TL_Init+0x48>)
 8010ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8010be4 <TL_Init+0x5c>)
 8010ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8010baa:	4b09      	ldr	r3, [pc, #36]	@ (8010bd0 <TL_Init+0x48>)
 8010bac:	4a0e      	ldr	r2, [pc, #56]	@ (8010be8 <TL_Init+0x60>)
 8010bae:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8010bb0:	4b07      	ldr	r3, [pc, #28]	@ (8010bd0 <TL_Init+0x48>)
 8010bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8010bec <TL_Init+0x64>)
 8010bb4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8010bb6:	4b06      	ldr	r3, [pc, #24]	@ (8010bd0 <TL_Init+0x48>)
 8010bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8010bf0 <TL_Init+0x68>)
 8010bba:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8010bbc:	4b04      	ldr	r3, [pc, #16]	@ (8010bd0 <TL_Init+0x48>)
 8010bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8010bf4 <TL_Init+0x6c>)
 8010bc0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8010bc2:	4b03      	ldr	r3, [pc, #12]	@ (8010bd0 <TL_Init+0x48>)
 8010bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8010bf8 <TL_Init+0x70>)
 8010bc6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010bc8:	f003 ffbc 	bl	8014b44 <HW_IPCC_Init>

  return;
 8010bcc:	bf00      	nop
}
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	20030000 	.word	0x20030000
 8010bd4:	20030028 	.word	0x20030028
 8010bd8:	20030048 	.word	0x20030048
 8010bdc:	20030058 	.word	0x20030058
 8010be0:	20030068 	.word	0x20030068
 8010be4:	20030070 	.word	0x20030070
 8010be8:	20030078 	.word	0x20030078
 8010bec:	20030080 	.word	0x20030080
 8010bf0:	2003009c 	.word	0x2003009c
 8010bf4:	200300a0 	.word	0x200300a0
 8010bf8:	200300ac 	.word	0x200300ac

08010bfc <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010c02:	e01c      	b.n	8010c3e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010c04:	1d3b      	adds	r3, r7, #4
 8010c06:	4619      	mov	r1, r3
 8010c08:	4812      	ldr	r0, [pc, #72]	@ (8010c54 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010c0a:	f7ff ff98 	bl	8010b3e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	7a5b      	ldrb	r3, [r3, #9]
 8010c12:	2b0f      	cmp	r3, #15
 8010c14:	d003      	beq.n	8010c1e <HW_IPCC_BLE_RxEvtNot+0x22>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	7a5b      	ldrb	r3, [r3, #9]
 8010c1a:	2b0e      	cmp	r3, #14
 8010c1c:	d105      	bne.n	8010c2a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4619      	mov	r1, r3
 8010c22:	2002      	movs	r0, #2
 8010c24:	f000 f9ac 	bl	8010f80 <OutputDbgTrace>
 8010c28:	e004      	b.n	8010c34 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	2003      	movs	r0, #3
 8010c30:	f000 f9a6 	bl	8010f80 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010c34:	4b08      	ldr	r3, [pc, #32]	@ (8010c58 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8010c3e:	4805      	ldr	r0, [pc, #20]	@ (8010c54 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010c40:	f7ff feee 	bl	8010a20 <LST_is_empty>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d0dc      	beq.n	8010c04 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8010c4a:	bf00      	nop
}
 8010c4c:	3708      	adds	r7, #8
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	200300c8 	.word	0x200300c8
 8010c58:	200004bc 	.word	0x200004bc

08010c5c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010c60:	4b02      	ldr	r3, [pc, #8]	@ (8010c6c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4798      	blx	r3

  return;
 8010c66:	bf00      	nop
}
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	200004c0 	.word	0x200004c0

08010c70 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010c7c:	480d      	ldr	r0, [pc, #52]	@ (8010cb4 <TL_SYS_Init+0x44>)
 8010c7e:	f7ff febf 	bl	8010a00 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8010c82:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb8 <TL_SYS_Init+0x48>)
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	689a      	ldr	r2, [r3, #8]
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	4a08      	ldr	r2, [pc, #32]	@ (8010cb4 <TL_SYS_Init+0x44>)
 8010c94:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8010c96:	f003 ff83 	bl	8014ba0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4a07      	ldr	r2, [pc, #28]	@ (8010cbc <TL_SYS_Init+0x4c>)
 8010ca0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	4a06      	ldr	r2, [pc, #24]	@ (8010cc0 <TL_SYS_Init+0x50>)
 8010ca8:	6013      	str	r3, [r2, #0]

  return 0;
 8010caa:	2300      	movs	r3, #0
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3710      	adds	r7, #16
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	200300d0 	.word	0x200300d0
 8010cb8:	20030000 	.word	0x20030000
 8010cbc:	200004c4 	.word	0x200004c4
 8010cc0:	200004c8 	.word	0x200004c8

08010cc4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010cd0:	4b09      	ldr	r3, [pc, #36]	@ (8010cf8 <TL_SYS_SendCmd+0x34>)
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2210      	movs	r2, #16
 8010cd8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010cda:	4b07      	ldr	r3, [pc, #28]	@ (8010cf8 <TL_SYS_SendCmd+0x34>)
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	2004      	movs	r0, #4
 8010ce4:	f000 f94c 	bl	8010f80 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010ce8:	f003 ff64 	bl	8014bb4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	20030000 	.word	0x20030000

08010cfc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010d00:	4b07      	ldr	r3, [pc, #28]	@ (8010d20 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4619      	mov	r1, r3
 8010d08:	2005      	movs	r0, #5
 8010d0a:	f000 f939 	bl	8010f80 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010d0e:	4b05      	ldr	r3, [pc, #20]	@ (8010d24 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a03      	ldr	r2, [pc, #12]	@ (8010d20 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010d14:	68d2      	ldr	r2, [r2, #12]
 8010d16:	6812      	ldr	r2, [r2, #0]
 8010d18:	4610      	mov	r0, r2
 8010d1a:	4798      	blx	r3

  return;
 8010d1c:	bf00      	nop
}
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	20030000 	.word	0x20030000
 8010d24:	200004c4 	.word	0x200004c4

08010d28 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010d2e:	e00e      	b.n	8010d4e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010d30:	1d3b      	adds	r3, r7, #4
 8010d32:	4619      	mov	r1, r3
 8010d34:	480b      	ldr	r0, [pc, #44]	@ (8010d64 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010d36:	f7ff ff02 	bl	8010b3e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	2006      	movs	r0, #6
 8010d40:	f000 f91e 	bl	8010f80 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010d44:	4b08      	ldr	r3, [pc, #32]	@ (8010d68 <HW_IPCC_SYS_EvtNot+0x40>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010d4e:	4805      	ldr	r0, [pc, #20]	@ (8010d64 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010d50:	f7ff fe66 	bl	8010a20 <LST_is_empty>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d0ea      	beq.n	8010d30 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010d5a:	bf00      	nop
}
 8010d5c:	3708      	adds	r7, #8
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	200300d0 	.word	0x200300d0
 8010d68:	200004c8 	.word	0x200004c8

08010d6c <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 8010d74:	4b0a      	ldr	r3, [pc, #40]	@ (8010da0 <TL_ZIGBEE_Init+0x34>)
 8010d76:	69db      	ldr	r3, [r3, #28]
 8010d78:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	685a      	ldr	r2, [r3, #4]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	689a      	ldr	r2, [r3, #8]
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 8010d92:	f003 ff35 	bl	8014c00 <HW_IPCC_ZIGBEE_Init>

  return;
 8010d96:	bf00      	nop
}
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	20030000 	.word	0x20030000

08010da4 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8010da8:	4b04      	ldr	r3, [pc, #16]	@ (8010dbc <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8010daa:	69db      	ldr	r3, [r3, #28]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	2208      	movs	r2, #8
 8010db0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 8010db2:	f003 ff33 	bl	8014c1c <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 8010db6:	bf00      	nop
}
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	20030000 	.word	0x20030000

08010dc0 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8010dc4:	4b03      	ldr	r3, [pc, #12]	@ (8010dd4 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8010dc6:	69db      	ldr	r3, [r3, #28]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f003 fc0c 	bl	80145e8 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8010dd0:	bf00      	nop
}
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	20030000 	.word	0x20030000

08010dd8 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8010ddc:	4b03      	ldr	r3, [pc, #12]	@ (8010dec <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8010dde:	69db      	ldr	r3, [r3, #28]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f003 fc0a 	bl	80145fc <TL_ZIGBEE_NotReceived>

  return;
 8010de8:	bf00      	nop
}
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20030000 	.word	0x20030000

08010df0 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8010df4:	4b04      	ldr	r3, [pc, #16]	@ (8010e08 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8010df6:	69db      	ldr	r3, [r3, #28]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	220d      	movs	r2, #13
 8010dfc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 8010dfe:	f003 ff1b 	bl	8014c38 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 8010e02:	bf00      	nop
}
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20030000 	.word	0x20030000

08010e0c <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8010e10:	4b03      	ldr	r3, [pc, #12]	@ (8010e20 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 8010e12:	69db      	ldr	r3, [r3, #28]
 8010e14:	689b      	ldr	r3, [r3, #8]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f003 fc26 	bl	8014668 <TL_ZIGBEE_M0RequestReceived>

  return;
 8010e1c:	bf00      	nop
}
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	20030000 	.word	0x20030000

08010e24 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8010e28:	4b04      	ldr	r3, [pc, #16]	@ (8010e3c <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 8010e2a:	69db      	ldr	r3, [r3, #28]
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	220d      	movs	r2, #13
 8010e30:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 8010e32:	f003 ff33 	bl	8014c9c <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 8010e36:	bf00      	nop
}
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	20030000 	.word	0x20030000

08010e40 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010e48:	4817      	ldr	r0, [pc, #92]	@ (8010ea8 <TL_MM_Init+0x68>)
 8010e4a:	f7ff fdd9 	bl	8010a00 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010e4e:	4817      	ldr	r0, [pc, #92]	@ (8010eac <TL_MM_Init+0x6c>)
 8010e50:	f7ff fdd6 	bl	8010a00 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010e54:	4b16      	ldr	r3, [pc, #88]	@ (8010eb0 <TL_MM_Init+0x70>)
 8010e56:	691b      	ldr	r3, [r3, #16]
 8010e58:	4a16      	ldr	r2, [pc, #88]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e5a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010e5c:	4b15      	ldr	r3, [pc, #84]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	6892      	ldr	r2, [r2, #8]
 8010e64:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010e66:	4b13      	ldr	r3, [pc, #76]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	68d2      	ldr	r2, [r2, #12]
 8010e6e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010e70:	4b10      	ldr	r3, [pc, #64]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a0c      	ldr	r2, [pc, #48]	@ (8010ea8 <TL_MM_Init+0x68>)
 8010e76:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8010e78:	4b0e      	ldr	r3, [pc, #56]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	6812      	ldr	r2, [r2, #0]
 8010e80:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010e82:	4b0c      	ldr	r3, [pc, #48]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	6852      	ldr	r2, [r2, #4]
 8010e8a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010e8c:	4b09      	ldr	r3, [pc, #36]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	6912      	ldr	r2, [r2, #16]
 8010e94:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8010e96:	4b07      	ldr	r3, [pc, #28]	@ (8010eb4 <TL_MM_Init+0x74>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	6952      	ldr	r2, [r2, #20]
 8010e9e:	619a      	str	r2, [r3, #24]

  return;
 8010ea0:	bf00      	nop
}
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	200300b8 	.word	0x200300b8
 8010eac:	200004b4 	.word	0x200004b4
 8010eb0:	20030000 	.word	0x20030000
 8010eb4:	200004cc 	.word	0x200004cc

08010eb8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010ec0:	6879      	ldr	r1, [r7, #4]
 8010ec2:	4807      	ldr	r0, [pc, #28]	@ (8010ee0 <TL_MM_EvtDone+0x28>)
 8010ec4:	f7ff fdf4 	bl	8010ab0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010ec8:	6879      	ldr	r1, [r7, #4]
 8010eca:	2000      	movs	r0, #0
 8010ecc:	f000 f858 	bl	8010f80 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010ed0:	4804      	ldr	r0, [pc, #16]	@ (8010ee4 <TL_MM_EvtDone+0x2c>)
 8010ed2:	f003 fef1 	bl	8014cb8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010ed6:	bf00      	nop
}
 8010ed8:	3708      	adds	r7, #8
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	200004b4 	.word	0x200004b4
 8010ee4:	08010ee9 	.word	0x08010ee9

08010ee8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010eee:	e00c      	b.n	8010f0a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010ef0:	1d3b      	adds	r3, r7, #4
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	480a      	ldr	r0, [pc, #40]	@ (8010f20 <SendFreeBuf+0x38>)
 8010ef6:	f7ff fe22 	bl	8010b3e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010efa:	4b0a      	ldr	r3, [pc, #40]	@ (8010f24 <SendFreeBuf+0x3c>)
 8010efc:	691b      	ldr	r3, [r3, #16]
 8010efe:	691b      	ldr	r3, [r3, #16]
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	4611      	mov	r1, r2
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7ff fdd3 	bl	8010ab0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010f0a:	4805      	ldr	r0, [pc, #20]	@ (8010f20 <SendFreeBuf+0x38>)
 8010f0c:	f7ff fd88 	bl	8010a20 <LST_is_empty>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d0ec      	beq.n	8010ef0 <SendFreeBuf+0x8>
  }

  return;
 8010f16:	bf00      	nop
}
 8010f18:	3708      	adds	r7, #8
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	200004b4 	.word	0x200004b4
 8010f24:	20030000 	.word	0x20030000

08010f28 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010f2c:	4805      	ldr	r0, [pc, #20]	@ (8010f44 <TL_TRACES_Init+0x1c>)
 8010f2e:	f7ff fd67 	bl	8010a00 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010f32:	4b05      	ldr	r3, [pc, #20]	@ (8010f48 <TL_TRACES_Init+0x20>)
 8010f34:	695b      	ldr	r3, [r3, #20]
 8010f36:	4a03      	ldr	r2, [pc, #12]	@ (8010f44 <TL_TRACES_Init+0x1c>)
 8010f38:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010f3a:	f003 fef3 	bl	8014d24 <HW_IPCC_TRACES_Init>

  return;
 8010f3e:	bf00      	nop
}
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	200300c0 	.word	0x200300c0
 8010f48:	20030000 	.word	0x20030000

08010f4c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010f52:	e008      	b.n	8010f66 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010f54:	1d3b      	adds	r3, r7, #4
 8010f56:	4619      	mov	r1, r3
 8010f58:	4808      	ldr	r0, [pc, #32]	@ (8010f7c <HW_IPCC_TRACES_EvtNot+0x30>)
 8010f5a:	f7ff fdf0 	bl	8010b3e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7f7 ff9d 	bl	8008ea0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010f66:	4805      	ldr	r0, [pc, #20]	@ (8010f7c <HW_IPCC_TRACES_EvtNot+0x30>)
 8010f68:	f7ff fd5a 	bl	8010a20 <LST_is_empty>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d0f0      	beq.n	8010f54 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010f72:	bf00      	nop
}
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	200300c0 	.word	0x200300c0

08010f80 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b085      	sub	sp, #20
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	4603      	mov	r3, r0
 8010f88:	6039      	str	r1, [r7, #0]
 8010f8a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010f8c:	79fb      	ldrb	r3, [r7, #7]
 8010f8e:	2b06      	cmp	r3, #6
 8010f90:	d845      	bhi.n	801101e <OutputDbgTrace+0x9e>
 8010f92:	a201      	add	r2, pc, #4	@ (adr r2, 8010f98 <OutputDbgTrace+0x18>)
 8010f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f98:	08010fb5 	.word	0x08010fb5
 8010f9c:	08010fd9 	.word	0x08010fd9
 8010fa0:	08010fdf 	.word	0x08010fdf
 8010fa4:	08010ff3 	.word	0x08010ff3
 8010fa8:	08010fff 	.word	0x08010fff
 8010fac:	08011005 	.word	0x08011005
 8010fb0:	08011013 	.word	0x08011013
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	7a5b      	ldrb	r3, [r3, #9]
 8010fbc:	2bff      	cmp	r3, #255	@ 0xff
 8010fbe:	d005      	beq.n	8010fcc <OutputDbgTrace+0x4c>
 8010fc0:	2bff      	cmp	r3, #255	@ 0xff
 8010fc2:	dc05      	bgt.n	8010fd0 <OutputDbgTrace+0x50>
 8010fc4:	2b0e      	cmp	r3, #14
 8010fc6:	d005      	beq.n	8010fd4 <OutputDbgTrace+0x54>
 8010fc8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010fca:	e001      	b.n	8010fd0 <OutputDbgTrace+0x50>
          break;
 8010fcc:	bf00      	nop
 8010fce:	e027      	b.n	8011020 <OutputDbgTrace+0xa0>
          break;
 8010fd0:	bf00      	nop
 8010fd2:	e025      	b.n	8011020 <OutputDbgTrace+0xa0>
          break;
 8010fd4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010fd6:	e023      	b.n	8011020 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010fdc:	e020      	b.n	8011020 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	7a5b      	ldrb	r3, [r3, #9]
 8010fe6:	2b0e      	cmp	r3, #14
 8010fe8:	d001      	beq.n	8010fee <OutputDbgTrace+0x6e>
 8010fea:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010fec:	e000      	b.n	8010ff0 <OutputDbgTrace+0x70>
          break;
 8010fee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ff0:	e016      	b.n	8011020 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	7a5b      	ldrb	r3, [r3, #9]
 8010ffa:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ffc:	e010      	b.n	8011020 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011002:	e00d      	b.n	8011020 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	7a5b      	ldrb	r3, [r3, #9]
 801100c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801100e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011010:	e006      	b.n	8011020 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	7a5b      	ldrb	r3, [r3, #9]
 801101a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801101c:	e000      	b.n	8011020 <OutputDbgTrace+0xa0>

    default:
      break;
 801101e:	bf00      	nop
  }

  return;
 8011020:	bf00      	nop
}
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 801102c:	b480      	push	{r7}
 801102e:	af00      	add	r7, sp, #0
 8011030:	bf00      	nop
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr

0801103a <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 801103a:	b480      	push	{r7}
 801103c:	b087      	sub	sp, #28
 801103e:	af00      	add	r7, sp, #0
 8011040:	60f8      	str	r0, [r7, #12]
 8011042:	60b9      	str	r1, [r7, #8]
 8011044:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8011046:	2300      	movs	r3, #0
 8011048:	617b      	str	r3, [r7, #20]
 801104a:	e00a      	b.n	8011062 <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	441a      	add	r2, r3
 8011052:	68f9      	ldr	r1, [r7, #12]
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	440b      	add	r3, r1
 8011058:	7812      	ldrb	r2, [r2, #0]
 801105a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	3301      	adds	r3, #1
 8011060:	617b      	str	r3, [r7, #20]
 8011062:	697a      	ldr	r2, [r7, #20]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	429a      	cmp	r2, r3
 8011068:	d3f0      	bcc.n	801104c <zb_ipc_m4_memcpy2+0x12>
    }
}
 801106a:	bf00      	nop
 801106c:	bf00      	nop
 801106e:	371c      	adds	r7, #28
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 8011082:	200c      	movs	r0, #12
 8011084:	f004 f8ee 	bl	8015264 <malloc>
 8011088:	4603      	mov	r3, r0
 801108a:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00a      	beq.n	80110a8 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 8011092:	220c      	movs	r2, #12
 8011094:	2100      	movs	r1, #0
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	f004 fc92 	bl	80159c0 <memset>
        info->callback = callback;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	683a      	ldr	r2, [r7, #0]
 80110a6:	605a      	str	r2, [r3, #4]
    }
    return info;
 80110a8:	68fb      	ldr	r3, [r7, #12]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b082      	sub	sp, #8
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
    free(info);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f004 f8da 	bl	8015274 <free>
}
 80110c0:	bf00      	nop
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 80110ce:	f003 fa43 	bl	8014558 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 80110d2:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d006      	beq.n	80110ea <zb_ipc_m4_get_retval+0x22>
 80110dc:	4b09      	ldr	r3, [pc, #36]	@ (8011104 <zb_ipc_m4_get_retval+0x3c>)
 80110de:	4a0a      	ldr	r2, [pc, #40]	@ (8011108 <zb_ipc_m4_get_retval+0x40>)
 80110e0:	f240 1151 	movw	r1, #337	@ 0x151
 80110e4:	4809      	ldr	r0, [pc, #36]	@ (801110c <zb_ipc_m4_get_retval+0x44>)
 80110e6:	f004 f89f 	bl	8015228 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f103 0108 	add.w	r1, r3, #8
 80110f0:	463b      	mov	r3, r7
 80110f2:	2204      	movs	r2, #4
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff ffa0 	bl	801103a <zb_ipc_m4_memcpy2>
    return retval;
 80110fa:	683b      	ldr	r3, [r7, #0]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	08017754 	.word	0x08017754
 8011108:	08018474 	.word	0x08018474
 801110c:	08017768 	.word	0x08017768

08011110 <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 801111e:	4b25      	ldr	r3, [pc, #148]	@ (80111b4 <ZbInit+0xa4>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d001      	beq.n	801112a <ZbInit+0x1a>
        return NULL;
 8011126:	2300      	movs	r3, #0
 8011128:	e03f      	b.n	80111aa <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 801112a:	f003 fa77 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801112e:	f003 fa07 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011132:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	2200      	movs	r2, #0
 8011138:	f042 020a 	orr.w	r2, r2, #10
 801113c:	701a      	strb	r2, [r3, #0]
 801113e:	2200      	movs	r2, #0
 8011140:	705a      	strb	r2, [r3, #1]
 8011142:	2200      	movs	r2, #0
 8011144:	709a      	strb	r2, [r3, #2]
 8011146:	2200      	movs	r2, #0
 8011148:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	2200      	movs	r2, #0
 801114e:	f042 0204 	orr.w	r2, r2, #4
 8011152:	711a      	strb	r2, [r3, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	715a      	strb	r2, [r3, #5]
 8011158:	2200      	movs	r2, #0
 801115a:	719a      	strb	r2, [r3, #6]
 801115c:	2200      	movs	r2, #0
 801115e:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	3308      	adds	r3, #8
 8011164:	f107 0108 	add.w	r1, r7, #8
 8011168:	2208      	movs	r2, #8
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff ff65 	bl	801103a <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8011176:	683a      	ldr	r2, [r7, #0]
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 801117c:	f003 fa10 	bl	80145a0 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 8011180:	f7ff ffa2 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011184:	4603      	mov	r3, r0
 8011186:	461a      	mov	r2, r3
 8011188:	4b0a      	ldr	r3, [pc, #40]	@ (80111b4 <ZbInit+0xa4>)
 801118a:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 801118c:	f7ff ff4e 	bl	801102c <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d007      	beq.n	80111a6 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	685b      	ldr	r3, [r3, #4]
 801119a:	4a06      	ldr	r2, [pc, #24]	@ (80111b4 <ZbInit+0xa4>)
 801119c:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4a04      	ldr	r2, [pc, #16]	@ (80111b4 <ZbInit+0xa4>)
 80111a4:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 80111a6:	4b03      	ldr	r3, [pc, #12]	@ (80111b4 <ZbInit+0xa4>)
 80111a8:	681b      	ldr	r3, [r3, #0]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3718      	adds	r7, #24
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	200004e4 	.word	0x200004e4

080111b8 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80111c4:	f003 fa2a 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80111c8:	f003 f9ba 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80111cc:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	2200      	movs	r2, #0
 80111d2:	f042 0213 	orr.w	r2, r2, #19
 80111d6:	701a      	strb	r2, [r3, #0]
 80111d8:	2200      	movs	r2, #0
 80111da:	705a      	strb	r2, [r3, #1]
 80111dc:	2200      	movs	r2, #0
 80111de:	709a      	strb	r2, [r3, #2]
 80111e0:	2200      	movs	r2, #0
 80111e2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	2200      	movs	r2, #0
 80111e8:	f042 0202 	orr.w	r2, r2, #2
 80111ec:	711a      	strb	r2, [r3, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	715a      	strb	r2, [r3, #5]
 80111f2:	2200      	movs	r2, #0
 80111f4:	719a      	strb	r2, [r3, #6]
 80111f6:	2200      	movs	r2, #0
 80111f8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 8011200:	4b0c      	ldr	r3, [pc, #48]	@ (8011234 <ZbSetLogging+0x7c>)
 8011202:	7b1b      	ldrb	r3, [r3, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <ZbSetLogging+0x56>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d001      	beq.n	8011212 <ZbSetLogging+0x5a>
 801120e:	2201      	movs	r2, #1
 8011210:	e000      	b.n	8011214 <ZbSetLogging+0x5c>
 8011212:	2200      	movs	r2, #0
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011218:	f003 f9c2 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801121c:	f7ff ff06 	bl	801102c <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 8011220:	4a04      	ldr	r2, [pc, #16]	@ (8011234 <ZbSetLogging+0x7c>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 8011226:	4a03      	ldr	r2, [pc, #12]	@ (8011234 <ZbSetLogging+0x7c>)
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	6093      	str	r3, [r2, #8]
}
 801122c:	bf00      	nop
 801122e:	3718      	adds	r7, #24
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	200004e4 	.word	0x200004e4

08011238 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b086      	sub	sp, #24
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 8011240:	f04f 0200 	mov.w	r2, #0
 8011244:	f04f 0300 	mov.w	r3, #0
 8011248:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 801124c:	f003 f9e6 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011250:	f003 f976 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011254:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	2200      	movs	r2, #0
 801125a:	f042 020e 	orr.w	r2, r2, #14
 801125e:	701a      	strb	r2, [r3, #0]
 8011260:	2200      	movs	r2, #0
 8011262:	705a      	strb	r2, [r3, #1]
 8011264:	2200      	movs	r2, #0
 8011266:	709a      	strb	r2, [r3, #2]
 8011268:	2200      	movs	r2, #0
 801126a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	2200      	movs	r2, #0
 8011270:	711a      	strb	r2, [r3, #4]
 8011272:	2200      	movs	r2, #0
 8011274:	715a      	strb	r2, [r3, #5]
 8011276:	2200      	movs	r2, #0
 8011278:	719a      	strb	r2, [r3, #6]
 801127a:	2200      	movs	r2, #0
 801127c:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801127e:	f003 f98f 	bl	80145a0 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 8011282:	f003 f969 	bl	8014558 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8011286:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	2b02      	cmp	r3, #2
 801128e:	d006      	beq.n	801129e <ZbExtendedAddress+0x66>
 8011290:	4b0c      	ldr	r3, [pc, #48]	@ (80112c4 <ZbExtendedAddress+0x8c>)
 8011292:	4a0d      	ldr	r2, [pc, #52]	@ (80112c8 <ZbExtendedAddress+0x90>)
 8011294:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8011298:	480c      	ldr	r0, [pc, #48]	@ (80112cc <ZbExtendedAddress+0x94>)
 801129a:	f003 ffc5 	bl	8015228 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	f103 0108 	add.w	r1, r3, #8
 80112a4:	f107 0308 	add.w	r3, r7, #8
 80112a8:	2208      	movs	r2, #8
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fec5 	bl	801103a <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 80112b0:	f7ff febc 	bl	801102c <Post_ZigbeeCmdProcessing>
    return ext_addr;
 80112b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80112b8:	4610      	mov	r0, r2
 80112ba:	4619      	mov	r1, r3
 80112bc:	3718      	adds	r7, #24
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	080177e0 	.word	0x080177e0
 80112c8:	0801848c 	.word	0x0801848c
 80112cc:	08017768 	.word	0x08017768

080112d0 <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 80112d8:	2300      	movs	r3, #0
 80112da:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 80112dc:	f107 020e 	add.w	r2, r7, #14
 80112e0:	2302      	movs	r3, #2
 80112e2:	2196      	movs	r1, #150	@ 0x96
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f000 fc1b 	bl	8011b20 <ZbNwkGet>
    return nwkAddr;
 80112ea:	89fb      	ldrh	r3, [r7, #14]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3710      	adds	r7, #16
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b084      	sub	sp, #16
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80112fc:	f003 f98e 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011300:	f003 f91e 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011304:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	f042 021b 	orr.w	r2, r2, #27
 801130e:	701a      	strb	r2, [r3, #0]
 8011310:	2200      	movs	r2, #0
 8011312:	705a      	strb	r2, [r3, #1]
 8011314:	2200      	movs	r2, #0
 8011316:	709a      	strb	r2, [r3, #2]
 8011318:	2200      	movs	r2, #0
 801131a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2200      	movs	r2, #0
 8011320:	f042 0201 	orr.w	r2, r2, #1
 8011324:	711a      	strb	r2, [r3, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	715a      	strb	r2, [r3, #5]
 801132a:	2200      	movs	r2, #0
 801132c:	719a      	strb	r2, [r3, #6]
 801132e:	2200      	movs	r2, #0
 8011330:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011338:	f003 f932 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801133c:	f7ff fe76 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 8011340:	bf00      	nop
 8011342:	3710      	adds	r7, #16
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b088      	sub	sp, #32
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
 8011354:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8011356:	6839      	ldr	r1, [r7, #0]
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7ff fe8d 	bl	8011078 <zb_ipc_m4_cb_info_alloc>
 801135e:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8011366:	2370      	movs	r3, #112	@ 0x70
 8011368:	e036      	b.n	80113d8 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	461a      	mov	r2, r3
 8011374:	4b1a      	ldr	r3, [pc, #104]	@ (80113e0 <ZbStartup+0x98>)
 8011376:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8011378:	f003 f950 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801137c:	f003 f8e0 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011380:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	2200      	movs	r2, #0
 8011386:	f042 021c 	orr.w	r2, r2, #28
 801138a:	701a      	strb	r2, [r3, #0]
 801138c:	2200      	movs	r2, #0
 801138e:	705a      	strb	r2, [r3, #1]
 8011390:	2200      	movs	r2, #0
 8011392:	709a      	strb	r2, [r3, #2]
 8011394:	2200      	movs	r2, #0
 8011396:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	2200      	movs	r2, #0
 801139c:	f042 0202 	orr.w	r2, r2, #2
 80113a0:	711a      	strb	r2, [r3, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	715a      	strb	r2, [r3, #5]
 80113a6:	2200      	movs	r2, #0
 80113a8:	719a      	strb	r2, [r3, #6]
 80113aa:	2200      	movs	r2, #0
 80113ac:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 80113ae:	68ba      	ldr	r2, [r7, #8]
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80113b4:	69fa      	ldr	r2, [r7, #28]
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80113ba:	f003 f8f1 	bl	80145a0 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 80113be:	f7ff fe83 	bl	80110c8 <zb_ipc_m4_get_retval>
 80113c2:	4603      	mov	r3, r0
 80113c4:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80113c6:	f7ff fe31 	bl	801102c <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80113ca:	7dfb      	ldrb	r3, [r7, #23]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 80113d0:	69f8      	ldr	r0, [r7, #28]
 80113d2:	f7ff fe6e 	bl	80110b2 <zb_ipc_m4_cb_info_free>
    }
    return status;
 80113d6:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3720      	adds	r7, #32
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	200004d0 	.word	0x200004d0

080113e4 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b08c      	sub	sp, #48	@ 0x30
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	607a      	str	r2, [r7, #4]
 80113ee:	603b      	str	r3, [r7, #0]
 80113f0:	460b      	mov	r3, r1
 80113f2:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 80113f4:	897b      	ldrh	r3, [r7, #10]
 80113f6:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 8011400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011402:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8011404:	f003 f90a 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011408:	f003 f89a 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801140c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 801140e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011410:	2200      	movs	r2, #0
 8011412:	701a      	strb	r2, [r3, #0]
 8011414:	2200      	movs	r2, #0
 8011416:	f042 0202 	orr.w	r2, r2, #2
 801141a:	705a      	strb	r2, [r3, #1]
 801141c:	2200      	movs	r2, #0
 801141e:	709a      	strb	r2, [r3, #2]
 8011420:	2200      	movs	r2, #0
 8011422:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011426:	2200      	movs	r2, #0
 8011428:	f042 0202 	orr.w	r2, r2, #2
 801142c:	711a      	strb	r2, [r3, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	715a      	strb	r2, [r3, #5]
 8011432:	2200      	movs	r2, #0
 8011434:	719a      	strb	r2, [r3, #6]
 8011436:	2200      	movs	r2, #0
 8011438:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 801143a:	f107 0218 	add.w	r2, r7, #24
 801143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011440:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 8011442:	f107 0214 	add.w	r2, r7, #20
 8011446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011448:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801144a:	f003 f8a9 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801144e:	f7ff fded 	bl	801102c <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 8011452:	7d3b      	ldrb	r3, [r7, #20]
 8011454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8011458:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 801145c:	4618      	mov	r0, r3
 801145e:	3730      	adds	r7, #48	@ 0x30
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
 8011470:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8011472:	6839      	ldr	r1, [r7, #0]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff fdff 	bl	8011078 <zb_ipc_m4_cb_info_alloc>
 801147a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d101      	bne.n	8011486 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8011482:	2370      	movs	r3, #112	@ 0x70
 8011484:	e031      	b.n	80114ea <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8011486:	f003 f8c9 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801148a:	f003 f859 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801148e:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	2200      	movs	r2, #0
 8011494:	f042 0204 	orr.w	r2, r2, #4
 8011498:	701a      	strb	r2, [r3, #0]
 801149a:	2200      	movs	r2, #0
 801149c:	f042 0202 	orr.w	r2, r2, #2
 80114a0:	705a      	strb	r2, [r3, #1]
 80114a2:	2200      	movs	r2, #0
 80114a4:	709a      	strb	r2, [r3, #2]
 80114a6:	2200      	movs	r2, #0
 80114a8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f042 0202 	orr.w	r2, r2, #2
 80114b2:	711a      	strb	r2, [r3, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	715a      	strb	r2, [r3, #5]
 80114b8:	2200      	movs	r2, #0
 80114ba:	719a      	strb	r2, [r3, #6]
 80114bc:	2200      	movs	r2, #0
 80114be:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80114c6:	69fa      	ldr	r2, [r7, #28]
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80114cc:	f003 f868 	bl	80145a0 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 80114d0:	f7ff fdfa 	bl	80110c8 <zb_ipc_m4_get_retval>
 80114d4:	4603      	mov	r3, r0
 80114d6:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80114d8:	f7ff fda8 	bl	801102c <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80114dc:	7dfb      	ldrb	r3, [r7, #23]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d002      	beq.n	80114e8 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 80114e2:	69f8      	ldr	r0, [r7, #28]
 80114e4:	f7ff fde5 	bl	80110b2 <zb_ipc_m4_cb_info_free>
    }
    return status;
 80114e8:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3720      	adds	r7, #32
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	460b      	mov	r3, r1
 80114fc:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 80114fe:	f003 f88d 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011502:	f003 f81d 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011506:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2200      	movs	r2, #0
 801150c:	f042 020d 	orr.w	r2, r2, #13
 8011510:	701a      	strb	r2, [r3, #0]
 8011512:	2200      	movs	r2, #0
 8011514:	f042 0202 	orr.w	r2, r2, #2
 8011518:	705a      	strb	r2, [r3, #1]
 801151a:	2200      	movs	r2, #0
 801151c:	709a      	strb	r2, [r3, #2]
 801151e:	2200      	movs	r2, #0
 8011520:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2200      	movs	r2, #0
 8011526:	f042 0201 	orr.w	r2, r2, #1
 801152a:	711a      	strb	r2, [r3, #4]
 801152c:	2200      	movs	r2, #0
 801152e:	715a      	strb	r2, [r3, #5]
 8011530:	2200      	movs	r2, #0
 8011532:	719a      	strb	r2, [r3, #6]
 8011534:	2200      	movs	r2, #0
 8011536:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8011538:	78fa      	ldrb	r2, [r7, #3]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801153e:	f003 f82f 	bl	80145a0 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8011542:	f7ff fdc1 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011546:	4603      	mov	r3, r0
 8011548:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 801154a:	f7ff fd6f 	bl	801102c <Post_ZigbeeCmdProcessing>
    return val_ret;
 801154e:	897b      	ldrh	r3, [r7, #10]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3710      	adds	r7, #16
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2b01      	cmp	r3, #1
 8011566:	d101      	bne.n	801156c <ZbApsAddrIsBcast+0x14>
        return true;
 8011568:	2301      	movs	r3, #1
 801156a:	e012      	b.n	8011592 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	2b02      	cmp	r3, #2
 8011572:	d10d      	bne.n	8011590 <ZbApsAddrIsBcast+0x38>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	88db      	ldrh	r3, [r3, #6]
 8011578:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801157c:	4293      	cmp	r3, r2
 801157e:	d907      	bls.n	8011590 <ZbApsAddrIsBcast+0x38>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	88db      	ldrh	r3, [r3, #6]
 8011584:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011588:	4293      	cmp	r3, r2
 801158a:	d001      	beq.n	8011590 <ZbApsAddrIsBcast+0x38>
        return true;
 801158c:	2301      	movs	r3, #1
 801158e:	e000      	b.n	8011592 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	370c      	adds	r7, #12
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr

0801159e <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 801159e:	b5b0      	push	{r4, r5, r7, lr}
 80115a0:	b082      	sub	sp, #8
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
 80115a6:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	2b03      	cmp	r3, #3
 80115ae:	d10d      	bne.n	80115cc <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7ff fe3e 	bl	8011238 <ZbExtendedAddress>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	429d      	cmp	r5, r3
 80115c2:	bf08      	it	eq
 80115c4:	4294      	cmpeq	r4, r2
 80115c6:	d101      	bne.n	80115cc <ZbApsAddrIsLocal+0x2e>
            return true;
 80115c8:	2301      	movs	r3, #1
 80115ca:	e00e      	b.n	80115ea <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	d109      	bne.n	80115e8 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	88dc      	ldrh	r4, [r3, #6]
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f7ff fe79 	bl	80112d0 <ZbShortAddress>
 80115de:	4603      	mov	r3, r0
 80115e0:	429c      	cmp	r4, r3
 80115e2:	d101      	bne.n	80115e8 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 80115e4:	2301      	movs	r3, #1
 80115e6:	e000      	b.n	80115ea <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bdb0      	pop	{r4, r5, r7, pc}

080115f2 <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b08a      	sub	sp, #40	@ 0x28
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	60f8      	str	r0, [r7, #12]
 80115fa:	607a      	str	r2, [r7, #4]
 80115fc:	603b      	str	r3, [r7, #0]
 80115fe:	460b      	mov	r3, r1
 8011600:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8011602:	897b      	ldrh	r3, [r7, #10]
 8011604:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 801160e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011610:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8011612:	f003 f803 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011616:	f002 ff93 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801161a:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 801161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161e:	2200      	movs	r2, #0
 8011620:	f042 0210 	orr.w	r2, r2, #16
 8011624:	701a      	strb	r2, [r3, #0]
 8011626:	2200      	movs	r2, #0
 8011628:	f042 0202 	orr.w	r2, r2, #2
 801162c:	705a      	strb	r2, [r3, #1]
 801162e:	2200      	movs	r2, #0
 8011630:	709a      	strb	r2, [r3, #2]
 8011632:	2200      	movs	r2, #0
 8011634:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011638:	2200      	movs	r2, #0
 801163a:	f042 0202 	orr.w	r2, r2, #2
 801163e:	711a      	strb	r2, [r3, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	715a      	strb	r2, [r3, #5]
 8011644:	2200      	movs	r2, #0
 8011646:	719a      	strb	r2, [r3, #6]
 8011648:	2200      	movs	r2, #0
 801164a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 801164c:	f107 0214 	add.w	r2, r7, #20
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8011654:	f107 0210 	add.w	r2, r7, #16
 8011658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801165c:	f002 ffa0 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011660:	f7ff fce4 	bl	801102c <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8011664:	7c3b      	ldrb	r3, [r7, #16]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3728      	adds	r7, #40	@ 0x28
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 801166e:	b580      	push	{r7, lr}
 8011670:	b086      	sub	sp, #24
 8011672:	af00      	add	r7, sp, #0
 8011674:	60f8      	str	r0, [r7, #12]
 8011676:	60b9      	str	r1, [r7, #8]
 8011678:	607a      	str	r2, [r7, #4]
 801167a:	f002 ffcf 	bl	801461c <Pre_ZigbeeCmdProcessing>
 801167e:	f002 ff5f 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011682:	6178      	str	r0, [r7, #20]
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	2200      	movs	r2, #0
 8011688:	f042 0215 	orr.w	r2, r2, #21
 801168c:	701a      	strb	r2, [r3, #0]
 801168e:	2200      	movs	r2, #0
 8011690:	f042 0202 	orr.w	r2, r2, #2
 8011694:	705a      	strb	r2, [r3, #1]
 8011696:	2200      	movs	r2, #0
 8011698:	709a      	strb	r2, [r3, #2]
 801169a:	2200      	movs	r2, #0
 801169c:	70da      	strb	r2, [r3, #3]
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	2200      	movs	r2, #0
 80116a2:	f042 0202 	orr.w	r2, r2, #2
 80116a6:	711a      	strb	r2, [r3, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	715a      	strb	r2, [r3, #5]
 80116ac:	2200      	movs	r2, #0
 80116ae:	719a      	strb	r2, [r3, #6]
 80116b0:	2200      	movs	r2, #0
 80116b2:	71da      	strb	r2, [r3, #7]
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	609a      	str	r2, [r3, #8]
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	60da      	str	r2, [r3, #12]
 80116c0:	f002 ff6e 	bl	80145a0 <ZIGBEE_CmdTransfer>
 80116c4:	f7ff fcb2 	bl	801102c <Post_ZigbeeCmdProcessing>
 80116c8:	3718      	adds	r7, #24
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b092      	sub	sp, #72	@ 0x48
 80116d2:	af02      	add	r7, sp, #8
 80116d4:	6078      	str	r0, [r7, #4]
 80116d6:	460b      	mov	r3, r1
 80116d8:	70fb      	strb	r3, [r7, #3]
 80116da:	4613      	mov	r3, r2
 80116dc:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff fdaa 	bl	8011238 <ZbExtendedAddress>
 80116e4:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 80116e8:	2300      	movs	r3, #0
 80116ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 80116ec:	f107 0208 	add.w	r2, r7, #8
 80116f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	2320      	movs	r3, #32
 80116f6:	21c1      	movs	r1, #193	@ 0xc1
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7ff ff7a 	bl	80115f2 <ZbApsGetIndex>
 80116fe:	4603      	mov	r3, r0
 8011700:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8011704:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011708:	2b00      	cmp	r3, #0
 801170a:	d120      	bne.n	801174e <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 801170c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011710:	4313      	orrs	r3, r2
 8011712:	d011      	beq.n	8011738 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8011714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011718:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801171c:	4299      	cmp	r1, r3
 801171e:	bf08      	it	eq
 8011720:	4290      	cmpeq	r0, r2
 8011722:	d10b      	bne.n	801173c <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8011724:	7c3b      	ldrb	r3, [r7, #16]
 8011726:	78fa      	ldrb	r2, [r7, #3]
 8011728:	429a      	cmp	r2, r3
 801172a:	d109      	bne.n	8011740 <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 801172c:	8a7b      	ldrh	r3, [r7, #18]
 801172e:	883a      	ldrh	r2, [r7, #0]
 8011730:	429a      	cmp	r2, r3
 8011732:	d107      	bne.n	8011744 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8011734:	2301      	movs	r3, #1
 8011736:	e00c      	b.n	8011752 <ZbApsBindSrcExists+0x84>
            continue;
 8011738:	bf00      	nop
 801173a:	e004      	b.n	8011746 <ZbApsBindSrcExists+0x78>
            continue;
 801173c:	bf00      	nop
 801173e:	e002      	b.n	8011746 <ZbApsBindSrcExists+0x78>
            continue;
 8011740:	bf00      	nop
 8011742:	e000      	b.n	8011746 <ZbApsBindSrcExists+0x78>
            continue;
 8011744:	bf00      	nop
    for (i = 0;; i++) {
 8011746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011748:	3301      	adds	r3, #1
 801174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 801174c:	e7ce      	b.n	80116ec <ZbApsBindSrcExists+0x1e>
            break;
 801174e:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3740      	adds	r7, #64	@ 0x40
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
	...

0801175c <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b088      	sub	sp, #32
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	603b      	str	r3, [r7, #0]
 8011768:	4613      	mov	r3, r2
 801176a:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 801176c:	2300      	movs	r3, #0
 801176e:	61bb      	str	r3, [r7, #24]
 8011770:	e00e      	b.n	8011790 <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8011772:	69ba      	ldr	r2, [r7, #24]
 8011774:	4613      	mov	r3, r2
 8011776:	005b      	lsls	r3, r3, #1
 8011778:	4413      	add	r3, r2
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4a28      	ldr	r2, [pc, #160]	@ (8011820 <ZbMsgFilterRegister+0xc4>)
 801177e:	4413      	add	r3, r2
 8011780:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d006      	beq.n	8011798 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	3301      	adds	r3, #1
 801178e:	61bb      	str	r3, [r7, #24]
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	2b1f      	cmp	r3, #31
 8011794:	d9ed      	bls.n	8011772 <ZbMsgFilterRegister+0x16>
 8011796:	e000      	b.n	801179a <ZbMsgFilterRegister+0x3e>
            break;
 8011798:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	2b20      	cmp	r3, #32
 801179e:	d101      	bne.n	80117a4 <ZbMsgFilterRegister+0x48>
        return NULL;
 80117a0:	2300      	movs	r3, #0
 80117a2:	e038      	b.n	8011816 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 80117a4:	f002 ff3a 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80117a8:	f002 feca 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80117ac:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f042 0210 	orr.w	r2, r2, #16
 80117b6:	701a      	strb	r2, [r3, #0]
 80117b8:	2200      	movs	r2, #0
 80117ba:	705a      	strb	r2, [r3, #1]
 80117bc:	2200      	movs	r2, #0
 80117be:	709a      	strb	r2, [r3, #2]
 80117c0:	2200      	movs	r2, #0
 80117c2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	2200      	movs	r2, #0
 80117c8:	f042 0203 	orr.w	r2, r2, #3
 80117cc:	711a      	strb	r2, [r3, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	715a      	strb	r2, [r3, #5]
 80117d2:	2200      	movs	r2, #0
 80117d4:	719a      	strb	r2, [r3, #6]
 80117d6:	2200      	movs	r2, #0
 80117d8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	68ba      	ldr	r2, [r7, #8]
 80117de:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 80117e0:	79fa      	ldrb	r2, [r7, #7]
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 80117e6:	69fa      	ldr	r2, [r7, #28]
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 80117ec:	f002 fed8 	bl	80145a0 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 80117f0:	f7ff fc6a 	bl	80110c8 <zb_ipc_m4_get_retval>
 80117f4:	4603      	mov	r3, r0
 80117f6:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 80117f8:	f7ff fc18 	bl	801102c <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d008      	beq.n	8011814 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	693a      	ldr	r2, [r7, #16]
 8011806:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	683a      	ldr	r2, [r7, #0]
 801180c:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011812:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8011814:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8011816:	4618      	mov	r0, r3
 8011818:	3720      	adds	r7, #32
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	200004f8 	.word	0x200004f8

08011824 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d046      	beq.n	80118c2 <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011834:	2300      	movs	r3, #0
 8011836:	613b      	str	r3, [r7, #16]
 8011838:	e00f      	b.n	801185a <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	4613      	mov	r3, r2
 801183e:	005b      	lsls	r3, r3, #1
 8011840:	4413      	add	r3, r2
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4a22      	ldr	r2, [pc, #136]	@ (80118d0 <ZbMsgFilterRemove+0xac>)
 8011846:	4413      	add	r3, r2
 8011848:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	683a      	ldr	r2, [r7, #0]
 8011850:	429a      	cmp	r2, r3
 8011852:	d006      	beq.n	8011862 <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	3301      	adds	r3, #1
 8011858:	613b      	str	r3, [r7, #16]
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	2b1f      	cmp	r3, #31
 801185e:	d9ec      	bls.n	801183a <ZbMsgFilterRemove+0x16>
 8011860:	e000      	b.n	8011864 <ZbMsgFilterRemove+0x40>
            break;
 8011862:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	2b20      	cmp	r3, #32
 8011868:	d02d      	beq.n	80118c6 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 801186a:	f002 fed7 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801186e:	f002 fe67 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011872:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2200      	movs	r2, #0
 8011878:	f042 0211 	orr.w	r2, r2, #17
 801187c:	701a      	strb	r2, [r3, #0]
 801187e:	2200      	movs	r2, #0
 8011880:	705a      	strb	r2, [r3, #1]
 8011882:	2200      	movs	r2, #0
 8011884:	709a      	strb	r2, [r3, #2]
 8011886:	2200      	movs	r2, #0
 8011888:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2200      	movs	r2, #0
 801188e:	f042 0201 	orr.w	r2, r2, #1
 8011892:	711a      	strb	r2, [r3, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	715a      	strb	r2, [r3, #5]
 8011898:	2200      	movs	r2, #0
 801189a:	719a      	strb	r2, [r3, #6]
 801189c:	2200      	movs	r2, #0
 801189e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80118a6:	f002 fe7b 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80118aa:	f7ff fbbf 	bl	801102c <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2200      	movs	r2, #0
 80118b2:	701a      	strb	r2, [r3, #0]
 80118b4:	2200      	movs	r2, #0
 80118b6:	705a      	strb	r2, [r3, #1]
 80118b8:	2200      	movs	r2, #0
 80118ba:	709a      	strb	r2, [r3, #2]
 80118bc:	2200      	movs	r2, #0
 80118be:	70da      	strb	r2, [r3, #3]
 80118c0:	e002      	b.n	80118c8 <ZbMsgFilterRemove+0xa4>
        return;
 80118c2:	bf00      	nop
 80118c4:	e000      	b.n	80118c8 <ZbMsgFilterRemove+0xa4>
        return;
 80118c6:	bf00      	nop
}
 80118c8:	3718      	adds	r7, #24
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	200004f8 	.word	0x200004f8

080118d4 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 80118e0:	2300      	movs	r3, #0
 80118e2:	4a24      	ldr	r2, [pc, #144]	@ (8011974 <ZbTimerAlloc+0xa0>)
 80118e4:	210c      	movs	r1, #12
 80118e6:	2000      	movs	r0, #0
 80118e8:	f000 fbe4 	bl	80120b4 <zb_heap_alloc>
 80118ec:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d039      	beq.n	8011968 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8011900:	f002 fe8c 	bl	801461c <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011904:	f002 fe1c 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011908:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	2200      	movs	r2, #0
 801190e:	f042 0214 	orr.w	r2, r2, #20
 8011912:	701a      	strb	r2, [r3, #0]
 8011914:	2200      	movs	r2, #0
 8011916:	705a      	strb	r2, [r3, #1]
 8011918:	2200      	movs	r2, #0
 801191a:	709a      	strb	r2, [r3, #2]
 801191c:	2200      	movs	r2, #0
 801191e:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	2200      	movs	r2, #0
 8011924:	f042 0201 	orr.w	r2, r2, #1
 8011928:	711a      	strb	r2, [r3, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	715a      	strb	r2, [r3, #5]
 801192e:	2200      	movs	r2, #0
 8011930:	719a      	strb	r2, [r3, #6]
 8011932:	2200      	movs	r2, #0
 8011934:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8011936:	697a      	ldr	r2, [r7, #20]
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 801193c:	f002 fe30 	bl	80145a0 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8011940:	f7ff fbc2 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011944:	4603      	mov	r3, r0
 8011946:	461a      	mov	r2, r3
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 801194c:	f7ff fb6e 	bl	801102c <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	689b      	ldr	r3, [r3, #8]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d107      	bne.n	8011968 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8011958:	2300      	movs	r3, #0
 801195a:	4a06      	ldr	r2, [pc, #24]	@ (8011974 <ZbTimerAlloc+0xa0>)
 801195c:	6979      	ldr	r1, [r7, #20]
 801195e:	2000      	movs	r0, #0
 8011960:	f000 fbb7 	bl	80120d2 <zb_heap_free>
            timer = NULL;
 8011964:	2300      	movs	r3, #0
 8011966:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8011968:	697b      	ldr	r3, [r7, #20]
}
 801196a:	4618      	mov	r0, r3
 801196c:	3718      	adds	r7, #24
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	080177f4 	.word	0x080177f4

08011978 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8011980:	f002 fe4c 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011984:	f002 fddc 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011988:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2200      	movs	r2, #0
 801198e:	f042 0215 	orr.w	r2, r2, #21
 8011992:	701a      	strb	r2, [r3, #0]
 8011994:	2200      	movs	r2, #0
 8011996:	705a      	strb	r2, [r3, #1]
 8011998:	2200      	movs	r2, #0
 801199a:	709a      	strb	r2, [r3, #2]
 801199c:	2200      	movs	r2, #0
 801199e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f042 0201 	orr.w	r2, r2, #1
 80119a8:	711a      	strb	r2, [r3, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	715a      	strb	r2, [r3, #5]
 80119ae:	2200      	movs	r2, #0
 80119b0:	719a      	strb	r2, [r3, #6]
 80119b2:	2200      	movs	r2, #0
 80119b4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	461a      	mov	r2, r3
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80119c0:	f002 fdee 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80119c4:	f7ff fb32 	bl	801102c <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 80119c8:	2300      	movs	r3, #0
 80119ca:	4a04      	ldr	r2, [pc, #16]	@ (80119dc <ZbTimerFree+0x64>)
 80119cc:	6879      	ldr	r1, [r7, #4]
 80119ce:	2000      	movs	r0, #0
 80119d0:	f000 fb7f 	bl	80120d2 <zb_heap_free>
}
 80119d4:	bf00      	nop
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	080177f4 	.word	0x080177f4

080119e0 <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80119ea:	f002 fe17 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80119ee:	f002 fda7 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80119f2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f042 0217 	orr.w	r2, r2, #23
 80119fc:	701a      	strb	r2, [r3, #0]
 80119fe:	2200      	movs	r2, #0
 8011a00:	705a      	strb	r2, [r3, #1]
 8011a02:	2200      	movs	r2, #0
 8011a04:	709a      	strb	r2, [r3, #2]
 8011a06:	2200      	movs	r2, #0
 8011a08:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f042 0202 	orr.w	r2, r2, #2
 8011a12:	711a      	strb	r2, [r3, #4]
 8011a14:	2200      	movs	r2, #0
 8011a16:	715a      	strb	r2, [r3, #5]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	719a      	strb	r2, [r3, #6]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	461a      	mov	r2, r3
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	683a      	ldr	r2, [r7, #0]
 8011a2e:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011a30:	f002 fdb6 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011a34:	f7ff fafa 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 8011a38:	bf00      	nop
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8011a40:	b480      	push	{r7}
 8011a42:	b085      	sub	sp, #20
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a13      	ldr	r2, [pc, #76]	@ (8011a9c <ZbTimeoutRemaining+0x5c>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d909      	bls.n	8011a66 <ZbTimeoutRemaining+0x26>
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a58:	d805      	bhi.n	8011a66 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8011a5a:	683a      	ldr	r2, [r7, #0]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	e014      	b.n	8011a90 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	4a0c      	ldr	r2, [pc, #48]	@ (8011a9c <ZbTimeoutRemaining+0x5c>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d905      	bls.n	8011a7a <ZbTimeoutRemaining+0x3a>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a74:	d801      	bhi.n	8011a7a <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8011a76:	2300      	movs	r3, #0
 8011a78:	e00a      	b.n	8011a90 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d301      	bcc.n	8011a86 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	e004      	b.n	8011a90 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8011a86:	683a      	ldr	r2, [r7, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3714      	adds	r7, #20
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr
 8011a9c:	bffffffd 	.word	0xbffffffd

08011aa0 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b08c      	sub	sp, #48	@ 0x30
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	607a      	str	r2, [r7, #4]
 8011aaa:	603b      	str	r3, [r7, #0]
 8011aac:	460b      	mov	r3, r1
 8011aae:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 8011ab0:	897b      	ldrh	r3, [r7, #10]
 8011ab2:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 8011abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011abe:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8011ac0:	f002 fdac 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011ac4:	f002 fd3c 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011ac8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8011aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011acc:	2200      	movs	r2, #0
 8011ace:	701a      	strb	r2, [r3, #0]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f042 0203 	orr.w	r2, r2, #3
 8011ad6:	705a      	strb	r2, [r3, #1]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	709a      	strb	r2, [r3, #2]
 8011adc:	2200      	movs	r2, #0
 8011ade:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	f042 0202 	orr.w	r2, r2, #2
 8011ae8:	711a      	strb	r2, [r3, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	715a      	strb	r2, [r3, #5]
 8011aee:	2200      	movs	r2, #0
 8011af0:	719a      	strb	r2, [r3, #6]
 8011af2:	2200      	movs	r2, #0
 8011af4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 8011af6:	f107 0218 	add.w	r2, r7, #24
 8011afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011afc:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 8011afe:	f107 0214 	add.w	r2, r7, #20
 8011b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b04:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011b06:	f002 fd4b 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011b0a:	f7ff fa8f 	bl	801102c <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 8011b0e:	7d3b      	ldrb	r3, [r7, #20]
 8011b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8011b14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3730      	adds	r7, #48	@ 0x30
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <ZbNwkGet>:
    return status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b086      	sub	sp, #24
 8011b24:	af02      	add	r7, sp, #8
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	607a      	str	r2, [r7, #4]
 8011b2a:	603b      	str	r3, [r7, #0]
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 8011b30:	8979      	ldrh	r1, [r7, #10]
 8011b32:	2300      	movs	r3, #0
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f7ff ffb0 	bl	8011aa0 <ZbNwkGetIndex>
 8011b40:	4603      	mov	r3, r0
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b086      	sub	sp, #24
 8011b4e:	af02      	add	r7, sp, #8
 8011b50:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 8011b52:	f107 020c 	add.w	r2, r7, #12
 8011b56:	2300      	movs	r3, #0
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	2304      	movs	r3, #4
 8011b5c:	f241 111d 	movw	r1, #4381	@ 0x111d
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff fc3f 	bl	80113e4 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 8011b66:	68fb      	ldr	r3, [r7, #12]
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b086      	sub	sp, #24
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8011b7c:	f002 fd4e 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011b80:	f002 fcde 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011b84:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	f042 021d 	orr.w	r2, r2, #29
 8011b8e:	701a      	strb	r2, [r3, #0]
 8011b90:	2200      	movs	r2, #0
 8011b92:	f042 0204 	orr.w	r2, r2, #4
 8011b96:	705a      	strb	r2, [r3, #1]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	709a      	strb	r2, [r3, #2]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f042 0202 	orr.w	r2, r2, #2
 8011ba8:	711a      	strb	r2, [r3, #4]
 8011baa:	2200      	movs	r2, #0
 8011bac:	715a      	strb	r2, [r3, #5]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	719a      	strb	r2, [r3, #6]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 8011bb6:	68ba      	ldr	r2, [r7, #8]
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011bc2:	f002 fced 	bl	80145a0 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8011bc6:	f7ff fa7f 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	bf14      	ite	ne
 8011bd0:	2301      	movne	r3, #1
 8011bd2:	2300      	moveq	r3, #0
 8011bd4:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 8011bd6:	f7ff fa29 	bl	801102c <Post_ZigbeeCmdProcessing>
    return rc;
 8011bda:	7cfb      	ldrb	r3, [r7, #19]
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3718      	adds	r7, #24
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <ZbZclBasicServerConfigDefaults>:
    return rc;
}

void
ZbZclBasicServerConfigDefaults(struct ZigBeeT *zb, const struct ZbZclBasicServerDefaults *defaults)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8011bee:	f002 fd15 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011bf2:	f002 fca5 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011bf6:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_BASIC_SERVER_CONFIG_DEFAULTS;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f042 0221 	orr.w	r2, r2, #33	@ 0x21
 8011c00:	701a      	strb	r2, [r3, #0]
 8011c02:	2200      	movs	r2, #0
 8011c04:	f042 0204 	orr.w	r2, r2, #4
 8011c08:	705a      	strb	r2, [r3, #1]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	709a      	strb	r2, [r3, #2]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2200      	movs	r2, #0
 8011c16:	f042 0201 	orr.w	r2, r2, #1
 8011c1a:	711a      	strb	r2, [r3, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	715a      	strb	r2, [r3, #5]
 8011c20:	2200      	movs	r2, #0
 8011c22:	719a      	strb	r2, [r3, #6]
 8011c24:	2200      	movs	r2, #0
 8011c26:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)defaults;
 8011c28:	683a      	ldr	r2, [r7, #0]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011c2e:	f002 fcb7 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011c32:	f7ff f9fb 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 8011c36:	bf00      	nop
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b086      	sub	sp, #24
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	60f8      	str	r0, [r7, #12]
 8011c46:	60b9      	str	r1, [r7, #8]
 8011c48:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8011c4a:	f002 fce7 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011c4e:	f002 fc77 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011c52:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	2200      	movs	r2, #0
 8011c58:	701a      	strb	r2, [r3, #0]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f042 0204 	orr.w	r2, r2, #4
 8011c60:	705a      	strb	r2, [r3, #1]
 8011c62:	2200      	movs	r2, #0
 8011c64:	709a      	strb	r2, [r3, #2]
 8011c66:	2200      	movs	r2, #0
 8011c68:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f042 0202 	orr.w	r2, r2, #2
 8011c72:	711a      	strb	r2, [r3, #4]
 8011c74:	2200      	movs	r2, #0
 8011c76:	715a      	strb	r2, [r3, #5]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	719a      	strb	r2, [r3, #6]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011c8c:	f002 fc88 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011c90:	f7ff f9cc 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 8011c94:	bf00      	nop
 8011c96:	3718      	adds	r7, #24
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 8011ca2:	f002 fcbb 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011ca6:	f002 fc4b 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011caa:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f042 0211 	orr.w	r2, r2, #17
 8011cb4:	701a      	strb	r2, [r3, #0]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f042 0204 	orr.w	r2, r2, #4
 8011cbc:	705a      	strb	r2, [r3, #1]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	709a      	strb	r2, [r3, #2]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	711a      	strb	r2, [r3, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	715a      	strb	r2, [r3, #5]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	719a      	strb	r2, [r3, #6]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8011cd8:	f002 fc62 	bl	80145a0 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 8011cdc:	f7ff f9f4 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8011ce4:	f7ff f9a2 	bl	801102c <Post_ZigbeeCmdProcessing>
    return rc;
 8011ce8:	78fb      	ldrb	r3, [r7, #3]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3708      	adds	r7, #8
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b088      	sub	sp, #32
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	60b9      	str	r1, [r7, #8]
 8011cfc:	607a      	str	r2, [r7, #4]
 8011cfe:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8011d00:	2300      	movs	r3, #0
 8011d02:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d013      	beq.n	8011d32 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7ff f9b3 	bl	8011078 <zb_ipc_m4_cb_info_alloc>
 8011d12:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d101      	bne.n	8011d1e <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 8011d1a:	2389      	movs	r3, #137	@ 0x89
 8011d1c:	e03e      	b.n	8011d9c <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff fc19 	bl	8011558 <ZbApsAddrIsBcast>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 8011d32:	f002 fc73 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011d36:	f002 fc03 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011d3a:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 8011d3c:	69bb      	ldr	r3, [r7, #24]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f042 0212 	orr.w	r2, r2, #18
 8011d44:	701a      	strb	r2, [r3, #0]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f042 0204 	orr.w	r2, r2, #4
 8011d4c:	705a      	strb	r2, [r3, #1]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	709a      	strb	r2, [r3, #2]
 8011d52:	2200      	movs	r2, #0
 8011d54:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f042 0202 	orr.w	r2, r2, #2
 8011d5e:	711a      	strb	r2, [r3, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	715a      	strb	r2, [r3, #5]
 8011d64:	2200      	movs	r2, #0
 8011d66:	719a      	strb	r2, [r3, #6]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8011d72:	69fa      	ldr	r2, [r7, #28]
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011d78:	f002 fc12 	bl	80145a0 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 8011d7c:	f7ff f9a4 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011d80:	4603      	mov	r3, r0
 8011d82:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8011d84:	f7ff f952 	bl	801102c <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 8011d88:	7dfb      	ldrb	r3, [r7, #23]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d005      	beq.n	8011d9a <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d002      	beq.n	8011d9a <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 8011d94:	69f8      	ldr	r0, [r7, #28]
 8011d96:	f7ff f98c 	bl	80110b2 <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 8011d9a:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3720      	adds	r7, #32
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	607a      	str	r2, [r7, #4]
 8011db0:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8011db2:	f002 fc33 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011db6:	f002 fbc3 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011dba:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f042 0214 	orr.w	r2, r2, #20
 8011dc4:	701a      	strb	r2, [r3, #0]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f042 0204 	orr.w	r2, r2, #4
 8011dcc:	705a      	strb	r2, [r3, #1]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	709a      	strb	r2, [r3, #2]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	f042 0204 	orr.w	r2, r2, #4
 8011dde:	711a      	strb	r2, [r3, #4]
 8011de0:	2200      	movs	r2, #0
 8011de2:	715a      	strb	r2, [r3, #5]
 8011de4:	2200      	movs	r2, #0
 8011de6:	719a      	strb	r2, [r3, #6]
 8011de8:	2200      	movs	r2, #0
 8011dea:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8011df2:	68ba      	ldr	r2, [r7, #8]
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 8011dfe:	78fa      	ldrb	r2, [r7, #3]
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8011e04:	f002 fbcc 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8011e08:	f7ff f910 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 8011e0c:	bf00      	nop
 8011e0e:	3718      	adds	r7, #24
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 8011e14:	b590      	push	{r4, r7, lr}
 8011e16:	b091      	sub	sp, #68	@ 0x44
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
 8011e20:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 8011e22:	f107 0310 	add.w	r3, r7, #16
 8011e26:	4619      	mov	r1, r3
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f7f1 ff6c 	bl	8003d06 <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	f107 0410 	add.w	r4, r7, #16
 8011e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	7c1b      	ldrb	r3, [r3, #16]
 8011e3e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 8011e42:	2301      	movs	r3, #1
 8011e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	8a1b      	ldrh	r3, [r3, #16]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d001      	beq.n	8011e54 <ZbZclClusterCommandReq+0x40>
 8011e50:	2301      	movs	r3, #1
 8011e52:	e000      	b.n	8011e56 <ZbZclClusterCommandReq+0x42>
 8011e54:	2300      	movs	r3, #0
 8011e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	7f1b      	ldrb	r3, [r3, #28]
        ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	bf0c      	ite	eq
 8011e62:	2301      	moveq	r3, #1
 8011e64:	2300      	movne	r3, #0
 8011e66:	b2db      	uxtb	r3, r3
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 8011e68:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	7c5b      	ldrb	r3, [r3, #17]
 8011e70:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	8a1b      	ldrh	r3, [r3, #16]
 8011e78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 8011e7a:	f7ff ff0f 	bl	8011c9c <ZbZclGetNextSeqnum>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	695b      	ldr	r3, [r3, #20]
 8011e88:	637b      	str	r3, [r7, #52]	@ 0x34
    zcl_req.length = req->length;
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	699b      	ldr	r3, [r3, #24]
 8011e8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6898      	ldr	r0, [r3, #8]
 8011e94:	f107 0110 	add.w	r1, r7, #16
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	f7ff ff29 	bl	8011cf2 <ZbZclCommandReq>
 8011ea0:	4603      	mov	r3, r0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3744      	adds	r7, #68	@ 0x44
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd90      	pop	{r4, r7, pc}

08011eaa <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b084      	sub	sp, #16
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8011eb2:	f002 fbb3 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011eb6:	f002 fb43 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011eba:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f042 0202 	orr.w	r2, r2, #2
 8011ec4:	701a      	strb	r2, [r3, #0]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f042 0204 	orr.w	r2, r2, #4
 8011ecc:	705a      	strb	r2, [r3, #1]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	709a      	strb	r2, [r3, #2]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2200      	movs	r2, #0
 8011eda:	f042 0201 	orr.w	r2, r2, #1
 8011ede:	711a      	strb	r2, [r3, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	715a      	strb	r2, [r3, #5]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	719a      	strb	r2, [r3, #6]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011ef2:	f002 fb55 	bl	80145a0 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8011ef6:	f7ff f8e7 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011efa:	4603      	mov	r3, r0
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	bf14      	ite	ne
 8011f00:	2301      	movne	r3, #1
 8011f02:	2300      	moveq	r3, #0
 8011f04:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8011f06:	f7ff f891 	bl	801102c <Post_ZigbeeCmdProcessing>
    return rc;
 8011f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8011f1c:	f002 fb7e 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011f20:	f002 fb0e 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011f24:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	f042 0203 	orr.w	r2, r2, #3
 8011f2e:	701a      	strb	r2, [r3, #0]
 8011f30:	2200      	movs	r2, #0
 8011f32:	f042 0204 	orr.w	r2, r2, #4
 8011f36:	705a      	strb	r2, [r3, #1]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	709a      	strb	r2, [r3, #2]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2200      	movs	r2, #0
 8011f44:	f042 0201 	orr.w	r2, r2, #1
 8011f48:	711a      	strb	r2, [r3, #4]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	715a      	strb	r2, [r3, #5]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	719a      	strb	r2, [r3, #6]
 8011f52:	2200      	movs	r2, #0
 8011f54:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011f5c:	f002 fb20 	bl	80145a0 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8011f60:	f7ff f8b2 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	bf14      	ite	ne
 8011f6a:	2301      	movne	r3, #1
 8011f6c:	2300      	moveq	r3, #0
 8011f6e:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8011f70:	f7ff f85c 	bl	801102c <Post_ZigbeeCmdProcessing>
    return rc;
 8011f74:	7afb      	ldrb	r3, [r7, #11]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3710      	adds	r7, #16
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	4608      	mov	r0, r1
 8011f88:	4611      	mov	r1, r2
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	70fb      	strb	r3, [r7, #3]
 8011f90:	460b      	mov	r3, r1
 8011f92:	803b      	strh	r3, [r7, #0]
 8011f94:	4613      	mov	r3, r2
 8011f96:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 8011f98:	f002 fb40 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011f9c:	f002 fad0 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011fa0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	f042 0204 	orr.w	r2, r2, #4
 8011faa:	701a      	strb	r2, [r3, #0]
 8011fac:	2200      	movs	r2, #0
 8011fae:	f042 0204 	orr.w	r2, r2, #4
 8011fb2:	705a      	strb	r2, [r3, #1]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	709a      	strb	r2, [r3, #2]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f042 0204 	orr.w	r2, r2, #4
 8011fc4:	711a      	strb	r2, [r3, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	715a      	strb	r2, [r3, #5]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	719a      	strb	r2, [r3, #6]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 8011fd8:	78fa      	ldrb	r2, [r7, #3]
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 8011fde:	883a      	ldrh	r2, [r7, #0]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 8011fe4:	78ba      	ldrb	r2, [r7, #2]
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8011fea:	f002 fad9 	bl	80145a0 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 8011fee:	f7ff f86b 	bl	80110c8 <zb_ipc_m4_get_retval>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8011ff6:	f7ff f819 	bl	801102c <Post_ZigbeeCmdProcessing>
    return status;
 8011ffa:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801200c:	f002 fb06 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012010:	f002 fa96 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012014:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2200      	movs	r2, #0
 801201a:	f042 0206 	orr.w	r2, r2, #6
 801201e:	701a      	strb	r2, [r3, #0]
 8012020:	2200      	movs	r2, #0
 8012022:	f042 0204 	orr.w	r2, r2, #4
 8012026:	705a      	strb	r2, [r3, #1]
 8012028:	2200      	movs	r2, #0
 801202a:	709a      	strb	r2, [r3, #2]
 801202c:	2200      	movs	r2, #0
 801202e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2200      	movs	r2, #0
 8012034:	f042 0201 	orr.w	r2, r2, #1
 8012038:	711a      	strb	r2, [r3, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	715a      	strb	r2, [r3, #5]
 801203e:	2200      	movs	r2, #0
 8012040:	719a      	strb	r2, [r3, #6]
 8012042:	2200      	movs	r2, #0
 8012044:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801204c:	f002 faa8 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012050:	f7fe ffec 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 8012054:	bf00      	nop
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}

0801205c <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012064:	f002 fada 	bl	801461c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012068:	f002 fa6a 	bl	8014540 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801206c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2200      	movs	r2, #0
 8012072:	f042 020b 	orr.w	r2, r2, #11
 8012076:	701a      	strb	r2, [r3, #0]
 8012078:	2200      	movs	r2, #0
 801207a:	f042 0204 	orr.w	r2, r2, #4
 801207e:	705a      	strb	r2, [r3, #1]
 8012080:	2200      	movs	r2, #0
 8012082:	709a      	strb	r2, [r3, #2]
 8012084:	2200      	movs	r2, #0
 8012086:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2200      	movs	r2, #0
 801208c:	f042 0201 	orr.w	r2, r2, #1
 8012090:	711a      	strb	r2, [r3, #4]
 8012092:	2200      	movs	r2, #0
 8012094:	715a      	strb	r2, [r3, #5]
 8012096:	2200      	movs	r2, #0
 8012098:	719a      	strb	r2, [r3, #6]
 801209a:	2200      	movs	r2, #0
 801209c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80120a4:	f002 fa7c 	bl	80145a0 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80120a8:	f7fe ffc0 	bl	801102c <Post_ZigbeeCmdProcessing>
}
 80120ac:	bf00      	nop
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	607a      	str	r2, [r7, #4]
 80120c0:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 80120c2:	68b8      	ldr	r0, [r7, #8]
 80120c4:	f003 f8ce 	bl	8015264 <malloc>
 80120c8:	4603      	mov	r3, r0
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b084      	sub	sp, #16
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	60f8      	str	r0, [r7, #12]
 80120da:	60b9      	str	r1, [r7, #8]
 80120dc:	607a      	str	r2, [r7, #4]
 80120de:	603b      	str	r3, [r7, #0]
    free(ptr);
 80120e0:	68b8      	ldr	r0, [r7, #8]
 80120e2:	f003 f8c7 	bl	8015274 <free>
}
 80120e6:	bf00      	nop
 80120e8:	3710      	adds	r7, #16
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}
	...

080120f0 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b087      	sub	sp, #28
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	4603      	mov	r3, r0
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
 80120fc:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 8012102:	e00e      	b.n	8012122 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 8012104:	89fb      	ldrh	r3, [r7, #14]
 8012106:	0a1b      	lsrs	r3, r3, #8
 8012108:	b29a      	uxth	r2, r3
 801210a:	89fb      	ldrh	r3, [r7, #14]
 801210c:	b2d9      	uxtb	r1, r3
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	1c58      	adds	r0, r3, #1
 8012112:	6178      	str	r0, [r7, #20]
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	404b      	eors	r3, r1
 8012118:	4908      	ldr	r1, [pc, #32]	@ (801213c <WpanCrc+0x4c>)
 801211a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801211e:	4053      	eors	r3, r2
 8012120:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	1e5a      	subs	r2, r3, #1
 8012126:	607a      	str	r2, [r7, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1eb      	bne.n	8012104 <WpanCrc+0x14>
    }
    return crc;
 801212c:	89fb      	ldrh	r3, [r7, #14]
}
 801212e:	4618      	mov	r0, r3
 8012130:	371c      	adds	r7, #28
 8012132:	46bd      	mov	sp, r7
 8012134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop
 801213c:	08018274 	.word	0x08018274

08012140 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 8012140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012142:	b0cf      	sub	sp, #316	@ 0x13c
 8012144:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8012146:	2300      	movs	r3, #0
 8012148:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 801214c:	2300      	movs	r3, #0
 801214e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 8012158:	f002 fa0a 	bl	8014570 <ZIGBEE_Get_NotificationPayloadBuffer>
 801215c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 8012160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f240 421c 	movw	r2, #1052	@ 0x41c
 801216a:	4293      	cmp	r3, r2
 801216c:	f201 82f0 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 8012170:	f240 4205 	movw	r2, #1029	@ 0x405
 8012174:	4293      	cmp	r3, r2
 8012176:	d22d      	bcs.n	80121d4 <Zigbee_CallBackProcessing+0x94>
 8012178:	f240 321d 	movw	r2, #797	@ 0x31d
 801217c:	4293      	cmp	r3, r2
 801217e:	f201 82e7 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 8012182:	f240 3206 	movw	r2, #774	@ 0x306
 8012186:	4293      	cmp	r3, r2
 8012188:	d25c      	bcs.n	8012244 <Zigbee_CallBackProcessing+0x104>
 801218a:	f240 2209 	movw	r2, #521	@ 0x209
 801218e:	4293      	cmp	r3, r2
 8012190:	f000 847e 	beq.w	8012a90 <Zigbee_CallBackProcessing+0x950>
 8012194:	f240 2209 	movw	r2, #521	@ 0x209
 8012198:	4293      	cmp	r3, r2
 801219a:	f201 82d9 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 801219e:	f240 2207 	movw	r2, #519	@ 0x207
 80121a2:	4293      	cmp	r3, r2
 80121a4:	f000 8443 	beq.w	8012a2e <Zigbee_CallBackProcessing+0x8ee>
 80121a8:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80121ac:	f081 82d0 	bcs.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 80121b0:	f240 2205 	movw	r2, #517	@ 0x205
 80121b4:	4293      	cmp	r3, r2
 80121b6:	f000 840c 	beq.w	80129d2 <Zigbee_CallBackProcessing+0x892>
 80121ba:	f240 2205 	movw	r2, #517	@ 0x205
 80121be:	4293      	cmp	r3, r2
 80121c0:	f201 82c6 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 80121c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80121c6:	f200 8133 	bhi.w	8012430 <Zigbee_CallBackProcessing+0x2f0>
 80121ca:	2b0d      	cmp	r3, #13
 80121cc:	f080 80c4 	bcs.w	8012358 <Zigbee_CallBackProcessing+0x218>
 80121d0:	f001 babe 	b.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 80121d4:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 80121d8:	2b17      	cmp	r3, #23
 80121da:	f201 82b9 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 80121de:	a201      	add	r2, pc, #4	@ (adr r2, 80121e4 <Zigbee_CallBackProcessing+0xa4>)
 80121e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e4:	080133e7 	.word	0x080133e7
 80121e8:	08013751 	.word	0x08013751
 80121ec:	08013751 	.word	0x08013751
 80121f0:	08013751 	.word	0x08013751
 80121f4:	08013751 	.word	0x08013751
 80121f8:	0801342f 	.word	0x0801342f
 80121fc:	08013751 	.word	0x08013751
 8012200:	08013751 	.word	0x08013751
 8012204:	08013751 	.word	0x08013751
 8012208:	08013751 	.word	0x08013751
 801220c:	08013477 	.word	0x08013477
 8012210:	08013751 	.word	0x08013751
 8012214:	08013751 	.word	0x08013751
 8012218:	08013751 	.word	0x08013751
 801221c:	080134eb 	.word	0x080134eb
 8012220:	08013751 	.word	0x08013751
 8012224:	08013751 	.word	0x08013751
 8012228:	08013575 	.word	0x08013575
 801222c:	08013751 	.word	0x08013751
 8012230:	080135cf 	.word	0x080135cf
 8012234:	08013751 	.word	0x08013751
 8012238:	08013629 	.word	0x08013629
 801223c:	08013751 	.word	0x08013751
 8012240:	08013683 	.word	0x08013683
 8012244:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 8012248:	2b17      	cmp	r3, #23
 801224a:	f201 8281 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 801224e:	a201      	add	r2, pc, #4	@ (adr r2, 8012254 <Zigbee_CallBackProcessing+0x114>)
 8012250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012254:	08012b11 	.word	0x08012b11
 8012258:	08013751 	.word	0x08013751
 801225c:	08012bc9 	.word	0x08012bc9
 8012260:	08013751 	.word	0x08013751
 8012264:	08013751 	.word	0x08013751
 8012268:	08013751 	.word	0x08013751
 801226c:	08012c25 	.word	0x08012c25
 8012270:	08013751 	.word	0x08013751
 8012274:	08012c81 	.word	0x08012c81
 8012278:	08013751 	.word	0x08013751
 801227c:	08013751 	.word	0x08013751
 8012280:	08013751 	.word	0x08013751
 8012284:	08013751 	.word	0x08013751
 8012288:	08013751 	.word	0x08013751
 801228c:	08013751 	.word	0x08013751
 8012290:	08013751 	.word	0x08013751
 8012294:	08013751 	.word	0x08013751
 8012298:	08013751 	.word	0x08013751
 801229c:	08013751 	.word	0x08013751
 80122a0:	08013751 	.word	0x08013751
 80122a4:	08013751 	.word	0x08013751
 80122a8:	08013751 	.word	0x08013751
 80122ac:	08013751 	.word	0x08013751
 80122b0:	08012b6d 	.word	0x08012b6d
 80122b4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80122b8:	2b24      	cmp	r3, #36	@ 0x24
 80122ba:	f201 8249 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 80122be:	a201      	add	r2, pc, #4	@ (adr r2, 80122c4 <Zigbee_CallBackProcessing+0x184>)
 80122c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122c4:	08012d7f 	.word	0x08012d7f
 80122c8:	08013751 	.word	0x08013751
 80122cc:	08012dd7 	.word	0x08012dd7
 80122d0:	08013751 	.word	0x08013751
 80122d4:	08012e49 	.word	0x08012e49
 80122d8:	08013751 	.word	0x08013751
 80122dc:	08012ea1 	.word	0x08012ea1
 80122e0:	08013751 	.word	0x08013751
 80122e4:	08012ef9 	.word	0x08012ef9
 80122e8:	08013751 	.word	0x08013751
 80122ec:	08012f51 	.word	0x08012f51
 80122f0:	08013751 	.word	0x08013751
 80122f4:	08012fa9 	.word	0x08012fa9
 80122f8:	08013751 	.word	0x08013751
 80122fc:	08012fff 	.word	0x08012fff
 8012300:	08013751 	.word	0x08013751
 8012304:	08013751 	.word	0x08013751
 8012308:	08013751 	.word	0x08013751
 801230c:	08012cdd 	.word	0x08012cdd
 8012310:	08013751 	.word	0x08013751
 8012314:	08013049 	.word	0x08013049
 8012318:	08013751 	.word	0x08013751
 801231c:	080130a3 	.word	0x080130a3
 8012320:	08013751 	.word	0x08013751
 8012324:	080130fd 	.word	0x080130fd
 8012328:	08013751 	.word	0x08013751
 801232c:	08013171 	.word	0x08013171
 8012330:	08013751 	.word	0x08013751
 8012334:	080131cb 	.word	0x080131cb
 8012338:	08013751 	.word	0x08013751
 801233c:	08013225 	.word	0x08013225
 8012340:	08013751 	.word	0x08013751
 8012344:	0801327f 	.word	0x0801327f
 8012348:	08013751 	.word	0x08013751
 801234c:	080132d9 	.word	0x080132d9
 8012350:	08013751 	.word	0x08013751
 8012354:	08013333 	.word	0x08013333
 8012358:	3b0d      	subs	r3, #13
 801235a:	2b31      	cmp	r3, #49	@ 0x31
 801235c:	f201 81f8 	bhi.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 8012360:	a201      	add	r2, pc, #4	@ (adr r2, 8012368 <Zigbee_CallBackProcessing+0x228>)
 8012362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012366:	bf00      	nop
 8012368:	08012445 	.word	0x08012445
 801236c:	08013751 	.word	0x08013751
 8012370:	08013751 	.word	0x08013751
 8012374:	08013751 	.word	0x08013751
 8012378:	08013751 	.word	0x08013751
 801237c:	080124ab 	.word	0x080124ab
 8012380:	08013751 	.word	0x08013751
 8012384:	08013751 	.word	0x08013751
 8012388:	08013751 	.word	0x08013751
 801238c:	08013751 	.word	0x08013751
 8012390:	08013751 	.word	0x08013751
 8012394:	08013751 	.word	0x08013751
 8012398:	08013751 	.word	0x08013751
 801239c:	0801251f 	.word	0x0801251f
 80123a0:	08013751 	.word	0x08013751
 80123a4:	08013751 	.word	0x08013751
 80123a8:	0801257b 	.word	0x0801257b
 80123ac:	08013751 	.word	0x08013751
 80123b0:	080125e3 	.word	0x080125e3
 80123b4:	08013751 	.word	0x08013751
 80123b8:	0801264b 	.word	0x0801264b
 80123bc:	08013751 	.word	0x08013751
 80123c0:	080126b3 	.word	0x080126b3
 80123c4:	08013751 	.word	0x08013751
 80123c8:	08013751 	.word	0x08013751
 80123cc:	0801271b 	.word	0x0801271b
 80123d0:	08013751 	.word	0x08013751
 80123d4:	08013751 	.word	0x08013751
 80123d8:	0801279d 	.word	0x0801279d
 80123dc:	08013751 	.word	0x08013751
 80123e0:	08012805 	.word	0x08012805
 80123e4:	08013751 	.word	0x08013751
 80123e8:	08013751 	.word	0x08013751
 80123ec:	08013751 	.word	0x08013751
 80123f0:	08012823 	.word	0x08012823
 80123f4:	08013751 	.word	0x08013751
 80123f8:	08013751 	.word	0x08013751
 80123fc:	08013751 	.word	0x08013751
 8012400:	0801287b 	.word	0x0801287b
 8012404:	08013751 	.word	0x08013751
 8012408:	08013751 	.word	0x08013751
 801240c:	08013751 	.word	0x08013751
 8012410:	08013751 	.word	0x08013751
 8012414:	08013751 	.word	0x08013751
 8012418:	080128cb 	.word	0x080128cb
 801241c:	08013751 	.word	0x08013751
 8012420:	08012923 	.word	0x08012923
 8012424:	08013751 	.word	0x08013751
 8012428:	0801297b 	.word	0x0801297b
 801242c:	080136fd 	.word	0x080136fd
 8012430:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 8012434:	f081 818c 	bcs.w	8013750 <Zigbee_CallBackProcessing+0x1610>
 8012438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801243c:	f63f af3a 	bhi.w	80122b4 <Zigbee_CallBackProcessing+0x174>
 8012440:	f001 b986 	b.w	8013750 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 8012444:	4bbb      	ldr	r3, [pc, #748]	@ (8012734 <Zigbee_CallBackProcessing+0x5f4>)
 8012446:	2200      	movs	r2, #0
 8012448:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 801244a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d006      	beq.n	8012462 <Zigbee_CallBackProcessing+0x322>
 8012454:	4bb8      	ldr	r3, [pc, #736]	@ (8012738 <Zigbee_CallBackProcessing+0x5f8>)
 8012456:	4ab9      	ldr	r2, [pc, #740]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 8012458:	f640 51ed 	movw	r1, #3565	@ 0xded
 801245c:	48b8      	ldr	r0, [pc, #736]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 801245e:	f002 fee3 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8012462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801246c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012470:	2b00      	cmp	r3, #0
 8012472:	f001 8171 	beq.w	8013758 <Zigbee_CallBackProcessing+0x1618>
 8012476:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	f001 816b 	beq.w	8013758 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8012482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801248c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012490:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 8012492:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801249c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4610      	mov	r0, r2
 80124a4:	4798      	blx	r3
            }
            break;
 80124a6:	f001 b957 	b.w	8013758 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 80124aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	2b03      	cmp	r3, #3
 80124b2:	d006      	beq.n	80124c2 <Zigbee_CallBackProcessing+0x382>
 80124b4:	4ba3      	ldr	r3, [pc, #652]	@ (8012744 <Zigbee_CallBackProcessing+0x604>)
 80124b6:	4aa1      	ldr	r2, [pc, #644]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 80124b8:	f640 51fc 	movw	r1, #3580	@ 0xdfc
 80124bc:	48a0      	ldr	r0, [pc, #640]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 80124be:	f002 feb3 	bl	8015228 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 80124c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80124c6:	691a      	ldr	r2, [r3, #16]
 80124c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80124cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80124d0:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80124d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80124d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	685d      	ldr	r5, [r3, #4]
 80124de:	4b95      	ldr	r3, [pc, #596]	@ (8012734 <Zigbee_CallBackProcessing+0x5f4>)
 80124e0:	6818      	ldr	r0, [r3, #0]
 80124e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80124e6:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 80124e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80124ec:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80124ee:	461e      	mov	r6, r3
 80124f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80124f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012500:	f2a2 141d 	subw	r4, r2, #285	@ 0x11d
 8012504:	4632      	mov	r2, r6
 8012506:	47a8      	blx	r5
 8012508:	4603      	mov	r3, r0
 801250a:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 801250c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012510:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 801251a:	f001 b980 	b.w	801381e <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 801251e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	2b01      	cmp	r3, #1
 8012526:	d006      	beq.n	8012536 <Zigbee_CallBackProcessing+0x3f6>
 8012528:	4b83      	ldr	r3, [pc, #524]	@ (8012738 <Zigbee_CallBackProcessing+0x5f8>)
 801252a:	4a84      	ldr	r2, [pc, #528]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 801252c:	f640 6108 	movw	r1, #3592	@ 0xe08
 8012530:	4883      	ldr	r0, [pc, #524]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 8012532:	f002 fe79 	bl	8015228 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 8012536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801253a:	689a      	ldr	r2, [r3, #8]
 801253c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012540:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012544:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8012546:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801254a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	f001 8102 	beq.w	801375c <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 8012558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801255c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012568:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801256c:	6812      	ldr	r2, [r2, #0]
 801256e:	6852      	ldr	r2, [r2, #4]
 8012570:	4611      	mov	r1, r2
 8012572:	2000      	movs	r0, #0
 8012574:	4798      	blx	r3
            }
            break;
 8012576:	f001 b8f1 	b.w	801375c <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 801257a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	2b02      	cmp	r3, #2
 8012582:	d006      	beq.n	8012592 <Zigbee_CallBackProcessing+0x452>
 8012584:	4b70      	ldr	r3, [pc, #448]	@ (8012748 <Zigbee_CallBackProcessing+0x608>)
 8012586:	4a6d      	ldr	r2, [pc, #436]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 8012588:	f640 6111 	movw	r1, #3601	@ 0xe11
 801258c:	486c      	ldr	r0, [pc, #432]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 801258e:	f002 fe4b 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801259c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f001 80dd 	beq.w	8013760 <Zigbee_CallBackProcessing+0x1620>
 80125a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f001 80d7 	beq.w	8013760 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 80125b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80125b6:	681a      	ldr	r2, [r3, #0]
 80125b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80125bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80125c0:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 80125c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80125c6:	689b      	ldr	r3, [r3, #8]
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80125ce:	6859      	ldr	r1, [r3, #4]
 80125d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80125d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	4610      	mov	r0, r2
 80125dc:	4798      	blx	r3
            }
            break;
 80125de:	f001 b8bf 	b.w	8013760 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 80125e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	2b02      	cmp	r3, #2
 80125ea:	d006      	beq.n	80125fa <Zigbee_CallBackProcessing+0x4ba>
 80125ec:	4b56      	ldr	r3, [pc, #344]	@ (8012748 <Zigbee_CallBackProcessing+0x608>)
 80125ee:	4a53      	ldr	r2, [pc, #332]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 80125f0:	f640 611c 	movw	r1, #3612	@ 0xe1c
 80125f4:	4852      	ldr	r0, [pc, #328]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 80125f6:	f002 fe17 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80125fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012604:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012608:	2b00      	cmp	r3, #0
 801260a:	f001 80ab 	beq.w	8013764 <Zigbee_CallBackProcessing+0x1624>
 801260e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	f001 80a5 	beq.w	8013764 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 801261a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801261e:	681a      	ldr	r2, [r3, #0]
 8012620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012624:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012628:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 801262a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801262e:	689b      	ldr	r3, [r3, #8]
 8012630:	4618      	mov	r0, r3
 8012632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012636:	685a      	ldr	r2, [r3, #4]
 8012638:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801263c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	4611      	mov	r1, r2
 8012644:	4798      	blx	r3
            }
            break;
 8012646:	f001 b88d 	b.w	8013764 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 801264a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	2b02      	cmp	r3, #2
 8012652:	d006      	beq.n	8012662 <Zigbee_CallBackProcessing+0x522>
 8012654:	4b3c      	ldr	r3, [pc, #240]	@ (8012748 <Zigbee_CallBackProcessing+0x608>)
 8012656:	4a39      	ldr	r2, [pc, #228]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 8012658:	f640 6127 	movw	r1, #3623	@ 0xe27
 801265c:	4838      	ldr	r0, [pc, #224]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 801265e:	f002 fde3 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801266c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012670:	2b00      	cmp	r3, #0
 8012672:	f001 8079 	beq.w	8013768 <Zigbee_CallBackProcessing+0x1628>
 8012676:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	f001 8073 	beq.w	8013768 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012682:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801268c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012690:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	b2da      	uxtb	r2, r3
 801269a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801269e:	6859      	ldr	r1, [r3, #4]
 80126a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80126a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	4610      	mov	r0, r2
 80126ac:	4798      	blx	r3
            }
            break;
 80126ae:	f001 b85b 	b.w	8013768 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 80126b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	2b02      	cmp	r3, #2
 80126ba:	d006      	beq.n	80126ca <Zigbee_CallBackProcessing+0x58a>
 80126bc:	4b22      	ldr	r3, [pc, #136]	@ (8012748 <Zigbee_CallBackProcessing+0x608>)
 80126be:	4a1f      	ldr	r2, [pc, #124]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 80126c0:	f640 6132 	movw	r1, #3634	@ 0xe32
 80126c4:	481e      	ldr	r0, [pc, #120]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 80126c6:	f002 fdaf 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80126ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80126d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f001 8047 	beq.w	801376c <Zigbee_CallBackProcessing+0x162c>
 80126de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f001 8041 	beq.w	801376c <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 80126ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80126f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80126f8:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 80126fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80126fe:	689b      	ldr	r3, [r3, #8]
 8012700:	b2da      	uxtb	r2, r3
 8012702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012706:	6859      	ldr	r1, [r3, #4]
 8012708:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801270c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	4610      	mov	r0, r2
 8012714:	4798      	blx	r3
            }
            break;
 8012716:	f001 b829 	b.w	801376c <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 801271a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	2b02      	cmp	r3, #2
 8012722:	d013      	beq.n	801274c <Zigbee_CallBackProcessing+0x60c>
 8012724:	4b08      	ldr	r3, [pc, #32]	@ (8012748 <Zigbee_CallBackProcessing+0x608>)
 8012726:	4a05      	ldr	r2, [pc, #20]	@ (801273c <Zigbee_CallBackProcessing+0x5fc>)
 8012728:	f640 613d 	movw	r1, #3645	@ 0xe3d
 801272c:	4804      	ldr	r0, [pc, #16]	@ (8012740 <Zigbee_CallBackProcessing+0x600>)
 801272e:	f002 fd7b 	bl	8015228 <__assert_func>
 8012732:	bf00      	nop
 8012734:	200004e4 	.word	0x200004e4
 8012738:	080177f8 	.word	0x080177f8
 801273c:	080184a0 	.word	0x080184a0
 8012740:	08017768 	.word	0x08017768
 8012744:	08017814 	.word	0x08017814
 8012748:	08017830 	.word	0x08017830
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801274c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012750:	68db      	ldr	r3, [r3, #12]
 8012752:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012756:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801275a:	2b00      	cmp	r3, #0
 801275c:	f001 8008 	beq.w	8013770 <Zigbee_CallBackProcessing+0x1630>
 8012760:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	f001 8002 	beq.w	8013770 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 801276c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012770:	681a      	ldr	r2, [r3, #0]
 8012772:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801277a:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 801277c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	b2da      	uxtb	r2, r3
 8012784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012788:	6859      	ldr	r1, [r3, #4]
 801278a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801278e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4610      	mov	r0, r2
 8012796:	4798      	blx	r3
            }
            break;
 8012798:	f000 bfea 	b.w	8013770 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 801279c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	2b02      	cmp	r3, #2
 80127a4:	d006      	beq.n	80127b4 <Zigbee_CallBackProcessing+0x674>
 80127a6:	4bc2      	ldr	r3, [pc, #776]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 80127a8:	4ac2      	ldr	r2, [pc, #776]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 80127aa:	f640 6148 	movw	r1, #3656	@ 0xe48
 80127ae:	48c2      	ldr	r0, [pc, #776]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 80127b0:	f002 fd3a 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80127b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80127be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	f000 87d6 	beq.w	8013774 <Zigbee_CallBackProcessing+0x1634>
 80127c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f000 87d0 	beq.w	8013774 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 80127d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80127de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80127e2:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 80127e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80127e8:	689b      	ldr	r3, [r3, #8]
 80127ea:	b2da      	uxtb	r2, r3
 80127ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80127f0:	6859      	ldr	r1, [r3, #4]
 80127f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80127f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4610      	mov	r0, r2
 80127fe:	4798      	blx	r3
            }
            break;
 8012800:	f000 bfb8 	b.w	8013774 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8012804:	4bad      	ldr	r3, [pc, #692]	@ (8012abc <Zigbee_CallBackProcessing+0x97c>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	f000 87b5 	beq.w	8013778 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 801280e:	4bab      	ldr	r3, [pc, #684]	@ (8012abc <Zigbee_CallBackProcessing+0x97c>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4aab      	ldr	r2, [pc, #684]	@ (8012ac0 <Zigbee_CallBackProcessing+0x980>)
 8012814:	6812      	ldr	r2, [r2, #0]
 8012816:	49ab      	ldr	r1, [pc, #684]	@ (8012ac4 <Zigbee_CallBackProcessing+0x984>)
 8012818:	6809      	ldr	r1, [r1, #0]
 801281a:	4610      	mov	r0, r2
 801281c:	4798      	blx	r3
            }
            break;
 801281e:	f000 bfab 	b.w	8013778 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8012822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	2b02      	cmp	r3, #2
 801282a:	d006      	beq.n	801283a <Zigbee_CallBackProcessing+0x6fa>
 801282c:	4ba0      	ldr	r3, [pc, #640]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 801282e:	4aa1      	ldr	r2, [pc, #644]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 8012830:	f640 6159 	movw	r1, #3673	@ 0xe59
 8012834:	48a0      	ldr	r0, [pc, #640]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 8012836:	f002 fcf7 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801283a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012848:	2b00      	cmp	r3, #0
 801284a:	f000 8797 	beq.w	801377c <Zigbee_CallBackProcessing+0x163c>
 801284e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	f000 8791 	beq.w	801377c <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 801285a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	637b      	str	r3, [r7, #52]	@ 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8012862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	4618      	mov	r0, r3
 801286a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801286e:	685a      	ldr	r2, [r3, #4]
 8012870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012872:	4611      	mov	r1, r2
 8012874:	4798      	blx	r3
            }
            break;
 8012876:	f000 bf81 	b.w	801377c <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 801287a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d006      	beq.n	8012892 <Zigbee_CallBackProcessing+0x752>
 8012884:	4b90      	ldr	r3, [pc, #576]	@ (8012ac8 <Zigbee_CallBackProcessing+0x988>)
 8012886:	4a8b      	ldr	r2, [pc, #556]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 8012888:	f640 6164 	movw	r1, #3684	@ 0xe64
 801288c:	488a      	ldr	r0, [pc, #552]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 801288e:	f002 fccb 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8012892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801289c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 876d 	beq.w	8013780 <Zigbee_CallBackProcessing+0x1640>
 80128a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f000 8767 	beq.w	8013780 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 80128b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback(info->arg);
 80128ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128be:	685a      	ldr	r2, [r3, #4]
 80128c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c2:	4610      	mov	r0, r2
 80128c4:	4798      	blx	r3
            }
            break;
 80128c6:	f000 bf5b 	b.w	8013780 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 80128ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d006      	beq.n	80128e2 <Zigbee_CallBackProcessing+0x7a2>
 80128d4:	4b76      	ldr	r3, [pc, #472]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 80128d6:	4a77      	ldr	r2, [pc, #476]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 80128d8:	f44f 6167 	mov.w	r1, #3696	@ 0xe70
 80128dc:	4876      	ldr	r0, [pc, #472]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 80128de:	f002 fca3 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80128e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80128ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f000 8747 	beq.w	8013784 <Zigbee_CallBackProcessing+0x1644>
 80128f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	f000 8741 	beq.w	8013784 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8012902:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 801290a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	4618      	mov	r0, r3
 8012912:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012916:	685a      	ldr	r2, [r3, #4]
 8012918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801291a:	4611      	mov	r1, r2
 801291c:	4798      	blx	r3
            }
            break;
 801291e:	f000 bf31 	b.w	8013784 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8012922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	2b02      	cmp	r3, #2
 801292a:	d006      	beq.n	801293a <Zigbee_CallBackProcessing+0x7fa>
 801292c:	4b60      	ldr	r3, [pc, #384]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 801292e:	4a61      	ldr	r2, [pc, #388]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 8012930:	f640 617c 	movw	r1, #3708	@ 0xe7c
 8012934:	4860      	ldr	r0, [pc, #384]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 8012936:	f002 fc77 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801293a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801293e:	68db      	ldr	r3, [r3, #12]
 8012940:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012944:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012948:	2b00      	cmp	r3, #0
 801294a:	f000 871d 	beq.w	8013788 <Zigbee_CallBackProcessing+0x1648>
 801294e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 8717 	beq.w	8013788 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 801295a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8012962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012966:	689b      	ldr	r3, [r3, #8]
 8012968:	4618      	mov	r0, r3
 801296a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801296e:	685a      	ldr	r2, [r3, #4]
 8012970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012972:	4611      	mov	r1, r2
 8012974:	4798      	blx	r3
            }
            break;
 8012976:	f000 bf07 	b.w	8013788 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 801297a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	2b02      	cmp	r3, #2
 8012982:	d006      	beq.n	8012992 <Zigbee_CallBackProcessing+0x852>
 8012984:	4b4a      	ldr	r3, [pc, #296]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 8012986:	4a4b      	ldr	r2, [pc, #300]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 8012988:	f640 6188 	movw	r1, #3720	@ 0xe88
 801298c:	484a      	ldr	r0, [pc, #296]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 801298e:	f002 fc4b 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801299c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f000 86f3 	beq.w	801378c <Zigbee_CallBackProcessing+0x164c>
 80129a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f000 86ed 	beq.w	801378c <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 80129b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	647b      	str	r3, [r7, #68]	@ 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 80129ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80129c6:	685a      	ldr	r2, [r3, #4]
 80129c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129ca:	4611      	mov	r1, r2
 80129cc:	4798      	blx	r3
            }
            break;
 80129ce:	f000 bedd 	b.w	801378c <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 80129d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	2b02      	cmp	r3, #2
 80129da:	d006      	beq.n	80129ea <Zigbee_CallBackProcessing+0x8aa>
 80129dc:	4b34      	ldr	r3, [pc, #208]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 80129de:	4a35      	ldr	r2, [pc, #212]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 80129e0:	f640 6193 	movw	r1, #3731	@ 0xe93
 80129e4:	4834      	ldr	r0, [pc, #208]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 80129e6:	f002 fc1f 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80129ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80129f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f000 86c9 	beq.w	8013790 <Zigbee_CallBackProcessing+0x1650>
 80129fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f000 86c3 	beq.w	8013790 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8012a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8012a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a18:	689b      	ldr	r3, [r3, #8]
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012a20:	685a      	ldr	r2, [r3, #4]
 8012a22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012a26:	4611      	mov	r1, r2
 8012a28:	4798      	blx	r3
            }
            break;
 8012a2a:	f000 beb1 	b.w	8013790 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 8012a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	2b02      	cmp	r3, #2
 8012a3c:	d006      	beq.n	8012a4c <Zigbee_CallBackProcessing+0x90c>
 8012a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 8012a40:	4a1c      	ldr	r2, [pc, #112]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 8012a42:	f640 61a3 	movw	r1, #3747	@ 0xea3
 8012a46:	481c      	ldr	r0, [pc, #112]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 8012a48:	f002 fbee 	bl	8015228 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8012a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a50:	689b      	ldr	r3, [r3, #8]
 8012a52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8012a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 8012a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d00b      	beq.n	8012a82 <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8012a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012a74:	6892      	ldr	r2, [r2, #8]
 8012a76:	4611      	mov	r1, r2
 8012a78:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8012a7c:	4798      	blx	r3
 8012a7e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8012a82:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a8a:	60da      	str	r2, [r3, #12]
            break;
 8012a8c:	f000 bec7 	b.w	801381e <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8012a90:	2300      	movs	r3, #0
 8012a92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 8012a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	2b02      	cmp	r3, #2
 8012a9e:	d015      	beq.n	8012acc <Zigbee_CallBackProcessing+0x98c>
 8012aa0:	4b03      	ldr	r3, [pc, #12]	@ (8012ab0 <Zigbee_CallBackProcessing+0x970>)
 8012aa2:	4a04      	ldr	r2, [pc, #16]	@ (8012ab4 <Zigbee_CallBackProcessing+0x974>)
 8012aa4:	f640 61b4 	movw	r1, #3764	@ 0xeb4
 8012aa8:	4803      	ldr	r0, [pc, #12]	@ (8012ab8 <Zigbee_CallBackProcessing+0x978>)
 8012aaa:	f002 fbbd 	bl	8015228 <__assert_func>
 8012aae:	bf00      	nop
 8012ab0:	08017830 	.word	0x08017830
 8012ab4:	080184a0 	.word	0x080184a0
 8012ab8:	08017768 	.word	0x08017768
 8012abc:	200004d4 	.word	0x200004d4
 8012ac0:	200004e4 	.word	0x200004e4
 8012ac4:	200004d8 	.word	0x200004d8
 8012ac8:	080177f8 	.word	0x080177f8
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8012acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012ad0:	689b      	ldr	r3, [r3, #8]
 8012ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8012ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 8012ae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d00b      	beq.n	8012b02 <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8012aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012af4:	6892      	ldr	r2, [r2, #8]
 8012af6:	4611      	mov	r1, r2
 8012af8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8012afc:	4798      	blx	r3
 8012afe:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8012b02:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012b0a:	60da      	str	r2, [r3, #12]
            break;
 8012b0c:	f000 be87 	b.w	801381e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 8012b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	2b02      	cmp	r3, #2
 8012b18:	d006      	beq.n	8012b28 <Zigbee_CallBackProcessing+0x9e8>
 8012b1a:	4bc5      	ldr	r3, [pc, #788]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012b1c:	4ac5      	ldr	r2, [pc, #788]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012b1e:	f44f 616c 	mov.w	r1, #3776	@ 0xec0
 8012b22:	48c5      	ldr	r0, [pc, #788]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012b24:	f002 fb80 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 862c 	beq.w	8013794 <Zigbee_CallBackProcessing+0x1654>
 8012b3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	f000 8626 	beq.w	8013794 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 8012b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 8012b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b5e:	685a      	ldr	r2, [r3, #4]
 8012b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b64:	4611      	mov	r1, r2
 8012b66:	4798      	blx	r3
            }
            break;
 8012b68:	f000 be14 	b.w	8013794 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8012b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	2b02      	cmp	r3, #2
 8012b74:	d006      	beq.n	8012b84 <Zigbee_CallBackProcessing+0xa44>
 8012b76:	4bae      	ldr	r3, [pc, #696]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012b78:	4aae      	ldr	r2, [pc, #696]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012b7a:	f640 61cc 	movw	r1, #3788	@ 0xecc
 8012b7e:	48ae      	ldr	r0, [pc, #696]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012b80:	f002 fb52 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f000 8600 	beq.w	8013798 <Zigbee_CallBackProcessing+0x1658>
 8012b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	f000 85fa 	beq.w	8013798 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 8012ba4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 8012bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012bb2:	689b      	ldr	r3, [r3, #8]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012bba:	685a      	ldr	r2, [r3, #4]
 8012bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	4798      	blx	r3
            }
            break;
 8012bc4:	f000 bde8 	b.w	8013798 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 8012bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	2b02      	cmp	r3, #2
 8012bd0:	d006      	beq.n	8012be0 <Zigbee_CallBackProcessing+0xaa0>
 8012bd2:	4b97      	ldr	r3, [pc, #604]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012bd4:	4a97      	ldr	r2, [pc, #604]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012bd6:	f640 61d8 	movw	r1, #3800	@ 0xed8
 8012bda:	4897      	ldr	r0, [pc, #604]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012bdc:	f002 fb24 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	f000 85d4 	beq.w	801379c <Zigbee_CallBackProcessing+0x165c>
 8012bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f000 85ce 	beq.w	801379c <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8012c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8012c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c0e:	689b      	ldr	r3, [r3, #8]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c16:	685a      	ldr	r2, [r3, #4]
 8012c18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012c1c:	4611      	mov	r1, r2
 8012c1e:	4798      	blx	r3
            }
            break;
 8012c20:	f000 bdbc 	b.w	801379c <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8012c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	2b02      	cmp	r3, #2
 8012c2c:	d006      	beq.n	8012c3c <Zigbee_CallBackProcessing+0xafc>
 8012c2e:	4b80      	ldr	r3, [pc, #512]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012c30:	4a80      	ldr	r2, [pc, #512]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012c32:	f640 61e3 	movw	r1, #3811	@ 0xee3
 8012c36:	4880      	ldr	r0, [pc, #512]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012c38:	f002 faf6 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f000 85a8 	beq.w	80137a0 <Zigbee_CallBackProcessing+0x1660>
 8012c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f000 85a2 	beq.w	80137a0 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8012c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 8012c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c72:	685a      	ldr	r2, [r3, #4]
 8012c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012c78:	4611      	mov	r1, r2
 8012c7a:	4798      	blx	r3
            }
            break;
 8012c7c:	f000 bd90 	b.w	80137a0 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 8012c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	2b02      	cmp	r3, #2
 8012c88:	d006      	beq.n	8012c98 <Zigbee_CallBackProcessing+0xb58>
 8012c8a:	4b69      	ldr	r3, [pc, #420]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012c8c:	4a69      	ldr	r2, [pc, #420]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012c8e:	f640 61ee 	movw	r1, #3822	@ 0xeee
 8012c92:	4869      	ldr	r0, [pc, #420]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012c94:	f002 fac8 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f000 857c 	beq.w	80137a4 <Zigbee_CallBackProcessing+0x1664>
 8012cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f000 8576 	beq.w	80137a4 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 8012cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 8012cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012cc6:	689b      	ldr	r3, [r3, #8]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cce:	685a      	ldr	r2, [r3, #4]
 8012cd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4798      	blx	r3
            }
            break;
 8012cd8:	f000 bd64 	b.w	80137a4 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8012cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	2b03      	cmp	r3, #3
 8012ce4:	d006      	beq.n	8012cf4 <Zigbee_CallBackProcessing+0xbb4>
 8012ce6:	4b55      	ldr	r3, [pc, #340]	@ (8012e3c <Zigbee_CallBackProcessing+0xcfc>)
 8012ce8:	4a52      	ldr	r2, [pc, #328]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012cea:	f640 61fc 	movw	r1, #3836	@ 0xefc
 8012cee:	4852      	ldr	r0, [pc, #328]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012cf0:	f002 fa9a 	bl	8015228 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8012cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012cf8:	691b      	ldr	r3, [r3, #16]
 8012cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8012cfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	f000 8552 	beq.w	80137a8 <Zigbee_CallBackProcessing+0x1668>
 8012d04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	f000 854d 	beq.w	80137a8 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8012d0e:	2300      	movs	r3, #0
 8012d10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8012d14:	e02a      	b.n	8012d6c <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8012d16:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	005b      	lsls	r3, r3, #1
 8012d1e:	4413      	add	r3, r2
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	4a47      	ldr	r2, [pc, #284]	@ (8012e40 <Zigbee_CallBackProcessing+0xd00>)
 8012d24:	4413      	add	r3, r2
 8012d26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d119      	bne.n	8012d60 <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8012d2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d021      	beq.n	8012d78 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8012d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012d38:	689b      	ldr	r3, [r3, #8]
 8012d3a:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8012d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 8012d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8012d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8012e44 <Zigbee_CallBackProcessing+0xd04>)
 8012d4e:	6818      	ldr	r0, [r3, #0]
 8012d50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8012d58:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8012d5a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8012d5c:	47a0      	blx	r4
                    break;
 8012d5e:	e00c      	b.n	8012d7a <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 8012d60:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8012d62:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012d66:	3301      	adds	r3, #1
 8012d68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8012d6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012d70:	2b07      	cmp	r3, #7
 8012d72:	d9d0      	bls.n	8012d16 <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 8012d74:	f000 bd18 	b.w	80137a8 <Zigbee_CallBackProcessing+0x1668>
                        break;
 8012d78:	bf00      	nop
            break;
 8012d7a:	f000 bd15 	b.w	80137a8 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 8012d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	2b02      	cmp	r3, #2
 8012d86:	d006      	beq.n	8012d96 <Zigbee_CallBackProcessing+0xc56>
 8012d88:	4b29      	ldr	r3, [pc, #164]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012d8c:	f640 7119 	movw	r1, #3865	@ 0xf19
 8012d90:	4829      	ldr	r0, [pc, #164]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012d92:	f002 fa49 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	f000 8501 	beq.w	80137ac <Zigbee_CallBackProcessing+0x166c>
 8012daa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	f000 84fb 	beq.w	80137ac <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 8012db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 8012dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012dca:	685a      	ldr	r2, [r3, #4]
 8012dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dce:	4611      	mov	r1, r2
 8012dd0:	4798      	blx	r3
            }
            break;
 8012dd2:	f000 bceb 	b.w	80137ac <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 8012dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	2b02      	cmp	r3, #2
 8012dde:	d006      	beq.n	8012dee <Zigbee_CallBackProcessing+0xcae>
 8012de0:	4b13      	ldr	r3, [pc, #76]	@ (8012e30 <Zigbee_CallBackProcessing+0xcf0>)
 8012de2:	4a14      	ldr	r2, [pc, #80]	@ (8012e34 <Zigbee_CallBackProcessing+0xcf4>)
 8012de4:	f640 7124 	movw	r1, #3876	@ 0xf24
 8012de8:	4813      	ldr	r0, [pc, #76]	@ (8012e38 <Zigbee_CallBackProcessing+0xcf8>)
 8012dea:	f002 fa1d 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012df2:	68db      	ldr	r3, [r3, #12]
 8012df4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	f000 84d7 	beq.w	80137b0 <Zigbee_CallBackProcessing+0x1670>
 8012e02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f000 84d1 	beq.w	80137b0 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 8012e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8012e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012e1a:	689b      	ldr	r3, [r3, #8]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e22:	685a      	ldr	r2, [r3, #4]
 8012e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e26:	4611      	mov	r1, r2
 8012e28:	4798      	blx	r3
            }
            break;
 8012e2a:	f000 bcc1 	b.w	80137b0 <Zigbee_CallBackProcessing+0x1670>
 8012e2e:	bf00      	nop
 8012e30:	08017830 	.word	0x08017830
 8012e34:	080184a0 	.word	0x080184a0
 8012e38:	08017768 	.word	0x08017768
 8012e3c:	08017814 	.word	0x08017814
 8012e40:	20000678 	.word	0x20000678
 8012e44:	200004e4 	.word	0x200004e4

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 8012e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	d006      	beq.n	8012e60 <Zigbee_CallBackProcessing+0xd20>
 8012e52:	4bc1      	ldr	r3, [pc, #772]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8012e54:	4ac1      	ldr	r2, [pc, #772]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 8012e56:	f640 712f 	movw	r1, #3887	@ 0xf2f
 8012e5a:	48c1      	ldr	r0, [pc, #772]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8012e5c:	f002 f9e4 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	f000 84a0 	beq.w	80137b4 <Zigbee_CallBackProcessing+0x1674>
 8012e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f000 849a 	beq.w	80137b4 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 8012e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 8012e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012e8c:	689b      	ldr	r3, [r3, #8]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e98:	4611      	mov	r1, r2
 8012e9a:	4798      	blx	r3
            }
            break;
 8012e9c:	f000 bc8a 	b.w	80137b4 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 8012ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	2b02      	cmp	r3, #2
 8012ea8:	d006      	beq.n	8012eb8 <Zigbee_CallBackProcessing+0xd78>
 8012eaa:	4bab      	ldr	r3, [pc, #684]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8012eac:	4aab      	ldr	r2, [pc, #684]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 8012eae:	f640 713a 	movw	r1, #3898	@ 0xf3a
 8012eb2:	48ab      	ldr	r0, [pc, #684]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8012eb4:	f002 f9b8 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f000 8476 	beq.w	80137b8 <Zigbee_CallBackProcessing+0x1678>
 8012ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f000 8470 	beq.w	80137b8 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 8012ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 8012ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012eec:	685a      	ldr	r2, [r3, #4]
 8012eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4798      	blx	r3
            }
            break;
 8012ef4:	f000 bc60 	b.w	80137b8 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 8012ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012efc:	685b      	ldr	r3, [r3, #4]
 8012efe:	2b02      	cmp	r3, #2
 8012f00:	d006      	beq.n	8012f10 <Zigbee_CallBackProcessing+0xdd0>
 8012f02:	4b95      	ldr	r3, [pc, #596]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8012f04:	4a95      	ldr	r2, [pc, #596]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 8012f06:	f640 7145 	movw	r1, #3909	@ 0xf45
 8012f0a:	4895      	ldr	r0, [pc, #596]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8012f0c:	f002 f98c 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f000 844c 	beq.w	80137bc <Zigbee_CallBackProcessing+0x167c>
 8012f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f000 8446 	beq.w	80137bc <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 8012f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 8012f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f44:	685a      	ldr	r2, [r3, #4]
 8012f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f48:	4611      	mov	r1, r2
 8012f4a:	4798      	blx	r3
            }
            break;
 8012f4c:	f000 bc36 	b.w	80137bc <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 8012f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	2b02      	cmp	r3, #2
 8012f58:	d006      	beq.n	8012f68 <Zigbee_CallBackProcessing+0xe28>
 8012f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8012f5c:	4a7f      	ldr	r2, [pc, #508]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 8012f5e:	f44f 6175 	mov.w	r1, #3920	@ 0xf50
 8012f62:	487f      	ldr	r0, [pc, #508]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8012f64:	f002 f960 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	f000 8422 	beq.w	80137c0 <Zigbee_CallBackProcessing+0x1680>
 8012f7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f000 841c 	beq.w	80137c0 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 8012f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 8012f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012f94:	689b      	ldr	r3, [r3, #8]
 8012f96:	4618      	mov	r0, r3
 8012f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012f9c:	685a      	ldr	r2, [r3, #4]
 8012f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	4798      	blx	r3
            }
            break;
 8012fa4:	f000 bc0c 	b.w	80137c0 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 8012fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	2b02      	cmp	r3, #2
 8012fb0:	d006      	beq.n	8012fc0 <Zigbee_CallBackProcessing+0xe80>
 8012fb2:	4b69      	ldr	r3, [pc, #420]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8012fb4:	4a69      	ldr	r2, [pc, #420]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 8012fb6:	f640 715b 	movw	r1, #3931	@ 0xf5b
 8012fba:	4869      	ldr	r0, [pc, #420]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8012fbc:	f002 f934 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	f000 83f8 	beq.w	80137c4 <Zigbee_CallBackProcessing+0x1684>
 8012fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	f000 83f2 	beq.w	80137c4 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 8012fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 8012fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012fec:	689b      	ldr	r3, [r3, #8]
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ff4:	685a      	ldr	r2, [r3, #4]
 8012ff6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ff8:	4611      	mov	r1, r2
 8012ffa:	4798      	blx	r3
            }
            break;
 8012ffc:	e3e2      	b.n	80137c4 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 8012ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	2b01      	cmp	r3, #1
 8013006:	d006      	beq.n	8013016 <Zigbee_CallBackProcessing+0xed6>
 8013008:	4b56      	ldr	r3, [pc, #344]	@ (8013164 <Zigbee_CallBackProcessing+0x1024>)
 801300a:	4a54      	ldr	r2, [pc, #336]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 801300c:	f640 7168 	movw	r1, #3944	@ 0xf68
 8013010:	4853      	ldr	r0, [pc, #332]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8013012:	f002 f909 	bl	8015228 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8013016:	4b54      	ldr	r3, [pc, #336]	@ (8013168 <Zigbee_CallBackProcessing+0x1028>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	f000 83d4 	beq.w	80137c8 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 8013020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 8013028:	4b4f      	ldr	r3, [pc, #316]	@ (8013168 <Zigbee_CallBackProcessing+0x1028>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	4a4f      	ldr	r2, [pc, #316]	@ (801316c <Zigbee_CallBackProcessing+0x102c>)
 801302e:	6812      	ldr	r2, [r2, #0]
 8013030:	4611      	mov	r1, r2
 8013032:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013034:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 8013036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	2b85      	cmp	r3, #133	@ 0x85
 801303c:	f040 83c4 	bne.w	80137c8 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 8013040:	4b49      	ldr	r3, [pc, #292]	@ (8013168 <Zigbee_CallBackProcessing+0x1028>)
 8013042:	2200      	movs	r2, #0
 8013044:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8013046:	e3bf      	b.n	80137c8 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 8013048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	2b02      	cmp	r3, #2
 8013050:	d006      	beq.n	8013060 <Zigbee_CallBackProcessing+0xf20>
 8013052:	4b41      	ldr	r3, [pc, #260]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8013054:	4a41      	ldr	r2, [pc, #260]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 8013056:	f640 7176 	movw	r1, #3958	@ 0xf76
 801305a:	4841      	ldr	r0, [pc, #260]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 801305c:	f002 f8e4 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801306a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801306e:	2b00      	cmp	r3, #0
 8013070:	f000 83ac 	beq.w	80137cc <Zigbee_CallBackProcessing+0x168c>
 8013074:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2b00      	cmp	r3, #0
 801307c:	f000 83a6 	beq.w	80137cc <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 8013080:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 801308a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801308e:	689b      	ldr	r3, [r3, #8]
 8013090:	4618      	mov	r0, r3
 8013092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013096:	685a      	ldr	r2, [r3, #4]
 8013098:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801309c:	4611      	mov	r1, r2
 801309e:	4798      	blx	r3
            }
            break;
 80130a0:	e394      	b.n	80137cc <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 80130a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	2b02      	cmp	r3, #2
 80130aa:	d006      	beq.n	80130ba <Zigbee_CallBackProcessing+0xf7a>
 80130ac:	4b2a      	ldr	r3, [pc, #168]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 80130ae:	4a2b      	ldr	r2, [pc, #172]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 80130b0:	f640 7181 	movw	r1, #3969	@ 0xf81
 80130b4:	482a      	ldr	r0, [pc, #168]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 80130b6:	f002 f8b7 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80130ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80130c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f000 8381 	beq.w	80137d0 <Zigbee_CallBackProcessing+0x1690>
 80130ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f000 837b 	beq.w	80137d0 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80130da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 80130e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130e8:	689b      	ldr	r3, [r3, #8]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80130f0:	685a      	ldr	r2, [r3, #4]
 80130f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80130f6:	4611      	mov	r1, r2
 80130f8:	4798      	blx	r3
            }
            break;
 80130fa:	e369      	b.n	80137d0 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 80130fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	2b02      	cmp	r3, #2
 8013104:	d006      	beq.n	8013114 <Zigbee_CallBackProcessing+0xfd4>
 8013106:	4b14      	ldr	r3, [pc, #80]	@ (8013158 <Zigbee_CallBackProcessing+0x1018>)
 8013108:	4a14      	ldr	r2, [pc, #80]	@ (801315c <Zigbee_CallBackProcessing+0x101c>)
 801310a:	f640 718c 	movw	r1, #3980	@ 0xf8c
 801310e:	4814      	ldr	r0, [pc, #80]	@ (8013160 <Zigbee_CallBackProcessing+0x1020>)
 8013110:	f002 f88a 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801311e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013122:	2b00      	cmp	r3, #0
 8013124:	f000 8356 	beq.w	80137d4 <Zigbee_CallBackProcessing+0x1694>
 8013128:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	f000 8350 	beq.w	80137d4 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 8013134:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 801313e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013142:	689b      	ldr	r3, [r3, #8]
 8013144:	4618      	mov	r0, r3
 8013146:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801314a:	685a      	ldr	r2, [r3, #4]
 801314c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013150:	4611      	mov	r1, r2
 8013152:	4798      	blx	r3
            }
            break;
 8013154:	e33e      	b.n	80137d4 <Zigbee_CallBackProcessing+0x1694>
 8013156:	bf00      	nop
 8013158:	08017830 	.word	0x08017830
 801315c:	080184a0 	.word	0x080184a0
 8013160:	08017768 	.word	0x08017768
 8013164:	080177f8 	.word	0x080177f8
 8013168:	200004dc 	.word	0x200004dc
 801316c:	200004e0 	.word	0x200004e0

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 8013170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	2b02      	cmp	r3, #2
 8013178:	d006      	beq.n	8013188 <Zigbee_CallBackProcessing+0x1048>
 801317a:	4bc5      	ldr	r3, [pc, #788]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 801317c:	4ac5      	ldr	r2, [pc, #788]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 801317e:	f640 7197 	movw	r1, #3991	@ 0xf97
 8013182:	48c5      	ldr	r0, [pc, #788]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 8013184:	f002 f850 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013192:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 831e 	beq.w	80137d8 <Zigbee_CallBackProcessing+0x1698>
 801319c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 8318 	beq.w	80137d8 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 80131a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 80131b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131b6:	689b      	ldr	r3, [r3, #8]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80131c4:	4611      	mov	r1, r2
 80131c6:	4798      	blx	r3
            }
            break;
 80131c8:	e306      	b.n	80137d8 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 80131ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d006      	beq.n	80131e2 <Zigbee_CallBackProcessing+0x10a2>
 80131d4:	4bae      	ldr	r3, [pc, #696]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 80131d6:	4aaf      	ldr	r2, [pc, #700]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 80131d8:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 80131dc:	48ae      	ldr	r0, [pc, #696]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 80131de:	f002 f823 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80131e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80131ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f000 82f3 	beq.w	80137dc <Zigbee_CallBackProcessing+0x169c>
 80131f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f000 82ed 	beq.w	80137dc <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 8013202:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 801320c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	4618      	mov	r0, r3
 8013214:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013218:	685a      	ldr	r2, [r3, #4]
 801321a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801321e:	4611      	mov	r1, r2
 8013220:	4798      	blx	r3
            }
            break;
 8013222:	e2db      	b.n	80137dc <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 8013224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	2b02      	cmp	r3, #2
 801322c:	d006      	beq.n	801323c <Zigbee_CallBackProcessing+0x10fc>
 801322e:	4b98      	ldr	r3, [pc, #608]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 8013230:	4a98      	ldr	r2, [pc, #608]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 8013232:	f640 71ad 	movw	r1, #4013	@ 0xfad
 8013236:	4898      	ldr	r0, [pc, #608]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 8013238:	f001 fff6 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801323c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013240:	68db      	ldr	r3, [r3, #12]
 8013242:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801324a:	2b00      	cmp	r3, #0
 801324c:	f000 82c8 	beq.w	80137e0 <Zigbee_CallBackProcessing+0x16a0>
 8013250:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	f000 82c2 	beq.w	80137e0 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 801325c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 8013266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801326a:	689b      	ldr	r3, [r3, #8]
 801326c:	4618      	mov	r0, r3
 801326e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013272:	685a      	ldr	r2, [r3, #4]
 8013274:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013278:	4611      	mov	r1, r2
 801327a:	4798      	blx	r3
            }
            break;
 801327c:	e2b0      	b.n	80137e0 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 801327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	2b02      	cmp	r3, #2
 8013286:	d006      	beq.n	8013296 <Zigbee_CallBackProcessing+0x1156>
 8013288:	4b81      	ldr	r3, [pc, #516]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 801328a:	4a82      	ldr	r2, [pc, #520]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 801328c:	f640 71b8 	movw	r1, #4024	@ 0xfb8
 8013290:	4881      	ldr	r0, [pc, #516]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 8013292:	f001 ffc9 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80132a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f000 829d 	beq.w	80137e4 <Zigbee_CallBackProcessing+0x16a4>
 80132aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	f000 8297 	beq.w	80137e4 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 80132b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 80132c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	4618      	mov	r0, r3
 80132c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132cc:	685a      	ldr	r2, [r3, #4]
 80132ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80132d2:	4611      	mov	r1, r2
 80132d4:	4798      	blx	r3
            }
            break;
 80132d6:	e285      	b.n	80137e4 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 80132d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	2b02      	cmp	r3, #2
 80132e0:	d006      	beq.n	80132f0 <Zigbee_CallBackProcessing+0x11b0>
 80132e2:	4b6b      	ldr	r3, [pc, #428]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 80132e4:	4a6b      	ldr	r2, [pc, #428]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 80132e6:	f640 71c3 	movw	r1, #4035	@ 0xfc3
 80132ea:	486b      	ldr	r0, [pc, #428]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 80132ec:	f001 ff9c 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80132f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80132f4:	68db      	ldr	r3, [r3, #12]
 80132f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80132fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f000 8272 	beq.w	80137e8 <Zigbee_CallBackProcessing+0x16a8>
 8013304:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 826c 	beq.w	80137e8 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 8013310:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 801331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801331e:	689b      	ldr	r3, [r3, #8]
 8013320:	4618      	mov	r0, r3
 8013322:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013326:	685a      	ldr	r2, [r3, #4]
 8013328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801332c:	4611      	mov	r1, r2
 801332e:	4798      	blx	r3
            }
            break;
 8013330:	e25a      	b.n	80137e8 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8013332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	2b03      	cmp	r3, #3
 801333a:	d006      	beq.n	801334a <Zigbee_CallBackProcessing+0x120a>
 801333c:	4b57      	ldr	r3, [pc, #348]	@ (801349c <Zigbee_CallBackProcessing+0x135c>)
 801333e:	4a55      	ldr	r2, [pc, #340]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 8013340:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 8013344:	4854      	ldr	r0, [pc, #336]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 8013346:	f001 ff6f 	bl	8015228 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 801334a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801334e:	691b      	ldr	r3, [r3, #16]
 8013350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8013354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013358:	2b00      	cmp	r3, #0
 801335a:	f000 8247 	beq.w	80137ec <Zigbee_CallBackProcessing+0x16ac>
 801335e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	f000 8241 	beq.w	80137ec <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801336a:	2300      	movs	r3, #0
 801336c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8013370:	e032      	b.n	80133d8 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8013372:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8013376:	4613      	mov	r3, r2
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	4413      	add	r3, r2
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	4a48      	ldr	r2, [pc, #288]	@ (80134a0 <Zigbee_CallBackProcessing+0x1360>)
 8013380:	4413      	add	r3, r2
 8013382:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013386:	429a      	cmp	r2, r3
 8013388:	d120      	bne.n	80133cc <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 801338a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d026      	beq.n	80133e2 <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 8013394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013398:	689b      	ldr	r3, [r3, #8]
 801339a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 801339e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 80133a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80133b2:	4b3c      	ldr	r3, [pc, #240]	@ (80134a4 <Zigbee_CallBackProcessing+0x1364>)
 80133b4:	6818      	ldr	r0, [r3, #0]
 80133b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80133ba:	689b      	ldr	r3, [r3, #8]
 80133bc:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80133c0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80133c4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80133c8:	47a0      	blx	r4
                    break;
 80133ca:	e00b      	b.n	80133e4 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 80133cc:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80133ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133d2:	3301      	adds	r3, #1
 80133d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80133d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133dc:	2b07      	cmp	r3, #7
 80133de:	d9c8      	bls.n	8013372 <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 80133e0:	e204      	b.n	80137ec <Zigbee_CallBackProcessing+0x16ac>
                        break;
 80133e2:	bf00      	nop
            break;
 80133e4:	e202      	b.n	80137ec <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 80133e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	2b02      	cmp	r3, #2
 80133ee:	d006      	beq.n	80133fe <Zigbee_CallBackProcessing+0x12be>
 80133f0:	4b27      	ldr	r3, [pc, #156]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 80133f2:	4a28      	ldr	r2, [pc, #160]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 80133f4:	f640 71f2 	movw	r1, #4082	@ 0xff2
 80133f8:	4827      	ldr	r0, [pc, #156]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 80133fa:	f001 ff15 	bl	8015228 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80133fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013402:	689b      	ldr	r3, [r3, #8]
 8013404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 8013408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 8013412:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8013416:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 801341a:	f7f2 ff2d 	bl	8006278 <zcl_cluster_data_ind>
 801341e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013422:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8013426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801342a:	60da      	str	r2, [r3, #12]
            break;
 801342c:	e1f7      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 801342e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	2b02      	cmp	r3, #2
 8013436:	d006      	beq.n	8013446 <Zigbee_CallBackProcessing+0x1306>
 8013438:	4b15      	ldr	r3, [pc, #84]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 801343a:	4a16      	ldr	r2, [pc, #88]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 801343c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8013440:	4815      	ldr	r0, [pc, #84]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 8013442:	f001 fef1 	bl	8015228 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8013446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801344a:	689b      	ldr	r3, [r3, #8]
 801344c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 8013450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 801345a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801345e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8013462:	f7f2 ff23 	bl	80062ac <zcl_cluster_alarm_data_ind>
 8013466:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801346a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013472:	60da      	str	r2, [r3, #12]
            break;
 8013474:	e1d3      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 8013476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	2b02      	cmp	r3, #2
 801347e:	d013      	beq.n	80134a8 <Zigbee_CallBackProcessing+0x1368>
 8013480:	4b03      	ldr	r3, [pc, #12]	@ (8013490 <Zigbee_CallBackProcessing+0x1350>)
 8013482:	4a04      	ldr	r2, [pc, #16]	@ (8013494 <Zigbee_CallBackProcessing+0x1354>)
 8013484:	f241 010b 	movw	r1, #4107	@ 0x100b
 8013488:	4803      	ldr	r0, [pc, #12]	@ (8013498 <Zigbee_CallBackProcessing+0x1358>)
 801348a:	f001 fecd 	bl	8015228 <__assert_func>
 801348e:	bf00      	nop
 8013490:	08017830 	.word	0x08017830
 8013494:	080184a0 	.word	0x080184a0
 8013498:	08017768 	.word	0x08017768
 801349c:	08017814 	.word	0x08017814
 80134a0:	20000678 	.word	0x20000678
 80134a4:	200004e4 	.word	0x200004e4
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80134a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80134b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	f000 81a8 	beq.w	801380c <Zigbee_CallBackProcessing+0x16cc>
 80134bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f000 81a2 	beq.w	801380c <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 80134c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 80134d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	4618      	mov	r0, r3
 80134da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80134e4:	4611      	mov	r1, r2
 80134e6:	4798      	blx	r3
            }
            break;
 80134e8:	e190      	b.n	801380c <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 80134ea:	2300      	movs	r3, #0
 80134ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 80134f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d006      	beq.n	8013508 <Zigbee_CallBackProcessing+0x13c8>
 80134fa:	4bbd      	ldr	r3, [pc, #756]	@ (80137f0 <Zigbee_CallBackProcessing+0x16b0>)
 80134fc:	4abd      	ldr	r2, [pc, #756]	@ (80137f4 <Zigbee_CallBackProcessing+0x16b4>)
 80134fe:	f241 0119 	movw	r1, #4121	@ 0x1019
 8013502:	48bd      	ldr	r0, [pc, #756]	@ (80137f8 <Zigbee_CallBackProcessing+0x16b8>)
 8013504:	f001 fe90 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8013512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013516:	2b00      	cmp	r3, #0
 8013518:	d026      	beq.n	8013568 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 801351a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801351e:	689b      	ldr	r3, [r3, #8]
 8013520:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 8013524:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d00f      	beq.n	801354e <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 801352e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 8013538:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801353c:	685a      	ldr	r2, [r3, #4]
 801353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013542:	4611      	mov	r1, r2
 8013544:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8013548:	4798      	blx	r3
 801354a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 801354e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013552:	7a1b      	ldrb	r3, [r3, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d007      	beq.n	8013568 <Zigbee_CallBackProcessing+0x1428>
 8013558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801355c:	785b      	ldrb	r3, [r3, #1]
 801355e:	2b94      	cmp	r3, #148	@ 0x94
 8013560:	d002      	beq.n	8013568 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 8013562:	2300      	movs	r3, #0
 8013564:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013568:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013570:	60da      	str	r2, [r3, #12]
            break;
 8013572:	e154      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8013574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	2b02      	cmp	r3, #2
 801357c:	d006      	beq.n	801358c <Zigbee_CallBackProcessing+0x144c>
 801357e:	4b9c      	ldr	r3, [pc, #624]	@ (80137f0 <Zigbee_CallBackProcessing+0x16b0>)
 8013580:	4a9c      	ldr	r2, [pc, #624]	@ (80137f4 <Zigbee_CallBackProcessing+0x16b4>)
 8013582:	f241 0131 	movw	r1, #4145	@ 0x1031
 8013586:	489c      	ldr	r0, [pc, #624]	@ (80137f8 <Zigbee_CallBackProcessing+0x16b8>)
 8013588:	f001 fe4e 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013596:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801359a:	2b00      	cmp	r3, #0
 801359c:	f000 8138 	beq.w	8013810 <Zigbee_CallBackProcessing+0x16d0>
 80135a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	f000 8132 	beq.w	8013810 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 80135ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 80135b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	4618      	mov	r0, r3
 80135be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135c2:	685a      	ldr	r2, [r3, #4]
 80135c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80135c8:	4611      	mov	r1, r2
 80135ca:	4798      	blx	r3
            }
            break;
 80135cc:	e120      	b.n	8013810 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 80135ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	2b02      	cmp	r3, #2
 80135d6:	d006      	beq.n	80135e6 <Zigbee_CallBackProcessing+0x14a6>
 80135d8:	4b85      	ldr	r3, [pc, #532]	@ (80137f0 <Zigbee_CallBackProcessing+0x16b0>)
 80135da:	4a86      	ldr	r2, [pc, #536]	@ (80137f4 <Zigbee_CallBackProcessing+0x16b4>)
 80135dc:	f241 013c 	movw	r1, #4156	@ 0x103c
 80135e0:	4885      	ldr	r0, [pc, #532]	@ (80137f8 <Zigbee_CallBackProcessing+0x16b8>)
 80135e2:	f001 fe21 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80135e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80135ea:	68db      	ldr	r3, [r3, #12]
 80135ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80135f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f000 810d 	beq.w	8013814 <Zigbee_CallBackProcessing+0x16d4>
 80135fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 8107 	beq.w	8013814 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8013606:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8013610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	4618      	mov	r0, r3
 8013618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801361c:	685a      	ldr	r2, [r3, #4]
 801361e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013622:	4611      	mov	r1, r2
 8013624:	4798      	blx	r3
            }
            break;
 8013626:	e0f5      	b.n	8013814 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8013628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	2b02      	cmp	r3, #2
 8013630:	d006      	beq.n	8013640 <Zigbee_CallBackProcessing+0x1500>
 8013632:	4b6f      	ldr	r3, [pc, #444]	@ (80137f0 <Zigbee_CallBackProcessing+0x16b0>)
 8013634:	4a6f      	ldr	r2, [pc, #444]	@ (80137f4 <Zigbee_CallBackProcessing+0x16b4>)
 8013636:	f241 0147 	movw	r1, #4167	@ 0x1047
 801363a:	486f      	ldr	r0, [pc, #444]	@ (80137f8 <Zigbee_CallBackProcessing+0x16b8>)
 801363c:	f001 fdf4 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801364a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801364e:	2b00      	cmp	r3, #0
 8013650:	f000 80e2 	beq.w	8013818 <Zigbee_CallBackProcessing+0x16d8>
 8013654:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	f000 80dc 	beq.w	8013818 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8013660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 801366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801366e:	689b      	ldr	r3, [r3, #8]
 8013670:	4618      	mov	r0, r3
 8013672:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013676:	685a      	ldr	r2, [r3, #4]
 8013678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801367c:	4611      	mov	r1, r2
 801367e:	4798      	blx	r3
            }
            break;
 8013680:	e0ca      	b.n	8013818 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8013682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	2b05      	cmp	r3, #5
 801368a:	d006      	beq.n	801369a <Zigbee_CallBackProcessing+0x155a>
 801368c:	4b5b      	ldr	r3, [pc, #364]	@ (80137fc <Zigbee_CallBackProcessing+0x16bc>)
 801368e:	4a59      	ldr	r2, [pc, #356]	@ (80137f4 <Zigbee_CallBackProcessing+0x16b4>)
 8013690:	f241 0152 	movw	r1, #4178	@ 0x1052
 8013694:	4858      	ldr	r0, [pc, #352]	@ (80137f8 <Zigbee_CallBackProcessing+0x16b8>)
 8013696:	f001 fdc7 	bl	8015228 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 801369a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801369e:	699b      	ldr	r3, [r3, #24]
 80136a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80136a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f000 80b7 	beq.w	801381c <Zigbee_CallBackProcessing+0x16dc>
 80136ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f000 80b1 	beq.w	801381c <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 80136ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80136be:	f103 0108 	add.w	r1, r3, #8
 80136c2:	463b      	mov	r3, r7
 80136c4:	2208      	movs	r2, #8
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fd fcb7 	bl	801103a <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 80136cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 80136d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80136da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80136de:	691b      	ldr	r3, [r3, #16]
 80136e0:	b29a      	uxth	r2, r3
 80136e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80136e6:	695b      	ldr	r3, [r3, #20]
 80136e8:	b2dd      	uxtb	r5, r3
 80136ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 80136f6:	462b      	mov	r3, r5
 80136f8:	47a0      	blx	r4
            }
            break;
 80136fa:	e08f      	b.n	801381c <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 80136fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	2b03      	cmp	r3, #3
 8013704:	d006      	beq.n	8013714 <Zigbee_CallBackProcessing+0x15d4>
 8013706:	4b3e      	ldr	r3, [pc, #248]	@ (8013800 <Zigbee_CallBackProcessing+0x16c0>)
 8013708:	4a3a      	ldr	r2, [pc, #232]	@ (80137f4 <Zigbee_CallBackProcessing+0x16b4>)
 801370a:	f241 0163 	movw	r1, #4195	@ 0x1063
 801370e:	483a      	ldr	r0, [pc, #232]	@ (80137f8 <Zigbee_CallBackProcessing+0x16b8>)
 8013710:	f001 fd8a 	bl	8015228 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8013714:	4b3b      	ldr	r3, [pc, #236]	@ (8013804 <Zigbee_CallBackProcessing+0x16c4>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d103      	bne.n	8013724 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 801371c:	2381      	movs	r3, #129	@ 0x81
 801371e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 8013722:	e07c      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8013724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 801372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	64bb      	str	r3, [r7, #72]	@ 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8013734:	4b33      	ldr	r3, [pc, #204]	@ (8013804 <Zigbee_CallBackProcessing+0x16c4>)
 8013736:	681c      	ldr	r4, [r3, #0]
 8013738:	4b33      	ldr	r3, [pc, #204]	@ (8013808 <Zigbee_CallBackProcessing+0x16c8>)
 801373a:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 801373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013740:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8013742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013744:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013746:	47a0      	blx	r4
 8013748:	4603      	mov	r3, r0
 801374a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 801374e:	e066      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8013750:	2301      	movs	r3, #1
 8013752:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8013756:	e062      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013758:	bf00      	nop
 801375a:	e060      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 801375c:	bf00      	nop
 801375e:	e05e      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013760:	bf00      	nop
 8013762:	e05c      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013764:	bf00      	nop
 8013766:	e05a      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013768:	bf00      	nop
 801376a:	e058      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 801376c:	bf00      	nop
 801376e:	e056      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013770:	bf00      	nop
 8013772:	e054      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013774:	bf00      	nop
 8013776:	e052      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013778:	bf00      	nop
 801377a:	e050      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 801377c:	bf00      	nop
 801377e:	e04e      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013780:	bf00      	nop
 8013782:	e04c      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013784:	bf00      	nop
 8013786:	e04a      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013788:	bf00      	nop
 801378a:	e048      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 801378c:	bf00      	nop
 801378e:	e046      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013790:	bf00      	nop
 8013792:	e044      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013794:	bf00      	nop
 8013796:	e042      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013798:	bf00      	nop
 801379a:	e040      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 801379c:	bf00      	nop
 801379e:	e03e      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137a0:	bf00      	nop
 80137a2:	e03c      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137a4:	bf00      	nop
 80137a6:	e03a      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137a8:	bf00      	nop
 80137aa:	e038      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137ac:	bf00      	nop
 80137ae:	e036      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137b0:	bf00      	nop
 80137b2:	e034      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137b4:	bf00      	nop
 80137b6:	e032      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137b8:	bf00      	nop
 80137ba:	e030      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137bc:	bf00      	nop
 80137be:	e02e      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137c0:	bf00      	nop
 80137c2:	e02c      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137c4:	bf00      	nop
 80137c6:	e02a      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137c8:	bf00      	nop
 80137ca:	e028      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137cc:	bf00      	nop
 80137ce:	e026      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137d0:	bf00      	nop
 80137d2:	e024      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137d4:	bf00      	nop
 80137d6:	e022      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137d8:	bf00      	nop
 80137da:	e020      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137dc:	bf00      	nop
 80137de:	e01e      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137e0:	bf00      	nop
 80137e2:	e01c      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137e4:	bf00      	nop
 80137e6:	e01a      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137e8:	bf00      	nop
 80137ea:	e018      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 80137ec:	bf00      	nop
 80137ee:	e016      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
 80137f0:	08017830 	.word	0x08017830
 80137f4:	080184a0 	.word	0x080184a0
 80137f8:	08017768 	.word	0x08017768
 80137fc:	0801784c 	.word	0x0801784c
 8013800:	08017814 	.word	0x08017814
 8013804:	200004d0 	.word	0x200004d0
 8013808:	200004e4 	.word	0x200004e4
            break;
 801380c:	bf00      	nop
 801380e:	e006      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013810:	bf00      	nop
 8013812:	e004      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013814:	bf00      	nop
 8013816:	e002      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 8013818:	bf00      	nop
 801381a:	e000      	b.n	801381e <Zigbee_CallBackProcessing+0x16de>
            break;
 801381c:	bf00      	nop
    }

    if (info != NULL) {
 801381e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013822:	2b00      	cmp	r3, #0
 8013824:	d003      	beq.n	801382e <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 8013826:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801382a:	f7fd fc42 	bl	80110b2 <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 801382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013832:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8013836:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8013838:	f7fd fada 	bl	8010df0 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 801383c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8013840:	4618      	mov	r0, r3
 8013842:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8013846:	46bd      	mov	sp, r7
 8013848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801384a:	bf00      	nop

0801384c <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 801384c:	b590      	push	{r4, r7, lr}
 801384e:	b089      	sub	sp, #36	@ 0x24
 8013850:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013852:	2300      	movs	r3, #0
 8013854:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8013856:	f000 fe97 	bl	8014588 <ZIGBEE_Get_M0RequestPayloadBuffer>
 801385a:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b09      	cmp	r3, #9
 8013862:	d046      	beq.n	80138f2 <Zigbee_M0RequestProcessing+0xa6>
 8013864:	2b09      	cmp	r3, #9
 8013866:	d864      	bhi.n	8013932 <Zigbee_M0RequestProcessing+0xe6>
 8013868:	2b07      	cmp	r3, #7
 801386a:	d002      	beq.n	8013872 <Zigbee_M0RequestProcessing+0x26>
 801386c:	2b08      	cmp	r3, #8
 801386e:	d01e      	beq.n	80138ae <Zigbee_M0RequestProcessing+0x62>
 8013870:	e05f      	b.n	8013932 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	2b01      	cmp	r3, #1
 8013878:	d006      	beq.n	8013888 <Zigbee_M0RequestProcessing+0x3c>
 801387a:	4b33      	ldr	r3, [pc, #204]	@ (8013948 <Zigbee_M0RequestProcessing+0xfc>)
 801387c:	4a33      	ldr	r2, [pc, #204]	@ (801394c <Zigbee_M0RequestProcessing+0x100>)
 801387e:	f241 018a 	movw	r1, #4234	@ 0x108a
 8013882:	4833      	ldr	r0, [pc, #204]	@ (8013950 <Zigbee_M0RequestProcessing+0x104>)
 8013884:	f001 fcd0 	bl	8015228 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	689b      	ldr	r3, [r3, #8]
 801388c:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 801388e:	4b31      	ldr	r3, [pc, #196]	@ (8013954 <Zigbee_M0RequestProcessing+0x108>)
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d050      	beq.n	8013938 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8013896:	4b2f      	ldr	r3, [pc, #188]	@ (8013954 <Zigbee_M0RequestProcessing+0x108>)
 8013898:	685c      	ldr	r4, [r3, #4]
 801389a:	4b2e      	ldr	r3, [pc, #184]	@ (8013954 <Zigbee_M0RequestProcessing+0x108>)
 801389c:	6818      	ldr	r0, [r3, #0]
 801389e:	4b2e      	ldr	r3, [pc, #184]	@ (8013958 <Zigbee_M0RequestProcessing+0x10c>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	2200      	movs	r2, #0
 80138a8:	2100      	movs	r1, #0
 80138aa:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 80138ac:	e044      	b.n	8013938 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d006      	beq.n	80138c4 <Zigbee_M0RequestProcessing+0x78>
 80138b6:	4b24      	ldr	r3, [pc, #144]	@ (8013948 <Zigbee_M0RequestProcessing+0xfc>)
 80138b8:	4a24      	ldr	r2, [pc, #144]	@ (801394c <Zigbee_M0RequestProcessing+0x100>)
 80138ba:	f241 019a 	movw	r1, #4250	@ 0x109a
 80138be:	4824      	ldr	r0, [pc, #144]	@ (8013950 <Zigbee_M0RequestProcessing+0x104>)
 80138c0:	f001 fcb2 	bl	8015228 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	689b      	ldr	r3, [r3, #8]
 80138c8:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	3304      	adds	r3, #4
 80138ce:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f001 fcc7 	bl	8015264 <malloc>
 80138d6:	4603      	mov	r3, r0
 80138d8:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d004      	beq.n	80138ea <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 80138e0:	6879      	ldr	r1, [r7, #4]
 80138e2:	6938      	ldr	r0, [r7, #16]
 80138e4:	f000 f83c 	bl	8013960 <zb_malloc_track>
 80138e8:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 80138ea:	693a      	ldr	r2, [r7, #16]
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	60da      	str	r2, [r3, #12]
            break;
 80138f0:	e023      	b.n	801393a <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d006      	beq.n	8013908 <Zigbee_M0RequestProcessing+0xbc>
 80138fa:	4b13      	ldr	r3, [pc, #76]	@ (8013948 <Zigbee_M0RequestProcessing+0xfc>)
 80138fc:	4a13      	ldr	r2, [pc, #76]	@ (801394c <Zigbee_M0RequestProcessing+0x100>)
 80138fe:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8013902:	4813      	ldr	r0, [pc, #76]	@ (8013950 <Zigbee_M0RequestProcessing+0x104>)
 8013904:	f001 fc90 	bl	8015228 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	689b      	ldr	r3, [r3, #8]
 801390c:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d106      	bne.n	8013922 <Zigbee_M0RequestProcessing+0xd6>
 8013914:	4b11      	ldr	r3, [pc, #68]	@ (801395c <Zigbee_M0RequestProcessing+0x110>)
 8013916:	4a0d      	ldr	r2, [pc, #52]	@ (801394c <Zigbee_M0RequestProcessing+0x100>)
 8013918:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801391c:	480c      	ldr	r0, [pc, #48]	@ (8013950 <Zigbee_M0RequestProcessing+0x104>)
 801391e:	f001 fc83 	bl	8015228 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8013922:	68b8      	ldr	r0, [r7, #8]
 8013924:	f000 f838 	bl	8013998 <zb_malloc_untrack>
 8013928:	60b8      	str	r0, [r7, #8]
            free(ptr);
 801392a:	68b8      	ldr	r0, [r7, #8]
 801392c:	f001 fca2 	bl	8015274 <free>
            break;
 8013930:	e003      	b.n	801393a <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8013932:	2301      	movs	r3, #1
 8013934:	75fb      	strb	r3, [r7, #23]
            break;
 8013936:	e000      	b.n	801393a <Zigbee_M0RequestProcessing+0xee>
            break;
 8013938:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 801393a:	f7fd fa73 	bl	8010e24 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 801393e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013940:	4618      	mov	r0, r3
 8013942:	371c      	adds	r7, #28
 8013944:	46bd      	mov	sp, r7
 8013946:	bd90      	pop	{r4, r7, pc}
 8013948:	08017868 	.word	0x08017868
 801394c:	080184bc 	.word	0x080184bc
 8013950:	08017768 	.word	0x08017768
 8013954:	200004e4 	.word	0x200004e4
 8013958:	08018270 	.word	0x08018270
 801395c:	08017880 	.word	0x08017880

08013960 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8013960:	b480      	push	{r7}
 8013962:	b085      	sub	sp, #20
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	683a      	ldr	r2, [r7, #0]
 801396e:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	3304      	adds	r3, #4
 8013974:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8013976:	4b07      	ldr	r3, [pc, #28]	@ (8013994 <zb_malloc_track+0x34>)
 8013978:	f8d3 200d 	ldr.w	r2, [r3, #13]
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	4413      	add	r3, r2
 8013980:	4a04      	ldr	r2, [pc, #16]	@ (8013994 <zb_malloc_track+0x34>)
 8013982:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8013986:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8013988:	4618      	mov	r0, r3
 801398a:	3714      	adds	r7, #20
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr
 8013994:	200004e4 	.word	0x200004e4

08013998 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8013998:	b480      	push	{r7}
 801399a:	b085      	sub	sp, #20
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	3b04      	subs	r3, #4
 80139a4:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 80139ac:	4b07      	ldr	r3, [pc, #28]	@ (80139cc <zb_malloc_untrack+0x34>)
 80139ae:	f8d3 200d 	ldr.w	r2, [r3, #13]
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	1ad3      	subs	r3, r2, r3
 80139b6:	4a05      	ldr	r2, [pc, #20]	@ (80139cc <zb_malloc_untrack+0x34>)
 80139b8:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 80139bc:	68fb      	ldr	r3, [r7, #12]
#endif
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3714      	adds	r7, #20
 80139c2:	46bd      	mov	sp, r7
 80139c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop
 80139cc:	200004e4 	.word	0x200004e4

080139d0 <onOff_server_1_off>:
/* USER CODE END PV */
/* Functions Definition ------------------------------------------------------*/

/* OnOff server off 1 command callback */
static enum ZclStatusCodeT onOff_server_1_off(struct ZbZclClusterT *cluster, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 OnOff server 1 off 1 */
	uint8_t endpoint;
	  struct RGB_object_t RGB_zero = {0};
 80139dc:	f107 0310 	add.w	r3, r7, #16
 80139e0:	2200      	movs	r2, #0
 80139e2:	601a      	str	r2, [r3, #0]
 80139e4:	809a      	strh	r2, [r3, #4]
	  //ZbZclAttrIntegerWrite(zigbee_app_info.water_content_client_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, test1--);


	  endpoint = ZbZclClusterGetEndpoint(cluster);
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7f0 f848 	bl	8003a7c <ZbZclClusterGetEndpoint>
 80139ec:	4603      	mov	r3, r0
 80139ee:	75fb      	strb	r3, [r7, #23]
	  if (endpoint == SW1_ENDPOINT)
 80139f0:	7dfb      	ldrb	r3, [r7, #23]
 80139f2:	2b14      	cmp	r3, #20
 80139f4:	d11d      	bne.n	8013a32 <onOff_server_1_off+0x62>
	  {
	    APP_DBG("LED_RED OFF");
 80139f6:	4811      	ldr	r0, [pc, #68]	@ (8013a3c <onOff_server_1_off+0x6c>)
 80139f8:	f7fc fdb8 	bl	801056c <DbgTraceGetFileName>
 80139fc:	4601      	mov	r1, r0
 80139fe:	23b6      	movs	r3, #182	@ 0xb6
 8013a00:	4a0f      	ldr	r2, [pc, #60]	@ (8013a40 <onOff_server_1_off+0x70>)
 8013a02:	4810      	ldr	r0, [pc, #64]	@ (8013a44 <onOff_server_1_off+0x74>)
 8013a04:	f001 fdc0 	bl	8015588 <iprintf>
 8013a08:	4a0f      	ldr	r2, [pc, #60]	@ (8013a48 <onOff_server_1_off+0x78>)
 8013a0a:	2101      	movs	r1, #1
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	f7f6 f95b 	bl	8009cc8 <logApplication>
	    update_RGB(RGB_zero);
 8013a12:	f107 0310 	add.w	r3, r7, #16
 8013a16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013a1a:	f7f6 facd 	bl	8009fb8 <update_RGB>
		(void)ZbZclAttrIntegerWrite(cluster, ZCL_ONOFF_ATTR_ONOFF, 0);
 8013a1e:	f04f 0200 	mov.w	r2, #0
 8013a22:	f04f 0300 	mov.w	r3, #0
 8013a26:	2100      	movs	r1, #0
 8013a28:	68f8      	ldr	r0, [r7, #12]
 8013a2a:	f7ee f81a 	bl	8001a62 <ZbZclAttrIntegerWrite>
	  else
	  {
	    /* Unknown endpoint */
	    return ZCL_STATUS_FAILURE;
	  }
	  return ZCL_STATUS_SUCCESS;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	e000      	b.n	8013a34 <onOff_server_1_off+0x64>
	    return ZCL_STATUS_FAILURE;
 8013a32:	2301      	movs	r3, #1
  /* USER CODE END 0 OnOff server 1 off 1 */
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3718      	adds	r7, #24
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	0801788c 	.word	0x0801788c
 8013a40:	080184d8 	.word	0x080184d8
 8013a44:	080178ac 	.word	0x080178ac
 8013a48:	080178bc 	.word	0x080178bc

08013a4c <onOff_server_1_on>:

/* OnOff server on 1 command callback */
static enum ZclStatusCodeT onOff_server_1_on(struct ZbZclClusterT *cluster, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8013a4c:	b5b0      	push	{r4, r5, r7, lr}
 8013a4e:	b086      	sub	sp, #24
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 1 OnOff server 1 on 1 */
	uint8_t endpoint;

	  endpoint = ZbZclClusterGetEndpoint(cluster);
 8013a58:	68f8      	ldr	r0, [r7, #12]
 8013a5a:	f7f0 f80f 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	75fb      	strb	r3, [r7, #23]
	  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, test++);
 8013a62:	4b1a      	ldr	r3, [pc, #104]	@ (8013acc <onOff_server_1_on+0x80>)
 8013a64:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013a66:	4b1a      	ldr	r3, [pc, #104]	@ (8013ad0 <onOff_server_1_on+0x84>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	1c5a      	adds	r2, r3, #1
 8013a6c:	4918      	ldr	r1, [pc, #96]	@ (8013ad0 <onOff_server_1_on+0x84>)
 8013a6e:	600a      	str	r2, [r1, #0]
 8013a70:	17da      	asrs	r2, r3, #31
 8013a72:	461c      	mov	r4, r3
 8013a74:	4615      	mov	r5, r2
 8013a76:	4622      	mov	r2, r4
 8013a78:	462b      	mov	r3, r5
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	f7ed fff1 	bl	8001a62 <ZbZclAttrIntegerWrite>

	  if (endpoint == SW1_ENDPOINT)
 8013a80:	7dfb      	ldrb	r3, [r7, #23]
 8013a82:	2b14      	cmp	r3, #20
 8013a84:	d11c      	bne.n	8013ac0 <onOff_server_1_on+0x74>
	  {
	    APP_DBG("LED_RED ON");
 8013a86:	4813      	ldr	r0, [pc, #76]	@ (8013ad4 <onOff_server_1_on+0x88>)
 8013a88:	f7fc fd70 	bl	801056c <DbgTraceGetFileName>
 8013a8c:	4601      	mov	r1, r0
 8013a8e:	23ce      	movs	r3, #206	@ 0xce
 8013a90:	4a11      	ldr	r2, [pc, #68]	@ (8013ad8 <onOff_server_1_on+0x8c>)
 8013a92:	4812      	ldr	r0, [pc, #72]	@ (8013adc <onOff_server_1_on+0x90>)
 8013a94:	f001 fd78 	bl	8015588 <iprintf>
 8013a98:	4a11      	ldr	r2, [pc, #68]	@ (8013ae0 <onOff_server_1_on+0x94>)
 8013a9a:	2101      	movs	r1, #1
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	f7f6 f913 	bl	8009cc8 <logApplication>
	    update_RGB(RGB);
 8013aa2:	4b10      	ldr	r3, [pc, #64]	@ (8013ae4 <onOff_server_1_on+0x98>)
 8013aa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013aa8:	f7f6 fa86 	bl	8009fb8 <update_RGB>
	    (void)ZbZclAttrIntegerWrite(cluster, ZCL_ONOFF_ATTR_ONOFF, 1);
 8013aac:	f04f 0201 	mov.w	r2, #1
 8013ab0:	f04f 0300 	mov.w	r3, #0
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f7ed ffd3 	bl	8001a62 <ZbZclAttrIntegerWrite>
	  else
	  {
	    /* Unknown endpoint */
	    return ZCL_STATUS_FAILURE;
	  }
	  return ZCL_STATUS_SUCCESS;
 8013abc:	2300      	movs	r3, #0
 8013abe:	e000      	b.n	8013ac2 <onOff_server_1_on+0x76>
	    return ZCL_STATUS_FAILURE;
 8013ac0:	2301      	movs	r3, #1
  /* USER CODE END 1 OnOff server 1 on 1 */
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3718      	adds	r7, #24
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8013aca:	bf00      	nop
 8013acc:	200006ec 	.word	0x200006ec
 8013ad0:	20000720 	.word	0x20000720
 8013ad4:	0801788c 	.word	0x0801788c
 8013ad8:	080184ec 	.word	0x080184ec
 8013adc:	080178ac 	.word	0x080178ac
 8013ae0:	080178c8 	.word	0x080178c8
 8013ae4:	20000718 	.word	0x20000718

08013ae8 <onOff_server_1_toggle>:

/* OnOff server toggle 1 command callback */
static enum ZclStatusCodeT onOff_server_1_toggle(struct ZbZclClusterT *cluster, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b088      	sub	sp, #32
 8013aec:	af02      	add	r7, sp, #8
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 2 OnOff server 1 toggle 1 */
	uint8_t attrVal;

	  if (ZbZclAttrRead(cluster, ZCL_ONOFF_ATTR_ONOFF, NULL,
 8013af4:	f107 0317 	add.w	r3, r7, #23
 8013af8:	2200      	movs	r2, #0
 8013afa:	9201      	str	r2, [sp, #4]
 8013afc:	2201      	movs	r2, #1
 8013afe:	9200      	str	r2, [sp, #0]
 8013b00:	2200      	movs	r2, #0
 8013b02:	2100      	movs	r1, #0
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f7ec fc6e 	bl	80003e6 <ZbZclAttrRead>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d001      	beq.n	8013b14 <onOff_server_1_toggle+0x2c>
	            &attrVal, sizeof(attrVal), false) != ZCL_STATUS_SUCCESS)
	  {
	    return ZCL_STATUS_FAILURE;
 8013b10:	2301      	movs	r3, #1
 8013b12:	e00f      	b.n	8013b34 <onOff_server_1_toggle+0x4c>
	  }

	  if (attrVal != 0)
 8013b14:	7dfb      	ldrb	r3, [r7, #23]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d006      	beq.n	8013b28 <onOff_server_1_toggle+0x40>
	  {
	    return onOff_server_1_off(cluster, srcInfo, arg);
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	68b9      	ldr	r1, [r7, #8]
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7ff ff56 	bl	80139d0 <onOff_server_1_off>
 8013b24:	4603      	mov	r3, r0
 8013b26:	e005      	b.n	8013b34 <onOff_server_1_toggle+0x4c>
	  }
	  else
	  {
	    return onOff_server_1_on(cluster, srcInfo, arg);
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	68b9      	ldr	r1, [r7, #8]
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f7ff ff8d 	bl	8013a4c <onOff_server_1_on>
 8013b32:	4603      	mov	r3, r0
	  }
  /* USER CODE END 2 OnOff server 1 toggle 1 */
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3718      	adds	r7, #24
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <colorControl_server_1_move_to_color_xy>:

/* ColorControl server move_to_color_xy 1 command callback */
static enum ZclStatusCodeT colorControl_server_1_move_to_color_xy(struct ZbZclClusterT *cluster, struct ZbZclColorClientMoveToColorXYReqT *req, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8013b3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013b40:	b086      	sub	sp, #24
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	60f8      	str	r0, [r7, #12]
 8013b46:	60b9      	str	r1, [r7, #8]
 8013b48:	607a      	str	r2, [r7, #4]
 8013b4a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 3 ColorControl server 1 move_to_color_xy 1 */
	uint8_t endpoint;

	      endpoint = ZbZclClusterGetEndpoint(cluster);
 8013b4c:	68f8      	ldr	r0, [r7, #12]
 8013b4e:	f7ef ff95 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8013b52:	4603      	mov	r3, r0
 8013b54:	75fb      	strb	r3, [r7, #23]
	      if (endpoint == SW1_ENDPOINT)
 8013b56:	7dfb      	ldrb	r3, [r7, #23]
 8013b58:	2b14      	cmp	r3, #20
 8013b5a:	d126      	bne.n	8013baa <colorControl_server_1_move_to_color_xy+0x6e>
	      {
	    	  RGB.color_x = req->color_x;
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	881a      	ldrh	r2, [r3, #0]
 8013b60:	4b15      	ldr	r3, [pc, #84]	@ (8013bb8 <colorControl_server_1_move_to_color_xy+0x7c>)
 8013b62:	801a      	strh	r2, [r3, #0]
	    	  RGB.color_y = req->color_y;
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	885a      	ldrh	r2, [r3, #2]
 8013b68:	4b13      	ldr	r3, [pc, #76]	@ (8013bb8 <colorControl_server_1_move_to_color_xy+0x7c>)
 8013b6a:	805a      	strh	r2, [r3, #2]
	    	  update_RGB(RGB);
 8013b6c:	4b12      	ldr	r3, [pc, #72]	@ (8013bb8 <colorControl_server_1_move_to_color_xy+0x7c>)
 8013b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b72:	f7f6 fa21 	bl	8009fb8 <update_RGB>
	        (void)ZbZclAttrIntegerWrite(cluster, ZCL_COLOR_ATTR_CURRENT_X, req->color_x);
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	881b      	ldrh	r3, [r3, #0]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4698      	mov	r8, r3
 8013b80:	4691      	mov	r9, r2
 8013b82:	4642      	mov	r2, r8
 8013b84:	464b      	mov	r3, r9
 8013b86:	2103      	movs	r1, #3
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f7ed ff6a 	bl	8001a62 <ZbZclAttrIntegerWrite>
	        (void)ZbZclAttrIntegerWrite(cluster, ZCL_COLOR_ATTR_CURRENT_Y, req->color_y);
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	885b      	ldrh	r3, [r3, #2]
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	2200      	movs	r2, #0
 8013b96:	461c      	mov	r4, r3
 8013b98:	4615      	mov	r5, r2
 8013b9a:	4622      	mov	r2, r4
 8013b9c:	462b      	mov	r3, r5
 8013b9e:	2104      	movs	r1, #4
 8013ba0:	68f8      	ldr	r0, [r7, #12]
 8013ba2:	f7ed ff5e 	bl	8001a62 <ZbZclAttrIntegerWrite>
	      else
	      {
	        /* Unknown endpoint */
	        return ZCL_STATUS_FAILURE;
	      }
	      return ZCL_STATUS_SUCCESS;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	e000      	b.n	8013bac <colorControl_server_1_move_to_color_xy+0x70>
	        return ZCL_STATUS_FAILURE;
 8013baa:	2301      	movs	r3, #1
  /* USER CODE END 3 ColorControl server 1 move_to_color_xy 1 */
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3718      	adds	r7, #24
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013bb6:	bf00      	nop
 8013bb8:	20000718 	.word	0x20000718

08013bbc <levelControl_server_1_move_to_level>:

/* LevelControl server move_to_level 1 command callback */
static enum ZclStatusCodeT levelControl_server_1_move_to_level(struct ZbZclClusterT *cluster, struct ZbZclLevelClientMoveToLevelReqT *req, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8013bbc:	b5b0      	push	{r4, r5, r7, lr}
 8013bbe:	b086      	sub	sp, #24
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	60f8      	str	r0, [r7, #12]
 8013bc4:	60b9      	str	r1, [r7, #8]
 8013bc6:	607a      	str	r2, [r7, #4]
 8013bc8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 4 LevelControl server 1 move_to_level 1 */
	uint8_t endpoint;

	  endpoint = ZbZclClusterGetEndpoint(cluster);
 8013bca:	68f8      	ldr	r0, [r7, #12]
 8013bcc:	f7ef ff56 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	75fb      	strb	r3, [r7, #23]
	  if (endpoint == SW1_ENDPOINT)
 8013bd4:	7dfb      	ldrb	r3, [r7, #23]
 8013bd6:	2b14      	cmp	r3, #20
 8013bd8:	d117      	bne.n	8013c0a <levelControl_server_1_move_to_level+0x4e>
	  {
		  RGB.brightness = req->level;
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	785b      	ldrb	r3, [r3, #1]
 8013bde:	461a      	mov	r2, r3
 8013be0:	4b0c      	ldr	r3, [pc, #48]	@ (8013c14 <levelControl_server_1_move_to_level+0x58>)
 8013be2:	809a      	strh	r2, [r3, #4]
	  	  update_RGB(RGB);
 8013be4:	4b0b      	ldr	r3, [pc, #44]	@ (8013c14 <levelControl_server_1_move_to_level+0x58>)
 8013be6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013bea:	f7f6 f9e5 	bl	8009fb8 <update_RGB>
		(void)ZbZclAttrIntegerWrite(cluster, ZCL_LEVEL_ATTR_CURRLEVEL, req->level);
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	785b      	ldrb	r3, [r3, #1]
 8013bf2:	b2db      	uxtb	r3, r3
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	461c      	mov	r4, r3
 8013bf8:	4615      	mov	r5, r2
 8013bfa:	4622      	mov	r2, r4
 8013bfc:	462b      	mov	r3, r5
 8013bfe:	2100      	movs	r1, #0
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f7ed ff2e 	bl	8001a62 <ZbZclAttrIntegerWrite>
	  else
	  {
		/* Unknown endpoint */
		return ZCL_STATUS_FAILURE;
	  }
	  return ZCL_STATUS_SUCCESS;
 8013c06:	2300      	movs	r3, #0
 8013c08:	e000      	b.n	8013c0c <levelControl_server_1_move_to_level+0x50>
		return ZCL_STATUS_FAILURE;
 8013c0a:	2301      	movs	r3, #1
  /* USER CODE END 4 LevelControl server 1 move_to_level 1 */
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3718      	adds	r7, #24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bdb0      	pop	{r4, r5, r7, pc}
 8013c14:	20000718 	.word	0x20000718

08013c18 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 8013c1e:	4817      	ldr	r0, [pc, #92]	@ (8013c7c <APP_ZIGBEE_Init+0x64>)
 8013c20:	f7fc fca4 	bl	801056c <DbgTraceGetFileName>
 8013c24:	4601      	mov	r1, r0
 8013c26:	f240 132b 	movw	r3, #299	@ 0x12b
 8013c2a:	4a15      	ldr	r2, [pc, #84]	@ (8013c80 <APP_ZIGBEE_Init+0x68>)
 8013c2c:	4815      	ldr	r0, [pc, #84]	@ (8013c84 <APP_ZIGBEE_Init+0x6c>)
 8013c2e:	f001 fcab 	bl	8015588 <iprintf>
 8013c32:	4a15      	ldr	r2, [pc, #84]	@ (8013c88 <APP_ZIGBEE_Init+0x70>)
 8013c34:	2101      	movs	r1, #1
 8013c36:	2000      	movs	r0, #0
 8013c38:	f7f6 f846 	bl	8009cc8 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 8013c3c:	f000 fae6 	bl	801420c <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8013c40:	4812      	ldr	r0, [pc, #72]	@ (8013c8c <APP_ZIGBEE_Init+0x74>)
 8013c42:	f000 fc6d 	bl	8014520 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8013c46:	f000 fd27 	bl	8014698 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 8013c4a:	4a11      	ldr	r2, [pc, #68]	@ (8013c90 <APP_ZIGBEE_Init+0x78>)
 8013c4c:	2100      	movs	r1, #0
 8013c4e:	2001      	movs	r0, #1
 8013c50:	f001 f9ec 	bl	801502c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8013c54:	4a0f      	ldr	r2, [pc, #60]	@ (8013c94 <APP_ZIGBEE_Init+0x7c>)
 8013c56:	2100      	movs	r1, #0
 8013c58:	2002      	movs	r0, #2
 8013c5a:	f001 f9e7 	bl	801502c <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 8013c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8013c98 <APP_ZIGBEE_Init+0x80>)
 8013c60:	2100      	movs	r1, #0
 8013c62:	2004      	movs	r0, #4
 8013c64:	f001 f9e2 	bl	801502c <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8013c68:	f7fc fcd0 	bl	801060c <SHCI_C2_ZIGBEE_Init>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 8013c70:	f000 f814 	bl	8013c9c <APP_ZIGBEE_StackLayersInit>

}
 8013c74:	bf00      	nop
 8013c76:	3708      	adds	r7, #8
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	0801788c 	.word	0x0801788c
 8013c80:	08018500 	.word	0x08018500
 8013c84:	080178ac 	.word	0x080178ac
 8013c88:	080178d4 	.word	0x080178d4
 8013c8c:	20030838 	.word	0x20030838
 8013c90:	080146c9 	.word	0x080146c9
 8013c94:	080146e9 	.word	0x080146e9
 8013c98:	08013f85 	.word	0x08013f85

08013c9c <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 8013ca0:	481e      	ldr	r0, [pc, #120]	@ (8013d1c <APP_ZIGBEE_StackLayersInit+0x80>)
 8013ca2:	f7fc fc63 	bl	801056c <DbgTraceGetFileName>
 8013ca6:	4601      	mov	r1, r0
 8013ca8:	f44f 73a9 	mov.w	r3, #338	@ 0x152
 8013cac:	4a1c      	ldr	r2, [pc, #112]	@ (8013d20 <APP_ZIGBEE_StackLayersInit+0x84>)
 8013cae:	481d      	ldr	r0, [pc, #116]	@ (8013d24 <APP_ZIGBEE_StackLayersInit+0x88>)
 8013cb0:	f001 fc6a 	bl	8015588 <iprintf>
 8013cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8013d28 <APP_ZIGBEE_StackLayersInit+0x8c>)
 8013cb6:	2101      	movs	r1, #1
 8013cb8:	2000      	movs	r0, #0
 8013cba:	f7f6 f805 	bl	8009cc8 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f04f 0000 	mov.w	r0, #0
 8013cc6:	f04f 0100 	mov.w	r1, #0
 8013cca:	f7fd fa21 	bl	8011110 <ZbInit>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	4a16      	ldr	r2, [pc, #88]	@ (8013d2c <APP_ZIGBEE_StackLayersInit+0x90>)
 8013cd2:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 8013cd4:	4b15      	ldr	r3, [pc, #84]	@ (8013d2c <APP_ZIGBEE_StackLayersInit+0x90>)
 8013cd6:	685b      	ldr	r3, [r3, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d106      	bne.n	8013cea <APP_ZIGBEE_StackLayersInit+0x4e>
 8013cdc:	4b14      	ldr	r3, [pc, #80]	@ (8013d30 <APP_ZIGBEE_StackLayersInit+0x94>)
 8013cde:	4a15      	ldr	r2, [pc, #84]	@ (8013d34 <APP_ZIGBEE_StackLayersInit+0x98>)
 8013ce0:	f240 1155 	movw	r1, #341	@ 0x155
 8013ce4:	480d      	ldr	r0, [pc, #52]	@ (8013d1c <APP_ZIGBEE_StackLayersInit+0x80>)
 8013ce6:	f001 fa9f 	bl	8015228 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 8013cea:	f000 f825 	bl	8013d38 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  APP_ZIGBEE_ConfigBasicServer();
 8013cee:	f000 fd0b 	bl	8014708 <APP_ZIGBEE_ConfigBasicServer>

  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 8013cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8013d2c <APP_ZIGBEE_StackLayersInit+0x90>)
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8013cf8:	f7f6 fcde 	bl	800a6b8 <HAL_GetTick>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8013d2c <APP_ZIGBEE_StackLayersInit+0x90>)
 8013d00:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeJoin;
 8013d02:	4b0a      	ldr	r3, [pc, #40]	@ (8013d2c <APP_ZIGBEE_StackLayersInit+0x90>)
 8013d04:	2203      	movs	r2, #3
 8013d06:	721a      	strb	r2, [r3, #8]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8013d08:	4b08      	ldr	r3, [pc, #32]	@ (8013d2c <APP_ZIGBEE_StackLayersInit+0x90>)
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8013d0e:	2100      	movs	r1, #0
 8013d10:	2004      	movs	r0, #4
 8013d12:	f001 f9ad 	bl	8015070 <UTIL_SEQ_SetTask>
}
 8013d16:	bf00      	nop
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	0801788c 	.word	0x0801788c
 8013d20:	08018510 	.word	0x08018510
 8013d24:	080178ac 	.word	0x080178ac
 8013d28:	080178e4 	.word	0x080178e4
 8013d2c:	200006ec 	.word	0x200006ec
 8013d30:	08017900 	.word	0x08017900
 8013d34:	0801852c 	.word	0x0801852c

08013d38 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 8013d38:	b5b0      	push	{r4, r5, r7, lr}
 8013d3a:	b0a0      	sub	sp, #128	@ 0x80
 8013d3c:	af04      	add	r7, sp, #16
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 8013d3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8013d42:	2218      	movs	r2, #24
 8013d44:	2100      	movs	r1, #0
 8013d46:	4618      	mov	r0, r3
 8013d48:	f001 fe3a 	bl	80159c0 <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8013d4c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8013d50:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  req.deviceId = ZCL_DEVICE_ONOFF_SWITCH;
 8013d54:	2300      	movs	r3, #0
 8013d56:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  req.endpoint = SW1_ENDPOINT;
 8013d5a:	2314      	movs	r3, #20
 8013d5c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8013d60:	4b7a      	ldr	r3, [pc, #488]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8013d68:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fd ff66 	bl	8011c3e <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8013d72:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d006      	beq.n	8013d88 <APP_ZIGBEE_ConfigEndpoints+0x50>
 8013d7a:	4b75      	ldr	r3, [pc, #468]	@ (8013f50 <APP_ZIGBEE_ConfigEndpoints+0x218>)
 8013d7c:	4a75      	ldr	r2, [pc, #468]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013d7e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8013d82:	4875      	ldr	r0, [pc, #468]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013d84:	f001 fa50 	bl	8015228 <__assert_func>

  /* Basic client/server */
  zigbee_app_info.basic_client_1 = ZbZclBasicClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 8013d88:	4b70      	ldr	r3, [pc, #448]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	2114      	movs	r1, #20
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ef fe28 	bl	80039e4 <ZbZclBasicClientAlloc>
 8013d94:	4603      	mov	r3, r0
 8013d96:	4a6d      	ldr	r2, [pc, #436]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013d98:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.basic_client_1 != NULL);
 8013d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d106      	bne.n	8013db0 <APP_ZIGBEE_ConfigEndpoints+0x78>
 8013da2:	4b6e      	ldr	r3, [pc, #440]	@ (8013f5c <APP_ZIGBEE_ConfigEndpoints+0x224>)
 8013da4:	4a6b      	ldr	r2, [pc, #428]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013da6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8013daa:	486b      	ldr	r0, [pc, #428]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013dac:	f001 fa3c 	bl	8015228 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.basic_client_1);
 8013db0:	4b66      	ldr	r3, [pc, #408]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013db2:	695b      	ldr	r3, [r3, #20]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7fe f878 	bl	8011eaa <ZbZclClusterEndpointRegister>
  /* OnOff server */
  zigbee_app_info.onOff_server_1 = ZbZclOnOffServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &OnOffServerCallbacks_1, NULL);
 8013dba:	4b64      	ldr	r3, [pc, #400]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013dbc:	6858      	ldr	r0, [r3, #4]
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	4a67      	ldr	r2, [pc, #412]	@ (8013f60 <APP_ZIGBEE_ConfigEndpoints+0x228>)
 8013dc2:	2114      	movs	r1, #20
 8013dc4:	f7f2 fea2 	bl	8006b0c <ZbZclOnOffServerAlloc>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	4a60      	ldr	r2, [pc, #384]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013dcc:	6193      	str	r3, [r2, #24]
  assert(zigbee_app_info.onOff_server_1 != NULL);
 8013dce:	4b5f      	ldr	r3, [pc, #380]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d106      	bne.n	8013de4 <APP_ZIGBEE_ConfigEndpoints+0xac>
 8013dd6:	4b63      	ldr	r3, [pc, #396]	@ (8013f64 <APP_ZIGBEE_ConfigEndpoints+0x22c>)
 8013dd8:	4a5e      	ldr	r2, [pc, #376]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013dda:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8013dde:	485e      	ldr	r0, [pc, #376]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013de0:	f001 fa22 	bl	8015228 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.onOff_server_1);
 8013de4:	4b59      	ldr	r3, [pc, #356]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe f85e 	bl	8011eaa <ZbZclClusterEndpointRegister>
  /* ColorControl server */
  struct ZbColorClusterConfig colorServerConfig_1 = {
 8013dee:	4a5e      	ldr	r2, [pc, #376]	@ (8013f68 <APP_ZIGBEE_ConfigEndpoints+0x230>)
 8013df0:	1d3b      	adds	r3, r7, #4
 8013df2:	4611      	mov	r1, r2
 8013df4:	224c      	movs	r2, #76	@ 0x4c
 8013df6:	4618      	mov	r0, r3
 8013df8:	f001 fe93 	bl	8015b22 <memcpy>
 8013dfc:	2308      	movs	r3, #8
 8013dfe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    /* USER CODE BEGIN Color Server Config (endpoint1) */
	.capabilities = ZCL_COLOR_CAP_XY,

    /* USER CODE END Color Server Config (endpoint1) */
  };
  zigbee_app_info.colorControl_server_1 = ZbZclColorServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, zigbee_app_info.onOff_server_1, NULL, 0, &colorServerConfig_1, NULL);
 8013e02:	4b52      	ldr	r3, [pc, #328]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e04:	6858      	ldr	r0, [r3, #4]
 8013e06:	4b51      	ldr	r3, [pc, #324]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e08:	699a      	ldr	r2, [r3, #24]
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	9302      	str	r3, [sp, #8]
 8013e0e:	1d3b      	adds	r3, r7, #4
 8013e10:	9301      	str	r3, [sp, #4]
 8013e12:	2300      	movs	r3, #0
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	2300      	movs	r3, #0
 8013e18:	2114      	movs	r1, #20
 8013e1a:	f7f0 fac3 	bl	80043a4 <ZbZclColorServerAlloc>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	4a4a      	ldr	r2, [pc, #296]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e22:	61d3      	str	r3, [r2, #28]
  assert(zigbee_app_info.colorControl_server_1 != NULL);
 8013e24:	4b49      	ldr	r3, [pc, #292]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e26:	69db      	ldr	r3, [r3, #28]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d106      	bne.n	8013e3a <APP_ZIGBEE_ConfigEndpoints+0x102>
 8013e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8013f6c <APP_ZIGBEE_ConfigEndpoints+0x234>)
 8013e2e:	4a49      	ldr	r2, [pc, #292]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013e30:	f240 1193 	movw	r1, #403	@ 0x193
 8013e34:	4848      	ldr	r0, [pc, #288]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013e36:	f001 f9f7 	bl	8015228 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.colorControl_server_1);
 8013e3a:	4b44      	ldr	r3, [pc, #272]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e3c:	69db      	ldr	r3, [r3, #28]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fe f833 	bl	8011eaa <ZbZclClusterEndpointRegister>
  /* LevelControl server */
  zigbee_app_info.levelControl_server_1 = ZbZclLevelServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, zigbee_app_info.onOff_server_1, &LevelServerCallbacks_1, NULL);
 8013e44:	4b41      	ldr	r3, [pc, #260]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e46:	6858      	ldr	r0, [r3, #4]
 8013e48:	4b40      	ldr	r3, [pc, #256]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e4a:	699a      	ldr	r2, [r3, #24]
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	4b47      	ldr	r3, [pc, #284]	@ (8013f70 <APP_ZIGBEE_ConfigEndpoints+0x238>)
 8013e52:	2114      	movs	r1, #20
 8013e54:	f7f2 fbd4 	bl	8006600 <ZbZclLevelServerAlloc>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e5c:	6213      	str	r3, [r2, #32]
  assert(zigbee_app_info.levelControl_server_1 != NULL);
 8013e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e60:	6a1b      	ldr	r3, [r3, #32]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d106      	bne.n	8013e74 <APP_ZIGBEE_ConfigEndpoints+0x13c>
 8013e66:	4b43      	ldr	r3, [pc, #268]	@ (8013f74 <APP_ZIGBEE_ConfigEndpoints+0x23c>)
 8013e68:	4a3a      	ldr	r2, [pc, #232]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013e6a:	f240 1197 	movw	r1, #407	@ 0x197
 8013e6e:	483a      	ldr	r0, [pc, #232]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013e70:	f001 f9da 	bl	8015228 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.levelControl_server_1);
 8013e74:	4b35      	ldr	r3, [pc, #212]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e76:	6a1b      	ldr	r3, [r3, #32]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7fe f816 	bl	8011eaa <ZbZclClusterEndpointRegister>
  /* Endpoint: SW2_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8013e7e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8013e82:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  req.deviceId = ZCL_DEVICE_SIMPLE_SENSOR;
 8013e86:	230c      	movs	r3, #12
 8013e88:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  req.endpoint = SW2_ENDPOINT;
 8013e8c:	2315      	movs	r3, #21
 8013e8e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8013e92:	4b2e      	ldr	r3, [pc, #184]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8013e9a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fd fecd 	bl	8011c3e <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8013ea4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d006      	beq.n	8013eba <APP_ZIGBEE_ConfigEndpoints+0x182>
 8013eac:	4b28      	ldr	r3, [pc, #160]	@ (8013f50 <APP_ZIGBEE_ConfigEndpoints+0x218>)
 8013eae:	4a29      	ldr	r2, [pc, #164]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013eb0:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8013eb4:	4828      	ldr	r0, [pc, #160]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013eb6:	f001 f9b7 	bl	8015228 <__assert_func>

  /* Basic client/server */
  zigbee_app_info.basic_client_2 = ZbZclBasicClientAlloc(zigbee_app_info.zb, SW2_ENDPOINT);
 8013eba:	4b24      	ldr	r3, [pc, #144]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	2115      	movs	r1, #21
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7ef fd8f 	bl	80039e4 <ZbZclBasicClientAlloc>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	4a20      	ldr	r2, [pc, #128]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013eca:	6253      	str	r3, [r2, #36]	@ 0x24
  assert(zigbee_app_info.basic_client_2 != NULL);
 8013ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d106      	bne.n	8013ee2 <APP_ZIGBEE_ConfigEndpoints+0x1aa>
 8013ed4:	4b28      	ldr	r3, [pc, #160]	@ (8013f78 <APP_ZIGBEE_ConfigEndpoints+0x240>)
 8013ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013ed8:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8013edc:	481e      	ldr	r0, [pc, #120]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013ede:	f001 f9a3 	bl	8015228 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.basic_client_2);
 8013ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fd ffdf 	bl	8011eaa <ZbZclClusterEndpointRegister>
  /* Water content server */
  zigbee_app_info.water_content_server_2 = ZbZclWaterContentMeasServerAlloc(zigbee_app_info.zb, SW2_ENDPOINT, ZCL_CLUSTER_MEAS_HUMIDITY, HUMIDITY_MIN_2, HUMIDITY_MAX_2);
 8013eec:	4b17      	ldr	r3, [pc, #92]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013eee:	6858      	ldr	r0, [r3, #4]
 8013ef0:	2364      	movs	r3, #100	@ 0x64
 8013ef2:	9300      	str	r3, [sp, #0]
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	f240 4205 	movw	r2, #1029	@ 0x405
 8013efa:	2115      	movs	r1, #21
 8013efc:	f7f2 ff4a 	bl	8006d94 <ZbZclWaterContentMeasServerAlloc>
 8013f00:	4603      	mov	r3, r0
 8013f02:	4a12      	ldr	r2, [pc, #72]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013f04:	6293      	str	r3, [r2, #40]	@ 0x28
  assert(zigbee_app_info.water_content_server_2 != NULL);
 8013f06:	4b11      	ldr	r3, [pc, #68]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d106      	bne.n	8013f1c <APP_ZIGBEE_ConfigEndpoints+0x1e4>
 8013f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8013f7c <APP_ZIGBEE_ConfigEndpoints+0x244>)
 8013f10:	4a10      	ldr	r2, [pc, #64]	@ (8013f54 <APP_ZIGBEE_ConfigEndpoints+0x21c>)
 8013f12:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8013f16:	4810      	ldr	r0, [pc, #64]	@ (8013f58 <APP_ZIGBEE_ConfigEndpoints+0x220>)
 8013f18:	f001 f986 	bl	8015228 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.water_content_server_2);
 8013f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fd ffc2 	bl	8011eaa <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, test++);
 8013f26:	4b09      	ldr	r3, [pc, #36]	@ (8013f4c <APP_ZIGBEE_ConfigEndpoints+0x214>)
 8013f28:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013f2a:	4b15      	ldr	r3, [pc, #84]	@ (8013f80 <APP_ZIGBEE_ConfigEndpoints+0x248>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	1c5a      	adds	r2, r3, #1
 8013f30:	4913      	ldr	r1, [pc, #76]	@ (8013f80 <APP_ZIGBEE_ConfigEndpoints+0x248>)
 8013f32:	600a      	str	r2, [r1, #0]
 8013f34:	17da      	asrs	r2, r3, #31
 8013f36:	461c      	mov	r4, r3
 8013f38:	4615      	mov	r5, r2
 8013f3a:	4622      	mov	r2, r4
 8013f3c:	462b      	mov	r3, r5
 8013f3e:	2100      	movs	r1, #0
 8013f40:	f7ed fd8f 	bl	8001a62 <ZbZclAttrIntegerWrite>

  /* USER CODE END CONFIG_ENDPOINT */
}
 8013f44:	bf00      	nop
 8013f46:	3770      	adds	r7, #112	@ 0x70
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8013f4c:	200006ec 	.word	0x200006ec
 8013f50:	0801791c 	.word	0x0801791c
 8013f54:	08018548 	.word	0x08018548
 8013f58:	0801788c 	.word	0x0801788c
 8013f5c:	08017940 	.word	0x08017940
 8013f60:	20000018 	.word	0x20000018
 8013f64:	08017968 	.word	0x08017968
 8013f68:	20000024 	.word	0x20000024
 8013f6c:	08017990 	.word	0x08017990
 8013f70:	20000070 	.word	0x20000070
 8013f74:	080179c0 	.word	0x080179c0
 8013f78:	080179f0 	.word	0x080179f0
 8013f7c:	08017a18 	.word	0x08017a18
 8013f80:	20000720 	.word	0x20000720

08013f84 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 8013f84:	b590      	push	{r4, r7, lr}
 8013f86:	b0f9      	sub	sp, #484	@ 0x1e4
 8013f88:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 8013f8a:	4b56      	ldr	r3, [pc, #344]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8013f8c:	7a5b      	ldrb	r3, [r3, #9]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	f000 809b 	beq.w	80140ca <APP_ZIGBEE_NwkForm+0x146>
 8013f94:	f7f6 fb90 	bl	800a6b8 <HAL_GetTick>
 8013f98:	4602      	mov	r2, r0
 8013f9a:	4b52      	ldr	r3, [pc, #328]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	f0c0 8093 	bcc.w	80140ca <APP_ZIGBEE_NwkForm+0x146>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 8013fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	2200      	movs	r2, #0
 8013faa:	211f      	movs	r1, #31
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7fd f903 	bl	80111b8 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 8013fb2:	463b      	mov	r3, r7
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fd f99d 	bl	80112f4 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_ROUTER");
 8013fba:	484b      	ldr	r0, [pc, #300]	@ (80140e8 <APP_ZIGBEE_NwkForm+0x164>)
 8013fbc:	f7fc fad6 	bl	801056c <DbgTraceGetFileName>
 8013fc0:	4601      	mov	r1, r0
 8013fc2:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8013fc6:	4a49      	ldr	r2, [pc, #292]	@ (80140ec <APP_ZIGBEE_NwkForm+0x168>)
 8013fc8:	4849      	ldr	r0, [pc, #292]	@ (80140f0 <APP_ZIGBEE_NwkForm+0x16c>)
 8013fca:	f001 fadd 	bl	8015588 <iprintf>
 8013fce:	4a49      	ldr	r2, [pc, #292]	@ (80140f4 <APP_ZIGBEE_NwkForm+0x170>)
 8013fd0:	2101      	movs	r1, #1
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	f7f5 fe78 	bl	8009cc8 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 8013fd8:	4b42      	ldr	r3, [pc, #264]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8013fda:	7a1a      	ldrb	r2, [r3, #8]
 8013fdc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8013fe0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8013fe4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 8013fe8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8013fec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8013ff0:	4a41      	ldr	r2, [pc, #260]	@ (80140f8 <APP_ZIGBEE_NwkForm+0x174>)
 8013ff2:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	6818      	ldr	r0, [r3, #0]
 8013ffa:	6859      	ldr	r1, [r3, #4]
 8013ffc:	689a      	ldr	r2, [r3, #8]
 8013ffe:	68db      	ldr	r3, [r3, #12]
 8014000:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 8014002:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014006:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801400a:	2201      	movs	r2, #1
 801400c:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 801400e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014012:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8014016:	2200      	movs	r2, #0
 8014018:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 801401a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801401e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8014022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014026:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 8014028:	4b2e      	ldr	r3, [pc, #184]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	463a      	mov	r2, r7
 801402e:	4611      	mov	r1, r2
 8014030:	4618      	mov	r0, r3
 8014032:	f000 f87f 	bl	8014134 <ZbStartupWait>
 8014036:	4603      	mov	r3, r0
 8014038:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 801403c:	482a      	ldr	r0, [pc, #168]	@ (80140e8 <APP_ZIGBEE_NwkForm+0x164>)
 801403e:	f7fc fa95 	bl	801056c <DbgTraceGetFileName>
 8014042:	4601      	mov	r1, r0
 8014044:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8014048:	4a28      	ldr	r2, [pc, #160]	@ (80140ec <APP_ZIGBEE_NwkForm+0x168>)
 801404a:	4829      	ldr	r0, [pc, #164]	@ (80140f0 <APP_ZIGBEE_NwkForm+0x16c>)
 801404c:	f001 fa9c 	bl	8015588 <iprintf>
 8014050:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8014054:	4a29      	ldr	r2, [pc, #164]	@ (80140fc <APP_ZIGBEE_NwkForm+0x178>)
 8014056:	2101      	movs	r1, #1
 8014058:	2000      	movs	r0, #0
 801405a:	f7f5 fe35 	bl	8009cc8 <logApplication>
    zigbee_app_info.join_status = status;
 801405e:	4a21      	ldr	r2, [pc, #132]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8014060:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8014064:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 8014066:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 801406a:	2b00      	cmp	r3, #0
 801406c:	d115      	bne.n	801409a <APP_ZIGBEE_NwkForm+0x116>
    {
      zigbee_app_info.join_delay = 0U;
 801406e:	4b1d      	ldr	r3, [pc, #116]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8014070:	2200      	movs	r2, #0
 8014072:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 8014074:	4b1b      	ldr	r3, [pc, #108]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 8014076:	2201      	movs	r2, #1
 8014078:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 801407a:	481b      	ldr	r0, [pc, #108]	@ (80140e8 <APP_ZIGBEE_NwkForm+0x164>)
 801407c:	f7fc fa76 	bl	801056c <DbgTraceGetFileName>
 8014080:	4601      	mov	r1, r0
 8014082:	f44f 73eb 	mov.w	r3, #470	@ 0x1d6
 8014086:	4a19      	ldr	r2, [pc, #100]	@ (80140ec <APP_ZIGBEE_NwkForm+0x168>)
 8014088:	4819      	ldr	r0, [pc, #100]	@ (80140f0 <APP_ZIGBEE_NwkForm+0x16c>)
 801408a:	f001 fa7d 	bl	8015588 <iprintf>
 801408e:	4a1c      	ldr	r2, [pc, #112]	@ (8014100 <APP_ZIGBEE_NwkForm+0x17c>)
 8014090:	2101      	movs	r1, #1
 8014092:	2000      	movs	r0, #0
 8014094:	f7f5 fe18 	bl	8009cc8 <logApplication>
 8014098:	e017      	b.n	80140ca <APP_ZIGBEE_NwkForm+0x146>

      /* USER CODE END 5 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 801409a:	4813      	ldr	r0, [pc, #76]	@ (80140e8 <APP_ZIGBEE_NwkForm+0x164>)
 801409c:	f7fc fa66 	bl	801056c <DbgTraceGetFileName>
 80140a0:	4601      	mov	r1, r0
 80140a2:	f240 13dd 	movw	r3, #477	@ 0x1dd
 80140a6:	4a11      	ldr	r2, [pc, #68]	@ (80140ec <APP_ZIGBEE_NwkForm+0x168>)
 80140a8:	4811      	ldr	r0, [pc, #68]	@ (80140f0 <APP_ZIGBEE_NwkForm+0x16c>)
 80140aa:	f001 fa6d 	bl	8015588 <iprintf>
 80140ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80140b2:	4a14      	ldr	r2, [pc, #80]	@ (8014104 <APP_ZIGBEE_NwkForm+0x180>)
 80140b4:	2101      	movs	r1, #1
 80140b6:	2000      	movs	r0, #0
 80140b8:	f7f5 fe06 	bl	8009cc8 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 80140bc:	f7f6 fafc 	bl	800a6b8 <HAL_GetTick>
 80140c0:	4603      	mov	r3, r0
 80140c2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80140c6:	4a07      	ldr	r2, [pc, #28]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 80140c8:	60d3      	str	r3, [r2, #12]
      /* USER CODE END 6 */
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 80140ca:	4b06      	ldr	r3, [pc, #24]	@ (80140e4 <APP_ZIGBEE_NwkForm+0x160>)
 80140cc:	7a5b      	ldrb	r3, [r3, #9]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d003      	beq.n	80140da <APP_ZIGBEE_NwkForm+0x156>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 80140d2:	2100      	movs	r1, #0
 80140d4:	2004      	movs	r0, #4
 80140d6:	f000 ffcb 	bl	8015070 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN NW_FORM */
  /* USER CODE END NW_FORM */
}
 80140da:	bf00      	nop
 80140dc:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd90      	pop	{r4, r7, pc}
 80140e4:	200006ec 	.word	0x200006ec
 80140e8:	0801788c 	.word	0x0801788c
 80140ec:	08018564 	.word	0x08018564
 80140f0:	080178ac 	.word	0x080178ac
 80140f4:	08017a48 	.word	0x08017a48
 80140f8:	0801824c 	.word	0x0801824c
 80140fc:	08017a78 	.word	0x08017a78
 8014100:	08017aa0 	.word	0x08017aa0
 8014104:	08017ab0 	.word	0x08017ab0

08014108 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	4603      	mov	r3, r0
 8014110:	6039      	str	r1, [r7, #0]
 8014112:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	60fb      	str	r3, [r7, #12]

  info->status = status;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	79fa      	ldrb	r2, [r7, #7]
 801411c:	705a      	strb	r2, [r3, #1]
  info->active = false;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2200      	movs	r2, #0
 8014122:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8014124:	2008      	movs	r0, #8
 8014126:	f000 ffcf 	bl	80150c8 <UTIL_SEQ_SetEvt>
}
 801412a:	bf00      	nop
 801412c:	3710      	adds	r7, #16
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
	...

08014134 <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b084      	sub	sp, #16
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 801413e:	2002      	movs	r0, #2
 8014140:	f001 f890 	bl	8015264 <malloc>
 8014144:	4603      	mov	r3, r0
 8014146:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d101      	bne.n	8014152 <ZbStartupWait+0x1e>
  {
    return ZB_STATUS_ALLOC_FAIL;
 801414e:	2370      	movs	r3, #112	@ 0x70
 8014150:	e021      	b.n	8014196 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 8014152:	2202      	movs	r2, #2
 8014154:	2100      	movs	r1, #0
 8014156:	68f8      	ldr	r0, [r7, #12]
 8014158:	f001 fc32 	bl	80159c0 <memset>

  info->active = true;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2201      	movs	r2, #1
 8014160:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	4a0e      	ldr	r2, [pc, #56]	@ (80141a0 <ZbStartupWait+0x6c>)
 8014166:	6839      	ldr	r1, [r7, #0]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7fd f8ed 	bl	8011348 <ZbStartup>
 801416e:	4603      	mov	r3, r0
 8014170:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 8014172:	7afb      	ldrb	r3, [r7, #11]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d004      	beq.n	8014182 <ZbStartupWait+0x4e>
  {
    free(info);
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f001 f87b 	bl	8015274 <free>
    return status;
 801417e:	7afb      	ldrb	r3, [r7, #11]
 8014180:	e009      	b.n	8014196 <ZbStartupWait+0x62>
  }

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8014182:	2008      	movs	r0, #8
 8014184:	f000 ffc0 	bl	8015108 <UTIL_SEQ_WaitEvt>
  status = info->status;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	785b      	ldrb	r3, [r3, #1]
 801418c:	72fb      	strb	r3, [r7, #11]
  free(info);
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f001 f870 	bl	8015274 <free>
  return status;
 8014194:	7afb      	ldrb	r3, [r7, #11]
}
 8014196:	4618      	mov	r0, r3
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	08014109 	.word	0x08014109

080141a4 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 80141ae:	2100      	movs	r1, #0
 80141b0:	4803      	ldr	r0, [pc, #12]	@ (80141c0 <APP_ZIGBEE_Error+0x1c>)
 80141b2:	f000 f807 	bl	80141c4 <APP_ZIGBEE_TraceError>
      break;
 80141b6:	bf00      	nop
  }
}
 80141b8:	bf00      	nop
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	08017af0 	.word	0x08017af0

080141c4 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b084      	sub	sp, #16
 80141c8:	af02      	add	r7, sp, #8
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 80141ce:	480b      	ldr	r0, [pc, #44]	@ (80141fc <APP_ZIGBEE_TraceError+0x38>)
 80141d0:	f7fc f9cc 	bl	801056c <DbgTraceGetFileName>
 80141d4:	4601      	mov	r1, r0
 80141d6:	f240 2339 	movw	r3, #569	@ 0x239
 80141da:	4a09      	ldr	r2, [pc, #36]	@ (8014200 <APP_ZIGBEE_TraceError+0x3c>)
 80141dc:	4809      	ldr	r0, [pc, #36]	@ (8014204 <APP_ZIGBEE_TraceError+0x40>)
 80141de:	f001 f9d3 	bl	8015588 <iprintf>
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	9300      	str	r3, [sp, #0]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4a07      	ldr	r2, [pc, #28]	@ (8014208 <APP_ZIGBEE_TraceError+0x44>)
 80141ea:	2101      	movs	r1, #1
 80141ec:	2000      	movs	r0, #0
 80141ee:	f7f5 fd6b 	bl	8009cc8 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  /* USER CODE END TRACE_ERROR */

}
 80141f2:	bf00      	nop
 80141f4:	3708      	adds	r7, #8
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	0801788c 	.word	0x0801788c
 8014200:	08018578 	.word	0x08018578
 8014204:	080178ac 	.word	0x080178ac
 8014208:	08017b00 	.word	0x08017b00

0801420c <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b098      	sub	sp, #96	@ 0x60
 8014210:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8014212:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014216:	653b      	str	r3, [r7, #80]	@ 0x50

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8014218:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801421a:	f7fc fa0b 	bl	8010634 <SHCI_GetWirelessFwInfo>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d004      	beq.n	801422e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014224:	2101      	movs	r1, #1
 8014226:	2001      	movs	r0, #1
 8014228:	f7ff ffbc 	bl	80141a4 <APP_ZIGBEE_Error>
    APP_DBG("levelControl Server on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("basic Client on Endpoint %d", SW2_ENDPOINT);
    APP_DBG("water_content Server on Endpoint %d", SW2_ENDPOINT);
    APP_DBG("**********************************************************");
  }
}
 801422c:	e14b      	b.n	80144c6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2ba>
    APP_DBG("**********************************************************");
 801422e:	48a8      	ldr	r0, [pc, #672]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 8014230:	f7fc f99c 	bl	801056c <DbgTraceGetFileName>
 8014234:	4601      	mov	r1, r0
 8014236:	f44f 7314 	mov.w	r3, #592	@ 0x250
 801423a:	4aa6      	ldr	r2, [pc, #664]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 801423c:	48a6      	ldr	r0, [pc, #664]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 801423e:	f001 f9a3 	bl	8015588 <iprintf>
 8014242:	4aa6      	ldr	r2, [pc, #664]	@ (80144dc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2d0>)
 8014244:	2101      	movs	r1, #1
 8014246:	2000      	movs	r0, #0
 8014248:	f7f5 fd3e 	bl	8009cc8 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801424c:	48a0      	ldr	r0, [pc, #640]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801424e:	f7fc f98d 	bl	801056c <DbgTraceGetFileName>
 8014252:	4601      	mov	r1, r0
 8014254:	f240 2351 	movw	r3, #593	@ 0x251
 8014258:	4a9e      	ldr	r2, [pc, #632]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 801425a:	489f      	ldr	r0, [pc, #636]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 801425c:	f001 f994 	bl	8015588 <iprintf>
 8014260:	4a9f      	ldr	r2, [pc, #636]	@ (80144e0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2d4>)
 8014262:	2101      	movs	r1, #1
 8014264:	2000      	movs	r0, #0
 8014266:	f7f5 fd2f 	bl	8009cc8 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 801426a:	4899      	ldr	r0, [pc, #612]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801426c:	f7fc f97e 	bl	801056c <DbgTraceGetFileName>
 8014270:	4601      	mov	r1, r0
 8014272:	f240 2353 	movw	r3, #595	@ 0x253
 8014276:	4a97      	ldr	r2, [pc, #604]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014278:	4897      	ldr	r0, [pc, #604]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 801427a:	f001 f985 	bl	8015588 <iprintf>
 801427e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	4619      	mov	r1, r3
 8014284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014286:	785b      	ldrb	r3, [r3, #1]
 8014288:	461a      	mov	r2, r3
 801428a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801428c:	789b      	ldrb	r3, [r3, #2]
 801428e:	9301      	str	r3, [sp, #4]
 8014290:	9200      	str	r2, [sp, #0]
 8014292:	460b      	mov	r3, r1
 8014294:	4a93      	ldr	r2, [pc, #588]	@ (80144e4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2d8>)
 8014296:	2101      	movs	r1, #1
 8014298:	2000      	movs	r0, #0
 801429a:	f7f5 fd15 	bl	8009cc8 <logApplication>
    switch (p_wireless_info->StackType)
 801429e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a0:	7a5b      	ldrb	r3, [r3, #9]
 80142a2:	2b30      	cmp	r3, #48	@ 0x30
 80142a4:	d002      	beq.n	80142ac <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xa0>
 80142a6:	2b31      	cmp	r3, #49	@ 0x31
 80142a8:	d010      	beq.n	80142cc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xc0>
 80142aa:	e01f      	b.n	80142ec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xe0>
        APP_DBG("FW Type : FFD Zigbee stack");
 80142ac:	4888      	ldr	r0, [pc, #544]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80142ae:	f7fc f95d 	bl	801056c <DbgTraceGetFileName>
 80142b2:	4601      	mov	r1, r0
 80142b4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80142b8:	4a86      	ldr	r2, [pc, #536]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 80142ba:	4887      	ldr	r0, [pc, #540]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 80142bc:	f001 f964 	bl	8015588 <iprintf>
 80142c0:	4a89      	ldr	r2, [pc, #548]	@ (80144e8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2dc>)
 80142c2:	2101      	movs	r1, #1
 80142c4:	2000      	movs	r0, #0
 80142c6:	f7f5 fcff 	bl	8009cc8 <logApplication>
        break;
 80142ca:	e014      	b.n	80142f6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xea>
        APP_DBG("FW Type : RFD Zigbee stack");
 80142cc:	4880      	ldr	r0, [pc, #512]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80142ce:	f7fc f94d 	bl	801056c <DbgTraceGetFileName>
 80142d2:	4601      	mov	r1, r0
 80142d4:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 80142d8:	4a7e      	ldr	r2, [pc, #504]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 80142da:	487f      	ldr	r0, [pc, #508]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 80142dc:	f001 f954 	bl	8015588 <iprintf>
 80142e0:	4a82      	ldr	r2, [pc, #520]	@ (80144ec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2e0>)
 80142e2:	2101      	movs	r1, #1
 80142e4:	2000      	movs	r0, #0
 80142e6:	f7f5 fcef 	bl	8009cc8 <logApplication>
        break;
 80142ea:	e004      	b.n	80142f6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xea>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80142ec:	2101      	movs	r1, #1
 80142ee:	2001      	movs	r0, #1
 80142f0:	f7ff ff58 	bl	80141a4 <APP_ZIGBEE_Error>
        break;
 80142f4:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 80142f6:	4b76      	ldr	r3, [pc, #472]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80142f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *pdel = NULL;
 80142fa:	2300      	movs	r3, #0
 80142fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      pdel = strchr(__PathProject__, '/');
 80142fe:	212f      	movs	r1, #47	@ 0x2f
 8014300:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8014302:	f001 fb65 	bl	80159d0 <strchr>
 8014306:	64b8      	str	r0, [r7, #72]	@ 0x48
    int index = (int)(pdel - __PathProject__);
 8014308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801430a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801430c:	1ad3      	subs	r3, r2, r3
 801430e:	647b      	str	r3, [r7, #68]	@ 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 8014310:	486f      	ldr	r0, [pc, #444]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 8014312:	f7fc f92b 	bl	801056c <DbgTraceGetFileName>
 8014316:	4601      	mov	r1, r0
 8014318:	f240 2372 	movw	r3, #626	@ 0x272
 801431c:	4a6d      	ldr	r2, [pc, #436]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 801431e:	486e      	ldr	r0, [pc, #440]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014320:	f001 f932 	bl	8015588 <iprintf>
 8014324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014326:	9301      	str	r3, [sp, #4]
 8014328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801432e:	4a70      	ldr	r2, [pc, #448]	@ (80144f0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2e4>)
 8014330:	2101      	movs	r1, #1
 8014332:	2000      	movs	r0, #0
 8014334:	f7f5 fcc8 	bl	8009cc8 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 8014338:	4865      	ldr	r0, [pc, #404]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801433a:	f7fc f917 	bl	801056c <DbgTraceGetFileName>
 801433e:	4601      	mov	r1, r0
 8014340:	f240 2375 	movw	r3, #629	@ 0x275
 8014344:	4a63      	ldr	r2, [pc, #396]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014346:	4864      	ldr	r0, [pc, #400]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014348:	f001 f91e 	bl	8015588 <iprintf>
 801434c:	230b      	movs	r3, #11
 801434e:	4a69      	ldr	r2, [pc, #420]	@ (80144f4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2e8>)
 8014350:	2101      	movs	r1, #1
 8014352:	2000      	movs	r0, #0
 8014354:	f7f5 fcb8 	bl	8009cc8 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 8014358:	485d      	ldr	r0, [pc, #372]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801435a:	f7fc f907 	bl	801056c <DbgTraceGetFileName>
 801435e:	4601      	mov	r1, r0
 8014360:	f240 2377 	movw	r3, #631	@ 0x277
 8014364:	4a5b      	ldr	r2, [pc, #364]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014366:	485c      	ldr	r0, [pc, #368]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014368:	f001 f90e 	bl	8015588 <iprintf>
 801436c:	4b62      	ldr	r3, [pc, #392]	@ (80144f8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2ec>)
 801436e:	4a63      	ldr	r2, [pc, #396]	@ (80144fc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2f0>)
 8014370:	2101      	movs	r1, #1
 8014372:	2000      	movs	r0, #0
 8014374:	f7f5 fca8 	bl	8009cc8 <logApplication>
    Z09_LL_string[0] = 0;
 8014378:	2300      	movs	r3, #0
 801437a:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 801437c:	2300      	movs	r3, #0
 801437e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014380:	e010      	b.n	80143a4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x198>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 8014382:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014384:	4613      	mov	r3, r2
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	4413      	add	r3, r2
 801438a:	463a      	mov	r2, r7
 801438c:	18d0      	adds	r0, r2, r3
 801438e:	4a5a      	ldr	r2, [pc, #360]	@ (80144f8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2ec>)
 8014390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014392:	4413      	add	r3, r2
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	461a      	mov	r2, r3
 8014398:	4959      	ldr	r1, [pc, #356]	@ (8014500 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2f4>)
 801439a:	f001 fa19 	bl	80157d0 <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 801439e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143a0:	3301      	adds	r3, #1
 80143a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80143a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143a6:	2b0f      	cmp	r3, #15
 80143a8:	d9eb      	bls.n	8014382 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x176>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 80143aa:	4849      	ldr	r0, [pc, #292]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80143ac:	f7fc f8de 	bl	801056c <DbgTraceGetFileName>
 80143b0:	4601      	mov	r1, r0
 80143b2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80143b6:	4a47      	ldr	r2, [pc, #284]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 80143b8:	4847      	ldr	r0, [pc, #284]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 80143ba:	f001 f8e5 	bl	8015588 <iprintf>
 80143be:	463b      	mov	r3, r7
 80143c0:	4a50      	ldr	r2, [pc, #320]	@ (8014504 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2f8>)
 80143c2:	2101      	movs	r1, #1
 80143c4:	2000      	movs	r0, #0
 80143c6:	f7f5 fc7f 	bl	8009cc8 <logApplication>
    APP_DBG("Clusters allocated are:");
 80143ca:	4841      	ldr	r0, [pc, #260]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80143cc:	f7fc f8ce 	bl	801056c <DbgTraceGetFileName>
 80143d0:	4601      	mov	r1, r0
 80143d2:	f240 2382 	movw	r3, #642	@ 0x282
 80143d6:	4a3f      	ldr	r2, [pc, #252]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 80143d8:	483f      	ldr	r0, [pc, #252]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 80143da:	f001 f8d5 	bl	8015588 <iprintf>
 80143de:	4a4a      	ldr	r2, [pc, #296]	@ (8014508 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2fc>)
 80143e0:	2101      	movs	r1, #1
 80143e2:	2000      	movs	r0, #0
 80143e4:	f7f5 fc70 	bl	8009cc8 <logApplication>
    APP_DBG("basic Client on Endpoint %d", SW1_ENDPOINT);
 80143e8:	4839      	ldr	r0, [pc, #228]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80143ea:	f7fc f8bf 	bl	801056c <DbgTraceGetFileName>
 80143ee:	4601      	mov	r1, r0
 80143f0:	f240 2383 	movw	r3, #643	@ 0x283
 80143f4:	4a37      	ldr	r2, [pc, #220]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 80143f6:	4838      	ldr	r0, [pc, #224]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 80143f8:	f001 f8c6 	bl	8015588 <iprintf>
 80143fc:	2314      	movs	r3, #20
 80143fe:	4a43      	ldr	r2, [pc, #268]	@ (801450c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x300>)
 8014400:	2101      	movs	r1, #1
 8014402:	2000      	movs	r0, #0
 8014404:	f7f5 fc60 	bl	8009cc8 <logApplication>
    APP_DBG("onOff Server on Endpoint %d", SW1_ENDPOINT);
 8014408:	4831      	ldr	r0, [pc, #196]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801440a:	f7fc f8af 	bl	801056c <DbgTraceGetFileName>
 801440e:	4601      	mov	r1, r0
 8014410:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8014414:	4a2f      	ldr	r2, [pc, #188]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014416:	4830      	ldr	r0, [pc, #192]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014418:	f001 f8b6 	bl	8015588 <iprintf>
 801441c:	2314      	movs	r3, #20
 801441e:	4a3c      	ldr	r2, [pc, #240]	@ (8014510 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x304>)
 8014420:	2101      	movs	r1, #1
 8014422:	2000      	movs	r0, #0
 8014424:	f7f5 fc50 	bl	8009cc8 <logApplication>
    APP_DBG("colorControl Server on Endpoint %d", SW1_ENDPOINT);
 8014428:	4829      	ldr	r0, [pc, #164]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801442a:	f7fc f89f 	bl	801056c <DbgTraceGetFileName>
 801442e:	4601      	mov	r1, r0
 8014430:	f240 2385 	movw	r3, #645	@ 0x285
 8014434:	4a27      	ldr	r2, [pc, #156]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014436:	4828      	ldr	r0, [pc, #160]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014438:	f001 f8a6 	bl	8015588 <iprintf>
 801443c:	2314      	movs	r3, #20
 801443e:	4a35      	ldr	r2, [pc, #212]	@ (8014514 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x308>)
 8014440:	2101      	movs	r1, #1
 8014442:	2000      	movs	r0, #0
 8014444:	f7f5 fc40 	bl	8009cc8 <logApplication>
    APP_DBG("levelControl Server on Endpoint %d", SW1_ENDPOINT);
 8014448:	4821      	ldr	r0, [pc, #132]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801444a:	f7fc f88f 	bl	801056c <DbgTraceGetFileName>
 801444e:	4601      	mov	r1, r0
 8014450:	f240 2386 	movw	r3, #646	@ 0x286
 8014454:	4a1f      	ldr	r2, [pc, #124]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014456:	4820      	ldr	r0, [pc, #128]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014458:	f001 f896 	bl	8015588 <iprintf>
 801445c:	2314      	movs	r3, #20
 801445e:	4a2e      	ldr	r2, [pc, #184]	@ (8014518 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x30c>)
 8014460:	2101      	movs	r1, #1
 8014462:	2000      	movs	r0, #0
 8014464:	f7f5 fc30 	bl	8009cc8 <logApplication>
    APP_DBG("basic Client on Endpoint %d", SW2_ENDPOINT);
 8014468:	4819      	ldr	r0, [pc, #100]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801446a:	f7fc f87f 	bl	801056c <DbgTraceGetFileName>
 801446e:	4601      	mov	r1, r0
 8014470:	f240 2387 	movw	r3, #647	@ 0x287
 8014474:	4a17      	ldr	r2, [pc, #92]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014476:	4818      	ldr	r0, [pc, #96]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014478:	f001 f886 	bl	8015588 <iprintf>
 801447c:	2315      	movs	r3, #21
 801447e:	4a23      	ldr	r2, [pc, #140]	@ (801450c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x300>)
 8014480:	2101      	movs	r1, #1
 8014482:	2000      	movs	r0, #0
 8014484:	f7f5 fc20 	bl	8009cc8 <logApplication>
    APP_DBG("water_content Server on Endpoint %d", SW2_ENDPOINT);
 8014488:	4811      	ldr	r0, [pc, #68]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 801448a:	f7fc f86f 	bl	801056c <DbgTraceGetFileName>
 801448e:	4601      	mov	r1, r0
 8014490:	f44f 7322 	mov.w	r3, #648	@ 0x288
 8014494:	4a0f      	ldr	r2, [pc, #60]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 8014496:	4810      	ldr	r0, [pc, #64]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 8014498:	f001 f876 	bl	8015588 <iprintf>
 801449c:	2315      	movs	r3, #21
 801449e:	4a1f      	ldr	r2, [pc, #124]	@ (801451c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x310>)
 80144a0:	2101      	movs	r1, #1
 80144a2:	2000      	movs	r0, #0
 80144a4:	f7f5 fc10 	bl	8009cc8 <logApplication>
    APP_DBG("**********************************************************");
 80144a8:	4809      	ldr	r0, [pc, #36]	@ (80144d0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c4>)
 80144aa:	f7fc f85f 	bl	801056c <DbgTraceGetFileName>
 80144ae:	4601      	mov	r1, r0
 80144b0:	f240 2389 	movw	r3, #649	@ 0x289
 80144b4:	4a07      	ldr	r2, [pc, #28]	@ (80144d4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c8>)
 80144b6:	4808      	ldr	r0, [pc, #32]	@ (80144d8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2cc>)
 80144b8:	f001 f866 	bl	8015588 <iprintf>
 80144bc:	4a07      	ldr	r2, [pc, #28]	@ (80144dc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2d0>)
 80144be:	2101      	movs	r1, #1
 80144c0:	2000      	movs	r0, #0
 80144c2:	f7f5 fc01 	bl	8009cc8 <logApplication>
}
 80144c6:	bf00      	nop
 80144c8:	3758      	adds	r7, #88	@ 0x58
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
 80144ce:	bf00      	nop
 80144d0:	0801788c 	.word	0x0801788c
 80144d4:	08018590 	.word	0x08018590
 80144d8:	080178ac 	.word	0x080178ac
 80144dc:	08017b24 	.word	0x08017b24
 80144e0:	08017b60 	.word	0x08017b60
 80144e4:	08017b7c 	.word	0x08017b7c
 80144e8:	08017b94 	.word	0x08017b94
 80144ec:	08017bb0 	.word	0x08017bb0
 80144f0:	08017bcc 	.word	0x08017bcc
 80144f4:	08017be8 	.word	0x08017be8
 80144f8:	0801824c 	.word	0x0801824c
 80144fc:	08017bfc 	.word	0x08017bfc
 8014500:	08017c0c 	.word	0x08017c0c
 8014504:	08017c14 	.word	0x08017c14
 8014508:	08017c28 	.word	0x08017c28
 801450c:	08017c40 	.word	0x08017c40
 8014510:	08017c5c 	.word	0x08017c5c
 8014514:	08017c78 	.word	0x08017c78
 8014518:	08017c9c 	.word	0x08017c9c
 801451c:	08017cc0 	.word	0x08017cc0

08014520 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8014520:	b480      	push	{r7}
 8014522:	b083      	sub	sp, #12
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 8014528:	4a04      	ldr	r2, [pc, #16]	@ (801453c <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6013      	str	r3, [r2, #0]
}
 801452e:	bf00      	nop
 8014530:	370c      	adds	r7, #12
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr
 801453a:	bf00      	nop
 801453c:	200006d8 	.word	0x200006d8

08014540 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 8014540:	b480      	push	{r7}
 8014542:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8014544:	4b03      	ldr	r3, [pc, #12]	@ (8014554 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	330c      	adds	r3, #12
}
 801454a:	4618      	mov	r0, r3
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr
 8014554:	200006d8 	.word	0x200006d8

08014558 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 8014558:	b480      	push	{r7}
 801455a:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 801455c:	4b03      	ldr	r3, [pc, #12]	@ (801456c <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	330b      	adds	r3, #11
}
 8014562:	4618      	mov	r0, r3
 8014564:	46bd      	mov	sp, r7
 8014566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456a:	4770      	bx	lr
 801456c:	200006d8 	.word	0x200006d8

08014570 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 8014570:	b480      	push	{r7}
 8014572:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8014574:	4b03      	ldr	r3, [pc, #12]	@ (8014584 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	330b      	adds	r3, #11
}
 801457a:	4618      	mov	r0, r3
 801457c:	46bd      	mov	sp, r7
 801457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014582:	4770      	bx	lr
 8014584:	200006dc 	.word	0x200006dc

08014588 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 8014588:	b480      	push	{r7}
 801458a:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 801458c:	4b03      	ldr	r3, [pc, #12]	@ (801459c <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	330b      	adds	r3, #11
}
 8014592:	4618      	mov	r0, r3
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr
 801459c:	200006e0 	.word	0x200006e0

080145a0 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 80145a6:	4b0f      	ldr	r3, [pc, #60]	@ (80145e4 <ZIGBEE_CmdTransfer+0x44>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	330c      	adds	r3, #12
 80145ac:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80145ae:	4b0d      	ldr	r3, [pc, #52]	@ (80145e4 <ZIGBEE_CmdTransfer+0x44>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2200      	movs	r2, #0
 80145b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80145b8:	725a      	strb	r2, [r3, #9]
 80145ba:	2200      	movs	r2, #0
 80145bc:	f042 0202 	orr.w	r2, r2, #2
 80145c0:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	3302      	adds	r3, #2
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	4b06      	ldr	r3, [pc, #24]	@ (80145e4 <ZIGBEE_CmdTransfer+0x44>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	0092      	lsls	r2, r2, #2
 80145d0:	b2d2      	uxtb	r2, r2
 80145d2:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 80145d4:	f7fc fbe6 	bl	8010da4 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80145d8:	f000 f827 	bl	801462a <Wait_Getting_Ack_From_M0>
}
 80145dc:	bf00      	nop
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	200006d8 	.word	0x200006d8

080145e8 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80145f0:	f000 f822 	bl	8014638 <Receive_Ack_From_M0>
}
 80145f4:	bf00      	nop
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b082      	sub	sp, #8
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8014604:	4a04      	ldr	r2, [pc, #16]	@ (8014618 <TL_ZIGBEE_NotReceived+0x1c>)
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 801460a:	f000 f81d 	bl	8014648 <Receive_Notification_From_M0>
}
 801460e:	bf00      	nop
 8014610:	3708      	adds	r7, #8
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	200006dc 	.word	0x200006dc

0801461c <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8014620:	2004      	movs	r0, #4
 8014622:	f000 fd71 	bl	8015108 <UTIL_SEQ_WaitEvt>
}
 8014626:	bf00      	nop
 8014628:	bd80      	pop	{r7, pc}

0801462a <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 801462a:	b580      	push	{r7, lr}
 801462c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 801462e:	2002      	movs	r0, #2
 8014630:	f000 fd6a 	bl	8015108 <UTIL_SEQ_WaitEvt>
}
 8014634:	bf00      	nop
 8014636:	bd80      	pop	{r7, pc}

08014638 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 801463c:	2002      	movs	r0, #2
 801463e:	f000 fd43 	bl	80150c8 <UTIL_SEQ_SetEvt>
}
 8014642:	bf00      	nop
 8014644:	bd80      	pop	{r7, pc}
	...

08014648 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 801464c:	4b05      	ldr	r3, [pc, #20]	@ (8014664 <Receive_Notification_From_M0+0x1c>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	3301      	adds	r3, #1
 8014652:	4a04      	ldr	r2, [pc, #16]	@ (8014664 <Receive_Notification_From_M0+0x1c>)
 8014654:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8014656:	2100      	movs	r1, #0
 8014658:	2001      	movs	r0, #1
 801465a:	f000 fd09 	bl	8015070 <UTIL_SEQ_SetTask>
}
 801465e:	bf00      	nop
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	200006e4 	.word	0x200006e4

08014668 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8014670:	4a07      	ldr	r2, [pc, #28]	@ (8014690 <TL_ZIGBEE_M0RequestReceived+0x28>)
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 8014676:	4b07      	ldr	r3, [pc, #28]	@ (8014694 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	3301      	adds	r3, #1
 801467c:	4a05      	ldr	r2, [pc, #20]	@ (8014694 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 801467e:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8014680:	2100      	movs	r1, #0
 8014682:	2002      	movs	r0, #2
 8014684:	f000 fcf4 	bl	8015070 <UTIL_SEQ_SetTask>
}
 8014688:	bf00      	nop
 801468a:	3708      	adds	r7, #8
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	200006e0 	.word	0x200006e0
 8014694:	200006e8 	.word	0x200006e8

08014698 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 801469c:	4b06      	ldr	r3, [pc, #24]	@ (80146b8 <APP_ZIGBEE_TL_INIT+0x20>)
 801469e:	4a07      	ldr	r2, [pc, #28]	@ (80146bc <APP_ZIGBEE_TL_INIT+0x24>)
 80146a0:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 80146a2:	4b05      	ldr	r3, [pc, #20]	@ (80146b8 <APP_ZIGBEE_TL_INIT+0x20>)
 80146a4:	4a06      	ldr	r2, [pc, #24]	@ (80146c0 <APP_ZIGBEE_TL_INIT+0x28>)
 80146a6:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 80146a8:	4b03      	ldr	r3, [pc, #12]	@ (80146b8 <APP_ZIGBEE_TL_INIT+0x20>)
 80146aa:	4a06      	ldr	r2, [pc, #24]	@ (80146c4 <APP_ZIGBEE_TL_INIT+0x2c>)
 80146ac:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 80146ae:	4802      	ldr	r0, [pc, #8]	@ (80146b8 <APP_ZIGBEE_TL_INIT+0x20>)
 80146b0:	f7fc fb5c 	bl	8010d6c <TL_ZIGBEE_Init>
}
 80146b4:	bf00      	nop
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	200300d8 	.word	0x200300d8
 80146bc:	20030838 	.word	0x20030838
 80146c0:	20030944 	.word	0x20030944
 80146c4:	20030a50 	.word	0x20030a50

080146c8 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 80146cc:	4b05      	ldr	r3, [pc, #20]	@ (80146e4 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d004      	beq.n	80146de <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 80146d4:	4b03      	ldr	r3, [pc, #12]	@ (80146e4 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 80146d6:	2200      	movs	r2, #0
 80146d8:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 80146da:	f7fd fd31 	bl	8012140 <Zigbee_CallBackProcessing>
  }
}
 80146de:	bf00      	nop
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	200006e4 	.word	0x200006e4

080146e8 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	af00      	add	r7, sp, #0
  if (CptReceiveRequestFromM0 != 0)
 80146ec:	4b05      	ldr	r3, [pc, #20]	@ (8014704 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d004      	beq.n	80146fe <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
  {
    CptReceiveRequestFromM0 = 0;
 80146f4:	4b03      	ldr	r3, [pc, #12]	@ (8014704 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 80146f6:	2200      	movs	r2, #0
 80146f8:	601a      	str	r2, [r3, #0]
    Zigbee_M0RequestProcessing();
 80146fa:	f7ff f8a7 	bl	801384c <Zigbee_M0RequestProcessing>
  }
}
 80146fe:	bf00      	nop
 8014700:	bd80      	pop	{r7, pc}
 8014702:	bf00      	nop
 8014704:	200006e8 	.word	0x200006e8

08014708 <APP_ZIGBEE_ConfigBasicServer>:
 * @brief  Configure Zigbee Basic Server Cluster
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_ConfigBasicServer(void)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	af00      	add	r7, sp, #0
  static struct ZbZclBasicServerDefaults   stBasicServerDefaults;

  /* Initialize Basic Server Cluster 'defaults' information */
  memset( &stBasicServerDefaults, 0x00, sizeof(stBasicServerDefaults) );
 801470c:	2268      	movs	r2, #104	@ 0x68
 801470e:	2100      	movs	r1, #0
 8014710:	481d      	ldr	r0, [pc, #116]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8014712:	f001 f955 	bl	80159c0 <memset>

  stBasicServerDefaults.mfr_name[0] = sizeof( APP_ZIGBEE_MFR_NAME );
 8014716:	4b1c      	ldr	r3, [pc, #112]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8014718:	2209      	movs	r2, #9
 801471a:	70da      	strb	r2, [r3, #3]
  memcpy( &stBasicServerDefaults.mfr_name[1], APP_ZIGBEE_MFR_NAME, sizeof( APP_ZIGBEE_MFR_NAME ) );
 801471c:	2209      	movs	r2, #9
 801471e:	491b      	ldr	r1, [pc, #108]	@ (801478c <APP_ZIGBEE_ConfigBasicServer+0x84>)
 8014720:	481b      	ldr	r0, [pc, #108]	@ (8014790 <APP_ZIGBEE_ConfigBasicServer+0x88>)
 8014722:	f001 f9fe 	bl	8015b22 <memcpy>

  stBasicServerDefaults.model_name[0] = sizeof( APP_ZIGBEE_CHIP_NAME );
 8014726:	4b18      	ldr	r3, [pc, #96]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8014728:	220b      	movs	r2, #11
 801472a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  memcpy( &stBasicServerDefaults.model_name[1], APP_ZIGBEE_CHIP_NAME, sizeof( APP_ZIGBEE_CHIP_NAME ) );
 801472e:	220b      	movs	r2, #11
 8014730:	4918      	ldr	r1, [pc, #96]	@ (8014794 <APP_ZIGBEE_ConfigBasicServer+0x8c>)
 8014732:	4819      	ldr	r0, [pc, #100]	@ (8014798 <APP_ZIGBEE_ConfigBasicServer+0x90>)
 8014734:	f001 f9f5 	bl	8015b22 <memcpy>

  stBasicServerDefaults.date_code[0] = sizeof( APP_ZIGBEE_APP_DATE_CODE );
 8014738:	4b13      	ldr	r3, [pc, #76]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 801473a:	2209      	movs	r2, #9
 801473c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  memcpy( &stBasicServerDefaults.date_code[1], APP_ZIGBEE_APP_DATE_CODE, sizeof( APP_ZIGBEE_APP_DATE_CODE ) );
 8014740:	2209      	movs	r2, #9
 8014742:	4916      	ldr	r1, [pc, #88]	@ (801479c <APP_ZIGBEE_ConfigBasicServer+0x94>)
 8014744:	4816      	ldr	r0, [pc, #88]	@ (80147a0 <APP_ZIGBEE_ConfigBasicServer+0x98>)
 8014746:	f001 f9ec 	bl	8015b22 <memcpy>

  stBasicServerDefaults.sw_build_id[0] = sizeof( APP_ZIGBEE_APP_BUILD_ID );
 801474a:	4b0f      	ldr	r3, [pc, #60]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 801474c:	2209      	movs	r2, #9
 801474e:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
  memcpy( &stBasicServerDefaults.sw_build_id[1], APP_ZIGBEE_APP_BUILD_ID, sizeof( APP_ZIGBEE_APP_BUILD_ID ) );
 8014752:	2209      	movs	r2, #9
 8014754:	4913      	ldr	r1, [pc, #76]	@ (80147a4 <APP_ZIGBEE_ConfigBasicServer+0x9c>)
 8014756:	4814      	ldr	r0, [pc, #80]	@ (80147a8 <APP_ZIGBEE_ConfigBasicServer+0xa0>)
 8014758:	f001 f9e3 	bl	8015b22 <memcpy>

  /* Version are on 8 bits : 3 bits for Major version and 5 bits for Minor version */
  stBasicServerDefaults.app_version = (uint8_t)( ( APP_ZIGBEE_APP_VERSION & 0x70u ) << 1u ) | ( APP_ZIGBEE_APP_VERSION & 0x0Fu );
 801475c:	4b0a      	ldr	r3, [pc, #40]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 801475e:	2220      	movs	r2, #32
 8014760:	701a      	strb	r2, [r3, #0]
  stBasicServerDefaults.stack_version = (uint8_t)( ( APP_ZIGBEE_STACK_VERSION & 0x70u ) << 1u ) | ( APP_ZIGBEE_STACK_VERSION & 0x0Fu );
 8014762:	4b09      	ldr	r3, [pc, #36]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8014764:	2220      	movs	r2, #32
 8014766:	705a      	strb	r2, [r3, #1]
  stBasicServerDefaults.hw_version = (uint8_t)( ( APP_ZIGBEE_CHIP_VERSION & 0x70u ) << 1u ) | ( APP_ZIGBEE_CHIP_VERSION & 0x0Fu );
 8014768:	4b07      	ldr	r3, [pc, #28]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 801476a:	2220      	movs	r2, #32
 801476c:	709a      	strb	r2, [r3, #2]

  stBasicServerDefaults.power_source = APP_ZIGBEE_BOARD_POWER;
 801476e:	4b06      	ldr	r3, [pc, #24]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8014770:	2200      	movs	r2, #0
 8014772:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56

  /* Configure default Basic Server */
  ZbZclBasicServerConfigDefaults( zigbee_app_info.zb , &stBasicServerDefaults );
 8014776:	4b0d      	ldr	r3, [pc, #52]	@ (80147ac <APP_ZIGBEE_ConfigBasicServer+0xa4>)
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	4903      	ldr	r1, [pc, #12]	@ (8014788 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 801477c:	4618      	mov	r0, r3
 801477e:	f7fd fa31 	bl	8011be4 <ZbZclBasicServerConfigDefaults>
}
 8014782:	bf00      	nop
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	20000724 	.word	0x20000724
 801478c:	08017ce4 	.word	0x08017ce4
 8014790:	20000728 	.word	0x20000728
 8014794:	08017cf0 	.word	0x08017cf0
 8014798:	20000749 	.word	0x20000749
 801479c:	08017cfc 	.word	0x08017cfc
 80147a0:	2000076a 	.word	0x2000076a
 80147a4:	08017d08 	.word	0x08017d08
 80147a8:	2000077c 	.word	0x2000077c
 80147ac:	200006ec 	.word	0x200006ec

080147b0 <LL_PWR_EnableBootC2>:
{
 80147b0:	b480      	push	{r7}
 80147b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80147b4:	4b05      	ldr	r3, [pc, #20]	@ (80147cc <LL_PWR_EnableBootC2+0x1c>)
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	4a04      	ldr	r2, [pc, #16]	@ (80147cc <LL_PWR_EnableBootC2+0x1c>)
 80147ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80147be:	60d3      	str	r3, [r2, #12]
}
 80147c0:	bf00      	nop
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr
 80147ca:	bf00      	nop
 80147cc:	58000400 	.word	0x58000400

080147d0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80147d0:	b480      	push	{r7}
 80147d2:	b083      	sub	sp, #12
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80147d8:	4b06      	ldr	r3, [pc, #24]	@ (80147f4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80147da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80147de:	4905      	ldr	r1, [pc, #20]	@ (80147f4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	4313      	orrs	r3, r2
 80147e4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80147e8:	bf00      	nop
 80147ea:	370c      	adds	r7, #12
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr
 80147f4:	58000800 	.word	0x58000800

080147f8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014800:	4b05      	ldr	r3, [pc, #20]	@ (8014818 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014802:	6a1a      	ldr	r2, [r3, #32]
 8014804:	4904      	ldr	r1, [pc, #16]	@ (8014818 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	4313      	orrs	r3, r2
 801480a:	620b      	str	r3, [r1, #32]
}
 801480c:	bf00      	nop
 801480e:	370c      	adds	r7, #12
 8014810:	46bd      	mov	sp, r7
 8014812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014816:	4770      	bx	lr
 8014818:	58000800 	.word	0x58000800

0801481c <LL_AHB3_GRP1_EnableClock>:
{
 801481c:	b480      	push	{r7}
 801481e:	b085      	sub	sp, #20
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801482a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	4313      	orrs	r3, r2
 8014832:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014838:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4013      	ands	r3, r2
 801483e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014840:	68fb      	ldr	r3, [r7, #12]
}
 8014842:	bf00      	nop
 8014844:	3714      	adds	r7, #20
 8014846:	46bd      	mov	sp, r7
 8014848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484c:	4770      	bx	lr

0801484e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801484e:	b480      	push	{r7}
 8014850:	b085      	sub	sp, #20
 8014852:	af00      	add	r7, sp, #0
 8014854:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801485a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801485e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4313      	orrs	r3, r2
 8014866:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801486a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801486e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	4013      	ands	r3, r2
 8014876:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014878:	68fb      	ldr	r3, [r7, #12]
}
 801487a:	bf00      	nop
 801487c:	3714      	adds	r7, #20
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr

08014886 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8014886:	b480      	push	{r7}
 8014888:	b083      	sub	sp, #12
 801488a:	af00      	add	r7, sp, #0
 801488c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	601a      	str	r2, [r3, #0]
}
 801489a:	bf00      	nop
 801489c:	370c      	adds	r7, #12
 801489e:	46bd      	mov	sp, r7
 80148a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a4:	4770      	bx	lr

080148a6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80148a6:	b480      	push	{r7}
 80148a8:	b083      	sub	sp, #12
 80148aa:	af00      	add	r7, sp, #0
 80148ac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f043 0201 	orr.w	r2, r3, #1
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	601a      	str	r2, [r3, #0]
}
 80148ba:	bf00      	nop
 80148bc:	370c      	adds	r7, #12
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr

080148c6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
 80148ce:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	685a      	ldr	r2, [r3, #4]
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	041b      	lsls	r3, r3, #16
 80148d8:	43db      	mvns	r3, r3
 80148da:	401a      	ands	r2, r3
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	605a      	str	r2, [r3, #4]
}
 80148e0:	bf00      	nop
 80148e2:	370c      	adds	r7, #12
 80148e4:	46bd      	mov	sp, r7
 80148e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ea:	4770      	bx	lr

080148ec <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80148ec:	b480      	push	{r7}
 80148ee:	b083      	sub	sp, #12
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	685a      	ldr	r2, [r3, #4]
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	041b      	lsls	r3, r3, #16
 80148fe:	431a      	orrs	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	605a      	str	r2, [r3, #4]
}
 8014904:	bf00      	nop
 8014906:	370c      	adds	r7, #12
 8014908:	46bd      	mov	sp, r7
 801490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490e:	4770      	bx	lr

08014910 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014910:	b480      	push	{r7}
 8014912:	b083      	sub	sp, #12
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	685a      	ldr	r2, [r3, #4]
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	43db      	mvns	r3, r3
 8014922:	401a      	ands	r2, r3
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	605a      	str	r2, [r3, #4]
}
 8014928:	bf00      	nop
 801492a:	370c      	adds	r7, #12
 801492c:	46bd      	mov	sp, r7
 801492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014932:	4770      	bx	lr

08014934 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014934:	b480      	push	{r7}
 8014936:	b083      	sub	sp, #12
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	685a      	ldr	r2, [r3, #4]
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	431a      	orrs	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	605a      	str	r2, [r3, #4]
}
 801494a:	bf00      	nop
 801494c:	370c      	adds	r7, #12
 801494e:	46bd      	mov	sp, r7
 8014950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014954:	4770      	bx	lr

08014956 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014956:	b480      	push	{r7}
 8014958:	b083      	sub	sp, #12
 801495a:	af00      	add	r7, sp, #0
 801495c:	6078      	str	r0, [r7, #4]
 801495e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	683a      	ldr	r2, [r7, #0]
 8014964:	609a      	str	r2, [r3, #8]
}
 8014966:	bf00      	nop
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr

08014972 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8014972:	b480      	push	{r7}
 8014974:	b083      	sub	sp, #12
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
 801497a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	041a      	lsls	r2, r3, #16
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	609a      	str	r2, [r3, #8]
}
 8014984:	bf00      	nop
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014990:	b480      	push	{r7}
 8014992:	b083      	sub	sp, #12
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	68da      	ldr	r2, [r3, #12]
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	4013      	ands	r3, r2
 80149a2:	683a      	ldr	r2, [r7, #0]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d101      	bne.n	80149ac <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80149a8:	2301      	movs	r3, #1
 80149aa:	e000      	b.n	80149ae <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	370c      	adds	r7, #12
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr

080149ba <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80149ba:	b480      	push	{r7}
 80149bc:	b083      	sub	sp, #12
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
 80149c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	69da      	ldr	r2, [r3, #28]
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	4013      	ands	r3, r2
 80149cc:	683a      	ldr	r2, [r7, #0]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d101      	bne.n	80149d6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80149d2:	2301      	movs	r3, #1
 80149d4:	e000      	b.n	80149d8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80149d6:	2300      	movs	r3, #0
}
 80149d8:	4618      	mov	r0, r3
 80149da:	370c      	adds	r7, #12
 80149dc:	46bd      	mov	sp, r7
 80149de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e2:	4770      	bx	lr

080149e4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80149e8:	2102      	movs	r1, #2
 80149ea:	4828      	ldr	r0, [pc, #160]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 80149ec:	f7ff ffe5 	bl	80149ba <LL_C2_IPCC_IsActiveFlag_CHx>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d008      	beq.n	8014a08 <HW_IPCC_Rx_Handler+0x24>
 80149f6:	4b25      	ldr	r3, [pc, #148]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	f003 0302 	and.w	r3, r3, #2
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d102      	bne.n	8014a08 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8014a02:	f000 f8f1 	bl	8014be8 <HW_IPCC_SYS_EvtHandler>
 8014a06:	e03e      	b.n	8014a86 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 8014a08:	2104      	movs	r1, #4
 8014a0a:	4820      	ldr	r0, [pc, #128]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a0c:	f7ff ffd5 	bl	80149ba <LL_C2_IPCC_IsActiveFlag_CHx>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d008      	beq.n	8014a28 <HW_IPCC_Rx_Handler+0x44>
 8014a16:	4b1d      	ldr	r3, [pc, #116]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	f003 0304 	and.w	r3, r3, #4
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d102      	bne.n	8014a28 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 8014a22:	f000 f923 	bl	8014c6c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 8014a26:	e02e      	b.n	8014a86 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 8014a28:	2110      	movs	r1, #16
 8014a2a:	4818      	ldr	r0, [pc, #96]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a2c:	f7ff ffc5 	bl	80149ba <LL_C2_IPCC_IsActiveFlag_CHx>
 8014a30:	4603      	mov	r3, r0
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d008      	beq.n	8014a48 <HW_IPCC_Rx_Handler+0x64>
 8014a36:	4b15      	ldr	r3, [pc, #84]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	f003 0310 	and.w	r3, r3, #16
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d102      	bne.n	8014a48 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 8014a42:	f000 f91f 	bl	8014c84 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 8014a46:	e01e      	b.n	8014a86 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014a48:	2101      	movs	r1, #1
 8014a4a:	4810      	ldr	r0, [pc, #64]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a4c:	f7ff ffb5 	bl	80149ba <LL_C2_IPCC_IsActiveFlag_CHx>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d008      	beq.n	8014a68 <HW_IPCC_Rx_Handler+0x84>
 8014a56:	4b0d      	ldr	r3, [pc, #52]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	f003 0301 	and.w	r3, r3, #1
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d102      	bne.n	8014a68 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 8014a62:	f000 f885 	bl	8014b70 <HW_IPCC_BLE_EvtHandler>
 8014a66:	e00e      	b.n	8014a86 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014a68:	2108      	movs	r1, #8
 8014a6a:	4808      	ldr	r0, [pc, #32]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a6c:	f7ff ffa5 	bl	80149ba <LL_C2_IPCC_IsActiveFlag_CHx>
 8014a70:	4603      	mov	r3, r0
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d008      	beq.n	8014a88 <HW_IPCC_Rx_Handler+0xa4>
 8014a76:	4b05      	ldr	r3, [pc, #20]	@ (8014a8c <HW_IPCC_Rx_Handler+0xa8>)
 8014a78:	685b      	ldr	r3, [r3, #4]
 8014a7a:	f003 0308 	and.w	r3, r3, #8
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d102      	bne.n	8014a88 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014a82:	f000 f959 	bl	8014d38 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014a86:	bf00      	nop
 8014a88:	bf00      	nop
}
 8014a8a:	bd80      	pop	{r7, pc}
 8014a8c:	58000c00 	.word	0x58000c00

08014a90 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014a94:	2102      	movs	r1, #2
 8014a96:	4820      	ldr	r0, [pc, #128]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014a98:	f7ff ff7a 	bl	8014990 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d107      	bne.n	8014ab2 <HW_IPCC_Tx_Handler+0x22>
 8014aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d101      	bne.n	8014ab2 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014aae:	f000 f88f 	bl	8014bd0 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 8014ab2:	2104      	movs	r1, #4
 8014ab4:	4818      	ldr	r0, [pc, #96]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014ab6:	f7ff ff6b 	bl	8014990 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014aba:	4603      	mov	r3, r0
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d108      	bne.n	8014ad2 <HW_IPCC_Tx_Handler+0x42>
 8014ac0:	4b15      	ldr	r3, [pc, #84]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d102      	bne.n	8014ad2 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 8014acc:	f000 f8c2 	bl	8014c54 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 8014ad0:	e01e      	b.n	8014b10 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014ad2:	2108      	movs	r1, #8
 8014ad4:	4810      	ldr	r0, [pc, #64]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014ad6:	f7ff ff5b 	bl	8014990 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d108      	bne.n	8014af2 <HW_IPCC_Tx_Handler+0x62>
 8014ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014ae2:	685b      	ldr	r3, [r3, #4]
 8014ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d102      	bne.n	8014af2 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8014aec:	f000 f906 	bl	8014cfc <HW_IPCC_MM_FreeBufHandler>
 8014af0:	e00e      	b.n	8014b10 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014af2:	2120      	movs	r1, #32
 8014af4:	4808      	ldr	r0, [pc, #32]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014af6:	f7ff ff4b 	bl	8014990 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d108      	bne.n	8014b12 <HW_IPCC_Tx_Handler+0x82>
 8014b00:	4b05      	ldr	r3, [pc, #20]	@ (8014b18 <HW_IPCC_Tx_Handler+0x88>)
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d102      	bne.n	8014b12 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8014b0c:	f000 f83c 	bl	8014b88 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014b10:	bf00      	nop
 8014b12:	bf00      	nop
}
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	58000c00 	.word	0x58000c00

08014b1c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014b20:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8014b24:	f7ff fe93 	bl	801484e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014b28:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014b2c:	f7ff fe64 	bl	80147f8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8014b30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014b34:	f7ff fe4c 	bl	80147d0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014b38:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8014b3a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8014b3c:	f7ff fe38 	bl	80147b0 <LL_PWR_EnableBootC2>

  return;
 8014b40:	bf00      	nop
}
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014b48:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8014b4c:	f7ff fe66 	bl	801481c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8014b50:	4806      	ldr	r0, [pc, #24]	@ (8014b6c <HW_IPCC_Init+0x28>)
 8014b52:	f7ff fea8 	bl	80148a6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014b56:	4805      	ldr	r0, [pc, #20]	@ (8014b6c <HW_IPCC_Init+0x28>)
 8014b58:	f7ff fe95 	bl	8014886 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014b5c:	202c      	movs	r0, #44	@ 0x2c
 8014b5e:	f7f6 ff42 	bl	800b9e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8014b62:	202d      	movs	r0, #45	@ 0x2d
 8014b64:	f7f6 ff3f 	bl	800b9e6 <HAL_NVIC_EnableIRQ>

  return;
 8014b68:	bf00      	nop
}
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	58000c00 	.word	0x58000c00

08014b70 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8014b74:	f7fc f842 	bl	8010bfc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014b78:	2101      	movs	r1, #1
 8014b7a:	4802      	ldr	r0, [pc, #8]	@ (8014b84 <HW_IPCC_BLE_EvtHandler+0x14>)
 8014b7c:	f7ff feeb 	bl	8014956 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014b80:	bf00      	nop
}
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	58000c00 	.word	0x58000c00

08014b88 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014b8c:	2120      	movs	r1, #32
 8014b8e:	4803      	ldr	r0, [pc, #12]	@ (8014b9c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014b90:	f7ff feac 	bl	80148ec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8014b94:	f7fc f862 	bl	8010c5c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014b98:	bf00      	nop
}
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	58000c00 	.word	0x58000c00

08014ba0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014ba4:	2102      	movs	r1, #2
 8014ba6:	4802      	ldr	r0, [pc, #8]	@ (8014bb0 <HW_IPCC_SYS_Init+0x10>)
 8014ba8:	f7ff feb2 	bl	8014910 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014bac:	bf00      	nop
}
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	58000c00 	.word	0x58000c00

08014bb4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014bb8:	2102      	movs	r1, #2
 8014bba:	4804      	ldr	r0, [pc, #16]	@ (8014bcc <HW_IPCC_SYS_SendCmd+0x18>)
 8014bbc:	f7ff fed9 	bl	8014972 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014bc0:	2102      	movs	r1, #2
 8014bc2:	4802      	ldr	r0, [pc, #8]	@ (8014bcc <HW_IPCC_SYS_SendCmd+0x18>)
 8014bc4:	f7ff fe7f 	bl	80148c6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014bc8:	bf00      	nop
}
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	58000c00 	.word	0x58000c00

08014bd0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014bd4:	2102      	movs	r1, #2
 8014bd6:	4803      	ldr	r0, [pc, #12]	@ (8014be4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014bd8:	f7ff fe88 	bl	80148ec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014bdc:	f7fc f88e 	bl	8010cfc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014be0:	bf00      	nop
}
 8014be2:	bd80      	pop	{r7, pc}
 8014be4:	58000c00 	.word	0x58000c00

08014be8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014bec:	f7fc f89c 	bl	8010d28 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014bf0:	2102      	movs	r1, #2
 8014bf2:	4802      	ldr	r0, [pc, #8]	@ (8014bfc <HW_IPCC_SYS_EvtHandler+0x14>)
 8014bf4:	f7ff feaf 	bl	8014956 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014bf8:	bf00      	nop
}
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	58000c00 	.word	0x58000c00

08014c00 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014c04:	2104      	movs	r1, #4
 8014c06:	4804      	ldr	r0, [pc, #16]	@ (8014c18 <HW_IPCC_ZIGBEE_Init+0x18>)
 8014c08:	f7ff fe82 	bl	8014910 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014c0c:	2110      	movs	r1, #16
 8014c0e:	4802      	ldr	r0, [pc, #8]	@ (8014c18 <HW_IPCC_ZIGBEE_Init+0x18>)
 8014c10:	f7ff fe7e 	bl	8014910 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014c14:	bf00      	nop
}
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	58000c00 	.word	0x58000c00

08014c1c <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8014c20:	2104      	movs	r1, #4
 8014c22:	4804      	ldr	r0, [pc, #16]	@ (8014c34 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8014c24:	f7ff fea5 	bl	8014972 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8014c28:	2104      	movs	r1, #4
 8014c2a:	4802      	ldr	r0, [pc, #8]	@ (8014c34 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8014c2c:	f7ff fe4b 	bl	80148c6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014c30:	bf00      	nop
}
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	58000c00 	.word	0x58000c00

08014c38 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014c3c:	2104      	movs	r1, #4
 8014c3e:	4804      	ldr	r0, [pc, #16]	@ (8014c50 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8014c40:	f7ff fe89 	bl	8014956 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014c44:	2104      	movs	r1, #4
 8014c46:	4802      	ldr	r0, [pc, #8]	@ (8014c50 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8014c48:	f7ff fe62 	bl	8014910 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014c4c:	bf00      	nop
}
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	58000c00 	.word	0x58000c00

08014c54 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8014c58:	2104      	movs	r1, #4
 8014c5a:	4803      	ldr	r0, [pc, #12]	@ (8014c68 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8014c5c:	f7ff fe46 	bl	80148ec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8014c60:	f7fc f8ae 	bl	8010dc0 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 8014c64:	bf00      	nop
}
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	58000c00 	.word	0x58000c00

08014c6c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8014c70:	2104      	movs	r1, #4
 8014c72:	4803      	ldr	r0, [pc, #12]	@ (8014c80 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 8014c74:	f7ff fe5e 	bl	8014934 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8014c78:	f7fc f8ae 	bl	8010dd8 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 8014c7c:	bf00      	nop
}
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	58000c00 	.word	0x58000c00

08014c84 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014c88:	2110      	movs	r1, #16
 8014c8a:	4803      	ldr	r0, [pc, #12]	@ (8014c98 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 8014c8c:	f7ff fe52 	bl	8014934 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 8014c90:	f7fc f8bc 	bl	8010e0c <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8014c94:	bf00      	nop
}
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	58000c00 	.word	0x58000c00

08014c9c <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014ca0:	2110      	movs	r1, #16
 8014ca2:	4804      	ldr	r0, [pc, #16]	@ (8014cb4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8014ca4:	f7ff fe57 	bl	8014956 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8014ca8:	2110      	movs	r1, #16
 8014caa:	4802      	ldr	r0, [pc, #8]	@ (8014cb4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8014cac:	f7ff fe30 	bl	8014910 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014cb0:	bf00      	nop
}
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	58000c00 	.word	0x58000c00

08014cb8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8014cc0:	2108      	movs	r1, #8
 8014cc2:	480c      	ldr	r0, [pc, #48]	@ (8014cf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014cc4:	f7ff fe64 	bl	8014990 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d007      	beq.n	8014cde <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8014cce:	4a0a      	ldr	r2, [pc, #40]	@ (8014cf8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014cd4:	2108      	movs	r1, #8
 8014cd6:	4807      	ldr	r0, [pc, #28]	@ (8014cf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014cd8:	f7ff fdf5 	bl	80148c6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8014cdc:	e006      	b.n	8014cec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014ce2:	2108      	movs	r1, #8
 8014ce4:	4803      	ldr	r0, [pc, #12]	@ (8014cf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014ce6:	f7ff fe44 	bl	8014972 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8014cea:	bf00      	nop
}
 8014cec:	3708      	adds	r7, #8
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	58000c00 	.word	0x58000c00
 8014cf8:	2000078c 	.word	0x2000078c

08014cfc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014d00:	2108      	movs	r1, #8
 8014d02:	4806      	ldr	r0, [pc, #24]	@ (8014d1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014d04:	f7ff fdf2 	bl	80148ec <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014d08:	4b05      	ldr	r3, [pc, #20]	@ (8014d20 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014d0e:	2108      	movs	r1, #8
 8014d10:	4802      	ldr	r0, [pc, #8]	@ (8014d1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014d12:	f7ff fe2e 	bl	8014972 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014d16:	bf00      	nop
}
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	58000c00 	.word	0x58000c00
 8014d20:	2000078c 	.word	0x2000078c

08014d24 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014d28:	2108      	movs	r1, #8
 8014d2a:	4802      	ldr	r0, [pc, #8]	@ (8014d34 <HW_IPCC_TRACES_Init+0x10>)
 8014d2c:	f7ff fdf0 	bl	8014910 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014d30:	bf00      	nop
}
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	58000c00 	.word	0x58000c00

08014d38 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8014d3c:	f7fc f906 	bl	8010f4c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014d40:	2108      	movs	r1, #8
 8014d42:	4802      	ldr	r0, [pc, #8]	@ (8014d4c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014d44:	f7ff fe07 	bl	8014956 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014d48:	bf00      	nop
}
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	58000c00 	.word	0x58000c00

08014d50 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8014d50:	b480      	push	{r7}
 8014d52:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014d54:	4b05      	ldr	r3, [pc, #20]	@ (8014d6c <UTIL_LPM_Init+0x1c>)
 8014d56:	2200      	movs	r2, #0
 8014d58:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014d5a:	4b05      	ldr	r3, [pc, #20]	@ (8014d70 <UTIL_LPM_Init+0x20>)
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014d60:	bf00      	nop
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr
 8014d6a:	bf00      	nop
 8014d6c:	20000790 	.word	0x20000790
 8014d70:	20000794 	.word	0x20000794

08014d74 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014d74:	b480      	push	{r7}
 8014d76:	b087      	sub	sp, #28
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d80:	f3ef 8310 	mrs	r3, PRIMASK
 8014d84:	613b      	str	r3, [r7, #16]
  return(result);
 8014d86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014d8a:	b672      	cpsid	i
}
 8014d8c:	bf00      	nop
  
  switch( state )
 8014d8e:	78fb      	ldrb	r3, [r7, #3]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d008      	beq.n	8014da6 <UTIL_LPM_SetStopMode+0x32>
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d10e      	bne.n	8014db6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8014d98:	4b0d      	ldr	r3, [pc, #52]	@ (8014dd0 <UTIL_LPM_SetStopMode+0x5c>)
 8014d9a:	681a      	ldr	r2, [r3, #0]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	4a0b      	ldr	r2, [pc, #44]	@ (8014dd0 <UTIL_LPM_SetStopMode+0x5c>)
 8014da2:	6013      	str	r3, [r2, #0]
      break;
 8014da4:	e008      	b.n	8014db8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	43da      	mvns	r2, r3
 8014daa:	4b09      	ldr	r3, [pc, #36]	@ (8014dd0 <UTIL_LPM_SetStopMode+0x5c>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	4013      	ands	r3, r2
 8014db0:	4a07      	ldr	r2, [pc, #28]	@ (8014dd0 <UTIL_LPM_SetStopMode+0x5c>)
 8014db2:	6013      	str	r3, [r2, #0]
      break;
 8014db4:	e000      	b.n	8014db8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8014db6:	bf00      	nop
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f383 8810 	msr	PRIMASK, r3
}
 8014dc2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014dc4:	bf00      	nop
 8014dc6:	371c      	adds	r7, #28
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr
 8014dd0:	20000790 	.word	0x20000790

08014dd4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	b087      	sub	sp, #28
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014de0:	f3ef 8310 	mrs	r3, PRIMASK
 8014de4:	613b      	str	r3, [r7, #16]
  return(result);
 8014de6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014dea:	b672      	cpsid	i
}
 8014dec:	bf00      	nop
  
  switch(state)
 8014dee:	78fb      	ldrb	r3, [r7, #3]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d008      	beq.n	8014e06 <UTIL_LPM_SetOffMode+0x32>
 8014df4:	2b01      	cmp	r3, #1
 8014df6:	d10e      	bne.n	8014e16 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014df8:	4b0d      	ldr	r3, [pc, #52]	@ (8014e30 <UTIL_LPM_SetOffMode+0x5c>)
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	4313      	orrs	r3, r2
 8014e00:	4a0b      	ldr	r2, [pc, #44]	@ (8014e30 <UTIL_LPM_SetOffMode+0x5c>)
 8014e02:	6013      	str	r3, [r2, #0]
      break;
 8014e04:	e008      	b.n	8014e18 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	43da      	mvns	r2, r3
 8014e0a:	4b09      	ldr	r3, [pc, #36]	@ (8014e30 <UTIL_LPM_SetOffMode+0x5c>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	4013      	ands	r3, r2
 8014e10:	4a07      	ldr	r2, [pc, #28]	@ (8014e30 <UTIL_LPM_SetOffMode+0x5c>)
 8014e12:	6013      	str	r3, [r2, #0]
      break;
 8014e14:	e000      	b.n	8014e18 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8014e16:	bf00      	nop
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f383 8810 	msr	PRIMASK, r3
}
 8014e22:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014e24:	bf00      	nop
 8014e26:	371c      	adds	r7, #28
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr
 8014e30:	20000794 	.word	0x20000794

08014e34 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b090      	sub	sp, #64	@ 0x40
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8014e3c:	4b73      	ldr	r3, [pc, #460]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8014e42:	4b72      	ldr	r3, [pc, #456]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4013      	ands	r3, r2
 8014e4a:	4a70      	ldr	r2, [pc, #448]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014e4c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8014e4e:	4b70      	ldr	r3, [pc, #448]	@ (8015010 <UTIL_SEQ_Run+0x1dc>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8014e54:	4b6f      	ldr	r3, [pc, #444]	@ (8015014 <UTIL_SEQ_Run+0x1e0>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8014e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8015018 <UTIL_SEQ_Run+0x1e4>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8014e60:	4b6e      	ldr	r3, [pc, #440]	@ (801501c <UTIL_SEQ_Run+0x1e8>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8014e66:	e08d      	b.n	8014f84 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8014e6c:	e002      	b.n	8014e74 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8014e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e70:	3301      	adds	r3, #1
 8014e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8014e74:	4a6a      	ldr	r2, [pc, #424]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e7e:	401a      	ands	r2, r3
 8014e80:	4b62      	ldr	r3, [pc, #392]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4013      	ands	r3, r2
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d0f1      	beq.n	8014e6e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8014e8a:	4a65      	ldr	r2, [pc, #404]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e8e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e94:	401a      	ands	r2, r3
 8014e96:	4b5d      	ldr	r3, [pc, #372]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	4013      	ands	r3, r2
 8014e9c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8014e9e:	4a60      	ldr	r2, [pc, #384]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ea2:	00db      	lsls	r3, r3, #3
 8014ea4:	4413      	add	r3, r2
 8014ea6:	685a      	ldr	r2, [r3, #4]
 8014ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eaa:	4013      	ands	r3, r2
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d106      	bne.n	8014ebe <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8014eb0:	4a5b      	ldr	r2, [pc, #364]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014eb4:	00db      	lsls	r3, r3, #3
 8014eb6:	4413      	add	r3, r2
 8014eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8014ebc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8014ebe:	4a58      	ldr	r2, [pc, #352]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	4413      	add	r3, r2
 8014ec6:	685a      	ldr	r2, [r3, #4]
 8014ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eca:	4013      	ands	r3, r2
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f000 f973 	bl	80151b8 <SEQ_BitPosition>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	4b53      	ldr	r3, [pc, #332]	@ (8015024 <UTIL_SEQ_Run+0x1f0>)
 8014ed8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8014eda:	4a51      	ldr	r2, [pc, #324]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ede:	00db      	lsls	r3, r3, #3
 8014ee0:	4413      	add	r3, r2
 8014ee2:	685a      	ldr	r2, [r3, #4]
 8014ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8015024 <UTIL_SEQ_Run+0x1f0>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2101      	movs	r1, #1
 8014eea:	fa01 f303 	lsl.w	r3, r1, r3
 8014eee:	43db      	mvns	r3, r3
 8014ef0:	401a      	ands	r2, r3
 8014ef2:	494b      	ldr	r1, [pc, #300]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ef6:	00db      	lsls	r3, r3, #3
 8014ef8:	440b      	add	r3, r1
 8014efa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014efc:	f3ef 8310 	mrs	r3, PRIMASK
 8014f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8014f02:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014f04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8014f06:	b672      	cpsid	i
}
 8014f08:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8014f0a:	4b46      	ldr	r3, [pc, #280]	@ (8015024 <UTIL_SEQ_Run+0x1f0>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	fa02 f303 	lsl.w	r3, r2, r3
 8014f14:	43da      	mvns	r2, r3
 8014f16:	4b3e      	ldr	r3, [pc, #248]	@ (8015010 <UTIL_SEQ_Run+0x1dc>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8015010 <UTIL_SEQ_Run+0x1dc>)
 8014f1e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8014f20:	2302      	movs	r3, #2
 8014f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f24:	e013      	b.n	8014f4e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8014f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f28:	3b01      	subs	r3, #1
 8014f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014f2c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8014f30:	4b3c      	ldr	r3, [pc, #240]	@ (8015024 <UTIL_SEQ_Run+0x1f0>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2201      	movs	r2, #1
 8014f36:	fa02 f303 	lsl.w	r3, r2, r3
 8014f3a:	43da      	mvns	r2, r3
 8014f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f3e:	3b01      	subs	r3, #1
 8014f40:	400a      	ands	r2, r1
 8014f42:	4937      	ldr	r1, [pc, #220]	@ (8015020 <UTIL_SEQ_Run+0x1ec>)
 8014f44:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8014f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f4a:	3b01      	subs	r3, #1
 8014f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d1e8      	bne.n	8014f26 <UTIL_SEQ_Run+0xf2>
 8014f54:	6a3b      	ldr	r3, [r7, #32]
 8014f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	f383 8810 	msr	PRIMASK, r3
}
 8014f5e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8014f60:	4b30      	ldr	r3, [pc, #192]	@ (8015024 <UTIL_SEQ_Run+0x1f0>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	4a30      	ldr	r2, [pc, #192]	@ (8015028 <UTIL_SEQ_Run+0x1f4>)
 8014f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f6a:	4798      	blx	r3

    local_taskset = TaskSet;
 8014f6c:	4b28      	ldr	r3, [pc, #160]	@ (8015010 <UTIL_SEQ_Run+0x1dc>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8014f72:	4b28      	ldr	r3, [pc, #160]	@ (8015014 <UTIL_SEQ_Run+0x1e0>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8014f78:	4b27      	ldr	r3, [pc, #156]	@ (8015018 <UTIL_SEQ_Run+0x1e4>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8014f7e:	4b27      	ldr	r3, [pc, #156]	@ (801501c <UTIL_SEQ_Run+0x1e8>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8014f84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f88:	401a      	ands	r2, r3
 8014f8a:	4b20      	ldr	r3, [pc, #128]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	4013      	ands	r3, r2
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d005      	beq.n	8014fa0 <UTIL_SEQ_Run+0x16c>
 8014f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f98:	4013      	ands	r3, r2
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	f43f af64 	beq.w	8014e68 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8014fa0:	4b20      	ldr	r3, [pc, #128]	@ (8015024 <UTIL_SEQ_Run+0x1f0>)
 8014fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8014fa6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8014fa8:	f000 f8f8 	bl	801519c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fac:	f3ef 8310 	mrs	r3, PRIMASK
 8014fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8014fb2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8014fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8014fb6:	b672      	cpsid	i
}
 8014fb8:	bf00      	nop
  local_taskset = TaskSet;
 8014fba:	4b15      	ldr	r3, [pc, #84]	@ (8015010 <UTIL_SEQ_Run+0x1dc>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8014fc0:	4b14      	ldr	r3, [pc, #80]	@ (8015014 <UTIL_SEQ_Run+0x1e0>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8014fc6:	4b14      	ldr	r3, [pc, #80]	@ (8015018 <UTIL_SEQ_Run+0x1e4>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8014fcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fd0:	401a      	ands	r2, r3
 8014fd2:	4b0e      	ldr	r3, [pc, #56]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d107      	bne.n	8014fec <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8014fdc:	4b0f      	ldr	r3, [pc, #60]	@ (801501c <UTIL_SEQ_Run+0x1e8>)
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fe2:	4013      	ands	r3, r2
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d101      	bne.n	8014fec <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8014fe8:	f7f3 ff11 	bl	8008e0e <UTIL_SEQ_Idle>
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f383 8810 	msr	PRIMASK, r3
}
 8014ff6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8014ff8:	f000 f8d7 	bl	80151aa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8014ffc:	4a03      	ldr	r2, [pc, #12]	@ (801500c <UTIL_SEQ_Run+0x1d8>)
 8014ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015000:	6013      	str	r3, [r2, #0]

  return;
 8015002:	bf00      	nop
}
 8015004:	3740      	adds	r7, #64	@ 0x40
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop
 801500c:	20000084 	.word	0x20000084
 8015010:	20000798 	.word	0x20000798
 8015014:	2000079c 	.word	0x2000079c
 8015018:	20000080 	.word	0x20000080
 801501c:	200007a0 	.word	0x200007a0
 8015020:	20000828 	.word	0x20000828
 8015024:	200007a4 	.word	0x200007a4
 8015028:	200007a8 	.word	0x200007a8

0801502c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b088      	sub	sp, #32
 8015030:	af00      	add	r7, sp, #0
 8015032:	60f8      	str	r0, [r7, #12]
 8015034:	60b9      	str	r1, [r7, #8]
 8015036:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015038:	f3ef 8310 	mrs	r3, PRIMASK
 801503c:	617b      	str	r3, [r7, #20]
  return(result);
 801503e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8015040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015042:	b672      	cpsid	i
}
 8015044:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8015046:	68f8      	ldr	r0, [r7, #12]
 8015048:	f000 f8b6 	bl	80151b8 <SEQ_BitPosition>
 801504c:	4603      	mov	r3, r0
 801504e:	4619      	mov	r1, r3
 8015050:	4a06      	ldr	r2, [pc, #24]	@ (801506c <UTIL_SEQ_RegTask+0x40>)
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801505c:	69bb      	ldr	r3, [r7, #24]
 801505e:	f383 8810 	msr	PRIMASK, r3
}
 8015062:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8015064:	bf00      	nop
}
 8015066:	3720      	adds	r7, #32
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}
 801506c:	200007a8 	.word	0x200007a8

08015070 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8015070:	b480      	push	{r7}
 8015072:	b087      	sub	sp, #28
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801507a:	f3ef 8310 	mrs	r3, PRIMASK
 801507e:	60fb      	str	r3, [r7, #12]
  return(result);
 8015080:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015084:	b672      	cpsid	i
}
 8015086:	bf00      	nop

  TaskSet |= TaskId_bm;
 8015088:	4b0d      	ldr	r3, [pc, #52]	@ (80150c0 <UTIL_SEQ_SetTask+0x50>)
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4313      	orrs	r3, r2
 8015090:	4a0b      	ldr	r2, [pc, #44]	@ (80150c0 <UTIL_SEQ_SetTask+0x50>)
 8015092:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8015094:	4a0b      	ldr	r2, [pc, #44]	@ (80150c4 <UTIL_SEQ_SetTask+0x54>)
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	431a      	orrs	r2, r3
 80150a0:	4908      	ldr	r1, [pc, #32]	@ (80150c4 <UTIL_SEQ_SetTask+0x54>)
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	f383 8810 	msr	PRIMASK, r3
}
 80150b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80150b4:	bf00      	nop
}
 80150b6:	371c      	adds	r7, #28
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr
 80150c0:	20000798 	.word	0x20000798
 80150c4:	20000828 	.word	0x20000828

080150c8 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80150c8:	b480      	push	{r7}
 80150ca:	b087      	sub	sp, #28
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150d0:	f3ef 8310 	mrs	r3, PRIMASK
 80150d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80150d6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80150d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80150da:	b672      	cpsid	i
}
 80150dc:	bf00      	nop

  EvtSet |= EvtId_bm;
 80150de:	4b09      	ldr	r3, [pc, #36]	@ (8015104 <UTIL_SEQ_SetEvt+0x3c>)
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	4313      	orrs	r3, r2
 80150e6:	4a07      	ldr	r2, [pc, #28]	@ (8015104 <UTIL_SEQ_SetEvt+0x3c>)
 80150e8:	6013      	str	r3, [r2, #0]
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	f383 8810 	msr	PRIMASK, r3
}
 80150f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80150f6:	bf00      	nop
}
 80150f8:	371c      	adds	r7, #28
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop
 8015104:	2000079c 	.word	0x2000079c

08015108 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b088      	sub	sp, #32
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8015110:	4b1f      	ldr	r3, [pc, #124]	@ (8015190 <UTIL_SEQ_WaitEvt+0x88>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8015116:	4b1e      	ldr	r3, [pc, #120]	@ (8015190 <UTIL_SEQ_WaitEvt+0x88>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801511e:	d102      	bne.n	8015126 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8015120:	2300      	movs	r3, #0
 8015122:	61fb      	str	r3, [r7, #28]
 8015124:	e005      	b.n	8015132 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8015126:	4b1a      	ldr	r3, [pc, #104]	@ (8015190 <UTIL_SEQ_WaitEvt+0x88>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2201      	movs	r2, #1
 801512c:	fa02 f303 	lsl.w	r3, r2, r3
 8015130:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8015132:	4b18      	ldr	r3, [pc, #96]	@ (8015194 <UTIL_SEQ_WaitEvt+0x8c>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8015138:	4a16      	ldr	r2, [pc, #88]	@ (8015194 <UTIL_SEQ_WaitEvt+0x8c>)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801513e:	e003      	b.n	8015148 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8015140:	6879      	ldr	r1, [r7, #4]
 8015142:	69f8      	ldr	r0, [r7, #28]
 8015144:	f7f3 fe6a 	bl	8008e1c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8015148:	4b13      	ldr	r3, [pc, #76]	@ (8015198 <UTIL_SEQ_WaitEvt+0x90>)
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	4013      	ands	r3, r2
 8015150:	2b00      	cmp	r3, #0
 8015152:	d0f5      	beq.n	8015140 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8015154:	4a0e      	ldr	r2, [pc, #56]	@ (8015190 <UTIL_SEQ_WaitEvt+0x88>)
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801515a:	f3ef 8310 	mrs	r3, PRIMASK
 801515e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015160:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015164:	b672      	cpsid	i
}
 8015166:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	43da      	mvns	r2, r3
 801516c:	4b0a      	ldr	r3, [pc, #40]	@ (8015198 <UTIL_SEQ_WaitEvt+0x90>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	4013      	ands	r3, r2
 8015172:	4a09      	ldr	r2, [pc, #36]	@ (8015198 <UTIL_SEQ_WaitEvt+0x90>)
 8015174:	6013      	str	r3, [r2, #0]
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	f383 8810 	msr	PRIMASK, r3
}
 8015180:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8015182:	4a04      	ldr	r2, [pc, #16]	@ (8015194 <UTIL_SEQ_WaitEvt+0x8c>)
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	6013      	str	r3, [r2, #0]
  return;
 8015188:	bf00      	nop
}
 801518a:	3720      	adds	r7, #32
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	200007a4 	.word	0x200007a4
 8015194:	200007a0 	.word	0x200007a0
 8015198:	2000079c 	.word	0x2000079c

0801519c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801519c:	b480      	push	{r7}
 801519e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80151a0:	bf00      	nop
}
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr

080151aa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80151aa:	b480      	push	{r7}
 80151ac:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80151ae:	bf00      	nop
}
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80151b8:	b480      	push	{r7}
 80151ba:	b085      	sub	sp, #20
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80151c0:	2300      	movs	r3, #0
 80151c2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80151ce:	d204      	bcs.n	80151da <SEQ_BitPosition+0x22>
 80151d0:	2310      	movs	r3, #16
 80151d2:	73fb      	strb	r3, [r7, #15]
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	041b      	lsls	r3, r3, #16
 80151d8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80151e0:	d205      	bcs.n	80151ee <SEQ_BitPosition+0x36>
 80151e2:	7bfb      	ldrb	r3, [r7, #15]
 80151e4:	3308      	adds	r3, #8
 80151e6:	73fb      	strb	r3, [r7, #15]
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	021b      	lsls	r3, r3, #8
 80151ec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80151f4:	d205      	bcs.n	8015202 <SEQ_BitPosition+0x4a>
 80151f6:	7bfb      	ldrb	r3, [r7, #15]
 80151f8:	3304      	adds	r3, #4
 80151fa:	73fb      	strb	r3, [r7, #15]
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	011b      	lsls	r3, r3, #4
 8015200:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	0f1b      	lsrs	r3, r3, #28
 8015206:	4a07      	ldr	r2, [pc, #28]	@ (8015224 <SEQ_BitPosition+0x6c>)
 8015208:	5cd2      	ldrb	r2, [r2, r3]
 801520a:	7bfb      	ldrb	r3, [r7, #15]
 801520c:	4413      	add	r3, r2
 801520e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8015210:	7bfb      	ldrb	r3, [r7, #15]
 8015212:	f1c3 031f 	rsb	r3, r3, #31
 8015216:	b2db      	uxtb	r3, r3
}
 8015218:	4618      	mov	r0, r3
 801521a:	3714      	adds	r7, #20
 801521c:	46bd      	mov	sp, r7
 801521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015222:	4770      	bx	lr
 8015224:	080185b8 	.word	0x080185b8

08015228 <__assert_func>:
 8015228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801522a:	4614      	mov	r4, r2
 801522c:	461a      	mov	r2, r3
 801522e:	4b09      	ldr	r3, [pc, #36]	@ (8015254 <__assert_func+0x2c>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	4605      	mov	r5, r0
 8015234:	68d8      	ldr	r0, [r3, #12]
 8015236:	b954      	cbnz	r4, 801524e <__assert_func+0x26>
 8015238:	4b07      	ldr	r3, [pc, #28]	@ (8015258 <__assert_func+0x30>)
 801523a:	461c      	mov	r4, r3
 801523c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015240:	9100      	str	r1, [sp, #0]
 8015242:	462b      	mov	r3, r5
 8015244:	4905      	ldr	r1, [pc, #20]	@ (801525c <__assert_func+0x34>)
 8015246:	f000 f96f 	bl	8015528 <fiprintf>
 801524a:	f000 fc78 	bl	8015b3e <abort>
 801524e:	4b04      	ldr	r3, [pc, #16]	@ (8015260 <__assert_func+0x38>)
 8015250:	e7f4      	b.n	801523c <__assert_func+0x14>
 8015252:	bf00      	nop
 8015254:	20000094 	.word	0x20000094
 8015258:	08018603 	.word	0x08018603
 801525c:	080185d5 	.word	0x080185d5
 8015260:	080185c8 	.word	0x080185c8

08015264 <malloc>:
 8015264:	4b02      	ldr	r3, [pc, #8]	@ (8015270 <malloc+0xc>)
 8015266:	4601      	mov	r1, r0
 8015268:	6818      	ldr	r0, [r3, #0]
 801526a:	f000 b82d 	b.w	80152c8 <_malloc_r>
 801526e:	bf00      	nop
 8015270:	20000094 	.word	0x20000094

08015274 <free>:
 8015274:	4b02      	ldr	r3, [pc, #8]	@ (8015280 <free+0xc>)
 8015276:	4601      	mov	r1, r0
 8015278:	6818      	ldr	r0, [r3, #0]
 801527a:	f000 bc67 	b.w	8015b4c <_free_r>
 801527e:	bf00      	nop
 8015280:	20000094 	.word	0x20000094

08015284 <sbrk_aligned>:
 8015284:	b570      	push	{r4, r5, r6, lr}
 8015286:	4e0f      	ldr	r6, [pc, #60]	@ (80152c4 <sbrk_aligned+0x40>)
 8015288:	460c      	mov	r4, r1
 801528a:	6831      	ldr	r1, [r6, #0]
 801528c:	4605      	mov	r5, r0
 801528e:	b911      	cbnz	r1, 8015296 <sbrk_aligned+0x12>
 8015290:	f000 fbf6 	bl	8015a80 <_sbrk_r>
 8015294:	6030      	str	r0, [r6, #0]
 8015296:	4621      	mov	r1, r4
 8015298:	4628      	mov	r0, r5
 801529a:	f000 fbf1 	bl	8015a80 <_sbrk_r>
 801529e:	1c43      	adds	r3, r0, #1
 80152a0:	d103      	bne.n	80152aa <sbrk_aligned+0x26>
 80152a2:	f04f 34ff 	mov.w	r4, #4294967295
 80152a6:	4620      	mov	r0, r4
 80152a8:	bd70      	pop	{r4, r5, r6, pc}
 80152aa:	1cc4      	adds	r4, r0, #3
 80152ac:	f024 0403 	bic.w	r4, r4, #3
 80152b0:	42a0      	cmp	r0, r4
 80152b2:	d0f8      	beq.n	80152a6 <sbrk_aligned+0x22>
 80152b4:	1a21      	subs	r1, r4, r0
 80152b6:	4628      	mov	r0, r5
 80152b8:	f000 fbe2 	bl	8015a80 <_sbrk_r>
 80152bc:	3001      	adds	r0, #1
 80152be:	d1f2      	bne.n	80152a6 <sbrk_aligned+0x22>
 80152c0:	e7ef      	b.n	80152a2 <sbrk_aligned+0x1e>
 80152c2:	bf00      	nop
 80152c4:	20000838 	.word	0x20000838

080152c8 <_malloc_r>:
 80152c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152cc:	1ccd      	adds	r5, r1, #3
 80152ce:	f025 0503 	bic.w	r5, r5, #3
 80152d2:	3508      	adds	r5, #8
 80152d4:	2d0c      	cmp	r5, #12
 80152d6:	bf38      	it	cc
 80152d8:	250c      	movcc	r5, #12
 80152da:	2d00      	cmp	r5, #0
 80152dc:	4606      	mov	r6, r0
 80152de:	db01      	blt.n	80152e4 <_malloc_r+0x1c>
 80152e0:	42a9      	cmp	r1, r5
 80152e2:	d904      	bls.n	80152ee <_malloc_r+0x26>
 80152e4:	230c      	movs	r3, #12
 80152e6:	6033      	str	r3, [r6, #0]
 80152e8:	2000      	movs	r0, #0
 80152ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80153c4 <_malloc_r+0xfc>
 80152f2:	f000 f869 	bl	80153c8 <__malloc_lock>
 80152f6:	f8d8 3000 	ldr.w	r3, [r8]
 80152fa:	461c      	mov	r4, r3
 80152fc:	bb44      	cbnz	r4, 8015350 <_malloc_r+0x88>
 80152fe:	4629      	mov	r1, r5
 8015300:	4630      	mov	r0, r6
 8015302:	f7ff ffbf 	bl	8015284 <sbrk_aligned>
 8015306:	1c43      	adds	r3, r0, #1
 8015308:	4604      	mov	r4, r0
 801530a:	d158      	bne.n	80153be <_malloc_r+0xf6>
 801530c:	f8d8 4000 	ldr.w	r4, [r8]
 8015310:	4627      	mov	r7, r4
 8015312:	2f00      	cmp	r7, #0
 8015314:	d143      	bne.n	801539e <_malloc_r+0xd6>
 8015316:	2c00      	cmp	r4, #0
 8015318:	d04b      	beq.n	80153b2 <_malloc_r+0xea>
 801531a:	6823      	ldr	r3, [r4, #0]
 801531c:	4639      	mov	r1, r7
 801531e:	4630      	mov	r0, r6
 8015320:	eb04 0903 	add.w	r9, r4, r3
 8015324:	f000 fbac 	bl	8015a80 <_sbrk_r>
 8015328:	4581      	cmp	r9, r0
 801532a:	d142      	bne.n	80153b2 <_malloc_r+0xea>
 801532c:	6821      	ldr	r1, [r4, #0]
 801532e:	1a6d      	subs	r5, r5, r1
 8015330:	4629      	mov	r1, r5
 8015332:	4630      	mov	r0, r6
 8015334:	f7ff ffa6 	bl	8015284 <sbrk_aligned>
 8015338:	3001      	adds	r0, #1
 801533a:	d03a      	beq.n	80153b2 <_malloc_r+0xea>
 801533c:	6823      	ldr	r3, [r4, #0]
 801533e:	442b      	add	r3, r5
 8015340:	6023      	str	r3, [r4, #0]
 8015342:	f8d8 3000 	ldr.w	r3, [r8]
 8015346:	685a      	ldr	r2, [r3, #4]
 8015348:	bb62      	cbnz	r2, 80153a4 <_malloc_r+0xdc>
 801534a:	f8c8 7000 	str.w	r7, [r8]
 801534e:	e00f      	b.n	8015370 <_malloc_r+0xa8>
 8015350:	6822      	ldr	r2, [r4, #0]
 8015352:	1b52      	subs	r2, r2, r5
 8015354:	d420      	bmi.n	8015398 <_malloc_r+0xd0>
 8015356:	2a0b      	cmp	r2, #11
 8015358:	d917      	bls.n	801538a <_malloc_r+0xc2>
 801535a:	1961      	adds	r1, r4, r5
 801535c:	42a3      	cmp	r3, r4
 801535e:	6025      	str	r5, [r4, #0]
 8015360:	bf18      	it	ne
 8015362:	6059      	strne	r1, [r3, #4]
 8015364:	6863      	ldr	r3, [r4, #4]
 8015366:	bf08      	it	eq
 8015368:	f8c8 1000 	streq.w	r1, [r8]
 801536c:	5162      	str	r2, [r4, r5]
 801536e:	604b      	str	r3, [r1, #4]
 8015370:	4630      	mov	r0, r6
 8015372:	f000 f82f 	bl	80153d4 <__malloc_unlock>
 8015376:	f104 000b 	add.w	r0, r4, #11
 801537a:	1d23      	adds	r3, r4, #4
 801537c:	f020 0007 	bic.w	r0, r0, #7
 8015380:	1ac2      	subs	r2, r0, r3
 8015382:	bf1c      	itt	ne
 8015384:	1a1b      	subne	r3, r3, r0
 8015386:	50a3      	strne	r3, [r4, r2]
 8015388:	e7af      	b.n	80152ea <_malloc_r+0x22>
 801538a:	6862      	ldr	r2, [r4, #4]
 801538c:	42a3      	cmp	r3, r4
 801538e:	bf0c      	ite	eq
 8015390:	f8c8 2000 	streq.w	r2, [r8]
 8015394:	605a      	strne	r2, [r3, #4]
 8015396:	e7eb      	b.n	8015370 <_malloc_r+0xa8>
 8015398:	4623      	mov	r3, r4
 801539a:	6864      	ldr	r4, [r4, #4]
 801539c:	e7ae      	b.n	80152fc <_malloc_r+0x34>
 801539e:	463c      	mov	r4, r7
 80153a0:	687f      	ldr	r7, [r7, #4]
 80153a2:	e7b6      	b.n	8015312 <_malloc_r+0x4a>
 80153a4:	461a      	mov	r2, r3
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	42a3      	cmp	r3, r4
 80153aa:	d1fb      	bne.n	80153a4 <_malloc_r+0xdc>
 80153ac:	2300      	movs	r3, #0
 80153ae:	6053      	str	r3, [r2, #4]
 80153b0:	e7de      	b.n	8015370 <_malloc_r+0xa8>
 80153b2:	230c      	movs	r3, #12
 80153b4:	6033      	str	r3, [r6, #0]
 80153b6:	4630      	mov	r0, r6
 80153b8:	f000 f80c 	bl	80153d4 <__malloc_unlock>
 80153bc:	e794      	b.n	80152e8 <_malloc_r+0x20>
 80153be:	6005      	str	r5, [r0, #0]
 80153c0:	e7d6      	b.n	8015370 <_malloc_r+0xa8>
 80153c2:	bf00      	nop
 80153c4:	2000083c 	.word	0x2000083c

080153c8 <__malloc_lock>:
 80153c8:	4801      	ldr	r0, [pc, #4]	@ (80153d0 <__malloc_lock+0x8>)
 80153ca:	f000 bba6 	b.w	8015b1a <__retarget_lock_acquire_recursive>
 80153ce:	bf00      	nop
 80153d0:	20000980 	.word	0x20000980

080153d4 <__malloc_unlock>:
 80153d4:	4801      	ldr	r0, [pc, #4]	@ (80153dc <__malloc_unlock+0x8>)
 80153d6:	f000 bba1 	b.w	8015b1c <__retarget_lock_release_recursive>
 80153da:	bf00      	nop
 80153dc:	20000980 	.word	0x20000980

080153e0 <std>:
 80153e0:	2300      	movs	r3, #0
 80153e2:	b510      	push	{r4, lr}
 80153e4:	4604      	mov	r4, r0
 80153e6:	e9c0 3300 	strd	r3, r3, [r0]
 80153ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153ee:	6083      	str	r3, [r0, #8]
 80153f0:	8181      	strh	r1, [r0, #12]
 80153f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80153f4:	81c2      	strh	r2, [r0, #14]
 80153f6:	6183      	str	r3, [r0, #24]
 80153f8:	4619      	mov	r1, r3
 80153fa:	2208      	movs	r2, #8
 80153fc:	305c      	adds	r0, #92	@ 0x5c
 80153fe:	f000 fadf 	bl	80159c0 <memset>
 8015402:	4b0d      	ldr	r3, [pc, #52]	@ (8015438 <std+0x58>)
 8015404:	6263      	str	r3, [r4, #36]	@ 0x24
 8015406:	4b0d      	ldr	r3, [pc, #52]	@ (801543c <std+0x5c>)
 8015408:	62a3      	str	r3, [r4, #40]	@ 0x28
 801540a:	4b0d      	ldr	r3, [pc, #52]	@ (8015440 <std+0x60>)
 801540c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801540e:	4b0d      	ldr	r3, [pc, #52]	@ (8015444 <std+0x64>)
 8015410:	6323      	str	r3, [r4, #48]	@ 0x30
 8015412:	4b0d      	ldr	r3, [pc, #52]	@ (8015448 <std+0x68>)
 8015414:	6224      	str	r4, [r4, #32]
 8015416:	429c      	cmp	r4, r3
 8015418:	d006      	beq.n	8015428 <std+0x48>
 801541a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801541e:	4294      	cmp	r4, r2
 8015420:	d002      	beq.n	8015428 <std+0x48>
 8015422:	33d0      	adds	r3, #208	@ 0xd0
 8015424:	429c      	cmp	r4, r3
 8015426:	d105      	bne.n	8015434 <std+0x54>
 8015428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015430:	f000 bb72 	b.w	8015b18 <__retarget_lock_init_recursive>
 8015434:	bd10      	pop	{r4, pc}
 8015436:	bf00      	nop
 8015438:	08015811 	.word	0x08015811
 801543c:	08015833 	.word	0x08015833
 8015440:	0801586b 	.word	0x0801586b
 8015444:	0801588f 	.word	0x0801588f
 8015448:	20000840 	.word	0x20000840

0801544c <stdio_exit_handler>:
 801544c:	4a02      	ldr	r2, [pc, #8]	@ (8015458 <stdio_exit_handler+0xc>)
 801544e:	4903      	ldr	r1, [pc, #12]	@ (801545c <stdio_exit_handler+0x10>)
 8015450:	4803      	ldr	r0, [pc, #12]	@ (8015460 <stdio_exit_handler+0x14>)
 8015452:	f000 b87b 	b.w	801554c <_fwalk_sglue>
 8015456:	bf00      	nop
 8015458:	20000088 	.word	0x20000088
 801545c:	08016539 	.word	0x08016539
 8015460:	20000098 	.word	0x20000098

08015464 <cleanup_stdio>:
 8015464:	6841      	ldr	r1, [r0, #4]
 8015466:	4b0c      	ldr	r3, [pc, #48]	@ (8015498 <cleanup_stdio+0x34>)
 8015468:	4299      	cmp	r1, r3
 801546a:	b510      	push	{r4, lr}
 801546c:	4604      	mov	r4, r0
 801546e:	d001      	beq.n	8015474 <cleanup_stdio+0x10>
 8015470:	f001 f862 	bl	8016538 <_fflush_r>
 8015474:	68a1      	ldr	r1, [r4, #8]
 8015476:	4b09      	ldr	r3, [pc, #36]	@ (801549c <cleanup_stdio+0x38>)
 8015478:	4299      	cmp	r1, r3
 801547a:	d002      	beq.n	8015482 <cleanup_stdio+0x1e>
 801547c:	4620      	mov	r0, r4
 801547e:	f001 f85b 	bl	8016538 <_fflush_r>
 8015482:	68e1      	ldr	r1, [r4, #12]
 8015484:	4b06      	ldr	r3, [pc, #24]	@ (80154a0 <cleanup_stdio+0x3c>)
 8015486:	4299      	cmp	r1, r3
 8015488:	d004      	beq.n	8015494 <cleanup_stdio+0x30>
 801548a:	4620      	mov	r0, r4
 801548c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015490:	f001 b852 	b.w	8016538 <_fflush_r>
 8015494:	bd10      	pop	{r4, pc}
 8015496:	bf00      	nop
 8015498:	20000840 	.word	0x20000840
 801549c:	200008a8 	.word	0x200008a8
 80154a0:	20000910 	.word	0x20000910

080154a4 <global_stdio_init.part.0>:
 80154a4:	b510      	push	{r4, lr}
 80154a6:	4b0b      	ldr	r3, [pc, #44]	@ (80154d4 <global_stdio_init.part.0+0x30>)
 80154a8:	4c0b      	ldr	r4, [pc, #44]	@ (80154d8 <global_stdio_init.part.0+0x34>)
 80154aa:	4a0c      	ldr	r2, [pc, #48]	@ (80154dc <global_stdio_init.part.0+0x38>)
 80154ac:	601a      	str	r2, [r3, #0]
 80154ae:	4620      	mov	r0, r4
 80154b0:	2200      	movs	r2, #0
 80154b2:	2104      	movs	r1, #4
 80154b4:	f7ff ff94 	bl	80153e0 <std>
 80154b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80154bc:	2201      	movs	r2, #1
 80154be:	2109      	movs	r1, #9
 80154c0:	f7ff ff8e 	bl	80153e0 <std>
 80154c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80154c8:	2202      	movs	r2, #2
 80154ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154ce:	2112      	movs	r1, #18
 80154d0:	f7ff bf86 	b.w	80153e0 <std>
 80154d4:	20000978 	.word	0x20000978
 80154d8:	20000840 	.word	0x20000840
 80154dc:	0801544d 	.word	0x0801544d

080154e0 <__sfp_lock_acquire>:
 80154e0:	4801      	ldr	r0, [pc, #4]	@ (80154e8 <__sfp_lock_acquire+0x8>)
 80154e2:	f000 bb1a 	b.w	8015b1a <__retarget_lock_acquire_recursive>
 80154e6:	bf00      	nop
 80154e8:	20000981 	.word	0x20000981

080154ec <__sfp_lock_release>:
 80154ec:	4801      	ldr	r0, [pc, #4]	@ (80154f4 <__sfp_lock_release+0x8>)
 80154ee:	f000 bb15 	b.w	8015b1c <__retarget_lock_release_recursive>
 80154f2:	bf00      	nop
 80154f4:	20000981 	.word	0x20000981

080154f8 <__sinit>:
 80154f8:	b510      	push	{r4, lr}
 80154fa:	4604      	mov	r4, r0
 80154fc:	f7ff fff0 	bl	80154e0 <__sfp_lock_acquire>
 8015500:	6a23      	ldr	r3, [r4, #32]
 8015502:	b11b      	cbz	r3, 801550c <__sinit+0x14>
 8015504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015508:	f7ff bff0 	b.w	80154ec <__sfp_lock_release>
 801550c:	4b04      	ldr	r3, [pc, #16]	@ (8015520 <__sinit+0x28>)
 801550e:	6223      	str	r3, [r4, #32]
 8015510:	4b04      	ldr	r3, [pc, #16]	@ (8015524 <__sinit+0x2c>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d1f5      	bne.n	8015504 <__sinit+0xc>
 8015518:	f7ff ffc4 	bl	80154a4 <global_stdio_init.part.0>
 801551c:	e7f2      	b.n	8015504 <__sinit+0xc>
 801551e:	bf00      	nop
 8015520:	08015465 	.word	0x08015465
 8015524:	20000978 	.word	0x20000978

08015528 <fiprintf>:
 8015528:	b40e      	push	{r1, r2, r3}
 801552a:	b503      	push	{r0, r1, lr}
 801552c:	4601      	mov	r1, r0
 801552e:	ab03      	add	r3, sp, #12
 8015530:	4805      	ldr	r0, [pc, #20]	@ (8015548 <fiprintf+0x20>)
 8015532:	f853 2b04 	ldr.w	r2, [r3], #4
 8015536:	6800      	ldr	r0, [r0, #0]
 8015538:	9301      	str	r3, [sp, #4]
 801553a:	f000 fcd3 	bl	8015ee4 <_vfiprintf_r>
 801553e:	b002      	add	sp, #8
 8015540:	f85d eb04 	ldr.w	lr, [sp], #4
 8015544:	b003      	add	sp, #12
 8015546:	4770      	bx	lr
 8015548:	20000094 	.word	0x20000094

0801554c <_fwalk_sglue>:
 801554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015550:	4607      	mov	r7, r0
 8015552:	4688      	mov	r8, r1
 8015554:	4614      	mov	r4, r2
 8015556:	2600      	movs	r6, #0
 8015558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801555c:	f1b9 0901 	subs.w	r9, r9, #1
 8015560:	d505      	bpl.n	801556e <_fwalk_sglue+0x22>
 8015562:	6824      	ldr	r4, [r4, #0]
 8015564:	2c00      	cmp	r4, #0
 8015566:	d1f7      	bne.n	8015558 <_fwalk_sglue+0xc>
 8015568:	4630      	mov	r0, r6
 801556a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801556e:	89ab      	ldrh	r3, [r5, #12]
 8015570:	2b01      	cmp	r3, #1
 8015572:	d907      	bls.n	8015584 <_fwalk_sglue+0x38>
 8015574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015578:	3301      	adds	r3, #1
 801557a:	d003      	beq.n	8015584 <_fwalk_sglue+0x38>
 801557c:	4629      	mov	r1, r5
 801557e:	4638      	mov	r0, r7
 8015580:	47c0      	blx	r8
 8015582:	4306      	orrs	r6, r0
 8015584:	3568      	adds	r5, #104	@ 0x68
 8015586:	e7e9      	b.n	801555c <_fwalk_sglue+0x10>

08015588 <iprintf>:
 8015588:	b40f      	push	{r0, r1, r2, r3}
 801558a:	b507      	push	{r0, r1, r2, lr}
 801558c:	4906      	ldr	r1, [pc, #24]	@ (80155a8 <iprintf+0x20>)
 801558e:	ab04      	add	r3, sp, #16
 8015590:	6808      	ldr	r0, [r1, #0]
 8015592:	f853 2b04 	ldr.w	r2, [r3], #4
 8015596:	6881      	ldr	r1, [r0, #8]
 8015598:	9301      	str	r3, [sp, #4]
 801559a:	f000 fca3 	bl	8015ee4 <_vfiprintf_r>
 801559e:	b003      	add	sp, #12
 80155a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80155a4:	b004      	add	sp, #16
 80155a6:	4770      	bx	lr
 80155a8:	20000094 	.word	0x20000094

080155ac <_puts_r>:
 80155ac:	6a03      	ldr	r3, [r0, #32]
 80155ae:	b570      	push	{r4, r5, r6, lr}
 80155b0:	6884      	ldr	r4, [r0, #8]
 80155b2:	4605      	mov	r5, r0
 80155b4:	460e      	mov	r6, r1
 80155b6:	b90b      	cbnz	r3, 80155bc <_puts_r+0x10>
 80155b8:	f7ff ff9e 	bl	80154f8 <__sinit>
 80155bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80155be:	07db      	lsls	r3, r3, #31
 80155c0:	d405      	bmi.n	80155ce <_puts_r+0x22>
 80155c2:	89a3      	ldrh	r3, [r4, #12]
 80155c4:	0598      	lsls	r0, r3, #22
 80155c6:	d402      	bmi.n	80155ce <_puts_r+0x22>
 80155c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80155ca:	f000 faa6 	bl	8015b1a <__retarget_lock_acquire_recursive>
 80155ce:	89a3      	ldrh	r3, [r4, #12]
 80155d0:	0719      	lsls	r1, r3, #28
 80155d2:	d502      	bpl.n	80155da <_puts_r+0x2e>
 80155d4:	6923      	ldr	r3, [r4, #16]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d135      	bne.n	8015646 <_puts_r+0x9a>
 80155da:	4621      	mov	r1, r4
 80155dc:	4628      	mov	r0, r5
 80155de:	f000 f999 	bl	8015914 <__swsetup_r>
 80155e2:	b380      	cbz	r0, 8015646 <_puts_r+0x9a>
 80155e4:	f04f 35ff 	mov.w	r5, #4294967295
 80155e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80155ea:	07da      	lsls	r2, r3, #31
 80155ec:	d405      	bmi.n	80155fa <_puts_r+0x4e>
 80155ee:	89a3      	ldrh	r3, [r4, #12]
 80155f0:	059b      	lsls	r3, r3, #22
 80155f2:	d402      	bmi.n	80155fa <_puts_r+0x4e>
 80155f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80155f6:	f000 fa91 	bl	8015b1c <__retarget_lock_release_recursive>
 80155fa:	4628      	mov	r0, r5
 80155fc:	bd70      	pop	{r4, r5, r6, pc}
 80155fe:	2b00      	cmp	r3, #0
 8015600:	da04      	bge.n	801560c <_puts_r+0x60>
 8015602:	69a2      	ldr	r2, [r4, #24]
 8015604:	429a      	cmp	r2, r3
 8015606:	dc17      	bgt.n	8015638 <_puts_r+0x8c>
 8015608:	290a      	cmp	r1, #10
 801560a:	d015      	beq.n	8015638 <_puts_r+0x8c>
 801560c:	6823      	ldr	r3, [r4, #0]
 801560e:	1c5a      	adds	r2, r3, #1
 8015610:	6022      	str	r2, [r4, #0]
 8015612:	7019      	strb	r1, [r3, #0]
 8015614:	68a3      	ldr	r3, [r4, #8]
 8015616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801561a:	3b01      	subs	r3, #1
 801561c:	60a3      	str	r3, [r4, #8]
 801561e:	2900      	cmp	r1, #0
 8015620:	d1ed      	bne.n	80155fe <_puts_r+0x52>
 8015622:	2b00      	cmp	r3, #0
 8015624:	da11      	bge.n	801564a <_puts_r+0x9e>
 8015626:	4622      	mov	r2, r4
 8015628:	210a      	movs	r1, #10
 801562a:	4628      	mov	r0, r5
 801562c:	f000 f933 	bl	8015896 <__swbuf_r>
 8015630:	3001      	adds	r0, #1
 8015632:	d0d7      	beq.n	80155e4 <_puts_r+0x38>
 8015634:	250a      	movs	r5, #10
 8015636:	e7d7      	b.n	80155e8 <_puts_r+0x3c>
 8015638:	4622      	mov	r2, r4
 801563a:	4628      	mov	r0, r5
 801563c:	f000 f92b 	bl	8015896 <__swbuf_r>
 8015640:	3001      	adds	r0, #1
 8015642:	d1e7      	bne.n	8015614 <_puts_r+0x68>
 8015644:	e7ce      	b.n	80155e4 <_puts_r+0x38>
 8015646:	3e01      	subs	r6, #1
 8015648:	e7e4      	b.n	8015614 <_puts_r+0x68>
 801564a:	6823      	ldr	r3, [r4, #0]
 801564c:	1c5a      	adds	r2, r3, #1
 801564e:	6022      	str	r2, [r4, #0]
 8015650:	220a      	movs	r2, #10
 8015652:	701a      	strb	r2, [r3, #0]
 8015654:	e7ee      	b.n	8015634 <_puts_r+0x88>
	...

08015658 <puts>:
 8015658:	4b02      	ldr	r3, [pc, #8]	@ (8015664 <puts+0xc>)
 801565a:	4601      	mov	r1, r0
 801565c:	6818      	ldr	r0, [r3, #0]
 801565e:	f7ff bfa5 	b.w	80155ac <_puts_r>
 8015662:	bf00      	nop
 8015664:	20000094 	.word	0x20000094

08015668 <setvbuf>:
 8015668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801566c:	461d      	mov	r5, r3
 801566e:	4b57      	ldr	r3, [pc, #348]	@ (80157cc <setvbuf+0x164>)
 8015670:	681f      	ldr	r7, [r3, #0]
 8015672:	4604      	mov	r4, r0
 8015674:	460e      	mov	r6, r1
 8015676:	4690      	mov	r8, r2
 8015678:	b127      	cbz	r7, 8015684 <setvbuf+0x1c>
 801567a:	6a3b      	ldr	r3, [r7, #32]
 801567c:	b913      	cbnz	r3, 8015684 <setvbuf+0x1c>
 801567e:	4638      	mov	r0, r7
 8015680:	f7ff ff3a 	bl	80154f8 <__sinit>
 8015684:	f1b8 0f02 	cmp.w	r8, #2
 8015688:	d006      	beq.n	8015698 <setvbuf+0x30>
 801568a:	f1b8 0f01 	cmp.w	r8, #1
 801568e:	f200 809a 	bhi.w	80157c6 <setvbuf+0x15e>
 8015692:	2d00      	cmp	r5, #0
 8015694:	f2c0 8097 	blt.w	80157c6 <setvbuf+0x15e>
 8015698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801569a:	07d9      	lsls	r1, r3, #31
 801569c:	d405      	bmi.n	80156aa <setvbuf+0x42>
 801569e:	89a3      	ldrh	r3, [r4, #12]
 80156a0:	059a      	lsls	r2, r3, #22
 80156a2:	d402      	bmi.n	80156aa <setvbuf+0x42>
 80156a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80156a6:	f000 fa38 	bl	8015b1a <__retarget_lock_acquire_recursive>
 80156aa:	4621      	mov	r1, r4
 80156ac:	4638      	mov	r0, r7
 80156ae:	f000 ff43 	bl	8016538 <_fflush_r>
 80156b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80156b4:	b141      	cbz	r1, 80156c8 <setvbuf+0x60>
 80156b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80156ba:	4299      	cmp	r1, r3
 80156bc:	d002      	beq.n	80156c4 <setvbuf+0x5c>
 80156be:	4638      	mov	r0, r7
 80156c0:	f000 fa44 	bl	8015b4c <_free_r>
 80156c4:	2300      	movs	r3, #0
 80156c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80156c8:	2300      	movs	r3, #0
 80156ca:	61a3      	str	r3, [r4, #24]
 80156cc:	6063      	str	r3, [r4, #4]
 80156ce:	89a3      	ldrh	r3, [r4, #12]
 80156d0:	061b      	lsls	r3, r3, #24
 80156d2:	d503      	bpl.n	80156dc <setvbuf+0x74>
 80156d4:	6921      	ldr	r1, [r4, #16]
 80156d6:	4638      	mov	r0, r7
 80156d8:	f000 fa38 	bl	8015b4c <_free_r>
 80156dc:	89a3      	ldrh	r3, [r4, #12]
 80156de:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80156e2:	f023 0303 	bic.w	r3, r3, #3
 80156e6:	f1b8 0f02 	cmp.w	r8, #2
 80156ea:	81a3      	strh	r3, [r4, #12]
 80156ec:	d061      	beq.n	80157b2 <setvbuf+0x14a>
 80156ee:	ab01      	add	r3, sp, #4
 80156f0:	466a      	mov	r2, sp
 80156f2:	4621      	mov	r1, r4
 80156f4:	4638      	mov	r0, r7
 80156f6:	f000 ff47 	bl	8016588 <__swhatbuf_r>
 80156fa:	89a3      	ldrh	r3, [r4, #12]
 80156fc:	4318      	orrs	r0, r3
 80156fe:	81a0      	strh	r0, [r4, #12]
 8015700:	bb2d      	cbnz	r5, 801574e <setvbuf+0xe6>
 8015702:	9d00      	ldr	r5, [sp, #0]
 8015704:	4628      	mov	r0, r5
 8015706:	f7ff fdad 	bl	8015264 <malloc>
 801570a:	4606      	mov	r6, r0
 801570c:	2800      	cmp	r0, #0
 801570e:	d152      	bne.n	80157b6 <setvbuf+0x14e>
 8015710:	f8dd 9000 	ldr.w	r9, [sp]
 8015714:	45a9      	cmp	r9, r5
 8015716:	d140      	bne.n	801579a <setvbuf+0x132>
 8015718:	f04f 35ff 	mov.w	r5, #4294967295
 801571c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015720:	f043 0202 	orr.w	r2, r3, #2
 8015724:	81a2      	strh	r2, [r4, #12]
 8015726:	2200      	movs	r2, #0
 8015728:	60a2      	str	r2, [r4, #8]
 801572a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801572e:	6022      	str	r2, [r4, #0]
 8015730:	6122      	str	r2, [r4, #16]
 8015732:	2201      	movs	r2, #1
 8015734:	6162      	str	r2, [r4, #20]
 8015736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015738:	07d6      	lsls	r6, r2, #31
 801573a:	d404      	bmi.n	8015746 <setvbuf+0xde>
 801573c:	0598      	lsls	r0, r3, #22
 801573e:	d402      	bmi.n	8015746 <setvbuf+0xde>
 8015740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015742:	f000 f9eb 	bl	8015b1c <__retarget_lock_release_recursive>
 8015746:	4628      	mov	r0, r5
 8015748:	b003      	add	sp, #12
 801574a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801574e:	2e00      	cmp	r6, #0
 8015750:	d0d8      	beq.n	8015704 <setvbuf+0x9c>
 8015752:	6a3b      	ldr	r3, [r7, #32]
 8015754:	b913      	cbnz	r3, 801575c <setvbuf+0xf4>
 8015756:	4638      	mov	r0, r7
 8015758:	f7ff fece 	bl	80154f8 <__sinit>
 801575c:	f1b8 0f01 	cmp.w	r8, #1
 8015760:	bf08      	it	eq
 8015762:	89a3      	ldrheq	r3, [r4, #12]
 8015764:	6026      	str	r6, [r4, #0]
 8015766:	bf04      	itt	eq
 8015768:	f043 0301 	orreq.w	r3, r3, #1
 801576c:	81a3      	strheq	r3, [r4, #12]
 801576e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015772:	f013 0208 	ands.w	r2, r3, #8
 8015776:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801577a:	d01e      	beq.n	80157ba <setvbuf+0x152>
 801577c:	07d9      	lsls	r1, r3, #31
 801577e:	bf41      	itttt	mi
 8015780:	2200      	movmi	r2, #0
 8015782:	426d      	negmi	r5, r5
 8015784:	60a2      	strmi	r2, [r4, #8]
 8015786:	61a5      	strmi	r5, [r4, #24]
 8015788:	bf58      	it	pl
 801578a:	60a5      	strpl	r5, [r4, #8]
 801578c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801578e:	07d2      	lsls	r2, r2, #31
 8015790:	d401      	bmi.n	8015796 <setvbuf+0x12e>
 8015792:	059b      	lsls	r3, r3, #22
 8015794:	d513      	bpl.n	80157be <setvbuf+0x156>
 8015796:	2500      	movs	r5, #0
 8015798:	e7d5      	b.n	8015746 <setvbuf+0xde>
 801579a:	4648      	mov	r0, r9
 801579c:	f7ff fd62 	bl	8015264 <malloc>
 80157a0:	4606      	mov	r6, r0
 80157a2:	2800      	cmp	r0, #0
 80157a4:	d0b8      	beq.n	8015718 <setvbuf+0xb0>
 80157a6:	89a3      	ldrh	r3, [r4, #12]
 80157a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80157ac:	81a3      	strh	r3, [r4, #12]
 80157ae:	464d      	mov	r5, r9
 80157b0:	e7cf      	b.n	8015752 <setvbuf+0xea>
 80157b2:	2500      	movs	r5, #0
 80157b4:	e7b2      	b.n	801571c <setvbuf+0xb4>
 80157b6:	46a9      	mov	r9, r5
 80157b8:	e7f5      	b.n	80157a6 <setvbuf+0x13e>
 80157ba:	60a2      	str	r2, [r4, #8]
 80157bc:	e7e6      	b.n	801578c <setvbuf+0x124>
 80157be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157c0:	f000 f9ac 	bl	8015b1c <__retarget_lock_release_recursive>
 80157c4:	e7e7      	b.n	8015796 <setvbuf+0x12e>
 80157c6:	f04f 35ff 	mov.w	r5, #4294967295
 80157ca:	e7bc      	b.n	8015746 <setvbuf+0xde>
 80157cc:	20000094 	.word	0x20000094

080157d0 <siprintf>:
 80157d0:	b40e      	push	{r1, r2, r3}
 80157d2:	b500      	push	{lr}
 80157d4:	b09c      	sub	sp, #112	@ 0x70
 80157d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80157d8:	9002      	str	r0, [sp, #8]
 80157da:	9006      	str	r0, [sp, #24]
 80157dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80157e0:	4809      	ldr	r0, [pc, #36]	@ (8015808 <siprintf+0x38>)
 80157e2:	9107      	str	r1, [sp, #28]
 80157e4:	9104      	str	r1, [sp, #16]
 80157e6:	4909      	ldr	r1, [pc, #36]	@ (801580c <siprintf+0x3c>)
 80157e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80157ec:	9105      	str	r1, [sp, #20]
 80157ee:	6800      	ldr	r0, [r0, #0]
 80157f0:	9301      	str	r3, [sp, #4]
 80157f2:	a902      	add	r1, sp, #8
 80157f4:	f000 fa50 	bl	8015c98 <_svfiprintf_r>
 80157f8:	9b02      	ldr	r3, [sp, #8]
 80157fa:	2200      	movs	r2, #0
 80157fc:	701a      	strb	r2, [r3, #0]
 80157fe:	b01c      	add	sp, #112	@ 0x70
 8015800:	f85d eb04 	ldr.w	lr, [sp], #4
 8015804:	b003      	add	sp, #12
 8015806:	4770      	bx	lr
 8015808:	20000094 	.word	0x20000094
 801580c:	ffff0208 	.word	0xffff0208

08015810 <__sread>:
 8015810:	b510      	push	{r4, lr}
 8015812:	460c      	mov	r4, r1
 8015814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015818:	f000 f920 	bl	8015a5c <_read_r>
 801581c:	2800      	cmp	r0, #0
 801581e:	bfab      	itete	ge
 8015820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015822:	89a3      	ldrhlt	r3, [r4, #12]
 8015824:	181b      	addge	r3, r3, r0
 8015826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801582a:	bfac      	ite	ge
 801582c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801582e:	81a3      	strhlt	r3, [r4, #12]
 8015830:	bd10      	pop	{r4, pc}

08015832 <__swrite>:
 8015832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015836:	461f      	mov	r7, r3
 8015838:	898b      	ldrh	r3, [r1, #12]
 801583a:	05db      	lsls	r3, r3, #23
 801583c:	4605      	mov	r5, r0
 801583e:	460c      	mov	r4, r1
 8015840:	4616      	mov	r6, r2
 8015842:	d505      	bpl.n	8015850 <__swrite+0x1e>
 8015844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015848:	2302      	movs	r3, #2
 801584a:	2200      	movs	r2, #0
 801584c:	f000 f8f4 	bl	8015a38 <_lseek_r>
 8015850:	89a3      	ldrh	r3, [r4, #12]
 8015852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015856:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801585a:	81a3      	strh	r3, [r4, #12]
 801585c:	4632      	mov	r2, r6
 801585e:	463b      	mov	r3, r7
 8015860:	4628      	mov	r0, r5
 8015862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015866:	f000 b91b 	b.w	8015aa0 <_write_r>

0801586a <__sseek>:
 801586a:	b510      	push	{r4, lr}
 801586c:	460c      	mov	r4, r1
 801586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015872:	f000 f8e1 	bl	8015a38 <_lseek_r>
 8015876:	1c43      	adds	r3, r0, #1
 8015878:	89a3      	ldrh	r3, [r4, #12]
 801587a:	bf15      	itete	ne
 801587c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801587e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015886:	81a3      	strheq	r3, [r4, #12]
 8015888:	bf18      	it	ne
 801588a:	81a3      	strhne	r3, [r4, #12]
 801588c:	bd10      	pop	{r4, pc}

0801588e <__sclose>:
 801588e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015892:	f000 b8c1 	b.w	8015a18 <_close_r>

08015896 <__swbuf_r>:
 8015896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015898:	460e      	mov	r6, r1
 801589a:	4614      	mov	r4, r2
 801589c:	4605      	mov	r5, r0
 801589e:	b118      	cbz	r0, 80158a8 <__swbuf_r+0x12>
 80158a0:	6a03      	ldr	r3, [r0, #32]
 80158a2:	b90b      	cbnz	r3, 80158a8 <__swbuf_r+0x12>
 80158a4:	f7ff fe28 	bl	80154f8 <__sinit>
 80158a8:	69a3      	ldr	r3, [r4, #24]
 80158aa:	60a3      	str	r3, [r4, #8]
 80158ac:	89a3      	ldrh	r3, [r4, #12]
 80158ae:	071a      	lsls	r2, r3, #28
 80158b0:	d501      	bpl.n	80158b6 <__swbuf_r+0x20>
 80158b2:	6923      	ldr	r3, [r4, #16]
 80158b4:	b943      	cbnz	r3, 80158c8 <__swbuf_r+0x32>
 80158b6:	4621      	mov	r1, r4
 80158b8:	4628      	mov	r0, r5
 80158ba:	f000 f82b 	bl	8015914 <__swsetup_r>
 80158be:	b118      	cbz	r0, 80158c8 <__swbuf_r+0x32>
 80158c0:	f04f 37ff 	mov.w	r7, #4294967295
 80158c4:	4638      	mov	r0, r7
 80158c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158c8:	6823      	ldr	r3, [r4, #0]
 80158ca:	6922      	ldr	r2, [r4, #16]
 80158cc:	1a98      	subs	r0, r3, r2
 80158ce:	6963      	ldr	r3, [r4, #20]
 80158d0:	b2f6      	uxtb	r6, r6
 80158d2:	4283      	cmp	r3, r0
 80158d4:	4637      	mov	r7, r6
 80158d6:	dc05      	bgt.n	80158e4 <__swbuf_r+0x4e>
 80158d8:	4621      	mov	r1, r4
 80158da:	4628      	mov	r0, r5
 80158dc:	f000 fe2c 	bl	8016538 <_fflush_r>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d1ed      	bne.n	80158c0 <__swbuf_r+0x2a>
 80158e4:	68a3      	ldr	r3, [r4, #8]
 80158e6:	3b01      	subs	r3, #1
 80158e8:	60a3      	str	r3, [r4, #8]
 80158ea:	6823      	ldr	r3, [r4, #0]
 80158ec:	1c5a      	adds	r2, r3, #1
 80158ee:	6022      	str	r2, [r4, #0]
 80158f0:	701e      	strb	r6, [r3, #0]
 80158f2:	6962      	ldr	r2, [r4, #20]
 80158f4:	1c43      	adds	r3, r0, #1
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d004      	beq.n	8015904 <__swbuf_r+0x6e>
 80158fa:	89a3      	ldrh	r3, [r4, #12]
 80158fc:	07db      	lsls	r3, r3, #31
 80158fe:	d5e1      	bpl.n	80158c4 <__swbuf_r+0x2e>
 8015900:	2e0a      	cmp	r6, #10
 8015902:	d1df      	bne.n	80158c4 <__swbuf_r+0x2e>
 8015904:	4621      	mov	r1, r4
 8015906:	4628      	mov	r0, r5
 8015908:	f000 fe16 	bl	8016538 <_fflush_r>
 801590c:	2800      	cmp	r0, #0
 801590e:	d0d9      	beq.n	80158c4 <__swbuf_r+0x2e>
 8015910:	e7d6      	b.n	80158c0 <__swbuf_r+0x2a>
	...

08015914 <__swsetup_r>:
 8015914:	b538      	push	{r3, r4, r5, lr}
 8015916:	4b29      	ldr	r3, [pc, #164]	@ (80159bc <__swsetup_r+0xa8>)
 8015918:	4605      	mov	r5, r0
 801591a:	6818      	ldr	r0, [r3, #0]
 801591c:	460c      	mov	r4, r1
 801591e:	b118      	cbz	r0, 8015928 <__swsetup_r+0x14>
 8015920:	6a03      	ldr	r3, [r0, #32]
 8015922:	b90b      	cbnz	r3, 8015928 <__swsetup_r+0x14>
 8015924:	f7ff fde8 	bl	80154f8 <__sinit>
 8015928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801592c:	0719      	lsls	r1, r3, #28
 801592e:	d422      	bmi.n	8015976 <__swsetup_r+0x62>
 8015930:	06da      	lsls	r2, r3, #27
 8015932:	d407      	bmi.n	8015944 <__swsetup_r+0x30>
 8015934:	2209      	movs	r2, #9
 8015936:	602a      	str	r2, [r5, #0]
 8015938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801593c:	81a3      	strh	r3, [r4, #12]
 801593e:	f04f 30ff 	mov.w	r0, #4294967295
 8015942:	e033      	b.n	80159ac <__swsetup_r+0x98>
 8015944:	0758      	lsls	r0, r3, #29
 8015946:	d512      	bpl.n	801596e <__swsetup_r+0x5a>
 8015948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801594a:	b141      	cbz	r1, 801595e <__swsetup_r+0x4a>
 801594c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015950:	4299      	cmp	r1, r3
 8015952:	d002      	beq.n	801595a <__swsetup_r+0x46>
 8015954:	4628      	mov	r0, r5
 8015956:	f000 f8f9 	bl	8015b4c <_free_r>
 801595a:	2300      	movs	r3, #0
 801595c:	6363      	str	r3, [r4, #52]	@ 0x34
 801595e:	89a3      	ldrh	r3, [r4, #12]
 8015960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015964:	81a3      	strh	r3, [r4, #12]
 8015966:	2300      	movs	r3, #0
 8015968:	6063      	str	r3, [r4, #4]
 801596a:	6923      	ldr	r3, [r4, #16]
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	f043 0308 	orr.w	r3, r3, #8
 8015974:	81a3      	strh	r3, [r4, #12]
 8015976:	6923      	ldr	r3, [r4, #16]
 8015978:	b94b      	cbnz	r3, 801598e <__swsetup_r+0x7a>
 801597a:	89a3      	ldrh	r3, [r4, #12]
 801597c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015984:	d003      	beq.n	801598e <__swsetup_r+0x7a>
 8015986:	4621      	mov	r1, r4
 8015988:	4628      	mov	r0, r5
 801598a:	f000 fe23 	bl	80165d4 <__smakebuf_r>
 801598e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015992:	f013 0201 	ands.w	r2, r3, #1
 8015996:	d00a      	beq.n	80159ae <__swsetup_r+0x9a>
 8015998:	2200      	movs	r2, #0
 801599a:	60a2      	str	r2, [r4, #8]
 801599c:	6962      	ldr	r2, [r4, #20]
 801599e:	4252      	negs	r2, r2
 80159a0:	61a2      	str	r2, [r4, #24]
 80159a2:	6922      	ldr	r2, [r4, #16]
 80159a4:	b942      	cbnz	r2, 80159b8 <__swsetup_r+0xa4>
 80159a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80159aa:	d1c5      	bne.n	8015938 <__swsetup_r+0x24>
 80159ac:	bd38      	pop	{r3, r4, r5, pc}
 80159ae:	0799      	lsls	r1, r3, #30
 80159b0:	bf58      	it	pl
 80159b2:	6962      	ldrpl	r2, [r4, #20]
 80159b4:	60a2      	str	r2, [r4, #8]
 80159b6:	e7f4      	b.n	80159a2 <__swsetup_r+0x8e>
 80159b8:	2000      	movs	r0, #0
 80159ba:	e7f7      	b.n	80159ac <__swsetup_r+0x98>
 80159bc:	20000094 	.word	0x20000094

080159c0 <memset>:
 80159c0:	4402      	add	r2, r0
 80159c2:	4603      	mov	r3, r0
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d100      	bne.n	80159ca <memset+0xa>
 80159c8:	4770      	bx	lr
 80159ca:	f803 1b01 	strb.w	r1, [r3], #1
 80159ce:	e7f9      	b.n	80159c4 <memset+0x4>

080159d0 <strchr>:
 80159d0:	b2c9      	uxtb	r1, r1
 80159d2:	4603      	mov	r3, r0
 80159d4:	4618      	mov	r0, r3
 80159d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159da:	b112      	cbz	r2, 80159e2 <strchr+0x12>
 80159dc:	428a      	cmp	r2, r1
 80159de:	d1f9      	bne.n	80159d4 <strchr+0x4>
 80159e0:	4770      	bx	lr
 80159e2:	2900      	cmp	r1, #0
 80159e4:	bf18      	it	ne
 80159e6:	2000      	movne	r0, #0
 80159e8:	4770      	bx	lr

080159ea <strrchr>:
 80159ea:	b538      	push	{r3, r4, r5, lr}
 80159ec:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80159f0:	4603      	mov	r3, r0
 80159f2:	d10e      	bne.n	8015a12 <strrchr+0x28>
 80159f4:	4621      	mov	r1, r4
 80159f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159fa:	f7ff bfe9 	b.w	80159d0 <strchr>
 80159fe:	1c43      	adds	r3, r0, #1
 8015a00:	4605      	mov	r5, r0
 8015a02:	4621      	mov	r1, r4
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7ff ffe3 	bl	80159d0 <strchr>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d1f7      	bne.n	80159fe <strrchr+0x14>
 8015a0e:	4628      	mov	r0, r5
 8015a10:	bd38      	pop	{r3, r4, r5, pc}
 8015a12:	2500      	movs	r5, #0
 8015a14:	e7f5      	b.n	8015a02 <strrchr+0x18>
	...

08015a18 <_close_r>:
 8015a18:	b538      	push	{r3, r4, r5, lr}
 8015a1a:	4d06      	ldr	r5, [pc, #24]	@ (8015a34 <_close_r+0x1c>)
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	4604      	mov	r4, r0
 8015a20:	4608      	mov	r0, r1
 8015a22:	602b      	str	r3, [r5, #0]
 8015a24:	f7f4 f9bc 	bl	8009da0 <_close>
 8015a28:	1c43      	adds	r3, r0, #1
 8015a2a:	d102      	bne.n	8015a32 <_close_r+0x1a>
 8015a2c:	682b      	ldr	r3, [r5, #0]
 8015a2e:	b103      	cbz	r3, 8015a32 <_close_r+0x1a>
 8015a30:	6023      	str	r3, [r4, #0]
 8015a32:	bd38      	pop	{r3, r4, r5, pc}
 8015a34:	2000097c 	.word	0x2000097c

08015a38 <_lseek_r>:
 8015a38:	b538      	push	{r3, r4, r5, lr}
 8015a3a:	4d07      	ldr	r5, [pc, #28]	@ (8015a58 <_lseek_r+0x20>)
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	4608      	mov	r0, r1
 8015a40:	4611      	mov	r1, r2
 8015a42:	2200      	movs	r2, #0
 8015a44:	602a      	str	r2, [r5, #0]
 8015a46:	461a      	mov	r2, r3
 8015a48:	f7f4 f9d1 	bl	8009dee <_lseek>
 8015a4c:	1c43      	adds	r3, r0, #1
 8015a4e:	d102      	bne.n	8015a56 <_lseek_r+0x1e>
 8015a50:	682b      	ldr	r3, [r5, #0]
 8015a52:	b103      	cbz	r3, 8015a56 <_lseek_r+0x1e>
 8015a54:	6023      	str	r3, [r4, #0]
 8015a56:	bd38      	pop	{r3, r4, r5, pc}
 8015a58:	2000097c 	.word	0x2000097c

08015a5c <_read_r>:
 8015a5c:	b538      	push	{r3, r4, r5, lr}
 8015a5e:	4d07      	ldr	r5, [pc, #28]	@ (8015a7c <_read_r+0x20>)
 8015a60:	4604      	mov	r4, r0
 8015a62:	4608      	mov	r0, r1
 8015a64:	4611      	mov	r1, r2
 8015a66:	2200      	movs	r2, #0
 8015a68:	602a      	str	r2, [r5, #0]
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	f7f4 f95f 	bl	8009d2e <_read>
 8015a70:	1c43      	adds	r3, r0, #1
 8015a72:	d102      	bne.n	8015a7a <_read_r+0x1e>
 8015a74:	682b      	ldr	r3, [r5, #0]
 8015a76:	b103      	cbz	r3, 8015a7a <_read_r+0x1e>
 8015a78:	6023      	str	r3, [r4, #0]
 8015a7a:	bd38      	pop	{r3, r4, r5, pc}
 8015a7c:	2000097c 	.word	0x2000097c

08015a80 <_sbrk_r>:
 8015a80:	b538      	push	{r3, r4, r5, lr}
 8015a82:	4d06      	ldr	r5, [pc, #24]	@ (8015a9c <_sbrk_r+0x1c>)
 8015a84:	2300      	movs	r3, #0
 8015a86:	4604      	mov	r4, r0
 8015a88:	4608      	mov	r0, r1
 8015a8a:	602b      	str	r3, [r5, #0]
 8015a8c:	f7f4 f9bc 	bl	8009e08 <_sbrk>
 8015a90:	1c43      	adds	r3, r0, #1
 8015a92:	d102      	bne.n	8015a9a <_sbrk_r+0x1a>
 8015a94:	682b      	ldr	r3, [r5, #0]
 8015a96:	b103      	cbz	r3, 8015a9a <_sbrk_r+0x1a>
 8015a98:	6023      	str	r3, [r4, #0]
 8015a9a:	bd38      	pop	{r3, r4, r5, pc}
 8015a9c:	2000097c 	.word	0x2000097c

08015aa0 <_write_r>:
 8015aa0:	b538      	push	{r3, r4, r5, lr}
 8015aa2:	4d07      	ldr	r5, [pc, #28]	@ (8015ac0 <_write_r+0x20>)
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	4608      	mov	r0, r1
 8015aa8:	4611      	mov	r1, r2
 8015aaa:	2200      	movs	r2, #0
 8015aac:	602a      	str	r2, [r5, #0]
 8015aae:	461a      	mov	r2, r3
 8015ab0:	f7f4 f95a 	bl	8009d68 <_write>
 8015ab4:	1c43      	adds	r3, r0, #1
 8015ab6:	d102      	bne.n	8015abe <_write_r+0x1e>
 8015ab8:	682b      	ldr	r3, [r5, #0]
 8015aba:	b103      	cbz	r3, 8015abe <_write_r+0x1e>
 8015abc:	6023      	str	r3, [r4, #0]
 8015abe:	bd38      	pop	{r3, r4, r5, pc}
 8015ac0:	2000097c 	.word	0x2000097c

08015ac4 <__errno>:
 8015ac4:	4b01      	ldr	r3, [pc, #4]	@ (8015acc <__errno+0x8>)
 8015ac6:	6818      	ldr	r0, [r3, #0]
 8015ac8:	4770      	bx	lr
 8015aca:	bf00      	nop
 8015acc:	20000094 	.word	0x20000094

08015ad0 <__libc_init_array>:
 8015ad0:	b570      	push	{r4, r5, r6, lr}
 8015ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8015b08 <__libc_init_array+0x38>)
 8015ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8015b0c <__libc_init_array+0x3c>)
 8015ad6:	1b64      	subs	r4, r4, r5
 8015ad8:	10a4      	asrs	r4, r4, #2
 8015ada:	2600      	movs	r6, #0
 8015adc:	42a6      	cmp	r6, r4
 8015ade:	d109      	bne.n	8015af4 <__libc_init_array+0x24>
 8015ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8015b10 <__libc_init_array+0x40>)
 8015ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8015b14 <__libc_init_array+0x44>)
 8015ae4:	f001 fdc6 	bl	8017674 <_init>
 8015ae8:	1b64      	subs	r4, r4, r5
 8015aea:	10a4      	asrs	r4, r4, #2
 8015aec:	2600      	movs	r6, #0
 8015aee:	42a6      	cmp	r6, r4
 8015af0:	d105      	bne.n	8015afe <__libc_init_array+0x2e>
 8015af2:	bd70      	pop	{r4, r5, r6, pc}
 8015af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015af8:	4798      	blx	r3
 8015afa:	3601      	adds	r6, #1
 8015afc:	e7ee      	b.n	8015adc <__libc_init_array+0xc>
 8015afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b02:	4798      	blx	r3
 8015b04:	3601      	adds	r6, #1
 8015b06:	e7f2      	b.n	8015aee <__libc_init_array+0x1e>
 8015b08:	08018670 	.word	0x08018670
 8015b0c:	08018670 	.word	0x08018670
 8015b10:	08018670 	.word	0x08018670
 8015b14:	08018674 	.word	0x08018674

08015b18 <__retarget_lock_init_recursive>:
 8015b18:	4770      	bx	lr

08015b1a <__retarget_lock_acquire_recursive>:
 8015b1a:	4770      	bx	lr

08015b1c <__retarget_lock_release_recursive>:
 8015b1c:	4770      	bx	lr

08015b1e <__aeabi_memcpy>:
 8015b1e:	f000 b800 	b.w	8015b22 <memcpy>

08015b22 <memcpy>:
 8015b22:	440a      	add	r2, r1
 8015b24:	4291      	cmp	r1, r2
 8015b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8015b2a:	d100      	bne.n	8015b2e <memcpy+0xc>
 8015b2c:	4770      	bx	lr
 8015b2e:	b510      	push	{r4, lr}
 8015b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b38:	4291      	cmp	r1, r2
 8015b3a:	d1f9      	bne.n	8015b30 <memcpy+0xe>
 8015b3c:	bd10      	pop	{r4, pc}

08015b3e <abort>:
 8015b3e:	b508      	push	{r3, lr}
 8015b40:	2006      	movs	r0, #6
 8015b42:	f000 fdc5 	bl	80166d0 <raise>
 8015b46:	2001      	movs	r0, #1
 8015b48:	f7f4 f8e6 	bl	8009d18 <_exit>

08015b4c <_free_r>:
 8015b4c:	b538      	push	{r3, r4, r5, lr}
 8015b4e:	4605      	mov	r5, r0
 8015b50:	2900      	cmp	r1, #0
 8015b52:	d041      	beq.n	8015bd8 <_free_r+0x8c>
 8015b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b58:	1f0c      	subs	r4, r1, #4
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	bfb8      	it	lt
 8015b5e:	18e4      	addlt	r4, r4, r3
 8015b60:	f7ff fc32 	bl	80153c8 <__malloc_lock>
 8015b64:	4a1d      	ldr	r2, [pc, #116]	@ (8015bdc <_free_r+0x90>)
 8015b66:	6813      	ldr	r3, [r2, #0]
 8015b68:	b933      	cbnz	r3, 8015b78 <_free_r+0x2c>
 8015b6a:	6063      	str	r3, [r4, #4]
 8015b6c:	6014      	str	r4, [r2, #0]
 8015b6e:	4628      	mov	r0, r5
 8015b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b74:	f7ff bc2e 	b.w	80153d4 <__malloc_unlock>
 8015b78:	42a3      	cmp	r3, r4
 8015b7a:	d908      	bls.n	8015b8e <_free_r+0x42>
 8015b7c:	6820      	ldr	r0, [r4, #0]
 8015b7e:	1821      	adds	r1, r4, r0
 8015b80:	428b      	cmp	r3, r1
 8015b82:	bf01      	itttt	eq
 8015b84:	6819      	ldreq	r1, [r3, #0]
 8015b86:	685b      	ldreq	r3, [r3, #4]
 8015b88:	1809      	addeq	r1, r1, r0
 8015b8a:	6021      	streq	r1, [r4, #0]
 8015b8c:	e7ed      	b.n	8015b6a <_free_r+0x1e>
 8015b8e:	461a      	mov	r2, r3
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	b10b      	cbz	r3, 8015b98 <_free_r+0x4c>
 8015b94:	42a3      	cmp	r3, r4
 8015b96:	d9fa      	bls.n	8015b8e <_free_r+0x42>
 8015b98:	6811      	ldr	r1, [r2, #0]
 8015b9a:	1850      	adds	r0, r2, r1
 8015b9c:	42a0      	cmp	r0, r4
 8015b9e:	d10b      	bne.n	8015bb8 <_free_r+0x6c>
 8015ba0:	6820      	ldr	r0, [r4, #0]
 8015ba2:	4401      	add	r1, r0
 8015ba4:	1850      	adds	r0, r2, r1
 8015ba6:	4283      	cmp	r3, r0
 8015ba8:	6011      	str	r1, [r2, #0]
 8015baa:	d1e0      	bne.n	8015b6e <_free_r+0x22>
 8015bac:	6818      	ldr	r0, [r3, #0]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	6053      	str	r3, [r2, #4]
 8015bb2:	4408      	add	r0, r1
 8015bb4:	6010      	str	r0, [r2, #0]
 8015bb6:	e7da      	b.n	8015b6e <_free_r+0x22>
 8015bb8:	d902      	bls.n	8015bc0 <_free_r+0x74>
 8015bba:	230c      	movs	r3, #12
 8015bbc:	602b      	str	r3, [r5, #0]
 8015bbe:	e7d6      	b.n	8015b6e <_free_r+0x22>
 8015bc0:	6820      	ldr	r0, [r4, #0]
 8015bc2:	1821      	adds	r1, r4, r0
 8015bc4:	428b      	cmp	r3, r1
 8015bc6:	bf04      	itt	eq
 8015bc8:	6819      	ldreq	r1, [r3, #0]
 8015bca:	685b      	ldreq	r3, [r3, #4]
 8015bcc:	6063      	str	r3, [r4, #4]
 8015bce:	bf04      	itt	eq
 8015bd0:	1809      	addeq	r1, r1, r0
 8015bd2:	6021      	streq	r1, [r4, #0]
 8015bd4:	6054      	str	r4, [r2, #4]
 8015bd6:	e7ca      	b.n	8015b6e <_free_r+0x22>
 8015bd8:	bd38      	pop	{r3, r4, r5, pc}
 8015bda:	bf00      	nop
 8015bdc:	2000083c 	.word	0x2000083c

08015be0 <__ssputs_r>:
 8015be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	688e      	ldr	r6, [r1, #8]
 8015be6:	461f      	mov	r7, r3
 8015be8:	42be      	cmp	r6, r7
 8015bea:	680b      	ldr	r3, [r1, #0]
 8015bec:	4682      	mov	sl, r0
 8015bee:	460c      	mov	r4, r1
 8015bf0:	4690      	mov	r8, r2
 8015bf2:	d82d      	bhi.n	8015c50 <__ssputs_r+0x70>
 8015bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015bf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015bfc:	d026      	beq.n	8015c4c <__ssputs_r+0x6c>
 8015bfe:	6965      	ldr	r5, [r4, #20]
 8015c00:	6909      	ldr	r1, [r1, #16]
 8015c02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c06:	eba3 0901 	sub.w	r9, r3, r1
 8015c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c0e:	1c7b      	adds	r3, r7, #1
 8015c10:	444b      	add	r3, r9
 8015c12:	106d      	asrs	r5, r5, #1
 8015c14:	429d      	cmp	r5, r3
 8015c16:	bf38      	it	cc
 8015c18:	461d      	movcc	r5, r3
 8015c1a:	0553      	lsls	r3, r2, #21
 8015c1c:	d527      	bpl.n	8015c6e <__ssputs_r+0x8e>
 8015c1e:	4629      	mov	r1, r5
 8015c20:	f7ff fb52 	bl	80152c8 <_malloc_r>
 8015c24:	4606      	mov	r6, r0
 8015c26:	b360      	cbz	r0, 8015c82 <__ssputs_r+0xa2>
 8015c28:	6921      	ldr	r1, [r4, #16]
 8015c2a:	464a      	mov	r2, r9
 8015c2c:	f7ff ff79 	bl	8015b22 <memcpy>
 8015c30:	89a3      	ldrh	r3, [r4, #12]
 8015c32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c3a:	81a3      	strh	r3, [r4, #12]
 8015c3c:	6126      	str	r6, [r4, #16]
 8015c3e:	6165      	str	r5, [r4, #20]
 8015c40:	444e      	add	r6, r9
 8015c42:	eba5 0509 	sub.w	r5, r5, r9
 8015c46:	6026      	str	r6, [r4, #0]
 8015c48:	60a5      	str	r5, [r4, #8]
 8015c4a:	463e      	mov	r6, r7
 8015c4c:	42be      	cmp	r6, r7
 8015c4e:	d900      	bls.n	8015c52 <__ssputs_r+0x72>
 8015c50:	463e      	mov	r6, r7
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	4632      	mov	r2, r6
 8015c56:	4641      	mov	r1, r8
 8015c58:	f000 fcf8 	bl	801664c <memmove>
 8015c5c:	68a3      	ldr	r3, [r4, #8]
 8015c5e:	1b9b      	subs	r3, r3, r6
 8015c60:	60a3      	str	r3, [r4, #8]
 8015c62:	6823      	ldr	r3, [r4, #0]
 8015c64:	4433      	add	r3, r6
 8015c66:	6023      	str	r3, [r4, #0]
 8015c68:	2000      	movs	r0, #0
 8015c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c6e:	462a      	mov	r2, r5
 8015c70:	f000 fd6c 	bl	801674c <_realloc_r>
 8015c74:	4606      	mov	r6, r0
 8015c76:	2800      	cmp	r0, #0
 8015c78:	d1e0      	bne.n	8015c3c <__ssputs_r+0x5c>
 8015c7a:	6921      	ldr	r1, [r4, #16]
 8015c7c:	4650      	mov	r0, sl
 8015c7e:	f7ff ff65 	bl	8015b4c <_free_r>
 8015c82:	230c      	movs	r3, #12
 8015c84:	f8ca 3000 	str.w	r3, [sl]
 8015c88:	89a3      	ldrh	r3, [r4, #12]
 8015c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c8e:	81a3      	strh	r3, [r4, #12]
 8015c90:	f04f 30ff 	mov.w	r0, #4294967295
 8015c94:	e7e9      	b.n	8015c6a <__ssputs_r+0x8a>
	...

08015c98 <_svfiprintf_r>:
 8015c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c9c:	4698      	mov	r8, r3
 8015c9e:	898b      	ldrh	r3, [r1, #12]
 8015ca0:	061b      	lsls	r3, r3, #24
 8015ca2:	b09d      	sub	sp, #116	@ 0x74
 8015ca4:	4607      	mov	r7, r0
 8015ca6:	460d      	mov	r5, r1
 8015ca8:	4614      	mov	r4, r2
 8015caa:	d510      	bpl.n	8015cce <_svfiprintf_r+0x36>
 8015cac:	690b      	ldr	r3, [r1, #16]
 8015cae:	b973      	cbnz	r3, 8015cce <_svfiprintf_r+0x36>
 8015cb0:	2140      	movs	r1, #64	@ 0x40
 8015cb2:	f7ff fb09 	bl	80152c8 <_malloc_r>
 8015cb6:	6028      	str	r0, [r5, #0]
 8015cb8:	6128      	str	r0, [r5, #16]
 8015cba:	b930      	cbnz	r0, 8015cca <_svfiprintf_r+0x32>
 8015cbc:	230c      	movs	r3, #12
 8015cbe:	603b      	str	r3, [r7, #0]
 8015cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8015cc4:	b01d      	add	sp, #116	@ 0x74
 8015cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cca:	2340      	movs	r3, #64	@ 0x40
 8015ccc:	616b      	str	r3, [r5, #20]
 8015cce:	2300      	movs	r3, #0
 8015cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cd2:	2320      	movs	r3, #32
 8015cd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cdc:	2330      	movs	r3, #48	@ 0x30
 8015cde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015e7c <_svfiprintf_r+0x1e4>
 8015ce2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ce6:	f04f 0901 	mov.w	r9, #1
 8015cea:	4623      	mov	r3, r4
 8015cec:	469a      	mov	sl, r3
 8015cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cf2:	b10a      	cbz	r2, 8015cf8 <_svfiprintf_r+0x60>
 8015cf4:	2a25      	cmp	r2, #37	@ 0x25
 8015cf6:	d1f9      	bne.n	8015cec <_svfiprintf_r+0x54>
 8015cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8015cfc:	d00b      	beq.n	8015d16 <_svfiprintf_r+0x7e>
 8015cfe:	465b      	mov	r3, fp
 8015d00:	4622      	mov	r2, r4
 8015d02:	4629      	mov	r1, r5
 8015d04:	4638      	mov	r0, r7
 8015d06:	f7ff ff6b 	bl	8015be0 <__ssputs_r>
 8015d0a:	3001      	adds	r0, #1
 8015d0c:	f000 80a7 	beq.w	8015e5e <_svfiprintf_r+0x1c6>
 8015d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d12:	445a      	add	r2, fp
 8015d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d16:	f89a 3000 	ldrb.w	r3, [sl]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	f000 809f 	beq.w	8015e5e <_svfiprintf_r+0x1c6>
 8015d20:	2300      	movs	r3, #0
 8015d22:	f04f 32ff 	mov.w	r2, #4294967295
 8015d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d2a:	f10a 0a01 	add.w	sl, sl, #1
 8015d2e:	9304      	str	r3, [sp, #16]
 8015d30:	9307      	str	r3, [sp, #28]
 8015d32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8015d38:	4654      	mov	r4, sl
 8015d3a:	2205      	movs	r2, #5
 8015d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d40:	484e      	ldr	r0, [pc, #312]	@ (8015e7c <_svfiprintf_r+0x1e4>)
 8015d42:	f7f1 ff5d 	bl	8007c00 <memchr>
 8015d46:	9a04      	ldr	r2, [sp, #16]
 8015d48:	b9d8      	cbnz	r0, 8015d82 <_svfiprintf_r+0xea>
 8015d4a:	06d0      	lsls	r0, r2, #27
 8015d4c:	bf44      	itt	mi
 8015d4e:	2320      	movmi	r3, #32
 8015d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d54:	0711      	lsls	r1, r2, #28
 8015d56:	bf44      	itt	mi
 8015d58:	232b      	movmi	r3, #43	@ 0x2b
 8015d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8015d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d64:	d015      	beq.n	8015d92 <_svfiprintf_r+0xfa>
 8015d66:	9a07      	ldr	r2, [sp, #28]
 8015d68:	4654      	mov	r4, sl
 8015d6a:	2000      	movs	r0, #0
 8015d6c:	f04f 0c0a 	mov.w	ip, #10
 8015d70:	4621      	mov	r1, r4
 8015d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d76:	3b30      	subs	r3, #48	@ 0x30
 8015d78:	2b09      	cmp	r3, #9
 8015d7a:	d94b      	bls.n	8015e14 <_svfiprintf_r+0x17c>
 8015d7c:	b1b0      	cbz	r0, 8015dac <_svfiprintf_r+0x114>
 8015d7e:	9207      	str	r2, [sp, #28]
 8015d80:	e014      	b.n	8015dac <_svfiprintf_r+0x114>
 8015d82:	eba0 0308 	sub.w	r3, r0, r8
 8015d86:	fa09 f303 	lsl.w	r3, r9, r3
 8015d8a:	4313      	orrs	r3, r2
 8015d8c:	9304      	str	r3, [sp, #16]
 8015d8e:	46a2      	mov	sl, r4
 8015d90:	e7d2      	b.n	8015d38 <_svfiprintf_r+0xa0>
 8015d92:	9b03      	ldr	r3, [sp, #12]
 8015d94:	1d19      	adds	r1, r3, #4
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	9103      	str	r1, [sp, #12]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	bfbb      	ittet	lt
 8015d9e:	425b      	neglt	r3, r3
 8015da0:	f042 0202 	orrlt.w	r2, r2, #2
 8015da4:	9307      	strge	r3, [sp, #28]
 8015da6:	9307      	strlt	r3, [sp, #28]
 8015da8:	bfb8      	it	lt
 8015daa:	9204      	strlt	r2, [sp, #16]
 8015dac:	7823      	ldrb	r3, [r4, #0]
 8015dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8015db0:	d10a      	bne.n	8015dc8 <_svfiprintf_r+0x130>
 8015db2:	7863      	ldrb	r3, [r4, #1]
 8015db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015db6:	d132      	bne.n	8015e1e <_svfiprintf_r+0x186>
 8015db8:	9b03      	ldr	r3, [sp, #12]
 8015dba:	1d1a      	adds	r2, r3, #4
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	9203      	str	r2, [sp, #12]
 8015dc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015dc4:	3402      	adds	r4, #2
 8015dc6:	9305      	str	r3, [sp, #20]
 8015dc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015e8c <_svfiprintf_r+0x1f4>
 8015dcc:	7821      	ldrb	r1, [r4, #0]
 8015dce:	2203      	movs	r2, #3
 8015dd0:	4650      	mov	r0, sl
 8015dd2:	f7f1 ff15 	bl	8007c00 <memchr>
 8015dd6:	b138      	cbz	r0, 8015de8 <_svfiprintf_r+0x150>
 8015dd8:	9b04      	ldr	r3, [sp, #16]
 8015dda:	eba0 000a 	sub.w	r0, r0, sl
 8015dde:	2240      	movs	r2, #64	@ 0x40
 8015de0:	4082      	lsls	r2, r0
 8015de2:	4313      	orrs	r3, r2
 8015de4:	3401      	adds	r4, #1
 8015de6:	9304      	str	r3, [sp, #16]
 8015de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dec:	4824      	ldr	r0, [pc, #144]	@ (8015e80 <_svfiprintf_r+0x1e8>)
 8015dee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015df2:	2206      	movs	r2, #6
 8015df4:	f7f1 ff04 	bl	8007c00 <memchr>
 8015df8:	2800      	cmp	r0, #0
 8015dfa:	d036      	beq.n	8015e6a <_svfiprintf_r+0x1d2>
 8015dfc:	4b21      	ldr	r3, [pc, #132]	@ (8015e84 <_svfiprintf_r+0x1ec>)
 8015dfe:	bb1b      	cbnz	r3, 8015e48 <_svfiprintf_r+0x1b0>
 8015e00:	9b03      	ldr	r3, [sp, #12]
 8015e02:	3307      	adds	r3, #7
 8015e04:	f023 0307 	bic.w	r3, r3, #7
 8015e08:	3308      	adds	r3, #8
 8015e0a:	9303      	str	r3, [sp, #12]
 8015e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e0e:	4433      	add	r3, r6
 8015e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e12:	e76a      	b.n	8015cea <_svfiprintf_r+0x52>
 8015e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e18:	460c      	mov	r4, r1
 8015e1a:	2001      	movs	r0, #1
 8015e1c:	e7a8      	b.n	8015d70 <_svfiprintf_r+0xd8>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	3401      	adds	r4, #1
 8015e22:	9305      	str	r3, [sp, #20]
 8015e24:	4619      	mov	r1, r3
 8015e26:	f04f 0c0a 	mov.w	ip, #10
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e30:	3a30      	subs	r2, #48	@ 0x30
 8015e32:	2a09      	cmp	r2, #9
 8015e34:	d903      	bls.n	8015e3e <_svfiprintf_r+0x1a6>
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d0c6      	beq.n	8015dc8 <_svfiprintf_r+0x130>
 8015e3a:	9105      	str	r1, [sp, #20]
 8015e3c:	e7c4      	b.n	8015dc8 <_svfiprintf_r+0x130>
 8015e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e42:	4604      	mov	r4, r0
 8015e44:	2301      	movs	r3, #1
 8015e46:	e7f0      	b.n	8015e2a <_svfiprintf_r+0x192>
 8015e48:	ab03      	add	r3, sp, #12
 8015e4a:	9300      	str	r3, [sp, #0]
 8015e4c:	462a      	mov	r2, r5
 8015e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8015e88 <_svfiprintf_r+0x1f0>)
 8015e50:	a904      	add	r1, sp, #16
 8015e52:	4638      	mov	r0, r7
 8015e54:	f3af 8000 	nop.w
 8015e58:	1c42      	adds	r2, r0, #1
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	d1d6      	bne.n	8015e0c <_svfiprintf_r+0x174>
 8015e5e:	89ab      	ldrh	r3, [r5, #12]
 8015e60:	065b      	lsls	r3, r3, #25
 8015e62:	f53f af2d 	bmi.w	8015cc0 <_svfiprintf_r+0x28>
 8015e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e68:	e72c      	b.n	8015cc4 <_svfiprintf_r+0x2c>
 8015e6a:	ab03      	add	r3, sp, #12
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	462a      	mov	r2, r5
 8015e70:	4b05      	ldr	r3, [pc, #20]	@ (8015e88 <_svfiprintf_r+0x1f0>)
 8015e72:	a904      	add	r1, sp, #16
 8015e74:	4638      	mov	r0, r7
 8015e76:	f000 f9bb 	bl	80161f0 <_printf_i>
 8015e7a:	e7ed      	b.n	8015e58 <_svfiprintf_r+0x1c0>
 8015e7c:	08018604 	.word	0x08018604
 8015e80:	0801860e 	.word	0x0801860e
 8015e84:	00000000 	.word	0x00000000
 8015e88:	08015be1 	.word	0x08015be1
 8015e8c:	0801860a 	.word	0x0801860a

08015e90 <__sfputc_r>:
 8015e90:	6893      	ldr	r3, [r2, #8]
 8015e92:	3b01      	subs	r3, #1
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	b410      	push	{r4}
 8015e98:	6093      	str	r3, [r2, #8]
 8015e9a:	da08      	bge.n	8015eae <__sfputc_r+0x1e>
 8015e9c:	6994      	ldr	r4, [r2, #24]
 8015e9e:	42a3      	cmp	r3, r4
 8015ea0:	db01      	blt.n	8015ea6 <__sfputc_r+0x16>
 8015ea2:	290a      	cmp	r1, #10
 8015ea4:	d103      	bne.n	8015eae <__sfputc_r+0x1e>
 8015ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eaa:	f7ff bcf4 	b.w	8015896 <__swbuf_r>
 8015eae:	6813      	ldr	r3, [r2, #0]
 8015eb0:	1c58      	adds	r0, r3, #1
 8015eb2:	6010      	str	r0, [r2, #0]
 8015eb4:	7019      	strb	r1, [r3, #0]
 8015eb6:	4608      	mov	r0, r1
 8015eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ebc:	4770      	bx	lr

08015ebe <__sfputs_r>:
 8015ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ec0:	4606      	mov	r6, r0
 8015ec2:	460f      	mov	r7, r1
 8015ec4:	4614      	mov	r4, r2
 8015ec6:	18d5      	adds	r5, r2, r3
 8015ec8:	42ac      	cmp	r4, r5
 8015eca:	d101      	bne.n	8015ed0 <__sfputs_r+0x12>
 8015ecc:	2000      	movs	r0, #0
 8015ece:	e007      	b.n	8015ee0 <__sfputs_r+0x22>
 8015ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ed4:	463a      	mov	r2, r7
 8015ed6:	4630      	mov	r0, r6
 8015ed8:	f7ff ffda 	bl	8015e90 <__sfputc_r>
 8015edc:	1c43      	adds	r3, r0, #1
 8015ede:	d1f3      	bne.n	8015ec8 <__sfputs_r+0xa>
 8015ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ee4 <_vfiprintf_r>:
 8015ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee8:	460d      	mov	r5, r1
 8015eea:	b09d      	sub	sp, #116	@ 0x74
 8015eec:	4614      	mov	r4, r2
 8015eee:	4698      	mov	r8, r3
 8015ef0:	4606      	mov	r6, r0
 8015ef2:	b118      	cbz	r0, 8015efc <_vfiprintf_r+0x18>
 8015ef4:	6a03      	ldr	r3, [r0, #32]
 8015ef6:	b90b      	cbnz	r3, 8015efc <_vfiprintf_r+0x18>
 8015ef8:	f7ff fafe 	bl	80154f8 <__sinit>
 8015efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015efe:	07d9      	lsls	r1, r3, #31
 8015f00:	d405      	bmi.n	8015f0e <_vfiprintf_r+0x2a>
 8015f02:	89ab      	ldrh	r3, [r5, #12]
 8015f04:	059a      	lsls	r2, r3, #22
 8015f06:	d402      	bmi.n	8015f0e <_vfiprintf_r+0x2a>
 8015f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f0a:	f7ff fe06 	bl	8015b1a <__retarget_lock_acquire_recursive>
 8015f0e:	89ab      	ldrh	r3, [r5, #12]
 8015f10:	071b      	lsls	r3, r3, #28
 8015f12:	d501      	bpl.n	8015f18 <_vfiprintf_r+0x34>
 8015f14:	692b      	ldr	r3, [r5, #16]
 8015f16:	b99b      	cbnz	r3, 8015f40 <_vfiprintf_r+0x5c>
 8015f18:	4629      	mov	r1, r5
 8015f1a:	4630      	mov	r0, r6
 8015f1c:	f7ff fcfa 	bl	8015914 <__swsetup_r>
 8015f20:	b170      	cbz	r0, 8015f40 <_vfiprintf_r+0x5c>
 8015f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f24:	07dc      	lsls	r4, r3, #31
 8015f26:	d504      	bpl.n	8015f32 <_vfiprintf_r+0x4e>
 8015f28:	f04f 30ff 	mov.w	r0, #4294967295
 8015f2c:	b01d      	add	sp, #116	@ 0x74
 8015f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f32:	89ab      	ldrh	r3, [r5, #12]
 8015f34:	0598      	lsls	r0, r3, #22
 8015f36:	d4f7      	bmi.n	8015f28 <_vfiprintf_r+0x44>
 8015f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f3a:	f7ff fdef 	bl	8015b1c <__retarget_lock_release_recursive>
 8015f3e:	e7f3      	b.n	8015f28 <_vfiprintf_r+0x44>
 8015f40:	2300      	movs	r3, #0
 8015f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f44:	2320      	movs	r3, #32
 8015f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f4e:	2330      	movs	r3, #48	@ 0x30
 8015f50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016100 <_vfiprintf_r+0x21c>
 8015f54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f58:	f04f 0901 	mov.w	r9, #1
 8015f5c:	4623      	mov	r3, r4
 8015f5e:	469a      	mov	sl, r3
 8015f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f64:	b10a      	cbz	r2, 8015f6a <_vfiprintf_r+0x86>
 8015f66:	2a25      	cmp	r2, #37	@ 0x25
 8015f68:	d1f9      	bne.n	8015f5e <_vfiprintf_r+0x7a>
 8015f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8015f6e:	d00b      	beq.n	8015f88 <_vfiprintf_r+0xa4>
 8015f70:	465b      	mov	r3, fp
 8015f72:	4622      	mov	r2, r4
 8015f74:	4629      	mov	r1, r5
 8015f76:	4630      	mov	r0, r6
 8015f78:	f7ff ffa1 	bl	8015ebe <__sfputs_r>
 8015f7c:	3001      	adds	r0, #1
 8015f7e:	f000 80a7 	beq.w	80160d0 <_vfiprintf_r+0x1ec>
 8015f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f84:	445a      	add	r2, fp
 8015f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f88:	f89a 3000 	ldrb.w	r3, [sl]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f000 809f 	beq.w	80160d0 <_vfiprintf_r+0x1ec>
 8015f92:	2300      	movs	r3, #0
 8015f94:	f04f 32ff 	mov.w	r2, #4294967295
 8015f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f9c:	f10a 0a01 	add.w	sl, sl, #1
 8015fa0:	9304      	str	r3, [sp, #16]
 8015fa2:	9307      	str	r3, [sp, #28]
 8015fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8015faa:	4654      	mov	r4, sl
 8015fac:	2205      	movs	r2, #5
 8015fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fb2:	4853      	ldr	r0, [pc, #332]	@ (8016100 <_vfiprintf_r+0x21c>)
 8015fb4:	f7f1 fe24 	bl	8007c00 <memchr>
 8015fb8:	9a04      	ldr	r2, [sp, #16]
 8015fba:	b9d8      	cbnz	r0, 8015ff4 <_vfiprintf_r+0x110>
 8015fbc:	06d1      	lsls	r1, r2, #27
 8015fbe:	bf44      	itt	mi
 8015fc0:	2320      	movmi	r3, #32
 8015fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fc6:	0713      	lsls	r3, r2, #28
 8015fc8:	bf44      	itt	mi
 8015fca:	232b      	movmi	r3, #43	@ 0x2b
 8015fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8015fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fd6:	d015      	beq.n	8016004 <_vfiprintf_r+0x120>
 8015fd8:	9a07      	ldr	r2, [sp, #28]
 8015fda:	4654      	mov	r4, sl
 8015fdc:	2000      	movs	r0, #0
 8015fde:	f04f 0c0a 	mov.w	ip, #10
 8015fe2:	4621      	mov	r1, r4
 8015fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fe8:	3b30      	subs	r3, #48	@ 0x30
 8015fea:	2b09      	cmp	r3, #9
 8015fec:	d94b      	bls.n	8016086 <_vfiprintf_r+0x1a2>
 8015fee:	b1b0      	cbz	r0, 801601e <_vfiprintf_r+0x13a>
 8015ff0:	9207      	str	r2, [sp, #28]
 8015ff2:	e014      	b.n	801601e <_vfiprintf_r+0x13a>
 8015ff4:	eba0 0308 	sub.w	r3, r0, r8
 8015ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8015ffc:	4313      	orrs	r3, r2
 8015ffe:	9304      	str	r3, [sp, #16]
 8016000:	46a2      	mov	sl, r4
 8016002:	e7d2      	b.n	8015faa <_vfiprintf_r+0xc6>
 8016004:	9b03      	ldr	r3, [sp, #12]
 8016006:	1d19      	adds	r1, r3, #4
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	9103      	str	r1, [sp, #12]
 801600c:	2b00      	cmp	r3, #0
 801600e:	bfbb      	ittet	lt
 8016010:	425b      	neglt	r3, r3
 8016012:	f042 0202 	orrlt.w	r2, r2, #2
 8016016:	9307      	strge	r3, [sp, #28]
 8016018:	9307      	strlt	r3, [sp, #28]
 801601a:	bfb8      	it	lt
 801601c:	9204      	strlt	r2, [sp, #16]
 801601e:	7823      	ldrb	r3, [r4, #0]
 8016020:	2b2e      	cmp	r3, #46	@ 0x2e
 8016022:	d10a      	bne.n	801603a <_vfiprintf_r+0x156>
 8016024:	7863      	ldrb	r3, [r4, #1]
 8016026:	2b2a      	cmp	r3, #42	@ 0x2a
 8016028:	d132      	bne.n	8016090 <_vfiprintf_r+0x1ac>
 801602a:	9b03      	ldr	r3, [sp, #12]
 801602c:	1d1a      	adds	r2, r3, #4
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	9203      	str	r2, [sp, #12]
 8016032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016036:	3402      	adds	r4, #2
 8016038:	9305      	str	r3, [sp, #20]
 801603a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016110 <_vfiprintf_r+0x22c>
 801603e:	7821      	ldrb	r1, [r4, #0]
 8016040:	2203      	movs	r2, #3
 8016042:	4650      	mov	r0, sl
 8016044:	f7f1 fddc 	bl	8007c00 <memchr>
 8016048:	b138      	cbz	r0, 801605a <_vfiprintf_r+0x176>
 801604a:	9b04      	ldr	r3, [sp, #16]
 801604c:	eba0 000a 	sub.w	r0, r0, sl
 8016050:	2240      	movs	r2, #64	@ 0x40
 8016052:	4082      	lsls	r2, r0
 8016054:	4313      	orrs	r3, r2
 8016056:	3401      	adds	r4, #1
 8016058:	9304      	str	r3, [sp, #16]
 801605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801605e:	4829      	ldr	r0, [pc, #164]	@ (8016104 <_vfiprintf_r+0x220>)
 8016060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016064:	2206      	movs	r2, #6
 8016066:	f7f1 fdcb 	bl	8007c00 <memchr>
 801606a:	2800      	cmp	r0, #0
 801606c:	d03f      	beq.n	80160ee <_vfiprintf_r+0x20a>
 801606e:	4b26      	ldr	r3, [pc, #152]	@ (8016108 <_vfiprintf_r+0x224>)
 8016070:	bb1b      	cbnz	r3, 80160ba <_vfiprintf_r+0x1d6>
 8016072:	9b03      	ldr	r3, [sp, #12]
 8016074:	3307      	adds	r3, #7
 8016076:	f023 0307 	bic.w	r3, r3, #7
 801607a:	3308      	adds	r3, #8
 801607c:	9303      	str	r3, [sp, #12]
 801607e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016080:	443b      	add	r3, r7
 8016082:	9309      	str	r3, [sp, #36]	@ 0x24
 8016084:	e76a      	b.n	8015f5c <_vfiprintf_r+0x78>
 8016086:	fb0c 3202 	mla	r2, ip, r2, r3
 801608a:	460c      	mov	r4, r1
 801608c:	2001      	movs	r0, #1
 801608e:	e7a8      	b.n	8015fe2 <_vfiprintf_r+0xfe>
 8016090:	2300      	movs	r3, #0
 8016092:	3401      	adds	r4, #1
 8016094:	9305      	str	r3, [sp, #20]
 8016096:	4619      	mov	r1, r3
 8016098:	f04f 0c0a 	mov.w	ip, #10
 801609c:	4620      	mov	r0, r4
 801609e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160a2:	3a30      	subs	r2, #48	@ 0x30
 80160a4:	2a09      	cmp	r2, #9
 80160a6:	d903      	bls.n	80160b0 <_vfiprintf_r+0x1cc>
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d0c6      	beq.n	801603a <_vfiprintf_r+0x156>
 80160ac:	9105      	str	r1, [sp, #20]
 80160ae:	e7c4      	b.n	801603a <_vfiprintf_r+0x156>
 80160b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80160b4:	4604      	mov	r4, r0
 80160b6:	2301      	movs	r3, #1
 80160b8:	e7f0      	b.n	801609c <_vfiprintf_r+0x1b8>
 80160ba:	ab03      	add	r3, sp, #12
 80160bc:	9300      	str	r3, [sp, #0]
 80160be:	462a      	mov	r2, r5
 80160c0:	4b12      	ldr	r3, [pc, #72]	@ (801610c <_vfiprintf_r+0x228>)
 80160c2:	a904      	add	r1, sp, #16
 80160c4:	4630      	mov	r0, r6
 80160c6:	f3af 8000 	nop.w
 80160ca:	4607      	mov	r7, r0
 80160cc:	1c78      	adds	r0, r7, #1
 80160ce:	d1d6      	bne.n	801607e <_vfiprintf_r+0x19a>
 80160d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80160d2:	07d9      	lsls	r1, r3, #31
 80160d4:	d405      	bmi.n	80160e2 <_vfiprintf_r+0x1fe>
 80160d6:	89ab      	ldrh	r3, [r5, #12]
 80160d8:	059a      	lsls	r2, r3, #22
 80160da:	d402      	bmi.n	80160e2 <_vfiprintf_r+0x1fe>
 80160dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80160de:	f7ff fd1d 	bl	8015b1c <__retarget_lock_release_recursive>
 80160e2:	89ab      	ldrh	r3, [r5, #12]
 80160e4:	065b      	lsls	r3, r3, #25
 80160e6:	f53f af1f 	bmi.w	8015f28 <_vfiprintf_r+0x44>
 80160ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160ec:	e71e      	b.n	8015f2c <_vfiprintf_r+0x48>
 80160ee:	ab03      	add	r3, sp, #12
 80160f0:	9300      	str	r3, [sp, #0]
 80160f2:	462a      	mov	r2, r5
 80160f4:	4b05      	ldr	r3, [pc, #20]	@ (801610c <_vfiprintf_r+0x228>)
 80160f6:	a904      	add	r1, sp, #16
 80160f8:	4630      	mov	r0, r6
 80160fa:	f000 f879 	bl	80161f0 <_printf_i>
 80160fe:	e7e4      	b.n	80160ca <_vfiprintf_r+0x1e6>
 8016100:	08018604 	.word	0x08018604
 8016104:	0801860e 	.word	0x0801860e
 8016108:	00000000 	.word	0x00000000
 801610c:	08015ebf 	.word	0x08015ebf
 8016110:	0801860a 	.word	0x0801860a

08016114 <_printf_common>:
 8016114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016118:	4616      	mov	r6, r2
 801611a:	4698      	mov	r8, r3
 801611c:	688a      	ldr	r2, [r1, #8]
 801611e:	690b      	ldr	r3, [r1, #16]
 8016120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016124:	4293      	cmp	r3, r2
 8016126:	bfb8      	it	lt
 8016128:	4613      	movlt	r3, r2
 801612a:	6033      	str	r3, [r6, #0]
 801612c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016130:	4607      	mov	r7, r0
 8016132:	460c      	mov	r4, r1
 8016134:	b10a      	cbz	r2, 801613a <_printf_common+0x26>
 8016136:	3301      	adds	r3, #1
 8016138:	6033      	str	r3, [r6, #0]
 801613a:	6823      	ldr	r3, [r4, #0]
 801613c:	0699      	lsls	r1, r3, #26
 801613e:	bf42      	ittt	mi
 8016140:	6833      	ldrmi	r3, [r6, #0]
 8016142:	3302      	addmi	r3, #2
 8016144:	6033      	strmi	r3, [r6, #0]
 8016146:	6825      	ldr	r5, [r4, #0]
 8016148:	f015 0506 	ands.w	r5, r5, #6
 801614c:	d106      	bne.n	801615c <_printf_common+0x48>
 801614e:	f104 0a19 	add.w	sl, r4, #25
 8016152:	68e3      	ldr	r3, [r4, #12]
 8016154:	6832      	ldr	r2, [r6, #0]
 8016156:	1a9b      	subs	r3, r3, r2
 8016158:	42ab      	cmp	r3, r5
 801615a:	dc26      	bgt.n	80161aa <_printf_common+0x96>
 801615c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016160:	6822      	ldr	r2, [r4, #0]
 8016162:	3b00      	subs	r3, #0
 8016164:	bf18      	it	ne
 8016166:	2301      	movne	r3, #1
 8016168:	0692      	lsls	r2, r2, #26
 801616a:	d42b      	bmi.n	80161c4 <_printf_common+0xb0>
 801616c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016170:	4641      	mov	r1, r8
 8016172:	4638      	mov	r0, r7
 8016174:	47c8      	blx	r9
 8016176:	3001      	adds	r0, #1
 8016178:	d01e      	beq.n	80161b8 <_printf_common+0xa4>
 801617a:	6823      	ldr	r3, [r4, #0]
 801617c:	6922      	ldr	r2, [r4, #16]
 801617e:	f003 0306 	and.w	r3, r3, #6
 8016182:	2b04      	cmp	r3, #4
 8016184:	bf02      	ittt	eq
 8016186:	68e5      	ldreq	r5, [r4, #12]
 8016188:	6833      	ldreq	r3, [r6, #0]
 801618a:	1aed      	subeq	r5, r5, r3
 801618c:	68a3      	ldr	r3, [r4, #8]
 801618e:	bf0c      	ite	eq
 8016190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016194:	2500      	movne	r5, #0
 8016196:	4293      	cmp	r3, r2
 8016198:	bfc4      	itt	gt
 801619a:	1a9b      	subgt	r3, r3, r2
 801619c:	18ed      	addgt	r5, r5, r3
 801619e:	2600      	movs	r6, #0
 80161a0:	341a      	adds	r4, #26
 80161a2:	42b5      	cmp	r5, r6
 80161a4:	d11a      	bne.n	80161dc <_printf_common+0xc8>
 80161a6:	2000      	movs	r0, #0
 80161a8:	e008      	b.n	80161bc <_printf_common+0xa8>
 80161aa:	2301      	movs	r3, #1
 80161ac:	4652      	mov	r2, sl
 80161ae:	4641      	mov	r1, r8
 80161b0:	4638      	mov	r0, r7
 80161b2:	47c8      	blx	r9
 80161b4:	3001      	adds	r0, #1
 80161b6:	d103      	bne.n	80161c0 <_printf_common+0xac>
 80161b8:	f04f 30ff 	mov.w	r0, #4294967295
 80161bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161c0:	3501      	adds	r5, #1
 80161c2:	e7c6      	b.n	8016152 <_printf_common+0x3e>
 80161c4:	18e1      	adds	r1, r4, r3
 80161c6:	1c5a      	adds	r2, r3, #1
 80161c8:	2030      	movs	r0, #48	@ 0x30
 80161ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80161ce:	4422      	add	r2, r4
 80161d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80161d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80161d8:	3302      	adds	r3, #2
 80161da:	e7c7      	b.n	801616c <_printf_common+0x58>
 80161dc:	2301      	movs	r3, #1
 80161de:	4622      	mov	r2, r4
 80161e0:	4641      	mov	r1, r8
 80161e2:	4638      	mov	r0, r7
 80161e4:	47c8      	blx	r9
 80161e6:	3001      	adds	r0, #1
 80161e8:	d0e6      	beq.n	80161b8 <_printf_common+0xa4>
 80161ea:	3601      	adds	r6, #1
 80161ec:	e7d9      	b.n	80161a2 <_printf_common+0x8e>
	...

080161f0 <_printf_i>:
 80161f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161f4:	7e0f      	ldrb	r7, [r1, #24]
 80161f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80161f8:	2f78      	cmp	r7, #120	@ 0x78
 80161fa:	4691      	mov	r9, r2
 80161fc:	4680      	mov	r8, r0
 80161fe:	460c      	mov	r4, r1
 8016200:	469a      	mov	sl, r3
 8016202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016206:	d807      	bhi.n	8016218 <_printf_i+0x28>
 8016208:	2f62      	cmp	r7, #98	@ 0x62
 801620a:	d80a      	bhi.n	8016222 <_printf_i+0x32>
 801620c:	2f00      	cmp	r7, #0
 801620e:	f000 80d2 	beq.w	80163b6 <_printf_i+0x1c6>
 8016212:	2f58      	cmp	r7, #88	@ 0x58
 8016214:	f000 80b9 	beq.w	801638a <_printf_i+0x19a>
 8016218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801621c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016220:	e03a      	b.n	8016298 <_printf_i+0xa8>
 8016222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016226:	2b15      	cmp	r3, #21
 8016228:	d8f6      	bhi.n	8016218 <_printf_i+0x28>
 801622a:	a101      	add	r1, pc, #4	@ (adr r1, 8016230 <_printf_i+0x40>)
 801622c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016230:	08016289 	.word	0x08016289
 8016234:	0801629d 	.word	0x0801629d
 8016238:	08016219 	.word	0x08016219
 801623c:	08016219 	.word	0x08016219
 8016240:	08016219 	.word	0x08016219
 8016244:	08016219 	.word	0x08016219
 8016248:	0801629d 	.word	0x0801629d
 801624c:	08016219 	.word	0x08016219
 8016250:	08016219 	.word	0x08016219
 8016254:	08016219 	.word	0x08016219
 8016258:	08016219 	.word	0x08016219
 801625c:	0801639d 	.word	0x0801639d
 8016260:	080162c7 	.word	0x080162c7
 8016264:	08016357 	.word	0x08016357
 8016268:	08016219 	.word	0x08016219
 801626c:	08016219 	.word	0x08016219
 8016270:	080163bf 	.word	0x080163bf
 8016274:	08016219 	.word	0x08016219
 8016278:	080162c7 	.word	0x080162c7
 801627c:	08016219 	.word	0x08016219
 8016280:	08016219 	.word	0x08016219
 8016284:	0801635f 	.word	0x0801635f
 8016288:	6833      	ldr	r3, [r6, #0]
 801628a:	1d1a      	adds	r2, r3, #4
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	6032      	str	r2, [r6, #0]
 8016290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016298:	2301      	movs	r3, #1
 801629a:	e09d      	b.n	80163d8 <_printf_i+0x1e8>
 801629c:	6833      	ldr	r3, [r6, #0]
 801629e:	6820      	ldr	r0, [r4, #0]
 80162a0:	1d19      	adds	r1, r3, #4
 80162a2:	6031      	str	r1, [r6, #0]
 80162a4:	0606      	lsls	r6, r0, #24
 80162a6:	d501      	bpl.n	80162ac <_printf_i+0xbc>
 80162a8:	681d      	ldr	r5, [r3, #0]
 80162aa:	e003      	b.n	80162b4 <_printf_i+0xc4>
 80162ac:	0645      	lsls	r5, r0, #25
 80162ae:	d5fb      	bpl.n	80162a8 <_printf_i+0xb8>
 80162b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80162b4:	2d00      	cmp	r5, #0
 80162b6:	da03      	bge.n	80162c0 <_printf_i+0xd0>
 80162b8:	232d      	movs	r3, #45	@ 0x2d
 80162ba:	426d      	negs	r5, r5
 80162bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162c0:	4859      	ldr	r0, [pc, #356]	@ (8016428 <_printf_i+0x238>)
 80162c2:	230a      	movs	r3, #10
 80162c4:	e011      	b.n	80162ea <_printf_i+0xfa>
 80162c6:	6821      	ldr	r1, [r4, #0]
 80162c8:	6833      	ldr	r3, [r6, #0]
 80162ca:	0608      	lsls	r0, r1, #24
 80162cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80162d0:	d402      	bmi.n	80162d8 <_printf_i+0xe8>
 80162d2:	0649      	lsls	r1, r1, #25
 80162d4:	bf48      	it	mi
 80162d6:	b2ad      	uxthmi	r5, r5
 80162d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80162da:	4853      	ldr	r0, [pc, #332]	@ (8016428 <_printf_i+0x238>)
 80162dc:	6033      	str	r3, [r6, #0]
 80162de:	bf14      	ite	ne
 80162e0:	230a      	movne	r3, #10
 80162e2:	2308      	moveq	r3, #8
 80162e4:	2100      	movs	r1, #0
 80162e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80162ea:	6866      	ldr	r6, [r4, #4]
 80162ec:	60a6      	str	r6, [r4, #8]
 80162ee:	2e00      	cmp	r6, #0
 80162f0:	bfa2      	ittt	ge
 80162f2:	6821      	ldrge	r1, [r4, #0]
 80162f4:	f021 0104 	bicge.w	r1, r1, #4
 80162f8:	6021      	strge	r1, [r4, #0]
 80162fa:	b90d      	cbnz	r5, 8016300 <_printf_i+0x110>
 80162fc:	2e00      	cmp	r6, #0
 80162fe:	d04b      	beq.n	8016398 <_printf_i+0x1a8>
 8016300:	4616      	mov	r6, r2
 8016302:	fbb5 f1f3 	udiv	r1, r5, r3
 8016306:	fb03 5711 	mls	r7, r3, r1, r5
 801630a:	5dc7      	ldrb	r7, [r0, r7]
 801630c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016310:	462f      	mov	r7, r5
 8016312:	42bb      	cmp	r3, r7
 8016314:	460d      	mov	r5, r1
 8016316:	d9f4      	bls.n	8016302 <_printf_i+0x112>
 8016318:	2b08      	cmp	r3, #8
 801631a:	d10b      	bne.n	8016334 <_printf_i+0x144>
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	07df      	lsls	r7, r3, #31
 8016320:	d508      	bpl.n	8016334 <_printf_i+0x144>
 8016322:	6923      	ldr	r3, [r4, #16]
 8016324:	6861      	ldr	r1, [r4, #4]
 8016326:	4299      	cmp	r1, r3
 8016328:	bfde      	ittt	le
 801632a:	2330      	movle	r3, #48	@ 0x30
 801632c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016334:	1b92      	subs	r2, r2, r6
 8016336:	6122      	str	r2, [r4, #16]
 8016338:	f8cd a000 	str.w	sl, [sp]
 801633c:	464b      	mov	r3, r9
 801633e:	aa03      	add	r2, sp, #12
 8016340:	4621      	mov	r1, r4
 8016342:	4640      	mov	r0, r8
 8016344:	f7ff fee6 	bl	8016114 <_printf_common>
 8016348:	3001      	adds	r0, #1
 801634a:	d14a      	bne.n	80163e2 <_printf_i+0x1f2>
 801634c:	f04f 30ff 	mov.w	r0, #4294967295
 8016350:	b004      	add	sp, #16
 8016352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016356:	6823      	ldr	r3, [r4, #0]
 8016358:	f043 0320 	orr.w	r3, r3, #32
 801635c:	6023      	str	r3, [r4, #0]
 801635e:	4833      	ldr	r0, [pc, #204]	@ (801642c <_printf_i+0x23c>)
 8016360:	2778      	movs	r7, #120	@ 0x78
 8016362:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	6831      	ldr	r1, [r6, #0]
 801636a:	061f      	lsls	r7, r3, #24
 801636c:	f851 5b04 	ldr.w	r5, [r1], #4
 8016370:	d402      	bmi.n	8016378 <_printf_i+0x188>
 8016372:	065f      	lsls	r7, r3, #25
 8016374:	bf48      	it	mi
 8016376:	b2ad      	uxthmi	r5, r5
 8016378:	6031      	str	r1, [r6, #0]
 801637a:	07d9      	lsls	r1, r3, #31
 801637c:	bf44      	itt	mi
 801637e:	f043 0320 	orrmi.w	r3, r3, #32
 8016382:	6023      	strmi	r3, [r4, #0]
 8016384:	b11d      	cbz	r5, 801638e <_printf_i+0x19e>
 8016386:	2310      	movs	r3, #16
 8016388:	e7ac      	b.n	80162e4 <_printf_i+0xf4>
 801638a:	4827      	ldr	r0, [pc, #156]	@ (8016428 <_printf_i+0x238>)
 801638c:	e7e9      	b.n	8016362 <_printf_i+0x172>
 801638e:	6823      	ldr	r3, [r4, #0]
 8016390:	f023 0320 	bic.w	r3, r3, #32
 8016394:	6023      	str	r3, [r4, #0]
 8016396:	e7f6      	b.n	8016386 <_printf_i+0x196>
 8016398:	4616      	mov	r6, r2
 801639a:	e7bd      	b.n	8016318 <_printf_i+0x128>
 801639c:	6833      	ldr	r3, [r6, #0]
 801639e:	6825      	ldr	r5, [r4, #0]
 80163a0:	6961      	ldr	r1, [r4, #20]
 80163a2:	1d18      	adds	r0, r3, #4
 80163a4:	6030      	str	r0, [r6, #0]
 80163a6:	062e      	lsls	r6, r5, #24
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	d501      	bpl.n	80163b0 <_printf_i+0x1c0>
 80163ac:	6019      	str	r1, [r3, #0]
 80163ae:	e002      	b.n	80163b6 <_printf_i+0x1c6>
 80163b0:	0668      	lsls	r0, r5, #25
 80163b2:	d5fb      	bpl.n	80163ac <_printf_i+0x1bc>
 80163b4:	8019      	strh	r1, [r3, #0]
 80163b6:	2300      	movs	r3, #0
 80163b8:	6123      	str	r3, [r4, #16]
 80163ba:	4616      	mov	r6, r2
 80163bc:	e7bc      	b.n	8016338 <_printf_i+0x148>
 80163be:	6833      	ldr	r3, [r6, #0]
 80163c0:	1d1a      	adds	r2, r3, #4
 80163c2:	6032      	str	r2, [r6, #0]
 80163c4:	681e      	ldr	r6, [r3, #0]
 80163c6:	6862      	ldr	r2, [r4, #4]
 80163c8:	2100      	movs	r1, #0
 80163ca:	4630      	mov	r0, r6
 80163cc:	f7f1 fc18 	bl	8007c00 <memchr>
 80163d0:	b108      	cbz	r0, 80163d6 <_printf_i+0x1e6>
 80163d2:	1b80      	subs	r0, r0, r6
 80163d4:	6060      	str	r0, [r4, #4]
 80163d6:	6863      	ldr	r3, [r4, #4]
 80163d8:	6123      	str	r3, [r4, #16]
 80163da:	2300      	movs	r3, #0
 80163dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80163e0:	e7aa      	b.n	8016338 <_printf_i+0x148>
 80163e2:	6923      	ldr	r3, [r4, #16]
 80163e4:	4632      	mov	r2, r6
 80163e6:	4649      	mov	r1, r9
 80163e8:	4640      	mov	r0, r8
 80163ea:	47d0      	blx	sl
 80163ec:	3001      	adds	r0, #1
 80163ee:	d0ad      	beq.n	801634c <_printf_i+0x15c>
 80163f0:	6823      	ldr	r3, [r4, #0]
 80163f2:	079b      	lsls	r3, r3, #30
 80163f4:	d413      	bmi.n	801641e <_printf_i+0x22e>
 80163f6:	68e0      	ldr	r0, [r4, #12]
 80163f8:	9b03      	ldr	r3, [sp, #12]
 80163fa:	4298      	cmp	r0, r3
 80163fc:	bfb8      	it	lt
 80163fe:	4618      	movlt	r0, r3
 8016400:	e7a6      	b.n	8016350 <_printf_i+0x160>
 8016402:	2301      	movs	r3, #1
 8016404:	4632      	mov	r2, r6
 8016406:	4649      	mov	r1, r9
 8016408:	4640      	mov	r0, r8
 801640a:	47d0      	blx	sl
 801640c:	3001      	adds	r0, #1
 801640e:	d09d      	beq.n	801634c <_printf_i+0x15c>
 8016410:	3501      	adds	r5, #1
 8016412:	68e3      	ldr	r3, [r4, #12]
 8016414:	9903      	ldr	r1, [sp, #12]
 8016416:	1a5b      	subs	r3, r3, r1
 8016418:	42ab      	cmp	r3, r5
 801641a:	dcf2      	bgt.n	8016402 <_printf_i+0x212>
 801641c:	e7eb      	b.n	80163f6 <_printf_i+0x206>
 801641e:	2500      	movs	r5, #0
 8016420:	f104 0619 	add.w	r6, r4, #25
 8016424:	e7f5      	b.n	8016412 <_printf_i+0x222>
 8016426:	bf00      	nop
 8016428:	08018615 	.word	0x08018615
 801642c:	08018626 	.word	0x08018626

08016430 <__sflush_r>:
 8016430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016438:	0716      	lsls	r6, r2, #28
 801643a:	4605      	mov	r5, r0
 801643c:	460c      	mov	r4, r1
 801643e:	d454      	bmi.n	80164ea <__sflush_r+0xba>
 8016440:	684b      	ldr	r3, [r1, #4]
 8016442:	2b00      	cmp	r3, #0
 8016444:	dc02      	bgt.n	801644c <__sflush_r+0x1c>
 8016446:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016448:	2b00      	cmp	r3, #0
 801644a:	dd48      	ble.n	80164de <__sflush_r+0xae>
 801644c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801644e:	2e00      	cmp	r6, #0
 8016450:	d045      	beq.n	80164de <__sflush_r+0xae>
 8016452:	2300      	movs	r3, #0
 8016454:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016458:	682f      	ldr	r7, [r5, #0]
 801645a:	6a21      	ldr	r1, [r4, #32]
 801645c:	602b      	str	r3, [r5, #0]
 801645e:	d030      	beq.n	80164c2 <__sflush_r+0x92>
 8016460:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016462:	89a3      	ldrh	r3, [r4, #12]
 8016464:	0759      	lsls	r1, r3, #29
 8016466:	d505      	bpl.n	8016474 <__sflush_r+0x44>
 8016468:	6863      	ldr	r3, [r4, #4]
 801646a:	1ad2      	subs	r2, r2, r3
 801646c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801646e:	b10b      	cbz	r3, 8016474 <__sflush_r+0x44>
 8016470:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016472:	1ad2      	subs	r2, r2, r3
 8016474:	2300      	movs	r3, #0
 8016476:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016478:	6a21      	ldr	r1, [r4, #32]
 801647a:	4628      	mov	r0, r5
 801647c:	47b0      	blx	r6
 801647e:	1c43      	adds	r3, r0, #1
 8016480:	89a3      	ldrh	r3, [r4, #12]
 8016482:	d106      	bne.n	8016492 <__sflush_r+0x62>
 8016484:	6829      	ldr	r1, [r5, #0]
 8016486:	291d      	cmp	r1, #29
 8016488:	d82b      	bhi.n	80164e2 <__sflush_r+0xb2>
 801648a:	4a2a      	ldr	r2, [pc, #168]	@ (8016534 <__sflush_r+0x104>)
 801648c:	410a      	asrs	r2, r1
 801648e:	07d6      	lsls	r6, r2, #31
 8016490:	d427      	bmi.n	80164e2 <__sflush_r+0xb2>
 8016492:	2200      	movs	r2, #0
 8016494:	6062      	str	r2, [r4, #4]
 8016496:	04d9      	lsls	r1, r3, #19
 8016498:	6922      	ldr	r2, [r4, #16]
 801649a:	6022      	str	r2, [r4, #0]
 801649c:	d504      	bpl.n	80164a8 <__sflush_r+0x78>
 801649e:	1c42      	adds	r2, r0, #1
 80164a0:	d101      	bne.n	80164a6 <__sflush_r+0x76>
 80164a2:	682b      	ldr	r3, [r5, #0]
 80164a4:	b903      	cbnz	r3, 80164a8 <__sflush_r+0x78>
 80164a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80164a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80164aa:	602f      	str	r7, [r5, #0]
 80164ac:	b1b9      	cbz	r1, 80164de <__sflush_r+0xae>
 80164ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80164b2:	4299      	cmp	r1, r3
 80164b4:	d002      	beq.n	80164bc <__sflush_r+0x8c>
 80164b6:	4628      	mov	r0, r5
 80164b8:	f7ff fb48 	bl	8015b4c <_free_r>
 80164bc:	2300      	movs	r3, #0
 80164be:	6363      	str	r3, [r4, #52]	@ 0x34
 80164c0:	e00d      	b.n	80164de <__sflush_r+0xae>
 80164c2:	2301      	movs	r3, #1
 80164c4:	4628      	mov	r0, r5
 80164c6:	47b0      	blx	r6
 80164c8:	4602      	mov	r2, r0
 80164ca:	1c50      	adds	r0, r2, #1
 80164cc:	d1c9      	bne.n	8016462 <__sflush_r+0x32>
 80164ce:	682b      	ldr	r3, [r5, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d0c6      	beq.n	8016462 <__sflush_r+0x32>
 80164d4:	2b1d      	cmp	r3, #29
 80164d6:	d001      	beq.n	80164dc <__sflush_r+0xac>
 80164d8:	2b16      	cmp	r3, #22
 80164da:	d11e      	bne.n	801651a <__sflush_r+0xea>
 80164dc:	602f      	str	r7, [r5, #0]
 80164de:	2000      	movs	r0, #0
 80164e0:	e022      	b.n	8016528 <__sflush_r+0xf8>
 80164e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164e6:	b21b      	sxth	r3, r3
 80164e8:	e01b      	b.n	8016522 <__sflush_r+0xf2>
 80164ea:	690f      	ldr	r7, [r1, #16]
 80164ec:	2f00      	cmp	r7, #0
 80164ee:	d0f6      	beq.n	80164de <__sflush_r+0xae>
 80164f0:	0793      	lsls	r3, r2, #30
 80164f2:	680e      	ldr	r6, [r1, #0]
 80164f4:	bf08      	it	eq
 80164f6:	694b      	ldreq	r3, [r1, #20]
 80164f8:	600f      	str	r7, [r1, #0]
 80164fa:	bf18      	it	ne
 80164fc:	2300      	movne	r3, #0
 80164fe:	eba6 0807 	sub.w	r8, r6, r7
 8016502:	608b      	str	r3, [r1, #8]
 8016504:	f1b8 0f00 	cmp.w	r8, #0
 8016508:	dde9      	ble.n	80164de <__sflush_r+0xae>
 801650a:	6a21      	ldr	r1, [r4, #32]
 801650c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801650e:	4643      	mov	r3, r8
 8016510:	463a      	mov	r2, r7
 8016512:	4628      	mov	r0, r5
 8016514:	47b0      	blx	r6
 8016516:	2800      	cmp	r0, #0
 8016518:	dc08      	bgt.n	801652c <__sflush_r+0xfc>
 801651a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801651e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016522:	81a3      	strh	r3, [r4, #12]
 8016524:	f04f 30ff 	mov.w	r0, #4294967295
 8016528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801652c:	4407      	add	r7, r0
 801652e:	eba8 0800 	sub.w	r8, r8, r0
 8016532:	e7e7      	b.n	8016504 <__sflush_r+0xd4>
 8016534:	dfbffffe 	.word	0xdfbffffe

08016538 <_fflush_r>:
 8016538:	b538      	push	{r3, r4, r5, lr}
 801653a:	690b      	ldr	r3, [r1, #16]
 801653c:	4605      	mov	r5, r0
 801653e:	460c      	mov	r4, r1
 8016540:	b913      	cbnz	r3, 8016548 <_fflush_r+0x10>
 8016542:	2500      	movs	r5, #0
 8016544:	4628      	mov	r0, r5
 8016546:	bd38      	pop	{r3, r4, r5, pc}
 8016548:	b118      	cbz	r0, 8016552 <_fflush_r+0x1a>
 801654a:	6a03      	ldr	r3, [r0, #32]
 801654c:	b90b      	cbnz	r3, 8016552 <_fflush_r+0x1a>
 801654e:	f7fe ffd3 	bl	80154f8 <__sinit>
 8016552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d0f3      	beq.n	8016542 <_fflush_r+0xa>
 801655a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801655c:	07d0      	lsls	r0, r2, #31
 801655e:	d404      	bmi.n	801656a <_fflush_r+0x32>
 8016560:	0599      	lsls	r1, r3, #22
 8016562:	d402      	bmi.n	801656a <_fflush_r+0x32>
 8016564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016566:	f7ff fad8 	bl	8015b1a <__retarget_lock_acquire_recursive>
 801656a:	4628      	mov	r0, r5
 801656c:	4621      	mov	r1, r4
 801656e:	f7ff ff5f 	bl	8016430 <__sflush_r>
 8016572:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016574:	07da      	lsls	r2, r3, #31
 8016576:	4605      	mov	r5, r0
 8016578:	d4e4      	bmi.n	8016544 <_fflush_r+0xc>
 801657a:	89a3      	ldrh	r3, [r4, #12]
 801657c:	059b      	lsls	r3, r3, #22
 801657e:	d4e1      	bmi.n	8016544 <_fflush_r+0xc>
 8016580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016582:	f7ff facb 	bl	8015b1c <__retarget_lock_release_recursive>
 8016586:	e7dd      	b.n	8016544 <_fflush_r+0xc>

08016588 <__swhatbuf_r>:
 8016588:	b570      	push	{r4, r5, r6, lr}
 801658a:	460c      	mov	r4, r1
 801658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016590:	2900      	cmp	r1, #0
 8016592:	b096      	sub	sp, #88	@ 0x58
 8016594:	4615      	mov	r5, r2
 8016596:	461e      	mov	r6, r3
 8016598:	da0d      	bge.n	80165b6 <__swhatbuf_r+0x2e>
 801659a:	89a3      	ldrh	r3, [r4, #12]
 801659c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80165a0:	f04f 0100 	mov.w	r1, #0
 80165a4:	bf14      	ite	ne
 80165a6:	2340      	movne	r3, #64	@ 0x40
 80165a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80165ac:	2000      	movs	r0, #0
 80165ae:	6031      	str	r1, [r6, #0]
 80165b0:	602b      	str	r3, [r5, #0]
 80165b2:	b016      	add	sp, #88	@ 0x58
 80165b4:	bd70      	pop	{r4, r5, r6, pc}
 80165b6:	466a      	mov	r2, sp
 80165b8:	f000 f892 	bl	80166e0 <_fstat_r>
 80165bc:	2800      	cmp	r0, #0
 80165be:	dbec      	blt.n	801659a <__swhatbuf_r+0x12>
 80165c0:	9901      	ldr	r1, [sp, #4]
 80165c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80165c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80165ca:	4259      	negs	r1, r3
 80165cc:	4159      	adcs	r1, r3
 80165ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80165d2:	e7eb      	b.n	80165ac <__swhatbuf_r+0x24>

080165d4 <__smakebuf_r>:
 80165d4:	898b      	ldrh	r3, [r1, #12]
 80165d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165d8:	079d      	lsls	r5, r3, #30
 80165da:	4606      	mov	r6, r0
 80165dc:	460c      	mov	r4, r1
 80165de:	d507      	bpl.n	80165f0 <__smakebuf_r+0x1c>
 80165e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80165e4:	6023      	str	r3, [r4, #0]
 80165e6:	6123      	str	r3, [r4, #16]
 80165e8:	2301      	movs	r3, #1
 80165ea:	6163      	str	r3, [r4, #20]
 80165ec:	b003      	add	sp, #12
 80165ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165f0:	ab01      	add	r3, sp, #4
 80165f2:	466a      	mov	r2, sp
 80165f4:	f7ff ffc8 	bl	8016588 <__swhatbuf_r>
 80165f8:	9f00      	ldr	r7, [sp, #0]
 80165fa:	4605      	mov	r5, r0
 80165fc:	4639      	mov	r1, r7
 80165fe:	4630      	mov	r0, r6
 8016600:	f7fe fe62 	bl	80152c8 <_malloc_r>
 8016604:	b948      	cbnz	r0, 801661a <__smakebuf_r+0x46>
 8016606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801660a:	059a      	lsls	r2, r3, #22
 801660c:	d4ee      	bmi.n	80165ec <__smakebuf_r+0x18>
 801660e:	f023 0303 	bic.w	r3, r3, #3
 8016612:	f043 0302 	orr.w	r3, r3, #2
 8016616:	81a3      	strh	r3, [r4, #12]
 8016618:	e7e2      	b.n	80165e0 <__smakebuf_r+0xc>
 801661a:	89a3      	ldrh	r3, [r4, #12]
 801661c:	6020      	str	r0, [r4, #0]
 801661e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016622:	81a3      	strh	r3, [r4, #12]
 8016624:	9b01      	ldr	r3, [sp, #4]
 8016626:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801662a:	b15b      	cbz	r3, 8016644 <__smakebuf_r+0x70>
 801662c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016630:	4630      	mov	r0, r6
 8016632:	f000 f867 	bl	8016704 <_isatty_r>
 8016636:	b128      	cbz	r0, 8016644 <__smakebuf_r+0x70>
 8016638:	89a3      	ldrh	r3, [r4, #12]
 801663a:	f023 0303 	bic.w	r3, r3, #3
 801663e:	f043 0301 	orr.w	r3, r3, #1
 8016642:	81a3      	strh	r3, [r4, #12]
 8016644:	89a3      	ldrh	r3, [r4, #12]
 8016646:	431d      	orrs	r5, r3
 8016648:	81a5      	strh	r5, [r4, #12]
 801664a:	e7cf      	b.n	80165ec <__smakebuf_r+0x18>

0801664c <memmove>:
 801664c:	4288      	cmp	r0, r1
 801664e:	b510      	push	{r4, lr}
 8016650:	eb01 0402 	add.w	r4, r1, r2
 8016654:	d902      	bls.n	801665c <memmove+0x10>
 8016656:	4284      	cmp	r4, r0
 8016658:	4623      	mov	r3, r4
 801665a:	d807      	bhi.n	801666c <memmove+0x20>
 801665c:	1e43      	subs	r3, r0, #1
 801665e:	42a1      	cmp	r1, r4
 8016660:	d008      	beq.n	8016674 <memmove+0x28>
 8016662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016666:	f803 2f01 	strb.w	r2, [r3, #1]!
 801666a:	e7f8      	b.n	801665e <memmove+0x12>
 801666c:	4402      	add	r2, r0
 801666e:	4601      	mov	r1, r0
 8016670:	428a      	cmp	r2, r1
 8016672:	d100      	bne.n	8016676 <memmove+0x2a>
 8016674:	bd10      	pop	{r4, pc}
 8016676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801667a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801667e:	e7f7      	b.n	8016670 <memmove+0x24>

08016680 <_raise_r>:
 8016680:	291f      	cmp	r1, #31
 8016682:	b538      	push	{r3, r4, r5, lr}
 8016684:	4605      	mov	r5, r0
 8016686:	460c      	mov	r4, r1
 8016688:	d904      	bls.n	8016694 <_raise_r+0x14>
 801668a:	2316      	movs	r3, #22
 801668c:	6003      	str	r3, [r0, #0]
 801668e:	f04f 30ff 	mov.w	r0, #4294967295
 8016692:	bd38      	pop	{r3, r4, r5, pc}
 8016694:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016696:	b112      	cbz	r2, 801669e <_raise_r+0x1e>
 8016698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801669c:	b94b      	cbnz	r3, 80166b2 <_raise_r+0x32>
 801669e:	4628      	mov	r0, r5
 80166a0:	f000 f852 	bl	8016748 <_getpid_r>
 80166a4:	4622      	mov	r2, r4
 80166a6:	4601      	mov	r1, r0
 80166a8:	4628      	mov	r0, r5
 80166aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166ae:	f000 b839 	b.w	8016724 <_kill_r>
 80166b2:	2b01      	cmp	r3, #1
 80166b4:	d00a      	beq.n	80166cc <_raise_r+0x4c>
 80166b6:	1c59      	adds	r1, r3, #1
 80166b8:	d103      	bne.n	80166c2 <_raise_r+0x42>
 80166ba:	2316      	movs	r3, #22
 80166bc:	6003      	str	r3, [r0, #0]
 80166be:	2001      	movs	r0, #1
 80166c0:	e7e7      	b.n	8016692 <_raise_r+0x12>
 80166c2:	2100      	movs	r1, #0
 80166c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80166c8:	4620      	mov	r0, r4
 80166ca:	4798      	blx	r3
 80166cc:	2000      	movs	r0, #0
 80166ce:	e7e0      	b.n	8016692 <_raise_r+0x12>

080166d0 <raise>:
 80166d0:	4b02      	ldr	r3, [pc, #8]	@ (80166dc <raise+0xc>)
 80166d2:	4601      	mov	r1, r0
 80166d4:	6818      	ldr	r0, [r3, #0]
 80166d6:	f7ff bfd3 	b.w	8016680 <_raise_r>
 80166da:	bf00      	nop
 80166dc:	20000094 	.word	0x20000094

080166e0 <_fstat_r>:
 80166e0:	b538      	push	{r3, r4, r5, lr}
 80166e2:	4d07      	ldr	r5, [pc, #28]	@ (8016700 <_fstat_r+0x20>)
 80166e4:	2300      	movs	r3, #0
 80166e6:	4604      	mov	r4, r0
 80166e8:	4608      	mov	r0, r1
 80166ea:	4611      	mov	r1, r2
 80166ec:	602b      	str	r3, [r5, #0]
 80166ee:	f7f3 fb63 	bl	8009db8 <_fstat>
 80166f2:	1c43      	adds	r3, r0, #1
 80166f4:	d102      	bne.n	80166fc <_fstat_r+0x1c>
 80166f6:	682b      	ldr	r3, [r5, #0]
 80166f8:	b103      	cbz	r3, 80166fc <_fstat_r+0x1c>
 80166fa:	6023      	str	r3, [r4, #0]
 80166fc:	bd38      	pop	{r3, r4, r5, pc}
 80166fe:	bf00      	nop
 8016700:	2000097c 	.word	0x2000097c

08016704 <_isatty_r>:
 8016704:	b538      	push	{r3, r4, r5, lr}
 8016706:	4d06      	ldr	r5, [pc, #24]	@ (8016720 <_isatty_r+0x1c>)
 8016708:	2300      	movs	r3, #0
 801670a:	4604      	mov	r4, r0
 801670c:	4608      	mov	r0, r1
 801670e:	602b      	str	r3, [r5, #0]
 8016710:	f7f3 fb62 	bl	8009dd8 <_isatty>
 8016714:	1c43      	adds	r3, r0, #1
 8016716:	d102      	bne.n	801671e <_isatty_r+0x1a>
 8016718:	682b      	ldr	r3, [r5, #0]
 801671a:	b103      	cbz	r3, 801671e <_isatty_r+0x1a>
 801671c:	6023      	str	r3, [r4, #0]
 801671e:	bd38      	pop	{r3, r4, r5, pc}
 8016720:	2000097c 	.word	0x2000097c

08016724 <_kill_r>:
 8016724:	b538      	push	{r3, r4, r5, lr}
 8016726:	4d07      	ldr	r5, [pc, #28]	@ (8016744 <_kill_r+0x20>)
 8016728:	2300      	movs	r3, #0
 801672a:	4604      	mov	r4, r0
 801672c:	4608      	mov	r0, r1
 801672e:	4611      	mov	r1, r2
 8016730:	602b      	str	r3, [r5, #0]
 8016732:	f7f3 fae1 	bl	8009cf8 <_kill>
 8016736:	1c43      	adds	r3, r0, #1
 8016738:	d102      	bne.n	8016740 <_kill_r+0x1c>
 801673a:	682b      	ldr	r3, [r5, #0]
 801673c:	b103      	cbz	r3, 8016740 <_kill_r+0x1c>
 801673e:	6023      	str	r3, [r4, #0]
 8016740:	bd38      	pop	{r3, r4, r5, pc}
 8016742:	bf00      	nop
 8016744:	2000097c 	.word	0x2000097c

08016748 <_getpid_r>:
 8016748:	f7f3 bace 	b.w	8009ce8 <_getpid>

0801674c <_realloc_r>:
 801674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016750:	4680      	mov	r8, r0
 8016752:	4615      	mov	r5, r2
 8016754:	460c      	mov	r4, r1
 8016756:	b921      	cbnz	r1, 8016762 <_realloc_r+0x16>
 8016758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801675c:	4611      	mov	r1, r2
 801675e:	f7fe bdb3 	b.w	80152c8 <_malloc_r>
 8016762:	b92a      	cbnz	r2, 8016770 <_realloc_r+0x24>
 8016764:	f7ff f9f2 	bl	8015b4c <_free_r>
 8016768:	2400      	movs	r4, #0
 801676a:	4620      	mov	r0, r4
 801676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016770:	f000 f81a 	bl	80167a8 <_malloc_usable_size_r>
 8016774:	4285      	cmp	r5, r0
 8016776:	4606      	mov	r6, r0
 8016778:	d802      	bhi.n	8016780 <_realloc_r+0x34>
 801677a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801677e:	d8f4      	bhi.n	801676a <_realloc_r+0x1e>
 8016780:	4629      	mov	r1, r5
 8016782:	4640      	mov	r0, r8
 8016784:	f7fe fda0 	bl	80152c8 <_malloc_r>
 8016788:	4607      	mov	r7, r0
 801678a:	2800      	cmp	r0, #0
 801678c:	d0ec      	beq.n	8016768 <_realloc_r+0x1c>
 801678e:	42b5      	cmp	r5, r6
 8016790:	462a      	mov	r2, r5
 8016792:	4621      	mov	r1, r4
 8016794:	bf28      	it	cs
 8016796:	4632      	movcs	r2, r6
 8016798:	f7ff f9c3 	bl	8015b22 <memcpy>
 801679c:	4621      	mov	r1, r4
 801679e:	4640      	mov	r0, r8
 80167a0:	f7ff f9d4 	bl	8015b4c <_free_r>
 80167a4:	463c      	mov	r4, r7
 80167a6:	e7e0      	b.n	801676a <_realloc_r+0x1e>

080167a8 <_malloc_usable_size_r>:
 80167a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167ac:	1f18      	subs	r0, r3, #4
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	bfbc      	itt	lt
 80167b2:	580b      	ldrlt	r3, [r1, r0]
 80167b4:	18c0      	addlt	r0, r0, r3
 80167b6:	4770      	bx	lr

080167b8 <pow>:
 80167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ba:	ed2d 8b02 	vpush	{d8}
 80167be:	eeb0 8a40 	vmov.f32	s16, s0
 80167c2:	eef0 8a60 	vmov.f32	s17, s1
 80167c6:	ec55 4b11 	vmov	r4, r5, d1
 80167ca:	f000 f871 	bl	80168b0 <__ieee754_pow>
 80167ce:	4622      	mov	r2, r4
 80167d0:	462b      	mov	r3, r5
 80167d2:	4620      	mov	r0, r4
 80167d4:	4629      	mov	r1, r5
 80167d6:	ec57 6b10 	vmov	r6, r7, d0
 80167da:	f7f1 fec3 	bl	8008564 <__aeabi_dcmpun>
 80167de:	2800      	cmp	r0, #0
 80167e0:	d13b      	bne.n	801685a <pow+0xa2>
 80167e2:	ec51 0b18 	vmov	r0, r1, d8
 80167e6:	2200      	movs	r2, #0
 80167e8:	2300      	movs	r3, #0
 80167ea:	f7f1 fe89 	bl	8008500 <__aeabi_dcmpeq>
 80167ee:	b1b8      	cbz	r0, 8016820 <pow+0x68>
 80167f0:	2200      	movs	r2, #0
 80167f2:	2300      	movs	r3, #0
 80167f4:	4620      	mov	r0, r4
 80167f6:	4629      	mov	r1, r5
 80167f8:	f7f1 fe82 	bl	8008500 <__aeabi_dcmpeq>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	d146      	bne.n	801688e <pow+0xd6>
 8016800:	ec45 4b10 	vmov	d0, r4, r5
 8016804:	f000 f848 	bl	8016898 <finite>
 8016808:	b338      	cbz	r0, 801685a <pow+0xa2>
 801680a:	2200      	movs	r2, #0
 801680c:	2300      	movs	r3, #0
 801680e:	4620      	mov	r0, r4
 8016810:	4629      	mov	r1, r5
 8016812:	f7f1 fe7f 	bl	8008514 <__aeabi_dcmplt>
 8016816:	b300      	cbz	r0, 801685a <pow+0xa2>
 8016818:	f7ff f954 	bl	8015ac4 <__errno>
 801681c:	2322      	movs	r3, #34	@ 0x22
 801681e:	e01b      	b.n	8016858 <pow+0xa0>
 8016820:	ec47 6b10 	vmov	d0, r6, r7
 8016824:	f000 f838 	bl	8016898 <finite>
 8016828:	b9e0      	cbnz	r0, 8016864 <pow+0xac>
 801682a:	eeb0 0a48 	vmov.f32	s0, s16
 801682e:	eef0 0a68 	vmov.f32	s1, s17
 8016832:	f000 f831 	bl	8016898 <finite>
 8016836:	b1a8      	cbz	r0, 8016864 <pow+0xac>
 8016838:	ec45 4b10 	vmov	d0, r4, r5
 801683c:	f000 f82c 	bl	8016898 <finite>
 8016840:	b180      	cbz	r0, 8016864 <pow+0xac>
 8016842:	4632      	mov	r2, r6
 8016844:	463b      	mov	r3, r7
 8016846:	4630      	mov	r0, r6
 8016848:	4639      	mov	r1, r7
 801684a:	f7f1 fe8b 	bl	8008564 <__aeabi_dcmpun>
 801684e:	2800      	cmp	r0, #0
 8016850:	d0e2      	beq.n	8016818 <pow+0x60>
 8016852:	f7ff f937 	bl	8015ac4 <__errno>
 8016856:	2321      	movs	r3, #33	@ 0x21
 8016858:	6003      	str	r3, [r0, #0]
 801685a:	ecbd 8b02 	vpop	{d8}
 801685e:	ec47 6b10 	vmov	d0, r6, r7
 8016862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016864:	2200      	movs	r2, #0
 8016866:	2300      	movs	r3, #0
 8016868:	4630      	mov	r0, r6
 801686a:	4639      	mov	r1, r7
 801686c:	f7f1 fe48 	bl	8008500 <__aeabi_dcmpeq>
 8016870:	2800      	cmp	r0, #0
 8016872:	d0f2      	beq.n	801685a <pow+0xa2>
 8016874:	eeb0 0a48 	vmov.f32	s0, s16
 8016878:	eef0 0a68 	vmov.f32	s1, s17
 801687c:	f000 f80c 	bl	8016898 <finite>
 8016880:	2800      	cmp	r0, #0
 8016882:	d0ea      	beq.n	801685a <pow+0xa2>
 8016884:	ec45 4b10 	vmov	d0, r4, r5
 8016888:	f000 f806 	bl	8016898 <finite>
 801688c:	e7c3      	b.n	8016816 <pow+0x5e>
 801688e:	4f01      	ldr	r7, [pc, #4]	@ (8016894 <pow+0xdc>)
 8016890:	2600      	movs	r6, #0
 8016892:	e7e2      	b.n	801685a <pow+0xa2>
 8016894:	3ff00000 	.word	0x3ff00000

08016898 <finite>:
 8016898:	b082      	sub	sp, #8
 801689a:	ed8d 0b00 	vstr	d0, [sp]
 801689e:	9801      	ldr	r0, [sp, #4]
 80168a0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80168a4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80168a8:	0fc0      	lsrs	r0, r0, #31
 80168aa:	b002      	add	sp, #8
 80168ac:	4770      	bx	lr
	...

080168b0 <__ieee754_pow>:
 80168b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b4:	b091      	sub	sp, #68	@ 0x44
 80168b6:	ed8d 1b00 	vstr	d1, [sp]
 80168ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80168be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80168c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80168c6:	ec57 6b10 	vmov	r6, r7, d0
 80168ca:	d113      	bne.n	80168f4 <__ieee754_pow+0x44>
 80168cc:	19b3      	adds	r3, r6, r6
 80168ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80168d2:	4152      	adcs	r2, r2
 80168d4:	4298      	cmp	r0, r3
 80168d6:	4b98      	ldr	r3, [pc, #608]	@ (8016b38 <__ieee754_pow+0x288>)
 80168d8:	4193      	sbcs	r3, r2
 80168da:	f080 84ea 	bcs.w	80172b2 <__ieee754_pow+0xa02>
 80168de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168e2:	4630      	mov	r0, r6
 80168e4:	4639      	mov	r1, r7
 80168e6:	f7f1 f9ed 	bl	8007cc4 <__adddf3>
 80168ea:	ec41 0b10 	vmov	d0, r0, r1
 80168ee:	b011      	add	sp, #68	@ 0x44
 80168f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168f4:	4a91      	ldr	r2, [pc, #580]	@ (8016b3c <__ieee754_pow+0x28c>)
 80168f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80168fa:	4590      	cmp	r8, r2
 80168fc:	463d      	mov	r5, r7
 80168fe:	4633      	mov	r3, r6
 8016900:	d806      	bhi.n	8016910 <__ieee754_pow+0x60>
 8016902:	d101      	bne.n	8016908 <__ieee754_pow+0x58>
 8016904:	2e00      	cmp	r6, #0
 8016906:	d1ea      	bne.n	80168de <__ieee754_pow+0x2e>
 8016908:	4592      	cmp	sl, r2
 801690a:	d801      	bhi.n	8016910 <__ieee754_pow+0x60>
 801690c:	d10e      	bne.n	801692c <__ieee754_pow+0x7c>
 801690e:	b169      	cbz	r1, 801692c <__ieee754_pow+0x7c>
 8016910:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016914:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016918:	431d      	orrs	r5, r3
 801691a:	d1e0      	bne.n	80168de <__ieee754_pow+0x2e>
 801691c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016920:	18db      	adds	r3, r3, r3
 8016922:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016926:	4152      	adcs	r2, r2
 8016928:	429d      	cmp	r5, r3
 801692a:	e7d4      	b.n	80168d6 <__ieee754_pow+0x26>
 801692c:	2d00      	cmp	r5, #0
 801692e:	46c3      	mov	fp, r8
 8016930:	da3a      	bge.n	80169a8 <__ieee754_pow+0xf8>
 8016932:	4a83      	ldr	r2, [pc, #524]	@ (8016b40 <__ieee754_pow+0x290>)
 8016934:	4592      	cmp	sl, r2
 8016936:	d84d      	bhi.n	80169d4 <__ieee754_pow+0x124>
 8016938:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801693c:	4592      	cmp	sl, r2
 801693e:	f240 84c7 	bls.w	80172d0 <__ieee754_pow+0xa20>
 8016942:	ea4f 522a 	mov.w	r2, sl, asr #20
 8016946:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801694a:	2a14      	cmp	r2, #20
 801694c:	dd0f      	ble.n	801696e <__ieee754_pow+0xbe>
 801694e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8016952:	fa21 f402 	lsr.w	r4, r1, r2
 8016956:	fa04 f202 	lsl.w	r2, r4, r2
 801695a:	428a      	cmp	r2, r1
 801695c:	f040 84b8 	bne.w	80172d0 <__ieee754_pow+0xa20>
 8016960:	f004 0401 	and.w	r4, r4, #1
 8016964:	f1c4 0402 	rsb	r4, r4, #2
 8016968:	2900      	cmp	r1, #0
 801696a:	d158      	bne.n	8016a1e <__ieee754_pow+0x16e>
 801696c:	e00e      	b.n	801698c <__ieee754_pow+0xdc>
 801696e:	2900      	cmp	r1, #0
 8016970:	d154      	bne.n	8016a1c <__ieee754_pow+0x16c>
 8016972:	f1c2 0214 	rsb	r2, r2, #20
 8016976:	fa4a f402 	asr.w	r4, sl, r2
 801697a:	fa04 f202 	lsl.w	r2, r4, r2
 801697e:	4552      	cmp	r2, sl
 8016980:	f040 84a3 	bne.w	80172ca <__ieee754_pow+0xa1a>
 8016984:	f004 0401 	and.w	r4, r4, #1
 8016988:	f1c4 0402 	rsb	r4, r4, #2
 801698c:	4a6d      	ldr	r2, [pc, #436]	@ (8016b44 <__ieee754_pow+0x294>)
 801698e:	4592      	cmp	sl, r2
 8016990:	d12e      	bne.n	80169f0 <__ieee754_pow+0x140>
 8016992:	f1b9 0f00 	cmp.w	r9, #0
 8016996:	f280 8494 	bge.w	80172c2 <__ieee754_pow+0xa12>
 801699a:	496a      	ldr	r1, [pc, #424]	@ (8016b44 <__ieee754_pow+0x294>)
 801699c:	4632      	mov	r2, r6
 801699e:	463b      	mov	r3, r7
 80169a0:	2000      	movs	r0, #0
 80169a2:	f7f1 fc6f 	bl	8008284 <__aeabi_ddiv>
 80169a6:	e7a0      	b.n	80168ea <__ieee754_pow+0x3a>
 80169a8:	2400      	movs	r4, #0
 80169aa:	bbc1      	cbnz	r1, 8016a1e <__ieee754_pow+0x16e>
 80169ac:	4a63      	ldr	r2, [pc, #396]	@ (8016b3c <__ieee754_pow+0x28c>)
 80169ae:	4592      	cmp	sl, r2
 80169b0:	d1ec      	bne.n	801698c <__ieee754_pow+0xdc>
 80169b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80169b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80169ba:	431a      	orrs	r2, r3
 80169bc:	f000 8479 	beq.w	80172b2 <__ieee754_pow+0xa02>
 80169c0:	4b61      	ldr	r3, [pc, #388]	@ (8016b48 <__ieee754_pow+0x298>)
 80169c2:	4598      	cmp	r8, r3
 80169c4:	d908      	bls.n	80169d8 <__ieee754_pow+0x128>
 80169c6:	f1b9 0f00 	cmp.w	r9, #0
 80169ca:	f2c0 8476 	blt.w	80172ba <__ieee754_pow+0xa0a>
 80169ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169d2:	e78a      	b.n	80168ea <__ieee754_pow+0x3a>
 80169d4:	2402      	movs	r4, #2
 80169d6:	e7e8      	b.n	80169aa <__ieee754_pow+0xfa>
 80169d8:	f1b9 0f00 	cmp.w	r9, #0
 80169dc:	f04f 0000 	mov.w	r0, #0
 80169e0:	f04f 0100 	mov.w	r1, #0
 80169e4:	da81      	bge.n	80168ea <__ieee754_pow+0x3a>
 80169e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80169ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80169ee:	e77c      	b.n	80168ea <__ieee754_pow+0x3a>
 80169f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80169f4:	d106      	bne.n	8016a04 <__ieee754_pow+0x154>
 80169f6:	4632      	mov	r2, r6
 80169f8:	463b      	mov	r3, r7
 80169fa:	4630      	mov	r0, r6
 80169fc:	4639      	mov	r1, r7
 80169fe:	f7f1 fb17 	bl	8008030 <__aeabi_dmul>
 8016a02:	e772      	b.n	80168ea <__ieee754_pow+0x3a>
 8016a04:	4a51      	ldr	r2, [pc, #324]	@ (8016b4c <__ieee754_pow+0x29c>)
 8016a06:	4591      	cmp	r9, r2
 8016a08:	d109      	bne.n	8016a1e <__ieee754_pow+0x16e>
 8016a0a:	2d00      	cmp	r5, #0
 8016a0c:	db07      	blt.n	8016a1e <__ieee754_pow+0x16e>
 8016a0e:	ec47 6b10 	vmov	d0, r6, r7
 8016a12:	b011      	add	sp, #68	@ 0x44
 8016a14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a18:	f000 bd52 	b.w	80174c0 <__ieee754_sqrt>
 8016a1c:	2400      	movs	r4, #0
 8016a1e:	ec47 6b10 	vmov	d0, r6, r7
 8016a22:	9302      	str	r3, [sp, #8]
 8016a24:	f000 fc88 	bl	8017338 <fabs>
 8016a28:	9b02      	ldr	r3, [sp, #8]
 8016a2a:	ec51 0b10 	vmov	r0, r1, d0
 8016a2e:	bb53      	cbnz	r3, 8016a86 <__ieee754_pow+0x1d6>
 8016a30:	4b44      	ldr	r3, [pc, #272]	@ (8016b44 <__ieee754_pow+0x294>)
 8016a32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d002      	beq.n	8016a40 <__ieee754_pow+0x190>
 8016a3a:	f1b8 0f00 	cmp.w	r8, #0
 8016a3e:	d122      	bne.n	8016a86 <__ieee754_pow+0x1d6>
 8016a40:	f1b9 0f00 	cmp.w	r9, #0
 8016a44:	da05      	bge.n	8016a52 <__ieee754_pow+0x1a2>
 8016a46:	4602      	mov	r2, r0
 8016a48:	460b      	mov	r3, r1
 8016a4a:	2000      	movs	r0, #0
 8016a4c:	493d      	ldr	r1, [pc, #244]	@ (8016b44 <__ieee754_pow+0x294>)
 8016a4e:	f7f1 fc19 	bl	8008284 <__aeabi_ddiv>
 8016a52:	2d00      	cmp	r5, #0
 8016a54:	f6bf af49 	bge.w	80168ea <__ieee754_pow+0x3a>
 8016a58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8016a5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016a60:	ea58 0804 	orrs.w	r8, r8, r4
 8016a64:	d108      	bne.n	8016a78 <__ieee754_pow+0x1c8>
 8016a66:	4602      	mov	r2, r0
 8016a68:	460b      	mov	r3, r1
 8016a6a:	4610      	mov	r0, r2
 8016a6c:	4619      	mov	r1, r3
 8016a6e:	f7f1 f927 	bl	8007cc0 <__aeabi_dsub>
 8016a72:	4602      	mov	r2, r0
 8016a74:	460b      	mov	r3, r1
 8016a76:	e794      	b.n	80169a2 <__ieee754_pow+0xf2>
 8016a78:	2c01      	cmp	r4, #1
 8016a7a:	f47f af36 	bne.w	80168ea <__ieee754_pow+0x3a>
 8016a7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016a82:	4619      	mov	r1, r3
 8016a84:	e731      	b.n	80168ea <__ieee754_pow+0x3a>
 8016a86:	0feb      	lsrs	r3, r5, #31
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	ea53 0204 	orrs.w	r2, r3, r4
 8016a8e:	d102      	bne.n	8016a96 <__ieee754_pow+0x1e6>
 8016a90:	4632      	mov	r2, r6
 8016a92:	463b      	mov	r3, r7
 8016a94:	e7e9      	b.n	8016a6a <__ieee754_pow+0x1ba>
 8016a96:	3c01      	subs	r4, #1
 8016a98:	431c      	orrs	r4, r3
 8016a9a:	d016      	beq.n	8016aca <__ieee754_pow+0x21a>
 8016a9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016b28 <__ieee754_pow+0x278>
 8016aa0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016aa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016aa8:	f240 8112 	bls.w	8016cd0 <__ieee754_pow+0x420>
 8016aac:	4b28      	ldr	r3, [pc, #160]	@ (8016b50 <__ieee754_pow+0x2a0>)
 8016aae:	459a      	cmp	sl, r3
 8016ab0:	4b25      	ldr	r3, [pc, #148]	@ (8016b48 <__ieee754_pow+0x298>)
 8016ab2:	d916      	bls.n	8016ae2 <__ieee754_pow+0x232>
 8016ab4:	4598      	cmp	r8, r3
 8016ab6:	d80b      	bhi.n	8016ad0 <__ieee754_pow+0x220>
 8016ab8:	f1b9 0f00 	cmp.w	r9, #0
 8016abc:	da0b      	bge.n	8016ad6 <__ieee754_pow+0x226>
 8016abe:	2000      	movs	r0, #0
 8016ac0:	b011      	add	sp, #68	@ 0x44
 8016ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac6:	f000 bcf3 	b.w	80174b0 <__math_oflow>
 8016aca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016b30 <__ieee754_pow+0x280>
 8016ace:	e7e7      	b.n	8016aa0 <__ieee754_pow+0x1f0>
 8016ad0:	f1b9 0f00 	cmp.w	r9, #0
 8016ad4:	dcf3      	bgt.n	8016abe <__ieee754_pow+0x20e>
 8016ad6:	2000      	movs	r0, #0
 8016ad8:	b011      	add	sp, #68	@ 0x44
 8016ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ade:	f000 bcdf 	b.w	80174a0 <__math_uflow>
 8016ae2:	4598      	cmp	r8, r3
 8016ae4:	d20c      	bcs.n	8016b00 <__ieee754_pow+0x250>
 8016ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016aea:	2200      	movs	r2, #0
 8016aec:	2300      	movs	r3, #0
 8016aee:	f7f1 fd11 	bl	8008514 <__aeabi_dcmplt>
 8016af2:	3800      	subs	r0, #0
 8016af4:	bf18      	it	ne
 8016af6:	2001      	movne	r0, #1
 8016af8:	f1b9 0f00 	cmp.w	r9, #0
 8016afc:	daec      	bge.n	8016ad8 <__ieee754_pow+0x228>
 8016afe:	e7df      	b.n	8016ac0 <__ieee754_pow+0x210>
 8016b00:	4b10      	ldr	r3, [pc, #64]	@ (8016b44 <__ieee754_pow+0x294>)
 8016b02:	4598      	cmp	r8, r3
 8016b04:	f04f 0200 	mov.w	r2, #0
 8016b08:	d924      	bls.n	8016b54 <__ieee754_pow+0x2a4>
 8016b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b0e:	2300      	movs	r3, #0
 8016b10:	f7f1 fd00 	bl	8008514 <__aeabi_dcmplt>
 8016b14:	3800      	subs	r0, #0
 8016b16:	bf18      	it	ne
 8016b18:	2001      	movne	r0, #1
 8016b1a:	f1b9 0f00 	cmp.w	r9, #0
 8016b1e:	dccf      	bgt.n	8016ac0 <__ieee754_pow+0x210>
 8016b20:	e7da      	b.n	8016ad8 <__ieee754_pow+0x228>
 8016b22:	bf00      	nop
 8016b24:	f3af 8000 	nop.w
 8016b28:	00000000 	.word	0x00000000
 8016b2c:	3ff00000 	.word	0x3ff00000
 8016b30:	00000000 	.word	0x00000000
 8016b34:	bff00000 	.word	0xbff00000
 8016b38:	fff00000 	.word	0xfff00000
 8016b3c:	7ff00000 	.word	0x7ff00000
 8016b40:	433fffff 	.word	0x433fffff
 8016b44:	3ff00000 	.word	0x3ff00000
 8016b48:	3fefffff 	.word	0x3fefffff
 8016b4c:	3fe00000 	.word	0x3fe00000
 8016b50:	43f00000 	.word	0x43f00000
 8016b54:	4b5a      	ldr	r3, [pc, #360]	@ (8016cc0 <__ieee754_pow+0x410>)
 8016b56:	f7f1 f8b3 	bl	8007cc0 <__aeabi_dsub>
 8016b5a:	a351      	add	r3, pc, #324	@ (adr r3, 8016ca0 <__ieee754_pow+0x3f0>)
 8016b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b60:	4604      	mov	r4, r0
 8016b62:	460d      	mov	r5, r1
 8016b64:	f7f1 fa64 	bl	8008030 <__aeabi_dmul>
 8016b68:	a34f      	add	r3, pc, #316	@ (adr r3, 8016ca8 <__ieee754_pow+0x3f8>)
 8016b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6e:	4606      	mov	r6, r0
 8016b70:	460f      	mov	r7, r1
 8016b72:	4620      	mov	r0, r4
 8016b74:	4629      	mov	r1, r5
 8016b76:	f7f1 fa5b 	bl	8008030 <__aeabi_dmul>
 8016b7a:	4b52      	ldr	r3, [pc, #328]	@ (8016cc4 <__ieee754_pow+0x414>)
 8016b7c:	4682      	mov	sl, r0
 8016b7e:	468b      	mov	fp, r1
 8016b80:	2200      	movs	r2, #0
 8016b82:	4620      	mov	r0, r4
 8016b84:	4629      	mov	r1, r5
 8016b86:	f7f1 fa53 	bl	8008030 <__aeabi_dmul>
 8016b8a:	4602      	mov	r2, r0
 8016b8c:	460b      	mov	r3, r1
 8016b8e:	a148      	add	r1, pc, #288	@ (adr r1, 8016cb0 <__ieee754_pow+0x400>)
 8016b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b94:	f7f1 f894 	bl	8007cc0 <__aeabi_dsub>
 8016b98:	4622      	mov	r2, r4
 8016b9a:	462b      	mov	r3, r5
 8016b9c:	f7f1 fa48 	bl	8008030 <__aeabi_dmul>
 8016ba0:	4602      	mov	r2, r0
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	4948      	ldr	r1, [pc, #288]	@ (8016cc8 <__ieee754_pow+0x418>)
 8016ba8:	f7f1 f88a 	bl	8007cc0 <__aeabi_dsub>
 8016bac:	4622      	mov	r2, r4
 8016bae:	4680      	mov	r8, r0
 8016bb0:	4689      	mov	r9, r1
 8016bb2:	462b      	mov	r3, r5
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	f7f1 fa3a 	bl	8008030 <__aeabi_dmul>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	460b      	mov	r3, r1
 8016bc0:	4640      	mov	r0, r8
 8016bc2:	4649      	mov	r1, r9
 8016bc4:	f7f1 fa34 	bl	8008030 <__aeabi_dmul>
 8016bc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8016cb8 <__ieee754_pow+0x408>)
 8016bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bce:	f7f1 fa2f 	bl	8008030 <__aeabi_dmul>
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	4650      	mov	r0, sl
 8016bd8:	4659      	mov	r1, fp
 8016bda:	f7f1 f871 	bl	8007cc0 <__aeabi_dsub>
 8016bde:	4602      	mov	r2, r0
 8016be0:	460b      	mov	r3, r1
 8016be2:	4680      	mov	r8, r0
 8016be4:	4689      	mov	r9, r1
 8016be6:	4630      	mov	r0, r6
 8016be8:	4639      	mov	r1, r7
 8016bea:	f7f1 f86b 	bl	8007cc4 <__adddf3>
 8016bee:	2400      	movs	r4, #0
 8016bf0:	4632      	mov	r2, r6
 8016bf2:	463b      	mov	r3, r7
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	460d      	mov	r5, r1
 8016bf8:	f7f1 f862 	bl	8007cc0 <__aeabi_dsub>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	460b      	mov	r3, r1
 8016c00:	4640      	mov	r0, r8
 8016c02:	4649      	mov	r1, r9
 8016c04:	f7f1 f85c 	bl	8007cc0 <__aeabi_dsub>
 8016c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016c10:	2300      	movs	r3, #0
 8016c12:	9304      	str	r3, [sp, #16]
 8016c14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016c18:	4606      	mov	r6, r0
 8016c1a:	460f      	mov	r7, r1
 8016c1c:	4652      	mov	r2, sl
 8016c1e:	465b      	mov	r3, fp
 8016c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c24:	f7f1 f84c 	bl	8007cc0 <__aeabi_dsub>
 8016c28:	4622      	mov	r2, r4
 8016c2a:	462b      	mov	r3, r5
 8016c2c:	f7f1 fa00 	bl	8008030 <__aeabi_dmul>
 8016c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c34:	4680      	mov	r8, r0
 8016c36:	4689      	mov	r9, r1
 8016c38:	4630      	mov	r0, r6
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	f7f1 f9f8 	bl	8008030 <__aeabi_dmul>
 8016c40:	4602      	mov	r2, r0
 8016c42:	460b      	mov	r3, r1
 8016c44:	4640      	mov	r0, r8
 8016c46:	4649      	mov	r1, r9
 8016c48:	f7f1 f83c 	bl	8007cc4 <__adddf3>
 8016c4c:	4652      	mov	r2, sl
 8016c4e:	465b      	mov	r3, fp
 8016c50:	4606      	mov	r6, r0
 8016c52:	460f      	mov	r7, r1
 8016c54:	4620      	mov	r0, r4
 8016c56:	4629      	mov	r1, r5
 8016c58:	f7f1 f9ea 	bl	8008030 <__aeabi_dmul>
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	4602      	mov	r2, r0
 8016c60:	4680      	mov	r8, r0
 8016c62:	4689      	mov	r9, r1
 8016c64:	4630      	mov	r0, r6
 8016c66:	4639      	mov	r1, r7
 8016c68:	f7f1 f82c 	bl	8007cc4 <__adddf3>
 8016c6c:	4b17      	ldr	r3, [pc, #92]	@ (8016ccc <__ieee754_pow+0x41c>)
 8016c6e:	4299      	cmp	r1, r3
 8016c70:	4604      	mov	r4, r0
 8016c72:	460d      	mov	r5, r1
 8016c74:	468a      	mov	sl, r1
 8016c76:	468b      	mov	fp, r1
 8016c78:	f340 82ef 	ble.w	801725a <__ieee754_pow+0x9aa>
 8016c7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016c80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016c84:	4303      	orrs	r3, r0
 8016c86:	f000 81e8 	beq.w	801705a <__ieee754_pow+0x7aa>
 8016c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	2300      	movs	r3, #0
 8016c92:	f7f1 fc3f 	bl	8008514 <__aeabi_dcmplt>
 8016c96:	3800      	subs	r0, #0
 8016c98:	bf18      	it	ne
 8016c9a:	2001      	movne	r0, #1
 8016c9c:	e710      	b.n	8016ac0 <__ieee754_pow+0x210>
 8016c9e:	bf00      	nop
 8016ca0:	60000000 	.word	0x60000000
 8016ca4:	3ff71547 	.word	0x3ff71547
 8016ca8:	f85ddf44 	.word	0xf85ddf44
 8016cac:	3e54ae0b 	.word	0x3e54ae0b
 8016cb0:	55555555 	.word	0x55555555
 8016cb4:	3fd55555 	.word	0x3fd55555
 8016cb8:	652b82fe 	.word	0x652b82fe
 8016cbc:	3ff71547 	.word	0x3ff71547
 8016cc0:	3ff00000 	.word	0x3ff00000
 8016cc4:	3fd00000 	.word	0x3fd00000
 8016cc8:	3fe00000 	.word	0x3fe00000
 8016ccc:	408fffff 	.word	0x408fffff
 8016cd0:	4bd5      	ldr	r3, [pc, #852]	@ (8017028 <__ieee754_pow+0x778>)
 8016cd2:	402b      	ands	r3, r5
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	b92b      	cbnz	r3, 8016ce4 <__ieee754_pow+0x434>
 8016cd8:	4bd4      	ldr	r3, [pc, #848]	@ (801702c <__ieee754_pow+0x77c>)
 8016cda:	f7f1 f9a9 	bl	8008030 <__aeabi_dmul>
 8016cde:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016ce2:	468b      	mov	fp, r1
 8016ce4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016ce8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016cec:	4413      	add	r3, r2
 8016cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8016cf0:	4bcf      	ldr	r3, [pc, #828]	@ (8017030 <__ieee754_pow+0x780>)
 8016cf2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016cf6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8016cfa:	459b      	cmp	fp, r3
 8016cfc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016d00:	dd08      	ble.n	8016d14 <__ieee754_pow+0x464>
 8016d02:	4bcc      	ldr	r3, [pc, #816]	@ (8017034 <__ieee754_pow+0x784>)
 8016d04:	459b      	cmp	fp, r3
 8016d06:	f340 81a5 	ble.w	8017054 <__ieee754_pow+0x7a4>
 8016d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d10:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016d14:	f04f 0a00 	mov.w	sl, #0
 8016d18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d1e:	4bc6      	ldr	r3, [pc, #792]	@ (8017038 <__ieee754_pow+0x788>)
 8016d20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016d24:	ed93 7b00 	vldr	d7, [r3]
 8016d28:	4629      	mov	r1, r5
 8016d2a:	ec53 2b17 	vmov	r2, r3, d7
 8016d2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016d36:	f7f0 ffc3 	bl	8007cc0 <__aeabi_dsub>
 8016d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016d3e:	4606      	mov	r6, r0
 8016d40:	460f      	mov	r7, r1
 8016d42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d46:	f7f0 ffbd 	bl	8007cc4 <__adddf3>
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	460b      	mov	r3, r1
 8016d4e:	2000      	movs	r0, #0
 8016d50:	49ba      	ldr	r1, [pc, #744]	@ (801703c <__ieee754_pow+0x78c>)
 8016d52:	f7f1 fa97 	bl	8008284 <__aeabi_ddiv>
 8016d56:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	4630      	mov	r0, r6
 8016d60:	4639      	mov	r1, r7
 8016d62:	f7f1 f965 	bl	8008030 <__aeabi_dmul>
 8016d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016d6a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016d6e:	106d      	asrs	r5, r5, #1
 8016d70:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016d74:	f04f 0b00 	mov.w	fp, #0
 8016d78:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8016d7c:	4661      	mov	r1, ip
 8016d7e:	2200      	movs	r2, #0
 8016d80:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016d84:	4658      	mov	r0, fp
 8016d86:	46e1      	mov	r9, ip
 8016d88:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8016d8c:	4614      	mov	r4, r2
 8016d8e:	461d      	mov	r5, r3
 8016d90:	f7f1 f94e 	bl	8008030 <__aeabi_dmul>
 8016d94:	4602      	mov	r2, r0
 8016d96:	460b      	mov	r3, r1
 8016d98:	4630      	mov	r0, r6
 8016d9a:	4639      	mov	r1, r7
 8016d9c:	f7f0 ff90 	bl	8007cc0 <__aeabi_dsub>
 8016da0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016da4:	4606      	mov	r6, r0
 8016da6:	460f      	mov	r7, r1
 8016da8:	4620      	mov	r0, r4
 8016daa:	4629      	mov	r1, r5
 8016dac:	f7f0 ff88 	bl	8007cc0 <__aeabi_dsub>
 8016db0:	4602      	mov	r2, r0
 8016db2:	460b      	mov	r3, r1
 8016db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016db8:	f7f0 ff82 	bl	8007cc0 <__aeabi_dsub>
 8016dbc:	465a      	mov	r2, fp
 8016dbe:	464b      	mov	r3, r9
 8016dc0:	f7f1 f936 	bl	8008030 <__aeabi_dmul>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	460b      	mov	r3, r1
 8016dc8:	4630      	mov	r0, r6
 8016dca:	4639      	mov	r1, r7
 8016dcc:	f7f0 ff78 	bl	8007cc0 <__aeabi_dsub>
 8016dd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016dd4:	f7f1 f92c 	bl	8008030 <__aeabi_dmul>
 8016dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ddc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016de0:	4610      	mov	r0, r2
 8016de2:	4619      	mov	r1, r3
 8016de4:	f7f1 f924 	bl	8008030 <__aeabi_dmul>
 8016de8:	a37d      	add	r3, pc, #500	@ (adr r3, 8016fe0 <__ieee754_pow+0x730>)
 8016dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dee:	4604      	mov	r4, r0
 8016df0:	460d      	mov	r5, r1
 8016df2:	f7f1 f91d 	bl	8008030 <__aeabi_dmul>
 8016df6:	a37c      	add	r3, pc, #496	@ (adr r3, 8016fe8 <__ieee754_pow+0x738>)
 8016df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dfc:	f7f0 ff62 	bl	8007cc4 <__adddf3>
 8016e00:	4622      	mov	r2, r4
 8016e02:	462b      	mov	r3, r5
 8016e04:	f7f1 f914 	bl	8008030 <__aeabi_dmul>
 8016e08:	a379      	add	r3, pc, #484	@ (adr r3, 8016ff0 <__ieee754_pow+0x740>)
 8016e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0e:	f7f0 ff59 	bl	8007cc4 <__adddf3>
 8016e12:	4622      	mov	r2, r4
 8016e14:	462b      	mov	r3, r5
 8016e16:	f7f1 f90b 	bl	8008030 <__aeabi_dmul>
 8016e1a:	a377      	add	r3, pc, #476	@ (adr r3, 8016ff8 <__ieee754_pow+0x748>)
 8016e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e20:	f7f0 ff50 	bl	8007cc4 <__adddf3>
 8016e24:	4622      	mov	r2, r4
 8016e26:	462b      	mov	r3, r5
 8016e28:	f7f1 f902 	bl	8008030 <__aeabi_dmul>
 8016e2c:	a374      	add	r3, pc, #464	@ (adr r3, 8017000 <__ieee754_pow+0x750>)
 8016e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e32:	f7f0 ff47 	bl	8007cc4 <__adddf3>
 8016e36:	4622      	mov	r2, r4
 8016e38:	462b      	mov	r3, r5
 8016e3a:	f7f1 f8f9 	bl	8008030 <__aeabi_dmul>
 8016e3e:	a372      	add	r3, pc, #456	@ (adr r3, 8017008 <__ieee754_pow+0x758>)
 8016e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e44:	f7f0 ff3e 	bl	8007cc4 <__adddf3>
 8016e48:	4622      	mov	r2, r4
 8016e4a:	4606      	mov	r6, r0
 8016e4c:	460f      	mov	r7, r1
 8016e4e:	462b      	mov	r3, r5
 8016e50:	4620      	mov	r0, r4
 8016e52:	4629      	mov	r1, r5
 8016e54:	f7f1 f8ec 	bl	8008030 <__aeabi_dmul>
 8016e58:	4602      	mov	r2, r0
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	4630      	mov	r0, r6
 8016e5e:	4639      	mov	r1, r7
 8016e60:	f7f1 f8e6 	bl	8008030 <__aeabi_dmul>
 8016e64:	465a      	mov	r2, fp
 8016e66:	4604      	mov	r4, r0
 8016e68:	460d      	mov	r5, r1
 8016e6a:	464b      	mov	r3, r9
 8016e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e70:	f7f0 ff28 	bl	8007cc4 <__adddf3>
 8016e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016e78:	f7f1 f8da 	bl	8008030 <__aeabi_dmul>
 8016e7c:	4622      	mov	r2, r4
 8016e7e:	462b      	mov	r3, r5
 8016e80:	f7f0 ff20 	bl	8007cc4 <__adddf3>
 8016e84:	465a      	mov	r2, fp
 8016e86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016e8a:	464b      	mov	r3, r9
 8016e8c:	4658      	mov	r0, fp
 8016e8e:	4649      	mov	r1, r9
 8016e90:	f7f1 f8ce 	bl	8008030 <__aeabi_dmul>
 8016e94:	4b6a      	ldr	r3, [pc, #424]	@ (8017040 <__ieee754_pow+0x790>)
 8016e96:	2200      	movs	r2, #0
 8016e98:	4606      	mov	r6, r0
 8016e9a:	460f      	mov	r7, r1
 8016e9c:	f7f0 ff12 	bl	8007cc4 <__adddf3>
 8016ea0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016ea4:	f7f0 ff0e 	bl	8007cc4 <__adddf3>
 8016ea8:	46d8      	mov	r8, fp
 8016eaa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8016eae:	460d      	mov	r5, r1
 8016eb0:	465a      	mov	r2, fp
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	4649      	mov	r1, r9
 8016eb8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8016ebc:	f7f1 f8b8 	bl	8008030 <__aeabi_dmul>
 8016ec0:	465c      	mov	r4, fp
 8016ec2:	4680      	mov	r8, r0
 8016ec4:	4689      	mov	r9, r1
 8016ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8017040 <__ieee754_pow+0x790>)
 8016ec8:	2200      	movs	r2, #0
 8016eca:	4620      	mov	r0, r4
 8016ecc:	4629      	mov	r1, r5
 8016ece:	f7f0 fef7 	bl	8007cc0 <__aeabi_dsub>
 8016ed2:	4632      	mov	r2, r6
 8016ed4:	463b      	mov	r3, r7
 8016ed6:	f7f0 fef3 	bl	8007cc0 <__aeabi_dsub>
 8016eda:	4602      	mov	r2, r0
 8016edc:	460b      	mov	r3, r1
 8016ede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ee2:	f7f0 feed 	bl	8007cc0 <__aeabi_dsub>
 8016ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016eea:	f7f1 f8a1 	bl	8008030 <__aeabi_dmul>
 8016eee:	4622      	mov	r2, r4
 8016ef0:	4606      	mov	r6, r0
 8016ef2:	460f      	mov	r7, r1
 8016ef4:	462b      	mov	r3, r5
 8016ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016efa:	f7f1 f899 	bl	8008030 <__aeabi_dmul>
 8016efe:	4602      	mov	r2, r0
 8016f00:	460b      	mov	r3, r1
 8016f02:	4630      	mov	r0, r6
 8016f04:	4639      	mov	r1, r7
 8016f06:	f7f0 fedd 	bl	8007cc4 <__adddf3>
 8016f0a:	4606      	mov	r6, r0
 8016f0c:	460f      	mov	r7, r1
 8016f0e:	4602      	mov	r2, r0
 8016f10:	460b      	mov	r3, r1
 8016f12:	4640      	mov	r0, r8
 8016f14:	4649      	mov	r1, r9
 8016f16:	f7f0 fed5 	bl	8007cc4 <__adddf3>
 8016f1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016f1e:	a33c      	add	r3, pc, #240	@ (adr r3, 8017010 <__ieee754_pow+0x760>)
 8016f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f24:	4658      	mov	r0, fp
 8016f26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016f2a:	460d      	mov	r5, r1
 8016f2c:	f7f1 f880 	bl	8008030 <__aeabi_dmul>
 8016f30:	465c      	mov	r4, fp
 8016f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f36:	4642      	mov	r2, r8
 8016f38:	464b      	mov	r3, r9
 8016f3a:	4620      	mov	r0, r4
 8016f3c:	4629      	mov	r1, r5
 8016f3e:	f7f0 febf 	bl	8007cc0 <__aeabi_dsub>
 8016f42:	4602      	mov	r2, r0
 8016f44:	460b      	mov	r3, r1
 8016f46:	4630      	mov	r0, r6
 8016f48:	4639      	mov	r1, r7
 8016f4a:	f7f0 feb9 	bl	8007cc0 <__aeabi_dsub>
 8016f4e:	a332      	add	r3, pc, #200	@ (adr r3, 8017018 <__ieee754_pow+0x768>)
 8016f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f54:	f7f1 f86c 	bl	8008030 <__aeabi_dmul>
 8016f58:	a331      	add	r3, pc, #196	@ (adr r3, 8017020 <__ieee754_pow+0x770>)
 8016f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f5e:	4606      	mov	r6, r0
 8016f60:	460f      	mov	r7, r1
 8016f62:	4620      	mov	r0, r4
 8016f64:	4629      	mov	r1, r5
 8016f66:	f7f1 f863 	bl	8008030 <__aeabi_dmul>
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	4630      	mov	r0, r6
 8016f70:	4639      	mov	r1, r7
 8016f72:	f7f0 fea7 	bl	8007cc4 <__adddf3>
 8016f76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f78:	4b32      	ldr	r3, [pc, #200]	@ (8017044 <__ieee754_pow+0x794>)
 8016f7a:	4413      	add	r3, r2
 8016f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f80:	f7f0 fea0 	bl	8007cc4 <__adddf3>
 8016f84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016f88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016f8a:	f7f0 ffe7 	bl	8007f5c <__aeabi_i2d>
 8016f8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f90:	4b2d      	ldr	r3, [pc, #180]	@ (8017048 <__ieee754_pow+0x798>)
 8016f92:	4413      	add	r3, r2
 8016f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016f98:	4606      	mov	r6, r0
 8016f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f9e:	460f      	mov	r7, r1
 8016fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016fa4:	f7f0 fe8e 	bl	8007cc4 <__adddf3>
 8016fa8:	4642      	mov	r2, r8
 8016faa:	464b      	mov	r3, r9
 8016fac:	f7f0 fe8a 	bl	8007cc4 <__adddf3>
 8016fb0:	4632      	mov	r2, r6
 8016fb2:	463b      	mov	r3, r7
 8016fb4:	f7f0 fe86 	bl	8007cc4 <__adddf3>
 8016fb8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8016fbc:	4632      	mov	r2, r6
 8016fbe:	463b      	mov	r3, r7
 8016fc0:	4658      	mov	r0, fp
 8016fc2:	460d      	mov	r5, r1
 8016fc4:	f7f0 fe7c 	bl	8007cc0 <__aeabi_dsub>
 8016fc8:	4642      	mov	r2, r8
 8016fca:	464b      	mov	r3, r9
 8016fcc:	f7f0 fe78 	bl	8007cc0 <__aeabi_dsub>
 8016fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016fd4:	f7f0 fe74 	bl	8007cc0 <__aeabi_dsub>
 8016fd8:	465c      	mov	r4, fp
 8016fda:	4602      	mov	r2, r0
 8016fdc:	e036      	b.n	801704c <__ieee754_pow+0x79c>
 8016fde:	bf00      	nop
 8016fe0:	4a454eef 	.word	0x4a454eef
 8016fe4:	3fca7e28 	.word	0x3fca7e28
 8016fe8:	93c9db65 	.word	0x93c9db65
 8016fec:	3fcd864a 	.word	0x3fcd864a
 8016ff0:	a91d4101 	.word	0xa91d4101
 8016ff4:	3fd17460 	.word	0x3fd17460
 8016ff8:	518f264d 	.word	0x518f264d
 8016ffc:	3fd55555 	.word	0x3fd55555
 8017000:	db6fabff 	.word	0xdb6fabff
 8017004:	3fdb6db6 	.word	0x3fdb6db6
 8017008:	33333303 	.word	0x33333303
 801700c:	3fe33333 	.word	0x3fe33333
 8017010:	e0000000 	.word	0xe0000000
 8017014:	3feec709 	.word	0x3feec709
 8017018:	dc3a03fd 	.word	0xdc3a03fd
 801701c:	3feec709 	.word	0x3feec709
 8017020:	145b01f5 	.word	0x145b01f5
 8017024:	be3e2fe0 	.word	0xbe3e2fe0
 8017028:	7ff00000 	.word	0x7ff00000
 801702c:	43400000 	.word	0x43400000
 8017030:	0003988e 	.word	0x0003988e
 8017034:	000bb679 	.word	0x000bb679
 8017038:	08018658 	.word	0x08018658
 801703c:	3ff00000 	.word	0x3ff00000
 8017040:	40080000 	.word	0x40080000
 8017044:	08018638 	.word	0x08018638
 8017048:	08018648 	.word	0x08018648
 801704c:	460b      	mov	r3, r1
 801704e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017052:	e5d7      	b.n	8016c04 <__ieee754_pow+0x354>
 8017054:	f04f 0a01 	mov.w	sl, #1
 8017058:	e65e      	b.n	8016d18 <__ieee754_pow+0x468>
 801705a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801732c <__ieee754_pow+0xa7c>)
 801705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017060:	4630      	mov	r0, r6
 8017062:	4639      	mov	r1, r7
 8017064:	f7f0 fe2e 	bl	8007cc4 <__adddf3>
 8017068:	4642      	mov	r2, r8
 801706a:	e9cd 0100 	strd	r0, r1, [sp]
 801706e:	464b      	mov	r3, r9
 8017070:	4620      	mov	r0, r4
 8017072:	4629      	mov	r1, r5
 8017074:	f7f0 fe24 	bl	8007cc0 <__aeabi_dsub>
 8017078:	4602      	mov	r2, r0
 801707a:	460b      	mov	r3, r1
 801707c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017080:	f7f1 fa66 	bl	8008550 <__aeabi_dcmpgt>
 8017084:	2800      	cmp	r0, #0
 8017086:	f47f ae00 	bne.w	8016c8a <__ieee754_pow+0x3da>
 801708a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801708e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017092:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8017096:	fa43 fa0a 	asr.w	sl, r3, sl
 801709a:	44da      	add	sl, fp
 801709c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80170a0:	489d      	ldr	r0, [pc, #628]	@ (8017318 <__ieee754_pow+0xa68>)
 80170a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80170a6:	4108      	asrs	r0, r1
 80170a8:	ea00 030a 	and.w	r3, r0, sl
 80170ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80170b0:	f1c1 0114 	rsb	r1, r1, #20
 80170b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80170b8:	fa4a fa01 	asr.w	sl, sl, r1
 80170bc:	f1bb 0f00 	cmp.w	fp, #0
 80170c0:	4640      	mov	r0, r8
 80170c2:	4649      	mov	r1, r9
 80170c4:	f04f 0200 	mov.w	r2, #0
 80170c8:	bfb8      	it	lt
 80170ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80170ce:	f7f0 fdf7 	bl	8007cc0 <__aeabi_dsub>
 80170d2:	4680      	mov	r8, r0
 80170d4:	4689      	mov	r9, r1
 80170d6:	4632      	mov	r2, r6
 80170d8:	463b      	mov	r3, r7
 80170da:	4640      	mov	r0, r8
 80170dc:	4649      	mov	r1, r9
 80170de:	f7f0 fdf1 	bl	8007cc4 <__adddf3>
 80170e2:	2400      	movs	r4, #0
 80170e4:	a37c      	add	r3, pc, #496	@ (adr r3, 80172d8 <__ieee754_pow+0xa28>)
 80170e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ea:	4620      	mov	r0, r4
 80170ec:	460d      	mov	r5, r1
 80170ee:	f7f0 ff9f 	bl	8008030 <__aeabi_dmul>
 80170f2:	4642      	mov	r2, r8
 80170f4:	e9cd 0100 	strd	r0, r1, [sp]
 80170f8:	464b      	mov	r3, r9
 80170fa:	4620      	mov	r0, r4
 80170fc:	4629      	mov	r1, r5
 80170fe:	f7f0 fddf 	bl	8007cc0 <__aeabi_dsub>
 8017102:	4602      	mov	r2, r0
 8017104:	460b      	mov	r3, r1
 8017106:	4630      	mov	r0, r6
 8017108:	4639      	mov	r1, r7
 801710a:	f7f0 fdd9 	bl	8007cc0 <__aeabi_dsub>
 801710e:	a374      	add	r3, pc, #464	@ (adr r3, 80172e0 <__ieee754_pow+0xa30>)
 8017110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017114:	f7f0 ff8c 	bl	8008030 <__aeabi_dmul>
 8017118:	a373      	add	r3, pc, #460	@ (adr r3, 80172e8 <__ieee754_pow+0xa38>)
 801711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711e:	4680      	mov	r8, r0
 8017120:	4689      	mov	r9, r1
 8017122:	4620      	mov	r0, r4
 8017124:	4629      	mov	r1, r5
 8017126:	f7f0 ff83 	bl	8008030 <__aeabi_dmul>
 801712a:	4602      	mov	r2, r0
 801712c:	460b      	mov	r3, r1
 801712e:	4640      	mov	r0, r8
 8017130:	4649      	mov	r1, r9
 8017132:	f7f0 fdc7 	bl	8007cc4 <__adddf3>
 8017136:	4604      	mov	r4, r0
 8017138:	460d      	mov	r5, r1
 801713a:	4602      	mov	r2, r0
 801713c:	460b      	mov	r3, r1
 801713e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017142:	f7f0 fdbf 	bl	8007cc4 <__adddf3>
 8017146:	e9dd 2300 	ldrd	r2, r3, [sp]
 801714a:	4680      	mov	r8, r0
 801714c:	4689      	mov	r9, r1
 801714e:	f7f0 fdb7 	bl	8007cc0 <__aeabi_dsub>
 8017152:	4602      	mov	r2, r0
 8017154:	460b      	mov	r3, r1
 8017156:	4620      	mov	r0, r4
 8017158:	4629      	mov	r1, r5
 801715a:	f7f0 fdb1 	bl	8007cc0 <__aeabi_dsub>
 801715e:	4642      	mov	r2, r8
 8017160:	4606      	mov	r6, r0
 8017162:	460f      	mov	r7, r1
 8017164:	464b      	mov	r3, r9
 8017166:	4640      	mov	r0, r8
 8017168:	4649      	mov	r1, r9
 801716a:	f7f0 ff61 	bl	8008030 <__aeabi_dmul>
 801716e:	a360      	add	r3, pc, #384	@ (adr r3, 80172f0 <__ieee754_pow+0xa40>)
 8017170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017174:	4604      	mov	r4, r0
 8017176:	460d      	mov	r5, r1
 8017178:	f7f0 ff5a 	bl	8008030 <__aeabi_dmul>
 801717c:	a35e      	add	r3, pc, #376	@ (adr r3, 80172f8 <__ieee754_pow+0xa48>)
 801717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017182:	f7f0 fd9d 	bl	8007cc0 <__aeabi_dsub>
 8017186:	4622      	mov	r2, r4
 8017188:	462b      	mov	r3, r5
 801718a:	f7f0 ff51 	bl	8008030 <__aeabi_dmul>
 801718e:	a35c      	add	r3, pc, #368	@ (adr r3, 8017300 <__ieee754_pow+0xa50>)
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	f7f0 fd96 	bl	8007cc4 <__adddf3>
 8017198:	4622      	mov	r2, r4
 801719a:	462b      	mov	r3, r5
 801719c:	f7f0 ff48 	bl	8008030 <__aeabi_dmul>
 80171a0:	a359      	add	r3, pc, #356	@ (adr r3, 8017308 <__ieee754_pow+0xa58>)
 80171a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a6:	f7f0 fd8b 	bl	8007cc0 <__aeabi_dsub>
 80171aa:	4622      	mov	r2, r4
 80171ac:	462b      	mov	r3, r5
 80171ae:	f7f0 ff3f 	bl	8008030 <__aeabi_dmul>
 80171b2:	a357      	add	r3, pc, #348	@ (adr r3, 8017310 <__ieee754_pow+0xa60>)
 80171b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b8:	f7f0 fd84 	bl	8007cc4 <__adddf3>
 80171bc:	4622      	mov	r2, r4
 80171be:	462b      	mov	r3, r5
 80171c0:	f7f0 ff36 	bl	8008030 <__aeabi_dmul>
 80171c4:	4602      	mov	r2, r0
 80171c6:	460b      	mov	r3, r1
 80171c8:	4640      	mov	r0, r8
 80171ca:	4649      	mov	r1, r9
 80171cc:	f7f0 fd78 	bl	8007cc0 <__aeabi_dsub>
 80171d0:	4604      	mov	r4, r0
 80171d2:	460d      	mov	r5, r1
 80171d4:	4602      	mov	r2, r0
 80171d6:	460b      	mov	r3, r1
 80171d8:	4640      	mov	r0, r8
 80171da:	4649      	mov	r1, r9
 80171dc:	f7f0 ff28 	bl	8008030 <__aeabi_dmul>
 80171e0:	2200      	movs	r2, #0
 80171e2:	e9cd 0100 	strd	r0, r1, [sp]
 80171e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80171ea:	4620      	mov	r0, r4
 80171ec:	4629      	mov	r1, r5
 80171ee:	f7f0 fd67 	bl	8007cc0 <__aeabi_dsub>
 80171f2:	4602      	mov	r2, r0
 80171f4:	460b      	mov	r3, r1
 80171f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171fa:	f7f1 f843 	bl	8008284 <__aeabi_ddiv>
 80171fe:	4632      	mov	r2, r6
 8017200:	4604      	mov	r4, r0
 8017202:	460d      	mov	r5, r1
 8017204:	463b      	mov	r3, r7
 8017206:	4640      	mov	r0, r8
 8017208:	4649      	mov	r1, r9
 801720a:	f7f0 ff11 	bl	8008030 <__aeabi_dmul>
 801720e:	4632      	mov	r2, r6
 8017210:	463b      	mov	r3, r7
 8017212:	f7f0 fd57 	bl	8007cc4 <__adddf3>
 8017216:	4602      	mov	r2, r0
 8017218:	460b      	mov	r3, r1
 801721a:	4620      	mov	r0, r4
 801721c:	4629      	mov	r1, r5
 801721e:	f7f0 fd4f 	bl	8007cc0 <__aeabi_dsub>
 8017222:	4642      	mov	r2, r8
 8017224:	464b      	mov	r3, r9
 8017226:	f7f0 fd4b 	bl	8007cc0 <__aeabi_dsub>
 801722a:	460b      	mov	r3, r1
 801722c:	4602      	mov	r2, r0
 801722e:	493b      	ldr	r1, [pc, #236]	@ (801731c <__ieee754_pow+0xa6c>)
 8017230:	2000      	movs	r0, #0
 8017232:	f7f0 fd45 	bl	8007cc0 <__aeabi_dsub>
 8017236:	ec41 0b10 	vmov	d0, r0, r1
 801723a:	ee10 3a90 	vmov	r3, s1
 801723e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017246:	da30      	bge.n	80172aa <__ieee754_pow+0x9fa>
 8017248:	4650      	mov	r0, sl
 801724a:	f000 f87d 	bl	8017348 <scalbn>
 801724e:	ec51 0b10 	vmov	r0, r1, d0
 8017252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017256:	f7ff bbd2 	b.w	80169fe <__ieee754_pow+0x14e>
 801725a:	4c31      	ldr	r4, [pc, #196]	@ (8017320 <__ieee754_pow+0xa70>)
 801725c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017260:	42a3      	cmp	r3, r4
 8017262:	d91a      	bls.n	801729a <__ieee754_pow+0x9ea>
 8017264:	4b2f      	ldr	r3, [pc, #188]	@ (8017324 <__ieee754_pow+0xa74>)
 8017266:	440b      	add	r3, r1
 8017268:	4303      	orrs	r3, r0
 801726a:	d009      	beq.n	8017280 <__ieee754_pow+0x9d0>
 801726c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017270:	2200      	movs	r2, #0
 8017272:	2300      	movs	r3, #0
 8017274:	f7f1 f94e 	bl	8008514 <__aeabi_dcmplt>
 8017278:	3800      	subs	r0, #0
 801727a:	bf18      	it	ne
 801727c:	2001      	movne	r0, #1
 801727e:	e42b      	b.n	8016ad8 <__ieee754_pow+0x228>
 8017280:	4642      	mov	r2, r8
 8017282:	464b      	mov	r3, r9
 8017284:	f7f0 fd1c 	bl	8007cc0 <__aeabi_dsub>
 8017288:	4632      	mov	r2, r6
 801728a:	463b      	mov	r3, r7
 801728c:	f7f1 f956 	bl	800853c <__aeabi_dcmpge>
 8017290:	2800      	cmp	r0, #0
 8017292:	d1eb      	bne.n	801726c <__ieee754_pow+0x9bc>
 8017294:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8017334 <__ieee754_pow+0xa84>
 8017298:	e6f7      	b.n	801708a <__ieee754_pow+0x7da>
 801729a:	469a      	mov	sl, r3
 801729c:	4b22      	ldr	r3, [pc, #136]	@ (8017328 <__ieee754_pow+0xa78>)
 801729e:	459a      	cmp	sl, r3
 80172a0:	f63f aef3 	bhi.w	801708a <__ieee754_pow+0x7da>
 80172a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80172a8:	e715      	b.n	80170d6 <__ieee754_pow+0x826>
 80172aa:	ec51 0b10 	vmov	r0, r1, d0
 80172ae:	4619      	mov	r1, r3
 80172b0:	e7cf      	b.n	8017252 <__ieee754_pow+0x9a2>
 80172b2:	491a      	ldr	r1, [pc, #104]	@ (801731c <__ieee754_pow+0xa6c>)
 80172b4:	2000      	movs	r0, #0
 80172b6:	f7ff bb18 	b.w	80168ea <__ieee754_pow+0x3a>
 80172ba:	2000      	movs	r0, #0
 80172bc:	2100      	movs	r1, #0
 80172be:	f7ff bb14 	b.w	80168ea <__ieee754_pow+0x3a>
 80172c2:	4630      	mov	r0, r6
 80172c4:	4639      	mov	r1, r7
 80172c6:	f7ff bb10 	b.w	80168ea <__ieee754_pow+0x3a>
 80172ca:	460c      	mov	r4, r1
 80172cc:	f7ff bb5e 	b.w	801698c <__ieee754_pow+0xdc>
 80172d0:	2400      	movs	r4, #0
 80172d2:	f7ff bb49 	b.w	8016968 <__ieee754_pow+0xb8>
 80172d6:	bf00      	nop
 80172d8:	00000000 	.word	0x00000000
 80172dc:	3fe62e43 	.word	0x3fe62e43
 80172e0:	fefa39ef 	.word	0xfefa39ef
 80172e4:	3fe62e42 	.word	0x3fe62e42
 80172e8:	0ca86c39 	.word	0x0ca86c39
 80172ec:	be205c61 	.word	0xbe205c61
 80172f0:	72bea4d0 	.word	0x72bea4d0
 80172f4:	3e663769 	.word	0x3e663769
 80172f8:	c5d26bf1 	.word	0xc5d26bf1
 80172fc:	3ebbbd41 	.word	0x3ebbbd41
 8017300:	af25de2c 	.word	0xaf25de2c
 8017304:	3f11566a 	.word	0x3f11566a
 8017308:	16bebd93 	.word	0x16bebd93
 801730c:	3f66c16c 	.word	0x3f66c16c
 8017310:	5555553e 	.word	0x5555553e
 8017314:	3fc55555 	.word	0x3fc55555
 8017318:	fff00000 	.word	0xfff00000
 801731c:	3ff00000 	.word	0x3ff00000
 8017320:	4090cbff 	.word	0x4090cbff
 8017324:	3f6f3400 	.word	0x3f6f3400
 8017328:	3fe00000 	.word	0x3fe00000
 801732c:	652b82fe 	.word	0x652b82fe
 8017330:	3c971547 	.word	0x3c971547
 8017334:	4090cc00 	.word	0x4090cc00

08017338 <fabs>:
 8017338:	ec51 0b10 	vmov	r0, r1, d0
 801733c:	4602      	mov	r2, r0
 801733e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017342:	ec43 2b10 	vmov	d0, r2, r3
 8017346:	4770      	bx	lr

08017348 <scalbn>:
 8017348:	b570      	push	{r4, r5, r6, lr}
 801734a:	ec55 4b10 	vmov	r4, r5, d0
 801734e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017352:	4606      	mov	r6, r0
 8017354:	462b      	mov	r3, r5
 8017356:	b991      	cbnz	r1, 801737e <scalbn+0x36>
 8017358:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801735c:	4323      	orrs	r3, r4
 801735e:	d03d      	beq.n	80173dc <scalbn+0x94>
 8017360:	4b35      	ldr	r3, [pc, #212]	@ (8017438 <scalbn+0xf0>)
 8017362:	4620      	mov	r0, r4
 8017364:	4629      	mov	r1, r5
 8017366:	2200      	movs	r2, #0
 8017368:	f7f0 fe62 	bl	8008030 <__aeabi_dmul>
 801736c:	4b33      	ldr	r3, [pc, #204]	@ (801743c <scalbn+0xf4>)
 801736e:	429e      	cmp	r6, r3
 8017370:	4604      	mov	r4, r0
 8017372:	460d      	mov	r5, r1
 8017374:	da0f      	bge.n	8017396 <scalbn+0x4e>
 8017376:	a328      	add	r3, pc, #160	@ (adr r3, 8017418 <scalbn+0xd0>)
 8017378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737c:	e01e      	b.n	80173bc <scalbn+0x74>
 801737e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8017382:	4291      	cmp	r1, r2
 8017384:	d10b      	bne.n	801739e <scalbn+0x56>
 8017386:	4622      	mov	r2, r4
 8017388:	4620      	mov	r0, r4
 801738a:	4629      	mov	r1, r5
 801738c:	f7f0 fc9a 	bl	8007cc4 <__adddf3>
 8017390:	4604      	mov	r4, r0
 8017392:	460d      	mov	r5, r1
 8017394:	e022      	b.n	80173dc <scalbn+0x94>
 8017396:	460b      	mov	r3, r1
 8017398:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801739c:	3936      	subs	r1, #54	@ 0x36
 801739e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80173a2:	4296      	cmp	r6, r2
 80173a4:	dd0d      	ble.n	80173c2 <scalbn+0x7a>
 80173a6:	2d00      	cmp	r5, #0
 80173a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8017420 <scalbn+0xd8>)
 80173aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173ae:	da02      	bge.n	80173b6 <scalbn+0x6e>
 80173b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8017428 <scalbn+0xe0>)
 80173b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8017420 <scalbn+0xd8>)
 80173b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173bc:	f7f0 fe38 	bl	8008030 <__aeabi_dmul>
 80173c0:	e7e6      	b.n	8017390 <scalbn+0x48>
 80173c2:	1872      	adds	r2, r6, r1
 80173c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80173c8:	428a      	cmp	r2, r1
 80173ca:	dcec      	bgt.n	80173a6 <scalbn+0x5e>
 80173cc:	2a00      	cmp	r2, #0
 80173ce:	dd08      	ble.n	80173e2 <scalbn+0x9a>
 80173d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80173d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80173d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80173dc:	ec45 4b10 	vmov	d0, r4, r5
 80173e0:	bd70      	pop	{r4, r5, r6, pc}
 80173e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80173e6:	da08      	bge.n	80173fa <scalbn+0xb2>
 80173e8:	2d00      	cmp	r5, #0
 80173ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8017418 <scalbn+0xd0>)
 80173ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173f0:	dac1      	bge.n	8017376 <scalbn+0x2e>
 80173f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8017430 <scalbn+0xe8>)
 80173f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173f8:	e7bd      	b.n	8017376 <scalbn+0x2e>
 80173fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80173fe:	3236      	adds	r2, #54	@ 0x36
 8017400:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017408:	4620      	mov	r0, r4
 801740a:	4b0d      	ldr	r3, [pc, #52]	@ (8017440 <scalbn+0xf8>)
 801740c:	4629      	mov	r1, r5
 801740e:	2200      	movs	r2, #0
 8017410:	e7d4      	b.n	80173bc <scalbn+0x74>
 8017412:	bf00      	nop
 8017414:	f3af 8000 	nop.w
 8017418:	c2f8f359 	.word	0xc2f8f359
 801741c:	01a56e1f 	.word	0x01a56e1f
 8017420:	8800759c 	.word	0x8800759c
 8017424:	7e37e43c 	.word	0x7e37e43c
 8017428:	8800759c 	.word	0x8800759c
 801742c:	fe37e43c 	.word	0xfe37e43c
 8017430:	c2f8f359 	.word	0xc2f8f359
 8017434:	81a56e1f 	.word	0x81a56e1f
 8017438:	43500000 	.word	0x43500000
 801743c:	ffff3cb0 	.word	0xffff3cb0
 8017440:	3c900000 	.word	0x3c900000

08017444 <with_errno>:
 8017444:	b510      	push	{r4, lr}
 8017446:	ed2d 8b02 	vpush	{d8}
 801744a:	eeb0 8a40 	vmov.f32	s16, s0
 801744e:	eef0 8a60 	vmov.f32	s17, s1
 8017452:	4604      	mov	r4, r0
 8017454:	f7fe fb36 	bl	8015ac4 <__errno>
 8017458:	eeb0 0a48 	vmov.f32	s0, s16
 801745c:	eef0 0a68 	vmov.f32	s1, s17
 8017460:	ecbd 8b02 	vpop	{d8}
 8017464:	6004      	str	r4, [r0, #0]
 8017466:	bd10      	pop	{r4, pc}

08017468 <xflow>:
 8017468:	4603      	mov	r3, r0
 801746a:	b507      	push	{r0, r1, r2, lr}
 801746c:	ec51 0b10 	vmov	r0, r1, d0
 8017470:	b183      	cbz	r3, 8017494 <xflow+0x2c>
 8017472:	4602      	mov	r2, r0
 8017474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017478:	e9cd 2300 	strd	r2, r3, [sp]
 801747c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017480:	f7f0 fdd6 	bl	8008030 <__aeabi_dmul>
 8017484:	ec41 0b10 	vmov	d0, r0, r1
 8017488:	2022      	movs	r0, #34	@ 0x22
 801748a:	b003      	add	sp, #12
 801748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017490:	f7ff bfd8 	b.w	8017444 <with_errno>
 8017494:	4602      	mov	r2, r0
 8017496:	460b      	mov	r3, r1
 8017498:	e7ee      	b.n	8017478 <xflow+0x10>
 801749a:	0000      	movs	r0, r0
 801749c:	0000      	movs	r0, r0
	...

080174a0 <__math_uflow>:
 80174a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174a8 <__math_uflow+0x8>
 80174a4:	f7ff bfe0 	b.w	8017468 <xflow>
 80174a8:	00000000 	.word	0x00000000
 80174ac:	10000000 	.word	0x10000000

080174b0 <__math_oflow>:
 80174b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174b8 <__math_oflow+0x8>
 80174b4:	f7ff bfd8 	b.w	8017468 <xflow>
 80174b8:	00000000 	.word	0x00000000
 80174bc:	70000000 	.word	0x70000000

080174c0 <__ieee754_sqrt>:
 80174c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c4:	4a68      	ldr	r2, [pc, #416]	@ (8017668 <__ieee754_sqrt+0x1a8>)
 80174c6:	ec55 4b10 	vmov	r4, r5, d0
 80174ca:	43aa      	bics	r2, r5
 80174cc:	462b      	mov	r3, r5
 80174ce:	4621      	mov	r1, r4
 80174d0:	d110      	bne.n	80174f4 <__ieee754_sqrt+0x34>
 80174d2:	4622      	mov	r2, r4
 80174d4:	4620      	mov	r0, r4
 80174d6:	4629      	mov	r1, r5
 80174d8:	f7f0 fdaa 	bl	8008030 <__aeabi_dmul>
 80174dc:	4602      	mov	r2, r0
 80174de:	460b      	mov	r3, r1
 80174e0:	4620      	mov	r0, r4
 80174e2:	4629      	mov	r1, r5
 80174e4:	f7f0 fbee 	bl	8007cc4 <__adddf3>
 80174e8:	4604      	mov	r4, r0
 80174ea:	460d      	mov	r5, r1
 80174ec:	ec45 4b10 	vmov	d0, r4, r5
 80174f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f4:	2d00      	cmp	r5, #0
 80174f6:	dc0e      	bgt.n	8017516 <__ieee754_sqrt+0x56>
 80174f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80174fc:	4322      	orrs	r2, r4
 80174fe:	d0f5      	beq.n	80174ec <__ieee754_sqrt+0x2c>
 8017500:	b19d      	cbz	r5, 801752a <__ieee754_sqrt+0x6a>
 8017502:	4622      	mov	r2, r4
 8017504:	4620      	mov	r0, r4
 8017506:	4629      	mov	r1, r5
 8017508:	f7f0 fbda 	bl	8007cc0 <__aeabi_dsub>
 801750c:	4602      	mov	r2, r0
 801750e:	460b      	mov	r3, r1
 8017510:	f7f0 feb8 	bl	8008284 <__aeabi_ddiv>
 8017514:	e7e8      	b.n	80174e8 <__ieee754_sqrt+0x28>
 8017516:	152a      	asrs	r2, r5, #20
 8017518:	d115      	bne.n	8017546 <__ieee754_sqrt+0x86>
 801751a:	2000      	movs	r0, #0
 801751c:	e009      	b.n	8017532 <__ieee754_sqrt+0x72>
 801751e:	0acb      	lsrs	r3, r1, #11
 8017520:	3a15      	subs	r2, #21
 8017522:	0549      	lsls	r1, r1, #21
 8017524:	2b00      	cmp	r3, #0
 8017526:	d0fa      	beq.n	801751e <__ieee754_sqrt+0x5e>
 8017528:	e7f7      	b.n	801751a <__ieee754_sqrt+0x5a>
 801752a:	462a      	mov	r2, r5
 801752c:	e7fa      	b.n	8017524 <__ieee754_sqrt+0x64>
 801752e:	005b      	lsls	r3, r3, #1
 8017530:	3001      	adds	r0, #1
 8017532:	02dc      	lsls	r4, r3, #11
 8017534:	d5fb      	bpl.n	801752e <__ieee754_sqrt+0x6e>
 8017536:	1e44      	subs	r4, r0, #1
 8017538:	1b12      	subs	r2, r2, r4
 801753a:	f1c0 0420 	rsb	r4, r0, #32
 801753e:	fa21 f404 	lsr.w	r4, r1, r4
 8017542:	4323      	orrs	r3, r4
 8017544:	4081      	lsls	r1, r0
 8017546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801754a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801754e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017552:	07d2      	lsls	r2, r2, #31
 8017554:	bf5c      	itt	pl
 8017556:	005b      	lslpl	r3, r3, #1
 8017558:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801755c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017560:	bf58      	it	pl
 8017562:	0049      	lslpl	r1, r1, #1
 8017564:	2600      	movs	r6, #0
 8017566:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801756a:	106d      	asrs	r5, r5, #1
 801756c:	0049      	lsls	r1, r1, #1
 801756e:	2016      	movs	r0, #22
 8017570:	4632      	mov	r2, r6
 8017572:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8017576:	1917      	adds	r7, r2, r4
 8017578:	429f      	cmp	r7, r3
 801757a:	bfde      	ittt	le
 801757c:	193a      	addle	r2, r7, r4
 801757e:	1bdb      	suble	r3, r3, r7
 8017580:	1936      	addle	r6, r6, r4
 8017582:	0fcf      	lsrs	r7, r1, #31
 8017584:	3801      	subs	r0, #1
 8017586:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801758a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801758e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017592:	d1f0      	bne.n	8017576 <__ieee754_sqrt+0xb6>
 8017594:	4604      	mov	r4, r0
 8017596:	2720      	movs	r7, #32
 8017598:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801759c:	429a      	cmp	r2, r3
 801759e:	eb00 0e0c 	add.w	lr, r0, ip
 80175a2:	db02      	blt.n	80175aa <__ieee754_sqrt+0xea>
 80175a4:	d113      	bne.n	80175ce <__ieee754_sqrt+0x10e>
 80175a6:	458e      	cmp	lr, r1
 80175a8:	d811      	bhi.n	80175ce <__ieee754_sqrt+0x10e>
 80175aa:	f1be 0f00 	cmp.w	lr, #0
 80175ae:	eb0e 000c 	add.w	r0, lr, ip
 80175b2:	da42      	bge.n	801763a <__ieee754_sqrt+0x17a>
 80175b4:	2800      	cmp	r0, #0
 80175b6:	db40      	blt.n	801763a <__ieee754_sqrt+0x17a>
 80175b8:	f102 0801 	add.w	r8, r2, #1
 80175bc:	1a9b      	subs	r3, r3, r2
 80175be:	458e      	cmp	lr, r1
 80175c0:	bf88      	it	hi
 80175c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80175c6:	eba1 010e 	sub.w	r1, r1, lr
 80175ca:	4464      	add	r4, ip
 80175cc:	4642      	mov	r2, r8
 80175ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80175d2:	3f01      	subs	r7, #1
 80175d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80175d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80175dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80175e0:	d1dc      	bne.n	801759c <__ieee754_sqrt+0xdc>
 80175e2:	4319      	orrs	r1, r3
 80175e4:	d01b      	beq.n	801761e <__ieee754_sqrt+0x15e>
 80175e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801766c <__ieee754_sqrt+0x1ac>
 80175ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8017670 <__ieee754_sqrt+0x1b0>
 80175ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80175f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80175f6:	f7f0 fb63 	bl	8007cc0 <__aeabi_dsub>
 80175fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80175fe:	4602      	mov	r2, r0
 8017600:	460b      	mov	r3, r1
 8017602:	4640      	mov	r0, r8
 8017604:	4649      	mov	r1, r9
 8017606:	f7f0 ff8f 	bl	8008528 <__aeabi_dcmple>
 801760a:	b140      	cbz	r0, 801761e <__ieee754_sqrt+0x15e>
 801760c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017610:	e9da 0100 	ldrd	r0, r1, [sl]
 8017614:	e9db 2300 	ldrd	r2, r3, [fp]
 8017618:	d111      	bne.n	801763e <__ieee754_sqrt+0x17e>
 801761a:	3601      	adds	r6, #1
 801761c:	463c      	mov	r4, r7
 801761e:	1072      	asrs	r2, r6, #1
 8017620:	0863      	lsrs	r3, r4, #1
 8017622:	07f1      	lsls	r1, r6, #31
 8017624:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8017628:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801762c:	bf48      	it	mi
 801762e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8017632:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8017636:	4618      	mov	r0, r3
 8017638:	e756      	b.n	80174e8 <__ieee754_sqrt+0x28>
 801763a:	4690      	mov	r8, r2
 801763c:	e7be      	b.n	80175bc <__ieee754_sqrt+0xfc>
 801763e:	f7f0 fb41 	bl	8007cc4 <__adddf3>
 8017642:	e9da 8900 	ldrd	r8, r9, [sl]
 8017646:	4602      	mov	r2, r0
 8017648:	460b      	mov	r3, r1
 801764a:	4640      	mov	r0, r8
 801764c:	4649      	mov	r1, r9
 801764e:	f7f0 ff61 	bl	8008514 <__aeabi_dcmplt>
 8017652:	b120      	cbz	r0, 801765e <__ieee754_sqrt+0x19e>
 8017654:	1ca0      	adds	r0, r4, #2
 8017656:	bf08      	it	eq
 8017658:	3601      	addeq	r6, #1
 801765a:	3402      	adds	r4, #2
 801765c:	e7df      	b.n	801761e <__ieee754_sqrt+0x15e>
 801765e:	1c63      	adds	r3, r4, #1
 8017660:	f023 0401 	bic.w	r4, r3, #1
 8017664:	e7db      	b.n	801761e <__ieee754_sqrt+0x15e>
 8017666:	bf00      	nop
 8017668:	7ff00000 	.word	0x7ff00000
 801766c:	200000f0 	.word	0x200000f0
 8017670:	200000e8 	.word	0x200000e8

08017674 <_init>:
 8017674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017676:	bf00      	nop
 8017678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801767a:	bc08      	pop	{r3}
 801767c:	469e      	mov	lr, r3
 801767e:	4770      	bx	lr

08017680 <_fini>:
 8017680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017682:	bf00      	nop
 8017684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017686:	bc08      	pop	{r3}
 8017688:	469e      	mov	lr, r3
 801768a:	4770      	bx	lr
