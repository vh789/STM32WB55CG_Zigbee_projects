
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08008640  08008640  00009640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008784  08008784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800878c  0800878c  0000978c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008790  08008790  00009790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  08008794  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000040c  20000070  080087fc  0000a070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000047c  080087fc  0000a47c  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 11 MB_MEM1       000000b0  20030028  20030028  0000b000  2**2
                  ALLOC
 12 .debug_info   0002807c  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f52  00000000  00000000  00032120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b8  00000000  00000000  00037078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e85  00000000  00000000  00039830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab33  00000000  00000000  0003b6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c996  00000000  00000000  000661e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112561  00000000  00000000  00092b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a50df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b080  00000000  00000000  001a5124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b01a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08008628 	.word	0x08008628

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08008628 	.word	0x08008628

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800051e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800052a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	cafecafe 	.word	0xcafecafe

0800054c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000556:	f023 0304 	bic.w	r3, r3, #4
 800055a:	6113      	str	r3, [r2, #16]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <MX_APPE_Config+0x18>)
 8000572:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000576:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000578:	f000 f806 	bl	8000588 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800057c:	f000 f80b 	bl	8000596 <Config_HSE>

  return;
 8000580:	bf00      	nop
}
 8000582:	bd80      	pop	{r7, pc}
 8000584:	58004000 	.word	0x58004000

08000588 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800058c:	bf00      	nop
}
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f006 fbc5 	bl	8006d2c <OTP_Read>
 80005a2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffae 	bl	8000510 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c6:	f000 ff7d 	bl	80014c4 <HAL_GetTick>
 80005ca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d00a      	beq.n	80005ee <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80005d8:	f000 ff8c 	bl	80014f4 <HAL_GetTickFreq>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e6:	e002      	b.n	80005ee <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005e8:	f7ff ffb0 	bl	800054c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80005ec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	f000 ff69 	bl	80014c4 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f4      	bhi.n	80005e8 <HAL_Delay+0x2a>
  }
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f006 fcd1 	bl	8006fb8 <TL_MM_EvtDone>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800062a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800062c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800063a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define HAL_SMALL_WAIT  50
// Define serial output function using UART2
int __io_putchar(int ch)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	2332      	movs	r3, #50	@ 0x32
 800065c:	2201      	movs	r2, #1
 800065e:	4804      	ldr	r0, [pc, #16]	@ (8000670 <__io_putchar+0x20>)
 8000660:	f005 f9ca 	bl	80059f8 <HAL_UART_Transmit>
    return 1;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000023c 	.word	0x2000023c

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 feb6 	bl	80013e8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800067c:	f7ff ff76 	bl	800056c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f854 	bl	800072c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000684:	f000 f8c2 	bl	800080c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8000688:	f000 f984 	bl	8000994 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fab4 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000690:	f000 fa66 	bl	8000b60 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000694:	f000 f99a 	bl	80009cc <MX_RTC_Init>
  MX_I2C1_Init();
 8000698:	f000 f93c 	bl	8000914 <MX_I2C1_Init>
  MX_TIM2_Init();
 800069c:	f000 f9ca 	bl	8000a34 <MX_TIM2_Init>
  MX_TIM16_Init();
 80006a0:	f000 fa38 	bl	8000b14 <MX_TIM16_Init>
  MX_ADC1_Init();
 80006a4:	f000 f8d2 	bl	800084c <MX_ADC1_Init>
  MX_RF_Init();
 80006a8:	f000 f988 	bl	80009bc <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <main+0x98>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6898      	ldr	r0, [r3, #8]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2202      	movs	r2, #2
 80006b6:	2100      	movs	r1, #0
 80006b8:	f007 f954 	bl	8007964 <setvbuf>
  printf("\n\n\nNew start\n");
 80006bc:	4814      	ldr	r0, [pc, #80]	@ (8000710 <main+0x9c>)
 80006be:	f007 f949 	bl	8007954 <puts>

  // init DHT11
  init_dht11(&dht11, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006c8:	4912      	ldr	r1, [pc, #72]	@ (8000714 <main+0xa0>)
 80006ca:	4813      	ldr	r0, [pc, #76]	@ (8000718 <main+0xa4>)
 80006cc:	f000 fe75 	bl	80013ba <init_dht11>
    /* USER CODE END WHILE */
//    MX_APPE_Process();

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 80006d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d4:	f7ff ff73 	bl	80005be <HAL_Delay>
//	readDHT11(&dht11);
//	printf("Temperature: %d, Humidity: %d\n", dht11.temperature, dht11.humidty);

	// read adc
  HAL_ADC_Start(&hadc1);
 80006d8:	4810      	ldr	r0, [pc, #64]	@ (800071c <main+0xa8>)
 80006da:	f001 fa2b 	bl	8001b34 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006de:	f04f 31ff 	mov.w	r1, #4294967295
 80006e2:	480e      	ldr	r0, [pc, #56]	@ (800071c <main+0xa8>)
 80006e4:	f001 fa7a 	bl	8001bdc <HAL_ADC_PollForConversion>
  value_adc = HAL_ADC_GetValue(&hadc1);
 80006e8:	480c      	ldr	r0, [pc, #48]	@ (800071c <main+0xa8>)
 80006ea:	f001 fb04 	bl	8001cf6 <HAL_ADC_GetValue>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000720 <main+0xac>)
 80006f2:	6013      	str	r3, [r2, #0]

  // toggle LED
  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 80006f4:	2110      	movs	r1, #16
 80006f6:	480b      	ldr	r0, [pc, #44]	@ (8000724 <main+0xb0>)
 80006f8:	f002 faa0 	bl	8002c3c <HAL_GPIO_TogglePin>
  // printf
	printf("ADC: %d\n", value_adc);
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <main+0xac>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	4809      	ldr	r0, [pc, #36]	@ (8000728 <main+0xb4>)
 8000704:	f007 f8be 	bl	8007884 <iprintf>
	HAL_Delay(500);
 8000708:	bf00      	nop
 800070a:	e7e1      	b.n	80006d0 <main+0x5c>
 800070c:	20000020 	.word	0x20000020
 8000710:	08008640 	.word	0x08008640
 8000714:	200001f0 	.word	0x200001f0
 8000718:	200002d0 	.word	0x200002d0
 800071c:	2000008c 	.word	0x2000008c
 8000720:	200002e0 	.word	0x200002e0
 8000724:	48001000 	.word	0x48001000
 8000728:	08008650 	.word	0x08008650

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09a      	sub	sp, #104	@ 0x68
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2248      	movs	r2, #72	@ 0x48
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f007 fa9e 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800075c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000760:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0303 	bic.w	r3, r3, #3
 800076c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000776:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <SystemClock_Config+0xdc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800077e:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <SystemClock_Config+0xdc>)
 8000780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <SystemClock_Config+0xdc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000792:	232b      	movs	r3, #43	@ 0x2b
 8000794:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ae:	2360      	movs	r3, #96	@ 0x60
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007b2:	2305      	movs	r3, #5
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 ffc6 	bl	8003750 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ca:	f000 fa69 	bl	8000ca0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007ce:	236f      	movs	r3, #111	@ 0x6f
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2101      	movs	r1, #1
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fb22 	bl	8003e38 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007fa:	f000 fa51 	bl	8000ca0 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3768      	adds	r7, #104	@ 0x68
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58000400 	.word	0x58000400

0800080c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2250      	movs	r2, #80	@ 0x50
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f007 fa2f 	bl	8007c7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800081e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000822:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000824:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000828:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800082a:	2300      	movs	r3, #0
 800082c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800082e:	2310      	movs	r3, #16
 8000830:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f003 ff3c 	bl	80046b2 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000840:	f000 fa2e 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000844:	bf00      	nop
 8000846:	3750      	adds	r7, #80	@ 0x50
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000862:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <MX_ADC1_Init+0xbc>)
 8000864:	4a29      	ldr	r2, [pc, #164]	@ (800090c <MX_ADC1_Init+0xc0>)
 8000866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000868:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <MX_ADC1_Init+0xbc>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086e:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <MX_ADC1_Init+0xbc>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000874:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <MX_ADC1_Init+0xbc>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <MX_ADC1_Init+0xbc>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_ADC1_Init+0xbc>)
 8000882:	2204      	movs	r2, #4
 8000884:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000886:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_ADC1_Init+0xbc>)
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_ADC1_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_ADC1_Init+0xbc>)
 8000894:	2201      	movs	r2, #1
 8000896:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_ADC1_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c2:	4811      	ldr	r0, [pc, #68]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008c4:	f000 ffea 	bl	800189c <HAL_ADC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008ce:	f000 f9e7 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_ADC1_Init+0xc4>)
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d6:	2306      	movs	r3, #6
 80008d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008de:	237f      	movs	r3, #127	@ 0x7f
 80008e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e2:	2304      	movs	r3, #4
 80008e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_ADC1_Init+0xbc>)
 80008f0:	f001 fa0e 	bl	8001d10 <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008fa:	f000 f9d1 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000008c 	.word	0x2000008c
 800090c:	50040000 	.word	0x50040000
 8000910:	25b00200 	.word	0x25b00200

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_I2C1_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <MX_I2C1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <MX_I2C1_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_I2C1_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000950:	f002 f9b2 	bl	8002cb8 <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095a:	f000 f9a1 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000962:	f002 fa44 	bl	8002dee <HAL_I2CEx_ConfigAnalogFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 f998 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_I2C1_Init+0x74>)
 8000974:	f002 fa86 	bl	8002e84 <HAL_I2CEx_ConfigDigitalFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 f98f 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000f0 	.word	0x200000f0
 800098c:	40005400 	.word	0x40005400
 8000990:	00b07cb4 	.word	0x00b07cb4

08000994 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_IPCC_Init+0x20>)
 800099a:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <MX_IPCC_Init+0x24>)
 800099c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_IPCC_Init+0x20>)
 80009a0:	f002 fabc 	bl	8002f1c <HAL_IPCC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80009aa:	f000 f979 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000144 	.word	0x20000144
 80009b8:	58000c00 	.word	0x58000c00

080009bc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <MX_RTC_Init+0x64>)
 80009d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009de:	220f      	movs	r2, #15
 80009e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009e4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_RTC_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <MX_RTC_Init+0x60>)
 8000a04:	f004 f8dc 	bl	8004bc0 <HAL_RTC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 f947 	bl	8000ca0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_RTC_Init+0x60>)
 8000a18:	f004 f9d2 	bl	8004dc0 <HAL_RTCEx_SetWakeUpTimer>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000a22:	f000 f93d 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000180 	.word	0x20000180
 8000a30:	40002800 	.word	0x40002800

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a58:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a62:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a82:	4823      	ldr	r0, [pc, #140]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000a84:	f004 fa8e 	bl	8004fa4 <HAL_TIM_PWM_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000a8e:	f000 f907 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481b      	ldr	r0, [pc, #108]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000aa2:	f004 fed9 	bl	8005858 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f8f8 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab0:	2360      	movs	r3, #96	@ 0x60
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000ac8:	f004 fac4 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000ad2:	f000 f8e5 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000ade:	f004 fab9 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000ae8:	f000 f8da 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	220c      	movs	r2, #12
 8000af0:	4619      	mov	r1, r3
 8000af2:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000af4:	f004 faae 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000afe:	f000 f8cf 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b02:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <MX_TIM2_Init+0xdc>)
 8000b04:	f000 fa66 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200001a4 	.word	0x200001a4

08000b14 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <MX_TIM16_Init+0x48>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b20:	221f      	movs	r2, #31
 8000b22:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b2c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000b30:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_TIM16_Init+0x44>)
 8000b46:	f004 f9d6 	bl	8004ef6 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000b50:	f000 f8a6 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001f0 	.word	0x200001f0
 8000b5c:	40014400 	.word	0x40014400

08000b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <MX_USART1_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba8:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000baa:	f004 fed5 	bl	8005958 <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f000 f874 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000bbc:	f005 ffeb 	bl	8006b96 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f000 f86b 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000bce:	f006 f820 	bl	8006c12 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 f862 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_USART1_UART_Init+0x90>)
 8000bde:	f005 ffa1 	bl	8006b24 <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 f85a 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000023c 	.word	0x2000023c
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff fd06 	bl	800061e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fd03 	bl	800061e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fd00 	bl	800061e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f7ff fcfd 	bl	800061e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	481b      	ldr	r0, [pc, #108]	@ (8000c98 <MX_GPIO_Init+0xa0>)
 8000c2a:	f001 ffef 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c42:	f001 fe73 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_HUMID_Pin */
  GPIO_InitStruct.Pin = TEMP_HUMID_Pin;
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEMP_HUMID_GPIO_Port, &GPIO_InitStruct);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f001 fe67 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <MX_GPIO_Init+0xa0>)
 8000c74:	f001 fe5a 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000c78:	2380      	movs	r3, #128	@ 0x80
 8000c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_GPIO_Init+0xa4>)
 8000c8a:	f001 fe4f 	bl	800292c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	48001000 	.word	0x48001000
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <Error_Handler+0x8>

08000cac <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_AHB2_GRP1_EnableClock>:
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d24:	68fb      	ldr	r3, [r7, #12]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d88:	68fb      	ldr	r3, [r7, #12]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d9a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000d9e:	f7ff ffaf 	bl	8000d00 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	202e      	movs	r0, #46	@ 0x2e
 8000da8:	f001 fccd 	bl	8002746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000dac:	202e      	movs	r0, #46	@ 0x2e
 8000dae:	f001 fce4 	bl	800277a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09c      	sub	sp, #112	@ 0x70
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2250      	movs	r2, #80	@ 0x50
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 ff4f 	bl	8007c7c <memset>
  if(hadc->Instance==ADC1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e54 <HAL_ADC_MspInit+0x9c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d131      	bne.n	8000e4c <HAL_ADC_MspInit+0x94>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000dee:	2318      	movs	r3, #24
 8000df0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000df2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000df8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000dfe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000e04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e0a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fc4c 	bl	80046b2 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000e20:	f7ff ff3e 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e28:	f7ff ff51 	bl	8000cce <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff ff4e 	bl	8000cce <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8000e32:	2370      	movs	r3, #112	@ 0x70
 8000e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f001 fd70 	bl	800292c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3770      	adds	r7, #112	@ 0x70
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	50040000 	.word	0x50040000

08000e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b09c      	sub	sp, #112	@ 0x70
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2250      	movs	r2, #80	@ 0x50
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 feff 	bl	8007c7c <memset>
  if(hi2c->Instance==I2C1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <HAL_I2C_MspInit+0x88>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d126      	bne.n	8000ed6 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e8c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fc0b 	bl	80046b2 <HAL_RCCEx_PeriphCLKConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ea2:	f7ff fefd 	bl	8000ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f7ff ff11 	bl	8000cce <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb2:	2312      	movs	r3, #18
 8000eb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <HAL_I2C_MspInit+0x8c>)
 8000eca:	f001 fd2f 	bl	800292c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ece:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000ed2:	f7ff ff2e 	bl	8000d32 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3770      	adds	r7, #112	@ 0x70
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <HAL_IPCC_MspInit+0x44>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d113      	bne.n	8000f22 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8000efa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000efe:	f7ff feff 	bl	8000d00 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	202c      	movs	r0, #44	@ 0x2c
 8000f08:	f001 fc1d 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8000f0c:	202c      	movs	r0, #44	@ 0x2c
 8000f0e:	f001 fc34 	bl	800277a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	202d      	movs	r0, #45	@ 0x2d
 8000f18:	f001 fc15 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8000f1c:	202d      	movs	r0, #45	@ 0x2d
 8000f1e:	f001 fc2c 	bl	800277a <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58000c00 	.word	0x58000c00

08000f30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b096      	sub	sp, #88	@ 0x58
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2250      	movs	r2, #80	@ 0x50
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f006 fe9b 	bl	8007c7c <memset>
  if(hrtc->Instance==RTC)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <HAL_RTC_MspInit+0x58>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d117      	bne.n	8000f80 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8000f50:	f002 f86a 	bl	8003028 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f58:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fba4 	bl	80046b2 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000f70:	f7ff fe96 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f74:	f7ff fe9a 	bl	8000cac <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f78:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f7c:	f7ff fed9 	bl	8000d32 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000f80:	bf00      	nop
 8000f82:	3758      	adds	r7, #88	@ 0x58
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40002800 	.word	0x40002800

08000f8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f9c:	d102      	bne.n	8000fa4 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff fec7 	bl	8000d32 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x24>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d103      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fbe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000fc2:	f7ff fecf 	bl	8000d64 <LL_APB2_GRP1_EnableClock>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40014400 	.word	0x40014400

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d113      	bne.n	800101e <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fe69 	bl	8000cce <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 8000ffc:	230d      	movs	r3, #13
 8000ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101a:	f001 fc87 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09c      	sub	sp, #112	@ 0x70
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2250      	movs	r2, #80	@ 0x50
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f006 fe17 	bl	8007c7c <memset>
  if(huart->Instance==USART1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <HAL_UART_MspInit+0x98>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d12e      	bne.n	80010b6 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001058:	2301      	movs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fb24 	bl	80046b2 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001070:	f7ff fe16 	bl	8000ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001074:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001078:	f7ff fe74 	bl	8000d64 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fe26 	bl	8000cce <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001082:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001094:	2307      	movs	r3, #7
 8001096:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a2:	f001 fc43 	bl	800292c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2024      	movs	r0, #36	@ 0x24
 80010ac:	f001 fb4b 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010b0:	2024      	movs	r0, #36	@ 0x24
 80010b2:	f001 fb62 	bl	800277a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	3770      	adds	r7, #112	@ 0x70
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013800 	.word	0x40013800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <NMI_Handler+0x4>

080010cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <MemManage_Handler+0x4>

080010dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111a:	f000 f9bf 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <USART1_IRQHandler+0x10>)
 800112a:	f004 fcf3 	bl	8005b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000023c 	.word	0x2000023c

08001138 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800113c:	f006 f8ac 	bl	8007298 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001148:	f006 f8fc 	bl	8007344 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001154:	f001 fd8c 	bl	8002c70 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800116e:	f3af 8000 	nop.w
 8001172:	4601      	mov	r1, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf0      	blt.n	800116e <_read+0x12>
  }

  return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e009      	b.n	80011bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fa4d 	bl	8000650 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf1      	blt.n	80011a8 <_write+0x12>
  }
  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_close>:

int _close(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f6:	605a      	str	r2, [r3, #4]
  return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_isatty>:

int _isatty(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f006 fd66 	bl	8007d38 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20030000 	.word	0x20030000
 8001298:	00000400 	.word	0x00000400
 800129c:	200002e4 	.word	0x200002e4
 80012a0:	20000480 	.word	0x20000480

080012a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <SystemInit+0x98>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ae:	4a23      	ldr	r2, [pc, #140]	@ (800133c <SystemInit+0x98>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012cc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80012d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <SystemInit+0x9c>)
 80012de:	4013      	ands	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ee:	f023 0305 	bic.w	r3, r3, #5
 80012f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130e:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <SystemInit+0xa0>)
 8001310:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001316:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <SystemInit+0xa0>)
 8001318:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001324:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001328:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	faf6fefb 	.word	0xfaf6fefb
 8001344:	22041000 	.word	0x22041000

08001348 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001348:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134c:	3304      	adds	r3, #4

0800134e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001350:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001352:	d3f9      	bcc.n	8001348 <CopyDataInit>
  bx lr
 8001354:	4770      	bx	lr

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001356:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001358:	3004      	adds	r0, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800135a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>
  bx lr
 800135e:	4770      	bx	lr

08001360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001364:	f7ff ff9e 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001368:	480b      	ldr	r0, [pc, #44]	@ (8001398 <LoopForever+0x6>)
 800136a:	490c      	ldr	r1, [pc, #48]	@ (800139c <LoopForever+0xa>)
 800136c:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <LoopForever+0xe>)
 800136e:	2300      	movs	r3, #0
 8001370:	f7ff ffed 	bl	800134e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001374:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <LoopForever+0x12>)
 8001376:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <LoopForever+0x16>)
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <LoopForever+0x1a>)
 800137a:	2300      	movs	r3, #0
 800137c:	f7ff ffe7 	bl	800134e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001380:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <LoopForever+0x1e>)
 8001382:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <LoopForever+0x22>)
 8001384:	2300      	movs	r3, #0
 8001386:	f7ff ffe8 	bl	800135a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800138a:	f006 fcdb 	bl	8007d44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800138e:	f7ff f971 	bl	8000674 <main>

08001392 <LoopForever>:

LoopForever:
  b LoopForever
 8001392:	e7fe      	b.n	8001392 <LoopForever>
  ldr   r0, =_estack
 8001394:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001398:	20000008 	.word	0x20000008
 800139c:	20000070 	.word	0x20000070
 80013a0:	08008794 	.word	0x08008794
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80013a4:	200300d8 	.word	0x200300d8
 80013a8:	200300d8 	.word	0x200300d8
 80013ac:	080087fc 	.word	0x080087fc
  INIT_BSS _sbss, _ebss
 80013b0:	20000070 	.word	0x20000070
 80013b4:	2000047c 	.word	0x2000047c

080013b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_IRQHandler>

080013ba <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80013ba:	b480      	push	{r7}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	809a      	strh	r2, [r3, #4]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_Init+0x3c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_Init+0x3c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	2003      	movs	r0, #3
 8001400:	f001 f996 	bl	8002730 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001404:	200f      	movs	r0, #15
 8001406:	f000 f80f 	bl	8001428 <HAL_InitTick>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	e001      	b.n	800141a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001416:	f7ff fcbe 	bl	8000d96 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141a:	79fb      	ldrb	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58004000 	.word	0x58004000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <HAL_InitTick+0x6c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d024      	beq.n	8001486 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800143c:	f002 fea8 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_InitTick+0x6c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f001 f99e 	bl	8002796 <HAL_SYSTICK_Config>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10f      	bne.n	8001480 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	d809      	bhi.n	800147a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001466:	2200      	movs	r2, #0
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	f04f 30ff 	mov.w	r0, #4294967295
 800146e:	f001 f96a 	bl	8002746 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_InitTick+0x70>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e007      	b.n	800148a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e004      	b.n	800148a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000010 	.word	0x20000010
 8001498:	2000000c 	.word	0x2000000c

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000010 	.word	0x20000010
 80014c0:	200002e8 	.word	0x200002e8

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200002e8 	.word	0x200002e8

080014dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_GetTickPrio+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTickFreq+0x14>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000010 	.word	0x20000010

0800150c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3360      	adds	r3, #96	@ 0x60
 8001586:	461a      	mov	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <LL_ADC_SetOffset+0x44>)
 8001596:	4013      	ands	r3, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015ac:	bf00      	nop
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	03fff000 	.word	0x03fff000

080015bc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3360      	adds	r3, #96	@ 0x60
 80015ca:	461a      	mov	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3360      	adds	r3, #96	@ 0x60
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001636:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3330      	adds	r3, #48	@ 0x30
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	211f      	movs	r1, #31
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0e9b      	lsrs	r3, r3, #26
 800167c:	f003 011f 	and.w	r1, r3, #31
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	431a      	orrs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3314      	adds	r3, #20
 80016ac:	461a      	mov	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	0e5b      	lsrs	r3, r3, #25
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0d1b      	lsrs	r3, r3, #20
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	2107      	movs	r1, #7
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	0d1b      	lsrs	r3, r3, #20
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	431a      	orrs	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0318 	and.w	r3, r3, #24
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001718:	40d9      	lsrs	r1, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	400b      	ands	r3, r1
 800171e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	0007ffff 	.word	0x0007ffff

0800173c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800174c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6093      	str	r3, [r2, #8]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001798:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800179c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017c4:	d101      	bne.n	80017ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <LL_ADC_IsEnabled+0x18>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <LL_ADC_IsEnabled+0x1a>
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001836:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800183a:	f043 0204 	orr.w	r2, r3, #4
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b04      	cmp	r3, #4
 8001860:	d101      	bne.n	8001866 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d101      	bne.n	800188c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e12e      	b.n	8001b18 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fa75 	bl	8000db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff3d 	bl	8001760 <LL_ADC_IsDeepPowerDownEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff23 	bl	800173c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff58 	bl	80017b0 <LL_ADC_IsInternalRegulatorEnabled>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff3c 	bl	8001788 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001910:	4b83      	ldr	r3, [pc, #524]	@ (8001b20 <HAL_ADC_Init+0x284>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	4a83      	ldr	r2, [pc, #524]	@ (8001b24 <HAL_ADC_Init+0x288>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001924:	e002      	b.n	800192c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3b01      	subs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff3a 	bl	80017b0 <LL_ADC_IsInternalRegulatorEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	f043 0210 	orr.w	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff73 	bl	800184e <LL_ADC_REG_IsConversionOngoing>
 8001968:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80c7 	bne.w	8001b06 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 80c3 	bne.w	8001b06 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001984:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001988:	f043 0202 	orr.w	r2, r3, #2
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff33 	bl	8001800 <LL_ADC_IsEnabled>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019a0:	4861      	ldr	r0, [pc, #388]	@ (8001b28 <HAL_ADC_Init+0x28c>)
 80019a2:	f7ff ff2d 	bl	8001800 <LL_ADC_IsEnabled>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	485e      	ldr	r0, [pc, #376]	@ (8001b2c <HAL_ADC_Init+0x290>)
 80019b4:	f7ff fdaa 	bl	800150c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e5b      	ldrb	r3, [r3, #25]
 80019bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80019c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80019ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80019d8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	045b      	lsls	r3, r3, #17
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	4b45      	ldr	r3, [pc, #276]	@ (8001b30 <HAL_ADC_Init+0x294>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff0e 	bl	800184e <LL_ADC_REG_IsConversionOngoing>
 8001a32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff1b 	bl	8001874 <LL_ADC_INJ_IsConversionOngoing>
 8001a3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d13d      	bne.n	8001ac2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d13a      	bne.n	8001ac2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a50:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a68:	f023 0302 	bic.w	r3, r3, #2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	69b9      	ldr	r1, [r7, #24]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d118      	bne.n	8001ab2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	e007      	b.n	8001ac2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	f023 010f 	bic.w	r1, r3, #15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae2:	e007      	b.n	8001af4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020f 	bic.w	r2, r2, #15
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af8:	f023 0303 	bic.w	r3, r3, #3
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b04:	e007      	b.n	8001b16 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000008 	.word	0x20000008
 8001b24:	053e2d63 	.word	0x053e2d63
 8001b28:	50040000 	.word	0x50040000
 8001b2c:	50040300 	.word	0x50040300
 8001b30:	fff0c007 	.word	0xfff0c007

08001b34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fe84 	bl	800184e <LL_ADC_REG_IsConversionOngoing>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d140      	bne.n	8001bce <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Start+0x26>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e03c      	b.n	8001bd4 <HAL_ADC_Start+0xa0>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fc9a 	bl	800249c <ADC_Enable>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d128      	bne.n	8001bc4 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	f023 0206 	bic.w	r2, r3, #6
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	221c      	movs	r2, #28
 8001bae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe32 	bl	8001826 <LL_ADC_REG_StartConversion>
 8001bc2:	e006      	b.n	8001bd2 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001bcc:	e001      	b.n	8001bd2 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d102      	bne.n	8001bf4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001bee:	2308      	movs	r3, #8
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e010      	b.n	8001c16 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c06:	f043 0220 	orr.w	r2, r3, #32
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e06d      	b.n	8001cee <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c12:	2304      	movs	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c16:	f7ff fc55 	bl	80014c4 <HAL_GetTick>
 8001c1a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c1c:	e021      	b.n	8001c62 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d01d      	beq.n	8001c62 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c26:	f7ff fc4d 	bl	80014c4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d302      	bcc.n	8001c3c <HAL_ADC_PollForConversion+0x60>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d112      	bne.n	8001c62 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10b      	bne.n	8001c62 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	f043 0204 	orr.w	r2, r3, #4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e045      	b.n	8001cee <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0d6      	beq.n	8001c1e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fccc 	bl	800161e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01c      	beq.n	8001cc6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7e5b      	ldrb	r3, [r3, #25]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d118      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d111      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d105      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d104      	bne.n	8001cd6 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e00a      	b.n	8001cec <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	220c      	movs	r2, #12
 8001cea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0b6      	sub	sp, #216	@ 0xd8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x22>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e39f      	b.n	8002472 <HAL_ADC_ConfigChannel+0x762>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd85 	bl	800184e <LL_ADC_REG_IsConversionOngoing>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 8384 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f7ff fc73 	bl	8001644 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fd73 	bl	800184e <LL_ADC_REG_IsConversionOngoing>
 8001d68:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd7f 	bl	8001874 <LL_ADC_INJ_IsConversionOngoing>
 8001d76:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 81a6 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 81a1 	bne.w	80020d0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f7ff fc7e 	bl	800169c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6919      	ldr	r1, [r3, #16]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001dd2:	f7ff fbcf 	bl	8001574 <LL_ADC_SetOffset>
 8001dd6:	e17b      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fbec 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0xf4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fbe1 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	e01e      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x132>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fbd6 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e004      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x14a>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	e018      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x17c>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e004      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fba5 	bl	80015e8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fb89 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x1ba>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fb7e 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	e01e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x1f8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fb73 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001ee8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e004      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x210>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	e018      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x242>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e004      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d106      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fb42 	bl	80015e8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fb26 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10a      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x280>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fb1b 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	f003 021f 	and.w	r2, r3, #31
 8001f8e:	e01e      	b.n	8001fce <HAL_ADC_ConfigChannel+0x2be>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2102      	movs	r1, #2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fb10 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001fae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	e004      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x2d6>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	e016      	b.n	8002014 <HAL_ADC_ConfigChannel+0x304>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ff8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ffa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e004      	b.n	8002014 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800200a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	2102      	movs	r1, #2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fae1 	bl	80015e8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2103      	movs	r1, #3
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fac5 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x342>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2103      	movs	r1, #3
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff faba 	bl	80015bc <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	e017      	b.n	8002082 <HAL_ADC_ConfigChannel+0x372>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2103      	movs	r1, #3
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff faaf 	bl	80015bc <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800206a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800206c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800206e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <HAL_ADC_ConfigChannel+0x38a>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	e011      	b.n	80020be <HAL_ADC_ConfigChannel+0x3ae>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80020a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80020ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e003      	b.n	80020be <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80020b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	429a      	cmp	r2, r3
 80020c0:	d106      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2103      	movs	r1, #3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fa8c 	bl	80015e8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fb93 	bl	8001800 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 81c2 	bne.w	8002466 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7ff fb00 	bl	80016f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a8e      	ldr	r2, [pc, #568]	@ (8002334 <HAL_ADC_ConfigChannel+0x624>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	f040 8130 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x418>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	3301      	adds	r3, #1
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2b09      	cmp	r3, #9
 800211e:	bf94      	ite	ls
 8002120:	2301      	movls	r3, #1
 8002122:	2300      	movhi	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e019      	b.n	800215c <HAL_ADC_ConfigChannel+0x44c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002138:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800213a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002140:	2320      	movs	r3, #32
 8002142:	e003      	b.n	800214c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002144:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3301      	adds	r3, #1
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b09      	cmp	r3, #9
 8002154:	bf94      	ite	ls
 8002156:	2301      	movls	r3, #1
 8002158:	2300      	movhi	r3, #0
 800215a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800215c:	2b00      	cmp	r3, #0
 800215e:	d079      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_ADC_ConfigChannel+0x46c>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	3301      	adds	r3, #1
 8002174:	069b      	lsls	r3, r3, #26
 8002176:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800217a:	e015      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x498>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800218a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800218c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800218e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e003      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x4b8>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	3301      	adds	r3, #1
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	e017      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x4e8>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80021d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80021da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e003      	b.n	80021ec <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80021e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	ea42 0103 	orr.w	r1, r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <HAL_ADC_ConfigChannel+0x50e>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	3301      	adds	r3, #1
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	051b      	lsls	r3, r3, #20
 800221c:	e018      	b.n	8002250 <HAL_ADC_ConfigChannel+0x540>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002250:	430b      	orrs	r3, r1
 8002252:	e080      	b.n	8002356 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x560>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	3301      	adds	r3, #1
 8002268:	069b      	lsls	r3, r3, #26
 800226a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226e:	e015      	b.n	800229c <HAL_ADC_ConfigChannel+0x58c>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e003      	b.n	8002294 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	069b      	lsls	r3, r3, #26
 8002298:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x5ac>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	3301      	adds	r3, #1
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	e017      	b.n	80022ec <HAL_ADC_ConfigChannel+0x5dc>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e003      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x608>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	3301      	adds	r3, #1
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	3b1e      	subs	r3, #30
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002316:	e01d      	b.n	8002354 <HAL_ADC_ConfigChannel+0x644>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	613b      	str	r3, [r7, #16]
  return result;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e005      	b.n	8002340 <HAL_ADC_ConfigChannel+0x630>
 8002334:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 021f 	and.w	r2, r3, #31
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	3b1e      	subs	r3, #30
 800234e:	051b      	lsls	r3, r3, #20
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002354:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235a:	4619      	mov	r1, r3
 800235c:	f7ff f99e 	bl	800169c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b45      	ldr	r3, [pc, #276]	@ (800247c <HAL_ADC_ConfigChannel+0x76c>)
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d07c      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236c:	4844      	ldr	r0, [pc, #272]	@ (8002480 <HAL_ADC_ConfigChannel+0x770>)
 800236e:	f7ff f8f3 	bl	8001558 <LL_ADC_GetCommonPathInternalCh>
 8002372:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002376:	4843      	ldr	r0, [pc, #268]	@ (8002484 <HAL_ADC_ConfigChannel+0x774>)
 8002378:	f7ff fa42 	bl	8001800 <LL_ADC_IsEnabled>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d15e      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a40      	ldr	r2, [pc, #256]	@ (8002488 <HAL_ADC_ConfigChannel+0x778>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d127      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x6cc>
 800238c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d121      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <HAL_ADC_ConfigChannel+0x774>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d161      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023aa:	4619      	mov	r1, r3
 80023ac:	4834      	ldr	r0, [pc, #208]	@ (8002480 <HAL_ADC_ConfigChannel+0x770>)
 80023ae:	f7ff f8c0 	bl	8001532 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b2:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_ADC_ConfigChannel+0x77c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	4a35      	ldr	r2, [pc, #212]	@ (8002490 <HAL_ADC_ConfigChannel+0x780>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023da:	e044      	b.n	8002466 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002494 <HAL_ADC_ConfigChannel+0x784>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d113      	bne.n	800240e <HAL_ADC_ConfigChannel+0x6fe>
 80023e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a23      	ldr	r2, [pc, #140]	@ (8002484 <HAL_ADC_ConfigChannel+0x774>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d134      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002404:	4619      	mov	r1, r3
 8002406:	481e      	ldr	r0, [pc, #120]	@ (8002480 <HAL_ADC_ConfigChannel+0x770>)
 8002408:	f7ff f893 	bl	8001532 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800240c:	e02b      	b.n	8002466 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	@ (8002498 <HAL_ADC_ConfigChannel+0x788>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d126      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x756>
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800241c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d120      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a16      	ldr	r2, [pc, #88]	@ (8002484 <HAL_ADC_ConfigChannel+0x774>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d11b      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800242e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002436:	4619      	mov	r1, r3
 8002438:	4811      	ldr	r0, [pc, #68]	@ (8002480 <HAL_ADC_ConfigChannel+0x770>)
 800243a:	f7ff f87a 	bl	8001532 <LL_ADC_SetCommonPathInternalCh>
 800243e:	e012      	b.n	8002466 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002452:	e008      	b.n	8002466 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800246e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002472:	4618      	mov	r0, r3
 8002474:	37d8      	adds	r7, #216	@ 0xd8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	80080000 	.word	0x80080000
 8002480:	50040300 	.word	0x50040300
 8002484:	50040000 	.word	0x50040000
 8002488:	c7520000 	.word	0xc7520000
 800248c:	20000008 	.word	0x20000008
 8002490:	053e2d63 	.word	0x053e2d63
 8002494:	cb840000 	.word	0xcb840000
 8002498:	80000001 	.word	0x80000001

0800249c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f9a7 	bl	8001800 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d15e      	bne.n	8002576 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <ADC_Enable+0xe4>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e04a      	b.n	8002578 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f976 	bl	80017d8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024ec:	4825      	ldr	r0, [pc, #148]	@ (8002584 <ADC_Enable+0xe8>)
 80024ee:	f7ff f833 	bl	8001558 <LL_ADC_GetCommonPathInternalCh>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00f      	beq.n	800251c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <ADC_Enable+0xec>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	4a22      	ldr	r2, [pc, #136]	@ (800258c <ADC_Enable+0xf0>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800250e:	e002      	b.n	8002516 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3b01      	subs	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800251c:	f7fe ffd2 	bl	80014c4 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002522:	e021      	b.n	8002568 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f969 	bl	8001800 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f94d 	bl	80017d8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800253e:	f7fe ffc1 	bl	80014c4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d90d      	bls.n	8002568 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e007      	b.n	8002578 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d1d6      	bne.n	8002524 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	8000003f 	.word	0x8000003f
 8002584:	50040300 	.word	0x50040300
 8002588:	20000008 	.word	0x20000008
 800258c:	053e2d63 	.word	0x053e2d63

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	@ (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	@ (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	@ (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026fc:	d301      	bcc.n	8002702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002702:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <SysTick_Config+0x40>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270a:	210f      	movs	r1, #15
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f7ff ff8e 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <SysTick_Config+0x40>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <SysTick_Config+0x40>)
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	e000e010 	.word	0xe000e010

08002730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff29 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff40 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff90 	bl	8002684 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5f 	bl	8002630 <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff33 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa4 	bl	80026ec <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e04f      	b.n	8002860 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d008      	beq.n	80027de <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2204      	movs	r2, #4
 80027d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e040      	b.n	8002860 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 020e 	bic.w	r2, r2, #14
 80027ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f003 021c 	and.w	r2, r3, #28
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800282a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002842:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800284c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d005      	beq.n	8002890 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2204      	movs	r2, #4
 8002888:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	e047      	b.n	8002920 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 020e 	bic.w	r2, r2, #14
 800289e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	f003 021c 	and.w	r2, r3, #28
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    }
  }
  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293a:	e14c      	b.n	8002bd6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 813e 	beq.w	8002bd0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d005      	beq.n	800296c <HAL_GPIO_Init+0x40>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d130      	bne.n	80029ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029a2:	2201      	movs	r2, #1
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0201 	and.w	r2, r3, #1
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d017      	beq.n	8002a0a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d123      	bne.n	8002a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	08da      	lsrs	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3208      	adds	r2, #8
 8002a58:	6939      	ldr	r1, [r7, #16]
 8002a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	2203      	movs	r2, #3
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0203 	and.w	r2, r3, #3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8098 	beq.w	8002bd0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002aa0:	4a54      	ldr	r2, [pc, #336]	@ (8002bf4 <HAL_GPIO_Init+0x2c8>)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aca:	d019      	beq.n	8002b00 <HAL_GPIO_Init+0x1d4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf8 <HAL_GPIO_Init+0x2cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x1d0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a49      	ldr	r2, [pc, #292]	@ (8002bfc <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1cc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a48      	ldr	r2, [pc, #288]	@ (8002c00 <HAL_GPIO_Init+0x2d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1c8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a47      	ldr	r2, [pc, #284]	@ (8002c04 <HAL_GPIO_Init+0x2d8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1c4>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e008      	b.n	8002b02 <HAL_GPIO_Init+0x1d6>
 8002af0:	2307      	movs	r3, #7
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1d6>
 8002af4:	2303      	movs	r3, #3
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1d6>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1d6>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1d6>
 8002b00:	2300      	movs	r3, #0
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b12:	4938      	ldr	r1, [pc, #224]	@ (8002bf4 <HAL_GPIO_Init+0x2c8>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b20:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b44:	4a30      	ldr	r2, [pc, #192]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b6e:	4a26      	ldr	r2, [pc, #152]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f aeab 	bne.w	800293c <HAL_GPIO_Init+0x10>
  }
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	48000400 	.word	0x48000400
 8002bfc:	48000800 	.word	0x48000800
 8002c00:	48000c00 	.word	0x48000c00
 8002c04:	48001000 	.word	0x48001000
 8002c08:	58000800 	.word	0x58000800

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43d9      	mvns	r1, r3
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <HAL_HSEM_IRQHandler+0x30>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <HAL_HSEM_IRQHandler+0x30>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4906      	ldr	r1, [pc, #24]	@ (8002ca0 <HAL_HSEM_IRQHandler+0x30>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_HSEM_IRQHandler+0x30>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f807 	bl	8002ca4 <HAL_HSEM_FreeCallback>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	58001500 	.word	0x58001500

08002ca4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e08d      	b.n	8002de6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe f8ba 	bl	8000e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	@ 0x24
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e006      	b.n	8002d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d108      	bne.n	8002d5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	e007      	b.n	8002d6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69d9      	ldr	r1, [r3, #28]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d138      	bne.n	8002e76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e032      	b.n	8002e78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2224      	movs	r2, #36	@ 0x24
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d139      	bne.n	8002f0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e033      	b.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	@ 0x24
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ed6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01e      	beq.n	8002f6c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <HAL_IPCC_Init+0x60>)
 8002f30:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd ffd2 	bl	8000ee8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002f44:	68b8      	ldr	r0, [r7, #8]
 8002f46:	f000 f85b 	bl	8003000 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f82c 	bl	8002fb4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002f6a:	e001      	b.n	8002f70 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	58000c00 	.word	0x58000c00

08002f80 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e00f      	b.n	8002fe2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff8 <IPCC_SetDefaultCallbacks+0x44>)
 8002fcc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3306      	adds	r3, #6
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a08      	ldr	r2, [pc, #32]	@ (8002ffc <IPCC_SetDefaultCallbacks+0x48>)
 8002fda:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d9ec      	bls.n	8002fc2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	08002f81 	.word	0x08002f81
 8002ffc:	08002f9b 	.word	0x08002f9b

08003000 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003014:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223f      	movs	r2, #63	@ 0x3f
 800301a:	609a      	str	r2, [r3, #8]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	58000400 	.word	0x58000400

08003048 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <HAL_PWREx_GetVoltageRange+0x18>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	58000400 	.word	0x58000400

08003064 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003076:	d101      	bne.n	800307c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_RCC_HSE_Enable>:
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_HSE_Disable>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_RCC_HSE_IsReady>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030d6:	d101      	bne.n	80030dc <LL_RCC_HSE_IsReady+0x18>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <LL_RCC_HSE_IsReady+0x1a>
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_RCC_HSI_Enable>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_RCC_HSI_Disable>:
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_HSI_IsReady>:
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003136:	d101      	bne.n	800313c <LL_RCC_HSI_IsReady+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_RCC_HSI_IsReady+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_RCC_HSI48_Enable>:
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_RCC_HSI48_Disable>:
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_RCC_HSI48_IsReady>:
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d101      	bne.n	80031ce <LL_RCC_HSI48_IsReady+0x18>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <LL_RCC_HSI48_IsReady+0x1a>
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_RCC_LSE_Enable>:
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_RCC_LSE_Disable>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_RCC_LSE_EnableBypass>:
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_RCC_LSE_DisableBypass>:
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_RCC_LSE_IsReady>:
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d101      	bne.n	800327a <LL_RCC_LSE_IsReady+0x18>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <LL_RCC_LSE_IsReady+0x1a>
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_RCC_LSI1_Enable>:
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003292:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_RCC_LSI1_Disable>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_RCC_LSI1_IsReady>:
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d101      	bne.n	80032e2 <LL_RCC_LSI1_IsReady+0x18>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_RCC_LSI1_IsReady+0x1a>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_RCC_LSI2_Enable>:
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_RCC_LSI2_Disable>:
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_LSI2_IsReady>:
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b08      	cmp	r3, #8
 8003344:	d101      	bne.n	800334a <LL_RCC_LSI2_IsReady+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_RCC_LSI2_IsReady+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_RCC_LSI2_SetTrimming>:
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003366:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_RCC_MSI_Enable>:
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_RCC_MSI_Disable>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6013      	str	r3, [r2, #0]
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_RCC_MSI_IsReady>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d101      	bne.n	80033d6 <LL_RCC_MSI_IsReady+0x16>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <LL_RCC_MSI_IsReady+0x18>
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_RCC_MSI_SetRange>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <LL_RCC_MSI_GetRange>:
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800341a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003420:	d901      	bls.n	8003426 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003422:	23b0      	movs	r3, #176	@ 0xb0
 8003424:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003426:	687b      	ldr	r3, [r7, #4]
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800343c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_RCC_SetSysClkSource>:
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 0203 	bic.w	r2, r3, #3
 8003470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_RCC_GetSysClkSource>:
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_RCC_SetAHBPrescaler>:
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80034ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_RCC_SetAHB4Prescaler>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003502:	f023 020f 	bic.w	r2, r3, #15
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_SetAPB1Prescaler>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_SetAPB2Prescaler>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800355a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_RCC_GetAHBPrescaler>:
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_GetAHB4Prescaler>:
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003590:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800359a:	4618      	mov	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_RCC_GetAPB1Prescaler>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_RCC_GetAPB2Prescaler>:
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003622:	d101      	bne.n	8003628 <LL_RCC_PLL_IsReady+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_RCC_PLL_IsReady+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0303 	and.w	r3, r3, #3
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	d101      	bne.n	80036ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ce:	d101      	bne.n	80036d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80036ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d101      	bne.n	80036fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003718:	d101      	bne.n	800371e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003738:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373c:	d101      	bne.n	8003742 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b08d      	sub	sp, #52	@ 0x34
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e363      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 808d 	beq.w	800388a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003770:	f7ff fe89 	bl	8003486 <LL_RCC_GetSysClkSource>
 8003774:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003776:	f7ff ff82 	bl	800367e <LL_RCC_PLL_GetMainSource>
 800377a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_RCC_OscConfig+0x3e>
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d147      	bne.n	8003818 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	2b01      	cmp	r3, #1
 800378c:	d144      	bne.n	8003818 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e347      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800379e:	f7ff fe34 	bl	800340a <LL_RCC_MSI_GetRange>
 80037a2:	4603      	mov	r3, r0
 80037a4:	429c      	cmp	r4, r3
 80037a6:	d914      	bls.n	80037d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fd2f 	bl	8004210 <RCC_SetFlashLatencyFromMSIRange>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e336      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fe0e 	bl	80033e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fe32 	bl	8003434 <LL_RCC_MSI_SetCalibTrimming>
 80037d0:	e013      	b.n	80037fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fe03 	bl	80033e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fe27 	bl	8003434 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd10 	bl	8004210 <RCC_SetFlashLatencyFromMSIRange>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e317      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80037fa:	f000 fcc9 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80037fe:	4603      	mov	r3, r0
 8003800:	4aa4      	ldr	r2, [pc, #656]	@ (8003a94 <HAL_RCC_OscConfig+0x344>)
 8003802:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003804:	4ba4      	ldr	r3, [pc, #656]	@ (8003a98 <HAL_RCC_OscConfig+0x348>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fe0d 	bl	8001428 <HAL_InitTick>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d039      	beq.n	8003888 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e308      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01e      	beq.n	800385e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003820:	f7ff fdb0 	bl	8003384 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003824:	f7fd fe4e 	bl	80014c4 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800382c:	f7fd fe4a 	bl	80014c4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e2f5      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800383e:	f7ff fdbf 	bl	80033c0 <LL_RCC_MSI_IsReady>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f1      	beq.n	800382c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fdc8 	bl	80033e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fdec 	bl	8003434 <LL_RCC_MSI_SetCalibTrimming>
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800385e:	f7ff fda0 	bl	80033a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003862:	f7fd fe2f 	bl	80014c4 <HAL_GetTick>
 8003866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800386a:	f7fd fe2b 	bl	80014c4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e2d6      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800387c:	f7ff fda0 	bl	80033c0 <LL_RCC_MSI_IsReady>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f1      	bne.n	800386a <HAL_RCC_OscConfig+0x11a>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003888:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d047      	beq.n	8003926 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	f7ff fdf6 	bl	8003486 <LL_RCC_GetSysClkSource>
 800389a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	f7ff feef 	bl	800367e <LL_RCC_PLL_GetMainSource>
 80038a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x164>
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d108      	bne.n	80038c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d134      	bne.n	8003926 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e2b4      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x180>
 80038ca:	f7ff fbdd 	bl	8003088 <LL_RCC_HSE_Enable>
 80038ce:	e001      	b.n	80038d4 <HAL_RCC_OscConfig+0x184>
 80038d0:	f7ff fbe9 	bl	80030a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fdf2 	bl	80014c4 <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd fdee 	bl	80014c4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	@ 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e299      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80038f6:	f7ff fbe5 	bl	80030c4 <LL_RCC_HSE_IsReady>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f1      	beq.n	80038e4 <HAL_RCC_OscConfig+0x194>
 8003900:	e011      	b.n	8003926 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd fddf 	bl	80014c4 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390a:	f7fd fddb 	bl	80014c4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	@ 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e286      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800391c:	f7ff fbd2 	bl	80030c4 <LL_RCC_HSE_IsReady>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f1      	bne.n	800390a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04c      	beq.n	80039cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003932:	f7ff fda8 	bl	8003486 <LL_RCC_GetSysClkSource>
 8003936:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003938:	f7ff fea1 	bl	800367e <LL_RCC_PLL_GetMainSource>
 800393c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d005      	beq.n	8003950 <HAL_RCC_OscConfig+0x200>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d10e      	bne.n	8003968 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d10b      	bne.n	8003968 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e266      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fbf1 	bl	8003148 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003966:	e031      	b.n	80039cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d019      	beq.n	80039a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	f7ff fbba 	bl	80030e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fda6 	bl	80014c4 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397c:	f7fd fda2 	bl	80014c4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e24d      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800398e:	f7ff fbc9 	bl	8003124 <LL_RCC_HSI_IsReady>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f1      	beq.n	800397c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fbd3 	bl	8003148 <LL_RCC_HSI_SetCalibTrimming>
 80039a2:	e013      	b.n	80039cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a4:	f7ff fbaf 	bl	8003106 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fd8c 	bl	80014c4 <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fd fd88 	bl	80014c4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e233      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80039c2:	f7ff fbaf 	bl	8003124 <LL_RCC_HSI_IsReady>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f1      	bne.n	80039b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a3 	beq.w	8003b2c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d076      	beq.n	8003adc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d046      	beq.n	8003a88 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80039fa:	f7ff fc66 	bl	80032ca <LL_RCC_LSI1_IsReady>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d113      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003a04:	f7ff fc3f 	bl	8003286 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a08:	f7fd fd5c 	bl	80014c4 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a10:	f7fd fd58 	bl	80014c4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e203      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003a22:	f7ff fc52 	bl	80032ca <LL_RCC_LSI1_IsReady>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f1      	beq.n	8003a10 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003a2c:	f7ff fc5f 	bl	80032ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fd48 	bl	80014c4 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a38:	f7fd fd44 	bl	80014c4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1ef      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a4a:	f7ff fc72 	bl	8003332 <LL_RCC_LSI2_IsReady>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f1      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fc7c 	bl	8003356 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003a5e:	f7ff fc23 	bl	80032a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd fd2f 	bl	80014c4 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a6a:	f7fd fd2b 	bl	80014c4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1d6      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003a7c:	f7ff fc25 	bl	80032ca <LL_RCC_LSI1_IsReady>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f1      	bne.n	8003a6a <HAL_RCC_OscConfig+0x31a>
 8003a86:	e051      	b.n	8003b2c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003a88:	f7ff fbfd 	bl	8003286 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fd1a 	bl	80014c4 <HAL_GetTick>
 8003a90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003a92:	e00c      	b.n	8003aae <HAL_RCC_OscConfig+0x35e>
 8003a94:	20000008 	.word	0x20000008
 8003a98:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a9c:	f7fd fd12 	bl	80014c4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1bd      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003aae:	f7ff fc0c 	bl	80032ca <LL_RCC_LSI1_IsReady>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f1      	beq.n	8003a9c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003ab8:	f7ff fc2a 	bl	8003310 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003abe:	f7fd fd01 	bl	80014c4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1ac      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003ad0:	f7ff fc2f 	bl	8003332 <LL_RCC_LSI2_IsReady>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f1      	bne.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003ada:	e027      	b.n	8003b2c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003adc:	f7ff fc18 	bl	8003310 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fd fcf0 	bl	80014c4 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ae8:	f7fd fcec 	bl	80014c4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e197      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003afa:	f7ff fc1a 	bl	8003332 <LL_RCC_LSI2_IsReady>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f1      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003b04:	f7ff fbd0 	bl	80032a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd fcdc 	bl	80014c4 <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003b10:	f7fd fcd8 	bl	80014c4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e183      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003b22:	f7ff fbd2 	bl	80032ca <LL_RCC_LSI1_IsReady>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f1      	bne.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05b      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b38:	4ba7      	ldr	r3, [pc, #668]	@ (8003dd8 <HAL_RCC_OscConfig+0x688>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d114      	bne.n	8003b6e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b44:	f7ff fa70 	bl	8003028 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b48:	f7fd fcbc 	bl	80014c4 <HAL_GetTick>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b50:	f7fd fcb8 	bl	80014c4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e163      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b62:	4b9d      	ldr	r3, [pc, #628]	@ (8003dd8 <HAL_RCC_OscConfig+0x688>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_OscConfig+0x42c>
 8003b76:	f7ff fb30 	bl	80031da <LL_RCC_LSE_Enable>
 8003b7a:	e00c      	b.n	8003b96 <HAL_RCC_OscConfig+0x446>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d104      	bne.n	8003b8e <HAL_RCC_OscConfig+0x43e>
 8003b84:	f7ff fb4b 	bl	800321e <LL_RCC_LSE_EnableBypass>
 8003b88:	f7ff fb27 	bl	80031da <LL_RCC_LSE_Enable>
 8003b8c:	e003      	b.n	8003b96 <HAL_RCC_OscConfig+0x446>
 8003b8e:	f7ff fb35 	bl	80031fc <LL_RCC_LSE_Disable>
 8003b92:	f7ff fb55 	bl	8003240 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d014      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fc91 	bl	80014c4 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd fc8d 	bl	80014c4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e136      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003bbc:	f7ff fb51 	bl	8003262 <LL_RCC_LSE_IsReady>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x456>
 8003bc6:	e013      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fc7c 	bl	80014c4 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7fd fc78 	bl	80014c4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e121      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003be6:	f7ff fb3c 	bl	8003262 <LL_RCC_LSE_IsReady>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ef      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d014      	beq.n	8003c2e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c04:	f7ff fab5 	bl	8003172 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fc5c 	bl	80014c4 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c10:	f7fd fc58 	bl	80014c4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e103      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003c22:	f7ff fac8 	bl	80031b6 <LL_RCC_HSI48_IsReady>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f1      	beq.n	8003c10 <HAL_RCC_OscConfig+0x4c0>
 8003c2c:	e013      	b.n	8003c56 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c2e:	f7ff fab1 	bl	8003194 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd fc47 	bl	80014c4 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c3a:	f7fd fc43 	bl	80014c4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0ee      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c4c:	f7ff fab3 	bl	80031b6 <LL_RCC_HSI48_IsReady>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f1      	bne.n	8003c3a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80e4 	beq.w	8003e28 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c60:	f7ff fc11 	bl	8003486 <LL_RCC_GetSysClkSource>
 8003c64:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	f040 80b4 	bne.w	8003de0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0203 	and.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d123      	bne.n	8003cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d11c      	bne.n	8003cce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d114      	bne.n	8003cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d10d      	bne.n	8003cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d05d      	beq.n	8003d8a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d058      	beq.n	8003d86 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0a1      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ce6:	f7ff fc84 	bl	80035f2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cea:	f7fd fbeb 	bl	80014c4 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fd fbe7 	bl	80014c4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e092      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ef      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	4b30      	ldr	r3, [pc, #192]	@ (8003ddc <HAL_RCC_OscConfig+0x68c>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d24:	4311      	orrs	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d2a:	0212      	lsls	r2, r2, #8
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d48:	f7ff fc44 	bl	80035d4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d5c:	f7fd fbb2 	bl	80014c4 <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd fbae 	bl	80014c4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e059      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d84:	e050      	b.n	8003e28 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d147      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d98:	f7ff fc1c 	bl	80035d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dac:	f7fd fb8a 	bl	80014c4 <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fb86 	bl	80014c4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e031      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <HAL_RCC_OscConfig+0x664>
 8003dd4:	e028      	b.n	8003e28 <HAL_RCC_OscConfig+0x6d8>
 8003dd6:	bf00      	nop
 8003dd8:	58000400 	.word	0x58000400
 8003ddc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d01e      	beq.n	8003e24 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	f7ff fc04 	bl	80035f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd fb6b 	bl	80014c4 <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fd fb67 	bl	80014c4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e012      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ef      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_OscConfig+0x6e4>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	60cb      	str	r3, [r1, #12]
 8003e22:	e001      	b.n	8003e28 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3734      	adds	r7, #52	@ 0x34
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd90      	pop	{r4, r7, pc}
 8003e32:	bf00      	nop
 8003e34:	eefefffc 	.word	0xeefefffc

08003e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e12d      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b98      	ldr	r3, [pc, #608]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d91b      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b95      	ldr	r3, [pc, #596]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	4993      	ldr	r1, [pc, #588]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6a:	f7fd fb2b 	bl	80014c4 <HAL_GetTick>
 8003e6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e72:	f7fd fb27 	bl	80014c4 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e111      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e84:	4b8a      	ldr	r3, [pc, #552]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d1ef      	bne.n	8003e72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fafb 	bl	800349e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fb0c 	bl	80014c4 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eb0:	f7fd fb08 	bl	80014c4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0f2      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003ec2:	f7ff fbe8 	bl	8003696 <LL_RCC_IsActiveFlag_HPRE>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f1      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d016      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff faf2 	bl	80034c6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd faef 	bl	80014c4 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eea:	f7fd faeb 	bl	80014c4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e0d5      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003efc:	f7ff fbdd 	bl	80036ba <LL_RCC_IsActiveFlag_C2HPRE>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f1      	beq.n	8003eea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff faeb 	bl	80034f2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fad2 	bl	80014c4 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f24:	f7fd face 	bl	80014c4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e0b8      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f36:	f7ff fbd3 	bl	80036e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f1      	beq.n	8003f24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d016      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fae5 	bl	8003520 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f56:	f7fd fab5 	bl	80014c4 <HAL_GetTick>
 8003f5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f5e:	f7fd fab1 	bl	80014c4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e09b      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003f70:	f7ff fbc9 	bl	8003706 <LL_RCC_IsActiveFlag_PPRE1>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f1      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d017      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fadb 	bl	8003548 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f92:	f7fd fa97 	bl	80014c4 <HAL_GetTick>
 8003f96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f9a:	f7fd fa93 	bl	80014c4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e07d      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003fac:	f7ff fbbd 	bl	800372a <LL_RCC_IsActiveFlag_PPRE2>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f1      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d043      	beq.n	800404a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003fca:	f7ff f87b 	bl	80030c4 <LL_RCC_HSE_IsReady>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11e      	bne.n	8004012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e067      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003fe0:	f7ff fb16 	bl	8003610 <LL_RCC_PLL_IsReady>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d113      	bne.n	8004012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e05c      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003ff6:	f7ff f9e3 	bl	80033c0 <LL_RCC_MSI_IsReady>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d108      	bne.n	8004012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e051      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004004:	f7ff f88e 	bl	8003124 <LL_RCC_HSI_IsReady>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e04a      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fa21 	bl	800345e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fd fa52 	bl	80014c4 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fd fa4e 	bl	80014c4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e036      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	f7ff fa24 	bl	8003486 <LL_RCC_GetSysClkSource>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	429a      	cmp	r2, r3
 8004048:	d1ec      	bne.n	8004024 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404a:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d21b      	bcs.n	8004090 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 0207 	bic.w	r2, r3, #7
 8004060:	4913      	ldr	r1, [pc, #76]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004068:	f7fd fa2c 	bl	80014c4 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	e008      	b.n	8004082 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004070:	f7fd fa28 	bl	80014c4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e012      	b.n	80040a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_ClockConfig+0x278>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d1ef      	bne.n	8004070 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004090:	f000 f87e 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 8004094:	4603      	mov	r3, r0
 8004096:	4a07      	ldr	r2, [pc, #28]	@ (80040b4 <HAL_RCC_ClockConfig+0x27c>)
 8004098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800409a:	f7fd fa1f 	bl	80014dc <HAL_GetTickPrio>
 800409e:	4603      	mov	r3, r0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f9c1 	bl	8001428 <HAL_InitTick>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	58004000 	.word	0x58004000
 80040b4:	20000008 	.word	0x20000008

080040b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	f7ff f9e2 	bl	8003486 <LL_RCC_GetSysClkSource>
 80040c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80040ca:	f7ff f99e 	bl	800340a <LL_RCC_MSI_GetRange>
 80040ce:	4603      	mov	r3, r0
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004184 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e04b      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d102      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040e6:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e045      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d10a      	bne.n	8004108 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040f2:	f7fe ffb7 	bl	8003064 <LL_RCC_HSE_IsEnabledDiv2>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d102      	bne.n	8004102 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80040fc:	4b22      	ldr	r3, [pc, #136]	@ (8004188 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e03a      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004102:	4b22      	ldr	r3, [pc, #136]	@ (800418c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e037      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004108:	f7ff fab9 	bl	800367e <LL_RCC_PLL_GetMainSource>
 800410c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d003      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x64>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x6a>
 800411a:	e00d      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <HAL_RCC_GetSysClockFreq+0xd0>)
 800411e:	60bb      	str	r3, [r7, #8]
        break;
 8004120:	e015      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004122:	f7fe ff9f 	bl	8003064 <LL_RCC_HSE_IsEnabledDiv2>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800412c:	4b16      	ldr	r3, [pc, #88]	@ (8004188 <HAL_RCC_GetSysClockFreq+0xd0>)
 800412e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004130:	e00d      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004132:	4b16      	ldr	r3, [pc, #88]	@ (800418c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004134:	60bb      	str	r3, [r7, #8]
        break;
 8004136:	e00a      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004138:	f7ff f967 	bl	800340a <LL_RCC_MSI_GetRange>
 800413c:	4603      	mov	r3, r0
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414a:	60bb      	str	r3, [r7, #8]
        break;
 800414c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800414e:	f7ff fa71 	bl	8003634 <LL_RCC_PLL_GetN>
 8004152:	4602      	mov	r2, r0
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	fb03 f402 	mul.w	r4, r3, r2
 800415a:	f7ff fa84 	bl	8003666 <LL_RCC_PLL_GetDivider>
 800415e:	4603      	mov	r3, r0
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	3301      	adds	r3, #1
 8004164:	fbb4 f4f3 	udiv	r4, r4, r3
 8004168:	f7ff fa71 	bl	800364e <LL_RCC_PLL_GetR>
 800416c:	4603      	mov	r3, r0
 800416e:	0f5b      	lsrs	r3, r3, #29
 8004170:	3301      	adds	r3, #1
 8004172:	fbb4 f3f3 	udiv	r3, r4, r3
 8004176:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bd90      	pop	{r4, r7, pc}
 8004182:	bf00      	nop
 8004184:	080086e8 	.word	0x080086e8
 8004188:	00f42400 	.word	0x00f42400
 800418c:	01e84800 	.word	0x01e84800

08004190 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004190:	b598      	push	{r3, r4, r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004194:	f7ff ff90 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8004198:	4604      	mov	r4, r0
 800419a:	f7ff f9e9 	bl	8003570 <LL_RCC_GetAHBPrescaler>
 800419e:	4603      	mov	r3, r0
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	4a03      	ldr	r2, [pc, #12]	@ (80041b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd98      	pop	{r3, r4, r7, pc}
 80041b4:	08008688 	.word	0x08008688

080041b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b8:	b598      	push	{r3, r4, r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041bc:	f7ff ffe8 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041c0:	4604      	mov	r4, r0
 80041c2:	f7ff f9ef 	bl	80035a4 <LL_RCC_GetAPB1Prescaler>
 80041c6:	4603      	mov	r3, r0
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd98      	pop	{r3, r4, r7, pc}
 80041e0:	080086c8 	.word	0x080086c8

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b598      	push	{r3, r4, r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80041e8:	f7ff ffd2 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041ec:	4604      	mov	r4, r0
 80041ee:	f7ff f9e5 	bl	80035bc <LL_RCC_GetAPB2Prescaler>
 80041f2:	4603      	mov	r3, r0
 80041f4:	0adb      	lsrs	r3, r3, #11
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	4a04      	ldr	r2, [pc, #16]	@ (800420c <HAL_RCC_GetPCLK2Freq+0x28>)
 80041fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd98      	pop	{r3, r4, r7, pc}
 800420c:	080086c8 	.word	0x080086c8

08004210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2bb0      	cmp	r3, #176	@ 0xb0
 800421c:	d903      	bls.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	e007      	b.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004234:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004236:	f7ff f9a7 	bl	8003588 <LL_RCC_GetAHB4Prescaler>
 800423a:	4603      	mov	r3, r0
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	4a0d      	ldr	r2, [pc, #52]	@ (8004278 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	0c9c      	lsrs	r4, r3, #18
 800425a:	f7fe fef5 	bl	8003048 <HAL_PWREx_GetVoltageRange>
 800425e:	4603      	mov	r3, r0
 8004260:	4619      	mov	r1, r3
 8004262:	4620      	mov	r0, r4
 8004264:	f000 f80c 	bl	8004280 <RCC_SetFlashLatency>
 8004268:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	bf00      	nop
 8004274:	080086e8 	.word	0x080086e8
 8004278:	08008688 	.word	0x08008688
 800427c:	431bde83 	.word	0x431bde83

08004280 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b093      	sub	sp, #76	@ 0x4c
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800428a:	4b37      	ldr	r3, [pc, #220]	@ (8004368 <RCC_SetFlashLatency+0xe8>)
 800428c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004296:	4a35      	ldr	r2, [pc, #212]	@ (800436c <RCC_SetFlashLatency+0xec>)
 8004298:	f107 031c 	add.w	r3, r7, #28
 800429c:	ca07      	ldmia	r2, {r0, r1, r2}
 800429e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80042a2:	4b33      	ldr	r3, [pc, #204]	@ (8004370 <RCC_SetFlashLatency+0xf0>)
 80042a4:	f107 040c 	add.w	r4, r7, #12
 80042a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80042ae:	2300      	movs	r3, #0
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b8:	d11a      	bne.n	80042f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042be:	e013      	b.n	80042e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80042c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	3348      	adds	r3, #72	@ 0x48
 80042c6:	443b      	add	r3, r7
 80042c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d807      	bhi.n	80042e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80042d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	3348      	adds	r3, #72	@ 0x48
 80042d8:	443b      	add	r3, r7
 80042da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80042de:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80042e0:	e020      	b.n	8004324 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80042e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e4:	3301      	adds	r3, #1
 80042e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80042e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d9e8      	bls.n	80042c0 <RCC_SetFlashLatency+0x40>
 80042ee:	e019      	b.n	8004324 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042f4:	e013      	b.n	800431e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80042f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3348      	adds	r3, #72	@ 0x48
 80042fc:	443b      	add	r3, r7
 80042fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d807      	bhi.n	8004318 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	3348      	adds	r3, #72	@ 0x48
 800430e:	443b      	add	r3, r7
 8004310:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004316:	e005      	b.n	8004324 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431a:	3301      	adds	r3, #1
 800431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800431e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004320:	2b02      	cmp	r3, #2
 8004322:	d9e8      	bls.n	80042f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004324:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <RCC_SetFlashLatency+0xf4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 0207 	bic.w	r2, r3, #7
 800432c:	4911      	ldr	r1, [pc, #68]	@ (8004374 <RCC_SetFlashLatency+0xf4>)
 800432e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004334:	f7fd f8c6 	bl	80014c4 <HAL_GetTick>
 8004338:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800433a:	e008      	b.n	800434e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800433c:	f7fd f8c2 	bl	80014c4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e007      	b.n	800435e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800434e:	4b09      	ldr	r3, [pc, #36]	@ (8004374 <RCC_SetFlashLatency+0xf4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004358:	429a      	cmp	r2, r3
 800435a:	d1ef      	bne.n	800433c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	374c      	adds	r7, #76	@ 0x4c
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}
 8004366:	bf00      	nop
 8004368:	0800865c 	.word	0x0800865c
 800436c:	0800866c 	.word	0x0800866c
 8004370:	08008678 	.word	0x08008678
 8004374:	58004000 	.word	0x58004000

08004378 <LL_RCC_LSE_IsEnabled>:
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <LL_RCC_LSE_IsEnabled+0x18>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <LL_RCC_LSE_IsEnabled+0x1a>
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_RCC_LSE_IsReady>:
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d101      	bne.n	80043b4 <LL_RCC_LSE_IsReady+0x18>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <LL_RCC_LSE_IsReady+0x1a>
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_SetRFWKPClockSource>:
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_SetSMPSClockSource>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4313      	orrs	r3, r2
 8004406:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_RCC_SetSMPSPrescaler>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4313      	orrs	r3, r2
 800442e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_RCC_SetUSARTClockSource>:
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	f023 0203 	bic.w	r2, r3, #3
 8004450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_RCC_SetLPUARTClockSource>:
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800447c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_RCC_SetI2CClockSource>:
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800449c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80044b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_SetLPTIMClockSource>:
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80044d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_RCC_SetSAIClockSource>:
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_RCC_SetRNGClockSource>:
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_RCC_SetCLK48ClockSource>:
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800456e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_RCC_SetUSBClockSource>:
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ffe3 	bl	800455a <LL_RCC_SetCLK48ClockSource>
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <LL_RCC_SetADCClockSource>:
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_SetRTCClockSource>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80045d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_RCC_GetRTCClockSource>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80045f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_ForceBackupDomainReset>:
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800461e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <LL_RCC_PLLSAI1_Enable>:
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_RCC_PLLSAI1_Disable>:
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800467e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004682:	6013      	str	r3, [r2, #0]
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_RCC_PLLSAI1_IsReady>:
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800469c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a0:	d101      	bne.n	80046a6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80046ba:	2300      	movs	r3, #0
 80046bc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80046be:	2300      	movs	r3, #0
 80046c0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d034      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046d6:	d021      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80046d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046dc:	d81b      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046e2:	d01d      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80046e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046e8:	d815      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80046ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f2:	d110      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004702:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004704:	e00d      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f947 	bl	800499e <RCCEx_PLLSAI1_ConfigNP>
 8004710:	4603      	mov	r3, r0
 8004712:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004714:	e005      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	77fb      	strb	r3, [r7, #31]
        break;
 800471a:	e002      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d105      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fee8 	bl	8004502 <LL_RCC_SetSAIClockSource>
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7ffb      	ldrb	r3, [r7, #31]
 8004736:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004740:	2b00      	cmp	r3, #0
 8004742:	d046      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004744:	f7ff ff56 	bl	80045f4 <LL_RCC_GetRTCClockSource>
 8004748:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d03c      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004754:	f7fe fc68 	bl	8003028 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff30 	bl	80045c8 <LL_RCC_SetRTCClockSource>
 8004768:	e02e      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004774:	f7ff ff4b 	bl	800460e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004778:	f7ff ff5a 	bl	8004630 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800478a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004794:	f7ff fdf0 	bl	8004378 <LL_RCC_LSE_IsEnabled>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d114      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800479e:	f7fc fe91 	bl	80014c4 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80047a4:	e00b      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fc fe8d 	bl	80014c4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d902      	bls.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	77fb      	strb	r3, [r7, #31]
              break;
 80047bc:	e004      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80047be:	f7ff fded 	bl	800439c <LL_RCC_LSE_IsReady>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d1ee      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80047c8:	7ffb      	ldrb	r3, [r7, #31]
 80047ca:	77bb      	strb	r3, [r7, #30]
 80047cc:	e001      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	7ffb      	ldrb	r3, [r7, #31]
 80047d0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fe2a 	bl	800443c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fe35 	bl	8004468 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fe5d 	bl	80044ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fe52 	bl	80044ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fe2a 	bl	8004494 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fe1f 	bl	8004494 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d022      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fe8d 	bl	8004586 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004874:	d107      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004884:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800488e:	d10b      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f8dd 	bl	8004a54 <RCCEx_PLLSAI1_ConfigNQ>
 800489a:	4603      	mov	r3, r0
 800489c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800489e:	7ffb      	ldrb	r3, [r7, #31]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02b      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048bc:	d008      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fe2a 	bl	800452e <LL_RCC_SetRNGClockSource>
 80048da:	e00a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7ff fe21 	bl	800452e <LL_RCC_SetRNGClockSource>
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff fe34 	bl	800455a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80048fa:	d107      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80048fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d022      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fe3d 	bl	800459c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800492a:	d107      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004944:	d10b      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f8dd 	bl	8004b0a <RCCEx_PLLSAI1_ConfigNR>
 8004950:	4603      	mov	r3, r0
 8004952:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800495a:	7ffb      	ldrb	r3, [r7, #31]
 800495c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fd26 	bl	80043c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fd45 	bl	8004414 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fd2c 	bl	80043ec <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004994:	7fbb      	ldrb	r3, [r7, #30]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049aa:	f7ff fe61 	bl	8004670 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049ae:	f7fc fd89 	bl	80014c4 <HAL_GetTick>
 80049b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049b4:	e009      	b.n	80049ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b6:	f7fc fd85 	bl	80014c4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d902      	bls.n	80049ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e004      	b.n	80049d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049ca:	f7ff fe60 	bl	800468e <LL_RCC_PLLSAI1_IsReady>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d137      	bne.n	8004a4a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049ee:	4313      	orrs	r3, r2
 80049f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a04:	4313      	orrs	r3, r2
 8004a06:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a08:	f7ff fe23 	bl	8004652 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fc fd5a 	bl	80014c4 <HAL_GetTick>
 8004a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a12:	e009      	b.n	8004a28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a14:	f7fc fd56 	bl	80014c4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d902      	bls.n	8004a28 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	73fb      	strb	r3, [r7, #15]
        break;
 8004a26:	e004      	b.n	8004a32 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a28:	f7ff fe31 	bl	800468e <LL_RCC_PLLSAI1_IsReady>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d1f0      	bne.n	8004a14 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d108      	bne.n	8004a4a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a46:	4313      	orrs	r3, r2
 8004a48:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a60:	f7ff fe06 	bl	8004670 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a64:	f7fc fd2e 	bl	80014c4 <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a6a:	e009      	b.n	8004a80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a6c:	f7fc fd2a 	bl	80014c4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d902      	bls.n	8004a80 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7e:	e004      	b.n	8004a8a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a80:	f7ff fe05 	bl	800468e <LL_RCC_PLLSAI1_IsReady>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d137      	bne.n	8004b00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aba:	4313      	orrs	r3, r2
 8004abc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004abe:	f7ff fdc8 	bl	8004652 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac2:	f7fc fcff 	bl	80014c4 <HAL_GetTick>
 8004ac6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ac8:	e009      	b.n	8004ade <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aca:	f7fc fcfb 	bl	80014c4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d902      	bls.n	8004ade <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	73fb      	strb	r3, [r7, #15]
        break;
 8004adc:	e004      	b.n	8004ae8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ade:	f7ff fdd6 	bl	800468e <LL_RCC_PLLSAI1_IsReady>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d1f0      	bne.n	8004aca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004b16:	f7ff fdab 	bl	8004670 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b1a:	f7fc fcd3 	bl	80014c4 <HAL_GetTick>
 8004b1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b20:	e009      	b.n	8004b36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b22:	f7fc fccf 	bl	80014c4 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d902      	bls.n	8004b36 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	73fb      	strb	r3, [r7, #15]
      break;
 8004b34:	e004      	b.n	8004b40 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b36:	f7ff fdaa 	bl	800468e <LL_RCC_PLLSAI1_IsReady>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d137      	bne.n	8004bb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b74:	f7ff fd6d 	bl	8004652 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fc fca4 	bl	80014c4 <HAL_GetTick>
 8004b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b7e:	e009      	b.n	8004b94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b80:	f7fc fca0 	bl	80014c4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d902      	bls.n	8004b94 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	73fb      	strb	r3, [r7, #15]
        break;
 8004b92:	e004      	b.n	8004b9e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b94:	f7ff fd7b 	bl	800468e <LL_RCC_PLLSAI1_IsReady>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d1f0      	bne.n	8004b80 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d108      	bne.n	8004bb6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e09f      	b.n	8004d12 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc f9a2 	bl	8000f30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004bf4:	4b49      	ldr	r3, [pc, #292]	@ (8004d1c <HAL_RTC_Init+0x15c>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d07e      	beq.n	8004cfe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	22ca      	movs	r2, #202	@ 0xca
 8004c06:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2253      	movs	r2, #83	@ 0x53
 8004c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8ab 	bl	8004d6c <RTC_EnterInitMode>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	22ff      	movs	r2, #255	@ 0xff
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2204      	movs	r2, #4
 8004c28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e067      	b.n	8004d02 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c44:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68d2      	ldr	r2, [r2, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6919      	ldr	r1, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	041a      	lsls	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c90:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0203 	bic.w	r2, r2, #3
 8004ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d113      	bne.n	8004cf0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f829 	bl	8004d20 <HAL_RTC_WaitForSynchro>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	22ff      	movs	r2, #255	@ 0xff
 8004cda:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e010      	b.n	8004d12 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	22ff      	movs	r2, #255	@ 0xff
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	e001      	b.n	8004d02 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40002800 	.word	0x40002800

08004d20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004d38:	f7fc fbc4 	bl	80014c4 <HAL_GetTick>
 8004d3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d3e:	e009      	b.n	8004d54 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d40:	f7fc fbc0 	bl	80014c4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d4e:	d901      	bls.n	8004d54 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e007      	b.n	8004d64 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ee      	beq.n	8004d40 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d119      	bne.n	8004db6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d8c:	f7fc fb9a 	bl	80014c4 <HAL_GetTick>
 8004d90:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d92:	e009      	b.n	8004da8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d94:	f7fc fb96 	bl	80014c4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004da2:	d901      	bls.n	8004da8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e007      	b.n	8004db8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ee      	beq.n	8004d94 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e089      	b.n	8004eee <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	22ca      	movs	r2, #202	@ 0xca
 8004df0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2253      	movs	r2, #83	@ 0x53
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8004e08:	f7fc fb5c 	bl	80014c4 <HAL_GetTick>
 8004e0c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004e0e:	e015      	b.n	8004e3c <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e10:	f7fc fb58 	bl	80014c4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e1e:	d90d      	bls.n	8004e3c <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	22ff      	movs	r2, #255	@ 0xff
 8004e26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e058      	b.n	8004eee <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e2      	bne.n	8004e10 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e58:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004e5a:	f7fc fb33 	bl	80014c4 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004e60:	e015      	b.n	8004e8e <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e62:	f7fc fb2f 	bl	80014c4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e70:	d90d      	bls.n	8004e8e <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	22ff      	movs	r2, #255	@ 0xff
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e02f      	b.n	8004eee <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0e2      	beq.n	8004e62 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0207 	bic.w	r2, r2, #7
 8004eaa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ed2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	22ff      	movs	r2, #255	@ 0xff
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e049      	b.n	8004f9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d106      	bne.n	8004f22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fc f845 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4619      	mov	r1, r3
 8004f34:	4610      	mov	r0, r2
 8004f36:	f000 f9a1 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e049      	b.n	800504a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fb ffde 	bl	8000f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f000 f94a 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800506e:	2302      	movs	r3, #2
 8005070:	e0ff      	b.n	8005272 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b14      	cmp	r3, #20
 800507e:	f200 80f0 	bhi.w	8005262 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050dd 	.word	0x080050dd
 800508c:	08005263 	.word	0x08005263
 8005090:	08005263 	.word	0x08005263
 8005094:	08005263 	.word	0x08005263
 8005098:	0800511d 	.word	0x0800511d
 800509c:	08005263 	.word	0x08005263
 80050a0:	08005263 	.word	0x08005263
 80050a4:	08005263 	.word	0x08005263
 80050a8:	0800515f 	.word	0x0800515f
 80050ac:	08005263 	.word	0x08005263
 80050b0:	08005263 	.word	0x08005263
 80050b4:	08005263 	.word	0x08005263
 80050b8:	0800519f 	.word	0x0800519f
 80050bc:	08005263 	.word	0x08005263
 80050c0:	08005263 	.word	0x08005263
 80050c4:	08005263 	.word	0x08005263
 80050c8:	080051e1 	.word	0x080051e1
 80050cc:	08005263 	.word	0x08005263
 80050d0:	08005263 	.word	0x08005263
 80050d4:	08005263 	.word	0x08005263
 80050d8:	08005221 	.word	0x08005221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f93a 	bl	800535c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0208 	orr.w	r2, r2, #8
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0204 	bic.w	r2, r2, #4
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	619a      	str	r2, [r3, #24]
      break;
 800511a:	e0a5      	b.n	8005268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f996 	bl	8005454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	021a      	lsls	r2, r3, #8
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	619a      	str	r2, [r3, #24]
      break;
 800515c:	e084      	b.n	8005268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f9ef 	bl	8005548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0208 	orr.w	r2, r2, #8
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0204 	bic.w	r2, r2, #4
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	61da      	str	r2, [r3, #28]
      break;
 800519c:	e064      	b.n	8005268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fa47 	bl	8005638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69d9      	ldr	r1, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	021a      	lsls	r2, r3, #8
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	61da      	str	r2, [r3, #28]
      break;
 80051de:	e043      	b.n	8005268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fa84 	bl	80056f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0208 	orr.w	r2, r2, #8
 80051fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0204 	bic.w	r2, r2, #4
 800520a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800521e:	e023      	b.n	8005268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fabc 	bl	80057a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800524a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005260:	e002      	b.n	8005268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
      break;
 8005266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a30      	ldr	r2, [pc, #192]	@ (8005350 <TIM_Base_SetConfig+0xd4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0x20>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529a:	d108      	bne.n	80052ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a27      	ldr	r2, [pc, #156]	@ (8005350 <TIM_Base_SetConfig+0xd4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <TIM_Base_SetConfig+0x52>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052bc:	d007      	beq.n	80052ce <TIM_Base_SetConfig+0x52>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a24      	ldr	r2, [pc, #144]	@ (8005354 <TIM_Base_SetConfig+0xd8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_Base_SetConfig+0x52>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a23      	ldr	r2, [pc, #140]	@ (8005358 <TIM_Base_SetConfig+0xdc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d108      	bne.n	80052e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <TIM_Base_SetConfig+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_Base_SetConfig+0xa0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a11      	ldr	r2, [pc, #68]	@ (8005354 <TIM_Base_SetConfig+0xd8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0xa0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a10      	ldr	r2, [pc, #64]	@ (8005358 <TIM_Base_SetConfig+0xdc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d103      	bne.n	8005324 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]
  }
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f023 0201 	bic.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800538a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0302 	bic.w	r3, r3, #2
 80053a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a24      	ldr	r2, [pc, #144]	@ (8005448 <TIM_OC1_SetConfig+0xec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <TIM_OC1_SetConfig+0x70>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a23      	ldr	r2, [pc, #140]	@ (800544c <TIM_OC1_SetConfig+0xf0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC1_SetConfig+0x70>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <TIM_OC1_SetConfig+0xf4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10c      	bne.n	80053e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0308 	bic.w	r3, r3, #8
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_OC1_SetConfig+0xec>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_OC1_SetConfig+0xa2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <TIM_OC1_SetConfig+0xf4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC1_SetConfig+0xa2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <TIM_OC1_SetConfig+0xf0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d111      	bne.n	8005422 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40014800 	.word	0x40014800
 8005450:	40014400 	.word	0x40014400

08005454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0320 	bic.w	r3, r3, #32
 80054a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a22      	ldr	r2, [pc, #136]	@ (800553c <TIM_OC2_SetConfig+0xe8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d10d      	bne.n	80054d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a19      	ldr	r2, [pc, #100]	@ (800553c <TIM_OC2_SetConfig+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_OC2_SetConfig+0x98>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <TIM_OC2_SetConfig+0xec>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_OC2_SetConfig+0x98>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <TIM_OC2_SetConfig+0xf0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d113      	bne.n	8005514 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800

08005548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a21      	ldr	r2, [pc, #132]	@ (800562c <TIM_OC3_SetConfig+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10d      	bne.n	80055c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a18      	ldr	r2, [pc, #96]	@ (800562c <TIM_OC3_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <TIM_OC3_SetConfig+0x96>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a17      	ldr	r2, [pc, #92]	@ (8005630 <TIM_OC3_SetConfig+0xe8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_OC3_SetConfig+0x96>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <TIM_OC3_SetConfig+0xec>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d113      	bne.n	8005606 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <TIM_OC4_SetConfig+0xb0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_OC4_SetConfig+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a13      	ldr	r2, [pc, #76]	@ (80056ec <TIM_OC4_SetConfig+0xb4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC4_SetConfig+0x74>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <TIM_OC4_SetConfig+0xb8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a13      	ldr	r2, [pc, #76]	@ (8005798 <TIM_OC5_SetConfig+0xa4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_OC5_SetConfig+0x6a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a12      	ldr	r2, [pc, #72]	@ (800579c <TIM_OC5_SetConfig+0xa8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_OC5_SetConfig+0x6a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a11      	ldr	r2, [pc, #68]	@ (80057a0 <TIM_OC5_SetConfig+0xac>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d109      	bne.n	8005772 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	621a      	str	r2, [r3, #32]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800

080057a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	051b      	lsls	r3, r3, #20
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a14      	ldr	r2, [pc, #80]	@ (800584c <TIM_OC6_SetConfig+0xa8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_OC6_SetConfig+0x6c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a13      	ldr	r2, [pc, #76]	@ (8005850 <TIM_OC6_SetConfig+0xac>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC6_SetConfig+0x6c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a12      	ldr	r2, [pc, #72]	@ (8005854 <TIM_OC6_SetConfig+0xb0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d109      	bne.n	8005824 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800

08005858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e04a      	b.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1f      	ldr	r2, [pc, #124]	@ (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d108      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a12      	ldr	r2, [pc, #72]	@ (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d8:	d10c      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40012c00 	.word	0x40012c00

08005918 <LL_RCC_GetUSARTClockSource>:
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005924:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4013      	ands	r3, r2
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <LL_RCC_GetLPUARTClockSource>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005944:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4013      	ands	r3, r2
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e042      	b.n	80059f0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fb fb53 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2224      	movs	r2, #36	@ 0x24
 8005986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fe40 	bl	8006628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fc15 	bl	80061d8 <UART_SetConfig>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e01b      	b.n	80059f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 febf 	bl	800676c <UART_CheckIdleState>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	@ 0x28
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d17b      	bne.n	8005b0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_UART_Transmit+0x26>
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e074      	b.n	8005b0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2221      	movs	r2, #33	@ 0x21
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a32:	f7fb fd47 	bl	80014c4 <HAL_GetTick>
 8005a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a50:	d108      	bne.n	8005a64 <HAL_UART_Transmit+0x6c>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	e003      	b.n	8005a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a6c:	e030      	b.n	8005ad0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2180      	movs	r1, #128	@ 0x80
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 ff21 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e03d      	b.n	8005b0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10b      	bne.n	8005aae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e007      	b.n	8005abe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	3301      	adds	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1c8      	bne.n	8005a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2140      	movs	r1, #64	@ 0x40
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 feea 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e006      	b.n	8005b0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b0ba      	sub	sp, #232	@ 0xe8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b42:	4013      	ands	r3, r2
 8005b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11b      	bne.n	8005b88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d009      	beq.n	8005b88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8300 	beq.w	800617e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
      }
      return;
 8005b86:	e2fa      	b.n	800617e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8123 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b96:	4b8d      	ldr	r3, [pc, #564]	@ (8005dcc <HAL_UART_IRQHandler+0x2b8>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8005dd0 <HAL_UART_IRQHandler+0x2bc>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8116 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_UART_IRQHandler+0xc8>
 8005bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d011      	beq.n	8005c0c <HAL_UART_IRQHandler+0xf8>
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d011      	beq.n	8005c3c <HAL_UART_IRQHandler+0x128>
 8005c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	f043 0202 	orr.w	r2, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c58:	4b5c      	ldr	r3, [pc, #368]	@ (8005dcc <HAL_UART_IRQHandler+0x2b8>)
 8005c5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2208      	movs	r2, #8
 8005c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f043 0208 	orr.w	r2, r3, #8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d012      	beq.n	8005caa <HAL_UART_IRQHandler+0x196>
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8266 	beq.w	8006182 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d013      	beq.n	8005cea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	2b40      	cmp	r3, #64	@ 0x40
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d054      	beq.n	8005db8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fe43 	bl	800699a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b40      	cmp	r3, #64	@ 0x40
 8005d20:	d146      	bne.n	8005db0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1d9      	bne.n	8005d22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d017      	beq.n	8005da8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7e:	4a15      	ldr	r2, [pc, #84]	@ (8005dd4 <HAL_UART_IRQHandler+0x2c0>)
 8005d80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fc fd6f 	bl	800286c <HAL_DMA_Abort_IT>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d019      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005da2:	4610      	mov	r0, r2
 8005da4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da6:	e00f      	b.n	8005dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f9ff 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dae:	e00b      	b.n	8005dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f9fb 	bl	80061ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db6:	e007      	b.n	8005dc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f9f7 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005dc6:	e1dc      	b.n	8006182 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	bf00      	nop
    return;
 8005dca:	e1da      	b.n	8006182 <HAL_UART_IRQHandler+0x66e>
 8005dcc:	10000001 	.word	0x10000001
 8005dd0:	04000120 	.word	0x04000120
 8005dd4:	08006a67 	.word	0x08006a67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 8170 	bne.w	80060c2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8169 	beq.w	80060c2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8162 	beq.w	80060c2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	f040 80d8 	bne.w	8005fc6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80af 	beq.w	8005f8c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	f080 80a7 	bcs.w	8005f8c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f040 8087 	bne.w	8005f6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1da      	bne.n	8005e5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005eca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e1      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e3      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f38:	f023 0310 	bic.w	r3, r3, #16
 8005f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e4      	bne.n	8005f28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fc fc22 	bl	80027ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f91b 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f8a:	e0fc      	b.n	8006186 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f96:	429a      	cmp	r2, r3
 8005f98:	f040 80f5 	bne.w	8006186 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	f040 80eb 	bne.w	8006186 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f8fe 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
      return;
 8005fc4:	e0df      	b.n	8006186 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80d1 	beq.w	800618a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80cc 	beq.w	800618a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006014:	647b      	str	r3, [r7, #68]	@ 0x44
 8006016:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800601a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e4      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	623b      	str	r3, [r7, #32]
   return(result);
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006050:	633a      	str	r2, [r7, #48]	@ 0x30
 8006052:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e1      	bne.n	8006028 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	60fb      	str	r3, [r7, #12]
   return(result);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 0310 	bic.w	r3, r3, #16
 800608c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69b9      	ldr	r1, [r7, #24]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	617b      	str	r3, [r7, #20]
   return(result);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e4      	bne.n	8006078 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f880 	bl	80061c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060c0:	e063      	b.n	800618a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <HAL_UART_IRQHandler+0x5d8>
 80060ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fcff 	bl	8006ae8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ea:	e051      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d014      	beq.n	8006122 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006114:	2b00      	cmp	r3, #0
 8006116:	d03a      	beq.n	800618e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
    }
    return;
 8006120:	e035      	b.n	800618e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_UART_IRQHandler+0x62e>
 800612e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fca9 	bl	8006a92 <UART_EndTransmit_IT>
    return;
 8006140:	e026      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006146:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_UART_IRQHandler+0x64e>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006152:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fcd8 	bl	8006b10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006160:	e016      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006166:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d010      	beq.n	8006190 <HAL_UART_IRQHandler+0x67c>
 800616e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006172:	2b00      	cmp	r3, #0
 8006174:	da0c      	bge.n	8006190 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fcc0 	bl	8006afc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800617c:	e008      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
      return;
 800617e:	bf00      	nop
 8006180:	e006      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
    return;
 8006182:	bf00      	nop
 8006184:	e004      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
      return;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
      return;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <HAL_UART_IRQHandler+0x67c>
    return;
 800618e:	bf00      	nop
  }
}
 8006190:	37e8      	adds	r7, #232	@ 0xe8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061dc:	b08c      	sub	sp, #48	@ 0x30
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4baf      	ldr	r3, [pc, #700]	@ (80064c4 <UART_SetConfig+0x2ec>)
 8006208:	4013      	ands	r3, r2
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006210:	430b      	orrs	r3, r1
 8006212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4aa4      	ldr	r2, [pc, #656]	@ (80064c8 <UART_SetConfig+0x2f0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006240:	4313      	orrs	r3, r2
 8006242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800624e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006258:	430b      	orrs	r3, r1
 800625a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	f023 010f 	bic.w	r1, r3, #15
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a95      	ldr	r2, [pc, #596]	@ (80064cc <UART_SetConfig+0x2f4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d125      	bne.n	80062c8 <UART_SetConfig+0xf0>
 800627c:	2003      	movs	r0, #3
 800627e:	f7ff fb4b 	bl	8005918 <LL_RCC_GetUSARTClockSource>
 8006282:	4603      	mov	r3, r0
 8006284:	2b03      	cmp	r3, #3
 8006286:	d81b      	bhi.n	80062c0 <UART_SetConfig+0xe8>
 8006288:	a201      	add	r2, pc, #4	@ (adr r2, 8006290 <UART_SetConfig+0xb8>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062b1 	.word	0x080062b1
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062b9 	.word	0x080062b9
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e042      	b.n	800632e <UART_SetConfig+0x156>
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e03e      	b.n	800632e <UART_SetConfig+0x156>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e03a      	b.n	800632e <UART_SetConfig+0x156>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e036      	b.n	800632e <UART_SetConfig+0x156>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	e032      	b.n	800632e <UART_SetConfig+0x156>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a7e      	ldr	r2, [pc, #504]	@ (80064c8 <UART_SetConfig+0x2f0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d12a      	bne.n	8006328 <UART_SetConfig+0x150>
 80062d2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80062d6:	f7ff fb2f 	bl	8005938 <LL_RCC_GetLPUARTClockSource>
 80062da:	4603      	mov	r3, r0
 80062dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e0:	d01a      	beq.n	8006318 <UART_SetConfig+0x140>
 80062e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e6:	d81b      	bhi.n	8006320 <UART_SetConfig+0x148>
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062ec:	d00c      	beq.n	8006308 <UART_SetConfig+0x130>
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062f2:	d815      	bhi.n	8006320 <UART_SetConfig+0x148>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <UART_SetConfig+0x128>
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062fc:	d008      	beq.n	8006310 <UART_SetConfig+0x138>
 80062fe:	e00f      	b.n	8006320 <UART_SetConfig+0x148>
 8006300:	2300      	movs	r3, #0
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006306:	e012      	b.n	800632e <UART_SetConfig+0x156>
 8006308:	2302      	movs	r3, #2
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e00e      	b.n	800632e <UART_SetConfig+0x156>
 8006310:	2304      	movs	r3, #4
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e00a      	b.n	800632e <UART_SetConfig+0x156>
 8006318:	2308      	movs	r3, #8
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631e:	e006      	b.n	800632e <UART_SetConfig+0x156>
 8006320:	2310      	movs	r3, #16
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006326:	e002      	b.n	800632e <UART_SetConfig+0x156>
 8006328:	2310      	movs	r3, #16
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a65      	ldr	r2, [pc, #404]	@ (80064c8 <UART_SetConfig+0x2f0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	f040 8097 	bne.w	8006468 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800633a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800633e:	2b08      	cmp	r3, #8
 8006340:	d823      	bhi.n	800638a <UART_SetConfig+0x1b2>
 8006342:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0x170>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	0800636d 	.word	0x0800636d
 800634c:	0800638b 	.word	0x0800638b
 8006350:	08006375 	.word	0x08006375
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800637b 	.word	0x0800637b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800638b 	.word	0x0800638b
 8006368:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fd ff24 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b56      	ldr	r3, [pc, #344]	@ (80064d0 <UART_SetConfig+0x2f8>)
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd fe9d 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 800637e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 812b 	beq.w	80065f4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	4a4c      	ldr	r2, [pc, #304]	@ (80064d4 <UART_SetConfig+0x2fc>)
 80063a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4413      	add	r3, r2
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d305      	bcc.n	80063ce <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d903      	bls.n	80063d6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063d4:	e10e      	b.n	80065f4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	2200      	movs	r2, #0
 80063da:	60bb      	str	r3, [r7, #8]
 80063dc:	60fa      	str	r2, [r7, #12]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	4a3c      	ldr	r2, [pc, #240]	@ (80064d4 <UART_SetConfig+0x2fc>)
 80063e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2200      	movs	r2, #0
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063f8:	f7f9 ff12 	bl	8000220 <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	020b      	lsls	r3, r1, #8
 800640e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006412:	0202      	lsls	r2, r0, #8
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	6849      	ldr	r1, [r1, #4]
 8006418:	0849      	lsrs	r1, r1, #1
 800641a:	2000      	movs	r0, #0
 800641c:	460c      	mov	r4, r1
 800641e:	4605      	mov	r5, r0
 8006420:	eb12 0804 	adds.w	r8, r2, r4
 8006424:	eb43 0905 	adc.w	r9, r3, r5
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	469a      	mov	sl, r3
 8006430:	4693      	mov	fp, r2
 8006432:	4652      	mov	r2, sl
 8006434:	465b      	mov	r3, fp
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	f7f9 fef1 	bl	8000220 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4613      	mov	r3, r2
 8006444:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644c:	d308      	bcc.n	8006460 <UART_SetConfig+0x288>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006454:	d204      	bcs.n	8006460 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	e0c9      	b.n	80065f4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006466:	e0c5      	b.n	80065f4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006470:	d16d      	bne.n	800654e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006476:	3b01      	subs	r3, #1
 8006478:	2b07      	cmp	r3, #7
 800647a:	d82d      	bhi.n	80064d8 <UART_SetConfig+0x300>
 800647c:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <UART_SetConfig+0x2ac>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064a5 	.word	0x080064a5
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064d9 	.word	0x080064d9
 8006490:	080064b3 	.word	0x080064b3
 8006494:	080064d9 	.word	0x080064d9
 8006498:	080064d9 	.word	0x080064d9
 800649c:	080064d9 	.word	0x080064d9
 80064a0:	080064bb 	.word	0x080064bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a4:	f7fd fe9e 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 80064a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064aa:	e01b      	b.n	80064e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064ac:	4b08      	ldr	r3, [pc, #32]	@ (80064d0 <UART_SetConfig+0x2f8>)
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064b0:	e018      	b.n	80064e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064b2:	f7fd fe01 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 80064b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064b8:	e014      	b.n	80064e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064c0:	e010      	b.n	80064e4 <UART_SetConfig+0x30c>
 80064c2:	bf00      	nop
 80064c4:	cfff69f3 	.word	0xcfff69f3
 80064c8:	40008000 	.word	0x40008000
 80064cc:	40013800 	.word	0x40013800
 80064d0:	00f42400 	.word	0x00f42400
 80064d4:	08008728 	.word	0x08008728
      default:
        pclk = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8084 	beq.w	80065f4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006620 <UART_SetConfig+0x448>)
 80064f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f6:	461a      	mov	r2, r3
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80064fe:	005a      	lsls	r2, r3, #1
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	441a      	add	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	2b0f      	cmp	r3, #15
 8006516:	d916      	bls.n	8006546 <UART_SetConfig+0x36e>
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651e:	d212      	bcs.n	8006546 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f023 030f 	bic.w	r3, r3, #15
 8006528:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	b29a      	uxth	r2, r3
 8006536:	8bfb      	ldrh	r3, [r7, #30]
 8006538:	4313      	orrs	r3, r2
 800653a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	8bfa      	ldrh	r2, [r7, #30]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	e056      	b.n	80065f4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800654c:	e052      	b.n	80065f4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800654e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006552:	3b01      	subs	r3, #1
 8006554:	2b07      	cmp	r3, #7
 8006556:	d822      	bhi.n	800659e <UART_SetConfig+0x3c6>
 8006558:	a201      	add	r2, pc, #4	@ (adr r2, 8006560 <UART_SetConfig+0x388>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006581 	.word	0x08006581
 8006564:	08006589 	.word	0x08006589
 8006568:	0800659f 	.word	0x0800659f
 800656c:	0800658f 	.word	0x0800658f
 8006570:	0800659f 	.word	0x0800659f
 8006574:	0800659f 	.word	0x0800659f
 8006578:	0800659f 	.word	0x0800659f
 800657c:	08006597 	.word	0x08006597
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fd fe30 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8006584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006586:	e010      	b.n	80065aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006588:	4b26      	ldr	r3, [pc, #152]	@ (8006624 <UART_SetConfig+0x44c>)
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800658c:	e00d      	b.n	80065aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658e:	f7fd fd93 	bl	80040b8 <HAL_RCC_GetSysClockFreq>
 8006592:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006594:	e009      	b.n	80065aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800659c:	e005      	b.n	80065aa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065a8:	bf00      	nop
    }

    if (pclk != 0U)
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d021      	beq.n	80065f4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006620 <UART_SetConfig+0x448>)
 80065b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	fbb3 f2f2 	udiv	r2, r3, r2
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d909      	bls.n	80065ee <UART_SetConfig+0x416>
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e0:	d205      	bcs.n	80065ee <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60da      	str	r2, [r3, #12]
 80065ec:	e002      	b.n	80065f4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2200      	movs	r2, #0
 800660e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006610:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006614:	4618      	mov	r0, r3
 8006616:	3730      	adds	r7, #48	@ 0x30
 8006618:	46bd      	mov	sp, r7
 800661a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661e:	bf00      	nop
 8006620:	08008728 	.word	0x08008728
 8006624:	00f42400 	.word	0x00f42400

08006628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01a      	beq.n	800673e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006726:	d10a      	bne.n	800673e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b098      	sub	sp, #96	@ 0x60
 8006770:	af02      	add	r7, sp, #8
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800677c:	f7fa fea2 	bl	80014c4 <HAL_GetTick>
 8006780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b08      	cmp	r3, #8
 800678e:	d12f      	bne.n	80067f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006798:	2200      	movs	r2, #0
 800679a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f88e 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d022      	beq.n	80067f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067be:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e063      	b.n	80068b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d149      	bne.n	8006892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006806:	2200      	movs	r2, #0
 8006808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f857 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d03c      	beq.n	8006892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	623b      	str	r3, [r7, #32]
   return(result);
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006836:	633b      	str	r3, [r7, #48]	@ 0x30
 8006838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800683c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e6      	bne.n	8006818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	60fb      	str	r3, [r7, #12]
   return(result);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800686a:	61fa      	str	r2, [r7, #28]
 800686c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	69b9      	ldr	r1, [r7, #24]
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	617b      	str	r3, [r7, #20]
   return(result);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e012      	b.n	80068b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3758      	adds	r7, #88	@ 0x58
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d0:	e04f      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d04b      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fa fdf3 	bl	80014c4 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e04e      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d037      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b80      	cmp	r3, #128	@ 0x80
 8006906:	d034      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b40      	cmp	r3, #64	@ 0x40
 800690c:	d031      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b08      	cmp	r3, #8
 800691a:	d110      	bne.n	800693e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2208      	movs	r2, #8
 8006922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f838 	bl	800699a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2208      	movs	r2, #8
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e029      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800694c:	d111      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f81e 	bl	800699a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e00f      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	429a      	cmp	r2, r3
 800698e:	d0a0      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800699a:	b480      	push	{r7}
 800699c:	b095      	sub	sp, #84	@ 0x54
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e6      	bne.n	80069a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3308      	adds	r3, #8
 80069da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e3      	bne.n	80069d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d118      	bne.n	8006a46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f023 0310 	bic.w	r3, r3, #16
 8006a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a5a:	bf00      	nop
 8006a5c:	3754      	adds	r7, #84	@ 0x54
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff fb91 	bl	80061ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b088      	sub	sp, #32
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6979      	ldr	r1, [r7, #20]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e6      	bne.n	8006a9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fb5c 	bl	8006198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae0:	bf00      	nop
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_UARTEx_DisableFifoMode+0x16>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e027      	b.n	8006b8a <HAL_UARTEx_DisableFifoMode+0x66>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2224      	movs	r2, #36	@ 0x24
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e02d      	b.n	8006c0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	@ 0x24
 8006bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f850 	bl	8006c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e02d      	b.n	8006c86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2224      	movs	r2, #36	@ 0x24
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f812 	bl	8006c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d108      	bne.n	8006cb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cb0:	e031      	b.n	8006d16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	0e5b      	lsrs	r3, r3, #25
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	0f5b      	lsrs	r3, r3, #29
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	7b3a      	ldrb	r2, [r7, #12]
 8006cde:	4911      	ldr	r1, [pc, #68]	@ (8006d24 <UARTEx_SetNbDataToProcess+0x94>)
 8006ce0:	5c8a      	ldrb	r2, [r1, r2]
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ce6:	7b3a      	ldrb	r2, [r7, #12]
 8006ce8:	490f      	ldr	r1, [pc, #60]	@ (8006d28 <UARTEx_SetNbDataToProcess+0x98>)
 8006cea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	7b7a      	ldrb	r2, [r7, #13]
 8006cfc:	4909      	ldr	r1, [pc, #36]	@ (8006d24 <UARTEx_SetNbDataToProcess+0x94>)
 8006cfe:	5c8a      	ldrb	r2, [r1, r2]
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d04:	7b7a      	ldrb	r2, [r7, #13]
 8006d06:	4908      	ldr	r1, [pc, #32]	@ (8006d28 <UARTEx_SetNbDataToProcess+0x98>)
 8006d08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	08008740 	.word	0x08008740
 8006d28:	08008748 	.word	0x08008748

08006d2c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006d36:	4b0f      	ldr	r3, [pc, #60]	@ (8006d74 <OTP_Read+0x48>)
 8006d38:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006d3a:	e002      	b.n	8006d42 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3b08      	subs	r3, #8
 8006d40:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3307      	adds	r3, #7
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	79fa      	ldrb	r2, [r7, #7]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d003      	beq.n	8006d56 <OTP_Read+0x2a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a09      	ldr	r2, [pc, #36]	@ (8006d78 <OTP_Read+0x4c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d1f2      	bne.n	8006d3c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3307      	adds	r3, #7
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	79fa      	ldrb	r2, [r7, #7]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d001      	beq.n	8006d66 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006d66:	68fb      	ldr	r3, [r7, #12]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	1fff73f8 	.word	0x1fff73f8
 8006d78:	1fff7000 	.word	0x1fff7000

08006d7c <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d84:	f3ef 8310 	mrs	r3, PRIMASK
 8006d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006d8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d8e:	b672      	cpsid	i
}
 8006d90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d102      	bne.n	8006da2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	75fb      	strb	r3, [r7, #23]
 8006da0:	e001      	b.n	8006da6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f383 8810 	msr	PRIMASK, r3
}
 8006db0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dca:	f3ef 8310 	mrs	r3, PRIMASK
 8006dce:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006dd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dd4:	b672      	cpsid	i
}
 8006dd6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f383 8810 	msr	PRIMASK, r3
}
 8006dfe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e14:	f3ef 8310 	mrs	r3, PRIMASK
 8006e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e1e:	b672      	cpsid	i
}
 8006e20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6852      	ldr	r2, [r2, #4]
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f383 8810 	msr	PRIMASK, r3
}
 8006e40:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b086      	sub	sp, #24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e58:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e62:	b672      	cpsid	i
}
 8006e64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff ffca 	bl	8006e0c <LST_remove_node>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f383 8810 	msr	PRIMASK, r3
}
 8006e82:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006e92:	e01c      	b.n	8006ece <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006e94:	1d3b      	adds	r3, r7, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4812      	ldr	r0, [pc, #72]	@ (8006ee4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006e9a:	f7ff ffd8 	bl	8006e4e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7a5b      	ldrb	r3, [r3, #9]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d003      	beq.n	8006eae <HW_IPCC_BLE_RxEvtNot+0x22>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7a5b      	ldrb	r3, [r3, #9]
 8006eaa:	2b0e      	cmp	r3, #14
 8006eac:	d105      	bne.n	8006eba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	2002      	movs	r0, #2
 8006eb4:	f000 f8d2 	bl	800705c <OutputDbgTrace>
 8006eb8:	e004      	b.n	8006ec4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	2003      	movs	r0, #3
 8006ec0:	f000 f8cc 	bl	800705c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006ec4:	4b08      	ldr	r3, [pc, #32]	@ (8006ee8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	4610      	mov	r0, r2
 8006ecc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006ece:	4805      	ldr	r0, [pc, #20]	@ (8006ee4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006ed0:	f7ff ff54 	bl	8006d7c <LST_is_empty>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0dc      	beq.n	8006e94 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006eda:	bf00      	nop
}
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200300c8 	.word	0x200300c8
 8006ee8:	200002f4 	.word	0x200002f4

08006eec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006ef0:	4b02      	ldr	r3, [pc, #8]	@ (8006efc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4798      	blx	r3

  return;
 8006ef6:	bf00      	nop
}
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	200002f8 	.word	0x200002f8

08006f00 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f04:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	2005      	movs	r0, #5
 8006f0e:	f000 f8a5 	bl	800705c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f12:	4b05      	ldr	r3, [pc, #20]	@ (8006f28 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a03      	ldr	r2, [pc, #12]	@ (8006f24 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f18:	68d2      	ldr	r2, [r2, #12]
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3

  return;
 8006f20:	bf00      	nop
}
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20030000 	.word	0x20030000
 8006f28:	200002fc 	.word	0x200002fc

08006f2c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f32:	e00e      	b.n	8006f52 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006f34:	1d3b      	adds	r3, r7, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	480b      	ldr	r0, [pc, #44]	@ (8006f68 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f3a:	f7ff ff88 	bl	8006e4e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4619      	mov	r1, r3
 8006f42:	2006      	movs	r0, #6
 8006f44:	f000 f88a 	bl	800705c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006f48:	4b08      	ldr	r3, [pc, #32]	@ (8006f6c <HW_IPCC_SYS_EvtNot+0x40>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f52:	4805      	ldr	r0, [pc, #20]	@ (8006f68 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f54:	f7ff ff12 	bl	8006d7c <LST_is_empty>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0ea      	beq.n	8006f34 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006f5e:	bf00      	nop
}
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200300d0 	.word	0x200300d0
 8006f6c:	20000300 	.word	0x20000300

08006f70 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:
  return;
}

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8006f74:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f8c4 	bl	8007108 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8006f80:	bf00      	nop
}
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20030000 	.word	0x20030000

08006f88 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8006f8c:	4b03      	ldr	r3, [pc, #12]	@ (8006f9c <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f8c2 	bl	800711c <TL_ZIGBEE_NotReceived>

  return;
 8006f98:	bf00      	nop
}
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20030000 	.word	0x20030000

08006fa0 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:
  return;
}

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8006fa4:	4b03      	ldr	r3, [pc, #12]	@ (8006fb4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f8de 	bl	800716c <TL_ZIGBEE_M0RequestReceived>

  return;
 8006fb0:	bf00      	nop
}
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20030000 	.word	0x20030000

08006fb8 <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4807      	ldr	r0, [pc, #28]	@ (8006fe0 <TL_MM_EvtDone+0x28>)
 8006fc4:	f7ff fefc 	bl	8006dc0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f000 f846 	bl	800705c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006fd0:	4804      	ldr	r0, [pc, #16]	@ (8006fe4 <TL_MM_EvtDone+0x2c>)
 8006fd2:	f000 fa51 	bl	8007478 <HW_IPCC_MM_SendFreeBuf>

  return;
 8006fd6:	bf00      	nop
}
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	200002ec 	.word	0x200002ec
 8006fe4:	08006fe9 	.word	0x08006fe9

08006fe8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006fee:	e00c      	b.n	800700a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006ff0:	1d3b      	adds	r3, r7, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	480a      	ldr	r0, [pc, #40]	@ (8007020 <SendFreeBuf+0x38>)
 8006ff6:	f7ff ff2a 	bl	8006e4e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <SendFreeBuf+0x3c>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fedb 	bl	8006dc0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800700a:	4805      	ldr	r0, [pc, #20]	@ (8007020 <SendFreeBuf+0x38>)
 800700c:	f7ff feb6 	bl	8006d7c <LST_is_empty>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ec      	beq.n	8006ff0 <SendFreeBuf+0x8>
  }

  return;
 8007016:	bf00      	nop
}
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200002ec 	.word	0x200002ec
 8007024:	20030000 	.word	0x20030000

08007028 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800702e:	e008      	b.n	8007042 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007030:	1d3b      	adds	r3, r7, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4808      	ldr	r0, [pc, #32]	@ (8007058 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007036:	f7ff ff0a 	bl	8006e4e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4618      	mov	r0, r3
 800703e:	f7f9 fae3 	bl	8000608 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007042:	4805      	ldr	r0, [pc, #20]	@ (8007058 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007044:	f7ff fe9a 	bl	8006d7c <LST_is_empty>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800704e:	bf00      	nop
}
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200300c0 	.word	0x200300c0

0800705c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	2b06      	cmp	r3, #6
 800706c:	d845      	bhi.n	80070fa <OutputDbgTrace+0x9e>
 800706e:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <OutputDbgTrace+0x18>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007091 	.word	0x08007091
 8007078:	080070b5 	.word	0x080070b5
 800707c:	080070bb 	.word	0x080070bb
 8007080:	080070cf 	.word	0x080070cf
 8007084:	080070db 	.word	0x080070db
 8007088:	080070e1 	.word	0x080070e1
 800708c:	080070ef 	.word	0x080070ef
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	7a5b      	ldrb	r3, [r3, #9]
 8007098:	2bff      	cmp	r3, #255	@ 0xff
 800709a:	d005      	beq.n	80070a8 <OutputDbgTrace+0x4c>
 800709c:	2bff      	cmp	r3, #255	@ 0xff
 800709e:	dc05      	bgt.n	80070ac <OutputDbgTrace+0x50>
 80070a0:	2b0e      	cmp	r3, #14
 80070a2:	d005      	beq.n	80070b0 <OutputDbgTrace+0x54>
 80070a4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80070a6:	e001      	b.n	80070ac <OutputDbgTrace+0x50>
          break;
 80070a8:	bf00      	nop
 80070aa:	e027      	b.n	80070fc <OutputDbgTrace+0xa0>
          break;
 80070ac:	bf00      	nop
 80070ae:	e025      	b.n	80070fc <OutputDbgTrace+0xa0>
          break;
 80070b0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80070b2:	e023      	b.n	80070fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80070b8:	e020      	b.n	80070fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	7a5b      	ldrb	r3, [r3, #9]
 80070c2:	2b0e      	cmp	r3, #14
 80070c4:	d001      	beq.n	80070ca <OutputDbgTrace+0x6e>
 80070c6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80070c8:	e000      	b.n	80070cc <OutputDbgTrace+0x70>
          break;
 80070ca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070cc:	e016      	b.n	80070fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	7a5b      	ldrb	r3, [r3, #9]
 80070d6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070d8:	e010      	b.n	80070fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80070de:	e00d      	b.n	80070fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	7a5b      	ldrb	r3, [r3, #9]
 80070e8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80070ea:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070ec:	e006      	b.n	80070fc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	7a5b      	ldrb	r3, [r3, #9]
 80070f6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070f8:	e000      	b.n	80070fc <OutputDbgTrace+0xa0>

    default:
      break;
 80070fa:	bf00      	nop
  }

  return;
 80070fc:	bf00      	nop
}
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8007110:	f000 f814 	bl	800713c <Receive_Ack_From_M0>
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8007124:	4a04      	ldr	r2, [pc, #16]	@ (8007138 <TL_ZIGBEE_NotReceived+0x1c>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800712a:	f000 f80f 	bl	800714c <Receive_Notification_From_M0>
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000304 	.word	0x20000304

0800713c <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8007140:	2002      	movs	r0, #2
 8007142:	f000 fa07 	bl	8007554 <UTIL_SEQ_SetEvt>
}
 8007146:	bf00      	nop
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 8007150:	4b05      	ldr	r3, [pc, #20]	@ (8007168 <Receive_Notification_From_M0+0x1c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3301      	adds	r3, #1
 8007156:	4a04      	ldr	r2, [pc, #16]	@ (8007168 <Receive_Notification_From_M0+0x1c>)
 8007158:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800715a:	2100      	movs	r1, #0
 800715c:	2001      	movs	r0, #1
 800715e:	f000 f9cd 	bl	80074fc <UTIL_SEQ_SetTask>
}
 8007162:	bf00      	nop
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	2000030c 	.word	0x2000030c

0800716c <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8007174:	4a07      	ldr	r2, [pc, #28]	@ (8007194 <TL_ZIGBEE_M0RequestReceived+0x28>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 800717a:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3301      	adds	r3, #1
 8007180:	4a05      	ldr	r2, [pc, #20]	@ (8007198 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8007182:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8007184:	2100      	movs	r1, #0
 8007186:	2002      	movs	r0, #2
 8007188:	f000 f9b8 	bl	80074fc <UTIL_SEQ_SetTask>
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000308 	.word	0x20000308
 8007198:	20000310 	.word	0x20000310

0800719c <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	43db      	mvns	r3, r3
 80071b0:	401a      	ands	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	605a      	str	r2, [r3, #4]
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	041b      	lsls	r3, r3, #16
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	605a      	str	r2, [r3, #4]
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	041a      	lsls	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	609a      	str	r2, [r3, #8]
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	4013      	ands	r3, r2
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d101      	bne.n	800725e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69da      	ldr	r2, [r3, #28]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	4013      	ands	r3, r2
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d101      	bne.n	8007288 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800729c:	2102      	movs	r1, #2
 800729e:	4828      	ldr	r0, [pc, #160]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 80072a0:	f7ff ffe4 	bl	800726c <LL_C2_IPCC_IsActiveFlag_CHx>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d008      	beq.n	80072bc <HW_IPCC_Rx_Handler+0x24>
 80072aa:	4b25      	ldr	r3, [pc, #148]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d102      	bne.n	80072bc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80072b6:	f000 f8af 	bl	8007418 <HW_IPCC_SYS_EvtHandler>
 80072ba:	e03e      	b.n	800733a <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 80072bc:	2104      	movs	r1, #4
 80072be:	4820      	ldr	r0, [pc, #128]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 80072c0:	f7ff ffd4 	bl	800726c <LL_C2_IPCC_IsActiveFlag_CHx>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <HW_IPCC_Rx_Handler+0x44>
 80072ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 80072d6:	f000 f8b7 	bl	8007448 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 80072da:	e02e      	b.n	800733a <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 80072dc:	2110      	movs	r1, #16
 80072de:	4818      	ldr	r0, [pc, #96]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 80072e0:	f7ff ffc4 	bl	800726c <LL_C2_IPCC_IsActiveFlag_CHx>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HW_IPCC_Rx_Handler+0x64>
 80072ea:	4b15      	ldr	r3, [pc, #84]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f003 0310 	and.w	r3, r3, #16
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 80072f6:	f000 f8b3 	bl	8007460 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 80072fa:	e01e      	b.n	800733a <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80072fc:	2101      	movs	r1, #1
 80072fe:	4810      	ldr	r0, [pc, #64]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 8007300:	f7ff ffb4 	bl	800726c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d008      	beq.n	800731c <HW_IPCC_Rx_Handler+0x84>
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d102      	bne.n	800731c <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 8007316:	f000 f85b 	bl	80073d0 <HW_IPCC_BLE_EvtHandler>
 800731a:	e00e      	b.n	800733a <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800731c:	2108      	movs	r1, #8
 800731e:	4808      	ldr	r0, [pc, #32]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 8007320:	f7ff ffa4 	bl	800726c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HW_IPCC_Rx_Handler+0xa4>
 800732a:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <HW_IPCC_Rx_Handler+0xa8>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d102      	bne.n	800733c <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007336:	f000 f8d5 	bl	80074e4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800733a:	bf00      	nop
 800733c:	bf00      	nop
}
 800733e:	bd80      	pop	{r7, pc}
 8007340:	58000c00 	.word	0x58000c00

08007344 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007348:	2102      	movs	r1, #2
 800734a:	4820      	ldr	r0, [pc, #128]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 800734c:	f7ff ff79 	bl	8007242 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <HW_IPCC_Tx_Handler+0x22>
 8007356:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007362:	f000 f84d 	bl	8007400 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 8007366:	2104      	movs	r1, #4
 8007368:	4818      	ldr	r0, [pc, #96]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 800736a:	f7ff ff6a 	bl	8007242 <LL_C1_IPCC_IsActiveFlag_CHx>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d108      	bne.n	8007386 <HW_IPCC_Tx_Handler+0x42>
 8007374:	4b15      	ldr	r3, [pc, #84]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 8007380:	f000 f856 	bl	8007430 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 8007384:	e01e      	b.n	80073c4 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007386:	2108      	movs	r1, #8
 8007388:	4810      	ldr	r0, [pc, #64]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 800738a:	f7ff ff5a 	bl	8007242 <LL_C1_IPCC_IsActiveFlag_CHx>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d108      	bne.n	80073a6 <HW_IPCC_Tx_Handler+0x62>
 8007394:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 80073a0:	f000 f88c 	bl	80074bc <HW_IPCC_MM_FreeBufHandler>
 80073a4:	e00e      	b.n	80073c4 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80073a6:	2120      	movs	r1, #32
 80073a8:	4808      	ldr	r0, [pc, #32]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 80073aa:	f7ff ff4a 	bl	8007242 <LL_C1_IPCC_IsActiveFlag_CHx>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d108      	bne.n	80073c6 <HW_IPCC_Tx_Handler+0x82>
 80073b4:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <HW_IPCC_Tx_Handler+0x88>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80073c0:	f000 f812 	bl	80073e8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
}
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	58000c00 	.word	0x58000c00

080073d0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80073d4:	f7ff fd5a 	bl	8006e8c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80073d8:	2101      	movs	r1, #1
 80073da:	4802      	ldr	r0, [pc, #8]	@ (80073e4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80073dc:	f7ff ff14 	bl	8007208 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80073e0:	bf00      	nop
}
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	58000c00 	.word	0x58000c00

080073e8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80073ec:	2120      	movs	r1, #32
 80073ee:	4803      	ldr	r0, [pc, #12]	@ (80073fc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80073f0:	f7ff fee7 	bl	80071c2 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80073f4:	f7ff fd7a 	bl	8006eec <HW_IPCC_BLE_AclDataAckNot>

  return;
 80073f8:	bf00      	nop
}
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	58000c00 	.word	0x58000c00

08007400 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007404:	2102      	movs	r1, #2
 8007406:	4803      	ldr	r0, [pc, #12]	@ (8007414 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007408:	f7ff fedb 	bl	80071c2 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800740c:	f7ff fd78 	bl	8006f00 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007410:	bf00      	nop
}
 8007412:	bd80      	pop	{r7, pc}
 8007414:	58000c00 	.word	0x58000c00

08007418 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800741c:	f7ff fd86 	bl	8006f2c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007420:	2102      	movs	r1, #2
 8007422:	4802      	ldr	r0, [pc, #8]	@ (800742c <HW_IPCC_SYS_EvtHandler+0x14>)
 8007424:	f7ff fef0 	bl	8007208 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007428:	bf00      	nop
}
 800742a:	bd80      	pop	{r7, pc}
 800742c:	58000c00 	.word	0x58000c00

08007430 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

  return;
}

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8007434:	2104      	movs	r1, #4
 8007436:	4803      	ldr	r0, [pc, #12]	@ (8007444 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8007438:	f7ff fec3 	bl	80071c2 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 800743c:	f7ff fd98 	bl	8006f70 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 8007440:	bf00      	nop
}
 8007442:	bd80      	pop	{r7, pc}
 8007444:	58000c00 	.word	0x58000c00

08007448 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800744c:	2104      	movs	r1, #4
 800744e:	4803      	ldr	r0, [pc, #12]	@ (800745c <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 8007450:	f7ff fec9 	bl	80071e6 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8007454:	f7ff fd98 	bl	8006f88 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 8007458:	bf00      	nop
}
 800745a:	bd80      	pop	{r7, pc}
 800745c:	58000c00 	.word	0x58000c00

08007460 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8007464:	2110      	movs	r1, #16
 8007466:	4803      	ldr	r0, [pc, #12]	@ (8007474 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 8007468:	f7ff febd 	bl	80071e6 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 800746c:	f7ff fd98 	bl	8006fa0 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8007470:	bf00      	nop
}
 8007472:	bd80      	pop	{r7, pc}
 8007474:	58000c00 	.word	0x58000c00

08007478 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007480:	2108      	movs	r1, #8
 8007482:	480c      	ldr	r0, [pc, #48]	@ (80074b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007484:	f7ff fedd 	bl	8007242 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800748e:	4a0a      	ldr	r2, [pc, #40]	@ (80074b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007494:	2108      	movs	r1, #8
 8007496:	4807      	ldr	r0, [pc, #28]	@ (80074b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007498:	f7ff fe80 	bl	800719c <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800749c:	e006      	b.n	80074ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80074a2:	2108      	movs	r1, #8
 80074a4:	4803      	ldr	r0, [pc, #12]	@ (80074b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80074a6:	f7ff febd 	bl	8007224 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80074aa:	bf00      	nop
}
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	58000c00 	.word	0x58000c00
 80074b8:	20000314 	.word	0x20000314

080074bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80074c0:	2108      	movs	r1, #8
 80074c2:	4806      	ldr	r0, [pc, #24]	@ (80074dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80074c4:	f7ff fe7d 	bl	80071c2 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80074c8:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80074ce:	2108      	movs	r1, #8
 80074d0:	4802      	ldr	r0, [pc, #8]	@ (80074dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80074d2:	f7ff fea7 	bl	8007224 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80074d6:	bf00      	nop
}
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	58000c00 	.word	0x58000c00
 80074e0:	20000314 	.word	0x20000314

080074e4 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80074e8:	f7ff fd9e 	bl	8007028 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80074ec:	2108      	movs	r1, #8
 80074ee:	4802      	ldr	r0, [pc, #8]	@ (80074f8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80074f0:	f7ff fe8a 	bl	8007208 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80074f4:	bf00      	nop
}
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	58000c00 	.word	0x58000c00

080074fc <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007506:	f3ef 8310 	mrs	r3, PRIMASK
 800750a:	60fb      	str	r3, [r7, #12]
  return(result);
 800750c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800750e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007510:	b672      	cpsid	i
}
 8007512:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <UTIL_SEQ_SetTask+0x50>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4313      	orrs	r3, r2
 800751c:	4a0b      	ldr	r2, [pc, #44]	@ (800754c <UTIL_SEQ_SetTask+0x50>)
 800751e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007520:	4a0b      	ldr	r2, [pc, #44]	@ (8007550 <UTIL_SEQ_SetTask+0x54>)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	431a      	orrs	r2, r3
 800752c:	4908      	ldr	r1, [pc, #32]	@ (8007550 <UTIL_SEQ_SetTask+0x54>)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f383 8810 	msr	PRIMASK, r3
}
 800753e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007540:	bf00      	nop
}
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20000318 	.word	0x20000318
 8007550:	20000320 	.word	0x20000320

08007554 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755c:	f3ef 8310 	mrs	r3, PRIMASK
 8007560:	60fb      	str	r3, [r7, #12]
  return(result);
 8007562:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007566:	b672      	cpsid	i
}
 8007568:	bf00      	nop

  EvtSet |= EvtId_bm;
 800756a:	4b09      	ldr	r3, [pc, #36]	@ (8007590 <UTIL_SEQ_SetEvt+0x3c>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4313      	orrs	r3, r2
 8007572:	4a07      	ldr	r2, [pc, #28]	@ (8007590 <UTIL_SEQ_SetEvt+0x3c>)
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007582:	bf00      	nop
}
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	2000031c 	.word	0x2000031c

08007594 <malloc>:
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <malloc+0xc>)
 8007596:	4601      	mov	r1, r0
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f000 b825 	b.w	80075e8 <_malloc_r>
 800759e:	bf00      	nop
 80075a0:	20000020 	.word	0x20000020

080075a4 <sbrk_aligned>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4e0f      	ldr	r6, [pc, #60]	@ (80075e4 <sbrk_aligned+0x40>)
 80075a8:	460c      	mov	r4, r1
 80075aa:	6831      	ldr	r1, [r6, #0]
 80075ac:	4605      	mov	r5, r0
 80075ae:	b911      	cbnz	r1, 80075b6 <sbrk_aligned+0x12>
 80075b0:	f000 fba0 	bl	8007cf4 <_sbrk_r>
 80075b4:	6030      	str	r0, [r6, #0]
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 fb9b 	bl	8007cf4 <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d103      	bne.n	80075ca <sbrk_aligned+0x26>
 80075c2:	f04f 34ff 	mov.w	r4, #4294967295
 80075c6:	4620      	mov	r0, r4
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
 80075ca:	1cc4      	adds	r4, r0, #3
 80075cc:	f024 0403 	bic.w	r4, r4, #3
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d0f8      	beq.n	80075c6 <sbrk_aligned+0x22>
 80075d4:	1a21      	subs	r1, r4, r0
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 fb8c 	bl	8007cf4 <_sbrk_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	d1f2      	bne.n	80075c6 <sbrk_aligned+0x22>
 80075e0:	e7ef      	b.n	80075c2 <sbrk_aligned+0x1e>
 80075e2:	bf00      	nop
 80075e4:	20000330 	.word	0x20000330

080075e8 <_malloc_r>:
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	1ccd      	adds	r5, r1, #3
 80075ee:	f025 0503 	bic.w	r5, r5, #3
 80075f2:	3508      	adds	r5, #8
 80075f4:	2d0c      	cmp	r5, #12
 80075f6:	bf38      	it	cc
 80075f8:	250c      	movcc	r5, #12
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	4606      	mov	r6, r0
 80075fe:	db01      	blt.n	8007604 <_malloc_r+0x1c>
 8007600:	42a9      	cmp	r1, r5
 8007602:	d904      	bls.n	800760e <_malloc_r+0x26>
 8007604:	230c      	movs	r3, #12
 8007606:	6033      	str	r3, [r6, #0]
 8007608:	2000      	movs	r0, #0
 800760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076e4 <_malloc_r+0xfc>
 8007612:	f000 f869 	bl	80076e8 <__malloc_lock>
 8007616:	f8d8 3000 	ldr.w	r3, [r8]
 800761a:	461c      	mov	r4, r3
 800761c:	bb44      	cbnz	r4, 8007670 <_malloc_r+0x88>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff ffbf 	bl	80075a4 <sbrk_aligned>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	4604      	mov	r4, r0
 800762a:	d158      	bne.n	80076de <_malloc_r+0xf6>
 800762c:	f8d8 4000 	ldr.w	r4, [r8]
 8007630:	4627      	mov	r7, r4
 8007632:	2f00      	cmp	r7, #0
 8007634:	d143      	bne.n	80076be <_malloc_r+0xd6>
 8007636:	2c00      	cmp	r4, #0
 8007638:	d04b      	beq.n	80076d2 <_malloc_r+0xea>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	4639      	mov	r1, r7
 800763e:	4630      	mov	r0, r6
 8007640:	eb04 0903 	add.w	r9, r4, r3
 8007644:	f000 fb56 	bl	8007cf4 <_sbrk_r>
 8007648:	4581      	cmp	r9, r0
 800764a:	d142      	bne.n	80076d2 <_malloc_r+0xea>
 800764c:	6821      	ldr	r1, [r4, #0]
 800764e:	1a6d      	subs	r5, r5, r1
 8007650:	4629      	mov	r1, r5
 8007652:	4630      	mov	r0, r6
 8007654:	f7ff ffa6 	bl	80075a4 <sbrk_aligned>
 8007658:	3001      	adds	r0, #1
 800765a:	d03a      	beq.n	80076d2 <_malloc_r+0xea>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	442b      	add	r3, r5
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	f8d8 3000 	ldr.w	r3, [r8]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	bb62      	cbnz	r2, 80076c4 <_malloc_r+0xdc>
 800766a:	f8c8 7000 	str.w	r7, [r8]
 800766e:	e00f      	b.n	8007690 <_malloc_r+0xa8>
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	1b52      	subs	r2, r2, r5
 8007674:	d420      	bmi.n	80076b8 <_malloc_r+0xd0>
 8007676:	2a0b      	cmp	r2, #11
 8007678:	d917      	bls.n	80076aa <_malloc_r+0xc2>
 800767a:	1961      	adds	r1, r4, r5
 800767c:	42a3      	cmp	r3, r4
 800767e:	6025      	str	r5, [r4, #0]
 8007680:	bf18      	it	ne
 8007682:	6059      	strne	r1, [r3, #4]
 8007684:	6863      	ldr	r3, [r4, #4]
 8007686:	bf08      	it	eq
 8007688:	f8c8 1000 	streq.w	r1, [r8]
 800768c:	5162      	str	r2, [r4, r5]
 800768e:	604b      	str	r3, [r1, #4]
 8007690:	4630      	mov	r0, r6
 8007692:	f000 f82f 	bl	80076f4 <__malloc_unlock>
 8007696:	f104 000b 	add.w	r0, r4, #11
 800769a:	1d23      	adds	r3, r4, #4
 800769c:	f020 0007 	bic.w	r0, r0, #7
 80076a0:	1ac2      	subs	r2, r0, r3
 80076a2:	bf1c      	itt	ne
 80076a4:	1a1b      	subne	r3, r3, r0
 80076a6:	50a3      	strne	r3, [r4, r2]
 80076a8:	e7af      	b.n	800760a <_malloc_r+0x22>
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	bf0c      	ite	eq
 80076b0:	f8c8 2000 	streq.w	r2, [r8]
 80076b4:	605a      	strne	r2, [r3, #4]
 80076b6:	e7eb      	b.n	8007690 <_malloc_r+0xa8>
 80076b8:	4623      	mov	r3, r4
 80076ba:	6864      	ldr	r4, [r4, #4]
 80076bc:	e7ae      	b.n	800761c <_malloc_r+0x34>
 80076be:	463c      	mov	r4, r7
 80076c0:	687f      	ldr	r7, [r7, #4]
 80076c2:	e7b6      	b.n	8007632 <_malloc_r+0x4a>
 80076c4:	461a      	mov	r2, r3
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d1fb      	bne.n	80076c4 <_malloc_r+0xdc>
 80076cc:	2300      	movs	r3, #0
 80076ce:	6053      	str	r3, [r2, #4]
 80076d0:	e7de      	b.n	8007690 <_malloc_r+0xa8>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6033      	str	r3, [r6, #0]
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f80c 	bl	80076f4 <__malloc_unlock>
 80076dc:	e794      	b.n	8007608 <_malloc_r+0x20>
 80076de:	6005      	str	r5, [r0, #0]
 80076e0:	e7d6      	b.n	8007690 <_malloc_r+0xa8>
 80076e2:	bf00      	nop
 80076e4:	20000334 	.word	0x20000334

080076e8 <__malloc_lock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	@ (80076f0 <__malloc_lock+0x8>)
 80076ea:	f000 bb50 	b.w	8007d8e <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	20000478 	.word	0x20000478

080076f4 <__malloc_unlock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	@ (80076fc <__malloc_unlock+0x8>)
 80076f6:	f000 bb4b 	b.w	8007d90 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	20000478 	.word	0x20000478

08007700 <std>:
 8007700:	2300      	movs	r3, #0
 8007702:	b510      	push	{r4, lr}
 8007704:	4604      	mov	r4, r0
 8007706:	e9c0 3300 	strd	r3, r3, [r0]
 800770a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800770e:	6083      	str	r3, [r0, #8]
 8007710:	8181      	strh	r1, [r0, #12]
 8007712:	6643      	str	r3, [r0, #100]	@ 0x64
 8007714:	81c2      	strh	r2, [r0, #14]
 8007716:	6183      	str	r3, [r0, #24]
 8007718:	4619      	mov	r1, r3
 800771a:	2208      	movs	r2, #8
 800771c:	305c      	adds	r0, #92	@ 0x5c
 800771e:	f000 faad 	bl	8007c7c <memset>
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <std+0x58>)
 8007724:	6263      	str	r3, [r4, #36]	@ 0x24
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <std+0x5c>)
 8007728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x60>)
 800772c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x64>)
 8007730:	6323      	str	r3, [r4, #48]	@ 0x30
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <std+0x68>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	429c      	cmp	r4, r3
 8007738:	d006      	beq.n	8007748 <std+0x48>
 800773a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800773e:	4294      	cmp	r4, r2
 8007740:	d002      	beq.n	8007748 <std+0x48>
 8007742:	33d0      	adds	r3, #208	@ 0xd0
 8007744:	429c      	cmp	r4, r3
 8007746:	d105      	bne.n	8007754 <std+0x54>
 8007748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	f000 bb1c 	b.w	8007d8c <__retarget_lock_init_recursive>
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	08007acd 	.word	0x08007acd
 800775c:	08007aef 	.word	0x08007aef
 8007760:	08007b27 	.word	0x08007b27
 8007764:	08007b4b 	.word	0x08007b4b
 8007768:	20000338 	.word	0x20000338

0800776c <stdio_exit_handler>:
 800776c:	4a02      	ldr	r2, [pc, #8]	@ (8007778 <stdio_exit_handler+0xc>)
 800776e:	4903      	ldr	r1, [pc, #12]	@ (800777c <stdio_exit_handler+0x10>)
 8007770:	4803      	ldr	r0, [pc, #12]	@ (8007780 <stdio_exit_handler+0x14>)
 8007772:	f000 b869 	b.w	8007848 <_fwalk_sglue>
 8007776:	bf00      	nop
 8007778:	20000014 	.word	0x20000014
 800777c:	080084d1 	.word	0x080084d1
 8007780:	20000024 	.word	0x20000024

08007784 <cleanup_stdio>:
 8007784:	6841      	ldr	r1, [r0, #4]
 8007786:	4b0c      	ldr	r3, [pc, #48]	@ (80077b8 <cleanup_stdio+0x34>)
 8007788:	4299      	cmp	r1, r3
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	d001      	beq.n	8007794 <cleanup_stdio+0x10>
 8007790:	f000 fe9e 	bl	80084d0 <_fflush_r>
 8007794:	68a1      	ldr	r1, [r4, #8]
 8007796:	4b09      	ldr	r3, [pc, #36]	@ (80077bc <cleanup_stdio+0x38>)
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <cleanup_stdio+0x1e>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fe97 	bl	80084d0 <_fflush_r>
 80077a2:	68e1      	ldr	r1, [r4, #12]
 80077a4:	4b06      	ldr	r3, [pc, #24]	@ (80077c0 <cleanup_stdio+0x3c>)
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d004      	beq.n	80077b4 <cleanup_stdio+0x30>
 80077aa:	4620      	mov	r0, r4
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f000 be8e 	b.w	80084d0 <_fflush_r>
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	20000338 	.word	0x20000338
 80077bc:	200003a0 	.word	0x200003a0
 80077c0:	20000408 	.word	0x20000408

080077c4 <global_stdio_init.part.0>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <global_stdio_init.part.0+0x30>)
 80077c8:	4c0b      	ldr	r4, [pc, #44]	@ (80077f8 <global_stdio_init.part.0+0x34>)
 80077ca:	4a0c      	ldr	r2, [pc, #48]	@ (80077fc <global_stdio_init.part.0+0x38>)
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	4620      	mov	r0, r4
 80077d0:	2200      	movs	r2, #0
 80077d2:	2104      	movs	r1, #4
 80077d4:	f7ff ff94 	bl	8007700 <std>
 80077d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077dc:	2201      	movs	r2, #1
 80077de:	2109      	movs	r1, #9
 80077e0:	f7ff ff8e 	bl	8007700 <std>
 80077e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077e8:	2202      	movs	r2, #2
 80077ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ee:	2112      	movs	r1, #18
 80077f0:	f7ff bf86 	b.w	8007700 <std>
 80077f4:	20000470 	.word	0x20000470
 80077f8:	20000338 	.word	0x20000338
 80077fc:	0800776d 	.word	0x0800776d

08007800 <__sfp_lock_acquire>:
 8007800:	4801      	ldr	r0, [pc, #4]	@ (8007808 <__sfp_lock_acquire+0x8>)
 8007802:	f000 bac4 	b.w	8007d8e <__retarget_lock_acquire_recursive>
 8007806:	bf00      	nop
 8007808:	20000479 	.word	0x20000479

0800780c <__sfp_lock_release>:
 800780c:	4801      	ldr	r0, [pc, #4]	@ (8007814 <__sfp_lock_release+0x8>)
 800780e:	f000 babf 	b.w	8007d90 <__retarget_lock_release_recursive>
 8007812:	bf00      	nop
 8007814:	20000479 	.word	0x20000479

08007818 <__sinit>:
 8007818:	b510      	push	{r4, lr}
 800781a:	4604      	mov	r4, r0
 800781c:	f7ff fff0 	bl	8007800 <__sfp_lock_acquire>
 8007820:	6a23      	ldr	r3, [r4, #32]
 8007822:	b11b      	cbz	r3, 800782c <__sinit+0x14>
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007828:	f7ff bff0 	b.w	800780c <__sfp_lock_release>
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <__sinit+0x28>)
 800782e:	6223      	str	r3, [r4, #32]
 8007830:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <__sinit+0x2c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f5      	bne.n	8007824 <__sinit+0xc>
 8007838:	f7ff ffc4 	bl	80077c4 <global_stdio_init.part.0>
 800783c:	e7f2      	b.n	8007824 <__sinit+0xc>
 800783e:	bf00      	nop
 8007840:	08007785 	.word	0x08007785
 8007844:	20000470 	.word	0x20000470

08007848 <_fwalk_sglue>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4607      	mov	r7, r0
 800784e:	4688      	mov	r8, r1
 8007850:	4614      	mov	r4, r2
 8007852:	2600      	movs	r6, #0
 8007854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007858:	f1b9 0901 	subs.w	r9, r9, #1
 800785c:	d505      	bpl.n	800786a <_fwalk_sglue+0x22>
 800785e:	6824      	ldr	r4, [r4, #0]
 8007860:	2c00      	cmp	r4, #0
 8007862:	d1f7      	bne.n	8007854 <_fwalk_sglue+0xc>
 8007864:	4630      	mov	r0, r6
 8007866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d907      	bls.n	8007880 <_fwalk_sglue+0x38>
 8007870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007874:	3301      	adds	r3, #1
 8007876:	d003      	beq.n	8007880 <_fwalk_sglue+0x38>
 8007878:	4629      	mov	r1, r5
 800787a:	4638      	mov	r0, r7
 800787c:	47c0      	blx	r8
 800787e:	4306      	orrs	r6, r0
 8007880:	3568      	adds	r5, #104	@ 0x68
 8007882:	e7e9      	b.n	8007858 <_fwalk_sglue+0x10>

08007884 <iprintf>:
 8007884:	b40f      	push	{r0, r1, r2, r3}
 8007886:	b507      	push	{r0, r1, r2, lr}
 8007888:	4906      	ldr	r1, [pc, #24]	@ (80078a4 <iprintf+0x20>)
 800788a:	ab04      	add	r3, sp, #16
 800788c:	6808      	ldr	r0, [r1, #0]
 800788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007892:	6881      	ldr	r1, [r0, #8]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f000 faf1 	bl	8007e7c <_vfiprintf_r>
 800789a:	b003      	add	sp, #12
 800789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a0:	b004      	add	sp, #16
 80078a2:	4770      	bx	lr
 80078a4:	20000020 	.word	0x20000020

080078a8 <_puts_r>:
 80078a8:	6a03      	ldr	r3, [r0, #32]
 80078aa:	b570      	push	{r4, r5, r6, lr}
 80078ac:	6884      	ldr	r4, [r0, #8]
 80078ae:	4605      	mov	r5, r0
 80078b0:	460e      	mov	r6, r1
 80078b2:	b90b      	cbnz	r3, 80078b8 <_puts_r+0x10>
 80078b4:	f7ff ffb0 	bl	8007818 <__sinit>
 80078b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078ba:	07db      	lsls	r3, r3, #31
 80078bc:	d405      	bmi.n	80078ca <_puts_r+0x22>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	0598      	lsls	r0, r3, #22
 80078c2:	d402      	bmi.n	80078ca <_puts_r+0x22>
 80078c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078c6:	f000 fa62 	bl	8007d8e <__retarget_lock_acquire_recursive>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	0719      	lsls	r1, r3, #28
 80078ce:	d502      	bpl.n	80078d6 <_puts_r+0x2e>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d135      	bne.n	8007942 <_puts_r+0x9a>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 f979 	bl	8007bd0 <__swsetup_r>
 80078de:	b380      	cbz	r0, 8007942 <_puts_r+0x9a>
 80078e0:	f04f 35ff 	mov.w	r5, #4294967295
 80078e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078e6:	07da      	lsls	r2, r3, #31
 80078e8:	d405      	bmi.n	80078f6 <_puts_r+0x4e>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	059b      	lsls	r3, r3, #22
 80078ee:	d402      	bmi.n	80078f6 <_puts_r+0x4e>
 80078f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078f2:	f000 fa4d 	bl	8007d90 <__retarget_lock_release_recursive>
 80078f6:	4628      	mov	r0, r5
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da04      	bge.n	8007908 <_puts_r+0x60>
 80078fe:	69a2      	ldr	r2, [r4, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	dc17      	bgt.n	8007934 <_puts_r+0x8c>
 8007904:	290a      	cmp	r1, #10
 8007906:	d015      	beq.n	8007934 <_puts_r+0x8c>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	7019      	strb	r1, [r3, #0]
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007916:	3b01      	subs	r3, #1
 8007918:	60a3      	str	r3, [r4, #8]
 800791a:	2900      	cmp	r1, #0
 800791c:	d1ed      	bne.n	80078fa <_puts_r+0x52>
 800791e:	2b00      	cmp	r3, #0
 8007920:	da11      	bge.n	8007946 <_puts_r+0x9e>
 8007922:	4622      	mov	r2, r4
 8007924:	210a      	movs	r1, #10
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f913 	bl	8007b52 <__swbuf_r>
 800792c:	3001      	adds	r0, #1
 800792e:	d0d7      	beq.n	80078e0 <_puts_r+0x38>
 8007930:	250a      	movs	r5, #10
 8007932:	e7d7      	b.n	80078e4 <_puts_r+0x3c>
 8007934:	4622      	mov	r2, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f000 f90b 	bl	8007b52 <__swbuf_r>
 800793c:	3001      	adds	r0, #1
 800793e:	d1e7      	bne.n	8007910 <_puts_r+0x68>
 8007940:	e7ce      	b.n	80078e0 <_puts_r+0x38>
 8007942:	3e01      	subs	r6, #1
 8007944:	e7e4      	b.n	8007910 <_puts_r+0x68>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	220a      	movs	r2, #10
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e7ee      	b.n	8007930 <_puts_r+0x88>
	...

08007954 <puts>:
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <puts+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bfa5 	b.w	80078a8 <_puts_r>
 800795e:	bf00      	nop
 8007960:	20000020 	.word	0x20000020

08007964 <setvbuf>:
 8007964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007968:	461d      	mov	r5, r3
 800796a:	4b57      	ldr	r3, [pc, #348]	@ (8007ac8 <setvbuf+0x164>)
 800796c:	681f      	ldr	r7, [r3, #0]
 800796e:	4604      	mov	r4, r0
 8007970:	460e      	mov	r6, r1
 8007972:	4690      	mov	r8, r2
 8007974:	b127      	cbz	r7, 8007980 <setvbuf+0x1c>
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	b913      	cbnz	r3, 8007980 <setvbuf+0x1c>
 800797a:	4638      	mov	r0, r7
 800797c:	f7ff ff4c 	bl	8007818 <__sinit>
 8007980:	f1b8 0f02 	cmp.w	r8, #2
 8007984:	d006      	beq.n	8007994 <setvbuf+0x30>
 8007986:	f1b8 0f01 	cmp.w	r8, #1
 800798a:	f200 809a 	bhi.w	8007ac2 <setvbuf+0x15e>
 800798e:	2d00      	cmp	r5, #0
 8007990:	f2c0 8097 	blt.w	8007ac2 <setvbuf+0x15e>
 8007994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007996:	07d9      	lsls	r1, r3, #31
 8007998:	d405      	bmi.n	80079a6 <setvbuf+0x42>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	059a      	lsls	r2, r3, #22
 800799e:	d402      	bmi.n	80079a6 <setvbuf+0x42>
 80079a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a2:	f000 f9f4 	bl	8007d8e <__retarget_lock_acquire_recursive>
 80079a6:	4621      	mov	r1, r4
 80079a8:	4638      	mov	r0, r7
 80079aa:	f000 fd91 	bl	80084d0 <_fflush_r>
 80079ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079b0:	b141      	cbz	r1, 80079c4 <setvbuf+0x60>
 80079b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079b6:	4299      	cmp	r1, r3
 80079b8:	d002      	beq.n	80079c0 <setvbuf+0x5c>
 80079ba:	4638      	mov	r0, r7
 80079bc:	f000 f9ea 	bl	8007d94 <_free_r>
 80079c0:	2300      	movs	r3, #0
 80079c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079c4:	2300      	movs	r3, #0
 80079c6:	61a3      	str	r3, [r4, #24]
 80079c8:	6063      	str	r3, [r4, #4]
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	061b      	lsls	r3, r3, #24
 80079ce:	d503      	bpl.n	80079d8 <setvbuf+0x74>
 80079d0:	6921      	ldr	r1, [r4, #16]
 80079d2:	4638      	mov	r0, r7
 80079d4:	f000 f9de 	bl	8007d94 <_free_r>
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	f1b8 0f02 	cmp.w	r8, #2
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	d061      	beq.n	8007aae <setvbuf+0x14a>
 80079ea:	ab01      	add	r3, sp, #4
 80079ec:	466a      	mov	r2, sp
 80079ee:	4621      	mov	r1, r4
 80079f0:	4638      	mov	r0, r7
 80079f2:	f000 fd95 	bl	8008520 <__swhatbuf_r>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	4318      	orrs	r0, r3
 80079fa:	81a0      	strh	r0, [r4, #12]
 80079fc:	bb2d      	cbnz	r5, 8007a4a <setvbuf+0xe6>
 80079fe:	9d00      	ldr	r5, [sp, #0]
 8007a00:	4628      	mov	r0, r5
 8007a02:	f7ff fdc7 	bl	8007594 <malloc>
 8007a06:	4606      	mov	r6, r0
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d152      	bne.n	8007ab2 <setvbuf+0x14e>
 8007a0c:	f8dd 9000 	ldr.w	r9, [sp]
 8007a10:	45a9      	cmp	r9, r5
 8007a12:	d140      	bne.n	8007a96 <setvbuf+0x132>
 8007a14:	f04f 35ff 	mov.w	r5, #4294967295
 8007a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1c:	f043 0202 	orr.w	r2, r3, #2
 8007a20:	81a2      	strh	r2, [r4, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	60a2      	str	r2, [r4, #8]
 8007a26:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007a2a:	6022      	str	r2, [r4, #0]
 8007a2c:	6122      	str	r2, [r4, #16]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	6162      	str	r2, [r4, #20]
 8007a32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a34:	07d6      	lsls	r6, r2, #31
 8007a36:	d404      	bmi.n	8007a42 <setvbuf+0xde>
 8007a38:	0598      	lsls	r0, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <setvbuf+0xde>
 8007a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a3e:	f000 f9a7 	bl	8007d90 <__retarget_lock_release_recursive>
 8007a42:	4628      	mov	r0, r5
 8007a44:	b003      	add	sp, #12
 8007a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	d0d8      	beq.n	8007a00 <setvbuf+0x9c>
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	b913      	cbnz	r3, 8007a58 <setvbuf+0xf4>
 8007a52:	4638      	mov	r0, r7
 8007a54:	f7ff fee0 	bl	8007818 <__sinit>
 8007a58:	f1b8 0f01 	cmp.w	r8, #1
 8007a5c:	bf08      	it	eq
 8007a5e:	89a3      	ldrheq	r3, [r4, #12]
 8007a60:	6026      	str	r6, [r4, #0]
 8007a62:	bf04      	itt	eq
 8007a64:	f043 0301 	orreq.w	r3, r3, #1
 8007a68:	81a3      	strheq	r3, [r4, #12]
 8007a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6e:	f013 0208 	ands.w	r2, r3, #8
 8007a72:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007a76:	d01e      	beq.n	8007ab6 <setvbuf+0x152>
 8007a78:	07d9      	lsls	r1, r3, #31
 8007a7a:	bf41      	itttt	mi
 8007a7c:	2200      	movmi	r2, #0
 8007a7e:	426d      	negmi	r5, r5
 8007a80:	60a2      	strmi	r2, [r4, #8]
 8007a82:	61a5      	strmi	r5, [r4, #24]
 8007a84:	bf58      	it	pl
 8007a86:	60a5      	strpl	r5, [r4, #8]
 8007a88:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a8a:	07d2      	lsls	r2, r2, #31
 8007a8c:	d401      	bmi.n	8007a92 <setvbuf+0x12e>
 8007a8e:	059b      	lsls	r3, r3, #22
 8007a90:	d513      	bpl.n	8007aba <setvbuf+0x156>
 8007a92:	2500      	movs	r5, #0
 8007a94:	e7d5      	b.n	8007a42 <setvbuf+0xde>
 8007a96:	4648      	mov	r0, r9
 8007a98:	f7ff fd7c 	bl	8007594 <malloc>
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d0b8      	beq.n	8007a14 <setvbuf+0xb0>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	464d      	mov	r5, r9
 8007aac:	e7cf      	b.n	8007a4e <setvbuf+0xea>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	e7b2      	b.n	8007a18 <setvbuf+0xb4>
 8007ab2:	46a9      	mov	r9, r5
 8007ab4:	e7f5      	b.n	8007aa2 <setvbuf+0x13e>
 8007ab6:	60a2      	str	r2, [r4, #8]
 8007ab8:	e7e6      	b.n	8007a88 <setvbuf+0x124>
 8007aba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007abc:	f000 f968 	bl	8007d90 <__retarget_lock_release_recursive>
 8007ac0:	e7e7      	b.n	8007a92 <setvbuf+0x12e>
 8007ac2:	f04f 35ff 	mov.w	r5, #4294967295
 8007ac6:	e7bc      	b.n	8007a42 <setvbuf+0xde>
 8007ac8:	20000020 	.word	0x20000020

08007acc <__sread>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	f000 f8fc 	bl	8007cd0 <_read_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	bfab      	itete	ge
 8007adc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ade:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae0:	181b      	addge	r3, r3, r0
 8007ae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ae6:	bfac      	ite	ge
 8007ae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aea:	81a3      	strhlt	r3, [r4, #12]
 8007aec:	bd10      	pop	{r4, pc}

08007aee <__swrite>:
 8007aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	461f      	mov	r7, r3
 8007af4:	898b      	ldrh	r3, [r1, #12]
 8007af6:	05db      	lsls	r3, r3, #23
 8007af8:	4605      	mov	r5, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	4616      	mov	r6, r2
 8007afe:	d505      	bpl.n	8007b0c <__swrite+0x1e>
 8007b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b04:	2302      	movs	r3, #2
 8007b06:	2200      	movs	r2, #0
 8007b08:	f000 f8d0 	bl	8007cac <_lseek_r>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	4632      	mov	r2, r6
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	f000 b8f7 	b.w	8007d14 <_write_r>

08007b26 <__sseek>:
 8007b26:	b510      	push	{r4, lr}
 8007b28:	460c      	mov	r4, r1
 8007b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2e:	f000 f8bd 	bl	8007cac <_lseek_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	bf15      	itete	ne
 8007b38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b42:	81a3      	strheq	r3, [r4, #12]
 8007b44:	bf18      	it	ne
 8007b46:	81a3      	strhne	r3, [r4, #12]
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <__sclose>:
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 b89d 	b.w	8007c8c <_close_r>

08007b52 <__swbuf_r>:
 8007b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b54:	460e      	mov	r6, r1
 8007b56:	4614      	mov	r4, r2
 8007b58:	4605      	mov	r5, r0
 8007b5a:	b118      	cbz	r0, 8007b64 <__swbuf_r+0x12>
 8007b5c:	6a03      	ldr	r3, [r0, #32]
 8007b5e:	b90b      	cbnz	r3, 8007b64 <__swbuf_r+0x12>
 8007b60:	f7ff fe5a 	bl	8007818 <__sinit>
 8007b64:	69a3      	ldr	r3, [r4, #24]
 8007b66:	60a3      	str	r3, [r4, #8]
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	071a      	lsls	r2, r3, #28
 8007b6c:	d501      	bpl.n	8007b72 <__swbuf_r+0x20>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	b943      	cbnz	r3, 8007b84 <__swbuf_r+0x32>
 8007b72:	4621      	mov	r1, r4
 8007b74:	4628      	mov	r0, r5
 8007b76:	f000 f82b 	bl	8007bd0 <__swsetup_r>
 8007b7a:	b118      	cbz	r0, 8007b84 <__swbuf_r+0x32>
 8007b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b80:	4638      	mov	r0, r7
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	6922      	ldr	r2, [r4, #16]
 8007b88:	1a98      	subs	r0, r3, r2
 8007b8a:	6963      	ldr	r3, [r4, #20]
 8007b8c:	b2f6      	uxtb	r6, r6
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	4637      	mov	r7, r6
 8007b92:	dc05      	bgt.n	8007ba0 <__swbuf_r+0x4e>
 8007b94:	4621      	mov	r1, r4
 8007b96:	4628      	mov	r0, r5
 8007b98:	f000 fc9a 	bl	80084d0 <_fflush_r>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1ed      	bne.n	8007b7c <__swbuf_r+0x2a>
 8007ba0:	68a3      	ldr	r3, [r4, #8]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	60a3      	str	r3, [r4, #8]
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	701e      	strb	r6, [r3, #0]
 8007bae:	6962      	ldr	r2, [r4, #20]
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d004      	beq.n	8007bc0 <__swbuf_r+0x6e>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	07db      	lsls	r3, r3, #31
 8007bba:	d5e1      	bpl.n	8007b80 <__swbuf_r+0x2e>
 8007bbc:	2e0a      	cmp	r6, #10
 8007bbe:	d1df      	bne.n	8007b80 <__swbuf_r+0x2e>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 fc84 	bl	80084d0 <_fflush_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d0d9      	beq.n	8007b80 <__swbuf_r+0x2e>
 8007bcc:	e7d6      	b.n	8007b7c <__swbuf_r+0x2a>
	...

08007bd0 <__swsetup_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4b29      	ldr	r3, [pc, #164]	@ (8007c78 <__swsetup_r+0xa8>)
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	460c      	mov	r4, r1
 8007bda:	b118      	cbz	r0, 8007be4 <__swsetup_r+0x14>
 8007bdc:	6a03      	ldr	r3, [r0, #32]
 8007bde:	b90b      	cbnz	r3, 8007be4 <__swsetup_r+0x14>
 8007be0:	f7ff fe1a 	bl	8007818 <__sinit>
 8007be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be8:	0719      	lsls	r1, r3, #28
 8007bea:	d422      	bmi.n	8007c32 <__swsetup_r+0x62>
 8007bec:	06da      	lsls	r2, r3, #27
 8007bee:	d407      	bmi.n	8007c00 <__swsetup_r+0x30>
 8007bf0:	2209      	movs	r2, #9
 8007bf2:	602a      	str	r2, [r5, #0]
 8007bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfe:	e033      	b.n	8007c68 <__swsetup_r+0x98>
 8007c00:	0758      	lsls	r0, r3, #29
 8007c02:	d512      	bpl.n	8007c2a <__swsetup_r+0x5a>
 8007c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c06:	b141      	cbz	r1, 8007c1a <__swsetup_r+0x4a>
 8007c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	d002      	beq.n	8007c16 <__swsetup_r+0x46>
 8007c10:	4628      	mov	r0, r5
 8007c12:	f000 f8bf 	bl	8007d94 <_free_r>
 8007c16:	2300      	movs	r3, #0
 8007c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	2300      	movs	r3, #0
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f043 0308 	orr.w	r3, r3, #8
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	b94b      	cbnz	r3, 8007c4a <__swsetup_r+0x7a>
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c40:	d003      	beq.n	8007c4a <__swsetup_r+0x7a>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fc91 	bl	800856c <__smakebuf_r>
 8007c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4e:	f013 0201 	ands.w	r2, r3, #1
 8007c52:	d00a      	beq.n	8007c6a <__swsetup_r+0x9a>
 8007c54:	2200      	movs	r2, #0
 8007c56:	60a2      	str	r2, [r4, #8]
 8007c58:	6962      	ldr	r2, [r4, #20]
 8007c5a:	4252      	negs	r2, r2
 8007c5c:	61a2      	str	r2, [r4, #24]
 8007c5e:	6922      	ldr	r2, [r4, #16]
 8007c60:	b942      	cbnz	r2, 8007c74 <__swsetup_r+0xa4>
 8007c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c66:	d1c5      	bne.n	8007bf4 <__swsetup_r+0x24>
 8007c68:	bd38      	pop	{r3, r4, r5, pc}
 8007c6a:	0799      	lsls	r1, r3, #30
 8007c6c:	bf58      	it	pl
 8007c6e:	6962      	ldrpl	r2, [r4, #20]
 8007c70:	60a2      	str	r2, [r4, #8]
 8007c72:	e7f4      	b.n	8007c5e <__swsetup_r+0x8e>
 8007c74:	2000      	movs	r0, #0
 8007c76:	e7f7      	b.n	8007c68 <__swsetup_r+0x98>
 8007c78:	20000020 	.word	0x20000020

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <_close_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ca8 <_close_r+0x1c>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f7f9 fa99 	bl	80011ce <_close>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_close_r+0x1a>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_close_r+0x1a>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	20000474 	.word	0x20000474

08007cac <_lseek_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d07      	ldr	r5, [pc, #28]	@ (8007ccc <_lseek_r+0x20>)
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	4608      	mov	r0, r1
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	602a      	str	r2, [r5, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f7f9 faae 	bl	800121c <_lseek>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_lseek_r+0x1e>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_lseek_r+0x1e>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	20000474 	.word	0x20000474

08007cd0 <_read_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d07      	ldr	r5, [pc, #28]	@ (8007cf0 <_read_r+0x20>)
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	4608      	mov	r0, r1
 8007cd8:	4611      	mov	r1, r2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	602a      	str	r2, [r5, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f7f9 fa3c 	bl	800115c <_read>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_read_r+0x1e>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_read_r+0x1e>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	20000474 	.word	0x20000474

08007cf4 <_sbrk_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d06      	ldr	r5, [pc, #24]	@ (8007d10 <_sbrk_r+0x1c>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	f7f9 fa9a 	bl	8001238 <_sbrk>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_sbrk_r+0x1a>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_sbrk_r+0x1a>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000474 	.word	0x20000474

08007d14 <_write_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d07      	ldr	r5, [pc, #28]	@ (8007d34 <_write_r+0x20>)
 8007d18:	4604      	mov	r4, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	602a      	str	r2, [r5, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f7f9 fa37 	bl	8001196 <_write>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_write_r+0x1e>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_write_r+0x1e>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20000474 	.word	0x20000474

08007d38 <__errno>:
 8007d38:	4b01      	ldr	r3, [pc, #4]	@ (8007d40 <__errno+0x8>)
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20000020 	.word	0x20000020

08007d44 <__libc_init_array>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4d0d      	ldr	r5, [pc, #52]	@ (8007d7c <__libc_init_array+0x38>)
 8007d48:	4c0d      	ldr	r4, [pc, #52]	@ (8007d80 <__libc_init_array+0x3c>)
 8007d4a:	1b64      	subs	r4, r4, r5
 8007d4c:	10a4      	asrs	r4, r4, #2
 8007d4e:	2600      	movs	r6, #0
 8007d50:	42a6      	cmp	r6, r4
 8007d52:	d109      	bne.n	8007d68 <__libc_init_array+0x24>
 8007d54:	4d0b      	ldr	r5, [pc, #44]	@ (8007d84 <__libc_init_array+0x40>)
 8007d56:	4c0c      	ldr	r4, [pc, #48]	@ (8007d88 <__libc_init_array+0x44>)
 8007d58:	f000 fc66 	bl	8008628 <_init>
 8007d5c:	1b64      	subs	r4, r4, r5
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	2600      	movs	r6, #0
 8007d62:	42a6      	cmp	r6, r4
 8007d64:	d105      	bne.n	8007d72 <__libc_init_array+0x2e>
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6c:	4798      	blx	r3
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7ee      	b.n	8007d50 <__libc_init_array+0xc>
 8007d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d76:	4798      	blx	r3
 8007d78:	3601      	adds	r6, #1
 8007d7a:	e7f2      	b.n	8007d62 <__libc_init_array+0x1e>
 8007d7c:	0800878c 	.word	0x0800878c
 8007d80:	0800878c 	.word	0x0800878c
 8007d84:	0800878c 	.word	0x0800878c
 8007d88:	08008790 	.word	0x08008790

08007d8c <__retarget_lock_init_recursive>:
 8007d8c:	4770      	bx	lr

08007d8e <__retarget_lock_acquire_recursive>:
 8007d8e:	4770      	bx	lr

08007d90 <__retarget_lock_release_recursive>:
 8007d90:	4770      	bx	lr
	...

08007d94 <_free_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4605      	mov	r5, r0
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	d041      	beq.n	8007e20 <_free_r+0x8c>
 8007d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da0:	1f0c      	subs	r4, r1, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bfb8      	it	lt
 8007da6:	18e4      	addlt	r4, r4, r3
 8007da8:	f7ff fc9e 	bl	80076e8 <__malloc_lock>
 8007dac:	4a1d      	ldr	r2, [pc, #116]	@ (8007e24 <_free_r+0x90>)
 8007dae:	6813      	ldr	r3, [r2, #0]
 8007db0:	b933      	cbnz	r3, 8007dc0 <_free_r+0x2c>
 8007db2:	6063      	str	r3, [r4, #4]
 8007db4:	6014      	str	r4, [r2, #0]
 8007db6:	4628      	mov	r0, r5
 8007db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dbc:	f7ff bc9a 	b.w	80076f4 <__malloc_unlock>
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	d908      	bls.n	8007dd6 <_free_r+0x42>
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	1821      	adds	r1, r4, r0
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	bf01      	itttt	eq
 8007dcc:	6819      	ldreq	r1, [r3, #0]
 8007dce:	685b      	ldreq	r3, [r3, #4]
 8007dd0:	1809      	addeq	r1, r1, r0
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	e7ed      	b.n	8007db2 <_free_r+0x1e>
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	b10b      	cbz	r3, 8007de0 <_free_r+0x4c>
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	d9fa      	bls.n	8007dd6 <_free_r+0x42>
 8007de0:	6811      	ldr	r1, [r2, #0]
 8007de2:	1850      	adds	r0, r2, r1
 8007de4:	42a0      	cmp	r0, r4
 8007de6:	d10b      	bne.n	8007e00 <_free_r+0x6c>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	4401      	add	r1, r0
 8007dec:	1850      	adds	r0, r2, r1
 8007dee:	4283      	cmp	r3, r0
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	d1e0      	bne.n	8007db6 <_free_r+0x22>
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	6053      	str	r3, [r2, #4]
 8007dfa:	4408      	add	r0, r1
 8007dfc:	6010      	str	r0, [r2, #0]
 8007dfe:	e7da      	b.n	8007db6 <_free_r+0x22>
 8007e00:	d902      	bls.n	8007e08 <_free_r+0x74>
 8007e02:	230c      	movs	r3, #12
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	e7d6      	b.n	8007db6 <_free_r+0x22>
 8007e08:	6820      	ldr	r0, [r4, #0]
 8007e0a:	1821      	adds	r1, r4, r0
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	bf04      	itt	eq
 8007e10:	6819      	ldreq	r1, [r3, #0]
 8007e12:	685b      	ldreq	r3, [r3, #4]
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	bf04      	itt	eq
 8007e18:	1809      	addeq	r1, r1, r0
 8007e1a:	6021      	streq	r1, [r4, #0]
 8007e1c:	6054      	str	r4, [r2, #4]
 8007e1e:	e7ca      	b.n	8007db6 <_free_r+0x22>
 8007e20:	bd38      	pop	{r3, r4, r5, pc}
 8007e22:	bf00      	nop
 8007e24:	20000334 	.word	0x20000334

08007e28 <__sfputc_r>:
 8007e28:	6893      	ldr	r3, [r2, #8]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	b410      	push	{r4}
 8007e30:	6093      	str	r3, [r2, #8]
 8007e32:	da08      	bge.n	8007e46 <__sfputc_r+0x1e>
 8007e34:	6994      	ldr	r4, [r2, #24]
 8007e36:	42a3      	cmp	r3, r4
 8007e38:	db01      	blt.n	8007e3e <__sfputc_r+0x16>
 8007e3a:	290a      	cmp	r1, #10
 8007e3c:	d103      	bne.n	8007e46 <__sfputc_r+0x1e>
 8007e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e42:	f7ff be86 	b.w	8007b52 <__swbuf_r>
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	1c58      	adds	r0, r3, #1
 8007e4a:	6010      	str	r0, [r2, #0]
 8007e4c:	7019      	strb	r1, [r3, #0]
 8007e4e:	4608      	mov	r0, r1
 8007e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <__sfputs_r>:
 8007e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e58:	4606      	mov	r6, r0
 8007e5a:	460f      	mov	r7, r1
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	18d5      	adds	r5, r2, r3
 8007e60:	42ac      	cmp	r4, r5
 8007e62:	d101      	bne.n	8007e68 <__sfputs_r+0x12>
 8007e64:	2000      	movs	r0, #0
 8007e66:	e007      	b.n	8007e78 <__sfputs_r+0x22>
 8007e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6c:	463a      	mov	r2, r7
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ffda 	bl	8007e28 <__sfputc_r>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d1f3      	bne.n	8007e60 <__sfputs_r+0xa>
 8007e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e7c <_vfiprintf_r>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	460d      	mov	r5, r1
 8007e82:	b09d      	sub	sp, #116	@ 0x74
 8007e84:	4614      	mov	r4, r2
 8007e86:	4698      	mov	r8, r3
 8007e88:	4606      	mov	r6, r0
 8007e8a:	b118      	cbz	r0, 8007e94 <_vfiprintf_r+0x18>
 8007e8c:	6a03      	ldr	r3, [r0, #32]
 8007e8e:	b90b      	cbnz	r3, 8007e94 <_vfiprintf_r+0x18>
 8007e90:	f7ff fcc2 	bl	8007818 <__sinit>
 8007e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e96:	07d9      	lsls	r1, r3, #31
 8007e98:	d405      	bmi.n	8007ea6 <_vfiprintf_r+0x2a>
 8007e9a:	89ab      	ldrh	r3, [r5, #12]
 8007e9c:	059a      	lsls	r2, r3, #22
 8007e9e:	d402      	bmi.n	8007ea6 <_vfiprintf_r+0x2a>
 8007ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ea2:	f7ff ff74 	bl	8007d8e <__retarget_lock_acquire_recursive>
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	071b      	lsls	r3, r3, #28
 8007eaa:	d501      	bpl.n	8007eb0 <_vfiprintf_r+0x34>
 8007eac:	692b      	ldr	r3, [r5, #16]
 8007eae:	b99b      	cbnz	r3, 8007ed8 <_vfiprintf_r+0x5c>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff fe8c 	bl	8007bd0 <__swsetup_r>
 8007eb8:	b170      	cbz	r0, 8007ed8 <_vfiprintf_r+0x5c>
 8007eba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ebc:	07dc      	lsls	r4, r3, #31
 8007ebe:	d504      	bpl.n	8007eca <_vfiprintf_r+0x4e>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	b01d      	add	sp, #116	@ 0x74
 8007ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	0598      	lsls	r0, r3, #22
 8007ece:	d4f7      	bmi.n	8007ec0 <_vfiprintf_r+0x44>
 8007ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ed2:	f7ff ff5d 	bl	8007d90 <__retarget_lock_release_recursive>
 8007ed6:	e7f3      	b.n	8007ec0 <_vfiprintf_r+0x44>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007edc:	2320      	movs	r3, #32
 8007ede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee6:	2330      	movs	r3, #48	@ 0x30
 8007ee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008098 <_vfiprintf_r+0x21c>
 8007eec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ef0:	f04f 0901 	mov.w	r9, #1
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	469a      	mov	sl, r3
 8007ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007efc:	b10a      	cbz	r2, 8007f02 <_vfiprintf_r+0x86>
 8007efe:	2a25      	cmp	r2, #37	@ 0x25
 8007f00:	d1f9      	bne.n	8007ef6 <_vfiprintf_r+0x7a>
 8007f02:	ebba 0b04 	subs.w	fp, sl, r4
 8007f06:	d00b      	beq.n	8007f20 <_vfiprintf_r+0xa4>
 8007f08:	465b      	mov	r3, fp
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7ff ffa1 	bl	8007e56 <__sfputs_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	f000 80a7 	beq.w	8008068 <_vfiprintf_r+0x1ec>
 8007f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f1c:	445a      	add	r2, fp
 8007f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f20:	f89a 3000 	ldrb.w	r3, [sl]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 809f 	beq.w	8008068 <_vfiprintf_r+0x1ec>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f34:	f10a 0a01 	add.w	sl, sl, #1
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f40:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f42:	4654      	mov	r4, sl
 8007f44:	2205      	movs	r2, #5
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	4853      	ldr	r0, [pc, #332]	@ (8008098 <_vfiprintf_r+0x21c>)
 8007f4c:	f7f8 f918 	bl	8000180 <memchr>
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	b9d8      	cbnz	r0, 8007f8c <_vfiprintf_r+0x110>
 8007f54:	06d1      	lsls	r1, r2, #27
 8007f56:	bf44      	itt	mi
 8007f58:	2320      	movmi	r3, #32
 8007f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f5e:	0713      	lsls	r3, r2, #28
 8007f60:	bf44      	itt	mi
 8007f62:	232b      	movmi	r3, #43	@ 0x2b
 8007f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f68:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6e:	d015      	beq.n	8007f9c <_vfiprintf_r+0x120>
 8007f70:	9a07      	ldr	r2, [sp, #28]
 8007f72:	4654      	mov	r4, sl
 8007f74:	2000      	movs	r0, #0
 8007f76:	f04f 0c0a 	mov.w	ip, #10
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f80:	3b30      	subs	r3, #48	@ 0x30
 8007f82:	2b09      	cmp	r3, #9
 8007f84:	d94b      	bls.n	800801e <_vfiprintf_r+0x1a2>
 8007f86:	b1b0      	cbz	r0, 8007fb6 <_vfiprintf_r+0x13a>
 8007f88:	9207      	str	r2, [sp, #28]
 8007f8a:	e014      	b.n	8007fb6 <_vfiprintf_r+0x13a>
 8007f8c:	eba0 0308 	sub.w	r3, r0, r8
 8007f90:	fa09 f303 	lsl.w	r3, r9, r3
 8007f94:	4313      	orrs	r3, r2
 8007f96:	9304      	str	r3, [sp, #16]
 8007f98:	46a2      	mov	sl, r4
 8007f9a:	e7d2      	b.n	8007f42 <_vfiprintf_r+0xc6>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	1d19      	adds	r1, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	9103      	str	r1, [sp, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbb      	ittet	lt
 8007fa8:	425b      	neglt	r3, r3
 8007faa:	f042 0202 	orrlt.w	r2, r2, #2
 8007fae:	9307      	strge	r3, [sp, #28]
 8007fb0:	9307      	strlt	r3, [sp, #28]
 8007fb2:	bfb8      	it	lt
 8007fb4:	9204      	strlt	r2, [sp, #16]
 8007fb6:	7823      	ldrb	r3, [r4, #0]
 8007fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fba:	d10a      	bne.n	8007fd2 <_vfiprintf_r+0x156>
 8007fbc:	7863      	ldrb	r3, [r4, #1]
 8007fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc0:	d132      	bne.n	8008028 <_vfiprintf_r+0x1ac>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	1d1a      	adds	r2, r3, #4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	9203      	str	r2, [sp, #12]
 8007fca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fce:	3402      	adds	r4, #2
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080a8 <_vfiprintf_r+0x22c>
 8007fd6:	7821      	ldrb	r1, [r4, #0]
 8007fd8:	2203      	movs	r2, #3
 8007fda:	4650      	mov	r0, sl
 8007fdc:	f7f8 f8d0 	bl	8000180 <memchr>
 8007fe0:	b138      	cbz	r0, 8007ff2 <_vfiprintf_r+0x176>
 8007fe2:	9b04      	ldr	r3, [sp, #16]
 8007fe4:	eba0 000a 	sub.w	r0, r0, sl
 8007fe8:	2240      	movs	r2, #64	@ 0x40
 8007fea:	4082      	lsls	r2, r0
 8007fec:	4313      	orrs	r3, r2
 8007fee:	3401      	adds	r4, #1
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff6:	4829      	ldr	r0, [pc, #164]	@ (800809c <_vfiprintf_r+0x220>)
 8007ff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	f7f8 f8bf 	bl	8000180 <memchr>
 8008002:	2800      	cmp	r0, #0
 8008004:	d03f      	beq.n	8008086 <_vfiprintf_r+0x20a>
 8008006:	4b26      	ldr	r3, [pc, #152]	@ (80080a0 <_vfiprintf_r+0x224>)
 8008008:	bb1b      	cbnz	r3, 8008052 <_vfiprintf_r+0x1d6>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	3307      	adds	r3, #7
 800800e:	f023 0307 	bic.w	r3, r3, #7
 8008012:	3308      	adds	r3, #8
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008018:	443b      	add	r3, r7
 800801a:	9309      	str	r3, [sp, #36]	@ 0x24
 800801c:	e76a      	b.n	8007ef4 <_vfiprintf_r+0x78>
 800801e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008022:	460c      	mov	r4, r1
 8008024:	2001      	movs	r0, #1
 8008026:	e7a8      	b.n	8007f7a <_vfiprintf_r+0xfe>
 8008028:	2300      	movs	r3, #0
 800802a:	3401      	adds	r4, #1
 800802c:	9305      	str	r3, [sp, #20]
 800802e:	4619      	mov	r1, r3
 8008030:	f04f 0c0a 	mov.w	ip, #10
 8008034:	4620      	mov	r0, r4
 8008036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800803a:	3a30      	subs	r2, #48	@ 0x30
 800803c:	2a09      	cmp	r2, #9
 800803e:	d903      	bls.n	8008048 <_vfiprintf_r+0x1cc>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0c6      	beq.n	8007fd2 <_vfiprintf_r+0x156>
 8008044:	9105      	str	r1, [sp, #20]
 8008046:	e7c4      	b.n	8007fd2 <_vfiprintf_r+0x156>
 8008048:	fb0c 2101 	mla	r1, ip, r1, r2
 800804c:	4604      	mov	r4, r0
 800804e:	2301      	movs	r3, #1
 8008050:	e7f0      	b.n	8008034 <_vfiprintf_r+0x1b8>
 8008052:	ab03      	add	r3, sp, #12
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	462a      	mov	r2, r5
 8008058:	4b12      	ldr	r3, [pc, #72]	@ (80080a4 <_vfiprintf_r+0x228>)
 800805a:	a904      	add	r1, sp, #16
 800805c:	4630      	mov	r0, r6
 800805e:	f3af 8000 	nop.w
 8008062:	4607      	mov	r7, r0
 8008064:	1c78      	adds	r0, r7, #1
 8008066:	d1d6      	bne.n	8008016 <_vfiprintf_r+0x19a>
 8008068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800806a:	07d9      	lsls	r1, r3, #31
 800806c:	d405      	bmi.n	800807a <_vfiprintf_r+0x1fe>
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	059a      	lsls	r2, r3, #22
 8008072:	d402      	bmi.n	800807a <_vfiprintf_r+0x1fe>
 8008074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008076:	f7ff fe8b 	bl	8007d90 <__retarget_lock_release_recursive>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	065b      	lsls	r3, r3, #25
 800807e:	f53f af1f 	bmi.w	8007ec0 <_vfiprintf_r+0x44>
 8008082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008084:	e71e      	b.n	8007ec4 <_vfiprintf_r+0x48>
 8008086:	ab03      	add	r3, sp, #12
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	462a      	mov	r2, r5
 800808c:	4b05      	ldr	r3, [pc, #20]	@ (80080a4 <_vfiprintf_r+0x228>)
 800808e:	a904      	add	r1, sp, #16
 8008090:	4630      	mov	r0, r6
 8008092:	f000 f879 	bl	8008188 <_printf_i>
 8008096:	e7e4      	b.n	8008062 <_vfiprintf_r+0x1e6>
 8008098:	08008750 	.word	0x08008750
 800809c:	0800875a 	.word	0x0800875a
 80080a0:	00000000 	.word	0x00000000
 80080a4:	08007e57 	.word	0x08007e57
 80080a8:	08008756 	.word	0x08008756

080080ac <_printf_common>:
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	4616      	mov	r6, r2
 80080b2:	4698      	mov	r8, r3
 80080b4:	688a      	ldr	r2, [r1, #8]
 80080b6:	690b      	ldr	r3, [r1, #16]
 80080b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080bc:	4293      	cmp	r3, r2
 80080be:	bfb8      	it	lt
 80080c0:	4613      	movlt	r3, r2
 80080c2:	6033      	str	r3, [r6, #0]
 80080c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080c8:	4607      	mov	r7, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	b10a      	cbz	r2, 80080d2 <_printf_common+0x26>
 80080ce:	3301      	adds	r3, #1
 80080d0:	6033      	str	r3, [r6, #0]
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	0699      	lsls	r1, r3, #26
 80080d6:	bf42      	ittt	mi
 80080d8:	6833      	ldrmi	r3, [r6, #0]
 80080da:	3302      	addmi	r3, #2
 80080dc:	6033      	strmi	r3, [r6, #0]
 80080de:	6825      	ldr	r5, [r4, #0]
 80080e0:	f015 0506 	ands.w	r5, r5, #6
 80080e4:	d106      	bne.n	80080f4 <_printf_common+0x48>
 80080e6:	f104 0a19 	add.w	sl, r4, #25
 80080ea:	68e3      	ldr	r3, [r4, #12]
 80080ec:	6832      	ldr	r2, [r6, #0]
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	42ab      	cmp	r3, r5
 80080f2:	dc26      	bgt.n	8008142 <_printf_common+0x96>
 80080f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080f8:	6822      	ldr	r2, [r4, #0]
 80080fa:	3b00      	subs	r3, #0
 80080fc:	bf18      	it	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	0692      	lsls	r2, r2, #26
 8008102:	d42b      	bmi.n	800815c <_printf_common+0xb0>
 8008104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008108:	4641      	mov	r1, r8
 800810a:	4638      	mov	r0, r7
 800810c:	47c8      	blx	r9
 800810e:	3001      	adds	r0, #1
 8008110:	d01e      	beq.n	8008150 <_printf_common+0xa4>
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	6922      	ldr	r2, [r4, #16]
 8008116:	f003 0306 	and.w	r3, r3, #6
 800811a:	2b04      	cmp	r3, #4
 800811c:	bf02      	ittt	eq
 800811e:	68e5      	ldreq	r5, [r4, #12]
 8008120:	6833      	ldreq	r3, [r6, #0]
 8008122:	1aed      	subeq	r5, r5, r3
 8008124:	68a3      	ldr	r3, [r4, #8]
 8008126:	bf0c      	ite	eq
 8008128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800812c:	2500      	movne	r5, #0
 800812e:	4293      	cmp	r3, r2
 8008130:	bfc4      	itt	gt
 8008132:	1a9b      	subgt	r3, r3, r2
 8008134:	18ed      	addgt	r5, r5, r3
 8008136:	2600      	movs	r6, #0
 8008138:	341a      	adds	r4, #26
 800813a:	42b5      	cmp	r5, r6
 800813c:	d11a      	bne.n	8008174 <_printf_common+0xc8>
 800813e:	2000      	movs	r0, #0
 8008140:	e008      	b.n	8008154 <_printf_common+0xa8>
 8008142:	2301      	movs	r3, #1
 8008144:	4652      	mov	r2, sl
 8008146:	4641      	mov	r1, r8
 8008148:	4638      	mov	r0, r7
 800814a:	47c8      	blx	r9
 800814c:	3001      	adds	r0, #1
 800814e:	d103      	bne.n	8008158 <_printf_common+0xac>
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008158:	3501      	adds	r5, #1
 800815a:	e7c6      	b.n	80080ea <_printf_common+0x3e>
 800815c:	18e1      	adds	r1, r4, r3
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	2030      	movs	r0, #48	@ 0x30
 8008162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008166:	4422      	add	r2, r4
 8008168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800816c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008170:	3302      	adds	r3, #2
 8008172:	e7c7      	b.n	8008104 <_printf_common+0x58>
 8008174:	2301      	movs	r3, #1
 8008176:	4622      	mov	r2, r4
 8008178:	4641      	mov	r1, r8
 800817a:	4638      	mov	r0, r7
 800817c:	47c8      	blx	r9
 800817e:	3001      	adds	r0, #1
 8008180:	d0e6      	beq.n	8008150 <_printf_common+0xa4>
 8008182:	3601      	adds	r6, #1
 8008184:	e7d9      	b.n	800813a <_printf_common+0x8e>
	...

08008188 <_printf_i>:
 8008188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	7e0f      	ldrb	r7, [r1, #24]
 800818e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008190:	2f78      	cmp	r7, #120	@ 0x78
 8008192:	4691      	mov	r9, r2
 8008194:	4680      	mov	r8, r0
 8008196:	460c      	mov	r4, r1
 8008198:	469a      	mov	sl, r3
 800819a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800819e:	d807      	bhi.n	80081b0 <_printf_i+0x28>
 80081a0:	2f62      	cmp	r7, #98	@ 0x62
 80081a2:	d80a      	bhi.n	80081ba <_printf_i+0x32>
 80081a4:	2f00      	cmp	r7, #0
 80081a6:	f000 80d2 	beq.w	800834e <_printf_i+0x1c6>
 80081aa:	2f58      	cmp	r7, #88	@ 0x58
 80081ac:	f000 80b9 	beq.w	8008322 <_printf_i+0x19a>
 80081b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80081b8:	e03a      	b.n	8008230 <_printf_i+0xa8>
 80081ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80081be:	2b15      	cmp	r3, #21
 80081c0:	d8f6      	bhi.n	80081b0 <_printf_i+0x28>
 80081c2:	a101      	add	r1, pc, #4	@ (adr r1, 80081c8 <_printf_i+0x40>)
 80081c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081c8:	08008221 	.word	0x08008221
 80081cc:	08008235 	.word	0x08008235
 80081d0:	080081b1 	.word	0x080081b1
 80081d4:	080081b1 	.word	0x080081b1
 80081d8:	080081b1 	.word	0x080081b1
 80081dc:	080081b1 	.word	0x080081b1
 80081e0:	08008235 	.word	0x08008235
 80081e4:	080081b1 	.word	0x080081b1
 80081e8:	080081b1 	.word	0x080081b1
 80081ec:	080081b1 	.word	0x080081b1
 80081f0:	080081b1 	.word	0x080081b1
 80081f4:	08008335 	.word	0x08008335
 80081f8:	0800825f 	.word	0x0800825f
 80081fc:	080082ef 	.word	0x080082ef
 8008200:	080081b1 	.word	0x080081b1
 8008204:	080081b1 	.word	0x080081b1
 8008208:	08008357 	.word	0x08008357
 800820c:	080081b1 	.word	0x080081b1
 8008210:	0800825f 	.word	0x0800825f
 8008214:	080081b1 	.word	0x080081b1
 8008218:	080081b1 	.word	0x080081b1
 800821c:	080082f7 	.word	0x080082f7
 8008220:	6833      	ldr	r3, [r6, #0]
 8008222:	1d1a      	adds	r2, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6032      	str	r2, [r6, #0]
 8008228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800822c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008230:	2301      	movs	r3, #1
 8008232:	e09d      	b.n	8008370 <_printf_i+0x1e8>
 8008234:	6833      	ldr	r3, [r6, #0]
 8008236:	6820      	ldr	r0, [r4, #0]
 8008238:	1d19      	adds	r1, r3, #4
 800823a:	6031      	str	r1, [r6, #0]
 800823c:	0606      	lsls	r6, r0, #24
 800823e:	d501      	bpl.n	8008244 <_printf_i+0xbc>
 8008240:	681d      	ldr	r5, [r3, #0]
 8008242:	e003      	b.n	800824c <_printf_i+0xc4>
 8008244:	0645      	lsls	r5, r0, #25
 8008246:	d5fb      	bpl.n	8008240 <_printf_i+0xb8>
 8008248:	f9b3 5000 	ldrsh.w	r5, [r3]
 800824c:	2d00      	cmp	r5, #0
 800824e:	da03      	bge.n	8008258 <_printf_i+0xd0>
 8008250:	232d      	movs	r3, #45	@ 0x2d
 8008252:	426d      	negs	r5, r5
 8008254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008258:	4859      	ldr	r0, [pc, #356]	@ (80083c0 <_printf_i+0x238>)
 800825a:	230a      	movs	r3, #10
 800825c:	e011      	b.n	8008282 <_printf_i+0xfa>
 800825e:	6821      	ldr	r1, [r4, #0]
 8008260:	6833      	ldr	r3, [r6, #0]
 8008262:	0608      	lsls	r0, r1, #24
 8008264:	f853 5b04 	ldr.w	r5, [r3], #4
 8008268:	d402      	bmi.n	8008270 <_printf_i+0xe8>
 800826a:	0649      	lsls	r1, r1, #25
 800826c:	bf48      	it	mi
 800826e:	b2ad      	uxthmi	r5, r5
 8008270:	2f6f      	cmp	r7, #111	@ 0x6f
 8008272:	4853      	ldr	r0, [pc, #332]	@ (80083c0 <_printf_i+0x238>)
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	bf14      	ite	ne
 8008278:	230a      	movne	r3, #10
 800827a:	2308      	moveq	r3, #8
 800827c:	2100      	movs	r1, #0
 800827e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008282:	6866      	ldr	r6, [r4, #4]
 8008284:	60a6      	str	r6, [r4, #8]
 8008286:	2e00      	cmp	r6, #0
 8008288:	bfa2      	ittt	ge
 800828a:	6821      	ldrge	r1, [r4, #0]
 800828c:	f021 0104 	bicge.w	r1, r1, #4
 8008290:	6021      	strge	r1, [r4, #0]
 8008292:	b90d      	cbnz	r5, 8008298 <_printf_i+0x110>
 8008294:	2e00      	cmp	r6, #0
 8008296:	d04b      	beq.n	8008330 <_printf_i+0x1a8>
 8008298:	4616      	mov	r6, r2
 800829a:	fbb5 f1f3 	udiv	r1, r5, r3
 800829e:	fb03 5711 	mls	r7, r3, r1, r5
 80082a2:	5dc7      	ldrb	r7, [r0, r7]
 80082a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082a8:	462f      	mov	r7, r5
 80082aa:	42bb      	cmp	r3, r7
 80082ac:	460d      	mov	r5, r1
 80082ae:	d9f4      	bls.n	800829a <_printf_i+0x112>
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d10b      	bne.n	80082cc <_printf_i+0x144>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	07df      	lsls	r7, r3, #31
 80082b8:	d508      	bpl.n	80082cc <_printf_i+0x144>
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	6861      	ldr	r1, [r4, #4]
 80082be:	4299      	cmp	r1, r3
 80082c0:	bfde      	ittt	le
 80082c2:	2330      	movle	r3, #48	@ 0x30
 80082c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082cc:	1b92      	subs	r2, r2, r6
 80082ce:	6122      	str	r2, [r4, #16]
 80082d0:	f8cd a000 	str.w	sl, [sp]
 80082d4:	464b      	mov	r3, r9
 80082d6:	aa03      	add	r2, sp, #12
 80082d8:	4621      	mov	r1, r4
 80082da:	4640      	mov	r0, r8
 80082dc:	f7ff fee6 	bl	80080ac <_printf_common>
 80082e0:	3001      	adds	r0, #1
 80082e2:	d14a      	bne.n	800837a <_printf_i+0x1f2>
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	b004      	add	sp, #16
 80082ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	f043 0320 	orr.w	r3, r3, #32
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	4833      	ldr	r0, [pc, #204]	@ (80083c4 <_printf_i+0x23c>)
 80082f8:	2778      	movs	r7, #120	@ 0x78
 80082fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	6831      	ldr	r1, [r6, #0]
 8008302:	061f      	lsls	r7, r3, #24
 8008304:	f851 5b04 	ldr.w	r5, [r1], #4
 8008308:	d402      	bmi.n	8008310 <_printf_i+0x188>
 800830a:	065f      	lsls	r7, r3, #25
 800830c:	bf48      	it	mi
 800830e:	b2ad      	uxthmi	r5, r5
 8008310:	6031      	str	r1, [r6, #0]
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	bf44      	itt	mi
 8008316:	f043 0320 	orrmi.w	r3, r3, #32
 800831a:	6023      	strmi	r3, [r4, #0]
 800831c:	b11d      	cbz	r5, 8008326 <_printf_i+0x19e>
 800831e:	2310      	movs	r3, #16
 8008320:	e7ac      	b.n	800827c <_printf_i+0xf4>
 8008322:	4827      	ldr	r0, [pc, #156]	@ (80083c0 <_printf_i+0x238>)
 8008324:	e7e9      	b.n	80082fa <_printf_i+0x172>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	f023 0320 	bic.w	r3, r3, #32
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	e7f6      	b.n	800831e <_printf_i+0x196>
 8008330:	4616      	mov	r6, r2
 8008332:	e7bd      	b.n	80082b0 <_printf_i+0x128>
 8008334:	6833      	ldr	r3, [r6, #0]
 8008336:	6825      	ldr	r5, [r4, #0]
 8008338:	6961      	ldr	r1, [r4, #20]
 800833a:	1d18      	adds	r0, r3, #4
 800833c:	6030      	str	r0, [r6, #0]
 800833e:	062e      	lsls	r6, r5, #24
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	d501      	bpl.n	8008348 <_printf_i+0x1c0>
 8008344:	6019      	str	r1, [r3, #0]
 8008346:	e002      	b.n	800834e <_printf_i+0x1c6>
 8008348:	0668      	lsls	r0, r5, #25
 800834a:	d5fb      	bpl.n	8008344 <_printf_i+0x1bc>
 800834c:	8019      	strh	r1, [r3, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	4616      	mov	r6, r2
 8008354:	e7bc      	b.n	80082d0 <_printf_i+0x148>
 8008356:	6833      	ldr	r3, [r6, #0]
 8008358:	1d1a      	adds	r2, r3, #4
 800835a:	6032      	str	r2, [r6, #0]
 800835c:	681e      	ldr	r6, [r3, #0]
 800835e:	6862      	ldr	r2, [r4, #4]
 8008360:	2100      	movs	r1, #0
 8008362:	4630      	mov	r0, r6
 8008364:	f7f7 ff0c 	bl	8000180 <memchr>
 8008368:	b108      	cbz	r0, 800836e <_printf_i+0x1e6>
 800836a:	1b80      	subs	r0, r0, r6
 800836c:	6060      	str	r0, [r4, #4]
 800836e:	6863      	ldr	r3, [r4, #4]
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	2300      	movs	r3, #0
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008378:	e7aa      	b.n	80082d0 <_printf_i+0x148>
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	4632      	mov	r2, r6
 800837e:	4649      	mov	r1, r9
 8008380:	4640      	mov	r0, r8
 8008382:	47d0      	blx	sl
 8008384:	3001      	adds	r0, #1
 8008386:	d0ad      	beq.n	80082e4 <_printf_i+0x15c>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	079b      	lsls	r3, r3, #30
 800838c:	d413      	bmi.n	80083b6 <_printf_i+0x22e>
 800838e:	68e0      	ldr	r0, [r4, #12]
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	4298      	cmp	r0, r3
 8008394:	bfb8      	it	lt
 8008396:	4618      	movlt	r0, r3
 8008398:	e7a6      	b.n	80082e8 <_printf_i+0x160>
 800839a:	2301      	movs	r3, #1
 800839c:	4632      	mov	r2, r6
 800839e:	4649      	mov	r1, r9
 80083a0:	4640      	mov	r0, r8
 80083a2:	47d0      	blx	sl
 80083a4:	3001      	adds	r0, #1
 80083a6:	d09d      	beq.n	80082e4 <_printf_i+0x15c>
 80083a8:	3501      	adds	r5, #1
 80083aa:	68e3      	ldr	r3, [r4, #12]
 80083ac:	9903      	ldr	r1, [sp, #12]
 80083ae:	1a5b      	subs	r3, r3, r1
 80083b0:	42ab      	cmp	r3, r5
 80083b2:	dcf2      	bgt.n	800839a <_printf_i+0x212>
 80083b4:	e7eb      	b.n	800838e <_printf_i+0x206>
 80083b6:	2500      	movs	r5, #0
 80083b8:	f104 0619 	add.w	r6, r4, #25
 80083bc:	e7f5      	b.n	80083aa <_printf_i+0x222>
 80083be:	bf00      	nop
 80083c0:	08008761 	.word	0x08008761
 80083c4:	08008772 	.word	0x08008772

080083c8 <__sflush_r>:
 80083c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d0:	0716      	lsls	r6, r2, #28
 80083d2:	4605      	mov	r5, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	d454      	bmi.n	8008482 <__sflush_r+0xba>
 80083d8:	684b      	ldr	r3, [r1, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dc02      	bgt.n	80083e4 <__sflush_r+0x1c>
 80083de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd48      	ble.n	8008476 <__sflush_r+0xae>
 80083e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	d045      	beq.n	8008476 <__sflush_r+0xae>
 80083ea:	2300      	movs	r3, #0
 80083ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083f0:	682f      	ldr	r7, [r5, #0]
 80083f2:	6a21      	ldr	r1, [r4, #32]
 80083f4:	602b      	str	r3, [r5, #0]
 80083f6:	d030      	beq.n	800845a <__sflush_r+0x92>
 80083f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	0759      	lsls	r1, r3, #29
 80083fe:	d505      	bpl.n	800840c <__sflush_r+0x44>
 8008400:	6863      	ldr	r3, [r4, #4]
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008406:	b10b      	cbz	r3, 800840c <__sflush_r+0x44>
 8008408:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	2300      	movs	r3, #0
 800840e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008410:	6a21      	ldr	r1, [r4, #32]
 8008412:	4628      	mov	r0, r5
 8008414:	47b0      	blx	r6
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	d106      	bne.n	800842a <__sflush_r+0x62>
 800841c:	6829      	ldr	r1, [r5, #0]
 800841e:	291d      	cmp	r1, #29
 8008420:	d82b      	bhi.n	800847a <__sflush_r+0xb2>
 8008422:	4a2a      	ldr	r2, [pc, #168]	@ (80084cc <__sflush_r+0x104>)
 8008424:	410a      	asrs	r2, r1
 8008426:	07d6      	lsls	r6, r2, #31
 8008428:	d427      	bmi.n	800847a <__sflush_r+0xb2>
 800842a:	2200      	movs	r2, #0
 800842c:	6062      	str	r2, [r4, #4]
 800842e:	04d9      	lsls	r1, r3, #19
 8008430:	6922      	ldr	r2, [r4, #16]
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	d504      	bpl.n	8008440 <__sflush_r+0x78>
 8008436:	1c42      	adds	r2, r0, #1
 8008438:	d101      	bne.n	800843e <__sflush_r+0x76>
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	b903      	cbnz	r3, 8008440 <__sflush_r+0x78>
 800843e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008442:	602f      	str	r7, [r5, #0]
 8008444:	b1b9      	cbz	r1, 8008476 <__sflush_r+0xae>
 8008446:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800844a:	4299      	cmp	r1, r3
 800844c:	d002      	beq.n	8008454 <__sflush_r+0x8c>
 800844e:	4628      	mov	r0, r5
 8008450:	f7ff fca0 	bl	8007d94 <_free_r>
 8008454:	2300      	movs	r3, #0
 8008456:	6363      	str	r3, [r4, #52]	@ 0x34
 8008458:	e00d      	b.n	8008476 <__sflush_r+0xae>
 800845a:	2301      	movs	r3, #1
 800845c:	4628      	mov	r0, r5
 800845e:	47b0      	blx	r6
 8008460:	4602      	mov	r2, r0
 8008462:	1c50      	adds	r0, r2, #1
 8008464:	d1c9      	bne.n	80083fa <__sflush_r+0x32>
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0c6      	beq.n	80083fa <__sflush_r+0x32>
 800846c:	2b1d      	cmp	r3, #29
 800846e:	d001      	beq.n	8008474 <__sflush_r+0xac>
 8008470:	2b16      	cmp	r3, #22
 8008472:	d11e      	bne.n	80084b2 <__sflush_r+0xea>
 8008474:	602f      	str	r7, [r5, #0]
 8008476:	2000      	movs	r0, #0
 8008478:	e022      	b.n	80084c0 <__sflush_r+0xf8>
 800847a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847e:	b21b      	sxth	r3, r3
 8008480:	e01b      	b.n	80084ba <__sflush_r+0xf2>
 8008482:	690f      	ldr	r7, [r1, #16]
 8008484:	2f00      	cmp	r7, #0
 8008486:	d0f6      	beq.n	8008476 <__sflush_r+0xae>
 8008488:	0793      	lsls	r3, r2, #30
 800848a:	680e      	ldr	r6, [r1, #0]
 800848c:	bf08      	it	eq
 800848e:	694b      	ldreq	r3, [r1, #20]
 8008490:	600f      	str	r7, [r1, #0]
 8008492:	bf18      	it	ne
 8008494:	2300      	movne	r3, #0
 8008496:	eba6 0807 	sub.w	r8, r6, r7
 800849a:	608b      	str	r3, [r1, #8]
 800849c:	f1b8 0f00 	cmp.w	r8, #0
 80084a0:	dde9      	ble.n	8008476 <__sflush_r+0xae>
 80084a2:	6a21      	ldr	r1, [r4, #32]
 80084a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084a6:	4643      	mov	r3, r8
 80084a8:	463a      	mov	r2, r7
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b0      	blx	r6
 80084ae:	2800      	cmp	r0, #0
 80084b0:	dc08      	bgt.n	80084c4 <__sflush_r+0xfc>
 80084b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ba:	81a3      	strh	r3, [r4, #12]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c4:	4407      	add	r7, r0
 80084c6:	eba8 0800 	sub.w	r8, r8, r0
 80084ca:	e7e7      	b.n	800849c <__sflush_r+0xd4>
 80084cc:	dfbffffe 	.word	0xdfbffffe

080084d0 <_fflush_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	690b      	ldr	r3, [r1, #16]
 80084d4:	4605      	mov	r5, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b913      	cbnz	r3, 80084e0 <_fflush_r+0x10>
 80084da:	2500      	movs	r5, #0
 80084dc:	4628      	mov	r0, r5
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	b118      	cbz	r0, 80084ea <_fflush_r+0x1a>
 80084e2:	6a03      	ldr	r3, [r0, #32]
 80084e4:	b90b      	cbnz	r3, 80084ea <_fflush_r+0x1a>
 80084e6:	f7ff f997 	bl	8007818 <__sinit>
 80084ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f3      	beq.n	80084da <_fflush_r+0xa>
 80084f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084f4:	07d0      	lsls	r0, r2, #31
 80084f6:	d404      	bmi.n	8008502 <_fflush_r+0x32>
 80084f8:	0599      	lsls	r1, r3, #22
 80084fa:	d402      	bmi.n	8008502 <_fflush_r+0x32>
 80084fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084fe:	f7ff fc46 	bl	8007d8e <__retarget_lock_acquire_recursive>
 8008502:	4628      	mov	r0, r5
 8008504:	4621      	mov	r1, r4
 8008506:	f7ff ff5f 	bl	80083c8 <__sflush_r>
 800850a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800850c:	07da      	lsls	r2, r3, #31
 800850e:	4605      	mov	r5, r0
 8008510:	d4e4      	bmi.n	80084dc <_fflush_r+0xc>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	059b      	lsls	r3, r3, #22
 8008516:	d4e1      	bmi.n	80084dc <_fflush_r+0xc>
 8008518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800851a:	f7ff fc39 	bl	8007d90 <__retarget_lock_release_recursive>
 800851e:	e7dd      	b.n	80084dc <_fflush_r+0xc>

08008520 <__swhatbuf_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	460c      	mov	r4, r1
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	2900      	cmp	r1, #0
 800852a:	b096      	sub	sp, #88	@ 0x58
 800852c:	4615      	mov	r5, r2
 800852e:	461e      	mov	r6, r3
 8008530:	da0d      	bge.n	800854e <__swhatbuf_r+0x2e>
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008538:	f04f 0100 	mov.w	r1, #0
 800853c:	bf14      	ite	ne
 800853e:	2340      	movne	r3, #64	@ 0x40
 8008540:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008544:	2000      	movs	r0, #0
 8008546:	6031      	str	r1, [r6, #0]
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	b016      	add	sp, #88	@ 0x58
 800854c:	bd70      	pop	{r4, r5, r6, pc}
 800854e:	466a      	mov	r2, sp
 8008550:	f000 f848 	bl	80085e4 <_fstat_r>
 8008554:	2800      	cmp	r0, #0
 8008556:	dbec      	blt.n	8008532 <__swhatbuf_r+0x12>
 8008558:	9901      	ldr	r1, [sp, #4]
 800855a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800855e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008562:	4259      	negs	r1, r3
 8008564:	4159      	adcs	r1, r3
 8008566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800856a:	e7eb      	b.n	8008544 <__swhatbuf_r+0x24>

0800856c <__smakebuf_r>:
 800856c:	898b      	ldrh	r3, [r1, #12]
 800856e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008570:	079d      	lsls	r5, r3, #30
 8008572:	4606      	mov	r6, r0
 8008574:	460c      	mov	r4, r1
 8008576:	d507      	bpl.n	8008588 <__smakebuf_r+0x1c>
 8008578:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	2301      	movs	r3, #1
 8008582:	6163      	str	r3, [r4, #20]
 8008584:	b003      	add	sp, #12
 8008586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008588:	ab01      	add	r3, sp, #4
 800858a:	466a      	mov	r2, sp
 800858c:	f7ff ffc8 	bl	8008520 <__swhatbuf_r>
 8008590:	9f00      	ldr	r7, [sp, #0]
 8008592:	4605      	mov	r5, r0
 8008594:	4639      	mov	r1, r7
 8008596:	4630      	mov	r0, r6
 8008598:	f7ff f826 	bl	80075e8 <_malloc_r>
 800859c:	b948      	cbnz	r0, 80085b2 <__smakebuf_r+0x46>
 800859e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a2:	059a      	lsls	r2, r3, #22
 80085a4:	d4ee      	bmi.n	8008584 <__smakebuf_r+0x18>
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	f043 0302 	orr.w	r3, r3, #2
 80085ae:	81a3      	strh	r3, [r4, #12]
 80085b0:	e7e2      	b.n	8008578 <__smakebuf_r+0xc>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	6020      	str	r0, [r4, #0]
 80085b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085c2:	b15b      	cbz	r3, 80085dc <__smakebuf_r+0x70>
 80085c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f81d 	bl	8008608 <_isatty_r>
 80085ce:	b128      	cbz	r0, 80085dc <__smakebuf_r+0x70>
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	431d      	orrs	r5, r3
 80085e0:	81a5      	strh	r5, [r4, #12]
 80085e2:	e7cf      	b.n	8008584 <__smakebuf_r+0x18>

080085e4 <_fstat_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d07      	ldr	r5, [pc, #28]	@ (8008604 <_fstat_r+0x20>)
 80085e8:	2300      	movs	r3, #0
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	4611      	mov	r1, r2
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	f7f8 fdf8 	bl	80011e6 <_fstat>
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	d102      	bne.n	8008600 <_fstat_r+0x1c>
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	b103      	cbz	r3, 8008600 <_fstat_r+0x1c>
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	bd38      	pop	{r3, r4, r5, pc}
 8008602:	bf00      	nop
 8008604:	20000474 	.word	0x20000474

08008608 <_isatty_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d06      	ldr	r5, [pc, #24]	@ (8008624 <_isatty_r+0x1c>)
 800860c:	2300      	movs	r3, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7f8 fdf7 	bl	8001206 <_isatty>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_isatty_r+0x1a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_isatty_r+0x1a>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	20000474 	.word	0x20000474

08008628 <_init>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	bf00      	nop
 800862c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800862e:	bc08      	pop	{r3}
 8008630:	469e      	mov	lr, r3
 8008632:	4770      	bx	lr

08008634 <_fini>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	bf00      	nop
 8008638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863a:	bc08      	pop	{r3}
 800863c:	469e      	mov	lr, r3
 800863e:	4770      	bx	lr
