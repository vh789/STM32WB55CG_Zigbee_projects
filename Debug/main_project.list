
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010520  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08010660  08010660  00011660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010bbc  08010bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010bc4  08010bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010bc8  08010bc8  00011bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  20000008  08010bcc  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005cc  2000007c  08010c40  0001207c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000648  08010c40  00012648  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 11 MB_MEM1       000000b0  20030028  20030028  00013000  2**2
                  ALLOC
 12 .debug_info   000423f5  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006df0  00000000  00000000  000544a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b0c  00000000  00000000  0005b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000250a  00000000  00000000  0005eda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df2d  00000000  00000000  000612ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d7f1  00000000  00000000  0008f1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001198ca  00000000  00000000  000cc9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000041b2  00000000  00000000  001e6296  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001b0  00000000  00000000  001ea448  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  001ea5f8  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000e5c8  00000000  00000000  001ea618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001f8be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_types  00002629  00000000  00000000  001f8c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macinfo 00000419  00000000  00000000  001fb26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    00004813  00000000  00000000  001fb685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_pubnames 00001164  00000000  00000000  001ffe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_ranges 00000018  00000000  00000000  00200ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08010648 	.word	0x08010648

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08010648 	.word	0x08010648

08000180 <ZbZclAttrAddSorted>:
 8000180:	b430      	push	{r4, r5}
 8000182:	0002      	movs	r2, r0
 8000184:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000186:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 800018a:	42a0      	cmp	r0, r4
 800018c:	d001      	beq.n	8000192 <??ZbZclAttrAddSorted_0>
 800018e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000190:	e000      	b.n	8000194 <??ZbZclAttrAddSorted_1>

08000192 <??ZbZclAttrAddSorted_0>:
 8000192:	2000      	movs	r0, #0

08000194 <??ZbZclAttrAddSorted_1>:
 8000194:	2800      	cmp	r0, #0
 8000196:	d017      	beq.n	80001c8 <??ZbZclAttrAddSorted_2>
 8000198:	0003      	movs	r3, r0
 800019a:	688c      	ldr	r4, [r1, #8]
 800019c:	8824      	ldrh	r4, [r4, #0]
 800019e:	689d      	ldr	r5, [r3, #8]
 80001a0:	882d      	ldrh	r5, [r5, #0]
 80001a2:	42ac      	cmp	r4, r5
 80001a4:	d207      	bcs.n	80001b6 <??ZbZclAttrAddSorted_3>
 80001a6:	600b      	str	r3, [r1, #0]
 80001a8:	685c      	ldr	r4, [r3, #4]
 80001aa:	604c      	str	r4, [r1, #4]
 80001ac:	680c      	ldr	r4, [r1, #0]
 80001ae:	6061      	str	r1, [r4, #4]
 80001b0:	684c      	ldr	r4, [r1, #4]
 80001b2:	6021      	str	r1, [r4, #0]
 80001b4:	e011      	b.n	80001da <??ZbZclAttrAddSorted_4>

080001b6 <??ZbZclAttrAddSorted_3>:
 80001b6:	6804      	ldr	r4, [r0, #0]
 80001b8:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 80001bc:	42ac      	cmp	r4, r5
 80001be:	d001      	beq.n	80001c4 <??ZbZclAttrAddSorted_5>
 80001c0:	6800      	ldr	r0, [r0, #0]
 80001c2:	e7e7      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c4 <??ZbZclAttrAddSorted_5>:
 80001c4:	2000      	movs	r0, #0
 80001c6:	e7e5      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c8 <??ZbZclAttrAddSorted_2>:
 80001c8:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80001cc:	600c      	str	r4, [r1, #0]
 80001ce:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80001d0:	604c      	str	r4, [r1, #4]
 80001d2:	680c      	ldr	r4, [r1, #0]
 80001d4:	6061      	str	r1, [r4, #4]
 80001d6:	684c      	ldr	r4, [r1, #4]
 80001d8:	6021      	str	r1, [r4, #0]

080001da <??ZbZclAttrAddSorted_4>:
 80001da:	bc30      	pop	{r4, r5}
 80001dc:	4770      	bx	lr

080001de <ZbZclAttrFind>:
 80001de:	b430      	push	{r4, r5}
 80001e0:	0003      	movs	r3, r0
 80001e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80001e4:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 80001e8:	4290      	cmp	r0, r2
 80001ea:	d001      	beq.n	80001f0 <??ZbZclAttrFind_0>
 80001ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001ee:	e000      	b.n	80001f2 <??ZbZclAttrFind_1>

080001f0 <??ZbZclAttrFind_0>:
 80001f0:	2200      	movs	r2, #0

080001f2 <??ZbZclAttrFind_1>:
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d012      	beq.n	800021c <??ZbZclAttrFind_2>
 80001f6:	0014      	movs	r4, r2
 80001f8:	68a0      	ldr	r0, [r4, #8]
 80001fa:	8800      	ldrh	r0, [r0, #0]
 80001fc:	000d      	movs	r5, r1
 80001fe:	b2ad      	uxth	r5, r5
 8000200:	42a8      	cmp	r0, r5
 8000202:	d005      	beq.n	8000210 <??ZbZclAttrFind_3>
 8000204:	6810      	ldr	r0, [r2, #0]
 8000206:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 800020a:	42a8      	cmp	r0, r5
 800020c:	d004      	beq.n	8000218 <??ZbZclAttrFind_4>
 800020e:	e001      	b.n	8000214 <??ZbZclAttrFind_5>

08000210 <??ZbZclAttrFind_3>:
 8000210:	0020      	movs	r0, r4
 8000212:	e004      	b.n	800021e <??ZbZclAttrFind_6>

08000214 <??ZbZclAttrFind_5>:
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	e7ec      	b.n	80001f2 <??ZbZclAttrFind_1>

08000218 <??ZbZclAttrFind_4>:
 8000218:	2200      	movs	r2, #0
 800021a:	e7ea      	b.n	80001f2 <??ZbZclAttrFind_1>

0800021c <??ZbZclAttrFind_2>:
 800021c:	2000      	movs	r0, #0

0800021e <??ZbZclAttrFind_6>:
 800021e:	bc30      	pop	{r4, r5}
 8000220:	4770      	bx	lr

08000222 <ZbZclAttrHandleDiscover>:
 8000222:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000226:	b09f      	sub	sp, #124	@ 0x7c
 8000228:	0004      	movs	r4, r0
 800022a:	000d      	movs	r5, r1
 800022c:	0016      	movs	r6, r2
 800022e:	2708      	movs	r7, #8
 8000230:	f05f 0800 	movs.w	r8, #0
 8000234:	f10d 0908 	add.w	r9, sp, #8
 8000238:	4642      	mov	r2, r8
 800023a:	0039      	movs	r1, r7
 800023c:	4648      	mov	r0, r9
 800023e:	f004 fb38 	bl	80048b2 <__aeabi_memset>
 8000242:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000244:	2803      	cmp	r0, #3
 8000246:	d206      	bcs.n	8000256 <??ZbZclAttrHandleDiscover_0>
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	002a      	movs	r2, r5
 800024c:	0031      	movs	r1, r6
 800024e:	0020      	movs	r0, r4
 8000250:	f00e fbc4 	bl	800e9dc <ZbZclSendDefaultResponse>
 8000254:	e070      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000256 <??ZbZclAttrHandleDiscover_0>:
 8000256:	f05f 0800 	movs.w	r8, #0
 800025a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800025c:	4641      	mov	r1, r8
 800025e:	b2c9      	uxtb	r1, r1
 8000260:	4408      	add	r0, r1
 8000262:	f003 fe15 	bl	8003e90 <pletoh16>
 8000266:	0007      	movs	r7, r0
 8000268:	f118 0802 	adds.w	r8, r8, #2
 800026c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800026e:	4641      	mov	r1, r8
 8000270:	b2c9      	uxtb	r1, r1
 8000272:	5c40      	ldrb	r0, [r0, r1]
 8000274:	f88d 0004 	strb.w	r0, [sp, #4]
 8000278:	f118 0801 	adds.w	r8, r8, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f88d 0008 	strb.w	r0, [sp, #8]
 8000282:	7868      	ldrb	r0, [r5, #1]
 8000284:	f88d 0009 	strb.w	r0, [sp, #9]
 8000288:	78a8      	ldrb	r0, [r5, #2]
 800028a:	2800      	cmp	r0, #0
 800028c:	d101      	bne.n	8000292 <??ZbZclAttrHandleDiscover_2>
 800028e:	2001      	movs	r0, #1
 8000290:	e000      	b.n	8000294 <??ZbZclAttrHandleDiscover_3>

08000292 <??ZbZclAttrHandleDiscover_2>:
 8000292:	2000      	movs	r0, #0

08000294 <??ZbZclAttrHandleDiscover_3>:
 8000294:	f88d 000a 	strb.w	r0, [sp, #10]
 8000298:	2001      	movs	r0, #1
 800029a:	f88d 000b 	strb.w	r0, [sp, #11]
 800029e:	88a8      	ldrh	r0, [r5, #4]
 80002a0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80002a4:	79a8      	ldrb	r0, [r5, #6]
 80002a6:	f88d 000e 	strb.w	r0, [sp, #14]
 80002aa:	200d      	movs	r0, #13
 80002ac:	f88d 000f 	strb.w	r0, [sp, #15]
 80002b0:	2239      	movs	r2, #57	@ 0x39
 80002b2:	a910      	add	r1, sp, #64	@ 0x40
 80002b4:	a802      	add	r0, sp, #8
 80002b6:	f003 fda3 	bl	8003e00 <ZbZclAppendHeader>
 80002ba:	4682      	mov	sl, r0
 80002bc:	f1ba 0f00 	cmp.w	sl, #0
 80002c0:	d506      	bpl.n	80002d0 <??ZbZclAttrHandleDiscover_4>
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	002a      	movs	r2, r5
 80002c6:	0031      	movs	r1, r6
 80002c8:	0020      	movs	r0, r4
 80002ca:	f00e fb87 	bl	800e9dc <ZbZclSendDefaultResponse>
 80002ce:	e033      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

080002d0 <??ZbZclAttrHandleDiscover_4>:
 80002d0:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 80002d4:	9000      	str	r0, [sp, #0]
 80002d6:	a810      	add	r0, sp, #64	@ 0x40
 80002d8:	eb00 030a 	add.w	r3, r0, sl
 80002dc:	aa01      	add	r2, sp, #4
 80002de:	0039      	movs	r1, r7
 80002e0:	b289      	uxth	r1, r1
 80002e2:	0020      	movs	r0, r4
 80002e4:	f000 f82b 	bl	800033e <ZbZclAttrDiscoverGetList>
 80002e8:	4681      	mov	r9, r0
 80002ea:	eb19 090a 	adds.w	r9, r9, sl
 80002ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d104      	bne.n	8000300 <??ZbZclAttrHandleDiscover_5>
 80002f6:	0030      	movs	r0, r6
 80002f8:	f00e f8c6 	bl	800e488 <ZbApsAddrIsBcast>
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d11b      	bne.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000300 <??ZbZclAttrHandleDiscover_5>:
 8000300:	0032      	movs	r2, r6
 8000302:	a904      	add	r1, sp, #16
 8000304:	0020      	movs	r0, r4
 8000306:	f003 fccc 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 800030a:	a804      	add	r0, sp, #16
 800030c:	f116 0110 	adds.w	r1, r6, #16
 8000310:	2210      	movs	r2, #16
 8000312:	f00f fcf4 	bl	800fcfe <__aeabi_memcpy>
 8000316:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800031a:	f003 fc5a 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 800031e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000322:	a810      	add	r0, sp, #64	@ 0x40
 8000324:	900a      	str	r0, [sp, #40]	@ 0x28
 8000326:	4648      	mov	r0, r9
 8000328:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800032c:	2300      	movs	r3, #0
 800032e:	2200      	movs	r2, #0
 8000330:	a904      	add	r1, sp, #16
 8000332:	68a0      	ldr	r0, [r4, #8]
 8000334:	f00e f82e 	bl	800e394 <ZbApsdeDataReqCallback>

08000338 <??ZbZclAttrHandleDiscover_1>:
 8000338:	b020      	add	sp, #128	@ 0x80
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800033e <ZbZclAttrDiscoverGetList>:
 800033e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000342:	0005      	movs	r5, r0
 8000344:	0016      	movs	r6, r2
 8000346:	001f      	movs	r7, r3
 8000348:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800034c:	f05f 0a00 	movs.w	sl, #0
 8000350:	f05f 0b00 	movs.w	fp, #0
 8000354:	2000      	movs	r0, #0
 8000356:	f807 000b 	strb.w	r0, [r7, fp]
 800035a:	f11b 0b01 	adds.w	fp, fp, #1
 800035e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8000360:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8000364:	4288      	cmp	r0, r1
 8000366:	d001      	beq.n	800036c <??ZbZclAttrDiscoverGetList_0>
 8000368:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800036a:	e000      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

0800036c <??ZbZclAttrDiscoverGetList_0>:
 800036c:	2400      	movs	r4, #0

0800036e <??ZbZclAttrDiscoverGetList_1>:
 800036e:	2c00      	cmp	r4, #0
 8000370:	d030      	beq.n	80003d4 <??ZbZclAttrDiscoverGetList_2>
 8000372:	46a1      	mov	r9, r4
 8000374:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000378:	8800      	ldrh	r0, [r0, #0]
 800037a:	f8bd 1000 	ldrh.w	r1, [sp]
 800037e:	4288      	cmp	r0, r1
 8000380:	d31f      	bcc.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

08000382 <??ZbZclAttrDiscoverGetList_4>:
 8000382:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000386:	8880      	ldrh	r0, [r0, #4]
 8000388:	0400      	lsls	r0, r0, #16
 800038a:	d41a      	bmi.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

0800038c <??ZbZclAttrDiscoverGetList_5>:
 800038c:	4650      	mov	r0, sl
 800038e:	7831      	ldrb	r1, [r6, #0]
 8000390:	b2c0      	uxtb	r0, r0
 8000392:	4288      	cmp	r0, r1
 8000394:	d21e      	bcs.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

08000396 <??ZbZclAttrDiscoverGetList_6>:
 8000396:	f11b 0003 	adds.w	r0, fp, #3
 800039a:	4580      	cmp	r8, r0
 800039c:	d31a      	bcc.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

0800039e <??ZbZclAttrDiscoverGetList_7>:
 800039e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003a2:	8801      	ldrh	r1, [r0, #0]
 80003a4:	eb07 000b 	add.w	r0, r7, fp
 80003a8:	f003 fdbe 	bl	8003f28 <putle16>
 80003ac:	f11b 0b02 	adds.w	fp, fp, #2
 80003b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003b4:	7880      	ldrb	r0, [r0, #2]
 80003b6:	f807 000b 	strb.w	r0, [r7, fp]
 80003ba:	f11b 0b01 	adds.w	fp, fp, #1
 80003be:	f11a 0a01 	adds.w	sl, sl, #1

080003c2 <??ZbZclAttrDiscoverGetList_3>:
 80003c2:	6820      	ldr	r0, [r4, #0]
 80003c4:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80003c8:	4288      	cmp	r0, r1
 80003ca:	d001      	beq.n	80003d0 <??ZbZclAttrDiscoverGetList_8>
 80003cc:	6824      	ldr	r4, [r4, #0]
 80003ce:	e7ce      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d0 <??ZbZclAttrDiscoverGetList_8>:
 80003d0:	2400      	movs	r4, #0
 80003d2:	e7cc      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d4 <??ZbZclAttrDiscoverGetList_2>:
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d101      	bne.n	80003dc <??ZbZclAttrDiscoverGetList_9>
 80003d8:	2001      	movs	r0, #1
 80003da:	7038      	strb	r0, [r7, #0]

080003dc <??ZbZclAttrDiscoverGetList_9>:
 80003dc:	f886 a000 	strb.w	sl, [r6]
 80003e0:	4658      	mov	r0, fp
 80003e2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003e6 <ZbZclAttrRead>:
 80003e6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	4680      	mov	r8, r0
 80003ee:	0014      	movs	r4, r2
 80003f0:	001d      	movs	r5, r3
 80003f2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80003f4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80003f8:	4640      	mov	r0, r8
 80003fa:	f7ff fef0 	bl	80001de <ZbZclAttrFind>
 80003fe:	0007      	movs	r7, r0
 8000400:	2f00      	cmp	r7, #0
 8000402:	d101      	bne.n	8000408 <??ZbZclAttrRead_0>
 8000404:	2086      	movs	r0, #134	@ 0x86
 8000406:	e03c      	b.n	8000482 <??ZbZclAttrRead_1>

08000408 <??ZbZclAttrRead_0>:
 8000408:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800040c:	2800      	cmp	r0, #0
 800040e:	d005      	beq.n	800041c <??ZbZclAttrRead_2>
 8000410:	68b8      	ldr	r0, [r7, #8]
 8000412:	7900      	ldrb	r0, [r0, #4]
 8000414:	0780      	lsls	r0, r0, #30
 8000416:	d401      	bmi.n	800041c <??ZbZclAttrRead_2>
 8000418:	208c      	movs	r0, #140	@ 0x8c
 800041a:	e032      	b.n	8000482 <??ZbZclAttrRead_1>

0800041c <??ZbZclAttrRead_2>:
 800041c:	2c00      	cmp	r4, #0
 800041e:	d002      	beq.n	8000426 <??ZbZclAttrRead_3>
 8000420:	68b8      	ldr	r0, [r7, #8]
 8000422:	7880      	ldrb	r0, [r0, #2]
 8000424:	7020      	strb	r0, [r4, #0]

08000426 <??ZbZclAttrRead_3>:
 8000426:	2d00      	cmp	r5, #0
 8000428:	d001      	beq.n	800042e <??ZbZclAttrRead_4>
 800042a:	2e00      	cmp	r6, #0
 800042c:	d105      	bne.n	800043a <??ZbZclAttrRead_5>

0800042e <??ZbZclAttrRead_4>:
 800042e:	2c00      	cmp	r4, #0
 8000430:	d001      	beq.n	8000436 <??ZbZclAttrRead_6>
 8000432:	2000      	movs	r0, #0
 8000434:	e025      	b.n	8000482 <??ZbZclAttrRead_1>

08000436 <??ZbZclAttrRead_6>:
 8000436:	2089      	movs	r0, #137	@ 0x89
 8000438:	e023      	b.n	8000482 <??ZbZclAttrRead_1>

0800043a <??ZbZclAttrRead_5>:
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	7900      	ldrb	r0, [r0, #4]
 800043e:	06c0      	lsls	r0, r0, #27
 8000440:	d519      	bpl.n	8000476 <??ZbZclAttrRead_7>
 8000442:	f05f 0920 	movs.w	r9, #32
 8000446:	f05f 0a00 	movs.w	sl, #0
 800044a:	46eb      	mov	fp, sp
 800044c:	4652      	mov	r2, sl
 800044e:	4649      	mov	r1, r9
 8000450:	4658      	mov	r0, fp
 8000452:	f004 fa2e 	bl	80048b2 <__aeabi_memset>
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	2000      	movs	r0, #0
 800045c:	f88d 0004 	strb.w	r0, [sp, #4]
 8000460:	9502      	str	r5, [sp, #8]
 8000462:	9603      	str	r6, [sp, #12]
 8000464:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000468:	9007      	str	r0, [sp, #28]
 800046a:	466a      	mov	r2, sp
 800046c:	0039      	movs	r1, r7
 800046e:	4640      	mov	r0, r8
 8000470:	f001 fce6 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000474:	e005      	b.n	8000482 <??ZbZclAttrRead_1>

08000476 <??ZbZclAttrRead_7>:
 8000476:	0033      	movs	r3, r6
 8000478:	002a      	movs	r2, r5
 800047a:	0039      	movs	r1, r7
 800047c:	4640      	mov	r0, r8
 800047e:	f000 f803 	bl	8000488 <ZbZclAttrDefaultRead>

08000482 <??ZbZclAttrRead_1>:
 8000482:	b009      	add	sp, #36	@ 0x24
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000488 <ZbZclAttrDefaultRead>:
 8000488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800048c:	0005      	movs	r5, r0
 800048e:	000e      	movs	r6, r1
 8000490:	0017      	movs	r7, r2
 8000492:	001c      	movs	r4, r3
 8000494:	f05f 0800 	movs.w	r8, #0
 8000498:	f05f 0900 	movs.w	r9, #0
 800049c:	68b0      	ldr	r0, [r6, #8]
 800049e:	7880      	ldrb	r0, [r0, #2]
 80004a0:	2808      	cmp	r0, #8
 80004a2:	d065      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004a4:	2809      	cmp	r0, #9
 80004a6:	d06b      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004a8:	280a      	cmp	r0, #10
 80004aa:	d071      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004ac:	280b      	cmp	r0, #11
 80004ae:	d077      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004b0:	280c      	cmp	r0, #12
 80004b2:	d07d      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004b4:	280d      	cmp	r0, #13
 80004b6:	f000 8083 	beq.w	80005c0 <??ZbZclAttrDefaultRead_5>
 80004ba:	280e      	cmp	r0, #14
 80004bc:	f000 8088 	beq.w	80005d0 <??ZbZclAttrDefaultRead_6>
 80004c0:	280f      	cmp	r0, #15
 80004c2:	f000 808d 	beq.w	80005e0 <??ZbZclAttrDefaultRead_7>
 80004c6:	2810      	cmp	r0, #16
 80004c8:	d052      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ca:	2818      	cmp	r0, #24
 80004cc:	d050      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ce:	2819      	cmp	r0, #25
 80004d0:	d056      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004d2:	281a      	cmp	r0, #26
 80004d4:	d05c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004d6:	281b      	cmp	r0, #27
 80004d8:	d062      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004da:	281c      	cmp	r0, #28
 80004dc:	d068      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004de:	281d      	cmp	r0, #29
 80004e0:	d06e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 80004e2:	281e      	cmp	r0, #30
 80004e4:	d074      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 80004e6:	281f      	cmp	r0, #31
 80004e8:	d07a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 80004ea:	2820      	cmp	r0, #32
 80004ec:	d040      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ee:	2821      	cmp	r0, #33	@ 0x21
 80004f0:	d046      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004f2:	2822      	cmp	r0, #34	@ 0x22
 80004f4:	d04c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004f6:	2823      	cmp	r0, #35	@ 0x23
 80004f8:	d052      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004fa:	2824      	cmp	r0, #36	@ 0x24
 80004fc:	d058      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004fe:	2825      	cmp	r0, #37	@ 0x25
 8000500:	d05e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000502:	2826      	cmp	r0, #38	@ 0x26
 8000504:	d064      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000506:	2827      	cmp	r0, #39	@ 0x27
 8000508:	d06a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800050a:	2828      	cmp	r0, #40	@ 0x28
 800050c:	d030      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800050e:	2829      	cmp	r0, #41	@ 0x29
 8000510:	d036      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000512:	282a      	cmp	r0, #42	@ 0x2a
 8000514:	d03c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 8000516:	282b      	cmp	r0, #43	@ 0x2b
 8000518:	d042      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800051a:	282c      	cmp	r0, #44	@ 0x2c
 800051c:	d048      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 800051e:	282d      	cmp	r0, #45	@ 0x2d
 8000520:	d04e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000522:	282e      	cmp	r0, #46	@ 0x2e
 8000524:	d054      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000526:	282f      	cmp	r0, #47	@ 0x2f
 8000528:	d05a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800052a:	2830      	cmp	r0, #48	@ 0x30
 800052c:	d020      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800052e:	2831      	cmp	r0, #49	@ 0x31
 8000530:	d026      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000532:	2838      	cmp	r0, #56	@ 0x38
 8000534:	d024      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000536:	2839      	cmp	r0, #57	@ 0x39
 8000538:	d032      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800053a:	283a      	cmp	r0, #58	@ 0x3a
 800053c:	d050      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800053e:	2841      	cmp	r0, #65	@ 0x41
 8000540:	d05e      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000542:	2842      	cmp	r0, #66	@ 0x42
 8000544:	d05c      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000546:	2843      	cmp	r0, #67	@ 0x43
 8000548:	d071      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054a:	2844      	cmp	r0, #68	@ 0x44
 800054c:	d06f      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054e:	28e0      	cmp	r0, #224	@ 0xe0
 8000550:	d026      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000552:	28e1      	cmp	r0, #225	@ 0xe1
 8000554:	d024      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000556:	28e2      	cmp	r0, #226	@ 0xe2
 8000558:	d022      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800055a:	28e8      	cmp	r0, #232	@ 0xe8
 800055c:	d010      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 800055e:	28e9      	cmp	r0, #233	@ 0xe9
 8000560:	d00e      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000562:	28ea      	cmp	r0, #234	@ 0xea
 8000564:	d01c      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000566:	28f0      	cmp	r0, #240	@ 0xf0
 8000568:	d03a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800056a:	28f1      	cmp	r0, #241	@ 0xf1
 800056c:	d040      	beq.n	80005f0 <??ZbZclAttrDefaultRead_10>
 800056e:	e078      	b.n	8000662 <??ZbZclAttrDefaultRead_11>

08000570 <??ZbZclAttrDefaultRead_0>:
 8000570:	2c00      	cmp	r4, #0
 8000572:	d102      	bne.n	800057a <??ZbZclAttrDefaultRead_12>
 8000574:	2089      	movs	r0, #137	@ 0x89
 8000576:	4681      	mov	r9, r0
 8000578:	e075      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800057a <??ZbZclAttrDefaultRead_12>:
 800057a:	2001      	movs	r0, #1
 800057c:	4680      	mov	r8, r0
 800057e:	e072      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000580 <??ZbZclAttrDefaultRead_1>:
 8000580:	2c02      	cmp	r4, #2
 8000582:	d202      	bcs.n	800058a <??ZbZclAttrDefaultRead_14>
 8000584:	2089      	movs	r0, #137	@ 0x89
 8000586:	4681      	mov	r9, r0
 8000588:	e06d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800058a <??ZbZclAttrDefaultRead_14>:
 800058a:	2002      	movs	r0, #2
 800058c:	4680      	mov	r8, r0
 800058e:	e06a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000590 <??ZbZclAttrDefaultRead_2>:
 8000590:	2c03      	cmp	r4, #3
 8000592:	d202      	bcs.n	800059a <??ZbZclAttrDefaultRead_15>
 8000594:	2089      	movs	r0, #137	@ 0x89
 8000596:	4681      	mov	r9, r0
 8000598:	e065      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800059a <??ZbZclAttrDefaultRead_15>:
 800059a:	2003      	movs	r0, #3
 800059c:	4680      	mov	r8, r0
 800059e:	e062      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005a0 <??ZbZclAttrDefaultRead_3>:
 80005a0:	2c04      	cmp	r4, #4
 80005a2:	d202      	bcs.n	80005aa <??ZbZclAttrDefaultRead_16>
 80005a4:	2089      	movs	r0, #137	@ 0x89
 80005a6:	4681      	mov	r9, r0
 80005a8:	e05d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005aa <??ZbZclAttrDefaultRead_16>:
 80005aa:	2004      	movs	r0, #4
 80005ac:	4680      	mov	r8, r0
 80005ae:	e05a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005b0 <??ZbZclAttrDefaultRead_4>:
 80005b0:	2c05      	cmp	r4, #5
 80005b2:	d202      	bcs.n	80005ba <??ZbZclAttrDefaultRead_17>
 80005b4:	2089      	movs	r0, #137	@ 0x89
 80005b6:	4681      	mov	r9, r0
 80005b8:	e055      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ba <??ZbZclAttrDefaultRead_17>:
 80005ba:	2005      	movs	r0, #5
 80005bc:	4680      	mov	r8, r0
 80005be:	e052      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005c0 <??ZbZclAttrDefaultRead_5>:
 80005c0:	2c06      	cmp	r4, #6
 80005c2:	d202      	bcs.n	80005ca <??ZbZclAttrDefaultRead_18>
 80005c4:	2089      	movs	r0, #137	@ 0x89
 80005c6:	4681      	mov	r9, r0
 80005c8:	e04d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ca <??ZbZclAttrDefaultRead_18>:
 80005ca:	2006      	movs	r0, #6
 80005cc:	4680      	mov	r8, r0
 80005ce:	e04a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005d0 <??ZbZclAttrDefaultRead_6>:
 80005d0:	2c07      	cmp	r4, #7
 80005d2:	d202      	bcs.n	80005da <??ZbZclAttrDefaultRead_19>
 80005d4:	2089      	movs	r0, #137	@ 0x89
 80005d6:	4681      	mov	r9, r0
 80005d8:	e045      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005da <??ZbZclAttrDefaultRead_19>:
 80005da:	2007      	movs	r0, #7
 80005dc:	4680      	mov	r8, r0
 80005de:	e042      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005e0 <??ZbZclAttrDefaultRead_7>:
 80005e0:	2c08      	cmp	r4, #8
 80005e2:	d202      	bcs.n	80005ea <??ZbZclAttrDefaultRead_20>
 80005e4:	2089      	movs	r0, #137	@ 0x89
 80005e6:	4681      	mov	r9, r0
 80005e8:	e03d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ea <??ZbZclAttrDefaultRead_20>:
 80005ea:	2008      	movs	r0, #8
 80005ec:	4680      	mov	r8, r0
 80005ee:	e03a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005f0 <??ZbZclAttrDefaultRead_10>:
 80005f0:	2c10      	cmp	r4, #16
 80005f2:	d202      	bcs.n	80005fa <??ZbZclAttrDefaultRead_21>
 80005f4:	2089      	movs	r0, #137	@ 0x89
 80005f6:	4681      	mov	r9, r0
 80005f8:	e035      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005fa <??ZbZclAttrDefaultRead_21>:
 80005fa:	2010      	movs	r0, #16
 80005fc:	4680      	mov	r8, r0
 80005fe:	e032      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000600 <??ZbZclAttrDefaultRead_8>:
 8000600:	2c00      	cmp	r4, #0
 8000602:	d102      	bne.n	800060a <??ZbZclAttrDefaultRead_22>
 8000604:	2089      	movs	r0, #137	@ 0x89
 8000606:	4681      	mov	r9, r0
 8000608:	e02d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800060a <??ZbZclAttrDefaultRead_22>:
 800060a:	68f0      	ldr	r0, [r6, #12]
 800060c:	7800      	ldrb	r0, [r0, #0]
 800060e:	0001      	movs	r1, r0
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	29ff      	cmp	r1, #255	@ 0xff
 8000614:	d101      	bne.n	800061a <??ZbZclAttrDefaultRead_23>
 8000616:	2100      	movs	r1, #0
 8000618:	0008      	movs	r0, r1

0800061a <??ZbZclAttrDefaultRead_23>:
 800061a:	0001      	movs	r1, r0
 800061c:	b2c9      	uxtb	r1, r1
 800061e:	1c49      	adds	r1, r1, #1
 8000620:	4688      	mov	r8, r1
 8000622:	4544      	cmp	r4, r8
 8000624:	d202      	bcs.n	800062c <??ZbZclAttrDefaultRead_24>
 8000626:	2189      	movs	r1, #137	@ 0x89
 8000628:	4689      	mov	r9, r1
 800062a:	e01c      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062c <??ZbZclAttrDefaultRead_24>:
 800062c:	e01b      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062e <??ZbZclAttrDefaultRead_9>:
 800062e:	2c00      	cmp	r4, #0
 8000630:	d102      	bne.n	8000638 <??ZbZclAttrDefaultRead_25>
 8000632:	2089      	movs	r0, #137	@ 0x89
 8000634:	4681      	mov	r9, r0
 8000636:	e016      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000638 <??ZbZclAttrDefaultRead_25>:
 8000638:	68f0      	ldr	r0, [r6, #12]
 800063a:	f003 fc29 	bl	8003e90 <pletoh16>
 800063e:	0001      	movs	r1, r0
 8000640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000644:	b289      	uxth	r1, r1
 8000646:	4291      	cmp	r1, r2
 8000648:	d101      	bne.n	800064e <??ZbZclAttrDefaultRead_26>
 800064a:	2100      	movs	r1, #0
 800064c:	0008      	movs	r0, r1

0800064e <??ZbZclAttrDefaultRead_26>:
 800064e:	0001      	movs	r1, r0
 8000650:	b289      	uxth	r1, r1
 8000652:	1c89      	adds	r1, r1, #2
 8000654:	4688      	mov	r8, r1
 8000656:	4544      	cmp	r4, r8
 8000658:	d202      	bcs.n	8000660 <??ZbZclAttrDefaultRead_27>
 800065a:	2189      	movs	r1, #137	@ 0x89
 800065c:	4689      	mov	r9, r1
 800065e:	e002      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000660 <??ZbZclAttrDefaultRead_27>:
 8000660:	e001      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000662 <??ZbZclAttrDefaultRead_11>:
 8000662:	2086      	movs	r0, #134	@ 0x86
 8000664:	4681      	mov	r9, r0

08000666 <??ZbZclAttrDefaultRead_13>:
 8000666:	4648      	mov	r0, r9
 8000668:	b2c0      	uxtb	r0, r0
 800066a:	2800      	cmp	r0, #0
 800066c:	d109      	bne.n	8000682 <??ZbZclAttrDefaultRead_28>
 800066e:	f8cd 8000 	str.w	r8, [sp]
 8000672:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8000676:	46bb      	mov	fp, r7
 8000678:	9a00      	ldr	r2, [sp, #0]
 800067a:	4651      	mov	r1, sl
 800067c:	4658      	mov	r0, fp
 800067e:	f00f fb3e 	bl	800fcfe <__aeabi_memcpy>

08000682 <??ZbZclAttrDefaultRead_28>:
 8000682:	4648      	mov	r0, r9
 8000684:	b2c0      	uxtb	r0, r0
 8000686:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800068a <ZbZclAttrWrite>:
 800068a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	4680      	mov	r8, r0
 8000692:	4699      	mov	r9, r3
 8000694:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8000698:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800069a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 800069e:	4640      	mov	r0, r8
 80006a0:	f7ff fd9d 	bl	80001de <ZbZclAttrFind>
 80006a4:	0006      	movs	r6, r0
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d101      	bne.n	80006ae <??ZbZclAttrWrite_0>
 80006aa:	2086      	movs	r0, #134	@ 0x86
 80006ac:	e0a2      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006ae <??ZbZclAttrWrite_0>:
 80006ae:	68b0      	ldr	r0, [r6, #8]
 80006b0:	7900      	ldrb	r0, [r0, #4]
 80006b2:	f010 0001 	ands.w	r0, r0, #1
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d105      	bne.n	80006c8 <??ZbZclAttrWrite_2>
 80006bc:	0038      	movs	r0, r7
 80006be:	b280      	uxth	r0, r0
 80006c0:	0780      	lsls	r0, r0, #30
 80006c2:	d401      	bmi.n	80006c8 <??ZbZclAttrWrite_2>
 80006c4:	2088      	movs	r0, #136	@ 0x88
 80006c6:	e095      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006c8 <??ZbZclAttrWrite_2>:
 80006c8:	2300      	movs	r3, #0
 80006ca:	4652      	mov	r2, sl
 80006cc:	4649      	mov	r1, r9
 80006ce:	68b0      	ldr	r0, [r6, #8]
 80006d0:	7880      	ldrb	r0, [r0, #2]
 80006d2:	f000 fcb0 	bl	8001036 <ZbZclAttrParseLength>
 80006d6:	9005      	str	r0, [sp, #20]
 80006d8:	9805      	ldr	r0, [sp, #20]
 80006da:	2800      	cmp	r0, #0
 80006dc:	d501      	bpl.n	80006e2 <??ZbZclAttrWrite_3>
 80006de:	2087      	movs	r0, #135	@ 0x87
 80006e0:	e088      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006e2 <??ZbZclAttrWrite_3>:
 80006e2:	68b0      	ldr	r0, [r6, #8]
 80006e4:	7880      	ldrb	r0, [r0, #2]
 80006e6:	f000 ff83 	bl	80015f0 <ZbZclAttrIsInteger>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d026      	beq.n	800073c <??ZbZclAttrWrite_4>
 80006ee:	aa04      	add	r2, sp, #16
 80006f0:	4649      	mov	r1, r9
 80006f2:	68b0      	ldr	r0, [r6, #8]
 80006f4:	7880      	ldrb	r0, [r0, #2]
 80006f6:	f000 fe4d 	bl	8001394 <ZbZclParseInteger>
 80006fa:	0004      	movs	r4, r0
 80006fc:	000d      	movs	r5, r1
 80006fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000702:	2800      	cmp	r0, #0
 8000704:	d002      	beq.n	800070c <??ZbZclAttrWrite_5>
 8000706:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800070a:	e073      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800070c <??ZbZclAttrWrite_5>:
 800070c:	68b0      	ldr	r0, [r6, #8]
 800070e:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8000712:	f004 fe2f 	bl	8005374 <__aeabi_d2lz>
 8000716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800071a:	68b0      	ldr	r0, [r6, #8]
 800071c:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8000720:	f004 fe28 	bl	8005374 <__aeabi_d2lz>
 8000724:	e9cd 0100 	strd	r0, r1, [sp]
 8000728:	68b0      	ldr	r0, [r6, #8]
 800072a:	7882      	ldrb	r2, [r0, #2]
 800072c:	0020      	movs	r0, r4
 800072e:	0029      	movs	r1, r5
 8000730:	f000 ff74 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8000734:	2800      	cmp	r0, #0
 8000736:	d101      	bne.n	800073c <??ZbZclAttrWrite_4>
 8000738:	2087      	movs	r0, #135	@ 0x87
 800073a:	e05b      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800073c <??ZbZclAttrWrite_4>:
 800073c:	68b0      	ldr	r0, [r6, #8]
 800073e:	7900      	ldrb	r0, [r0, #4]
 8000740:	0680      	lsls	r0, r0, #26
 8000742:	d522      	bpl.n	800078a <??ZbZclAttrWrite_6>
 8000744:	2420      	movs	r4, #32
 8000746:	2500      	movs	r5, #0
 8000748:	f10d 0b18 	add.w	fp, sp, #24
 800074c:	002a      	movs	r2, r5
 800074e:	0021      	movs	r1, r4
 8000750:	4658      	mov	r0, fp
 8000752:	f004 f8ae 	bl	80048b2 <__aeabi_memset>
 8000756:	68b0      	ldr	r0, [r6, #8]
 8000758:	9006      	str	r0, [sp, #24]
 800075a:	2001      	movs	r0, #1
 800075c:	f88d 001c 	strb.w	r0, [sp, #28]
 8000760:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8000762:	900c      	str	r0, [sp, #48]	@ 0x30
 8000764:	f8cd 9020 	str.w	r9, [sp, #32]
 8000768:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800076c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8000770:	68f0      	ldr	r0, [r6, #12]
 8000772:	900b      	str	r0, [sp, #44]	@ 0x2c
 8000774:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000778:	900d      	str	r0, [sp, #52]	@ 0x34
 800077a:	aa06      	add	r2, sp, #24
 800077c:	0031      	movs	r1, r6
 800077e:	4640      	mov	r0, r8
 8000780:	f001 fb5e 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000784:	f88d 0010 	strb.w	r0, [sp, #16]
 8000788:	e028      	b.n	80007dc <??ZbZclAttrWrite_7>

0800078a <??ZbZclAttrWrite_6>:
 800078a:	003b      	movs	r3, r7
 800078c:	b29b      	uxth	r3, r3
 800078e:	464a      	mov	r2, r9
 8000790:	0031      	movs	r1, r6
 8000792:	4640      	mov	r0, r8
 8000794:	f000 f85e 	bl	8000854 <ZbZclAttrDefaultWrite>
 8000798:	f88d 0010 	strb.w	r0, [sp, #16]
 800079c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d11b      	bne.n	80007dc <??ZbZclAttrWrite_7>
 80007a4:	68b0      	ldr	r0, [r6, #8]
 80007a6:	7900      	ldrb	r0, [r0, #4]
 80007a8:	0640      	lsls	r0, r0, #25
 80007aa:	d517      	bpl.n	80007dc <??ZbZclAttrWrite_7>
 80007ac:	2420      	movs	r4, #32
 80007ae:	2500      	movs	r5, #0
 80007b0:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 80007b4:	002a      	movs	r2, r5
 80007b6:	0021      	movs	r1, r4
 80007b8:	4658      	mov	r0, fp
 80007ba:	f004 f87a 	bl	80048b2 <__aeabi_memset>
 80007be:	68b0      	ldr	r0, [r6, #8]
 80007c0:	900e      	str	r0, [sp, #56]	@ 0x38
 80007c2:	2002      	movs	r0, #2
 80007c4:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80007c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80007ca:	9014      	str	r0, [sp, #80]	@ 0x50
 80007cc:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80007d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80007d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80007d4:	0031      	movs	r1, r6
 80007d6:	4640      	mov	r0, r8
 80007d8:	f001 fb32 	bl	8001e40 <ZbZclAttrCallbackExec>

080007dc <??ZbZclAttrWrite_7>:
 80007dc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d002      	beq.n	80007ea <??ZbZclAttrWrite_8>
 80007e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e8:	e004      	b.n	80007f4 <??ZbZclAttrWrite_1>

080007ea <??ZbZclAttrWrite_8>:
 80007ea:	0031      	movs	r1, r6
 80007ec:	4640      	mov	r0, r8
 80007ee:	f000 f804 	bl	80007fa <ZbZclAttrPostWrite>
 80007f2:	2000      	movs	r0, #0

080007f4 <??ZbZclAttrWrite_1>:
 80007f4:	b019      	add	sp, #100	@ 0x64
 80007f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007fa <ZbZclAttrPostWrite>:
 80007fa:	b538      	push	{r3, r4, r5, lr}
 80007fc:	0005      	movs	r5, r0
 80007fe:	000c      	movs	r4, r1
 8000800:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8000802:	2800      	cmp	r0, #0
 8000804:	d004      	beq.n	8000810 <??ZbZclAttrPostWrite_0>
 8000806:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800080a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800080c:	f00d ff9a 	bl	800e744 <ZbTimerReset>

08000810 <??ZbZclAttrPostWrite_0>:
 8000810:	2c00      	cmp	r4, #0
 8000812:	d005      	beq.n	8000820 <??ZbZclAttrPostWrite_1>
 8000814:	2200      	movs	r2, #0
 8000816:	68a0      	ldr	r0, [r4, #8]
 8000818:	8801      	ldrh	r1, [r0, #0]
 800081a:	0028      	movs	r0, r5
 800081c:	f001 ffcb 	bl	80027b6 <zcl_attr_reporting_check>

08000820 <??ZbZclAttrPostWrite_1>:
 8000820:	bd31      	pop	{r0, r4, r5, pc}

08000822 <ZbZclAttrPersist>:
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	0005      	movs	r5, r0
 8000826:	000e      	movs	r6, r1
 8000828:	0031      	movs	r1, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	0028      	movs	r0, r5
 800082e:	f7ff fcd6 	bl	80001de <ZbZclAttrFind>
 8000832:	0004      	movs	r4, r0
 8000834:	2c00      	cmp	r4, #0
 8000836:	d101      	bne.n	800083c <??ZbZclAttrPersist_0>
 8000838:	2000      	movs	r0, #0
 800083a:	e00a      	b.n	8000852 <??ZbZclAttrPersist_1>

0800083c <??ZbZclAttrPersist_0>:
 800083c:	68a0      	ldr	r0, [r4, #8]
 800083e:	7900      	ldrb	r0, [r0, #4]
 8000840:	0740      	lsls	r0, r0, #29
 8000842:	d401      	bmi.n	8000848 <??ZbZclAttrPersist_2>
 8000844:	2000      	movs	r0, #0
 8000846:	e004      	b.n	8000852 <??ZbZclAttrPersist_1>

08000848 <??ZbZclAttrPersist_2>:
 8000848:	0021      	movs	r1, r4
 800084a:	0028      	movs	r0, r5
 800084c:	f7ff ffd5 	bl	80007fa <ZbZclAttrPostWrite>
 8000850:	2001      	movs	r0, #1

08000852 <??ZbZclAttrPersist_1>:
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <ZbZclAttrDefaultWrite>:
 8000854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	0006      	movs	r6, r0
 800085a:	000f      	movs	r7, r1
 800085c:	0014      	movs	r4, r2
 800085e:	4698      	mov	r8, r3
 8000860:	2500      	movs	r5, #0
 8000862:	f05f 0900 	movs.w	r9, #0
 8000866:	2c00      	cmp	r4, #0
 8000868:	d101      	bne.n	800086e <??ZbZclAttrDefaultWrite_0>
 800086a:	2001      	movs	r0, #1
 800086c:	e0d6      	b.n	8000a1c <??ZbZclAttrDefaultWrite_1>

0800086e <??ZbZclAttrDefaultWrite_0>:
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	7880      	ldrb	r0, [r0, #2]
 8000872:	2808      	cmp	r0, #8
 8000874:	d062      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000876:	2809      	cmp	r0, #9
 8000878:	d063      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800087a:	280a      	cmp	r0, #10
 800087c:	d064      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 800087e:	280b      	cmp	r0, #11
 8000880:	d065      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000882:	280c      	cmp	r0, #12
 8000884:	d066      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 8000886:	280d      	cmp	r0, #13
 8000888:	d067      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 800088a:	280e      	cmp	r0, #14
 800088c:	d068      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 800088e:	280f      	cmp	r0, #15
 8000890:	d069      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000892:	2810      	cmp	r0, #16
 8000894:	d052      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000896:	2818      	cmp	r0, #24
 8000898:	d050      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 800089a:	2819      	cmp	r0, #25
 800089c:	d051      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800089e:	281a      	cmp	r0, #26
 80008a0:	d052      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008a2:	281b      	cmp	r0, #27
 80008a4:	d053      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008a6:	281c      	cmp	r0, #28
 80008a8:	d054      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008aa:	281d      	cmp	r0, #29
 80008ac:	d055      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ae:	281e      	cmp	r0, #30
 80008b0:	d056      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008b2:	281f      	cmp	r0, #31
 80008b4:	d057      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008b6:	2820      	cmp	r0, #32
 80008b8:	d040      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008ba:	2821      	cmp	r0, #33	@ 0x21
 80008bc:	d041      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008be:	2822      	cmp	r0, #34	@ 0x22
 80008c0:	d042      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008c2:	2823      	cmp	r0, #35	@ 0x23
 80008c4:	d043      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008c6:	2824      	cmp	r0, #36	@ 0x24
 80008c8:	d044      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ca:	2825      	cmp	r0, #37	@ 0x25
 80008cc:	d045      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ce:	2826      	cmp	r0, #38	@ 0x26
 80008d0:	d046      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008d2:	2827      	cmp	r0, #39	@ 0x27
 80008d4:	d047      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008d6:	2828      	cmp	r0, #40	@ 0x28
 80008d8:	d030      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008da:	2829      	cmp	r0, #41	@ 0x29
 80008dc:	d031      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008de:	282a      	cmp	r0, #42	@ 0x2a
 80008e0:	d032      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008e2:	282b      	cmp	r0, #43	@ 0x2b
 80008e4:	d033      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008e6:	282c      	cmp	r0, #44	@ 0x2c
 80008e8:	d034      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ea:	282d      	cmp	r0, #45	@ 0x2d
 80008ec:	d035      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ee:	282e      	cmp	r0, #46	@ 0x2e
 80008f0:	d036      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008f2:	282f      	cmp	r0, #47	@ 0x2f
 80008f4:	d037      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008f6:	2830      	cmp	r0, #48	@ 0x30
 80008f8:	d020      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008fa:	2831      	cmp	r0, #49	@ 0x31
 80008fc:	d021      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008fe:	2838      	cmp	r0, #56	@ 0x38
 8000900:	d01f      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 8000902:	2839      	cmp	r0, #57	@ 0x39
 8000904:	d023      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000906:	283a      	cmp	r0, #58	@ 0x3a
 8000908:	d02d      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 800090a:	2841      	cmp	r0, #65	@ 0x41
 800090c:	d031      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 800090e:	2842      	cmp	r0, #66	@ 0x42
 8000910:	d02f      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 8000912:	2843      	cmp	r0, #67	@ 0x43
 8000914:	d049      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 8000916:	2844      	cmp	r0, #68	@ 0x44
 8000918:	d047      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 800091a:	28e0      	cmp	r0, #224	@ 0xe0
 800091c:	d017      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 800091e:	28e1      	cmp	r0, #225	@ 0xe1
 8000920:	d015      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000922:	28e2      	cmp	r0, #226	@ 0xe2
 8000924:	d013      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000926:	28e8      	cmp	r0, #232	@ 0xe8
 8000928:	d00b      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092a:	28e9      	cmp	r0, #233	@ 0xe9
 800092c:	d009      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092e:	28ea      	cmp	r0, #234	@ 0xea
 8000930:	d00d      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000932:	28f0      	cmp	r0, #240	@ 0xf0
 8000934:	d017      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000936:	28f1      	cmp	r0, #241	@ 0xf1
 8000938:	d018      	beq.n	800096c <??ZbZclAttrDefaultWrite_12>
 800093a:	e058      	b.n	80009ee <??ZbZclAttrDefaultWrite_13>

0800093c <??ZbZclAttrDefaultWrite_2>:
 800093c:	2001      	movs	r0, #1
 800093e:	0005      	movs	r5, r0
 8000940:	e057      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000942 <??ZbZclAttrDefaultWrite_3>:
 8000942:	2002      	movs	r0, #2
 8000944:	0005      	movs	r5, r0
 8000946:	e054      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000948 <??ZbZclAttrDefaultWrite_4>:
 8000948:	2003      	movs	r0, #3
 800094a:	0005      	movs	r5, r0
 800094c:	e051      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800094e <??ZbZclAttrDefaultWrite_5>:
 800094e:	2004      	movs	r0, #4
 8000950:	0005      	movs	r5, r0
 8000952:	e04e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000954 <??ZbZclAttrDefaultWrite_6>:
 8000954:	2005      	movs	r0, #5
 8000956:	0005      	movs	r5, r0
 8000958:	e04b      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800095a <??ZbZclAttrDefaultWrite_7>:
 800095a:	2006      	movs	r0, #6
 800095c:	0005      	movs	r5, r0
 800095e:	e048      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000960 <??ZbZclAttrDefaultWrite_8>:
 8000960:	2007      	movs	r0, #7
 8000962:	0005      	movs	r5, r0
 8000964:	e045      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000966 <??ZbZclAttrDefaultWrite_9>:
 8000966:	2008      	movs	r0, #8
 8000968:	0005      	movs	r5, r0
 800096a:	e042      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800096c <??ZbZclAttrDefaultWrite_12>:
 800096c:	2010      	movs	r0, #16
 800096e:	0005      	movs	r5, r0
 8000970:	e03f      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000972 <??ZbZclAttrDefaultWrite_10>:
 8000972:	6938      	ldr	r0, [r7, #16]
 8000974:	2800      	cmp	r0, #0
 8000976:	d102      	bne.n	800097e <??ZbZclAttrDefaultWrite_15>
 8000978:	2089      	movs	r0, #137	@ 0x89
 800097a:	4681      	mov	r9, r0
 800097c:	e039      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800097e <??ZbZclAttrDefaultWrite_15>:
 800097e:	7820      	ldrb	r0, [r4, #0]
 8000980:	0001      	movs	r1, r0
 8000982:	b2c9      	uxtb	r1, r1
 8000984:	29ff      	cmp	r1, #255	@ 0xff
 8000986:	d105      	bne.n	8000994 <??ZbZclAttrDefaultWrite_16>
 8000988:	21ff      	movs	r1, #255	@ 0xff
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	7011      	strb	r1, [r2, #0]
 800098e:	2100      	movs	r1, #0
 8000990:	000d      	movs	r5, r1
 8000992:	e02e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000994 <??ZbZclAttrDefaultWrite_16>:
 8000994:	0001      	movs	r1, r0
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	1c49      	adds	r1, r1, #1
 800099a:	000d      	movs	r5, r1
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	42a9      	cmp	r1, r5
 80009a0:	d202      	bcs.n	80009a8 <??ZbZclAttrDefaultWrite_17>
 80009a2:	2189      	movs	r1, #137	@ 0x89
 80009a4:	4689      	mov	r9, r1
 80009a6:	e024      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009a8 <??ZbZclAttrDefaultWrite_17>:
 80009a8:	e023      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009aa <??ZbZclAttrDefaultWrite_11>:
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d202      	bcs.n	80009b6 <??ZbZclAttrDefaultWrite_18>
 80009b0:	2089      	movs	r0, #137	@ 0x89
 80009b2:	4681      	mov	r9, r0
 80009b4:	e01d      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009b6 <??ZbZclAttrDefaultWrite_18>:
 80009b6:	0020      	movs	r0, r4
 80009b8:	f003 fa6a 	bl	8003e90 <pletoh16>
 80009bc:	4682      	mov	sl, r0
 80009be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009c2:	4650      	mov	r0, sl
 80009c4:	000a      	movs	r2, r1
 80009c6:	b280      	uxth	r0, r0
 80009c8:	4290      	cmp	r0, r2
 80009ca:	d105      	bne.n	80009d8 <??ZbZclAttrDefaultWrite_19>
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f003 faab 	bl	8003f28 <putle16>
 80009d2:	2000      	movs	r0, #0
 80009d4:	0005      	movs	r5, r0
 80009d6:	e00c      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009d8 <??ZbZclAttrDefaultWrite_19>:
 80009d8:	4650      	mov	r0, sl
 80009da:	b280      	uxth	r0, r0
 80009dc:	1c80      	adds	r0, r0, #2
 80009de:	0005      	movs	r5, r0
 80009e0:	6938      	ldr	r0, [r7, #16]
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d202      	bcs.n	80009ec <??ZbZclAttrDefaultWrite_20>
 80009e6:	2089      	movs	r0, #137	@ 0x89
 80009e8:	4681      	mov	r9, r0
 80009ea:	e002      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ec <??ZbZclAttrDefaultWrite_20>:
 80009ec:	e001      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ee <??ZbZclAttrDefaultWrite_13>:
 80009ee:	2086      	movs	r0, #134	@ 0x86
 80009f0:	4681      	mov	r9, r0

080009f2 <??ZbZclAttrDefaultWrite_14>:
 80009f2:	4648      	mov	r0, r9
 80009f4:	b2c0      	uxtb	r0, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d10e      	bne.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 80009fa:	4640      	mov	r0, r8
 80009fc:	b280      	uxth	r0, r0
 80009fe:	07c0      	lsls	r0, r0, #31
 8000a00:	d40a      	bmi.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d008      	beq.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a06:	9500      	str	r5, [sp, #0]
 8000a08:	46a2      	mov	sl, r4
 8000a0a:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	4651      	mov	r1, sl
 8000a12:	4658      	mov	r0, fp
 8000a14:	f00f f973 	bl	800fcfe <__aeabi_memcpy>

08000a18 <??ZbZclAttrDefaultWrite_21>:
 8000a18:	4648      	mov	r0, r9
 8000a1a:	b2c0      	uxtb	r0, r0

08000a1c <??ZbZclAttrDefaultWrite_1>:
 8000a1c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a20 <ZbZclAttrDefaultValue>:
 8000a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	0004      	movs	r4, r0
 8000a26:	4688      	mov	r8, r1
 8000a28:	0015      	movs	r5, r2
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	f05f 37ff 	movs.w	r7, #4294967295
 8000a30:	0020      	movs	r0, r4
 8000a32:	b2c0      	uxtb	r0, r0
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f000 80a1 	beq.w	8000b7c <??ZbZclAttrDefaultValue_0>
 8000a3a:	2808      	cmp	r0, #8
 8000a3c:	f000 80e7 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000a40:	2809      	cmp	r0, #9
 8000a42:	f000 80da 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000a46:	280a      	cmp	r0, #10
 8000a48:	f000 80cd 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000a4c:	280b      	cmp	r0, #11
 8000a4e:	f000 80c0 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000a52:	280c      	cmp	r0, #12
 8000a54:	f000 80b3 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000a58:	280d      	cmp	r0, #13
 8000a5a:	f000 80a6 	beq.w	8000baa <??ZbZclAttrDefaultValue_6>
 8000a5e:	280e      	cmp	r0, #14
 8000a60:	f000 8099 	beq.w	8000b96 <??ZbZclAttrDefaultValue_7>
 8000a64:	280f      	cmp	r0, #15
 8000a66:	f000 808c 	beq.w	8000b82 <??ZbZclAttrDefaultValue_8>
 8000a6a:	2810      	cmp	r0, #16
 8000a6c:	f000 80db 	beq.w	8000c26 <??ZbZclAttrDefaultValue_9>
 8000a70:	2818      	cmp	r0, #24
 8000a72:	f000 8126 	beq.w	8000cc2 <??ZbZclAttrDefaultValue_10>
 8000a76:	2819      	cmp	r0, #25
 8000a78:	f000 8119 	beq.w	8000cae <??ZbZclAttrDefaultValue_11>
 8000a7c:	281a      	cmp	r0, #26
 8000a7e:	f000 810c 	beq.w	8000c9a <??ZbZclAttrDefaultValue_12>
 8000a82:	281b      	cmp	r0, #27
 8000a84:	f000 80ff 	beq.w	8000c86 <??ZbZclAttrDefaultValue_13>
 8000a88:	281c      	cmp	r0, #28
 8000a8a:	f000 80f2 	beq.w	8000c72 <??ZbZclAttrDefaultValue_14>
 8000a8e:	281d      	cmp	r0, #29
 8000a90:	f000 80e5 	beq.w	8000c5e <??ZbZclAttrDefaultValue_15>
 8000a94:	281e      	cmp	r0, #30
 8000a96:	f000 80d8 	beq.w	8000c4a <??ZbZclAttrDefaultValue_16>
 8000a9a:	281f      	cmp	r0, #31
 8000a9c:	f000 80cb 	beq.w	8000c36 <??ZbZclAttrDefaultValue_17>
 8000aa0:	2820      	cmp	r0, #32
 8000aa2:	f000 80b4 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000aa6:	2821      	cmp	r0, #33	@ 0x21
 8000aa8:	f000 80a7 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000aac:	2822      	cmp	r0, #34	@ 0x22
 8000aae:	f000 809a 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000ab2:	2823      	cmp	r0, #35	@ 0x23
 8000ab4:	f000 808d 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000ab8:	2824      	cmp	r0, #36	@ 0x24
 8000aba:	f000 8080 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000abe:	2825      	cmp	r0, #37	@ 0x25
 8000ac0:	d073      	beq.n	8000baa <??ZbZclAttrDefaultValue_6>
 8000ac2:	2826      	cmp	r0, #38	@ 0x26
 8000ac4:	d067      	beq.n	8000b96 <??ZbZclAttrDefaultValue_7>
 8000ac6:	2827      	cmp	r0, #39	@ 0x27
 8000ac8:	d05b      	beq.n	8000b82 <??ZbZclAttrDefaultValue_8>
 8000aca:	2828      	cmp	r0, #40	@ 0x28
 8000acc:	f000 814b 	beq.w	8000d66 <??ZbZclAttrDefaultValue_18>
 8000ad0:	2829      	cmp	r0, #41	@ 0x29
 8000ad2:	f000 813e 	beq.w	8000d52 <??ZbZclAttrDefaultValue_19>
 8000ad6:	282a      	cmp	r0, #42	@ 0x2a
 8000ad8:	f000 8131 	beq.w	8000d3e <??ZbZclAttrDefaultValue_20>
 8000adc:	282b      	cmp	r0, #43	@ 0x2b
 8000ade:	f000 8124 	beq.w	8000d2a <??ZbZclAttrDefaultValue_21>
 8000ae2:	282c      	cmp	r0, #44	@ 0x2c
 8000ae4:	f000 8117 	beq.w	8000d16 <??ZbZclAttrDefaultValue_22>
 8000ae8:	282d      	cmp	r0, #45	@ 0x2d
 8000aea:	f000 810a 	beq.w	8000d02 <??ZbZclAttrDefaultValue_23>
 8000aee:	282e      	cmp	r0, #46	@ 0x2e
 8000af0:	f000 80fd 	beq.w	8000cee <??ZbZclAttrDefaultValue_24>
 8000af4:	282f      	cmp	r0, #47	@ 0x2f
 8000af6:	f000 80f0 	beq.w	8000cda <??ZbZclAttrDefaultValue_25>
 8000afa:	2830      	cmp	r0, #48	@ 0x30
 8000afc:	f000 8087 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000b00:	2831      	cmp	r0, #49	@ 0x31
 8000b02:	d07a      	beq.n	8000bfa <??ZbZclAttrDefaultValue_2>
 8000b04:	2838      	cmp	r0, #56	@ 0x38
 8000b06:	f000 813a 	beq.w	8000d7e <??ZbZclAttrDefaultValue_26>
 8000b0a:	2839      	cmp	r0, #57	@ 0x39
 8000b0c:	f000 8142 	beq.w	8000d94 <??ZbZclAttrDefaultValue_27>
 8000b10:	283a      	cmp	r0, #58	@ 0x3a
 8000b12:	f000 8149 	beq.w	8000da8 <??ZbZclAttrDefaultValue_28>
 8000b16:	2841      	cmp	r0, #65	@ 0x41
 8000b18:	f000 8152 	beq.w	8000dc0 <??ZbZclAttrDefaultValue_29>
 8000b1c:	2842      	cmp	r0, #66	@ 0x42
 8000b1e:	f000 8159 	beq.w	8000dd4 <??ZbZclAttrDefaultValue_30>
 8000b22:	2843      	cmp	r0, #67	@ 0x43
 8000b24:	f000 8160 	beq.w	8000de8 <??ZbZclAttrDefaultValue_31>
 8000b28:	2844      	cmp	r0, #68	@ 0x44
 8000b2a:	f000 8168 	beq.w	8000dfe <??ZbZclAttrDefaultValue_32>
 8000b2e:	2848      	cmp	r0, #72	@ 0x48
 8000b30:	f000 818b 	beq.w	8000e4a <??ZbZclAttrDefaultValue_33>
 8000b34:	284c      	cmp	r0, #76	@ 0x4c
 8000b36:	f000 8192 	beq.w	8000e5e <??ZbZclAttrDefaultValue_34>
 8000b3a:	2850      	cmp	r0, #80	@ 0x50
 8000b3c:	f000 8199 	beq.w	8000e72 <??ZbZclAttrDefaultValue_35>
 8000b40:	2851      	cmp	r0, #81	@ 0x51
 8000b42:	f000 81a0 	beq.w	8000e86 <??ZbZclAttrDefaultValue_36>
 8000b46:	28e0      	cmp	r0, #224	@ 0xe0
 8000b48:	f000 81a7 	beq.w	8000e9a <??ZbZclAttrDefaultValue_37>
 8000b4c:	28e1      	cmp	r0, #225	@ 0xe1
 8000b4e:	f000 81ae 	beq.w	8000eae <??ZbZclAttrDefaultValue_38>
 8000b52:	28e2      	cmp	r0, #226	@ 0xe2
 8000b54:	f000 81b5 	beq.w	8000ec2 <??ZbZclAttrDefaultValue_39>
 8000b58:	28e8      	cmp	r0, #232	@ 0xe8
 8000b5a:	f000 81bc 	beq.w	8000ed6 <??ZbZclAttrDefaultValue_40>
 8000b5e:	28e9      	cmp	r0, #233	@ 0xe9
 8000b60:	f000 81c3 	beq.w	8000eea <??ZbZclAttrDefaultValue_41>
 8000b64:	28ea      	cmp	r0, #234	@ 0xea
 8000b66:	f000 81ca 	beq.w	8000efe <??ZbZclAttrDefaultValue_42>
 8000b6a:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6c:	f000 8152 	beq.w	8000e14 <??ZbZclAttrDefaultValue_43>
 8000b70:	28f1      	cmp	r0, #241	@ 0xf1
 8000b72:	f000 815b 	beq.w	8000e2c <??ZbZclAttrDefaultValue_44>
 8000b76:	28ff      	cmp	r0, #255	@ 0xff
 8000b78:	f040 81cb 	bne.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b7c <??ZbZclAttrDefaultValue_0>:
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	0007      	movs	r7, r0
 8000b80:	e1c7      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000b82 <??ZbZclAttrDefaultValue_8>:
 8000b82:	1c70      	adds	r0, r6, #1
 8000b84:	4285      	cmp	r5, r0
 8000b86:	f0c0 81c4 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b8a <??ZbZclAttrDefaultValue_47>:
 8000b8a:	20ff      	movs	r0, #255	@ 0xff
 8000b8c:	f888 0000 	strb.w	r0, [r8]
 8000b90:	f118 0801 	adds.w	r8, r8, #1
 8000b94:	1c76      	adds	r6, r6, #1

08000b96 <??ZbZclAttrDefaultValue_7>:
 8000b96:	1c70      	adds	r0, r6, #1
 8000b98:	4285      	cmp	r5, r0
 8000b9a:	f0c0 81ba 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b9e <??ZbZclAttrDefaultValue_48>:
 8000b9e:	20ff      	movs	r0, #255	@ 0xff
 8000ba0:	f888 0000 	strb.w	r0, [r8]
 8000ba4:	f118 0801 	adds.w	r8, r8, #1
 8000ba8:	1c76      	adds	r6, r6, #1

08000baa <??ZbZclAttrDefaultValue_6>:
 8000baa:	1c70      	adds	r0, r6, #1
 8000bac:	4285      	cmp	r5, r0
 8000bae:	f0c0 81b0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bb2 <??ZbZclAttrDefaultValue_49>:
 8000bb2:	20ff      	movs	r0, #255	@ 0xff
 8000bb4:	f888 0000 	strb.w	r0, [r8]
 8000bb8:	f118 0801 	adds.w	r8, r8, #1
 8000bbc:	1c76      	adds	r6, r6, #1

08000bbe <??ZbZclAttrDefaultValue_5>:
 8000bbe:	1c70      	adds	r0, r6, #1
 8000bc0:	4285      	cmp	r5, r0
 8000bc2:	f0c0 81a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bc6 <??ZbZclAttrDefaultValue_50>:
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	f888 0000 	strb.w	r0, [r8]
 8000bcc:	f118 0801 	adds.w	r8, r8, #1
 8000bd0:	1c76      	adds	r6, r6, #1

08000bd2 <??ZbZclAttrDefaultValue_4>:
 8000bd2:	1c70      	adds	r0, r6, #1
 8000bd4:	4285      	cmp	r5, r0
 8000bd6:	f0c0 819c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bda <??ZbZclAttrDefaultValue_51>:
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	f888 0000 	strb.w	r0, [r8]
 8000be0:	f118 0801 	adds.w	r8, r8, #1
 8000be4:	1c76      	adds	r6, r6, #1

08000be6 <??ZbZclAttrDefaultValue_3>:
 8000be6:	1c70      	adds	r0, r6, #1
 8000be8:	4285      	cmp	r5, r0
 8000bea:	f0c0 8192 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bee <??ZbZclAttrDefaultValue_52>:
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	f888 0000 	strb.w	r0, [r8]
 8000bf4:	f118 0801 	adds.w	r8, r8, #1
 8000bf8:	1c76      	adds	r6, r6, #1

08000bfa <??ZbZclAttrDefaultValue_2>:
 8000bfa:	1c70      	adds	r0, r6, #1
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	f0c0 8188 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c02 <??ZbZclAttrDefaultValue_53>:
 8000c02:	20ff      	movs	r0, #255	@ 0xff
 8000c04:	f888 0000 	strb.w	r0, [r8]
 8000c08:	f118 0801 	adds.w	r8, r8, #1
 8000c0c:	1c76      	adds	r6, r6, #1

08000c0e <??ZbZclAttrDefaultValue_1>:
 8000c0e:	1c70      	adds	r0, r6, #1
 8000c10:	4285      	cmp	r5, r0
 8000c12:	f0c0 817e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c16 <??ZbZclAttrDefaultValue_54>:
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	f888 0000 	strb.w	r0, [r8]
 8000c1c:	f118 0801 	adds.w	r8, r8, #1
 8000c20:	1c76      	adds	r6, r6, #1
 8000c22:	0037      	movs	r7, r6
 8000c24:	e175      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c26 <??ZbZclAttrDefaultValue_9>:
 8000c26:	2000      	movs	r0, #0
 8000c28:	f888 0000 	strb.w	r0, [r8]
 8000c2c:	f118 0801 	adds.w	r8, r8, #1
 8000c30:	2001      	movs	r0, #1
 8000c32:	0007      	movs	r7, r0
 8000c34:	e16d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c36 <??ZbZclAttrDefaultValue_17>:
 8000c36:	1c70      	adds	r0, r6, #1
 8000c38:	4285      	cmp	r5, r0
 8000c3a:	f0c0 816a 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c3e <??ZbZclAttrDefaultValue_55>:
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f888 0000 	strb.w	r0, [r8]
 8000c44:	f118 0801 	adds.w	r8, r8, #1
 8000c48:	1c76      	adds	r6, r6, #1

08000c4a <??ZbZclAttrDefaultValue_16>:
 8000c4a:	1c70      	adds	r0, r6, #1
 8000c4c:	4285      	cmp	r5, r0
 8000c4e:	f0c0 8160 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c52 <??ZbZclAttrDefaultValue_56>:
 8000c52:	2000      	movs	r0, #0
 8000c54:	f888 0000 	strb.w	r0, [r8]
 8000c58:	f118 0801 	adds.w	r8, r8, #1
 8000c5c:	1c76      	adds	r6, r6, #1

08000c5e <??ZbZclAttrDefaultValue_15>:
 8000c5e:	1c70      	adds	r0, r6, #1
 8000c60:	4285      	cmp	r5, r0
 8000c62:	f0c0 8156 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c66 <??ZbZclAttrDefaultValue_57>:
 8000c66:	2000      	movs	r0, #0
 8000c68:	f888 0000 	strb.w	r0, [r8]
 8000c6c:	f118 0801 	adds.w	r8, r8, #1
 8000c70:	1c76      	adds	r6, r6, #1

08000c72 <??ZbZclAttrDefaultValue_14>:
 8000c72:	1c70      	adds	r0, r6, #1
 8000c74:	4285      	cmp	r5, r0
 8000c76:	f0c0 814c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c7a <??ZbZclAttrDefaultValue_58>:
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f888 0000 	strb.w	r0, [r8]
 8000c80:	f118 0801 	adds.w	r8, r8, #1
 8000c84:	1c76      	adds	r6, r6, #1

08000c86 <??ZbZclAttrDefaultValue_13>:
 8000c86:	1c70      	adds	r0, r6, #1
 8000c88:	4285      	cmp	r5, r0
 8000c8a:	f0c0 8142 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c8e <??ZbZclAttrDefaultValue_59>:
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f888 0000 	strb.w	r0, [r8]
 8000c94:	f118 0801 	adds.w	r8, r8, #1
 8000c98:	1c76      	adds	r6, r6, #1

08000c9a <??ZbZclAttrDefaultValue_12>:
 8000c9a:	1c70      	adds	r0, r6, #1
 8000c9c:	4285      	cmp	r5, r0
 8000c9e:	f0c0 8138 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ca2 <??ZbZclAttrDefaultValue_60>:
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f888 0000 	strb.w	r0, [r8]
 8000ca8:	f118 0801 	adds.w	r8, r8, #1
 8000cac:	1c76      	adds	r6, r6, #1

08000cae <??ZbZclAttrDefaultValue_11>:
 8000cae:	1c70      	adds	r0, r6, #1
 8000cb0:	4285      	cmp	r5, r0
 8000cb2:	f0c0 812e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cb6 <??ZbZclAttrDefaultValue_61>:
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f888 0000 	strb.w	r0, [r8]
 8000cbc:	f118 0801 	adds.w	r8, r8, #1
 8000cc0:	1c76      	adds	r6, r6, #1

08000cc2 <??ZbZclAttrDefaultValue_10>:
 8000cc2:	1c70      	adds	r0, r6, #1
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	f0c0 8124 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cca <??ZbZclAttrDefaultValue_62>:
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f888 0000 	strb.w	r0, [r8]
 8000cd0:	f118 0801 	adds.w	r8, r8, #1
 8000cd4:	1c76      	adds	r6, r6, #1
 8000cd6:	0037      	movs	r7, r6
 8000cd8:	e11b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000cda <??ZbZclAttrDefaultValue_25>:
 8000cda:	1c70      	adds	r0, r6, #1
 8000cdc:	4285      	cmp	r5, r0
 8000cde:	f0c0 8118 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ce2 <??ZbZclAttrDefaultValue_63>:
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f888 0000 	strb.w	r0, [r8]
 8000ce8:	f118 0801 	adds.w	r8, r8, #1
 8000cec:	1c76      	adds	r6, r6, #1

08000cee <??ZbZclAttrDefaultValue_24>:
 8000cee:	1c70      	adds	r0, r6, #1
 8000cf0:	4285      	cmp	r5, r0
 8000cf2:	f0c0 810e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cf6 <??ZbZclAttrDefaultValue_64>:
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f888 0000 	strb.w	r0, [r8]
 8000cfc:	f118 0801 	adds.w	r8, r8, #1
 8000d00:	1c76      	adds	r6, r6, #1

08000d02 <??ZbZclAttrDefaultValue_23>:
 8000d02:	1c70      	adds	r0, r6, #1
 8000d04:	4285      	cmp	r5, r0
 8000d06:	f0c0 8104 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d0a <??ZbZclAttrDefaultValue_65>:
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f888 0000 	strb.w	r0, [r8]
 8000d10:	f118 0801 	adds.w	r8, r8, #1
 8000d14:	1c76      	adds	r6, r6, #1

08000d16 <??ZbZclAttrDefaultValue_22>:
 8000d16:	1c70      	adds	r0, r6, #1
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	f0c0 80fa 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d1e <??ZbZclAttrDefaultValue_66>:
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f888 0000 	strb.w	r0, [r8]
 8000d24:	f118 0801 	adds.w	r8, r8, #1
 8000d28:	1c76      	adds	r6, r6, #1

08000d2a <??ZbZclAttrDefaultValue_21>:
 8000d2a:	1c70      	adds	r0, r6, #1
 8000d2c:	4285      	cmp	r5, r0
 8000d2e:	f0c0 80f0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d32 <??ZbZclAttrDefaultValue_67>:
 8000d32:	2000      	movs	r0, #0
 8000d34:	f888 0000 	strb.w	r0, [r8]
 8000d38:	f118 0801 	adds.w	r8, r8, #1
 8000d3c:	1c76      	adds	r6, r6, #1

08000d3e <??ZbZclAttrDefaultValue_20>:
 8000d3e:	1c70      	adds	r0, r6, #1
 8000d40:	4285      	cmp	r5, r0
 8000d42:	f0c0 80e6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d46 <??ZbZclAttrDefaultValue_68>:
 8000d46:	2000      	movs	r0, #0
 8000d48:	f888 0000 	strb.w	r0, [r8]
 8000d4c:	f118 0801 	adds.w	r8, r8, #1
 8000d50:	1c76      	adds	r6, r6, #1

08000d52 <??ZbZclAttrDefaultValue_19>:
 8000d52:	1c70      	adds	r0, r6, #1
 8000d54:	4285      	cmp	r5, r0
 8000d56:	f0c0 80dc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d5a <??ZbZclAttrDefaultValue_69>:
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f888 0000 	strb.w	r0, [r8]
 8000d60:	f118 0801 	adds.w	r8, r8, #1
 8000d64:	1c76      	adds	r6, r6, #1

08000d66 <??ZbZclAttrDefaultValue_18>:
 8000d66:	1c70      	adds	r0, r6, #1
 8000d68:	4285      	cmp	r5, r0
 8000d6a:	f0c0 80d2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d6e <??ZbZclAttrDefaultValue_70>:
 8000d6e:	2080      	movs	r0, #128	@ 0x80
 8000d70:	f888 0000 	strb.w	r0, [r8]
 8000d74:	f118 0801 	adds.w	r8, r8, #1
 8000d78:	1c76      	adds	r6, r6, #1
 8000d7a:	0037      	movs	r7, r6
 8000d7c:	e0c9      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d7e <??ZbZclAttrDefaultValue_26>:
 8000d7e:	2d02      	cmp	r5, #2
 8000d80:	f0c0 80c7 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d84 <??ZbZclAttrDefaultValue_71>:
 8000d84:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f003 f8cd 	bl	8003f28 <putle16>
 8000d8e:	2002      	movs	r0, #2
 8000d90:	0007      	movs	r7, r0
 8000d92:	e0be      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d94 <??ZbZclAttrDefaultValue_27>:
 8000d94:	2d04      	cmp	r5, #4
 8000d96:	f0c0 80bc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d9a <??ZbZclAttrDefaultValue_72>:
 8000d9a:	495f      	ldr	r1, [pc, #380]	@ (8000f18 <??DataTable1>)
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	f003 f8d5 	bl	8003f4c <putle32>
 8000da2:	2004      	movs	r0, #4
 8000da4:	0007      	movs	r7, r0
 8000da6:	e0b4      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000da8 <??ZbZclAttrDefaultValue_28>:
 8000da8:	2d08      	cmp	r5, #8
 8000daa:	f0c0 80b2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dae <??ZbZclAttrDefaultValue_73>:
 8000dae:	f07f 0201 	mvns.w	r2, #1
 8000db2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f1c <??DataTable1_1>)
 8000db4:	4640      	mov	r0, r8
 8000db6:	f003 f8fc 	bl	8003fb2 <putle64>
 8000dba:	2008      	movs	r0, #8
 8000dbc:	0007      	movs	r7, r0
 8000dbe:	e0a8      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc0 <??ZbZclAttrDefaultValue_29>:
 8000dc0:	2d02      	cmp	r5, #2
 8000dc2:	f0c0 80a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc6 <??ZbZclAttrDefaultValue_74>:
 8000dc6:	21ff      	movs	r1, #255	@ 0xff
 8000dc8:	4640      	mov	r0, r8
 8000dca:	f003 f8ad 	bl	8003f28 <putle16>
 8000dce:	2002      	movs	r0, #2
 8000dd0:	0007      	movs	r7, r0
 8000dd2:	e09e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dd4 <??ZbZclAttrDefaultValue_30>:
 8000dd4:	2d02      	cmp	r5, #2
 8000dd6:	f0c0 809c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dda <??ZbZclAttrDefaultValue_75>:
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4640      	mov	r0, r8
 8000dde:	f003 f8a3 	bl	8003f28 <putle16>
 8000de2:	2002      	movs	r0, #2
 8000de4:	0007      	movs	r7, r0
 8000de6:	e094      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000de8 <??ZbZclAttrDefaultValue_31>:
 8000de8:	2d04      	cmp	r5, #4
 8000dea:	f0c0 8092 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dee <??ZbZclAttrDefaultValue_76>:
 8000dee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000df2:	4640      	mov	r0, r8
 8000df4:	f003 f8aa 	bl	8003f4c <putle32>
 8000df8:	2004      	movs	r0, #4
 8000dfa:	0007      	movs	r7, r0
 8000dfc:	e089      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dfe <??ZbZclAttrDefaultValue_32>:
 8000dfe:	2d04      	cmp	r5, #4
 8000e00:	f0c0 8087 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000e04 <??ZbZclAttrDefaultValue_77>:
 8000e04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f003 f89f 	bl	8003f4c <putle32>
 8000e0e:	2004      	movs	r0, #4
 8000e10:	0007      	movs	r7, r0
 8000e12:	e07e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e14 <??ZbZclAttrDefaultValue_43>:
 8000e14:	2d08      	cmp	r5, #8
 8000e16:	d37c      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e18 <??ZbZclAttrDefaultValue_78>:
 8000e18:	f05f 32ff 	movs.w	r2, #4294967295
 8000e1c:	f05f 33ff 	movs.w	r3, #4294967295
 8000e20:	4640      	mov	r0, r8
 8000e22:	f003 f8c6 	bl	8003fb2 <putle64>
 8000e26:	2008      	movs	r0, #8
 8000e28:	0007      	movs	r7, r0
 8000e2a:	e072      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e2c <??ZbZclAttrDefaultValue_44>:
 8000e2c:	2d10      	cmp	r5, #16
 8000e2e:	d370      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e30 <??ZbZclAttrDefaultValue_79>:
 8000e30:	f05f 0910 	movs.w	r9, #16
 8000e34:	f05f 0a00 	movs.w	sl, #0
 8000e38:	46c3      	mov	fp, r8
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4658      	mov	r0, fp
 8000e40:	f003 fd37 	bl	80048b2 <__aeabi_memset>
 8000e44:	2010      	movs	r0, #16
 8000e46:	0007      	movs	r7, r0
 8000e48:	e063      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4a <??ZbZclAttrDefaultValue_33>:
 8000e4a:	2d02      	cmp	r5, #2
 8000e4c:	d361      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4e <??ZbZclAttrDefaultValue_80>:
 8000e4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e52:	4640      	mov	r0, r8
 8000e54:	f003 f868 	bl	8003f28 <putle16>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	0007      	movs	r7, r0
 8000e5c:	e059      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e5e <??ZbZclAttrDefaultValue_34>:
 8000e5e:	2d02      	cmp	r5, #2
 8000e60:	d357      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e62 <??ZbZclAttrDefaultValue_81>:
 8000e62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e66:	4640      	mov	r0, r8
 8000e68:	f003 f85e 	bl	8003f28 <putle16>
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	0007      	movs	r7, r0
 8000e70:	e04f      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e72 <??ZbZclAttrDefaultValue_35>:
 8000e72:	2d02      	cmp	r5, #2
 8000e74:	d34d      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e76 <??ZbZclAttrDefaultValue_82>:
 8000e76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	f003 f854 	bl	8003f28 <putle16>
 8000e80:	2002      	movs	r0, #2
 8000e82:	0007      	movs	r7, r0
 8000e84:	e045      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e86 <??ZbZclAttrDefaultValue_36>:
 8000e86:	2d02      	cmp	r5, #2
 8000e88:	d343      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e8a <??ZbZclAttrDefaultValue_83>:
 8000e8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f003 f84a 	bl	8003f28 <putle16>
 8000e94:	2002      	movs	r0, #2
 8000e96:	0007      	movs	r7, r0
 8000e98:	e03b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9a <??ZbZclAttrDefaultValue_37>:
 8000e9a:	2d04      	cmp	r5, #4
 8000e9c:	d339      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9e <??ZbZclAttrDefaultValue_84>:
 8000e9e:	f05f 31ff 	movs.w	r1, #4294967295
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	f003 f852 	bl	8003f4c <putle32>
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	0007      	movs	r7, r0
 8000eac:	e031      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eae <??ZbZclAttrDefaultValue_38>:
 8000eae:	2d04      	cmp	r5, #4
 8000eb0:	d32f      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eb2 <??ZbZclAttrDefaultValue_85>:
 8000eb2:	f05f 31ff 	movs.w	r1, #4294967295
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	f003 f848 	bl	8003f4c <putle32>
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	0007      	movs	r7, r0
 8000ec0:	e027      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec2 <??ZbZclAttrDefaultValue_39>:
 8000ec2:	2d04      	cmp	r5, #4
 8000ec4:	d325      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec6 <??ZbZclAttrDefaultValue_86>:
 8000ec6:	f05f 31ff 	movs.w	r1, #4294967295
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f003 f83e 	bl	8003f4c <putle32>
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	0007      	movs	r7, r0
 8000ed4:	e01d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ed6 <??ZbZclAttrDefaultValue_40>:
 8000ed6:	2d02      	cmp	r5, #2
 8000ed8:	d31b      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eda <??ZbZclAttrDefaultValue_87>:
 8000eda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f003 f822 	bl	8003f28 <putle16>
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	0007      	movs	r7, r0
 8000ee8:	e013      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eea <??ZbZclAttrDefaultValue_41>:
 8000eea:	2d02      	cmp	r5, #2
 8000eec:	d311      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eee <??ZbZclAttrDefaultValue_88>:
 8000eee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	f003 f818 	bl	8003f28 <putle16>
 8000ef8:	2002      	movs	r0, #2
 8000efa:	0007      	movs	r7, r0
 8000efc:	e009      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000efe <??ZbZclAttrDefaultValue_42>:
 8000efe:	2d04      	cmp	r5, #4
 8000f00:	d307      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f02 <??ZbZclAttrDefaultValue_89>:
 8000f02:	f05f 31ff 	movs.w	r1, #4294967295
 8000f06:	4640      	mov	r0, r8
 8000f08:	f003 f820 	bl	8003f4c <putle32>
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	0007      	movs	r7, r0
 8000f10:	e7ff      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f12 <??ZbZclAttrDefaultValue_45>:
 8000f12:	0038      	movs	r0, r7
 8000f14:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f18 <??DataTable1>:
 8000f18:	fffe 00ff                                   ....

08000f1c <??DataTable1_1>:
 8000f1c:	ffff 001f                                   ....

08000f20 <ZbZclAttrTypeLength>:
 8000f20:	0001      	movs	r1, r0
 8000f22:	0008      	movs	r0, r1
 8000f24:	b2c0      	uxtb	r0, r0
 8000f26:	2800      	cmp	r0, #0
 8000f28:	f000 8081 	beq.w	800102e <??ZbZclAttrTypeLength_0>
 8000f2c:	2808      	cmp	r0, #8
 8000f2e:	d06c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f30:	2809      	cmp	r0, #9
 8000f32:	d06c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	d06c      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f38:	280b      	cmp	r0, #11
 8000f3a:	d06c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f3c:	280c      	cmp	r0, #12
 8000f3e:	d06c      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f40:	280d      	cmp	r0, #13
 8000f42:	d06c      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f44:	280e      	cmp	r0, #14
 8000f46:	d06c      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f48:	280f      	cmp	r0, #15
 8000f4a:	d06c      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f4c:	2810      	cmp	r0, #16
 8000f4e:	d05c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f50:	2818      	cmp	r0, #24
 8000f52:	d05a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f54:	2819      	cmp	r0, #25
 8000f56:	d05a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f58:	281a      	cmp	r0, #26
 8000f5a:	d05a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f5c:	281b      	cmp	r0, #27
 8000f5e:	d05a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f60:	281c      	cmp	r0, #28
 8000f62:	d05a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f64:	281d      	cmp	r0, #29
 8000f66:	d05a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f68:	281e      	cmp	r0, #30
 8000f6a:	d05a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f6c:	281f      	cmp	r0, #31
 8000f6e:	d05a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f70:	2820      	cmp	r0, #32
 8000f72:	d04a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f74:	2821      	cmp	r0, #33	@ 0x21
 8000f76:	d04a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f78:	2822      	cmp	r0, #34	@ 0x22
 8000f7a:	d04a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f7c:	2823      	cmp	r0, #35	@ 0x23
 8000f7e:	d04a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f80:	2824      	cmp	r0, #36	@ 0x24
 8000f82:	d04a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f84:	2825      	cmp	r0, #37	@ 0x25
 8000f86:	d04a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f88:	2826      	cmp	r0, #38	@ 0x26
 8000f8a:	d04a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f8c:	2827      	cmp	r0, #39	@ 0x27
 8000f8e:	d04a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f90:	2828      	cmp	r0, #40	@ 0x28
 8000f92:	d03a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f94:	2829      	cmp	r0, #41	@ 0x29
 8000f96:	d03a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f98:	282a      	cmp	r0, #42	@ 0x2a
 8000f9a:	d03a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f9c:	282b      	cmp	r0, #43	@ 0x2b
 8000f9e:	d03a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fa0:	282c      	cmp	r0, #44	@ 0x2c
 8000fa2:	d03a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000fa4:	282d      	cmp	r0, #45	@ 0x2d
 8000fa6:	d03a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000fa8:	282e      	cmp	r0, #46	@ 0x2e
 8000faa:	d03a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000fac:	282f      	cmp	r0, #47	@ 0x2f
 8000fae:	d03a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fb0:	2830      	cmp	r0, #48	@ 0x30
 8000fb2:	d02a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000fb4:	2831      	cmp	r0, #49	@ 0x31
 8000fb6:	d02a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fb8:	2838      	cmp	r0, #56	@ 0x38
 8000fba:	d028      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fbc:	2839      	cmp	r0, #57	@ 0x39
 8000fbe:	d02a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fc0:	283a      	cmp	r0, #58	@ 0x3a
 8000fc2:	d030      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fc4:	2841      	cmp	r0, #65	@ 0x41
 8000fc6:	d032      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fc8:	2842      	cmp	r0, #66	@ 0x42
 8000fca:	d030      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fcc:	2843      	cmp	r0, #67	@ 0x43
 8000fce:	d02e      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd0:	2844      	cmp	r0, #68	@ 0x44
 8000fd2:	d02c      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd4:	2848      	cmp	r0, #72	@ 0x48
 8000fd6:	d02a      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd8:	284c      	cmp	r0, #76	@ 0x4c
 8000fda:	d028      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fdc:	2850      	cmp	r0, #80	@ 0x50
 8000fde:	d026      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe0:	2851      	cmp	r0, #81	@ 0x51
 8000fe2:	d024      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe4:	28e0      	cmp	r0, #224	@ 0xe0
 8000fe6:	d016      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fe8:	28e1      	cmp	r0, #225	@ 0xe1
 8000fea:	d014      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fec:	28e2      	cmp	r0, #226	@ 0xe2
 8000fee:	d012      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ff0:	28e8      	cmp	r0, #232	@ 0xe8
 8000ff2:	d00c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff4:	28e9      	cmp	r0, #233	@ 0xe9
 8000ff6:	d00a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff8:	28ea      	cmp	r0, #234	@ 0xea
 8000ffa:	d00c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ffc:	28f0      	cmp	r0, #240	@ 0xf0
 8000ffe:	d012      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8001000:	28f1      	cmp	r0, #241	@ 0xf1
 8001002:	d012      	beq.n	800102a <??ZbZclAttrTypeLength_9>
 8001004:	28ff      	cmp	r0, #255	@ 0xff
 8001006:	d012      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8001008:	e013      	b.n	8001032 <??ZbZclAttrTypeLength_10>

0800100a <??ZbZclAttrTypeLength_1>:
 800100a:	2001      	movs	r0, #1
 800100c:	e012      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800100e <??ZbZclAttrTypeLength_2>:
 800100e:	2002      	movs	r0, #2
 8001010:	e010      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001012 <??ZbZclAttrTypeLength_3>:
 8001012:	2003      	movs	r0, #3
 8001014:	e00e      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001016 <??ZbZclAttrTypeLength_4>:
 8001016:	2004      	movs	r0, #4
 8001018:	e00c      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101a <??ZbZclAttrTypeLength_5>:
 800101a:	2005      	movs	r0, #5
 800101c:	e00a      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101e <??ZbZclAttrTypeLength_6>:
 800101e:	2006      	movs	r0, #6
 8001020:	e008      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001022 <??ZbZclAttrTypeLength_7>:
 8001022:	2007      	movs	r0, #7
 8001024:	e006      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001026 <??ZbZclAttrTypeLength_8>:
 8001026:	2008      	movs	r0, #8
 8001028:	e004      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102a <??ZbZclAttrTypeLength_9>:
 800102a:	2010      	movs	r0, #16
 800102c:	e002      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102e <??ZbZclAttrTypeLength_0>:
 800102e:	2000      	movs	r0, #0
 8001030:	e000      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001032 <??ZbZclAttrTypeLength_10>:
 8001032:	2000      	movs	r0, #0

08001034 <??ZbZclAttrTypeLength_11>:
 8001034:	4770      	bx	lr

08001036 <ZbZclAttrParseLength>:
 8001036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103a:	0006      	movs	r6, r0
 800103c:	000c      	movs	r4, r1
 800103e:	0015      	movs	r5, r2
 8001040:	001f      	movs	r7, r3
 8001042:	0038      	movs	r0, r7
 8001044:	b2c0      	uxtb	r0, r0
 8001046:	280f      	cmp	r0, #15
 8001048:	d302      	bcc.n	8001050 <??ZbZclAttrParseLength_0>
 800104a:	f05f 30ff 	movs.w	r0, #4294967295
 800104e:	e0a1      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001050 <??ZbZclAttrParseLength_0>:
 8001050:	0030      	movs	r0, r6
 8001052:	b2c0      	uxtb	r0, r0
 8001054:	f7ff ff64 	bl	8000f20 <ZbZclAttrTypeLength>
 8001058:	0001      	movs	r1, r0
 800105a:	2901      	cmp	r1, #1
 800105c:	db06      	blt.n	800106c <??ZbZclAttrParseLength_2>
 800105e:	428d      	cmp	r5, r1
 8001060:	d202      	bcs.n	8001068 <??ZbZclAttrParseLength_3>
 8001062:	f05f 30ff 	movs.w	r0, #4294967295
 8001066:	e095      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001068 <??ZbZclAttrParseLength_3>:
 8001068:	0008      	movs	r0, r1
 800106a:	e093      	b.n	8001194 <??ZbZclAttrParseLength_1>

0800106c <??ZbZclAttrParseLength_2>:
 800106c:	2c00      	cmp	r4, #0
 800106e:	d101      	bne.n	8001074 <??ZbZclAttrParseLength_4>
 8001070:	0028      	movs	r0, r5
 8001072:	e08f      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001074 <??ZbZclAttrParseLength_4>:
 8001074:	f05f 39ff 	movs.w	r9, #4294967295
 8001078:	0030      	movs	r0, r6
 800107a:	b2c0      	uxtb	r0, r0
 800107c:	3841      	subs	r0, #65	@ 0x41
 800107e:	2801      	cmp	r0, #1
 8001080:	d90a      	bls.n	8001098 <??ZbZclAttrParseLength_5>
 8001082:	1e80      	subs	r0, r0, #2
 8001084:	2801      	cmp	r0, #1
 8001086:	d914      	bls.n	80010b2 <??ZbZclAttrParseLength_6>
 8001088:	1f40      	subs	r0, r0, #5
 800108a:	d027      	beq.n	80010dc <??ZbZclAttrParseLength_7>
 800108c:	1f00      	subs	r0, r0, #4
 800108e:	d04b      	beq.n	8001128 <??ZbZclAttrParseLength_8>
 8001090:	1f00      	subs	r0, r0, #4
 8001092:	2801      	cmp	r0, #1
 8001094:	d922      	bls.n	80010dc <??ZbZclAttrParseLength_7>
 8001096:	e074      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001098 <??ZbZclAttrParseLength_5>:
 8001098:	2d00      	cmp	r5, #0
 800109a:	d072      	beq.n	8001182 <??ZbZclAttrParseLength_10>

0800109c <??ZbZclAttrParseLength_11>:
 800109c:	7820      	ldrb	r0, [r4, #0]
 800109e:	28ff      	cmp	r0, #255	@ 0xff
 80010a0:	d102      	bne.n	80010a8 <??ZbZclAttrParseLength_12>
 80010a2:	f05f 0901 	movs.w	r9, #1
 80010a6:	e003      	b.n	80010b0 <??ZbZclAttrParseLength_13>

080010a8 <??ZbZclAttrParseLength_12>:
 80010a8:	f894 9000 	ldrb.w	r9, [r4]
 80010ac:	f119 0901 	adds.w	r9, r9, #1

080010b0 <??ZbZclAttrParseLength_13>:
 80010b0:	e067      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010b2 <??ZbZclAttrParseLength_6>:
 80010b2:	2d02      	cmp	r5, #2
 80010b4:	d365      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010b6 <??ZbZclAttrParseLength_14>:
 80010b6:	0020      	movs	r0, r4
 80010b8:	f002 feea 	bl	8003e90 <pletoh16>
 80010bc:	4680      	mov	r8, r0
 80010be:	4640      	mov	r0, r8
 80010c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010c4:	b280      	uxth	r0, r0
 80010c6:	4288      	cmp	r0, r1
 80010c8:	d102      	bne.n	80010d0 <??ZbZclAttrParseLength_15>
 80010ca:	f05f 0902 	movs.w	r9, #2
 80010ce:	e004      	b.n	80010da <??ZbZclAttrParseLength_16>

080010d0 <??ZbZclAttrParseLength_15>:
 80010d0:	46c1      	mov	r9, r8
 80010d2:	fa1f f989 	uxth.w	r9, r9
 80010d6:	f119 0902 	adds.w	r9, r9, #2

080010da <??ZbZclAttrParseLength_16>:
 80010da:	e052      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010dc <??ZbZclAttrParseLength_7>:
 80010dc:	2d03      	cmp	r5, #3
 80010de:	d350      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010e0 <??ZbZclAttrParseLength_17>:
 80010e0:	7820      	ldrb	r0, [r4, #0]
 80010e2:	4683      	mov	fp, r0
 80010e4:	1c60      	adds	r0, r4, #1
 80010e6:	f002 fed3 	bl	8003e90 <pletoh16>
 80010ea:	4680      	mov	r8, r0
 80010ec:	2003      	movs	r0, #3
 80010ee:	4681      	mov	r9, r0

080010f0 <??ZbZclAttrParseLength_18>:
 80010f0:	4640      	mov	r0, r8
 80010f2:	b280      	uxth	r0, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d016      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 80010f8:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80010fc:	4640      	mov	r0, r8
 80010fe:	b280      	uxth	r0, r0
 8001100:	4550      	cmp	r0, sl
 8001102:	d010      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	ebb5 0209 	subs.w	r2, r5, r9
 800110c:	eb04 0109 	add.w	r1, r4, r9
 8001110:	4658      	mov	r0, fp
 8001112:	b2c0      	uxtb	r0, r0
 8001114:	f7ff ff8f 	bl	8001036 <ZbZclAttrParseLength>
 8001118:	2800      	cmp	r0, #0
 800111a:	d43b      	bmi.n	8001194 <??ZbZclAttrParseLength_1>

0800111c <??ZbZclAttrParseLength_20>:
 800111c:	eb10 0909 	adds.w	r9, r0, r9
 8001120:	eb1a 0808 	adds.w	r8, sl, r8
 8001124:	e7e4      	b.n	80010f0 <??ZbZclAttrParseLength_18>

08001126 <??ZbZclAttrParseLength_19>:
 8001126:	e02c      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001128 <??ZbZclAttrParseLength_8>:
 8001128:	2d02      	cmp	r5, #2
 800112a:	d32a      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

0800112c <??ZbZclAttrParseLength_21>:
 800112c:	0020      	movs	r0, r4
 800112e:	f002 feaf 	bl	8003e90 <pletoh16>
 8001132:	4680      	mov	r8, r0
 8001134:	2002      	movs	r0, #2
 8001136:	4681      	mov	r9, r0

08001138 <??ZbZclAttrParseLength_22>:
 8001138:	4640      	mov	r0, r8
 800113a:	b280      	uxth	r0, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d01f      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 8001140:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8001144:	4640      	mov	r0, r8
 8001146:	b280      	uxth	r0, r0
 8001148:	4550      	cmp	r0, sl
 800114a:	d019      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 800114c:	f119 0001 	adds.w	r0, r9, #1
 8001150:	4285      	cmp	r5, r0
 8001152:	d315      	bcc.n	8001180 <??ZbZclAttrParseLength_23>

08001154 <??ZbZclAttrParseLength_24>:
 8001154:	f814 0009 	ldrb.w	r0, [r4, r9]
 8001158:	4683      	mov	fp, r0
 800115a:	f119 0901 	adds.w	r9, r9, #1
 800115e:	1c7b      	adds	r3, r7, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	ebb5 0209 	subs.w	r2, r5, r9
 8001166:	eb04 0109 	add.w	r1, r4, r9
 800116a:	4658      	mov	r0, fp
 800116c:	b2c0      	uxtb	r0, r0
 800116e:	f7ff ff62 	bl	8001036 <ZbZclAttrParseLength>
 8001172:	2800      	cmp	r0, #0
 8001174:	d404      	bmi.n	8001180 <??ZbZclAttrParseLength_23>

08001176 <??ZbZclAttrParseLength_25>:
 8001176:	eb10 0909 	adds.w	r9, r0, r9
 800117a:	eb1a 0808 	adds.w	r8, sl, r8
 800117e:	e7db      	b.n	8001138 <??ZbZclAttrParseLength_22>

08001180 <??ZbZclAttrParseLength_23>:
 8001180:	e7ff      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001182 <??ZbZclAttrParseLength_10>:
 8001182:	f1b9 0f00 	cmp.w	r9, #0
 8001186:	d401      	bmi.n	800118c <??ZbZclAttrParseLength_26>
 8001188:	454d      	cmp	r5, r9
 800118a:	d202      	bcs.n	8001192 <??ZbZclAttrParseLength_27>

0800118c <??ZbZclAttrParseLength_26>:
 800118c:	f05f 30ff 	movs.w	r0, #4294967295
 8001190:	e000      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001192 <??ZbZclAttrParseLength_27>:
 8001192:	4648      	mov	r0, r9

08001194 <??ZbZclAttrParseLength_1>:
 8001194:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001198 <ZbZclAttrIsAnalog>:
 8001198:	0001      	movs	r1, r0
 800119a:	0008      	movs	r0, r1
 800119c:	b2c0      	uxtb	r0, r0
 800119e:	2820      	cmp	r0, #32
 80011a0:	db05      	blt.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011a2:	0008      	movs	r0, r1
 80011a4:	b2c0      	uxtb	r0, r0
 80011a6:	2828      	cmp	r0, #40	@ 0x28
 80011a8:	da01      	bge.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011aa:	2001      	movs	r0, #1
 80011ac:	e026      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011ae <??ZbZclAttrIsAnalog_0>:
 80011ae:	0008      	movs	r0, r1
 80011b0:	b2c0      	uxtb	r0, r0
 80011b2:	2828      	cmp	r0, #40	@ 0x28
 80011b4:	db05      	blt.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011b6:	0008      	movs	r0, r1
 80011b8:	b2c0      	uxtb	r0, r0
 80011ba:	2830      	cmp	r0, #48	@ 0x30
 80011bc:	da01      	bge.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011be:	2001      	movs	r0, #1
 80011c0:	e01c      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011c2 <??ZbZclAttrIsAnalog_2>:
 80011c2:	0008      	movs	r0, r1
 80011c4:	b2c0      	uxtb	r0, r0
 80011c6:	2838      	cmp	r0, #56	@ 0x38
 80011c8:	d007      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011ca:	0008      	movs	r0, r1
 80011cc:	b2c0      	uxtb	r0, r0
 80011ce:	2839      	cmp	r0, #57	@ 0x39
 80011d0:	d003      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011d2:	0008      	movs	r0, r1
 80011d4:	b2c0      	uxtb	r0, r0
 80011d6:	283a      	cmp	r0, #58	@ 0x3a
 80011d8:	d101      	bne.n	80011de <??ZbZclAttrIsAnalog_4>

080011da <??ZbZclAttrIsAnalog_3>:
 80011da:	2001      	movs	r0, #1
 80011dc:	e00e      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011de <??ZbZclAttrIsAnalog_4>:
 80011de:	0008      	movs	r0, r1
 80011e0:	b2c0      	uxtb	r0, r0
 80011e2:	28e0      	cmp	r0, #224	@ 0xe0
 80011e4:	d007      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011e6:	0008      	movs	r0, r1
 80011e8:	b2c0      	uxtb	r0, r0
 80011ea:	28e1      	cmp	r0, #225	@ 0xe1
 80011ec:	d003      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011ee:	0008      	movs	r0, r1
 80011f0:	b2c0      	uxtb	r0, r0
 80011f2:	28e2      	cmp	r0, #226	@ 0xe2
 80011f4:	d101      	bne.n	80011fa <??ZbZclAttrIsAnalog_6>

080011f6 <??ZbZclAttrIsAnalog_5>:
 80011f6:	2001      	movs	r0, #1
 80011f8:	e000      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011fa <??ZbZclAttrIsAnalog_6>:
 80011fa:	2000      	movs	r0, #0

080011fc <??ZbZclAttrIsAnalog_1>:
 80011fc:	4770      	bx	lr
	...

08001200 <ZbZclAppendInteger>:
 8001200:	b4f0      	push	{r4, r5, r6, r7}
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1
 8001206:	9904      	ldr	r1, [sp, #16]
 8001208:	2700      	movs	r7, #0
 800120a:	2600      	movs	r6, #0
 800120c:	0010      	movs	r0, r2
 800120e:	b2c0      	uxtb	r0, r0
 8001210:	2808      	cmp	r0, #8
 8001212:	f000 80b2 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001216:	2809      	cmp	r0, #9
 8001218:	f000 80a4 	beq.w	8001364 <??ZbZclAppendInteger_1>
 800121c:	280a      	cmp	r0, #10
 800121e:	f000 8096 	beq.w	800134e <??ZbZclAppendInteger_2>
 8001222:	280b      	cmp	r0, #11
 8001224:	f000 8088 	beq.w	8001338 <??ZbZclAppendInteger_3>
 8001228:	280c      	cmp	r0, #12
 800122a:	d07a      	beq.n	8001322 <??ZbZclAppendInteger_4>
 800122c:	280d      	cmp	r0, #13
 800122e:	d06d      	beq.n	800130c <??ZbZclAppendInteger_5>
 8001230:	280e      	cmp	r0, #14
 8001232:	d060      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001234:	280f      	cmp	r0, #15
 8001236:	d053      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001238:	2810      	cmp	r0, #16
 800123a:	d042      	beq.n	80012c2 <??ZbZclAppendInteger_8>
 800123c:	2818      	cmp	r0, #24
 800123e:	f000 809c 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001242:	2819      	cmp	r0, #25
 8001244:	f000 808e 	beq.w	8001364 <??ZbZclAppendInteger_1>
 8001248:	281a      	cmp	r0, #26
 800124a:	f000 8080 	beq.w	800134e <??ZbZclAppendInteger_2>
 800124e:	281b      	cmp	r0, #27
 8001250:	d072      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001252:	281c      	cmp	r0, #28
 8001254:	d065      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001256:	281d      	cmp	r0, #29
 8001258:	d058      	beq.n	800130c <??ZbZclAppendInteger_5>
 800125a:	281e      	cmp	r0, #30
 800125c:	d04b      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 800125e:	281f      	cmp	r0, #31
 8001260:	d03e      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001262:	2820      	cmp	r0, #32
 8001264:	f000 8089 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001268:	2821      	cmp	r0, #33	@ 0x21
 800126a:	d07b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800126c:	2822      	cmp	r0, #34	@ 0x22
 800126e:	d06e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001270:	2823      	cmp	r0, #35	@ 0x23
 8001272:	d061      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001274:	2824      	cmp	r0, #36	@ 0x24
 8001276:	d054      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001278:	2825      	cmp	r0, #37	@ 0x25
 800127a:	d047      	beq.n	800130c <??ZbZclAppendInteger_5>
 800127c:	2826      	cmp	r0, #38	@ 0x26
 800127e:	d03a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001280:	2827      	cmp	r0, #39	@ 0x27
 8001282:	d02d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001284:	2828      	cmp	r0, #40	@ 0x28
 8001286:	d078      	beq.n	800137a <??ZbZclAppendInteger_0>
 8001288:	2829      	cmp	r0, #41	@ 0x29
 800128a:	d06b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800128c:	282a      	cmp	r0, #42	@ 0x2a
 800128e:	d05e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001290:	282b      	cmp	r0, #43	@ 0x2b
 8001292:	d051      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001294:	282c      	cmp	r0, #44	@ 0x2c
 8001296:	d044      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001298:	282d      	cmp	r0, #45	@ 0x2d
 800129a:	d037      	beq.n	800130c <??ZbZclAppendInteger_5>
 800129c:	282e      	cmp	r0, #46	@ 0x2e
 800129e:	d02a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 80012a0:	282f      	cmp	r0, #47	@ 0x2f
 80012a2:	d01d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012a4:	2830      	cmp	r0, #48	@ 0x30
 80012a6:	d068      	beq.n	800137a <??ZbZclAppendInteger_0>
 80012a8:	2831      	cmp	r0, #49	@ 0x31
 80012aa:	d05b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012ac:	28e2      	cmp	r0, #226	@ 0xe2
 80012ae:	d043      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012b0:	28e8      	cmp	r0, #232	@ 0xe8
 80012b2:	d057      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b4:	28e9      	cmp	r0, #233	@ 0xe9
 80012b6:	d055      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b8:	28ea      	cmp	r0, #234	@ 0xea
 80012ba:	d03d      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012bc:	28f0      	cmp	r0, #240	@ 0xf0
 80012be:	d00f      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012c0:	e064      	b.n	800138c <??ZbZclAppendInteger_9>

080012c2 <??ZbZclAppendInteger_8>:
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d102      	bne.n	80012cc <??ZbZclAppendInteger_10>
 80012c6:	f05f 30ff 	movs.w	r0, #4294967295
 80012ca:	e061      	b.n	8001390 <??ZbZclAppendInteger_11>

080012cc <??ZbZclAppendInteger_10>:
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d101      	bne.n	80012d4 <??ZbZclAppendInteger_12>
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d001      	beq.n	80012d8 <??ZbZclAppendInteger_13>

080012d4 <??ZbZclAppendInteger_12>:
 80012d4:	2001      	movs	r0, #1
 80012d6:	e000      	b.n	80012da <??ZbZclAppendInteger_14>

080012d8 <??ZbZclAppendInteger_13>:
 80012d8:	2000      	movs	r0, #0

080012da <??ZbZclAppendInteger_14>:
 80012da:	7018      	strb	r0, [r3, #0]
 80012dc:	2001      	movs	r0, #1
 80012de:	e057      	b.n	8001390 <??ZbZclAppendInteger_11>

080012e0 <??ZbZclAppendInteger_7>:
 80012e0:	428f      	cmp	r7, r1
 80012e2:	d302      	bcc.n	80012ea <??ZbZclAppendInteger_15>
 80012e4:	f05f 30ff 	movs.w	r0, #4294967295
 80012e8:	e052      	b.n	8001390 <??ZbZclAppendInteger_11>

080012ea <??ZbZclAppendInteger_15>:
 80012ea:	55dc      	strb	r4, [r3, r7]
 80012ec:	1c7f      	adds	r7, r7, #1
 80012ee:	0a24      	lsrs	r4, r4, #8
 80012f0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80012f4:	0a2d      	lsrs	r5, r5, #8

080012f6 <??ZbZclAppendInteger_6>:
 80012f6:	428f      	cmp	r7, r1
 80012f8:	d302      	bcc.n	8001300 <??ZbZclAppendInteger_16>
 80012fa:	f05f 30ff 	movs.w	r0, #4294967295
 80012fe:	e047      	b.n	8001390 <??ZbZclAppendInteger_11>

08001300 <??ZbZclAppendInteger_16>:
 8001300:	55dc      	strb	r4, [r3, r7]
 8001302:	1c7f      	adds	r7, r7, #1
 8001304:	0a24      	lsrs	r4, r4, #8
 8001306:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800130a:	0a2d      	lsrs	r5, r5, #8

0800130c <??ZbZclAppendInteger_5>:
 800130c:	428f      	cmp	r7, r1
 800130e:	d302      	bcc.n	8001316 <??ZbZclAppendInteger_17>
 8001310:	f05f 30ff 	movs.w	r0, #4294967295
 8001314:	e03c      	b.n	8001390 <??ZbZclAppendInteger_11>

08001316 <??ZbZclAppendInteger_17>:
 8001316:	55dc      	strb	r4, [r3, r7]
 8001318:	1c7f      	adds	r7, r7, #1
 800131a:	0a24      	lsrs	r4, r4, #8
 800131c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001320:	0a2d      	lsrs	r5, r5, #8

08001322 <??ZbZclAppendInteger_4>:
 8001322:	428f      	cmp	r7, r1
 8001324:	d302      	bcc.n	800132c <??ZbZclAppendInteger_18>
 8001326:	f05f 30ff 	movs.w	r0, #4294967295
 800132a:	e031      	b.n	8001390 <??ZbZclAppendInteger_11>

0800132c <??ZbZclAppendInteger_18>:
 800132c:	55dc      	strb	r4, [r3, r7]
 800132e:	1c7f      	adds	r7, r7, #1
 8001330:	0a24      	lsrs	r4, r4, #8
 8001332:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001336:	0a2d      	lsrs	r5, r5, #8

08001338 <??ZbZclAppendInteger_3>:
 8001338:	428f      	cmp	r7, r1
 800133a:	d302      	bcc.n	8001342 <??ZbZclAppendInteger_19>
 800133c:	f05f 30ff 	movs.w	r0, #4294967295
 8001340:	e026      	b.n	8001390 <??ZbZclAppendInteger_11>

08001342 <??ZbZclAppendInteger_19>:
 8001342:	55dc      	strb	r4, [r3, r7]
 8001344:	1c7f      	adds	r7, r7, #1
 8001346:	0a24      	lsrs	r4, r4, #8
 8001348:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800134c:	0a2d      	lsrs	r5, r5, #8

0800134e <??ZbZclAppendInteger_2>:
 800134e:	428f      	cmp	r7, r1
 8001350:	d302      	bcc.n	8001358 <??ZbZclAppendInteger_20>
 8001352:	f05f 30ff 	movs.w	r0, #4294967295
 8001356:	e01b      	b.n	8001390 <??ZbZclAppendInteger_11>

08001358 <??ZbZclAppendInteger_20>:
 8001358:	55dc      	strb	r4, [r3, r7]
 800135a:	1c7f      	adds	r7, r7, #1
 800135c:	0a24      	lsrs	r4, r4, #8
 800135e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001362:	0a2d      	lsrs	r5, r5, #8

08001364 <??ZbZclAppendInteger_1>:
 8001364:	428f      	cmp	r7, r1
 8001366:	d302      	bcc.n	800136e <??ZbZclAppendInteger_21>
 8001368:	f05f 30ff 	movs.w	r0, #4294967295
 800136c:	e010      	b.n	8001390 <??ZbZclAppendInteger_11>

0800136e <??ZbZclAppendInteger_21>:
 800136e:	55dc      	strb	r4, [r3, r7]
 8001370:	1c7f      	adds	r7, r7, #1
 8001372:	0a24      	lsrs	r4, r4, #8
 8001374:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001378:	0a2d      	lsrs	r5, r5, #8

0800137a <??ZbZclAppendInteger_0>:
 800137a:	428f      	cmp	r7, r1
 800137c:	d302      	bcc.n	8001384 <??ZbZclAppendInteger_22>
 800137e:	f05f 30ff 	movs.w	r0, #4294967295
 8001382:	e005      	b.n	8001390 <??ZbZclAppendInteger_11>

08001384 <??ZbZclAppendInteger_22>:
 8001384:	55dc      	strb	r4, [r3, r7]
 8001386:	1c7f      	adds	r7, r7, #1
 8001388:	0038      	movs	r0, r7
 800138a:	e001      	b.n	8001390 <??ZbZclAppendInteger_11>

0800138c <??ZbZclAppendInteger_9>:
 800138c:	f05f 30ff 	movs.w	r0, #4294967295

08001390 <??ZbZclAppendInteger_11>:
 8001390:	bcf0      	pop	{r4, r5, r6, r7}
 8001392:	4770      	bx	lr

08001394 <ZbZclParseInteger>:
 8001394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001398:	4683      	mov	fp, r0
 800139a:	000e      	movs	r6, r1
 800139c:	4692      	mov	sl, r2
 800139e:	2700      	movs	r7, #0
 80013a0:	2400      	movs	r4, #0
 80013a2:	2500      	movs	r5, #0
 80013a4:	f05f 0800 	movs.w	r8, #0
 80013a8:	f05f 0900 	movs.w	r9, #0
 80013ac:	4658      	mov	r0, fp
 80013ae:	b2c0      	uxtb	r0, r0
 80013b0:	f000 f91e 	bl	80015f0 <ZbZclAttrIsInteger>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d105      	bne.n	80013c4 <??ZbZclParseInteger_0>
 80013b8:	208d      	movs	r0, #141	@ 0x8d
 80013ba:	f88a 0000 	strb.w	r0, [sl]
 80013be:	2000      	movs	r0, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	e113      	b.n	80015ec <??ZbZclParseInteger_1>

080013c4 <??ZbZclParseInteger_0>:
 80013c4:	2000      	movs	r0, #0
 80013c6:	f88a 0000 	strb.w	r0, [sl]
 80013ca:	4658      	mov	r0, fp
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	2808      	cmp	r0, #8
 80013d0:	f000 8097 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013d4:	2809      	cmp	r0, #9
 80013d6:	f000 808a 	beq.w	80014ee <??ZbZclParseInteger_3>
 80013da:	280a      	cmp	r0, #10
 80013dc:	d07d      	beq.n	80014da <??ZbZclParseInteger_4>
 80013de:	280b      	cmp	r0, #11
 80013e0:	d071      	beq.n	80014c6 <??ZbZclParseInteger_5>
 80013e2:	280c      	cmp	r0, #12
 80013e4:	d065      	beq.n	80014b2 <??ZbZclParseInteger_6>
 80013e6:	280d      	cmp	r0, #13
 80013e8:	d059      	beq.n	800149e <??ZbZclParseInteger_7>
 80013ea:	280e      	cmp	r0, #14
 80013ec:	d04d      	beq.n	800148a <??ZbZclParseInteger_8>
 80013ee:	280f      	cmp	r0, #15
 80013f0:	d046      	beq.n	8001480 <??ZbZclParseInteger_9>
 80013f2:	2810      	cmp	r0, #16
 80013f4:	f000 8085 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013f8:	2818      	cmp	r0, #24
 80013fa:	f000 8082 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013fe:	2819      	cmp	r0, #25
 8001400:	d075      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001402:	281a      	cmp	r0, #26
 8001404:	d069      	beq.n	80014da <??ZbZclParseInteger_4>
 8001406:	281b      	cmp	r0, #27
 8001408:	d05d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800140a:	281c      	cmp	r0, #28
 800140c:	d051      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800140e:	281d      	cmp	r0, #29
 8001410:	d045      	beq.n	800149e <??ZbZclParseInteger_7>
 8001412:	281e      	cmp	r0, #30
 8001414:	d039      	beq.n	800148a <??ZbZclParseInteger_8>
 8001416:	281f      	cmp	r0, #31
 8001418:	d032      	beq.n	8001480 <??ZbZclParseInteger_9>
 800141a:	2820      	cmp	r0, #32
 800141c:	d071      	beq.n	8001502 <??ZbZclParseInteger_2>
 800141e:	2821      	cmp	r0, #33	@ 0x21
 8001420:	d065      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001422:	2822      	cmp	r0, #34	@ 0x22
 8001424:	d059      	beq.n	80014da <??ZbZclParseInteger_4>
 8001426:	2823      	cmp	r0, #35	@ 0x23
 8001428:	d04d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800142a:	2824      	cmp	r0, #36	@ 0x24
 800142c:	d041      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800142e:	2825      	cmp	r0, #37	@ 0x25
 8001430:	d035      	beq.n	800149e <??ZbZclParseInteger_7>
 8001432:	2826      	cmp	r0, #38	@ 0x26
 8001434:	d029      	beq.n	800148a <??ZbZclParseInteger_8>
 8001436:	2827      	cmp	r0, #39	@ 0x27
 8001438:	d022      	beq.n	8001480 <??ZbZclParseInteger_9>
 800143a:	2828      	cmp	r0, #40	@ 0x28
 800143c:	f000 80ac 	beq.w	8001598 <??ZbZclParseInteger_10>
 8001440:	2829      	cmp	r0, #41	@ 0x29
 8001442:	f000 809f 	beq.w	8001584 <??ZbZclParseInteger_11>
 8001446:	282a      	cmp	r0, #42	@ 0x2a
 8001448:	f000 8092 	beq.w	8001570 <??ZbZclParseInteger_12>
 800144c:	282b      	cmp	r0, #43	@ 0x2b
 800144e:	f000 8085 	beq.w	800155c <??ZbZclParseInteger_13>
 8001452:	282c      	cmp	r0, #44	@ 0x2c
 8001454:	d078      	beq.n	8001548 <??ZbZclParseInteger_14>
 8001456:	282d      	cmp	r0, #45	@ 0x2d
 8001458:	d06c      	beq.n	8001534 <??ZbZclParseInteger_15>
 800145a:	282e      	cmp	r0, #46	@ 0x2e
 800145c:	d060      	beq.n	8001520 <??ZbZclParseInteger_16>
 800145e:	282f      	cmp	r0, #47	@ 0x2f
 8001460:	d059      	beq.n	8001516 <??ZbZclParseInteger_17>
 8001462:	2830      	cmp	r0, #48	@ 0x30
 8001464:	d04d      	beq.n	8001502 <??ZbZclParseInteger_2>
 8001466:	2831      	cmp	r0, #49	@ 0x31
 8001468:	d041      	beq.n	80014ee <??ZbZclParseInteger_3>
 800146a:	28e2      	cmp	r0, #226	@ 0xe2
 800146c:	d02b      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800146e:	28e8      	cmp	r0, #232	@ 0xe8
 8001470:	d03d      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001472:	28e9      	cmp	r0, #233	@ 0xe9
 8001474:	d03b      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001476:	28ea      	cmp	r0, #234	@ 0xea
 8001478:	d025      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800147a:	28f0      	cmp	r0, #240	@ 0xf0
 800147c:	f040 80b1 	bne.w	80015e2 <??ZbZclParseInteger_18>

08001480 <??ZbZclParseInteger_9>:
 8001480:	5df0      	ldrb	r0, [r6, r7]
 8001482:	2100      	movs	r1, #0
 8001484:	4304      	orrs	r4, r0
 8001486:	430d      	orrs	r5, r1
 8001488:	1c7f      	adds	r7, r7, #1

0800148a <??ZbZclParseInteger_8>:
 800148a:	5df0      	ldrb	r0, [r6, r7]
 800148c:	2100      	movs	r1, #0
 800148e:	003a      	movs	r2, r7
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	f003 faac 	bl	80049f0 <__aeabi_llsl>
 8001498:	4304      	orrs	r4, r0
 800149a:	430d      	orrs	r5, r1
 800149c:	1c7f      	adds	r7, r7, #1

0800149e <??ZbZclParseInteger_7>:
 800149e:	5df0      	ldrb	r0, [r6, r7]
 80014a0:	2100      	movs	r1, #0
 80014a2:	003a      	movs	r2, r7
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	00d2      	lsls	r2, r2, #3
 80014a8:	f003 faa2 	bl	80049f0 <__aeabi_llsl>
 80014ac:	4304      	orrs	r4, r0
 80014ae:	430d      	orrs	r5, r1
 80014b0:	1c7f      	adds	r7, r7, #1

080014b2 <??ZbZclParseInteger_6>:
 80014b2:	5df0      	ldrb	r0, [r6, r7]
 80014b4:	2100      	movs	r1, #0
 80014b6:	003a      	movs	r2, r7
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	00d2      	lsls	r2, r2, #3
 80014bc:	f003 fa98 	bl	80049f0 <__aeabi_llsl>
 80014c0:	4304      	orrs	r4, r0
 80014c2:	430d      	orrs	r5, r1
 80014c4:	1c7f      	adds	r7, r7, #1

080014c6 <??ZbZclParseInteger_5>:
 80014c6:	5df0      	ldrb	r0, [r6, r7]
 80014c8:	2100      	movs	r1, #0
 80014ca:	003a      	movs	r2, r7
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	f003 fa8e 	bl	80049f0 <__aeabi_llsl>
 80014d4:	4304      	orrs	r4, r0
 80014d6:	430d      	orrs	r5, r1
 80014d8:	1c7f      	adds	r7, r7, #1

080014da <??ZbZclParseInteger_4>:
 80014da:	5df0      	ldrb	r0, [r6, r7]
 80014dc:	2100      	movs	r1, #0
 80014de:	003a      	movs	r2, r7
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	00d2      	lsls	r2, r2, #3
 80014e4:	f003 fa84 	bl	80049f0 <__aeabi_llsl>
 80014e8:	4304      	orrs	r4, r0
 80014ea:	430d      	orrs	r5, r1
 80014ec:	1c7f      	adds	r7, r7, #1

080014ee <??ZbZclParseInteger_3>:
 80014ee:	5df0      	ldrb	r0, [r6, r7]
 80014f0:	2100      	movs	r1, #0
 80014f2:	003a      	movs	r2, r7
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	f003 fa7a 	bl	80049f0 <__aeabi_llsl>
 80014fc:	4304      	orrs	r4, r0
 80014fe:	430d      	orrs	r5, r1
 8001500:	1c7f      	adds	r7, r7, #1

08001502 <??ZbZclParseInteger_2>:
 8001502:	5df0      	ldrb	r0, [r6, r7]
 8001504:	2100      	movs	r1, #0
 8001506:	003a      	movs	r2, r7
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	f003 fa70 	bl	80049f0 <__aeabi_llsl>
 8001510:	4320      	orrs	r0, r4
 8001512:	4329      	orrs	r1, r5
 8001514:	e06a      	b.n	80015ec <??ZbZclParseInteger_1>

08001516 <??ZbZclParseInteger_17>:
 8001516:	5df0      	ldrb	r0, [r6, r7]
 8001518:	2100      	movs	r1, #0
 800151a:	4304      	orrs	r4, r0
 800151c:	430d      	orrs	r5, r1
 800151e:	1c7f      	adds	r7, r7, #1

08001520 <??ZbZclParseInteger_16>:
 8001520:	5df0      	ldrb	r0, [r6, r7]
 8001522:	2100      	movs	r1, #0
 8001524:	003a      	movs	r2, r7
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	f003 fa61 	bl	80049f0 <__aeabi_llsl>
 800152e:	4304      	orrs	r4, r0
 8001530:	430d      	orrs	r5, r1
 8001532:	1c7f      	adds	r7, r7, #1

08001534 <??ZbZclParseInteger_15>:
 8001534:	5df0      	ldrb	r0, [r6, r7]
 8001536:	2100      	movs	r1, #0
 8001538:	003a      	movs	r2, r7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	f003 fa57 	bl	80049f0 <__aeabi_llsl>
 8001542:	4304      	orrs	r4, r0
 8001544:	430d      	orrs	r5, r1
 8001546:	1c7f      	adds	r7, r7, #1

08001548 <??ZbZclParseInteger_14>:
 8001548:	5df0      	ldrb	r0, [r6, r7]
 800154a:	2100      	movs	r1, #0
 800154c:	003a      	movs	r2, r7
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	f003 fa4d 	bl	80049f0 <__aeabi_llsl>
 8001556:	4304      	orrs	r4, r0
 8001558:	430d      	orrs	r5, r1
 800155a:	1c7f      	adds	r7, r7, #1

0800155c <??ZbZclParseInteger_13>:
 800155c:	5df0      	ldrb	r0, [r6, r7]
 800155e:	2100      	movs	r1, #0
 8001560:	003a      	movs	r2, r7
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	f003 fa43 	bl	80049f0 <__aeabi_llsl>
 800156a:	4304      	orrs	r4, r0
 800156c:	430d      	orrs	r5, r1
 800156e:	1c7f      	adds	r7, r7, #1

08001570 <??ZbZclParseInteger_12>:
 8001570:	5df0      	ldrb	r0, [r6, r7]
 8001572:	2100      	movs	r1, #0
 8001574:	003a      	movs	r2, r7
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	f003 fa39 	bl	80049f0 <__aeabi_llsl>
 800157e:	4304      	orrs	r4, r0
 8001580:	430d      	orrs	r5, r1
 8001582:	1c7f      	adds	r7, r7, #1

08001584 <??ZbZclParseInteger_11>:
 8001584:	5df0      	ldrb	r0, [r6, r7]
 8001586:	2100      	movs	r1, #0
 8001588:	003a      	movs	r2, r7
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	f003 fa2f 	bl	80049f0 <__aeabi_llsl>
 8001592:	4304      	orrs	r4, r0
 8001594:	430d      	orrs	r5, r1
 8001596:	1c7f      	adds	r7, r7, #1

08001598 <??ZbZclParseInteger_10>:
 8001598:	5df0      	ldrb	r0, [r6, r7]
 800159a:	2100      	movs	r1, #0
 800159c:	003a      	movs	r2, r7
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	f003 fa25 	bl	80049f0 <__aeabi_llsl>
 80015a6:	4320      	orrs	r0, r4
 80015a8:	4329      	orrs	r1, r5
 80015aa:	003a      	movs	r2, r7
 80015ac:	1c57      	adds	r7, r2, #1
 80015ae:	5cb2      	ldrb	r2, [r6, r2]
 80015b0:	0612      	lsls	r2, r2, #24
 80015b2:	d515      	bpl.n	80015e0 <??ZbZclParseInteger_19>
 80015b4:	2f08      	cmp	r7, #8
 80015b6:	d213      	bcs.n	80015e0 <??ZbZclParseInteger_19>
 80015b8:	0004      	movs	r4, r0
 80015ba:	000d      	movs	r5, r1
 80015bc:	2001      	movs	r0, #1
 80015be:	2100      	movs	r1, #0
 80015c0:	f1d7 0208 	rsbs	r2, r7, #8
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	f003 fa12 	bl	80049f0 <__aeabi_llsl>
 80015cc:	1e40      	subs	r0, r0, #1
 80015ce:	f171 0100 	sbcs.w	r1, r1, #0
 80015d2:	003a      	movs	r2, r7
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	00d2      	lsls	r2, r2, #3
 80015d8:	f003 fa0a 	bl	80049f0 <__aeabi_llsl>
 80015dc:	4320      	orrs	r0, r4
 80015de:	4329      	orrs	r1, r5

080015e0 <??ZbZclParseInteger_19>:
 80015e0:	e004      	b.n	80015ec <??ZbZclParseInteger_1>

080015e2 <??ZbZclParseInteger_18>:
 80015e2:	208d      	movs	r0, #141	@ 0x8d
 80015e4:	f88a 0000 	strb.w	r0, [sl]
 80015e8:	2000      	movs	r0, #0
 80015ea:	2100      	movs	r1, #0

080015ec <??ZbZclParseInteger_1>:
 80015ec:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015f0 <ZbZclAttrIsInteger>:
 80015f0:	0001      	movs	r1, r0
 80015f2:	2200      	movs	r2, #0
 80015f4:	0008      	movs	r0, r1
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	3808      	subs	r0, #8
 80015fa:	2808      	cmp	r0, #8
 80015fc:	d909      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 80015fe:	3810      	subs	r0, #16
 8001600:	2819      	cmp	r0, #25
 8001602:	d906      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 8001604:	38ca      	subs	r0, #202	@ 0xca
 8001606:	d004      	beq.n	8001612 <??ZbZclAttrIsInteger_0>
 8001608:	1f80      	subs	r0, r0, #6
 800160a:	2802      	cmp	r0, #2
 800160c:	d901      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 800160e:	3808      	subs	r0, #8
 8001610:	d101      	bne.n	8001616 <??ZbZclAttrIsInteger_1>

08001612 <??ZbZclAttrIsInteger_0>:
 8001612:	2001      	movs	r0, #1
 8001614:	e000      	b.n	8001618 <??ZbZclAttrIsInteger_2>

08001616 <??ZbZclAttrIsInteger_1>:
 8001616:	2000      	movs	r0, #0

08001618 <??ZbZclAttrIsInteger_2>:
 8001618:	b2c0      	uxtb	r0, r0
 800161a:	4770      	bx	lr

0800161c <ZbZclAttrIntegerRangeCheck>:
 800161c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001620:	0004      	movs	r4, r0
 8001622:	000d      	movs	r5, r1
 8001624:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001628:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800162c:	0010      	movs	r0, r2
 800162e:	b2c0      	uxtb	r0, r0
 8001630:	2810      	cmp	r0, #16
 8001632:	d045      	beq.n	80016c0 <??ZbZclAttrIntegerRangeCheck_0>
 8001634:	2818      	cmp	r0, #24
 8001636:	d051      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001638:	2819      	cmp	r0, #25
 800163a:	d060      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 800163c:	281a      	cmp	r0, #26
 800163e:	d072      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 8001640:	281b      	cmp	r0, #27
 8001642:	f000 8086 	beq.w	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 8001646:	281c      	cmp	r0, #28
 8001648:	f000 8098 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 800164c:	281d      	cmp	r0, #29
 800164e:	f000 80a7 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 8001652:	281e      	cmp	r0, #30
 8001654:	f000 80b9 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001658:	281f      	cmp	r0, #31
 800165a:	f000 80cd 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 800165e:	2820      	cmp	r0, #32
 8001660:	d03c      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001662:	2821      	cmp	r0, #33	@ 0x21
 8001664:	d04b      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 8001666:	2822      	cmp	r0, #34	@ 0x22
 8001668:	d05d      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 800166a:	2823      	cmp	r0, #35	@ 0x23
 800166c:	d071      	beq.n	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 800166e:	2824      	cmp	r0, #36	@ 0x24
 8001670:	f000 8084 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 8001674:	2825      	cmp	r0, #37	@ 0x25
 8001676:	f000 8093 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 800167a:	2826      	cmp	r0, #38	@ 0x26
 800167c:	f000 80a5 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001680:	2827      	cmp	r0, #39	@ 0x27
 8001682:	f000 80b9 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 8001686:	2828      	cmp	r0, #40	@ 0x28
 8001688:	f000 80c1 	beq.w	800180e <??ZbZclAttrIntegerRangeCheck_9>
 800168c:	2829      	cmp	r0, #41	@ 0x29
 800168e:	f000 80d9 	beq.w	8001844 <??ZbZclAttrIntegerRangeCheck_10>
 8001692:	282a      	cmp	r0, #42	@ 0x2a
 8001694:	f000 80f0 	beq.w	8001878 <??ZbZclAttrIntegerRangeCheck_11>
 8001698:	282b      	cmp	r0, #43	@ 0x2b
 800169a:	f000 8107 	beq.w	80018ac <??ZbZclAttrIntegerRangeCheck_12>
 800169e:	282c      	cmp	r0, #44	@ 0x2c
 80016a0:	f000 8120 	beq.w	80018e4 <??ZbZclAttrIntegerRangeCheck_13>
 80016a4:	282d      	cmp	r0, #45	@ 0x2d
 80016a6:	f000 8136 	beq.w	8001916 <??ZbZclAttrIntegerRangeCheck_14>
 80016aa:	282e      	cmp	r0, #46	@ 0x2e
 80016ac:	f000 814b 	beq.w	8001946 <??ZbZclAttrIntegerRangeCheck_15>
 80016b0:	282f      	cmp	r0, #47	@ 0x2f
 80016b2:	f000 8160 	beq.w	8001976 <??ZbZclAttrIntegerRangeCheck_16>
 80016b6:	2830      	cmp	r0, #48	@ 0x30
 80016b8:	d010      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 80016ba:	2831      	cmp	r0, #49	@ 0x31
 80016bc:	d01f      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 80016be:	e164      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016c0 <??ZbZclAttrIntegerRangeCheck_0>:
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d103      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c4:	2cff      	cmp	r4, #255	@ 0xff
 80016c6:	d101      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c8:	2001      	movs	r0, #1
 80016ca:	e176      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016cc <??ZbZclAttrIntegerRangeCheck_18>:
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	db04      	blt.n	80016da <??ZbZclAttrIntegerRangeCheck_20>
 80016d0:	dc01      	bgt.n	80016d6 <??ZbZclAttrIntegerRangeCheck_21>
 80016d2:	2c02      	cmp	r4, #2
 80016d4:	d301      	bcc.n	80016da <??ZbZclAttrIntegerRangeCheck_20>

080016d6 <??ZbZclAttrIntegerRangeCheck_21>:
 80016d6:	2000      	movs	r0, #0
 80016d8:	e16f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016da <??ZbZclAttrIntegerRangeCheck_20>:
 80016da:	e156      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016dc <??ZbZclAttrIntegerRangeCheck_1>:
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d103      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e0:	2cff      	cmp	r4, #255	@ 0xff
 80016e2:	d101      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e4:	2001      	movs	r0, #1
 80016e6:	e168      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016e8 <??ZbZclAttrIntegerRangeCheck_23>:
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	d405      	bmi.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	db05      	blt.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>
 80016f0:	dc02      	bgt.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016f2:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80016f6:	d301      	bcc.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>

080016f8 <??ZbZclAttrIntegerRangeCheck_24>:
 80016f8:	2000      	movs	r0, #0
 80016fa:	e15e      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016fc <??ZbZclAttrIntegerRangeCheck_25>:
 80016fc:	e145      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016fe <??ZbZclAttrIntegerRangeCheck_2>:
 80016fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001702:	2100      	movs	r1, #0
 8001704:	428d      	cmp	r5, r1
 8001706:	d103      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 8001708:	4284      	cmp	r4, r0
 800170a:	d101      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 800170c:	2001      	movs	r0, #1
 800170e:	e154      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001710 <??ZbZclAttrIntegerRangeCheck_27>:
 8001710:	2d00      	cmp	r5, #0
 8001712:	d405      	bmi.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 8001714:	2d00      	cmp	r5, #0
 8001716:	db05      	blt.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>
 8001718:	dc02      	bgt.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 800171a:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800171e:	d301      	bcc.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>

08001720 <??ZbZclAttrIntegerRangeCheck_28>:
 8001720:	2000      	movs	r0, #0
 8001722:	e14a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001724 <??ZbZclAttrIntegerRangeCheck_29>:
 8001724:	e131      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001726 <??ZbZclAttrIntegerRangeCheck_3>:
 8001726:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 800172a:	2100      	movs	r1, #0
 800172c:	428d      	cmp	r5, r1
 800172e:	d103      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001730:	4284      	cmp	r4, r0
 8001732:	d101      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001734:	2001      	movs	r0, #1
 8001736:	e140      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001738 <??ZbZclAttrIntegerRangeCheck_31>:
 8001738:	2d00      	cmp	r5, #0
 800173a:	d407      	bmi.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 800173c:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8001740:	2100      	movs	r1, #0
 8001742:	428d      	cmp	r5, r1
 8001744:	db04      	blt.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>
 8001746:	dc01      	bgt.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 8001748:	4284      	cmp	r4, r0
 800174a:	d301      	bcc.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>

0800174c <??ZbZclAttrIntegerRangeCheck_32>:
 800174c:	2000      	movs	r0, #0
 800174e:	e134      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001750 <??ZbZclAttrIntegerRangeCheck_33>:
 8001750:	e11b      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001752 <??ZbZclAttrIntegerRangeCheck_4>:
 8001752:	f05f 30ff 	movs.w	r0, #4294967295
 8001756:	2100      	movs	r1, #0
 8001758:	428d      	cmp	r5, r1
 800175a:	d103      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 800175c:	4284      	cmp	r4, r0
 800175e:	d101      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 8001760:	2001      	movs	r0, #1
 8001762:	e12a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001764 <??ZbZclAttrIntegerRangeCheck_35>:
 8001764:	2d00      	cmp	r5, #0
 8001766:	d406      	bmi.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001768:	2000      	movs	r0, #0
 800176a:	2101      	movs	r1, #1
 800176c:	428d      	cmp	r5, r1
 800176e:	db04      	blt.n	800177a <??ZbZclAttrIntegerRangeCheck_37>
 8001770:	dc01      	bgt.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001772:	4284      	cmp	r4, r0
 8001774:	d301      	bcc.n	800177a <??ZbZclAttrIntegerRangeCheck_37>

08001776 <??ZbZclAttrIntegerRangeCheck_36>:
 8001776:	2000      	movs	r0, #0
 8001778:	e11f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800177a <??ZbZclAttrIntegerRangeCheck_37>:
 800177a:	e106      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800177c <??ZbZclAttrIntegerRangeCheck_5>:
 800177c:	2dff      	cmp	r5, #255	@ 0xff
 800177e:	d104      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001780:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001784:	d101      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001786:	2001      	movs	r0, #1
 8001788:	e117      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800178a <??ZbZclAttrIntegerRangeCheck_39>:
 800178a:	2d00      	cmp	r5, #0
 800178c:	d405      	bmi.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 800178e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001792:	db04      	blt.n	800179e <??ZbZclAttrIntegerRangeCheck_41>
 8001794:	dc01      	bgt.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 8001796:	2c00      	cmp	r4, #0
 8001798:	d301      	bcc.n	800179e <??ZbZclAttrIntegerRangeCheck_41>

0800179a <??ZbZclAttrIntegerRangeCheck_40>:
 800179a:	2000      	movs	r0, #0
 800179c:	e10d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800179e <??ZbZclAttrIntegerRangeCheck_41>:
 800179e:	e0f4      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017a0 <??ZbZclAttrIntegerRangeCheck_6>:
 80017a0:	f05f 30ff 	movs.w	r0, #4294967295
 80017a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017a8:	428d      	cmp	r5, r1
 80017aa:	d103      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017ac:	4284      	cmp	r4, r0
 80017ae:	d101      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017b0:	2001      	movs	r0, #1
 80017b2:	e102      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017b4 <??ZbZclAttrIntegerRangeCheck_43>:
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d405      	bmi.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017b8:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80017bc:	db04      	blt.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>
 80017be:	dc01      	bgt.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d301      	bcc.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>

080017c4 <??ZbZclAttrIntegerRangeCheck_44>:
 80017c4:	2000      	movs	r0, #0
 80017c6:	e0f8      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017c8 <??ZbZclAttrIntegerRangeCheck_45>:
 80017c8:	e0df      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017ca <??ZbZclAttrIntegerRangeCheck_7>:
 80017ca:	f05f 30ff 	movs.w	r0, #4294967295
 80017ce:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 80017d2:	428d      	cmp	r5, r1
 80017d4:	d103      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017d6:	4284      	cmp	r4, r0
 80017d8:	d101      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017da:	2001      	movs	r0, #1
 80017dc:	e0ed      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017de <??ZbZclAttrIntegerRangeCheck_47>:
 80017de:	2d00      	cmp	r5, #0
 80017e0:	d407      	bmi.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017e2:	2000      	movs	r0, #0
 80017e4:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 80017e8:	428d      	cmp	r5, r1
 80017ea:	db04      	blt.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>
 80017ec:	dc01      	bgt.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017ee:	4284      	cmp	r4, r0
 80017f0:	d301      	bcc.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>

080017f2 <??ZbZclAttrIntegerRangeCheck_48>:
 80017f2:	2000      	movs	r0, #0
 80017f4:	e0e1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017f6 <??ZbZclAttrIntegerRangeCheck_49>:
 80017f6:	e0c8      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017f8 <??ZbZclAttrIntegerRangeCheck_8>:
 80017f8:	f05f 30ff 	movs.w	r0, #4294967295
 80017fc:	f05f 31ff 	movs.w	r1, #4294967295
 8001800:	428d      	cmp	r5, r1
 8001802:	d103      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001804:	4284      	cmp	r4, r0
 8001806:	d101      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001808:	2001      	movs	r0, #1
 800180a:	e0d6      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800180c <??ZbZclAttrIntegerRangeCheck_51>:
 800180c:	e0bd      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800180e <??ZbZclAttrIntegerRangeCheck_9>:
 800180e:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001812:	f05f 31ff 	movs.w	r1, #4294967295
 8001816:	428d      	cmp	r5, r1
 8001818:	d103      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181a:	4284      	cmp	r4, r0
 800181c:	d101      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181e:	2001      	movs	r0, #1
 8001820:	e0cb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001822 <??ZbZclAttrIntegerRangeCheck_52>:
 8001822:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001826:	f05f 31ff 	movs.w	r1, #4294967295
 800182a:	428d      	cmp	r5, r1
 800182c:	db07      	blt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800182e:	dc01      	bgt.n	8001834 <??ZbZclAttrIntegerRangeCheck_54>
 8001830:	4284      	cmp	r4, r0
 8001832:	d304      	bcc.n	800183e <??ZbZclAttrIntegerRangeCheck_53>

08001834 <??ZbZclAttrIntegerRangeCheck_54>:
 8001834:	2d00      	cmp	r5, #0
 8001836:	db04      	blt.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>
 8001838:	dc01      	bgt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800183a:	2c80      	cmp	r4, #128	@ 0x80
 800183c:	d301      	bcc.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>

0800183e <??ZbZclAttrIntegerRangeCheck_53>:
 800183e:	2000      	movs	r0, #0
 8001840:	e0bb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001842 <??ZbZclAttrIntegerRangeCheck_55>:
 8001842:	e0a2      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001844 <??ZbZclAttrIntegerRangeCheck_10>:
 8001844:	485e      	ldr	r0, [pc, #376]	@ (80019c0 <??DataTable1>)
 8001846:	f05f 31ff 	movs.w	r1, #4294967295
 800184a:	428d      	cmp	r5, r1
 800184c:	d103      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 800184e:	4284      	cmp	r4, r0
 8001850:	d101      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 8001852:	2001      	movs	r0, #1
 8001854:	e0b1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001856 <??ZbZclAttrIntegerRangeCheck_57>:
 8001856:	485a      	ldr	r0, [pc, #360]	@ (80019c0 <??DataTable1>)
 8001858:	f05f 31ff 	movs.w	r1, #4294967295
 800185c:	428d      	cmp	r5, r1
 800185e:	db08      	blt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 8001860:	dc01      	bgt.n	8001866 <??ZbZclAttrIntegerRangeCheck_59>
 8001862:	4284      	cmp	r4, r0
 8001864:	d305      	bcc.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>

08001866 <??ZbZclAttrIntegerRangeCheck_59>:
 8001866:	2d00      	cmp	r5, #0
 8001868:	db05      	blt.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>
 800186a:	dc02      	bgt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 800186c:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8001870:	d301      	bcc.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>

08001872 <??ZbZclAttrIntegerRangeCheck_58>:
 8001872:	2000      	movs	r0, #0
 8001874:	e0a1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001876 <??ZbZclAttrIntegerRangeCheck_60>:
 8001876:	e088      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001878 <??ZbZclAttrIntegerRangeCheck_11>:
 8001878:	4852      	ldr	r0, [pc, #328]	@ (80019c4 <??DataTable1_1>)
 800187a:	f05f 31ff 	movs.w	r1, #4294967295
 800187e:	428d      	cmp	r5, r1
 8001880:	d103      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001882:	4284      	cmp	r4, r0
 8001884:	d101      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001886:	2001      	movs	r0, #1
 8001888:	e097      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800188a <??ZbZclAttrIntegerRangeCheck_62>:
 800188a:	484e      	ldr	r0, [pc, #312]	@ (80019c4 <??DataTable1_1>)
 800188c:	f05f 31ff 	movs.w	r1, #4294967295
 8001890:	428d      	cmp	r5, r1
 8001892:	db08      	blt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 8001894:	dc01      	bgt.n	800189a <??ZbZclAttrIntegerRangeCheck_64>
 8001896:	4284      	cmp	r4, r0
 8001898:	d305      	bcc.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>

0800189a <??ZbZclAttrIntegerRangeCheck_64>:
 800189a:	2d00      	cmp	r5, #0
 800189c:	db05      	blt.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>
 800189e:	dc02      	bgt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 80018a0:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80018a4:	d301      	bcc.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>

080018a6 <??ZbZclAttrIntegerRangeCheck_63>:
 80018a6:	2000      	movs	r0, #0
 80018a8:	e087      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018aa <??ZbZclAttrIntegerRangeCheck_65>:
 80018aa:	e06e      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018ac <??ZbZclAttrIntegerRangeCheck_12>:
 80018ac:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018b0:	f05f 31ff 	movs.w	r1, #4294967295
 80018b4:	428d      	cmp	r5, r1
 80018b6:	d103      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018b8:	4284      	cmp	r4, r0
 80018ba:	d101      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018bc:	2001      	movs	r0, #1
 80018be:	e07c      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018c0 <??ZbZclAttrIntegerRangeCheck_67>:
 80018c0:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018c4:	f05f 31ff 	movs.w	r1, #4294967295
 80018c8:	428d      	cmp	r5, r1
 80018ca:	db08      	blt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018cc:	dc01      	bgt.n	80018d2 <??ZbZclAttrIntegerRangeCheck_69>
 80018ce:	4284      	cmp	r4, r0
 80018d0:	d305      	bcc.n	80018de <??ZbZclAttrIntegerRangeCheck_68>

080018d2 <??ZbZclAttrIntegerRangeCheck_69>:
 80018d2:	2d00      	cmp	r5, #0
 80018d4:	db05      	blt.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>
 80018d6:	dc02      	bgt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018d8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 80018dc:	d301      	bcc.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>

080018de <??ZbZclAttrIntegerRangeCheck_68>:
 80018de:	2000      	movs	r0, #0
 80018e0:	e06b      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018e2 <??ZbZclAttrIntegerRangeCheck_70>:
 80018e2:	e052      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018e4 <??ZbZclAttrIntegerRangeCheck_13>:
 80018e4:	2000      	movs	r0, #0
 80018e6:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018ea:	428d      	cmp	r5, r1
 80018ec:	d103      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d101      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018f2:	2001      	movs	r0, #1
 80018f4:	e061      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018f6 <??ZbZclAttrIntegerRangeCheck_72>:
 80018f6:	2000      	movs	r0, #0
 80018f8:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018fc:	428d      	cmp	r5, r1
 80018fe:	db07      	blt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 8001900:	dc01      	bgt.n	8001906 <??ZbZclAttrIntegerRangeCheck_74>
 8001902:	4284      	cmp	r4, r0
 8001904:	d304      	bcc.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>

08001906 <??ZbZclAttrIntegerRangeCheck_74>:
 8001906:	2d80      	cmp	r5, #128	@ 0x80
 8001908:	db04      	blt.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>
 800190a:	dc01      	bgt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d301      	bcc.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>

08001910 <??ZbZclAttrIntegerRangeCheck_73>:
 8001910:	2000      	movs	r0, #0
 8001912:	e052      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001914 <??ZbZclAttrIntegerRangeCheck_75>:
 8001914:	e039      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001916 <??ZbZclAttrIntegerRangeCheck_14>:
 8001916:	2000      	movs	r0, #0
 8001918:	4929      	ldr	r1, [pc, #164]	@ (80019c0 <??DataTable1>)
 800191a:	428d      	cmp	r5, r1
 800191c:	d103      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 800191e:	4284      	cmp	r4, r0
 8001920:	d101      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 8001922:	2001      	movs	r0, #1
 8001924:	e049      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001926 <??ZbZclAttrIntegerRangeCheck_77>:
 8001926:	2000      	movs	r0, #0
 8001928:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <??DataTable1>)
 800192a:	428d      	cmp	r5, r1
 800192c:	db08      	blt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800192e:	dc01      	bgt.n	8001934 <??ZbZclAttrIntegerRangeCheck_79>
 8001930:	4284      	cmp	r4, r0
 8001932:	d305      	bcc.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>

08001934 <??ZbZclAttrIntegerRangeCheck_79>:
 8001934:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8001938:	db04      	blt.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>
 800193a:	dc01      	bgt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d301      	bcc.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>

08001940 <??ZbZclAttrIntegerRangeCheck_78>:
 8001940:	2000      	movs	r0, #0
 8001942:	e03a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001944 <??ZbZclAttrIntegerRangeCheck_80>:
 8001944:	e021      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001946 <??ZbZclAttrIntegerRangeCheck_15>:
 8001946:	2000      	movs	r0, #0
 8001948:	491e      	ldr	r1, [pc, #120]	@ (80019c4 <??DataTable1_1>)
 800194a:	428d      	cmp	r5, r1
 800194c:	d103      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 800194e:	4284      	cmp	r4, r0
 8001950:	d101      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 8001952:	2001      	movs	r0, #1
 8001954:	e031      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001956 <??ZbZclAttrIntegerRangeCheck_82>:
 8001956:	2000      	movs	r0, #0
 8001958:	491a      	ldr	r1, [pc, #104]	@ (80019c4 <??DataTable1_1>)
 800195a:	428d      	cmp	r5, r1
 800195c:	db08      	blt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800195e:	dc01      	bgt.n	8001964 <??ZbZclAttrIntegerRangeCheck_84>
 8001960:	4284      	cmp	r4, r0
 8001962:	d305      	bcc.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>

08001964 <??ZbZclAttrIntegerRangeCheck_84>:
 8001964:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8001968:	db04      	blt.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>
 800196a:	dc01      	bgt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800196c:	2c00      	cmp	r4, #0
 800196e:	d301      	bcc.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>

08001970 <??ZbZclAttrIntegerRangeCheck_83>:
 8001970:	2000      	movs	r0, #0
 8001972:	e022      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001974 <??ZbZclAttrIntegerRangeCheck_85>:
 8001974:	e009      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001976 <??ZbZclAttrIntegerRangeCheck_16>:
 8001976:	2000      	movs	r0, #0
 8001978:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 800197c:	428d      	cmp	r5, r1
 800197e:	d103      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001980:	4284      	cmp	r4, r0
 8001982:	d101      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001984:	2001      	movs	r0, #1
 8001986:	e018      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001988 <??ZbZclAttrIntegerRangeCheck_87>:
 8001988:	e7ff      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800198a <??ZbZclAttrIntegerRangeCheck_17>:
 800198a:	ea56 0008 	orrs.w	r0, r6, r8
 800198e:	ea57 0109 	orrs.w	r1, r7, r9
 8001992:	2900      	cmp	r1, #0
 8001994:	d103      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 8001996:	2800      	cmp	r0, #0
 8001998:	d101      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 800199a:	2001      	movs	r0, #1
 800199c:	e00d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800199e <??ZbZclAttrIntegerRangeCheck_88>:
 800199e:	42bd      	cmp	r5, r7
 80019a0:	db09      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019a2:	dc01      	bgt.n	80019a8 <??ZbZclAttrIntegerRangeCheck_90>
 80019a4:	42b4      	cmp	r4, r6
 80019a6:	d306      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019a8 <??ZbZclAttrIntegerRangeCheck_90>:
 80019a8:	45a9      	cmp	r9, r5
 80019aa:	db04      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019ac:	dc01      	bgt.n	80019b2 <??ZbZclAttrIntegerRangeCheck_91>
 80019ae:	45a0      	cmp	r8, r4
 80019b0:	d301      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019b2 <??ZbZclAttrIntegerRangeCheck_91>:
 80019b2:	2001      	movs	r0, #1
 80019b4:	e000      	b.n	80019b8 <??ZbZclAttrIntegerRangeCheck_92>

080019b6 <??ZbZclAttrIntegerRangeCheck_89>:
 80019b6:	2000      	movs	r0, #0

080019b8 <??ZbZclAttrIntegerRangeCheck_92>:
 80019b8:	b2c0      	uxtb	r0, r0

080019ba <??ZbZclAttrIntegerRangeCheck_19>:
 80019ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80019be:	4770      	bx	lr

080019c0 <??DataTable1>:
 80019c0:	8000 ffff                                   ....

080019c4 <??DataTable1_1>:
 80019c4:	0000 ff80                                   ....

080019c8 <ZbZclAttrIntegerRead>:
 80019c8:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019cc:	b085      	sub	sp, #20
 80019ce:	0006      	movs	r6, r0
 80019d0:	000f      	movs	r7, r1
 80019d2:	0015      	movs	r5, r2
 80019d4:	001c      	movs	r4, r3
 80019d6:	2000      	movs	r0, #0
 80019d8:	f88d 0009 	strb.w	r0, [sp, #9]
 80019dc:	f05f 0808 	movs.w	r8, #8
 80019e0:	f05f 0900 	movs.w	r9, #0
 80019e4:	f10d 0a0c 	add.w	sl, sp, #12
 80019e8:	464a      	mov	r2, r9
 80019ea:	4641      	mov	r1, r8
 80019ec:	4650      	mov	r0, sl
 80019ee:	f002 ff60 	bl	80048b2 <__aeabi_memset>
 80019f2:	2000      	movs	r0, #0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	2008      	movs	r0, #8
 80019f8:	9000      	str	r0, [sp, #0]
 80019fa:	ab03      	add	r3, sp, #12
 80019fc:	f10d 0209 	add.w	r2, sp, #9
 8001a00:	0039      	movs	r1, r7
 8001a02:	b289      	uxth	r1, r1
 8001a04:	0030      	movs	r0, r6
 8001a06:	f7fe fcee 	bl	80003e6 <ZbZclAttrRead>
 8001a0a:	f88d 0008 	strb.w	r0, [sp, #8]
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	d002      	beq.n	8001a18 <??ZbZclAttrIntegerRead_0>
 8001a12:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a16:	7020      	strb	r0, [r4, #0]

08001a18 <??ZbZclAttrIntegerRead_0>:
 8001a18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d002      	beq.n	8001a26 <??ZbZclAttrIntegerRead_1>
 8001a20:	2000      	movs	r0, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	e01a      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a26 <??ZbZclAttrIntegerRead_1>:
 8001a26:	aa02      	add	r2, sp, #8
 8001a28:	a903      	add	r1, sp, #12
 8001a2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a2e:	f7ff fcb1 	bl	8001394 <ZbZclParseInteger>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d002      	beq.n	8001a40 <??ZbZclAttrIntegerRead_3>
 8001a3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a3e:	7020      	strb	r0, [r4, #0]

08001a40 <??ZbZclAttrIntegerRead_3>:
 8001a40:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d002      	beq.n	8001a4e <??ZbZclAttrIntegerRead_4>
 8001a48:	2000      	movs	r0, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	e006      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a4e <??ZbZclAttrIntegerRead_4>:
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	d002      	beq.n	8001a58 <??ZbZclAttrIntegerRead_5>
 8001a52:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a56:	7028      	strb	r0, [r5, #0]

08001a58 <??ZbZclAttrIntegerRead_5>:
 8001a58:	0010      	movs	r0, r2
 8001a5a:	0019      	movs	r1, r3

08001a5c <??ZbZclAttrIntegerRead_2>:
 8001a5c:	b006      	add	sp, #24
 8001a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a62 <ZbZclAttrIntegerWrite>:
 8001a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	4680      	mov	r8, r0
 8001a6a:	4689      	mov	r9, r1
 8001a6c:	0014      	movs	r4, r2
 8001a6e:	001d      	movs	r5, r3
 8001a70:	f1b8 0f00 	cmp.w	r8, #0
 8001a74:	d101      	bne.n	8001a7a <??ZbZclAttrIntegerWrite_0>
 8001a76:	2087      	movs	r0, #135	@ 0x87
 8001a78:	e042      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a7a <??ZbZclAttrIntegerWrite_0>:
 8001a7a:	ab04      	add	r3, sp, #16
 8001a7c:	f10d 0211 	add.w	r2, sp, #17
 8001a80:	4649      	mov	r1, r9
 8001a82:	b289      	uxth	r1, r1
 8001a84:	4640      	mov	r0, r8
 8001a86:	f7ff ff9f 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001a8a:	0006      	movs	r6, r0
 8001a8c:	000f      	movs	r7, r1
 8001a8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d002      	beq.n	8001a9c <??ZbZclAttrIntegerWrite_2>
 8001a96:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a9a:	e031      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a9c <??ZbZclAttrIntegerWrite_2>:
 8001a9c:	42af      	cmp	r7, r5
 8001a9e:	d103      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa0:	42a6      	cmp	r6, r4
 8001aa2:	d101      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e02b      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001aa8 <??ZbZclAttrIntegerWrite_3>:
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8001ab8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001abc:	0020      	movs	r0, r4
 8001abe:	0029      	movs	r1, r5
 8001ac0:	f7ff fdac 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d101      	bne.n	8001acc <??ZbZclAttrIntegerWrite_4>
 8001ac8:	2087      	movs	r0, #135	@ 0x87
 8001aca:	e019      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001acc <??ZbZclAttrIntegerWrite_4>:
 8001acc:	0022      	movs	r2, r4
 8001ace:	002b      	movs	r3, r5
 8001ad0:	a805      	add	r0, sp, #20
 8001ad2:	f002 fa6e 	bl	8003fb2 <putle64>
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	9001      	str	r0, [sp, #4]
 8001ada:	2008      	movs	r0, #8
 8001adc:	9000      	str	r0, [sp, #0]
 8001ade:	ab05      	add	r3, sp, #20
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	f7fe fdcf 	bl	800068a <ZbZclAttrWrite>
 8001aec:	f88d 0010 	strb.w	r0, [sp, #16]
 8001af0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d002      	beq.n	8001afe <??ZbZclAttrIntegerWrite_5>
 8001af8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001afc:	e000      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001afe <??ZbZclAttrIntegerWrite_5>:
 8001afe:	2000      	movs	r0, #0

08001b00 <??ZbZclAttrIntegerWrite_1>:
 8001b00:	b007      	add	sp, #28
 8001b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001b06 <ZbZclAttrIntegerIncrement>:
 8001b06:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	468b      	mov	fp, r1
 8001b0e:	0016      	movs	r6, r2
 8001b10:	001f      	movs	r7, r3
 8001b12:	f05f 0a00 	movs.w	sl, #0
 8001b16:	466b      	mov	r3, sp
 8001b18:	f10d 0201 	add.w	r2, sp, #1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	b289      	uxth	r1, r1
 8001b20:	9804      	ldr	r0, [sp, #16]
 8001b22:	f7ff ff51 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001b26:	0002      	movs	r2, r0
 8001b28:	000b      	movs	r3, r1
 8001b2a:	f89d 0000 	ldrb.w	r0, [sp]
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d002      	beq.n	8001b38 <??ZbZclAttrIntegerIncrement_0>
 8001b32:	f89d 0000 	ldrb.w	r0, [sp]
 8001b36:	e03e      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001b38 <??ZbZclAttrIntegerIncrement_0>:
 8001b38:	eb12 0806 	adds.w	r8, r2, r6
 8001b3c:	eb53 0907 	adcs.w	r9, r3, r7
 8001b40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b44:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001b48:	f7ff f9ea 	bl	8000f20 <ZbZclAttrTypeLength>
 8001b4c:	9001      	str	r0, [sp, #4]
 8001b4e:	9801      	ldr	r0, [sp, #4]
 8001b50:	2801      	cmp	r0, #1
 8001b52:	d017      	beq.n	8001b84 <??ZbZclAttrIntegerIncrement_2>
 8001b54:	2802      	cmp	r0, #2
 8001b56:	d00b      	beq.n	8001b70 <??ZbZclAttrIntegerIncrement_3>
 8001b58:	2804      	cmp	r0, #4
 8001b5a:	d002      	beq.n	8001b62 <??ZbZclAttrIntegerIncrement_4>
 8001b5c:	2808      	cmp	r0, #8
 8001b5e:	d118      	bne.n	8001b92 <??ZbZclAttrIntegerIncrement_5>

08001b60 <??ZbZclAttrIntegerIncrement_6>:
 8001b60:	e019      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b62 <??ZbZclAttrIntegerIncrement_4>:
 8001b62:	f038 0000 	bics.w	r0, r8, #0
 8001b66:	f039 31ff 	bics.w	r1, r9, #4294967295
 8001b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b6e:	e012      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b70 <??ZbZclAttrIntegerIncrement_3>:
 8001b70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b74:	2100      	movs	r1, #0
 8001b76:	ea18 0000 	ands.w	r0, r8, r0
 8001b7a:	ea19 0101 	ands.w	r1, r9, r1
 8001b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b82:	e008      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b84 <??ZbZclAttrIntegerIncrement_2>:
 8001b84:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8001b88:	f019 0100 	ands.w	r1, r9, #0
 8001b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b90:	e001      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b92 <??ZbZclAttrIntegerIncrement_5>:
 8001b92:	2001      	movs	r0, #1
 8001b94:	4682      	mov	sl, r0

08001b96 <??ZbZclAttrIntegerIncrement_7>:
 8001b96:	4650      	mov	r0, sl
 8001b98:	b2c0      	uxtb	r0, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <??ZbZclAttrIntegerIncrement_8>
 8001b9e:	2086      	movs	r0, #134	@ 0x86
 8001ba0:	e009      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001ba2 <??ZbZclAttrIntegerIncrement_8>:
 8001ba2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8001ba6:	0022      	movs	r2, r4
 8001ba8:	002b      	movs	r3, r5
 8001baa:	4659      	mov	r1, fp
 8001bac:	b289      	uxth	r1, r1
 8001bae:	9804      	ldr	r0, [sp, #16]
 8001bb0:	f7ff ff57 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8001bb4:	2000      	movs	r0, #0

08001bb6 <??ZbZclAttrIntegerIncrement_1>:
 8001bb6:	b005      	add	sp, #20
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bbc <ZbZclAttrEuiRead>:
 8001bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	0005      	movs	r5, r0
 8001bc4:	000e      	movs	r6, r1
 8001bc6:	0014      	movs	r4, r2
 8001bc8:	f05f 0808 	movs.w	r8, #8
 8001bcc:	f05f 0900 	movs.w	r9, #0
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	0038      	movs	r0, r7
 8001bd8:	f002 fe6b 	bl	80048b2 <__aeabi_memset>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	9001      	str	r0, [sp, #4]
 8001be0:	2008      	movs	r0, #8
 8001be2:	9000      	str	r0, [sp, #0]
 8001be4:	ab02      	add	r3, sp, #8
 8001be6:	2200      	movs	r2, #0
 8001be8:	0031      	movs	r1, r6
 8001bea:	b289      	uxth	r1, r1
 8001bec:	0028      	movs	r0, r5
 8001bee:	f7fe fbfa 	bl	80003e6 <ZbZclAttrRead>
 8001bf2:	0007      	movs	r7, r0
 8001bf4:	2c00      	cmp	r4, #0
 8001bf6:	d000      	beq.n	8001bfa <??ZbZclAttrEuiRead_0>
 8001bf8:	7027      	strb	r7, [r4, #0]

08001bfa <??ZbZclAttrEuiRead_0>:
 8001bfa:	0038      	movs	r0, r7
 8001bfc:	b2c0      	uxtb	r0, r0
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d002      	beq.n	8001c08 <??ZbZclAttrEuiRead_1>
 8001c02:	2000      	movs	r0, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	e002      	b.n	8001c0e <??ZbZclAttrEuiRead_2>

08001c08 <??ZbZclAttrEuiRead_1>:
 8001c08:	a802      	add	r0, sp, #8
 8001c0a:	f002 f97f 	bl	8003f0c <pletoh64>

08001c0e <??ZbZclAttrEuiRead_2>:
 8001c0e:	b005      	add	sp, #20
 8001c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c14 <ZbZclAttrEuiWrite>:
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	4680      	mov	r8, r0
 8001c1c:	4689      	mov	r9, r1
 8001c1e:	0014      	movs	r4, r2
 8001c20:	001d      	movs	r5, r3
 8001c22:	f1b8 0f00 	cmp.w	r8, #0
 8001c26:	d101      	bne.n	8001c2c <??ZbZclAttrEuiWrite_0>
 8001c28:	2087      	movs	r0, #135	@ 0x87
 8001c2a:	e02e      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c2c <??ZbZclAttrEuiWrite_0>:
 8001c2c:	aa02      	add	r2, sp, #8
 8001c2e:	4649      	mov	r1, r9
 8001c30:	b289      	uxth	r1, r1
 8001c32:	4640      	mov	r0, r8
 8001c34:	f7ff ffc2 	bl	8001bbc <ZbZclAttrEuiRead>
 8001c38:	0006      	movs	r6, r0
 8001c3a:	000f      	movs	r7, r1
 8001c3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d002      	beq.n	8001c4a <??ZbZclAttrEuiWrite_2>
 8001c44:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c48:	e01f      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c4a <??ZbZclAttrEuiWrite_2>:
 8001c4a:	42af      	cmp	r7, r5
 8001c4c:	d103      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d101      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c52:	2000      	movs	r0, #0
 8001c54:	e019      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c56 <??ZbZclAttrEuiWrite_3>:
 8001c56:	0022      	movs	r2, r4
 8001c58:	002b      	movs	r3, r5
 8001c5a:	a803      	add	r0, sp, #12
 8001c5c:	f002 f9a9 	bl	8003fb2 <putle64>
 8001c60:	2002      	movs	r0, #2
 8001c62:	9001      	str	r0, [sp, #4]
 8001c64:	2008      	movs	r0, #8
 8001c66:	9000      	str	r0, [sp, #0]
 8001c68:	ab03      	add	r3, sp, #12
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7fe fd0a 	bl	800068a <ZbZclAttrWrite>
 8001c76:	f88d 0008 	strb.w	r0, [sp, #8]
 8001c7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d002      	beq.n	8001c88 <??ZbZclAttrEuiWrite_4>
 8001c82:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c86:	e000      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c88 <??ZbZclAttrEuiWrite_4>:
 8001c88:	2000      	movs	r0, #0

08001c8a <??ZbZclAttrEuiWrite_1>:
 8001c8a:	b005      	add	sp, #20
 8001c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c90 <ZbZclAttrAppendList>:
 8001c90:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b089      	sub	sp, #36	@ 0x24
 8001c96:	0007      	movs	r7, r0
 8001c98:	000e      	movs	r6, r1
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	9008      	str	r0, [sp, #32]
 8001c9e:	2e00      	cmp	r6, #0
 8001ca0:	d002      	beq.n	8001ca8 <??ZbZclAttrAppendList_0>
 8001ca2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d101      	bne.n	8001cac <??ZbZclAttrAppendList_1>

08001ca8 <??ZbZclAttrAppendList_0>:
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e0c6      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cac <??ZbZclAttrAppendList_1>:
 8001cac:	f05f 0800 	movs.w	r8, #0

08001cb0 <??ZbZclAttrAppendList_3>:
 8001cb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001cb2:	4580      	cmp	r8, r0
 8001cb4:	f080 80bd 	bcs.w	8001e32 <??ZbZclAttrAppendList_4>
 8001cb8:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8001cbc:	fb09 f008 	mul.w	r0, r9, r8
 8001cc0:	4430      	add	r0, r6
 8001cc2:	7900      	ldrb	r0, [r0, #4]
 8001cc4:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8001cc8:	d007      	beq.n	8001cda <??ZbZclAttrAppendList_5>
 8001cca:	fb09 f008 	mul.w	r0, r9, r8
 8001cce:	4430      	add	r0, r6
 8001cd0:	68c0      	ldr	r0, [r0, #12]
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d101      	bne.n	8001cda <??ZbZclAttrAppendList_5>
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e0af      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cda <??ZbZclAttrAppendList_5>:
 8001cda:	fb09 f008 	mul.w	r0, r9, r8
 8001cde:	5a31      	ldrh	r1, [r6, r0]
 8001ce0:	0038      	movs	r0, r7
 8001ce2:	f7fe fa7c 	bl	80001de <ZbZclAttrFind>
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d003      	beq.n	8001cf4 <??ZbZclAttrAppendList_6>
 8001cec:	0029      	movs	r1, r5
 8001cee:	0038      	movs	r0, r7
 8001cf0:	f000 f8b6 	bl	8001e60 <ZbZclAttrFreeAttr>

08001cf4 <??ZbZclAttrAppendList_6>:
 8001cf4:	2418      	movs	r4, #24
 8001cf6:	f05f 0a00 	movs.w	sl, #0
 8001cfa:	f10d 0b04 	add.w	fp, sp, #4
 8001cfe:	4652      	mov	r2, sl
 8001d00:	0021      	movs	r1, r4
 8001d02:	4658      	mov	r0, fp
 8001d04:	f002 fdd5 	bl	80048b2 <__aeabi_memset>
 8001d08:	a801      	add	r0, sp, #4
 8001d0a:	9001      	str	r0, [sp, #4]
 8001d0c:	a801      	add	r0, sp, #4
 8001d0e:	9002      	str	r0, [sp, #8]
 8001d10:	fb09 f008 	mul.w	r0, r9, r8
 8001d14:	4430      	add	r0, r6
 8001d16:	9003      	str	r0, [sp, #12]
 8001d18:	fb09 f008 	mul.w	r0, r9, r8
 8001d1c:	4430      	add	r0, r6
 8001d1e:	7900      	ldrb	r0, [r0, #4]
 8001d20:	0780      	lsls	r0, r0, #30
 8001d22:	d50b      	bpl.n	8001d3c <??ZbZclAttrAppendList_7>
 8001d24:	fb09 f008 	mul.w	r0, r9, r8
 8001d28:	4430      	add	r0, r6
 8001d2a:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001d2c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8001d30:	fb09 f008 	mul.w	r0, r9, r8
 8001d34:	4430      	add	r0, r6
 8001d36:	8c00      	ldrh	r0, [r0, #32]
 8001d38:	f8ad 0018 	strh.w	r0, [sp, #24]

08001d3c <??ZbZclAttrAppendList_7>:
 8001d3c:	fb09 f008 	mul.w	r0, r9, r8
 8001d40:	4430      	add	r0, r6
 8001d42:	7900      	ldrb	r0, [r0, #4]
 8001d44:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8001d48:	2830      	cmp	r0, #48	@ 0x30
 8001d4a:	d108      	bne.n	8001d5e <??ZbZclAttrAppendList_8>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	9000      	str	r0, [sp, #0]
 8001d50:	fb09 f908 	mul.w	r9, r9, r8
 8001d54:	eb06 0009 	add.w	r0, r6, r9
 8001d58:	6880      	ldr	r0, [r0, #8]
 8001d5a:	9005      	str	r0, [sp, #20]
 8001d5c:	e034      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001d5e <??ZbZclAttrAppendList_8>:
 8001d5e:	fb09 f008 	mul.w	r0, r9, r8
 8001d62:	4430      	add	r0, r6
 8001d64:	6880      	ldr	r0, [r0, #8]
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d01f      	beq.n	8001daa <??ZbZclAttrAppendList_10>
 8001d6a:	fb09 f908 	mul.w	r9, r9, r8
 8001d6e:	eb06 0009 	add.w	r0, r6, r9
 8001d72:	6880      	ldr	r0, [r0, #8]
 8001d74:	9005      	str	r0, [sp, #20]
 8001d76:	9803      	ldr	r0, [sp, #12]
 8001d78:	7880      	ldrb	r0, [r0, #2]
 8001d7a:	2841      	cmp	r0, #65	@ 0x41
 8001d7c:	d003      	beq.n	8001d86 <??ZbZclAttrAppendList_11>
 8001d7e:	9803      	ldr	r0, [sp, #12]
 8001d80:	7880      	ldrb	r0, [r0, #2]
 8001d82:	2842      	cmp	r0, #66	@ 0x42
 8001d84:	d103      	bne.n	8001d8e <??ZbZclAttrAppendList_12>

08001d86 <??ZbZclAttrAppendList_11>:
 8001d86:	9805      	ldr	r0, [sp, #20]
 8001d88:	1c40      	adds	r0, r0, #1
 8001d8a:	9005      	str	r0, [sp, #20]
 8001d8c:	e00a      	b.n	8001da4 <??ZbZclAttrAppendList_13>

08001d8e <??ZbZclAttrAppendList_12>:
 8001d8e:	9803      	ldr	r0, [sp, #12]
 8001d90:	7880      	ldrb	r0, [r0, #2]
 8001d92:	2843      	cmp	r0, #67	@ 0x43
 8001d94:	d003      	beq.n	8001d9e <??ZbZclAttrAppendList_14>
 8001d96:	9803      	ldr	r0, [sp, #12]
 8001d98:	7880      	ldrb	r0, [r0, #2]
 8001d9a:	2844      	cmp	r0, #68	@ 0x44
 8001d9c:	d102      	bne.n	8001da4 <??ZbZclAttrAppendList_13>

08001d9e <??ZbZclAttrAppendList_14>:
 8001d9e:	9805      	ldr	r0, [sp, #20]
 8001da0:	1c80      	adds	r0, r0, #2
 8001da2:	9005      	str	r0, [sp, #20]

08001da4 <??ZbZclAttrAppendList_13>:
 8001da4:	9805      	ldr	r0, [sp, #20]
 8001da6:	9000      	str	r0, [sp, #0]
 8001da8:	e00e      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001daa <??ZbZclAttrAppendList_10>:
 8001daa:	fb09 f908 	mul.w	r9, r9, r8
 8001dae:	eb06 0009 	add.w	r0, r6, r9
 8001db2:	7880      	ldrb	r0, [r0, #2]
 8001db4:	f7ff f8b4 	bl	8000f20 <ZbZclAttrTypeLength>
 8001db8:	9005      	str	r0, [sp, #20]
 8001dba:	9805      	ldr	r0, [sp, #20]
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d101      	bne.n	8001dc4 <??ZbZclAttrAppendList_15>
 8001dc0:	208d      	movs	r0, #141	@ 0x8d
 8001dc2:	e03a      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001dc4 <??ZbZclAttrAppendList_15>:
 8001dc4:	9805      	ldr	r0, [sp, #20]
 8001dc6:	9000      	str	r0, [sp, #0]

08001dc8 <??ZbZclAttrAppendList_9>:
 8001dc8:	2300      	movs	r3, #0
 8001dca:	a236      	add	r2, pc, #216	@ (adr r2, 8001ea4 <??DataTable1>)
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	3118      	adds	r1, #24
 8001dd0:	9808      	ldr	r0, [sp, #32]
 8001dd2:	f00c feaa 	bl	800eb2a <zb_heap_alloc>
 8001dd6:	0004      	movs	r4, r0
 8001dd8:	2c00      	cmp	r4, #0
 8001dda:	d101      	bne.n	8001de0 <??ZbZclAttrAppendList_16>
 8001ddc:	2089      	movs	r0, #137	@ 0x89
 8001dde:	e02c      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001de0 <??ZbZclAttrAppendList_16>:
 8001de0:	2518      	movs	r5, #24
 8001de2:	f10d 0904 	add.w	r9, sp, #4
 8001de6:	46a2      	mov	sl, r4
 8001de8:	002a      	movs	r2, r5
 8001dea:	4649      	mov	r1, r9
 8001dec:	4650      	mov	r0, sl
 8001dee:	f00d ff86 	bl	800fcfe <__aeabi_memcpy>
 8001df2:	9800      	ldr	r0, [sp, #0]
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d00c      	beq.n	8001e12 <??ZbZclAttrAppendList_17>
 8001df8:	f114 0018 	adds.w	r0, r4, #24
 8001dfc:	60e0      	str	r0, [r4, #12]
 8001dfe:	9800      	ldr	r0, [sp, #0]
 8001e00:	9007      	str	r0, [sp, #28]
 8001e02:	2500      	movs	r5, #0
 8001e04:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8001e08:	002a      	movs	r2, r5
 8001e0a:	9907      	ldr	r1, [sp, #28]
 8001e0c:	4648      	mov	r0, r9
 8001e0e:	f002 fd50 	bl	80048b2 <__aeabi_memset>

08001e12 <??ZbZclAttrAppendList_17>:
 8001e12:	0021      	movs	r1, r4
 8001e14:	0038      	movs	r0, r7
 8001e16:	f7fe f9b3 	bl	8000180 <ZbZclAttrAddSorted>
 8001e1a:	68e0      	ldr	r0, [r4, #12]
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d005      	beq.n	8001e2c <??ZbZclAttrAppendList_18>
 8001e20:	6922      	ldr	r2, [r4, #16]
 8001e22:	68e1      	ldr	r1, [r4, #12]
 8001e24:	68a0      	ldr	r0, [r4, #8]
 8001e26:	7880      	ldrb	r0, [r0, #2]
 8001e28:	f7fe fdfa 	bl	8000a20 <ZbZclAttrDefaultValue>

08001e2c <??ZbZclAttrAppendList_18>:
 8001e2c:	f118 0801 	adds.w	r8, r8, #1
 8001e30:	e73e      	b.n	8001cb0 <??ZbZclAttrAppendList_3>

08001e32 <??ZbZclAttrAppendList_4>:
 8001e32:	0038      	movs	r0, r7
 8001e34:	f000 ff3a 	bl	8002cac <zcl_reporting_create_default_reports>
 8001e38:	2000      	movs	r0, #0

08001e3a <??ZbZclAttrAppendList_2>:
 8001e3a:	b00b      	add	sp, #44	@ 0x2c
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e40 <ZbZclAttrCallbackExec>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	000d      	movs	r5, r1
 8001e46:	0016      	movs	r6, r2
 8001e48:	68a8      	ldr	r0, [r5, #8]
 8001e4a:	68c0      	ldr	r0, [r0, #12]
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d005      	beq.n	8001e5c <??ZbZclAttrCallbackExec_0>
 8001e50:	0031      	movs	r1, r6
 8001e52:	0020      	movs	r0, r4
 8001e54:	68aa      	ldr	r2, [r5, #8]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	4790      	blx	r2
 8001e5a:	e000      	b.n	8001e5e <??ZbZclAttrCallbackExec_1>

08001e5c <??ZbZclAttrCallbackExec_0>:
 8001e5c:	2001      	movs	r0, #1

08001e5e <??ZbZclAttrCallbackExec_1>:
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}

08001e60 <ZbZclAttrFreeAttr>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	0004      	movs	r4, r0
 8001e64:	000d      	movs	r5, r1
 8001e66:	68a8      	ldr	r0, [r5, #8]
 8001e68:	7900      	ldrb	r0, [r0, #4]
 8001e6a:	0780      	lsls	r0, r0, #30
 8001e6c:	d50b      	bpl.n	8001e86 <??ZbZclAttrFreeAttr_0>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	68a8      	ldr	r0, [r5, #8]
 8001e72:	8801      	ldrh	r1, [r0, #0]
 8001e74:	0020      	movs	r0, r4
 8001e76:	f000 fdfd 	bl	8002a74 <zcl_cluster_attr_report_delete>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	68a8      	ldr	r0, [r5, #8]
 8001e7e:	8801      	ldrh	r1, [r0, #0]
 8001e80:	0020      	movs	r0, r4
 8001e82:	f000 fdf7 	bl	8002a74 <zcl_cluster_attr_report_delete>

08001e86 <??ZbZclAttrFreeAttr_0>:
 8001e86:	6868      	ldr	r0, [r5, #4]
 8001e88:	6829      	ldr	r1, [r5, #0]
 8001e8a:	6048      	str	r0, [r1, #4]
 8001e8c:	6828      	ldr	r0, [r5, #0]
 8001e8e:	6869      	ldr	r1, [r5, #4]
 8001e90:	6008      	str	r0, [r1, #0]
 8001e92:	602d      	str	r5, [r5, #0]
 8001e94:	606d      	str	r5, [r5, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	a202      	add	r2, pc, #8	@ (adr r2, 8001ea4 <??DataTable1>)
 8001e9a:	0029      	movs	r1, r5
 8001e9c:	68a0      	ldr	r0, [r4, #8]
 8001e9e:	f00c fe53 	bl	800eb48 <zb_heap_free>
 8001ea2:	bd31      	pop	{r0, r4, r5, pc}

08001ea4 <??DataTable1>:
 8001ea4:	0000 0000                                   ....

08001ea8 <ZbZclAttrFreeList>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	0005      	movs	r5, r0

08001eac <??ZbZclAttrFreeList_0>:
 8001eac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001eae:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001eb2:	4288      	cmp	r0, r1
 8001eb4:	d001      	beq.n	8001eba <??ZbZclAttrFreeList_1>
 8001eb6:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8001eb8:	e000      	b.n	8001ebc <??ZbZclAttrFreeList_2>

08001eba <??ZbZclAttrFreeList_1>:
 8001eba:	2400      	movs	r4, #0

08001ebc <??ZbZclAttrFreeList_2>:
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	d005      	beq.n	8001ecc <??ZbZclAttrFreeList_3>

08001ec0 <??ZbZclAttrFreeList_4>:
 8001ec0:	0026      	movs	r6, r4
 8001ec2:	0031      	movs	r1, r6
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	f7ff ffcb 	bl	8001e60 <ZbZclAttrFreeAttr>
 8001eca:	e7ef      	b.n	8001eac <??ZbZclAttrFreeList_0>

08001ecc <??ZbZclAttrFreeList_3>:
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ed0 <zcl_reporting_send_conf>:
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	7e02      	ldrb	r2, [r0, #24]
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d004      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ed8:	7e02      	ldrb	r2, [r0, #24]
 8001eda:	2aa4      	cmp	r2, #164	@ 0xa4
 8001edc:	d001      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ede:	7e02      	ldrb	r2, [r0, #24]
 8001ee0:	2aa3      	cmp	r2, #163	@ 0xa3

08001ee2 <??zcl_reporting_send_conf_0>:
 8001ee2:	4770      	bx	lr

08001ee4 <report_command_timer>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	0004      	movs	r4, r0
 8001ee8:	000d      	movs	r5, r1
 8001eea:	002e      	movs	r6, r5
 8001eec:	f116 0108 	adds.w	r1, r6, #8
 8001ef0:	6830      	ldr	r0, [r6, #0]
 8001ef2:	f000 f852 	bl	8001f9a <zcl_reporting_send_report>
 8001ef6:	6870      	ldr	r0, [r6, #4]
 8001ef8:	f00c fbf0 	bl	800e6dc <ZbTimerFree>
 8001efc:	2300      	movs	r3, #0
 8001efe:	a2cf      	add	r2, pc, #828	@ (adr r2, 800223c <??DataTable4>)
 8001f00:	0031      	movs	r1, r6
 8001f02:	6830      	ldr	r0, [r6, #0]
 8001f04:	6880      	ldr	r0, [r0, #8]
 8001f06:	f00c fe1f 	bl	800eb48 <zb_heap_free>
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}

08001f0c <zcl_reporting_queue_report>:
 8001f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	0006      	movs	r6, r0
 8001f12:	000f      	movs	r7, r1
 8001f14:	0014      	movs	r4, r2
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d104      	bne.n	8001f24 <??zcl_reporting_queue_report_0>
 8001f1a:	0039      	movs	r1, r7
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	f000 f83c 	bl	8001f9a <zcl_reporting_send_report>
 8001f22:	e037      	b.n	8001f94 <??zcl_reporting_queue_report_1>

08001f24 <??zcl_reporting_queue_report_0>:
 8001f24:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	2198      	movs	r1, #152	@ 0x98
 8001f2e:	68b0      	ldr	r0, [r6, #8]
 8001f30:	f00c fdfb 	bl	800eb2a <zb_heap_alloc>
 8001f34:	0005      	movs	r5, r0
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d101      	bne.n	8001f3e <??zcl_reporting_queue_report_2>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e02b      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f3e <??zcl_reporting_queue_report_2>:
 8001f3e:	f05f 0998 	movs.w	r9, #152	@ 0x98
 8001f42:	f05f 0a00 	movs.w	sl, #0
 8001f46:	46ab      	mov	fp, r5
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	4658      	mov	r0, fp
 8001f4e:	f002 fcb0 	bl	80048b2 <__aeabi_memset>
 8001f52:	002a      	movs	r2, r5
 8001f54:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8002bf0 <??DataTable9>
 8001f58:	68b0      	ldr	r0, [r6, #8]
 8001f5a:	f00c fb6d 	bl	800e638 <ZbTimerAlloc>
 8001f5e:	6068      	str	r0, [r5, #4]
 8001f60:	6868      	ldr	r0, [r5, #4]
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d107      	bne.n	8001f76 <??zcl_reporting_queue_report_4>
 8001f66:	2300      	movs	r3, #0
 8001f68:	4642      	mov	r2, r8
 8001f6a:	0029      	movs	r1, r5
 8001f6c:	68b0      	ldr	r0, [r6, #8]
 8001f6e:	f00c fdeb 	bl	800eb48 <zb_heap_free>
 8001f72:	2000      	movs	r0, #0
 8001f74:	e00f      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f76 <??zcl_reporting_queue_report_4>:
 8001f76:	602e      	str	r6, [r5, #0]
 8001f78:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8001f7c:	46b9      	mov	r9, r7
 8001f7e:	f115 0a08 	adds.w	sl, r5, #8
 8001f82:	4642      	mov	r2, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	4650      	mov	r0, sl
 8001f88:	f00d feb9 	bl	800fcfe <__aeabi_memcpy>
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	6868      	ldr	r0, [r5, #4]
 8001f90:	f00c fbd8 	bl	800e744 <ZbTimerReset>

08001f94 <??zcl_reporting_queue_report_1>:
 8001f94:	2001      	movs	r0, #1

08001f96 <??zcl_reporting_queue_report_3>:
 8001f96:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f9a <zcl_reporting_send_report>:
 8001f9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9e:	b0cc      	sub	sp, #304	@ 0x130
 8001fa0:	0005      	movs	r5, r0
 8001fa2:	000e      	movs	r6, r1
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f88d 0004 	strb.w	r0, [sp, #4]
 8001fac:	8a28      	ldrh	r0, [r5, #16]
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <??zcl_reporting_send_report_0>
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e000      	b.n	8001fb8 <??zcl_reporting_send_report_1>

08001fb6 <??zcl_reporting_send_report_0>:
 8001fb6:	2000      	movs	r0, #0

08001fb8 <??zcl_reporting_send_report_1>:
 8001fb8:	f88d 0005 	strb.w	r0, [sp, #5]
 8001fbc:	8a28      	ldrh	r0, [r5, #16]
 8001fbe:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001fc2:	7f28      	ldrb	r0, [r5, #28]
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d103      	bne.n	8001fd0 <??zcl_reporting_send_report_2>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f88d 0006 	strb.w	r0, [sp, #6]
 8001fce:	e002      	b.n	8001fd6 <??zcl_reporting_send_report_3>

08001fd0 <??zcl_reporting_send_report_2>:
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f88d 0006 	strb.w	r0, [sp, #6]

08001fd6 <??zcl_reporting_send_report_3>:
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f88d 0007 	strb.w	r0, [sp, #7]
 8001fdc:	f00c fc7a 	bl	800e8d4 <ZbZclGetNextSeqnum>
 8001fe0:	f88d 000a 	strb.w	r0, [sp, #10]
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f88d 000b 	strb.w	r0, [sp, #11]
 8001fea:	2205      	movs	r2, #5
 8001fec:	a903      	add	r1, sp, #12
 8001fee:	a801      	add	r0, sp, #4
 8001ff0:	f001 ff06 	bl	8003e00 <ZbZclAppendHeader>
 8001ff4:	0007      	movs	r7, r0
 8001ff6:	2f01      	cmp	r7, #1
 8001ff8:	f2c0 8093 	blt.w	8002122 <??zcl_reporting_send_report_4>

08001ffc <??zcl_reporting_send_report_5>:
 8001ffc:	a91a      	add	r1, sp, #104	@ 0x68
 8001ffe:	a803      	add	r0, sp, #12
 8002000:	0022      	movs	r2, r4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8002008:	0038      	movs	r0, r7
 800200a:	b2c0      	uxtb	r0, r0
 800200c:	aa1a      	add	r2, sp, #104	@ 0x68
 800200e:	0023      	movs	r3, r4
 8002010:	b2db      	uxtb	r3, r3
 8002012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002016:	6050      	str	r0, [r2, #4]
 8002018:	1c64      	adds	r4, r4, #1
 800201a:	2000      	movs	r0, #0
 800201c:	4680      	mov	r8, r0

0800201e <??zcl_reporting_send_report_6>:
 800201e:	f1b8 0f0c 	cmp.w	r8, #12
 8002022:	d22e      	bcs.n	8002082 <??zcl_reporting_send_report_7>
 8002024:	220c      	movs	r2, #12
 8002026:	fb02 f008 	mul.w	r0, r2, r8
 800202a:	4430      	add	r0, r6
 800202c:	7a00      	ldrb	r0, [r0, #8]
 800202e:	2800      	cmp	r0, #0
 8002030:	d027      	beq.n	8002082 <??zcl_reporting_send_report_7>

08002032 <??zcl_reporting_send_report_8>:
 8002032:	fb02 f008 	mul.w	r0, r2, r8
 8002036:	4430      	add	r0, r6
 8002038:	3009      	adds	r0, #9
 800203a:	0023      	movs	r3, r4
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002042:	2003      	movs	r0, #3
 8002044:	ab1a      	add	r3, sp, #104	@ 0x68
 8002046:	46a4      	mov	ip, r4
 8002048:	fa5f fc8c 	uxtb.w	ip, ip
 800204c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002050:	6058      	str	r0, [r3, #4]
 8002052:	1c64      	adds	r4, r4, #1
 8002054:	fb02 f008 	mul.w	r0, r2, r8
 8002058:	4430      	add	r0, r6
 800205a:	6840      	ldr	r0, [r0, #4]
 800205c:	0023      	movs	r3, r4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002064:	fb02 f208 	mul.w	r2, r2, r8
 8002068:	eb06 0002 	add.w	r0, r6, r2
 800206c:	7a00      	ldrb	r0, [r0, #8]
 800206e:	aa1a      	add	r2, sp, #104	@ 0x68
 8002070:	0023      	movs	r3, r4
 8002072:	b2db      	uxtb	r3, r3
 8002074:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002078:	6050      	str	r0, [r2, #4]
 800207a:	1c64      	adds	r4, r4, #1
 800207c:	f118 0801 	adds.w	r8, r8, #1
 8002080:	e7cd      	b.n	800201e <??zcl_reporting_send_report_6>

08002082 <??zcl_reporting_send_report_7>:
 8002082:	2200      	movs	r2, #0
 8002084:	a906      	add	r1, sp, #24
 8002086:	0028      	movs	r0, r5
 8002088:	f001 fe0b 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 800208c:	a806      	add	r0, sp, #24
 800208e:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8002bf8 <??DataTable9_2>
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	f00d fe32 	bl	800fcfe <__aeabi_memcpy>
 800209a:	2001      	movs	r0, #1
 800209c:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020a0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020a4:	f050 0004 	orrs.w	r0, r0, #4
 80020a8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020ac:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020b0:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 80020b4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020b8:	7ca8      	ldrb	r0, [r5, #18]
 80020ba:	28ab      	cmp	r0, #171	@ 0xab
 80020bc:	d005      	beq.n	80020ca <??zcl_reporting_send_report_9>
 80020be:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020c2:	f050 0002 	orrs.w	r0, r0, #2
 80020c6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

080020ca <??zcl_reporting_send_report_9>:
 80020ca:	2001      	movs	r0, #1
 80020cc:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80020d0:	2000      	movs	r0, #0
 80020d2:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 80020d6:	a81a      	add	r0, sp, #104	@ 0x68
 80020d8:	900c      	str	r0, [sp, #48]	@ 0x30
 80020da:	0020      	movs	r0, r4
 80020dc:	b2c0      	uxtb	r0, r0
 80020de:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80020e2:	68ab      	ldr	r3, [r5, #8]
 80020e4:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8002bfc <??DataTable9_3>
 80020e8:	a906      	add	r1, sp, #24
 80020ea:	68a8      	ldr	r0, [r5, #8]
 80020ec:	f00c f952 	bl	800e394 <ZbApsdeDataReqCallback>
 80020f0:	f88d 0000 	strb.w	r0, [sp]
 80020f4:	f89d 0000 	ldrb.w	r0, [sp]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d012      	beq.n	8002122 <??zcl_reporting_send_report_4>
 80020fc:	f05f 0920 	movs.w	r9, #32
 8002100:	f05f 0a00 	movs.w	sl, #0
 8002104:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8002108:	4652      	mov	r2, sl
 800210a:	4649      	mov	r1, r9
 800210c:	4658      	mov	r0, fp
 800210e:	f002 fbd0 	bl	80048b2 <__aeabi_memset>
 8002112:	f89d 0000 	ldrb.w	r0, [sp]
 8002116:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 800211a:	68a9      	ldr	r1, [r5, #8]
 800211c:	a812      	add	r0, sp, #72	@ 0x48
 800211e:	f7ff fed7 	bl	8001ed0 <zcl_reporting_send_conf>

08002122 <??zcl_reporting_send_report_4>:
 8002122:	f05f 0900 	movs.w	r9, #0

08002126 <??zcl_reporting_send_report_10>:
 8002126:	f1b9 0f0c 	cmp.w	r9, #12
 800212a:	d21e      	bcs.n	800216a <??zcl_reporting_send_report_11>
 800212c:	f05f 080c 	movs.w	r8, #12
 8002130:	fb08 f009 	mul.w	r0, r8, r9
 8002134:	4430      	add	r0, r6
 8002136:	6840      	ldr	r0, [r0, #4]
 8002138:	2800      	cmp	r0, #0
 800213a:	d016      	beq.n	800216a <??zcl_reporting_send_report_11>

0800213c <??zcl_reporting_send_report_12>:
 800213c:	2300      	movs	r3, #0
 800213e:	a23f      	add	r2, pc, #252	@ (adr r2, 800223c <??DataTable4>)
 8002140:	fb08 f009 	mul.w	r0, r8, r9
 8002144:	4430      	add	r0, r6
 8002146:	6841      	ldr	r1, [r0, #4]
 8002148:	68a8      	ldr	r0, [r5, #8]
 800214a:	f00c fcfd 	bl	800eb48 <zb_heap_free>
 800214e:	2000      	movs	r0, #0
 8002150:	fb08 f109 	mul.w	r1, r8, r9
 8002154:	4431      	add	r1, r6
 8002156:	6048      	str	r0, [r1, #4]
 8002158:	2000      	movs	r0, #0
 800215a:	fb08 f809 	mul.w	r8, r8, r9
 800215e:	eb06 0108 	add.w	r1, r6, r8
 8002162:	7208      	strb	r0, [r1, #8]
 8002164:	f119 0901 	adds.w	r9, r9, #1
 8002168:	e7dd      	b.n	8002126 <??zcl_reporting_send_report_10>

0800216a <??zcl_reporting_send_report_11>:
 800216a:	b04d      	add	sp, #308	@ 0x134
 800216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002170 <zcl_report_check_time>:
 8002170:	4281      	cmp	r1, r0
 8002172:	d201      	bcs.n	8002178 <??zcl_report_check_time_0>
 8002174:	0008      	movs	r0, r1
 8002176:	e7ff      	b.n	8002178 <??zcl_report_check_time_0>

08002178 <??zcl_report_check_time_0>:
 8002178:	4770      	bx	lr

0800217a <zcl_report_kick>:
 800217a:	b538      	push	{r3, r4, r5, lr}
 800217c:	0004      	movs	r4, r0
 800217e:	000d      	movs	r5, r1
 8002180:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002182:	2800      	cmp	r0, #0
 8002184:	d101      	bne.n	800218a <??zcl_report_kick_0>
 8002186:	2000      	movs	r0, #0
 8002188:	e00d      	b.n	80021a6 <??zcl_report_kick_1>

0800218a <??zcl_report_kick_0>:
 800218a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800218e:	2800      	cmp	r0, #0
 8002190:	d001      	beq.n	8002196 <??zcl_report_kick_2>
 8002192:	2001      	movs	r0, #1
 8002194:	e007      	b.n	80021a6 <??zcl_report_kick_1>

08002196 <??zcl_report_kick_2>:
 8002196:	2001      	movs	r0, #1
 8002198:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 800219c:	0029      	movs	r1, r5
 800219e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80021a0:	f00c fad0 	bl	800e744 <ZbTimerReset>
 80021a4:	2001      	movs	r0, #1

080021a6 <??zcl_report_kick_1>:
 80021a6:	bd32      	pop	{r1, r4, r5, pc}

080021a8 <ZbZclAttrReportKick>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	0004      	movs	r4, r0
 80021ac:	000d      	movs	r5, r1
 80021ae:	0016      	movs	r6, r2
 80021b0:	001f      	movs	r7, r3
 80021b2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d001      	beq.n	80021bc <??ZbZclAttrReportKick_0>
 80021b8:	2001      	movs	r0, #1
 80021ba:	e010      	b.n	80021de <??ZbZclAttrReportKick_1>

080021bc <??ZbZclAttrReportKick_0>:
 80021bc:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80021c0:	6426      	str	r6, [r4, #64]	@ 0x40
 80021c2:	6467      	str	r7, [r4, #68]	@ 0x44
 80021c4:	2100      	movs	r1, #0
 80021c6:	0020      	movs	r0, r4
 80021c8:	f7ff ffd7 	bl	800217a <zcl_report_kick>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d105      	bne.n	80021dc <??ZbZclAttrReportKick_2>
 80021d0:	2000      	movs	r0, #0
 80021d2:	6420      	str	r0, [r4, #64]	@ 0x40
 80021d4:	2000      	movs	r0, #0
 80021d6:	6460      	str	r0, [r4, #68]	@ 0x44
 80021d8:	2001      	movs	r0, #1
 80021da:	e000      	b.n	80021de <??ZbZclAttrReportKick_1>

080021dc <??ZbZclAttrReportKick_2>:
 80021dc:	2000      	movs	r0, #0

080021de <??ZbZclAttrReportKick_1>:
 80021de:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080021e0 <zcl_report_append_attr>:
 80021e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e4:	0004      	movs	r4, r0
 80021e6:	000d      	movs	r5, r1
 80021e8:	0016      	movs	r6, r2
 80021ea:	001f      	movs	r7, r3
 80021ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80021f0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80021f4:	2300      	movs	r3, #0
 80021f6:	a211      	add	r2, pc, #68	@ (adr r2, 800223c <??DataTable4>)
 80021f8:	4649      	mov	r1, r9
 80021fa:	0020      	movs	r0, r4
 80021fc:	f00c fc95 	bl	800eb2a <zb_heap_alloc>
 8002200:	6068      	str	r0, [r5, #4]
 8002202:	6868      	ldr	r0, [r5, #4]
 8002204:	2800      	cmp	r0, #0
 8002206:	d101      	bne.n	800220c <??zcl_report_append_attr_0>
 8002208:	2000      	movs	r0, #0
 800220a:	e014      	b.n	8002236 <??zcl_report_append_attr_1>

0800220c <??zcl_report_append_attr_0>:
 800220c:	f8cd 9000 	str.w	r9, [sp]
 8002210:	46c2      	mov	sl, r8
 8002212:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8002216:	9a00      	ldr	r2, [sp, #0]
 8002218:	4651      	mov	r1, sl
 800221a:	4658      	mov	r0, fp
 800221c:	f00d fd6f 	bl	800fcfe <__aeabi_memcpy>
 8002220:	f885 9008 	strb.w	r9, [r5, #8]
 8002224:	802e      	strh	r6, [r5, #0]
 8002226:	0031      	movs	r1, r6
 8002228:	b289      	uxth	r1, r1
 800222a:	f115 0009 	adds.w	r0, r5, #9
 800222e:	f001 fe7b 	bl	8003f28 <putle16>
 8002232:	72ef      	strb	r7, [r5, #11]
 8002234:	2001      	movs	r0, #1

08002236 <??zcl_report_append_attr_1>:
 8002236:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800223c <??DataTable4>:
 800223c:	0000 0000                                   ....

08002240 <zcl_cluster_report_check_timeout>:
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	0006      	movs	r6, r0
 8002246:	000f      	movs	r7, r1
 8002248:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800224a:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800224e:	4288      	cmp	r0, r1
 8002250:	d001      	beq.n	8002256 <??zcl_cluster_report_check_timeout_0>
 8002252:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002254:	e000      	b.n	8002258 <??zcl_cluster_report_check_timeout_1>

08002256 <??zcl_cluster_report_check_timeout_0>:
 8002256:	2000      	movs	r0, #0

08002258 <??zcl_cluster_report_check_timeout_1>:
 8002258:	2800      	cmp	r0, #0
 800225a:	d101      	bne.n	8002260 <??zcl_cluster_report_check_timeout_2>
 800225c:	2000      	movs	r0, #0
 800225e:	e042      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

08002260 <??zcl_cluster_report_check_timeout_2>:
 8002260:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002262:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8002266:	4288      	cmp	r0, r1
 8002268:	d001      	beq.n	800226e <??zcl_cluster_report_check_timeout_4>
 800226a:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800226c:	e000      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

0800226e <??zcl_cluster_report_check_timeout_4>:
 800226e:	2500      	movs	r5, #0

08002270 <??zcl_cluster_report_check_timeout_5>:
 8002270:	2d00      	cmp	r5, #0
 8002272:	d037      	beq.n	80022e4 <??zcl_cluster_report_check_timeout_6>
 8002274:	46a8      	mov	r8, r5
 8002276:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 800227a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800227e:	4288      	cmp	r0, r1
 8002280:	d027      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

08002282 <??zcl_cluster_report_check_timeout_8>:
 8002282:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8002286:	2800      	cmp	r0, #0
 8002288:	d00e      	beq.n	80022a8 <??zcl_cluster_report_check_timeout_9>
 800228a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800228e:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8002292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002296:	fb00 1909 	mla	r9, r0, r9, r1
 800229a:	4649      	mov	r1, r9
 800229c:	0038      	movs	r0, r7
 800229e:	f00c fa81 	bl	800e7a4 <ZbTimeoutRemaining>
 80022a2:	0004      	movs	r4, r0
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d114      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022a8 <??zcl_cluster_report_check_timeout_9>:
 80022a8:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d010      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022b0 <??zcl_cluster_report_check_timeout_10>:
 80022b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80022b4:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 80022b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022bc:	fb00 1909 	mla	r9, r0, r9, r1
 80022c0:	4649      	mov	r1, r9
 80022c2:	0038      	movs	r0, r7
 80022c4:	f00c fa6e 	bl	800e7a4 <ZbTimeoutRemaining>
 80022c8:	0004      	movs	r4, r0
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	d101      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022ce <??zcl_cluster_report_check_timeout_11>:
 80022ce:	2001      	movs	r0, #1
 80022d0:	e009      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

080022d2 <??zcl_cluster_report_check_timeout_7>:
 80022d2:	6828      	ldr	r0, [r5, #0]
 80022d4:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80022d8:	4288      	cmp	r0, r1
 80022da:	d001      	beq.n	80022e0 <??zcl_cluster_report_check_timeout_12>
 80022dc:	682d      	ldr	r5, [r5, #0]
 80022de:	e7c7      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e0 <??zcl_cluster_report_check_timeout_12>:
 80022e0:	2500      	movs	r5, #0
 80022e2:	e7c5      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e4 <??zcl_cluster_report_check_timeout_6>:
 80022e4:	2000      	movs	r0, #0

080022e6 <??zcl_cluster_report_check_timeout_3>:
 80022e6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080022ec <zcl_cluster_reports_timer>:
 80022ec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b081      	sub	sp, #4
 80022f2:	ed2d 8b04 	vpush	{d8-d9}
 80022f6:	b0b0      	sub	sp, #192	@ 0xc0
 80022f8:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80022fa:	9003      	str	r0, [sp, #12]
 80022fc:	2000      	movs	r0, #0
 80022fe:	9005      	str	r0, [sp, #20]
 8002300:	2000      	movs	r0, #0
 8002302:	9007      	str	r0, [sp, #28]
 8002304:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8002c00 <??DataTable9_4>
 8002308:	9006      	str	r0, [sp, #24]
 800230a:	2000      	movs	r0, #0
 800230c:	f88d 0010 	strb.w	r0, [sp, #16]
 8002310:	f05f 0b00 	movs.w	fp, #0
 8002314:	9803      	ldr	r0, [sp, #12]
 8002316:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800231a:	f88d 000b 	strb.w	r0, [sp, #11]
 800231e:	2000      	movs	r0, #0
 8002320:	f88d 000a 	strb.w	r0, [sp, #10]
 8002324:	2000      	movs	r0, #0
 8002326:	9903      	ldr	r1, [sp, #12]
 8002328:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 800232c:	2000      	movs	r0, #0
 800232e:	9903      	ldr	r1, [sp, #12]
 8002330:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8002334:	9803      	ldr	r0, [sp, #12]
 8002336:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002338:	9903      	ldr	r1, [sp, #12]
 800233a:	3130      	adds	r1, #48	@ 0x30
 800233c:	4288      	cmp	r0, r1
 800233e:	d002      	beq.n	8002346 <??zcl_cluster_reports_timer_1>
 8002340:	9803      	ldr	r0, [sp, #12]
 8002342:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002344:	e000      	b.n	8002348 <??zcl_cluster_reports_timer_2>

08002346 <??zcl_cluster_reports_timer_1>:
 8002346:	2000      	movs	r0, #0

08002348 <??zcl_cluster_reports_timer_2>:
 8002348:	2800      	cmp	r0, #0
 800234a:	f000 81f7 	beq.w	800273c <??zcl_cluster_reports_timer_3>

0800234e <??zcl_cluster_reports_timer_4>:
 800234e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002350:	f00c faad 	bl	800e8ae <ZbZclUptime>
 8002354:	9009      	str	r0, [sp, #36]	@ 0x24
 8002356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002358:	9803      	ldr	r0, [sp, #12]
 800235a:	f7ff ff71 	bl	8002240 <zcl_cluster_report_check_timeout>
 800235e:	2800      	cmp	r0, #0
 8002360:	d004      	beq.n	800236c <??zcl_cluster_reports_timer_5>
 8002362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002364:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 8002368:	900b      	str	r0, [sp, #44]	@ 0x2c
 800236a:	e001      	b.n	8002370 <??zcl_cluster_reports_timer_6>

0800236c <??zcl_cluster_reports_timer_5>:
 800236c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800236e:	900b      	str	r0, [sp, #44]	@ 0x2c

08002370 <??zcl_cluster_reports_timer_6>:
 8002370:	2490      	movs	r4, #144	@ 0x90
 8002372:	2500      	movs	r5, #0
 8002374:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8002378:	002a      	movs	r2, r5
 800237a:	0021      	movs	r1, r4
 800237c:	4640      	mov	r0, r8
 800237e:	f002 fa98 	bl	80048b2 <__aeabi_memset>
 8002382:	2000      	movs	r0, #0
 8002384:	4682      	mov	sl, r0
 8002386:	2000      	movs	r0, #0
 8002388:	f88d 0008 	strb.w	r0, [sp, #8]
 800238c:	9803      	ldr	r0, [sp, #12]
 800238e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002390:	9903      	ldr	r1, [sp, #12]
 8002392:	3130      	adds	r1, #48	@ 0x30
 8002394:	4288      	cmp	r0, r1
 8002396:	d002      	beq.n	800239e <??zcl_cluster_reports_timer_7>
 8002398:	9803      	ldr	r0, [sp, #12]
 800239a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800239c:	e000      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800239e <??zcl_cluster_reports_timer_7>:
 800239e:	2600      	movs	r6, #0

080023a0 <??zcl_cluster_reports_timer_8>:
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	f000 817b 	beq.w	800269c <??zcl_cluster_reports_timer_9>
 80023a6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023aa:	f88d 0009 	strb.w	r0, [sp, #9]
 80023ae:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8002c00 <??DataTable9_4>
 80023b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80023b4:	0037      	movs	r7, r6
 80023b6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80023b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023bc:	4288      	cmp	r0, r1
 80023be:	f000 8164 	beq.w	800268a <??zcl_cluster_reports_timer_10>

080023c2 <??zcl_cluster_reports_timer_11>:
 80023c2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d116      	bne.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ca:	8c38      	ldrh	r0, [r7, #32]
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d013      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	8c3c      	ldrh	r4, [r7, #32]
 80023d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023d8:	fb00 1404 	mla	r4, r0, r4, r1
 80023dc:	0021      	movs	r1, r4
 80023de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80023e0:	f00c f9e0 	bl	800e7a4 <ZbTimeoutRemaining>
 80023e4:	9008      	str	r0, [sp, #32]
 80023e6:	9808      	ldr	r0, [sp, #32]
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d005      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ec:	9908      	ldr	r1, [sp, #32]
 80023ee:	9806      	ldr	r0, [sp, #24]
 80023f0:	f7ff febe 	bl	8002170 <zcl_report_check_time>
 80023f4:	9006      	str	r0, [sp, #24]
 80023f6:	e148      	b.n	800268a <??zcl_cluster_reports_timer_10>

080023f8 <??zcl_cluster_reports_timer_12>:
 80023f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d115      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002400:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002402:	2800      	cmp	r0, #0
 8002404:	d012      	beq.n	800242c <??zcl_cluster_reports_timer_13>
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800240a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800240e:	fb00 1404 	mla	r4, r0, r4, r1
 8002412:	0021      	movs	r1, r4
 8002414:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002416:	f00c f9c5 	bl	800e7a4 <ZbTimeoutRemaining>
 800241a:	900a      	str	r0, [sp, #40]	@ 0x28
 800241c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800241e:	2800      	cmp	r0, #0
 8002420:	d104      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002422:	2001      	movs	r0, #1
 8002424:	f88d 0009 	strb.w	r0, [sp, #9]
 8002428:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800242a:	6138      	str	r0, [r7, #16]

0800242c <??zcl_cluster_reports_timer_13>:
 800242c:	9803      	ldr	r0, [sp, #12]
 800242e:	8982      	ldrh	r2, [r0, #12]
 8002430:	9803      	ldr	r0, [sp, #12]
 8002432:	7b81      	ldrb	r1, [r0, #14]
 8002434:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002436:	f00c f8b8 	bl	800e5aa <ZbApsBindSrcExists>
 800243a:	2800      	cmp	r0, #0
 800243c:	d105      	bne.n	800244a <??zcl_cluster_reports_timer_14>
 800243e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002440:	9806      	ldr	r0, [sp, #24]
 8002442:	f7ff fe95 	bl	8002170 <zcl_report_check_time>
 8002446:	9006      	str	r0, [sp, #24]
 8002448:	e11f      	b.n	800268a <??zcl_cluster_reports_timer_10>

0800244a <??zcl_cluster_reports_timer_14>:
 800244a:	9805      	ldr	r0, [sp, #20]
 800244c:	2800      	cmp	r0, #0
 800244e:	d10b      	bne.n	8002468 <??zcl_cluster_reports_timer_15>
 8002450:	2300      	movs	r3, #0
 8002452:	a28a      	add	r2, pc, #552	@ (adr r2, 800267c <??zcl_cluster_reports_timer_0>)
 8002454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002458:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800245a:	f00c fb66 	bl	800eb2a <zb_heap_alloc>
 800245e:	9005      	str	r0, [sp, #20]
 8002460:	9805      	ldr	r0, [sp, #20]
 8002462:	2800      	cmp	r0, #0
 8002464:	f000 816a 	beq.w	800273c <??zcl_cluster_reports_timer_3>

08002468 <??zcl_cluster_reports_timer_15>:
 8002468:	2000      	movs	r0, #0
 800246a:	9001      	str	r0, [sp, #4]
 800246c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	9b05      	ldr	r3, [sp, #20]
 8002474:	f10d 0211 	add.w	r2, sp, #17
 8002478:	89b9      	ldrh	r1, [r7, #12]
 800247a:	9803      	ldr	r0, [sp, #12]
 800247c:	f7fd ffb3 	bl	80003e6 <ZbZclAttrRead>
 8002480:	2800      	cmp	r0, #0
 8002482:	d003      	beq.n	800248c <??zcl_cluster_reports_timer_16>
 8002484:	0038      	movs	r0, r7
 8002486:	f000 fb0a 	bl	8002a9e <zcl_reporting_disable>
 800248a:	e094      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

0800248c <??zcl_cluster_reports_timer_16>:
 800248c:	2300      	movs	r3, #0
 800248e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002492:	9905      	ldr	r1, [sp, #20]
 8002494:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8002498:	f7fe fdcd 	bl	8001036 <ZbZclAttrParseLength>
 800249c:	9007      	str	r0, [sp, #28]
 800249e:	9807      	ldr	r0, [sp, #28]
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d503      	bpl.n	80024ac <??zcl_cluster_reports_timer_18>
 80024a4:	0038      	movs	r0, r7
 80024a6:	f000 fafa 	bl	8002a9e <zcl_reporting_disable>
 80024aa:	e084      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024ac <??zcl_cluster_reports_timer_18>:
 80024ac:	9807      	ldr	r0, [sp, #28]
 80024ae:	2800      	cmp	r0, #0
 80024b0:	f000 8081 	beq.w	80025b6 <??zcl_cluster_reports_timer_17>

080024b4 <??zcl_cluster_reports_timer_19>:
 80024b4:	7bb8      	ldrb	r0, [r7, #14]
 80024b6:	2838      	cmp	r0, #56	@ 0x38
 80024b8:	db37      	blt.n	800252a <??zcl_cluster_reports_timer_20>
 80024ba:	7bb8      	ldrb	r0, [r7, #14]
 80024bc:	283b      	cmp	r0, #59	@ 0x3b
 80024be:	da34      	bge.n	800252a <??zcl_cluster_reports_timer_20>
 80024c0:	f10d 0201 	add.w	r2, sp, #1
 80024c4:	9905      	ldr	r1, [sp, #20]
 80024c6:	7bb8      	ldrb	r0, [r7, #14]
 80024c8:	f001 fec1 	bl	800424e <ZbZclParseFloat>
 80024cc:	eeb0 8a40 	vmov.f32	s16, s0
 80024d0:	eef0 8a60 	vmov.f32	s17, s1
 80024d4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80024d8:	2800      	cmp	r0, #0
 80024da:	d003      	beq.n	80024e4 <??zcl_cluster_reports_timer_21>
 80024dc:	0038      	movs	r0, r7
 80024de:	f000 fade 	bl	8002a9e <zcl_reporting_disable>
 80024e2:	e068      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024e4 <??zcl_cluster_reports_timer_21>:
 80024e4:	ec51 0b18 	vmov	r0, r1, d8
 80024e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ec:	f002 fa90 	bl	8004a10 <__aeabi_dsub>
 80024f0:	ec41 0b19 	vmov	d9, r0, r1
 80024f4:	ec51 0b19 	vmov	r0, r1, d9
 80024f8:	2200      	movs	r2, #0
 80024fa:	2300      	movs	r3, #0
 80024fc:	f002 fea0 	bl	8005240 <__aeabi_cdcmpeq>
 8002500:	d205      	bcs.n	800250e <??zcl_cluster_reports_timer_22>
 8002502:	ec51 0b19 	vmov	r0, r1, d9
 8002506:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800250a:	ec41 0b19 	vmov	d9, r0, r1

0800250e <??zcl_cluster_reports_timer_22>:
 800250e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002512:	2800      	cmp	r0, #0
 8002514:	d106      	bne.n	8002524 <??zcl_cluster_reports_timer_23>
 8002516:	ec51 0b19 	vmov	r0, r1, d9
 800251a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800251e:	f002 fe8f 	bl	8005240 <__aeabi_cdcmpeq>
 8002522:	d348      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002524 <??zcl_cluster_reports_timer_23>:
 8002524:	ed87 8b06 	vstr	d8, [r7, #24]
 8002528:	e040      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800252a <??zcl_cluster_reports_timer_20>:
 800252a:	7bb8      	ldrb	r0, [r7, #14]
 800252c:	f7fe fe34 	bl	8001198 <ZbZclAttrIsAnalog>
 8002530:	2800      	cmp	r0, #0
 8002532:	d02b      	beq.n	800258c <??zcl_cluster_reports_timer_25>
 8002534:	466a      	mov	r2, sp
 8002536:	9905      	ldr	r1, [sp, #20]
 8002538:	7bb8      	ldrb	r0, [r7, #14]
 800253a:	f7fe ff2b 	bl	8001394 <ZbZclParseInteger>
 800253e:	0004      	movs	r4, r0
 8002540:	000d      	movs	r5, r1
 8002542:	f89d 0000 	ldrb.w	r0, [sp]
 8002546:	2800      	cmp	r0, #0
 8002548:	d003      	beq.n	8002552 <??zcl_cluster_reports_timer_26>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 faa7 	bl	8002a9e <zcl_reporting_disable>
 8002550:	e031      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

08002552 <??zcl_cluster_reports_timer_26>:
 8002552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002556:	ebb4 0800 	subs.w	r8, r4, r0
 800255a:	eb75 0901 	sbcs.w	r9, r5, r1
 800255e:	f1b9 0f00 	cmp.w	r9, #0
 8002562:	d503      	bpl.n	800256c <??zcl_cluster_reports_timer_27>
 8002564:	f1d8 0800 	rsbs	r8, r8, #0
 8002568:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

0800256c <??zcl_cluster_reports_timer_27>:
 800256c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002570:	2800      	cmp	r0, #0
 8002572:	d108      	bne.n	8002586 <??zcl_cluster_reports_timer_28>
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f002 fbd4 	bl	8004d24 <__aeabi_l2d>
 800257c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002580:	f002 fe5e 	bl	8005240 <__aeabi_cdcmpeq>
 8002584:	d317      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002586 <??zcl_cluster_reports_timer_28>:
 8002586:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800258a:	e00f      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800258c <??zcl_cluster_reports_timer_25>:
 800258c:	9a07      	ldr	r2, [sp, #28]
 800258e:	9905      	ldr	r1, [sp, #20]
 8002590:	2000      	movs	r0, #0
 8002592:	f00c fae7 	bl	800eb64 <WpanCrc>
 8002596:	0001      	movs	r1, r0
 8002598:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800259c:	2800      	cmp	r0, #0
 800259e:	d104      	bne.n	80025aa <??zcl_cluster_reports_timer_29>
 80025a0:	8b38      	ldrh	r0, [r7, #24]
 80025a2:	000a      	movs	r2, r1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	4290      	cmp	r0, r2
 80025a8:	d005      	beq.n	80025b6 <??zcl_cluster_reports_timer_17>

080025aa <??zcl_cluster_reports_timer_29>:
 80025aa:	8339      	strh	r1, [r7, #24]

080025ac <??zcl_cluster_reports_timer_24>:
 80025ac:	2001      	movs	r0, #1
 80025ae:	f88d 0009 	strb.w	r0, [sp, #9]
 80025b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80025b4:	6138      	str	r0, [r7, #16]

080025b6 <??zcl_cluster_reports_timer_17>:
 80025b6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d060      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025be:	9807      	ldr	r0, [sp, #28]
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d05d      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025c4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80025c8:	1c40      	adds	r0, r0, #1
 80025ca:	f88d 0010 	strb.w	r0, [sp, #16]
 80025ce:	4650      	mov	r0, sl
 80025d0:	b2c0      	uxtb	r0, r0
 80025d2:	280c      	cmp	r0, #12
 80025d4:	d007      	beq.n	80025e6 <??zcl_cluster_reports_timer_31>
 80025d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80025da:	9907      	ldr	r1, [sp, #28]
 80025dc:	fa51 f080 	uxtab	r0, r1, r0
 80025e0:	1cc0      	adds	r0, r0, #3
 80025e2:	2837      	cmp	r0, #55	@ 0x37
 80025e4:	d314      	bcc.n	8002610 <??zcl_cluster_reports_timer_32>

080025e6 <??zcl_cluster_reports_timer_31>:
 80025e6:	465a      	mov	r2, fp
 80025e8:	a90c      	add	r1, sp, #48	@ 0x30
 80025ea:	9803      	ldr	r0, [sp, #12]
 80025ec:	f7ff fc8e 	bl	8001f0c <zcl_reporting_queue_report>
 80025f0:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80025f4:	2490      	movs	r4, #144	@ 0x90
 80025f6:	2500      	movs	r5, #0
 80025f8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80025fc:	002a      	movs	r2, r5
 80025fe:	0021      	movs	r1, r4
 8002600:	4640      	mov	r0, r8
 8002602:	f002 f956 	bl	80048b2 <__aeabi_memset>
 8002606:	2000      	movs	r0, #0
 8002608:	4682      	mov	sl, r0
 800260a:	2000      	movs	r0, #0
 800260c:	f88d 0008 	strb.w	r0, [sp, #8]

08002610 <??zcl_cluster_reports_timer_32>:
 8002610:	9807      	ldr	r0, [sp, #28]
 8002612:	9001      	str	r0, [sp, #4]
 8002614:	9805      	ldr	r0, [sp, #20]
 8002616:	9000      	str	r0, [sp, #0]
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	89ba      	ldrh	r2, [r7, #12]
 800261c:	a90c      	add	r1, sp, #48	@ 0x30
 800261e:	4654      	mov	r4, sl
 8002620:	b2e4      	uxtb	r4, r4
 8002622:	200c      	movs	r0, #12
 8002624:	4344      	muls	r4, r0
 8002626:	4421      	add	r1, r4
 8002628:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800262a:	f7ff fdd9 	bl	80021e0 <zcl_report_append_attr>
 800262e:	2800      	cmp	r0, #0
 8002630:	d02b      	beq.n	800268a <??zcl_cluster_reports_timer_10>

08002632 <??zcl_cluster_reports_timer_33>:
 8002632:	f11a 0a01 	adds.w	sl, sl, #1
 8002636:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800263a:	9807      	ldr	r0, [sp, #28]
 800263c:	1841      	adds	r1, r0, r1
 800263e:	1cc9      	adds	r1, r1, #3
 8002640:	f88d 1008 	strb.w	r1, [sp, #8]
 8002644:	8c38      	ldrh	r0, [r7, #32]
 8002646:	2800      	cmp	r0, #0
 8002648:	d005      	beq.n	8002656 <??zcl_cluster_reports_timer_34>
 800264a:	8c39      	ldrh	r1, [r7, #32]
 800264c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002650:	4341      	muls	r1, r0
 8002652:	9108      	str	r1, [sp, #32]
 8002654:	e00b      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002656 <??zcl_cluster_reports_timer_34>:
 8002656:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002658:	2800      	cmp	r0, #0
 800265a:	d005      	beq.n	8002668 <??zcl_cluster_reports_timer_36>
 800265c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800265e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002662:	4341      	muls	r1, r0
 8002664:	9108      	str	r1, [sp, #32]
 8002666:	e002      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002668 <??zcl_cluster_reports_timer_36>:
 8002668:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8002c00 <??DataTable9_4>
 800266c:	9008      	str	r0, [sp, #32]

0800266e <??zcl_cluster_reports_timer_35>:
 800266e:	9908      	ldr	r1, [sp, #32]
 8002670:	9806      	ldr	r0, [sp, #24]
 8002672:	f7ff fd7d 	bl	8002170 <zcl_report_check_time>
 8002676:	9006      	str	r0, [sp, #24]
 8002678:	e007      	b.n	800268a <??zcl_cluster_reports_timer_10>
 800267a:	bf00      	nop

0800267c <??zcl_cluster_reports_timer_0>:
 800267c:	0000 0000                                   ....

08002680 <??zcl_cluster_reports_timer_30>:
 8002680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002682:	9806      	ldr	r0, [sp, #24]
 8002684:	f7ff fd74 	bl	8002170 <zcl_report_check_time>
 8002688:	9006      	str	r0, [sp, #24]

0800268a <??zcl_cluster_reports_timer_10>:
 800268a:	6830      	ldr	r0, [r6, #0]
 800268c:	9903      	ldr	r1, [sp, #12]
 800268e:	3130      	adds	r1, #48	@ 0x30
 8002690:	4288      	cmp	r0, r1
 8002692:	d001      	beq.n	8002698 <??zcl_cluster_reports_timer_37>
 8002694:	6836      	ldr	r6, [r6, #0]
 8002696:	e683      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

08002698 <??zcl_cluster_reports_timer_37>:
 8002698:	2600      	movs	r6, #0
 800269a:	e681      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800269c <??zcl_cluster_reports_timer_9>:
 800269c:	9805      	ldr	r0, [sp, #20]
 800269e:	2800      	cmp	r0, #0
 80026a0:	d04c      	beq.n	800273c <??zcl_cluster_reports_timer_3>
 80026a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d042      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 80026aa:	2001      	movs	r0, #1
 80026ac:	9007      	str	r0, [sp, #28]
 80026ae:	2001      	movs	r0, #1
 80026b0:	9905      	ldr	r1, [sp, #20]
 80026b2:	7008      	strb	r0, [r1, #0]
 80026b4:	4650      	mov	r0, sl
 80026b6:	b2c0      	uxtb	r0, r0
 80026b8:	280c      	cmp	r0, #12
 80026ba:	d007      	beq.n	80026cc <??zcl_cluster_reports_timer_39>
 80026bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80026c0:	9907      	ldr	r1, [sp, #28]
 80026c2:	fa51 f080 	uxtab	r0, r1, r0
 80026c6:	1cc0      	adds	r0, r0, #3
 80026c8:	2837      	cmp	r0, #55	@ 0x37
 80026ca:	d314      	bcc.n	80026f6 <??zcl_cluster_reports_timer_40>

080026cc <??zcl_cluster_reports_timer_39>:
 80026cc:	465a      	mov	r2, fp
 80026ce:	a90c      	add	r1, sp, #48	@ 0x30
 80026d0:	9803      	ldr	r0, [sp, #12]
 80026d2:	f7ff fc1b 	bl	8001f0c <zcl_reporting_queue_report>
 80026d6:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80026da:	2490      	movs	r4, #144	@ 0x90
 80026dc:	2500      	movs	r5, #0
 80026de:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80026e2:	002a      	movs	r2, r5
 80026e4:	0021      	movs	r1, r4
 80026e6:	4640      	mov	r0, r8
 80026e8:	f002 f8e3 	bl	80048b2 <__aeabi_memset>
 80026ec:	2000      	movs	r0, #0
 80026ee:	4682      	mov	sl, r0
 80026f0:	2000      	movs	r0, #0
 80026f2:	f88d 0008 	strb.w	r0, [sp, #8]

080026f6 <??zcl_cluster_reports_timer_40>:
 80026f6:	9807      	ldr	r0, [sp, #28]
 80026f8:	9001      	str	r0, [sp, #4]
 80026fa:	9805      	ldr	r0, [sp, #20]
 80026fc:	9000      	str	r0, [sp, #0]
 80026fe:	2330      	movs	r3, #48	@ 0x30
 8002700:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002704:	a90c      	add	r1, sp, #48	@ 0x30
 8002706:	4654      	mov	r4, sl
 8002708:	b2e4      	uxtb	r4, r4
 800270a:	200c      	movs	r0, #12
 800270c:	4344      	muls	r4, r0
 800270e:	4421      	add	r1, r4
 8002710:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002712:	f7ff fd65 	bl	80021e0 <zcl_report_append_attr>
 8002716:	2800      	cmp	r0, #0
 8002718:	d001      	beq.n	800271e <??zcl_cluster_reports_timer_41>
 800271a:	f11a 0a01 	adds.w	sl, sl, #1

0800271e <??zcl_cluster_reports_timer_41>:
 800271e:	4650      	mov	r0, sl
 8002720:	b2c0      	uxtb	r0, r0
 8002722:	2800      	cmp	r0, #0
 8002724:	d004      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 8002726:	465a      	mov	r2, fp
 8002728:	a90c      	add	r1, sp, #48	@ 0x30
 800272a:	9803      	ldr	r0, [sp, #12]
 800272c:	f7ff fbee 	bl	8001f0c <zcl_reporting_queue_report>

08002730 <??zcl_cluster_reports_timer_38>:
 8002730:	2300      	movs	r3, #0
 8002732:	a2ba      	add	r2, pc, #744	@ (adr r2, 8002a1c <??DataTable7>)
 8002734:	9905      	ldr	r1, [sp, #20]
 8002736:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002738:	f00c fa06 	bl	800eb48 <zb_heap_free>

0800273c <??zcl_cluster_reports_timer_3>:
 800273c:	9806      	ldr	r0, [sp, #24]
 800273e:	28c8      	cmp	r0, #200	@ 0xc8
 8002740:	d201      	bcs.n	8002746 <??zcl_cluster_reports_timer_42>
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	9006      	str	r0, [sp, #24]

08002746 <??zcl_cluster_reports_timer_42>:
 8002746:	9803      	ldr	r0, [sp, #12]
 8002748:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800274a:	2800      	cmp	r0, #0
 800274c:	d00c      	beq.n	8002768 <??zcl_cluster_reports_timer_43>
 800274e:	9803      	ldr	r0, [sp, #12]
 8002750:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002752:	9906      	ldr	r1, [sp, #24]
 8002754:	9803      	ldr	r0, [sp, #12]
 8002756:	9b03      	ldr	r3, [sp, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4798      	blx	r3
 800275c:	2000      	movs	r0, #0
 800275e:	9903      	ldr	r1, [sp, #12]
 8002760:	6408      	str	r0, [r1, #64]	@ 0x40
 8002762:	2000      	movs	r0, #0
 8002764:	9903      	ldr	r1, [sp, #12]
 8002766:	6448      	str	r0, [r1, #68]	@ 0x44

08002768 <??zcl_cluster_reports_timer_43>:
 8002768:	2301      	movs	r3, #1
 800276a:	f10d 020a 	add.w	r2, sp, #10
 800276e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002772:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002774:	f00c f886 	bl	800e884 <ZbNwkGet>
 8002778:	2800      	cmp	r0, #0
 800277a:	d002      	beq.n	8002782 <??zcl_cluster_reports_timer_44>
 800277c:	2000      	movs	r0, #0
 800277e:	f88d 000a 	strb.w	r0, [sp, #10]

08002782 <??zcl_cluster_reports_timer_44>:
 8002782:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002786:	2800      	cmp	r0, #0
 8002788:	d110      	bne.n	80027ac <??zcl_cluster_reports_timer_45>
 800278a:	9803      	ldr	r0, [sp, #12]
 800278c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800278e:	9903      	ldr	r1, [sp, #12]
 8002790:	3130      	adds	r1, #48	@ 0x30
 8002792:	4288      	cmp	r0, r1
 8002794:	d002      	beq.n	800279c <??zcl_cluster_reports_timer_46>
 8002796:	9803      	ldr	r0, [sp, #12]
 8002798:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800279a:	e000      	b.n	800279e <??zcl_cluster_reports_timer_47>

0800279c <??zcl_cluster_reports_timer_46>:
 800279c:	2000      	movs	r0, #0

0800279e <??zcl_cluster_reports_timer_47>:
 800279e:	2800      	cmp	r0, #0
 80027a0:	d004      	beq.n	80027ac <??zcl_cluster_reports_timer_45>
 80027a2:	9906      	ldr	r1, [sp, #24]
 80027a4:	9803      	ldr	r0, [sp, #12]
 80027a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80027a8:	f00b ffcc 	bl	800e744 <ZbTimerReset>

080027ac <??zcl_cluster_reports_timer_45>:
 80027ac:	b030      	add	sp, #192	@ 0xc0
 80027ae:	ecbd 8b04 	vpop	{d8-d9}
 80027b2:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027b6 <zcl_attr_reporting_check>:
 80027b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b8:	0005      	movs	r5, r0
 80027ba:	000e      	movs	r6, r1
 80027bc:	0017      	movs	r7, r2
 80027be:	2000      	movs	r0, #0
 80027c0:	f88d 0000 	strb.w	r0, [sp]
 80027c4:	2301      	movs	r3, #1
 80027c6:	466a      	mov	r2, sp
 80027c8:	f240 410c 	movw	r1, #1036	@ 0x40c
 80027cc:	68a8      	ldr	r0, [r5, #8]
 80027ce:	f00c f859 	bl	800e884 <ZbNwkGet>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d002      	beq.n	80027dc <??zcl_attr_reporting_check_0>
 80027d6:	2000      	movs	r0, #0
 80027d8:	f88d 0000 	strb.w	r0, [sp]

080027dc <??zcl_attr_reporting_check_0>:
 80027dc:	f89d 0000 	ldrb.w	r0, [sp]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d10d      	bne.n	8002800 <??zcl_attr_reporting_check_1>
 80027e4:	003a      	movs	r2, r7
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	0031      	movs	r1, r6
 80027ea:	b289      	uxth	r1, r1
 80027ec:	0028      	movs	r0, r5
 80027ee:	f000 f81a 	bl	8002826 <zcl_reporting_find>
 80027f2:	0004      	movs	r4, r0
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	d003      	beq.n	8002800 <??zcl_attr_reporting_check_1>
 80027f8:	21c8      	movs	r1, #200	@ 0xc8
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7ff fcbd 	bl	800217a <zcl_report_kick>

08002800 <??zcl_attr_reporting_check_1>:
 8002800:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002802 <ZbZclReportCleanup>:
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	0005      	movs	r5, r0

08002806 <??ZbZclReportCleanup_0>:
 8002806:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002808:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 800280c:	4288      	cmp	r0, r1
 800280e:	d001      	beq.n	8002814 <??ZbZclReportCleanup_1>
 8002810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8002812:	e000      	b.n	8002816 <??ZbZclReportCleanup_2>

08002814 <??ZbZclReportCleanup_1>:
 8002814:	2400      	movs	r4, #0

08002816 <??ZbZclReportCleanup_2>:
 8002816:	2c00      	cmp	r4, #0
 8002818:	d004      	beq.n	8002824 <??ZbZclReportCleanup_3>

0800281a <??ZbZclReportCleanup_4>:
 800281a:	0026      	movs	r6, r4
 800281c:	0030      	movs	r0, r6
 800281e:	f000 f8ff 	bl	8002a20 <zcl_reporting_delete>
 8002822:	e7f0      	b.n	8002806 <??ZbZclReportCleanup_0>

08002824 <??ZbZclReportCleanup_3>:
 8002824:	bd70      	pop	{r4, r5, r6, pc}

08002826 <zcl_reporting_find>:
 8002826:	b470      	push	{r4, r5, r6}
 8002828:	0004      	movs	r4, r0
 800282a:	000b      	movs	r3, r1
 800282c:	0010      	movs	r0, r2
 800282e:	b2c0      	uxtb	r0, r0
 8002830:	2801      	cmp	r0, #1
 8002832:	d101      	bne.n	8002838 <??zcl_reporting_find_0>
 8002834:	2000      	movs	r0, #0
 8002836:	e01c      	b.n	8002872 <??zcl_reporting_find_1>

08002838 <??zcl_reporting_find_0>:
 8002838:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800283a:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 800283e:	4288      	cmp	r0, r1
 8002840:	d001      	beq.n	8002846 <??zcl_reporting_find_2>
 8002842:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002844:	e000      	b.n	8002848 <??zcl_reporting_find_3>

08002846 <??zcl_reporting_find_2>:
 8002846:	2100      	movs	r1, #0

08002848 <??zcl_reporting_find_3>:
 8002848:	2900      	cmp	r1, #0
 800284a:	d011      	beq.n	8002870 <??zcl_reporting_find_4>
 800284c:	000d      	movs	r5, r1
 800284e:	89a8      	ldrh	r0, [r5, #12]
 8002850:	001e      	movs	r6, r3
 8002852:	b2b6      	uxth	r6, r6
 8002854:	42b0      	cmp	r0, r6
 8002856:	d005      	beq.n	8002864 <??zcl_reporting_find_5>
 8002858:	6808      	ldr	r0, [r1, #0]
 800285a:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 800285e:	42b0      	cmp	r0, r6
 8002860:	d004      	beq.n	800286c <??zcl_reporting_find_6>
 8002862:	e001      	b.n	8002868 <??zcl_reporting_find_7>

08002864 <??zcl_reporting_find_5>:
 8002864:	0028      	movs	r0, r5
 8002866:	e004      	b.n	8002872 <??zcl_reporting_find_1>

08002868 <??zcl_reporting_find_7>:
 8002868:	6809      	ldr	r1, [r1, #0]
 800286a:	e7ed      	b.n	8002848 <??zcl_reporting_find_3>

0800286c <??zcl_reporting_find_6>:
 800286c:	2100      	movs	r1, #0
 800286e:	e7eb      	b.n	8002848 <??zcl_reporting_find_3>

08002870 <??zcl_reporting_find_4>:
 8002870:	2000      	movs	r0, #0

08002872 <??zcl_reporting_find_1>:
 8002872:	bc70      	pop	{r4, r5, r6}
 8002874:	4770      	bx	lr

08002876 <zcl_reporting_stack_event>:
 8002876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	0006      	movs	r6, r0
 800287c:	000f      	movs	r7, r1
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	46ca      	mov	sl, r9
 8002884:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 8002888:	d001      	beq.n	800288e <??zcl_reporting_stack_event_0>
 800288a:	2000      	movs	r0, #0
 800288c:	e01b      	b.n	80028c6 <??zcl_reporting_stack_event_1>

0800288e <??zcl_reporting_stack_event_0>:
 800288e:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8002892:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8002896:	4288      	cmp	r0, r1
 8002898:	d002      	beq.n	80028a0 <??zcl_reporting_stack_event_2>
 800289a:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 800289e:	e000      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028a0 <??zcl_reporting_stack_event_2>:
 80028a0:	2400      	movs	r4, #0

080028a2 <??zcl_reporting_stack_event_3>:
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d00e      	beq.n	80028c4 <??zcl_reporting_stack_event_4>
 80028a6:	0025      	movs	r5, r4
 80028a8:	2201      	movs	r2, #1
 80028aa:	0029      	movs	r1, r5
 80028ac:	0030      	movs	r0, r6
 80028ae:	f000 f947 	bl	8002b40 <zcl_reporting_reset_defaults>
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80028b8:	4288      	cmp	r0, r1
 80028ba:	d001      	beq.n	80028c0 <??zcl_reporting_stack_event_5>
 80028bc:	6824      	ldr	r4, [r4, #0]
 80028be:	e7f0      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c0 <??zcl_reporting_stack_event_5>:
 80028c0:	2400      	movs	r4, #0
 80028c2:	e7ee      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c4 <??zcl_reporting_stack_event_4>:
 80028c4:	2000      	movs	r0, #0

080028c6 <??zcl_reporting_stack_event_1>:
 80028c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028ca <zcl_reporting_save_curr_val>:
 80028ca:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80028ce:	0005      	movs	r5, r0
 80028d0:	000e      	movs	r6, r1
 80028d2:	68af      	ldr	r7, [r5, #8]
 80028d4:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 80028d8:	2300      	movs	r3, #0
 80028da:	464a      	mov	r2, r9
 80028dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028e0:	0038      	movs	r0, r7
 80028e2:	f00c f922 	bl	800eb2a <zb_heap_alloc>
 80028e6:	0004      	movs	r4, r0
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d101      	bne.n	80028f0 <??zcl_reporting_save_curr_val_0>
 80028ec:	2089      	movs	r0, #137	@ 0x89
 80028ee:	e05d      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

080028f0 <??zcl_reporting_save_curr_val_0>:
 80028f0:	2001      	movs	r0, #1
 80028f2:	9001      	str	r0, [sp, #4]
 80028f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	0023      	movs	r3, r4
 80028fc:	f10d 0209 	add.w	r2, sp, #9
 8002900:	89b1      	ldrh	r1, [r6, #12]
 8002902:	0028      	movs	r0, r5
 8002904:	f7fd fd6f 	bl	80003e6 <ZbZclAttrRead>
 8002908:	f88d 0008 	strb.w	r0, [sp, #8]
 800290c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002910:	2800      	cmp	r0, #0
 8002912:	d002      	beq.n	800291a <??zcl_reporting_save_curr_val_2>
 8002914:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002918:	e048      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800291a <??zcl_reporting_save_curr_val_2>:
 800291a:	7bb0      	ldrb	r0, [r6, #14]
 800291c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002920:	4288      	cmp	r0, r1
 8002922:	d001      	beq.n	8002928 <??zcl_reporting_save_curr_val_3>
 8002924:	208d      	movs	r0, #141	@ 0x8d
 8002926:	e041      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002928 <??zcl_reporting_save_curr_val_3>:
 8002928:	2300      	movs	r3, #0
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	0021      	movs	r1, r4
 8002930:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002934:	f7fe fb7f 	bl	8001036 <ZbZclAttrParseLength>
 8002938:	4680      	mov	r8, r0
 800293a:	f1b8 0f00 	cmp.w	r8, #0
 800293e:	d501      	bpl.n	8002944 <??zcl_reporting_save_curr_val_4>
 8002940:	2089      	movs	r0, #137	@ 0x89
 8002942:	e033      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002944 <??zcl_reporting_save_curr_val_4>:
 8002944:	7bb0      	ldrb	r0, [r6, #14]
 8002946:	f7fe fc27 	bl	8001198 <ZbZclAttrIsAnalog>
 800294a:	2800      	cmp	r0, #0
 800294c:	d106      	bne.n	800295c <??zcl_reporting_save_curr_val_5>
 800294e:	4642      	mov	r2, r8
 8002950:	0021      	movs	r1, r4
 8002952:	2000      	movs	r0, #0
 8002954:	f00c f906 	bl	800eb64 <WpanCrc>
 8002958:	8330      	strh	r0, [r6, #24]
 800295a:	e020      	b.n	800299e <??zcl_reporting_save_curr_val_6>

0800295c <??zcl_reporting_save_curr_val_5>:
 800295c:	7bb0      	ldrb	r0, [r6, #14]
 800295e:	f001 ff9b 	bl	8004898 <ZbZclAttrIsFloat>
 8002962:	2800      	cmp	r0, #0
 8002964:	d00d      	beq.n	8002982 <??zcl_reporting_save_curr_val_7>
 8002966:	aa02      	add	r2, sp, #8
 8002968:	0021      	movs	r1, r4
 800296a:	7bb0      	ldrb	r0, [r6, #14]
 800296c:	f001 fc6f 	bl	800424e <ZbZclParseFloat>
 8002970:	ed86 0b06 	vstr	d0, [r6, #24]
 8002974:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002978:	2800      	cmp	r0, #0
 800297a:	d010      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 800297c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002980:	e014      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002982 <??zcl_reporting_save_curr_val_7>:
 8002982:	aa02      	add	r2, sp, #8
 8002984:	0021      	movs	r1, r4
 8002986:	7bb0      	ldrb	r0, [r6, #14]
 8002988:	f7fe fd04 	bl	8001394 <ZbZclParseInteger>
 800298c:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8002990:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002994:	2800      	cmp	r0, #0
 8002996:	d002      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 8002998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800299c:	e006      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800299e <??zcl_reporting_save_curr_val_6>:
 800299e:	2300      	movs	r3, #0
 80029a0:	464a      	mov	r2, r9
 80029a2:	0021      	movs	r1, r4
 80029a4:	0038      	movs	r0, r7
 80029a6:	f00c f8cf 	bl	800eb48 <zb_heap_free>
 80029aa:	2000      	movs	r0, #0

080029ac <??zcl_reporting_save_curr_val_1>:
 80029ac:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

080029b0 <zcl_reporting_create_new>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	0006      	movs	r6, r0
 80029b6:	000f      	movs	r7, r1
 80029b8:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	89b9      	ldrh	r1, [r7, #12]
 80029c0:	0030      	movs	r0, r6
 80029c2:	f7ff ff30 	bl	8002826 <zcl_reporting_find>
 80029c6:	0005      	movs	r5, r0
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	d001      	beq.n	80029d0 <??zcl_reporting_create_new_0>
 80029cc:	0028      	movs	r0, r5
 80029ce:	e023      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029d0 <??zcl_reporting_create_new_0>:
 80029d0:	2300      	movs	r3, #0
 80029d2:	a212      	add	r2, pc, #72	@ (adr r2, 8002a1c <??DataTable7>)
 80029d4:	2138      	movs	r1, #56	@ 0x38
 80029d6:	4640      	mov	r0, r8
 80029d8:	f00c f8a7 	bl	800eb2a <zb_heap_alloc>
 80029dc:	0004      	movs	r4, r0
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d101      	bne.n	80029e6 <??zcl_reporting_create_new_2>
 80029e2:	2000      	movs	r0, #0
 80029e4:	e018      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029e6 <??zcl_reporting_create_new_2>:
 80029e6:	2538      	movs	r5, #56	@ 0x38
 80029e8:	46b9      	mov	r9, r7
 80029ea:	46a2      	mov	sl, r4
 80029ec:	002a      	movs	r2, r5
 80029ee:	4649      	mov	r1, r9
 80029f0:	4650      	mov	r0, sl
 80029f2:	f00d f984 	bl	800fcfe <__aeabi_memcpy>
 80029f6:	6024      	str	r4, [r4, #0]
 80029f8:	6064      	str	r4, [r4, #4]
 80029fa:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 80029fe:	6020      	str	r0, [r4, #0]
 8002a00:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	6044      	str	r4, [r0, #4]
 8002a08:	6860      	ldr	r0, [r4, #4]
 8002a0a:	6004      	str	r4, [r0, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	0021      	movs	r1, r4
 8002a10:	4640      	mov	r0, r8
 8002a12:	f000 f895 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002a16:	0020      	movs	r0, r4

08002a18 <??zcl_reporting_create_new_1>:
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a1c <??DataTable7>:
 8002a1c:	0000 0000                                   ....

08002a20 <zcl_reporting_delete>:
 8002a20:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002a22:	0004      	movs	r4, r0
 8002a24:	68a5      	ldr	r5, [r4, #8]
 8002a26:	68ae      	ldr	r6, [r5, #8]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f88d 0000 	strb.w	r0, [sp]
 8002a2e:	6860      	ldr	r0, [r4, #4]
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	6048      	str	r0, [r1, #4]
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	6008      	str	r0, [r1, #0]
 8002a3a:	6024      	str	r4, [r4, #0]
 8002a3c:	6064      	str	r4, [r4, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	a26c      	add	r2, pc, #432	@ (adr r2, 8002bf4 <??DataTable9_1>)
 8002a42:	0021      	movs	r1, r4
 8002a44:	0030      	movs	r0, r6
 8002a46:	f00c f87f 	bl	800eb48 <zb_heap_free>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	466a      	mov	r2, sp
 8002a4e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002a52:	0030      	movs	r0, r6
 8002a54:	f00b ff16 	bl	800e884 <ZbNwkGet>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d002      	beq.n	8002a62 <??zcl_reporting_delete_0>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f88d 0000 	strb.w	r0, [sp]

08002a62 <??zcl_reporting_delete_0>:
 8002a62:	f89d 0000 	ldrb.w	r0, [sp]
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d103      	bne.n	8002a72 <??zcl_reporting_delete_1>
 8002a6a:	21c8      	movs	r1, #200	@ 0xc8
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	f7ff fb84 	bl	800217a <zcl_report_kick>

08002a72 <??zcl_reporting_delete_1>:
 8002a72:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002a74 <zcl_cluster_attr_report_delete>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	0005      	movs	r5, r0
 8002a78:	000e      	movs	r6, r1
 8002a7a:	0017      	movs	r7, r2
 8002a7c:	003a      	movs	r2, r7
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	0031      	movs	r1, r6
 8002a82:	b289      	uxth	r1, r1
 8002a84:	0028      	movs	r0, r5
 8002a86:	f7ff fece 	bl	8002826 <zcl_reporting_find>
 8002a8a:	0004      	movs	r4, r0
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	d101      	bne.n	8002a94 <??zcl_cluster_attr_report_delete_0>
 8002a90:	2000      	movs	r0, #0
 8002a92:	e003      	b.n	8002a9c <??zcl_cluster_attr_report_delete_1>

08002a94 <??zcl_cluster_attr_report_delete_0>:
 8002a94:	0020      	movs	r0, r4
 8002a96:	f7ff ffc3 	bl	8002a20 <zcl_reporting_delete>
 8002a9a:	2001      	movs	r0, #1

08002a9c <??zcl_cluster_attr_report_delete_1>:
 8002a9c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002a9e <zcl_reporting_disable>:
 8002a9e:	b538      	push	{r3, r4, r5, lr}
 8002aa0:	0004      	movs	r4, r0
 8002aa2:	68a0      	ldr	r0, [r4, #8]
 8002aa4:	6885      	ldr	r5, [r0, #8]
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f88d 0000 	strb.w	r0, [sp]
 8002aac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ab0:	8460      	strh	r0, [r4, #34]	@ 0x22
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	8420      	strh	r0, [r4, #32]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	466a      	mov	r2, sp
 8002aba:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002abe:	0028      	movs	r0, r5
 8002ac0:	f00b fee0 	bl	800e884 <ZbNwkGet>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d002      	beq.n	8002ace <??zcl_reporting_disable_0>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f88d 0000 	strb.w	r0, [sp]

08002ace <??zcl_reporting_disable_0>:
 8002ace:	f89d 0000 	ldrb.w	r0, [sp]
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d103      	bne.n	8002ade <??zcl_reporting_disable_1>
 8002ad6:	21c8      	movs	r1, #200	@ 0xc8
 8002ad8:	68a0      	ldr	r0, [r4, #8]
 8002ada:	f7ff fb4e 	bl	800217a <zcl_report_kick>

08002ade <??zcl_reporting_disable_1>:
 8002ade:	bd31      	pop	{r0, r4, r5, pc}

08002ae0 <zcl_reporting_check_default_intvl>:
 8002ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae4:	880a      	ldrh	r2, [r1, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00e      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002aea:	880a      	ldrh	r2, [r1, #0]
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d00b      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002af0:	880a      	ldrh	r2, [r1, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d102      	bne.n	8002afc <??zcl_reporting_check_default_intvl_1>
 8002af6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002afa:	800a      	strh	r2, [r1, #0]

08002afc <??zcl_reporting_check_default_intvl_1>:
 8002afc:	880a      	ldrh	r2, [r1, #0]
 8002afe:	8803      	ldrh	r3, [r0, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d201      	bcs.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002b04:	2200      	movs	r2, #0
 8002b06:	8002      	strh	r2, [r0, #0]

08002b08 <??zcl_reporting_check_default_intvl_0>:
 8002b08:	4770      	bx	lr

08002b0a <zcl_reporting_config_attr_defaults>:
 8002b0a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b0c:	0004      	movs	r4, r0
 8002b0e:	000d      	movs	r5, r1
 8002b10:	0016      	movs	r6, r2
 8002b12:	8aa8      	ldrh	r0, [r5, #20]
 8002b14:	f8ad 0002 	strh.w	r0, [sp, #2]
 8002b18:	8ae8      	ldrh	r0, [r5, #22]
 8002b1a:	f8ad 0000 	strh.w	r0, [sp]
 8002b1e:	4669      	mov	r1, sp
 8002b20:	f10d 0002 	add.w	r0, sp, #2
 8002b24:	f7ff ffdc 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 8002b28:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8002b2c:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002b2e:	f8bd 0000 	ldrh.w	r0, [sp]
 8002b32:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002b34:	2200      	movs	r2, #0
 8002b36:	0031      	movs	r1, r6
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f000 f801 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002b3e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002b40 <zcl_reporting_reset_defaults>:
 8002b40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b42:	0004      	movs	r4, r0
 8002b44:	000d      	movs	r5, r1
 8002b46:	0016      	movs	r6, r2
 8002b48:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8002b4a:	8428      	strh	r0, [r5, #32]
 8002b4c:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8002b4e:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b50:	8c28      	ldrh	r0, [r5, #32]
 8002b52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b56:	4288      	cmp	r0, r1
 8002b58:	d106      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b5a:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d103      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b60:	203d      	movs	r0, #61	@ 0x3d
 8002b62:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b64:	2000      	movs	r0, #0
 8002b66:	8428      	strh	r0, [r5, #32]

08002b68 <??zcl_reporting_reset_defaults_0>:
 8002b68:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8002b6c:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8002b70:	0020      	movs	r0, r4
 8002b72:	f00b fe9c 	bl	800e8ae <ZbZclUptime>
 8002b76:	6128      	str	r0, [r5, #16]
 8002b78:	0030      	movs	r0, r6
 8002b7a:	b2c0      	uxtb	r0, r0
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d013      	beq.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002b80:	2301      	movs	r3, #1
 8002b82:	466a      	mov	r2, sp
 8002b84:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002b88:	0020      	movs	r0, r4
 8002b8a:	f00b fe7b 	bl	800e884 <ZbNwkGet>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d002      	beq.n	8002b98 <??zcl_reporting_reset_defaults_2>
 8002b92:	2000      	movs	r0, #0
 8002b94:	f88d 0000 	strb.w	r0, [sp]

08002b98 <??zcl_reporting_reset_defaults_2>:
 8002b98:	f89d 0000 	ldrb.w	r0, [sp]
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d103      	bne.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002ba0:	21c8      	movs	r1, #200	@ 0xc8
 8002ba2:	68a8      	ldr	r0, [r5, #8]
 8002ba4:	f7ff fae9 	bl	800217a <zcl_report_kick>

08002ba8 <??zcl_reporting_reset_defaults_1>:
 8002ba8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002baa <zcl_reporting_epsilon_default>:
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	0004      	movs	r4, r0
 8002bae:	000d      	movs	r5, r1
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	b2c0      	uxtb	r0, r0
 8002bb4:	2838      	cmp	r0, #56	@ 0x38
 8002bb6:	db09      	blt.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bb8:	0028      	movs	r0, r5
 8002bba:	b2c0      	uxtb	r0, r0
 8002bbc:	283b      	cmp	r0, #59	@ 0x3b
 8002bbe:	da05      	bge.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8003794 <??DataTable11>
 8002bc6:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002bca:	e00f      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002bcc <??zcl_reporting_epsilon_default_0>:
 8002bcc:	0028      	movs	r0, r5
 8002bce:	b2c0      	uxtb	r0, r0
 8002bd0:	f7fe fae2 	bl	8001198 <ZbZclAttrIsAnalog>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d005      	beq.n	8002be4 <??zcl_reporting_epsilon_default_2>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8003794 <??DataTable11>
 8002bde:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002be2:	e003      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002be4 <??zcl_reporting_epsilon_default_2>:
 8002be4:	2000      	movs	r0, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002bec <??zcl_reporting_epsilon_default_1>:
 8002bec:	bd31      	pop	{r0, r4, r5, pc}
	...

08002bf0 <??DataTable9>:
 8002bf0:	1ee5 0800                                   ....

08002bf4 <??DataTable9_1>:
 8002bf4:	0000 0000                                   ....

08002bf8 <??DataTable9_2>:
 8002bf8:	0014 2000                                   ... 

08002bfc <??DataTable9_3>:
 8002bfc:	1ed1 0800                                   ....

08002c00 <??DataTable9_4>:
 8002c00:	ee80 0036                                   ..6.

08002c04 <zcl_reporting_epsilon_check>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	0004      	movs	r4, r0
 8002c08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c0c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8002c0e:	4281      	cmp	r1, r0
 8002c10:	d101      	bne.n	8002c16 <??zcl_reporting_epsilon_check_0>
 8002c12:	2001      	movs	r0, #1
 8002c14:	e049      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c16 <??zcl_reporting_epsilon_check_0>:
 8002c16:	8c21      	ldrh	r1, [r4, #32]
 8002c18:	4281      	cmp	r1, r0
 8002c1a:	d104      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c1c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d101      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c22:	2001      	movs	r0, #1
 8002c24:	e041      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c26 <??zcl_reporting_epsilon_check_2>:
 8002c26:	7ba0      	ldrb	r0, [r4, #14]
 8002c28:	2838      	cmp	r0, #56	@ 0x38
 8002c2a:	db1d      	blt.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c2c:	7ba0      	ldrb	r0, [r4, #14]
 8002c2e:	283b      	cmp	r0, #59	@ 0x3b
 8002c30:	da1a      	bge.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c32:	8c20      	ldrh	r0, [r4, #32]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d108      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c38:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f002 fafe 	bl	8005240 <__aeabi_cdcmpeq>
 8002c44:	d101      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c46:	2000      	movs	r0, #0
 8002c48:	e02f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c4a <??zcl_reporting_epsilon_check_4>:
 8002c4a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2300      	movs	r3, #0
 8002c52:	f002 faf5 	bl	8005240 <__aeabi_cdcmpeq>
 8002c56:	d205      	bcs.n	8002c64 <??zcl_reporting_epsilon_check_5>
 8002c58:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c5c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002c60:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002c64 <??zcl_reporting_epsilon_check_5>:
 8002c64:	2001      	movs	r0, #1
 8002c66:	e020      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c68 <??zcl_reporting_epsilon_check_3>:
 8002c68:	7ba0      	ldrb	r0, [r4, #14]
 8002c6a:	f7fe fa95 	bl	8001198 <ZbZclAttrIsAnalog>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d01a      	beq.n	8002ca8 <??zcl_reporting_epsilon_check_6>
 8002c72:	8c20      	ldrh	r0, [r4, #32]
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d108      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c78:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f002 fade 	bl	8005240 <__aeabi_cdcmpeq>
 8002c84:	d101      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c86:	2000      	movs	r0, #0
 8002c88:	e00f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c8a <??zcl_reporting_epsilon_check_7>:
 8002c8a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f002 fad5 	bl	8005240 <__aeabi_cdcmpeq>
 8002c96:	d205      	bcs.n	8002ca4 <??zcl_reporting_epsilon_check_8>
 8002c98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c9c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002ca0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002ca4 <??zcl_reporting_epsilon_check_8>:
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002ca8 <??zcl_reporting_epsilon_check_6>:
 8002ca8:	2001      	movs	r0, #1

08002caa <??zcl_reporting_epsilon_check_1>:
 8002caa:	bd10      	pop	{r4, pc}

08002cac <zcl_reporting_create_default_reports>:
 8002cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb0:	b090      	sub	sp, #64	@ 0x40
 8002cb2:	0005      	movs	r5, r0
 8002cb4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002cb6:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002cba:	4288      	cmp	r0, r1
 8002cbc:	d001      	beq.n	8002cc2 <??zcl_reporting_create_default_reports_0>
 8002cbe:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8002cc0:	e000      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002cc2 <??zcl_reporting_create_default_reports_0>:
 8002cc2:	2400      	movs	r4, #0

08002cc4 <??zcl_reporting_create_default_reports_1>:
 8002cc4:	2c00      	cmp	r4, #0
 8002cc6:	d054      	beq.n	8002d72 <??zcl_reporting_create_default_reports_2>
 8002cc8:	0026      	movs	r6, r4
 8002cca:	68b0      	ldr	r0, [r6, #8]
 8002ccc:	7900      	ldrb	r0, [r0, #4]
 8002cce:	0780      	lsls	r0, r0, #30
 8002cd0:	d546      	bpl.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002cd2 <??zcl_reporting_create_default_reports_4>:
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	68b0      	ldr	r0, [r6, #8]
 8002cd6:	8801      	ldrh	r1, [r0, #0]
 8002cd8:	0028      	movs	r0, r5
 8002cda:	f7ff fda4 	bl	8002826 <zcl_reporting_find>
 8002cde:	9001      	str	r0, [sp, #4]
 8002ce0:	9801      	ldr	r0, [sp, #4]
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d13c      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002ce6 <??zcl_reporting_create_default_reports_5>:
 8002ce6:	2738      	movs	r7, #56	@ 0x38
 8002ce8:	f05f 0800 	movs.w	r8, #0
 8002cec:	f10d 0908 	add.w	r9, sp, #8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	0039      	movs	r1, r7
 8002cf4:	4648      	mov	r0, r9
 8002cf6:	f001 fddc 	bl	80048b2 <__aeabi_memset>
 8002cfa:	68b0      	ldr	r0, [r6, #8]
 8002cfc:	8800      	ldrh	r0, [r0, #0]
 8002cfe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8002d02:	9504      	str	r5, [sp, #16]
 8002d04:	68b0      	ldr	r0, [r6, #8]
 8002d06:	7880      	ldrb	r0, [r0, #2]
 8002d08:	f88d 0016 	strb.w	r0, [sp, #22]
 8002d0c:	68b0      	ldr	r0, [r6, #8]
 8002d0e:	7881      	ldrb	r1, [r0, #2]
 8002d10:	a802      	add	r0, sp, #8
 8002d12:	f7ff ff4a 	bl	8002baa <zcl_reporting_epsilon_default>
 8002d16:	f05f 0908 	movs.w	r9, #8
 8002d1a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8002d1e:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8002d22:	464a      	mov	r2, r9
 8002d24:	4651      	mov	r1, sl
 8002d26:	4658      	mov	r0, fp
 8002d28:	f00c ffe9 	bl	800fcfe <__aeabi_memcpy>
 8002d2c:	aa02      	add	r2, sp, #8
 8002d2e:	0031      	movs	r1, r6
 8002d30:	68a8      	ldr	r0, [r5, #8]
 8002d32:	f7ff feea 	bl	8002b0a <zcl_reporting_config_attr_defaults>
 8002d36:	a902      	add	r1, sp, #8
 8002d38:	0028      	movs	r0, r5
 8002d3a:	f7ff fdc6 	bl	80028ca <zcl_reporting_save_curr_val>
 8002d3e:	f88d 0000 	strb.w	r0, [sp]
 8002d42:	f89d 0000 	ldrb.w	r0, [sp]
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d002      	beq.n	8002d50 <??zcl_reporting_create_default_reports_6>
 8002d4a:	f89d 0000 	ldrb.w	r0, [sp]
 8002d4e:	e011      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d50 <??zcl_reporting_create_default_reports_6>:
 8002d50:	a902      	add	r1, sp, #8
 8002d52:	0028      	movs	r0, r5
 8002d54:	f7ff fe2c 	bl	80029b0 <zcl_reporting_create_new>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d101      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>
 8002d5c:	2089      	movs	r0, #137	@ 0x89
 8002d5e:	e009      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d60 <??zcl_reporting_create_default_reports_3>:
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002d66:	4288      	cmp	r0, r1
 8002d68:	d001      	beq.n	8002d6e <??zcl_reporting_create_default_reports_8>
 8002d6a:	6824      	ldr	r4, [r4, #0]
 8002d6c:	e7aa      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d6e <??zcl_reporting_create_default_reports_8>:
 8002d6e:	2400      	movs	r4, #0
 8002d70:	e7a8      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d72 <??zcl_reporting_create_default_reports_2>:
 8002d72:	2000      	movs	r0, #0

08002d74 <??zcl_reporting_create_default_reports_7>:
 8002d74:	b011      	add	sp, #68	@ 0x44
 8002d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d7a <ZbZclHandleConfigReport>:
 8002d7a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7e:	b0c8      	sub	sp, #288	@ 0x120
 8002d80:	0004      	movs	r4, r0
 8002d82:	0015      	movs	r5, r2
 8002d84:	68a0      	ldr	r0, [r4, #8]
 8002d86:	9001      	str	r0, [sp, #4]
 8002d88:	2700      	movs	r7, #0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f88d 0003 	strb.w	r0, [sp, #3]
 8002d90:	2600      	movs	r6, #0
 8002d92:	2000      	movs	r0, #0
 8002d94:	f88d 0002 	strb.w	r0, [sp, #2]
 8002d98:	f05f 0808 	movs.w	r8, #8
 8002d9c:	f05f 0900 	movs.w	r9, #0
 8002da0:	f10d 0a0c 	add.w	sl, sp, #12
 8002da4:	464a      	mov	r2, r9
 8002da6:	4641      	mov	r1, r8
 8002da8:	4650      	mov	r0, sl
 8002daa:	f001 fd82 	bl	80048b2 <__aeabi_memset>
 8002dae:	2000      	movs	r0, #0
 8002db0:	f88d 000c 	strb.w	r0, [sp, #12]
 8002db4:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002db6:	7840      	ldrb	r0, [r0, #1]
 8002db8:	f88d 000d 	strb.w	r0, [sp, #13]
 8002dbc:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dbe:	7880      	ldrb	r0, [r0, #2]
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d003      	beq.n	8002dcc <??ZbZclHandleConfigReport_0>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f88d 000e 	strb.w	r0, [sp, #14]
 8002dca:	e002      	b.n	8002dd2 <??ZbZclHandleConfigReport_1>

08002dcc <??ZbZclHandleConfigReport_0>:
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f88d 000e 	strb.w	r0, [sp, #14]

08002dd2 <??ZbZclHandleConfigReport_1>:
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f88d 000f 	strb.w	r0, [sp, #15]
 8002dd8:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dda:	8880      	ldrh	r0, [r0, #4]
 8002ddc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8002de0:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002de2:	7980      	ldrb	r0, [r0, #6]
 8002de4:	f88d 0012 	strb.w	r0, [sp, #18]
 8002de8:	2007      	movs	r0, #7
 8002dea:	f88d 0013 	strb.w	r0, [sp, #19]
 8002dee:	2205      	movs	r2, #5
 8002df0:	a916      	add	r1, sp, #88	@ 0x58
 8002df2:	a803      	add	r0, sp, #12
 8002df4:	f001 f804 	bl	8003e00 <ZbZclAppendHeader>
 8002df8:	9005      	str	r0, [sp, #20]
 8002dfa:	9805      	ldr	r0, [sp, #20]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d506      	bpl.n	8002e0e <??ZbZclHandleConfigReport_2>
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e04:	0029      	movs	r1, r5
 8002e06:	0020      	movs	r0, r4
 8002e08:	f00b fde8 	bl	800e9dc <ZbZclSendDefaultResponse>
 8002e0c:	e236      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e0e <??ZbZclHandleConfigReport_2>:
 8002e0e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e10:	4286      	cmp	r6, r0
 8002e12:	f080 81b4 	bcs.w	800317e <??ZbZclHandleConfigReport_4>
 8002e16:	f05f 0900 	movs.w	r9, #0
 8002e1a:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8002e1e:	f05f 0a00 	movs.w	sl, #0
 8002e22:	f10d 0b18 	add.w	fp, sp, #24
 8002e26:	4652      	mov	r2, sl
 8002e28:	4641      	mov	r1, r8
 8002e2a:	4658      	mov	r0, fp
 8002e2c:	f001 fd41 	bl	80048b2 <__aeabi_memset>
 8002e30:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e32:	1cf1      	adds	r1, r6, #3
 8002e34:	4288      	cmp	r0, r1
 8002e36:	d206      	bcs.n	8002e46 <??ZbZclHandleConfigReport_5>
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e3c:	0029      	movs	r1, r5
 8002e3e:	0020      	movs	r0, r4
 8002e40:	f00b fdcc 	bl	800e9dc <ZbZclSendDefaultResponse>
 8002e44:	e21a      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e46 <??ZbZclHandleConfigReport_5>:
 8002e46:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e48:	5d80      	ldrb	r0, [r0, r6]
 8002e4a:	f88d 0001 	strb.w	r0, [sp, #1]
 8002e4e:	1c76      	adds	r6, r6, #1
 8002e50:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e52:	4430      	add	r0, r6
 8002e54:	f001 f81c 	bl	8003e90 <pletoh16>
 8002e58:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8002e5c:	1cb6      	adds	r6, r6, #2
 8002e5e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8159 	bne.w	800311a <??ZbZclHandleConfigReport_6>
 8002e68:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e6a:	1cb1      	adds	r1, r6, #2
 8002e6c:	4288      	cmp	r0, r1
 8002e6e:	d206      	bcs.n	8002e7e <??ZbZclHandleConfigReport_7>
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e74:	0029      	movs	r1, r5
 8002e76:	0020      	movs	r0, r4
 8002e78:	f00b fdb0 	bl	800e9dc <ZbZclSendDefaultResponse>
 8002e7c:	e1fe      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e7e <??ZbZclHandleConfigReport_7>:
 8002e7e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e80:	1c71      	adds	r1, r6, #1
 8002e82:	4288      	cmp	r0, r1
 8002e84:	f0c0 808f 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e88 <??ZbZclHandleConfigReport_9>:
 8002e88:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e8a:	5d80      	ldrb	r0, [r0, r6]
 8002e8c:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8002e90:	1c76      	adds	r6, r6, #1
 8002e92:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e94:	1cb1      	adds	r1, r6, #2
 8002e96:	4288      	cmp	r0, r1
 8002e98:	f0c0 8085 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e9c <??ZbZclHandleConfigReport_10>:
 8002e9c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e9e:	4430      	add	r0, r6
 8002ea0:	f000 fff6 	bl	8003e90 <pletoh16>
 8002ea4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8002ea8:	1cb6      	adds	r6, r6, #2
 8002eaa:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002eac:	1cb1      	adds	r1, r6, #2
 8002eae:	4288      	cmp	r0, r1
 8002eb0:	d379      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002eb2 <??ZbZclHandleConfigReport_11>:
 8002eb2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002eb4:	4430      	add	r0, r6
 8002eb6:	f000 ffeb 	bl	8003e90 <pletoh16>
 8002eba:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8002ebe:	1cb6      	adds	r6, r6, #2
 8002ec0:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002ec2:	1c71      	adds	r1, r6, #1
 8002ec4:	4288      	cmp	r0, r1
 8002ec6:	d36e      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002ec8 <??ZbZclHandleConfigReport_12>:
 8002ec8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ecc:	2848      	cmp	r0, #72	@ 0x48
 8002ece:	d00b      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ed4:	284c      	cmp	r0, #76	@ 0x4c
 8002ed6:	d007      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002edc:	2850      	cmp	r0, #80	@ 0x50
 8002ede:	d003      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ee0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ee4:	2851      	cmp	r0, #81	@ 0x51
 8002ee6:	d103      	bne.n	8002ef0 <??ZbZclHandleConfigReport_14>

08002ee8 <??ZbZclHandleConfigReport_13>:
 8002ee8:	208c      	movs	r0, #140	@ 0x8c
 8002eea:	f88d 0000 	strb.w	r0, [sp]
 8002eee:	e12e      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002ef0 <??ZbZclHandleConfigReport_14>:
 8002ef0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ef4:	2838      	cmp	r0, #56	@ 0x38
 8002ef6:	db29      	blt.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002ef8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002efc:	283b      	cmp	r0, #59	@ 0x3b
 8002efe:	da25      	bge.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002f00:	2300      	movs	r3, #0
 8002f02:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f04:	1b92      	subs	r2, r2, r6
 8002f06:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f08:	eb00 0106 	add.w	r1, r0, r6
 8002f0c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f10:	f7fe f891 	bl	8001036 <ZbZclAttrParseLength>
 8002f14:	9002      	str	r0, [sp, #8]
 8002f16:	9802      	ldr	r0, [sp, #8]
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d503      	bpl.n	8002f24 <??ZbZclHandleConfigReport_17>
 8002f1c:	2085      	movs	r0, #133	@ 0x85
 8002f1e:	f88d 0000 	strb.w	r0, [sp]
 8002f22:	e114      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f24 <??ZbZclHandleConfigReport_17>:
 8002f24:	466a      	mov	r2, sp
 8002f26:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f28:	eb00 0106 	add.w	r1, r0, r6
 8002f2c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f30:	f001 f98d 	bl	800424e <ZbZclParseFloat>
 8002f34:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8002f38:	f89d 0000 	ldrb.w	r0, [sp]
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f040 8106 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f42 <??ZbZclHandleConfigReport_18>:
 8002f42:	9802      	ldr	r0, [sp, #8]
 8002f44:	1986      	adds	r6, r0, r6
 8002f46:	2001      	movs	r0, #1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	e02c      	b.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002f4c <??ZbZclHandleConfigReport_16>:
 8002f4c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f50:	f7fe f922 	bl	8001198 <ZbZclAttrIsAnalog>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d026      	beq.n	8002fa6 <??ZbZclHandleConfigReport_19>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f5c:	1b92      	subs	r2, r2, r6
 8002f5e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f60:	eb00 0106 	add.w	r1, r0, r6
 8002f64:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f68:	f7fe f865 	bl	8001036 <ZbZclAttrParseLength>
 8002f6c:	9002      	str	r0, [sp, #8]
 8002f6e:	9802      	ldr	r0, [sp, #8]
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d503      	bpl.n	8002f7c <??ZbZclHandleConfigReport_20>
 8002f74:	2085      	movs	r0, #133	@ 0x85
 8002f76:	f88d 0000 	strb.w	r0, [sp]
 8002f7a:	e0e8      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f7c <??ZbZclHandleConfigReport_20>:
 8002f7c:	466a      	mov	r2, sp
 8002f7e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f80:	eb00 0106 	add.w	r1, r0, r6
 8002f84:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f88:	f7fe fa04 	bl	8001394 <ZbZclParseInteger>
 8002f8c:	f001 feca 	bl	8004d24 <__aeabi_l2d>
 8002f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002f94:	f89d 0000 	ldrb.w	r0, [sp]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f040 80d8 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f9e <??ZbZclHandleConfigReport_21>:
 8002f9e:	9802      	ldr	r0, [sp, #8]
 8002fa0:	1986      	adds	r6, r0, r6
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	4681      	mov	r9, r0

08002fa6 <??ZbZclHandleConfigReport_19>:
 8002fa6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7fd f917 	bl	80001de <ZbZclAttrFind>
 8002fb0:	4682      	mov	sl, r0
 8002fb2:	f1ba 0f00 	cmp.w	sl, #0
 8002fb6:	d103      	bne.n	8002fc0 <??ZbZclHandleConfigReport_22>
 8002fb8:	2086      	movs	r0, #134	@ 0x86
 8002fba:	f88d 0000 	strb.w	r0, [sp]
 8002fbe:	e0c6      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fc0 <??ZbZclHandleConfigReport_22>:
 8002fc0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fc4:	8880      	ldrh	r0, [r0, #4]
 8002fc6:	0400      	lsls	r0, r0, #16
 8002fc8:	d503      	bpl.n	8002fd2 <??ZbZclHandleConfigReport_23>
 8002fca:	2086      	movs	r0, #134	@ 0x86
 8002fcc:	f88d 0000 	strb.w	r0, [sp]
 8002fd0:	e0bd      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fd2 <??ZbZclHandleConfigReport_23>:
 8002fd2:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fd6:	7900      	ldrb	r0, [r0, #4]
 8002fd8:	0780      	lsls	r0, r0, #30
 8002fda:	d403      	bmi.n	8002fe4 <??ZbZclHandleConfigReport_24>
 8002fdc:	208c      	movs	r0, #140	@ 0x8c
 8002fde:	f88d 0000 	strb.w	r0, [sp]
 8002fe2:	e0b4      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fe4 <??ZbZclHandleConfigReport_24>:
 8002fe4:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8002fe8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8002fec:	4558      	cmp	r0, fp
 8002fee:	d101      	bne.n	8002ff4 <??ZbZclHandleConfigReport_25>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4681      	mov	r9, r0

08002ff4 <??ZbZclHandleConfigReport_25>:
 8002ff4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ff8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	f7ff fc12 	bl	8002826 <zcl_reporting_find>
 8003002:	4680      	mov	r8, r0
 8003004:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003008:	4558      	cmp	r0, fp
 800300a:	d11b      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 800300c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003010:	2800      	cmp	r0, #0
 8003012:	d117      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 8003014:	2000      	movs	r0, #0
 8003016:	4681      	mov	r9, r0
 8003018:	f1b8 0f00 	cmp.w	r8, #0
 800301c:	d00d      	beq.n	800303a <??ZbZclHandleConfigReport_27>
 800301e:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 8003022:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003026:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 800302a:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 800302e:	2200      	movs	r2, #0
 8003030:	a906      	add	r1, sp, #24
 8003032:	9801      	ldr	r0, [sp, #4]
 8003034:	f7ff fd84 	bl	8002b40 <zcl_reporting_reset_defaults>
 8003038:	e004      	b.n	8003044 <??ZbZclHandleConfigReport_26>

0800303a <??ZbZclHandleConfigReport_27>:
 800303a:	aa06      	add	r2, sp, #24
 800303c:	4651      	mov	r1, sl
 800303e:	9801      	ldr	r0, [sp, #4]
 8003040:	f7ff fd63 	bl	8002b0a <zcl_reporting_config_attr_defaults>

08003044 <??ZbZclHandleConfigReport_26>:
 8003044:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003048:	f8da 1008 	ldr.w	r1, [sl, #8]
 800304c:	7889      	ldrb	r1, [r1, #2]
 800304e:	4288      	cmp	r0, r1
 8003050:	d003      	beq.n	800305a <??ZbZclHandleConfigReport_28>
 8003052:	208d      	movs	r0, #141	@ 0x8d
 8003054:	f88d 0000 	strb.w	r0, [sp]
 8003058:	e079      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800305a <??ZbZclHandleConfigReport_28>:
 800305a:	f1b8 0f00 	cmp.w	r8, #0
 800305e:	d021      	beq.n	80030a4 <??ZbZclHandleConfigReport_29>
 8003060:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003064:	f8a8 0020 	strh.w	r0, [r8, #32]
 8003068:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 800306c:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8003070:	4648      	mov	r0, r9
 8003072:	b2c0      	uxtb	r0, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	d00c      	beq.n	8003092 <??ZbZclHandleConfigReport_30>
 8003078:	a806      	add	r0, sp, #24
 800307a:	f7ff fdc3 	bl	8002c04 <zcl_reporting_epsilon_check>
 800307e:	2800      	cmp	r0, #0
 8003080:	d103      	bne.n	800308a <??ZbZclHandleConfigReport_31>
 8003082:	2085      	movs	r0, #133	@ 0x85
 8003084:	f88d 0000 	strb.w	r0, [sp]
 8003088:	e061      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800308a <??ZbZclHandleConfigReport_31>:
 800308a:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 800308e:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

08003092 <??ZbZclHandleConfigReport_30>:
 8003092:	9801      	ldr	r0, [sp, #4]
 8003094:	f00b fc0b 	bl	800e8ae <ZbZclUptime>
 8003098:	f8c8 0010 	str.w	r0, [r8, #16]
 800309c:	2001      	movs	r0, #1
 800309e:	f88d 0002 	strb.w	r0, [sp, #2]
 80030a2:	e6b4      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

080030a4 <??ZbZclHandleConfigReport_29>:
 80030a4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80030a8:	4558      	cmp	r0, fp
 80030aa:	f43f aeb0 	beq.w	8002e0e <??ZbZclHandleConfigReport_2>

080030ae <??ZbZclHandleConfigReport_32>:
 80030ae:	9408      	str	r4, [sp, #32]
 80030b0:	4648      	mov	r0, r9
 80030b2:	b2c0      	uxtb	r0, r0
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d008      	beq.n	80030ca <??ZbZclHandleConfigReport_33>
 80030b8:	a806      	add	r0, sp, #24
 80030ba:	f7ff fda3 	bl	8002c04 <zcl_reporting_epsilon_check>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d108      	bne.n	80030d4 <??ZbZclHandleConfigReport_34>
 80030c2:	2085      	movs	r0, #133	@ 0x85
 80030c4:	f88d 0000 	strb.w	r0, [sp]
 80030c8:	e041      	b.n	800314e <??ZbZclHandleConfigReport_15>

080030ca <??ZbZclHandleConfigReport_33>:
 80030ca:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 80030ce:	a806      	add	r0, sp, #24
 80030d0:	f7ff fd6b 	bl	8002baa <zcl_reporting_epsilon_default>

080030d4 <??ZbZclHandleConfigReport_34>:
 80030d4:	2008      	movs	r0, #8
 80030d6:	9015      	str	r0, [sp, #84]	@ 0x54
 80030d8:	a810      	add	r0, sp, #64	@ 0x40
 80030da:	9014      	str	r0, [sp, #80]	@ 0x50
 80030dc:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80030e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80030e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80030e4:	4658      	mov	r0, fp
 80030e6:	f00c fe0a 	bl	800fcfe <__aeabi_memcpy>
 80030ea:	a906      	add	r1, sp, #24
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7ff fbec 	bl	80028ca <zcl_reporting_save_curr_val>
 80030f2:	f88d 0000 	strb.w	r0, [sp]
 80030f6:	f89d 0000 	ldrb.w	r0, [sp]
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d127      	bne.n	800314e <??ZbZclHandleConfigReport_15>

080030fe <??ZbZclHandleConfigReport_35>:
 80030fe:	a906      	add	r1, sp, #24
 8003100:	0020      	movs	r0, r4
 8003102:	f7ff fc55 	bl	80029b0 <zcl_reporting_create_new>
 8003106:	2800      	cmp	r0, #0
 8003108:	d103      	bne.n	8003112 <??ZbZclHandleConfigReport_36>
 800310a:	2189      	movs	r1, #137	@ 0x89
 800310c:	f88d 1000 	strb.w	r1, [sp]
 8003110:	e01d      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003112 <??ZbZclHandleConfigReport_36>:
 8003112:	2101      	movs	r1, #1
 8003114:	f88d 1002 	strb.w	r1, [sp, #2]
 8003118:	e679      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800311a <??ZbZclHandleConfigReport_6>:
 800311a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800311e:	2801      	cmp	r0, #1
 8003120:	d10e      	bne.n	8003140 <??ZbZclHandleConfigReport_37>
 8003122:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003124:	1cb1      	adds	r1, r6, #2
 8003126:	4288      	cmp	r0, r1
 8003128:	d206      	bcs.n	8003138 <??ZbZclHandleConfigReport_38>
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800312e:	0029      	movs	r1, r5
 8003130:	0020      	movs	r0, r4
 8003132:	f00b fc53 	bl	800e9dc <ZbZclSendDefaultResponse>
 8003136:	e0a1      	b.n	800327c <??ZbZclHandleConfigReport_3>

08003138 <??ZbZclHandleConfigReport_38>:
 8003138:	208c      	movs	r0, #140	@ 0x8c
 800313a:	f88d 0000 	strb.w	r0, [sp]
 800313e:	e006      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003140 <??ZbZclHandleConfigReport_37>:
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003144:	0029      	movs	r1, r5
 8003146:	0020      	movs	r0, r4
 8003148:	f00b fc48 	bl	800e9dc <ZbZclSendDefaultResponse>
 800314c:	e096      	b.n	800327c <??ZbZclHandleConfigReport_3>

0800314e <??ZbZclHandleConfigReport_15>:
 800314e:	f89d 0000 	ldrb.w	r0, [sp]
 8003152:	f88d 0003 	strb.w	r0, [sp, #3]
 8003156:	1d38      	adds	r0, r7, #4
 8003158:	2837      	cmp	r0, #55	@ 0x37
 800315a:	d210      	bcs.n	800317e <??ZbZclHandleConfigReport_4>

0800315c <??ZbZclHandleConfigReport_39>:
 800315c:	a83a      	add	r0, sp, #232	@ 0xe8
 800315e:	f89d 1000 	ldrb.w	r1, [sp]
 8003162:	55c1      	strb	r1, [r0, r7]
 8003164:	1c7f      	adds	r7, r7, #1
 8003166:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800316a:	55c1      	strb	r1, [r0, r7]
 800316c:	1c7f      	adds	r7, r7, #1
 800316e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003172:	a83a      	add	r0, sp, #232	@ 0xe8
 8003174:	4438      	add	r0, r7
 8003176:	f000 fed7 	bl	8003f28 <putle16>
 800317a:	1cbf      	adds	r7, r7, #2
 800317c:	e647      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800317e <??ZbZclHandleConfigReport_4>:
 800317e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003182:	2800      	cmp	r0, #0
 8003184:	d105      	bne.n	8003192 <??ZbZclHandleConfigReport_40>
 8003186:	2000      	movs	r0, #0
 8003188:	2100      	movs	r1, #0
 800318a:	aa3a      	add	r2, sp, #232	@ 0xe8
 800318c:	5411      	strb	r1, [r2, r0]
 800318e:	1c40      	adds	r0, r0, #1
 8003190:	0007      	movs	r7, r0

08003192 <??ZbZclHandleConfigReport_40>:
 8003192:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003196:	2800      	cmp	r0, #0
 8003198:	d127      	bne.n	80031ea <??ZbZclHandleConfigReport_41>
 800319a:	f05f 0920 	movs.w	r9, #32
 800319e:	f05f 0800 	movs.w	r8, #0
 80031a2:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80031a6:	4642      	mov	r2, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	4650      	mov	r0, sl
 80031ac:	f001 fb81 	bl	80048b2 <__aeabi_memset>
 80031b0:	9801      	ldr	r0, [sp, #4]
 80031b2:	f00b f863 	bl	800e27c <ZbExtendedAddress>
 80031b6:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80031ba:	8868      	ldrh	r0, [r5, #2]
 80031bc:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 80031c0:	89a0      	ldrh	r0, [r4, #12]
 80031c2:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 80031c6:	2003      	movs	r0, #3
 80031c8:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80031cc:	8a68      	ldrh	r0, [r5, #18]
 80031ce:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 80031d2:	8ae8      	ldrh	r0, [r5, #22]
 80031d4:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 80031d8:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80031dc:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 80031e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80031e2:	a918      	add	r1, sp, #96	@ 0x60
 80031e4:	9801      	ldr	r0, [sp, #4]
 80031e6:	f00b f9b0 	bl	800e54a <ZbApsmeBindReq>

080031ea <??ZbZclHandleConfigReport_41>:
 80031ea:	2200      	movs	r2, #0
 80031ec:	a924      	add	r1, sp, #144	@ 0x90
 80031ee:	0020      	movs	r0, r4
 80031f0:	f000 fd57 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 80031f4:	a824      	add	r0, sp, #144	@ 0x90
 80031f6:	f115 0110 	adds.w	r1, r5, #16
 80031fa:	2210      	movs	r2, #16
 80031fc:	f00c fd7f 	bl	800fcfe <__aeabi_memcpy>
 8003200:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003204:	f000 fce5 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 8003208:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 800320c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8003210:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8003214:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8003218:	2001      	movs	r0, #1
 800321a:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 800321e:	2000      	movs	r0, #0
 8003220:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 8003224:	a816      	add	r0, sp, #88	@ 0x58
 8003226:	9020      	str	r0, [sp, #128]	@ 0x80
 8003228:	a820      	add	r0, sp, #128	@ 0x80
 800322a:	9905      	ldr	r1, [sp, #20]
 800322c:	6041      	str	r1, [r0, #4]
 800322e:	a93a      	add	r1, sp, #232	@ 0xe8
 8003230:	6081      	str	r1, [r0, #8]
 8003232:	60c7      	str	r7, [r0, #12]
 8003234:	a820      	add	r0, sp, #128	@ 0x80
 8003236:	902a      	str	r0, [sp, #168]	@ 0xa8
 8003238:	2002      	movs	r0, #2
 800323a:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 800323e:	2300      	movs	r3, #0
 8003240:	2200      	movs	r2, #0
 8003242:	a924      	add	r1, sp, #144	@ 0x90
 8003244:	9801      	ldr	r0, [sp, #4]
 8003246:	f00b f8a5 	bl	800e394 <ZbApsdeDataReqCallback>
 800324a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800324e:	2800      	cmp	r0, #0
 8003250:	d014      	beq.n	800327c <??ZbZclHandleConfigReport_3>
 8003252:	2301      	movs	r3, #1
 8003254:	f10d 0201 	add.w	r2, sp, #1
 8003258:	f240 410c 	movw	r1, #1036	@ 0x40c
 800325c:	9801      	ldr	r0, [sp, #4]
 800325e:	f00b fb11 	bl	800e884 <ZbNwkGet>
 8003262:	2800      	cmp	r0, #0
 8003264:	d002      	beq.n	800326c <??ZbZclHandleConfigReport_43>
 8003266:	2000      	movs	r0, #0
 8003268:	f88d 0001 	strb.w	r0, [sp, #1]

0800326c <??ZbZclHandleConfigReport_43>:
 800326c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003270:	2800      	cmp	r0, #0
 8003272:	d103      	bne.n	800327c <??ZbZclHandleConfigReport_3>
 8003274:	21c8      	movs	r1, #200	@ 0xc8
 8003276:	0020      	movs	r0, r4
 8003278:	f7fe ff7f 	bl	800217a <zcl_report_kick>

0800327c <??ZbZclHandleConfigReport_3>:
 800327c:	b049      	add	sp, #292	@ 0x124
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003282 <ZbZclHandleReadReport>:
 8003282:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	b09a      	sub	sp, #104	@ 0x68
 8003288:	4680      	mov	r8, r0
 800328a:	4691      	mov	r9, r2
 800328c:	f05f 0a00 	movs.w	sl, #0
 8003290:	2300      	movs	r3, #0
 8003292:	a28d      	add	r2, pc, #564	@ (adr r2, 80034c8 <??DataTable10>)
 8003294:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8003298:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800329c:	f00b fc45 	bl	800eb2a <zb_heap_alloc>
 80032a0:	0007      	movs	r7, r0
 80032a2:	2f00      	cmp	r7, #0
 80032a4:	d106      	bne.n	80032b4 <??ZbZclHandleReadReport_0>
 80032a6:	2389      	movs	r3, #137	@ 0x89
 80032a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80032aa:	4649      	mov	r1, r9
 80032ac:	4640      	mov	r0, r8
 80032ae:	f00b fb95 	bl	800e9dc <ZbZclSendDefaultResponse>
 80032b2:	e105      	b.n	80034c0 <??ZbZclHandleReadReport_1>

080032b4 <??ZbZclHandleReadReport_0>:
 80032b4:	2408      	movs	r4, #8
 80032b6:	2500      	movs	r5, #0
 80032b8:	ae01      	add	r6, sp, #4
 80032ba:	002a      	movs	r2, r5
 80032bc:	0021      	movs	r1, r4
 80032be:	0030      	movs	r0, r6
 80032c0:	f001 faf7 	bl	80048b2 <__aeabi_memset>
 80032c4:	2000      	movs	r0, #0
 80032c6:	f88d 0004 	strb.w	r0, [sp, #4]
 80032ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032cc:	7840      	ldrb	r0, [r0, #1]
 80032ce:	f88d 0005 	strb.w	r0, [sp, #5]
 80032d2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032d4:	7880      	ldrb	r0, [r0, #2]
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d103      	bne.n	80032e2 <??ZbZclHandleReadReport_2>
 80032da:	2001      	movs	r0, #1
 80032dc:	f88d 0006 	strb.w	r0, [sp, #6]
 80032e0:	e002      	b.n	80032e8 <??ZbZclHandleReadReport_3>

080032e2 <??ZbZclHandleReadReport_2>:
 80032e2:	2000      	movs	r0, #0
 80032e4:	f88d 0006 	strb.w	r0, [sp, #6]

080032e8 <??ZbZclHandleReadReport_3>:
 80032e8:	2001      	movs	r0, #1
 80032ea:	f88d 0007 	strb.w	r0, [sp, #7]
 80032ee:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f0:	8880      	ldrh	r0, [r0, #4]
 80032f2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80032f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f8:	7980      	ldrb	r0, [r0, #6]
 80032fa:	f88d 000a 	strb.w	r0, [sp, #10]
 80032fe:	2009      	movs	r0, #9
 8003300:	f88d 000b 	strb.w	r0, [sp, #11]
 8003304:	2205      	movs	r2, #5
 8003306:	0039      	movs	r1, r7
 8003308:	a801      	add	r0, sp, #4
 800330a:	f000 fd79 	bl	8003e00 <ZbZclAppendHeader>
 800330e:	0004      	movs	r4, r0
 8003310:	2c00      	cmp	r4, #0
 8003312:	d506      	bpl.n	8003322 <??ZbZclHandleReadReport_4>
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003318:	4649      	mov	r1, r9
 800331a:	4640      	mov	r0, r8
 800331c:	f00b fb5e 	bl	800e9dc <ZbZclSendDefaultResponse>
 8003320:	e0ce      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003322 <??ZbZclHandleReadReport_4>:
 8003322:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003326:	4582      	cmp	sl, r0
 8003328:	f080 80a1 	bcs.w	800346e <??ZbZclHandleReadReport_5>
 800332c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003330:	f11a 0103 	adds.w	r1, sl, #3
 8003334:	4288      	cmp	r0, r1
 8003336:	d206      	bcs.n	8003346 <??ZbZclHandleReadReport_6>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800333c:	4649      	mov	r1, r9
 800333e:	4640      	mov	r0, r8
 8003340:	f00b fb4c 	bl	800e9dc <ZbZclSendDefaultResponse>
 8003344:	e0bc      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003346 <??ZbZclHandleReadReport_6>:
 8003346:	4650      	mov	r0, sl
 8003348:	f110 0a01 	adds.w	sl, r0, #1
 800334c:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 8003350:	5c08      	ldrb	r0, [r1, r0]
 8003352:	2800      	cmp	r0, #0
 8003354:	d003      	beq.n	800335e <??ZbZclHandleReadReport_7>
 8003356:	2001      	movs	r0, #1
 8003358:	f88d 0000 	strb.w	r0, [sp]
 800335c:	e002      	b.n	8003364 <??ZbZclHandleReadReport_8>

0800335e <??ZbZclHandleReadReport_7>:
 800335e:	2000      	movs	r0, #0
 8003360:	f88d 0000 	strb.w	r0, [sp]

08003364 <??ZbZclHandleReadReport_8>:
 8003364:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8003368:	4450      	add	r0, sl
 800336a:	f000 fd91 	bl	8003e90 <pletoh16>
 800336e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003372:	f11a 0a02 	adds.w	sl, sl, #2
 8003376:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800337a:	4640      	mov	r0, r8
 800337c:	f7fc ff2f 	bl	80001de <ZbZclAttrFind>
 8003380:	0006      	movs	r6, r0
 8003382:	2e00      	cmp	r6, #0
 8003384:	d102      	bne.n	800338c <??ZbZclHandleReadReport_9>
 8003386:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 800338a:	e05c      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800338c <??ZbZclHandleReadReport_9>:
 800338c:	68b0      	ldr	r0, [r6, #8]
 800338e:	7900      	ldrb	r0, [r0, #4]
 8003390:	0780      	lsls	r0, r0, #30
 8003392:	d402      	bmi.n	800339a <??ZbZclHandleReadReport_11>
 8003394:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 8003398:	e055      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800339a <??ZbZclHandleReadReport_11>:
 800339a:	f89d 2000 	ldrb.w	r2, [sp]
 800339e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80033a2:	4640      	mov	r0, r8
 80033a4:	f7ff fa3f 	bl	8002826 <zcl_reporting_find>
 80033a8:	0005      	movs	r5, r0
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	d102      	bne.n	80033b4 <??ZbZclHandleReadReport_12>
 80033ae:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033b2:	e048      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033b4 <??ZbZclHandleReadReport_12>:
 80033b4:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80033b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033ba:	4288      	cmp	r0, r1
 80033bc:	d102      	bne.n	80033c4 <??ZbZclHandleReadReport_13>
 80033be:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033c2:	e040      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033c4 <??ZbZclHandleReadReport_13>:
 80033c4:	2020      	movs	r0, #32
 80033c6:	9005      	str	r0, [sp, #20]
 80033c8:	2000      	movs	r0, #0
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	f10d 0b18 	add.w	fp, sp, #24
 80033d0:	9a04      	ldr	r2, [sp, #16]
 80033d2:	9905      	ldr	r1, [sp, #20]
 80033d4:	4658      	mov	r0, fp
 80033d6:	f001 fa6c 	bl	80048b2 <__aeabi_memset>
 80033da:	f89d 0000 	ldrb.w	r0, [sp]
 80033de:	2800      	cmp	r0, #0
 80033e0:	d003      	beq.n	80033ea <??ZbZclHandleReadReport_14>
 80033e2:	2001      	movs	r0, #1
 80033e4:	f88d 0018 	strb.w	r0, [sp, #24]
 80033e8:	e002      	b.n	80033f0 <??ZbZclHandleReadReport_15>

080033ea <??ZbZclHandleReadReport_14>:
 80033ea:	2000      	movs	r0, #0
 80033ec:	f88d 0018 	strb.w	r0, [sp, #24]

080033f0 <??ZbZclHandleReadReport_15>:
 80033f0:	89a8      	ldrh	r0, [r5, #12]
 80033f2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80033f6:	7ba8      	ldrb	r0, [r5, #14]
 80033f8:	f88d 001c 	strb.w	r0, [sp, #28]
 80033fc:	8c28      	ldrh	r0, [r5, #32]
 80033fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003402:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003404:	f8ad 0020 	strh.w	r0, [sp, #32]
 8003408:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 800340c:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8003410:	2000      	movs	r0, #0
 8003412:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8003416:	2000      	movs	r0, #0
 8003418:	5538      	strb	r0, [r7, r4]
 800341a:	1c64      	adds	r4, r4, #1
 800341c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8003420:	0020      	movs	r0, r4
 8003422:	b280      	uxth	r0, r0
 8003424:	1a12      	subs	r2, r2, r0
 8003426:	eb07 0104 	add.w	r1, r7, r4
 800342a:	a806      	add	r0, sp, #24
 800342c:	f000 f896 	bl	800355c <zcl_append_report_config_record>
 8003430:	9003      	str	r0, [sp, #12]
 8003432:	9803      	ldr	r0, [sp, #12]
 8003434:	2800      	cmp	r0, #0
 8003436:	d503      	bpl.n	8003440 <??ZbZclHandleReadReport_16>
 8003438:	1e64      	subs	r4, r4, #1
 800343a:	f05f 0b01 	movs.w	fp, #1
 800343e:	e002      	b.n	8003446 <??ZbZclHandleReadReport_10>

08003440 <??ZbZclHandleReadReport_16>:
 8003440:	9803      	ldr	r0, [sp, #12]
 8003442:	1904      	adds	r4, r0, r4
 8003444:	e76d      	b.n	8003322 <??ZbZclHandleReadReport_4>

08003446 <??ZbZclHandleReadReport_10>:
 8003446:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800344a:	1ce1      	adds	r1, r4, #3
 800344c:	4288      	cmp	r0, r1
 800344e:	d30e      	bcc.n	800346e <??ZbZclHandleReadReport_5>

08003450 <??ZbZclHandleReadReport_17>:
 8003450:	f807 b004 	strb.w	fp, [r7, r4]
 8003454:	1c64      	adds	r4, r4, #1
 8003456:	f89d 0000 	ldrb.w	r0, [sp]
 800345a:	5538      	strb	r0, [r7, r4]
 800345c:	1c64      	adds	r4, r4, #1
 800345e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8003462:	eb07 0004 	add.w	r0, r7, r4
 8003466:	f000 fd5f 	bl	8003f28 <putle16>
 800346a:	1ca4      	adds	r4, r4, #2
 800346c:	e759      	b.n	8003322 <??ZbZclHandleReadReport_4>

0800346e <??ZbZclHandleReadReport_5>:
 800346e:	464a      	mov	r2, r9
 8003470:	a90e      	add	r1, sp, #56	@ 0x38
 8003472:	4640      	mov	r0, r8
 8003474:	f000 fc15 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 8003478:	a80e      	add	r0, sp, #56	@ 0x38
 800347a:	f119 0110 	adds.w	r1, r9, #16
 800347e:	2210      	movs	r2, #16
 8003480:	f00c fc3d 	bl	800fcfe <__aeabi_memcpy>
 8003484:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 8003488:	f000 fba3 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 800348c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8003490:	2001      	movs	r0, #1
 8003492:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8003496:	2000      	movs	r0, #0
 8003498:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 800349c:	9714      	str	r7, [sp, #80]	@ 0x50
 800349e:	0020      	movs	r0, r4
 80034a0:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	a90e      	add	r1, sp, #56	@ 0x38
 80034aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034ae:	f00a ff71 	bl	800e394 <ZbApsdeDataReqCallback>
 80034b2:	2300      	movs	r3, #0
 80034b4:	a204      	add	r2, pc, #16	@ (adr r2, 80034c8 <??DataTable10>)
 80034b6:	0039      	movs	r1, r7
 80034b8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034bc:	f00b fb44 	bl	800eb48 <zb_heap_free>

080034c0 <??ZbZclHandleReadReport_1>:
 80034c0:	b01b      	add	sp, #108	@ 0x6c
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080034c8 <??DataTable10>:
 80034c8:	0000 0000                                   ....

080034cc <ZbZclHandleReportAttr>:
 80034cc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	0004      	movs	r4, r0
 80034d2:	000d      	movs	r5, r1
 80034d4:	0016      	movs	r6, r2
 80034d6:	f05f 0a00 	movs.w	sl, #0
 80034da:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80034dc:	2800      	cmp	r0, #0
 80034de:	d03b      	beq.n	8003558 <??ZbZclHandleReportAttr_0>

080034e0 <??ZbZclHandleReportAttr_1>:
 80034e0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80034e2:	4651      	mov	r1, sl
 80034e4:	b289      	uxth	r1, r1
 80034e6:	1cc9      	adds	r1, r1, #3
 80034e8:	4288      	cmp	r0, r1
 80034ea:	d335      	bcc.n	8003558 <??ZbZclHandleReportAttr_0>

080034ec <??ZbZclHandleReportAttr_3>:
 80034ec:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034ee:	4651      	mov	r1, sl
 80034f0:	b289      	uxth	r1, r1
 80034f2:	4408      	add	r0, r1
 80034f4:	f000 fccc 	bl	8003e90 <pletoh16>
 80034f8:	0007      	movs	r7, r0
 80034fa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034fc:	4651      	mov	r1, sl
 80034fe:	b289      	uxth	r1, r1
 8003500:	4408      	add	r0, r1
 8003502:	7880      	ldrb	r0, [r0, #2]
 8003504:	4680      	mov	r8, r0
 8003506:	f11a 0a03 	adds.w	sl, sl, #3
 800350a:	2300      	movs	r3, #0
 800350c:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800350e:	4650      	mov	r0, sl
 8003510:	b280      	uxth	r0, r0
 8003512:	1a12      	subs	r2, r2, r0
 8003514:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003516:	4651      	mov	r1, sl
 8003518:	b289      	uxth	r1, r1
 800351a:	4401      	add	r1, r0
 800351c:	4640      	mov	r0, r8
 800351e:	b2c0      	uxtb	r0, r0
 8003520:	f7fd fd89 	bl	8001036 <ZbZclAttrParseLength>
 8003524:	4681      	mov	r9, r0
 8003526:	f1b9 0f00 	cmp.w	r9, #0
 800352a:	d415      	bmi.n	8003558 <??ZbZclHandleReportAttr_0>

0800352c <??ZbZclHandleReportAttr_4>:
 800352c:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800352e:	ebb0 000a 	subs.w	r0, r0, sl
 8003532:	b280      	uxth	r0, r0
 8003534:	9001      	str	r0, [sp, #4]
 8003536:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003538:	4651      	mov	r1, sl
 800353a:	b289      	uxth	r1, r1
 800353c:	4408      	add	r0, r1
 800353e:	9000      	str	r0, [sp, #0]
 8003540:	4643      	mov	r3, r8
 8003542:	b2db      	uxtb	r3, r3
 8003544:	003a      	movs	r2, r7
 8003546:	b292      	uxth	r2, r2
 8003548:	0031      	movs	r1, r6
 800354a:	0020      	movs	r0, r4
 800354c:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 8003550:	47e0      	blx	ip
 8003552:	eb19 0a0a 	adds.w	sl, r9, sl
 8003556:	e7c3      	b.n	80034e0 <??ZbZclHandleReportAttr_1>

08003558 <??ZbZclHandleReportAttr_0>:
 8003558:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800355c <zcl_append_report_config_record>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	0005      	movs	r5, r0
 8003562:	000e      	movs	r6, r1
 8003564:	4690      	mov	r8, r2
 8003566:	2700      	movs	r7, #0
 8003568:	7828      	ldrb	r0, [r5, #0]
 800356a:	2800      	cmp	r0, #0
 800356c:	d003      	beq.n	8003576 <??zcl_append_report_config_record_0>
 800356e:	2801      	cmp	r0, #1
 8003570:	f000 80f4 	beq.w	800375c <??zcl_append_report_config_record_1>
 8003574:	e108      	b.n	8003788 <??zcl_append_report_config_record_2>

08003576 <??zcl_append_report_config_record_0>:
 8003576:	7928      	ldrb	r0, [r5, #4]
 8003578:	f001 f98e 	bl	8004898 <ZbZclAttrIsFloat>
 800357c:	2800      	cmp	r0, #0
 800357e:	d002      	beq.n	8003586 <??zcl_append_report_config_record_3>
 8003580:	2001      	movs	r0, #1
 8003582:	4681      	mov	r9, r0
 8003584:	e009      	b.n	800359a <??zcl_append_report_config_record_4>

08003586 <??zcl_append_report_config_record_3>:
 8003586:	7928      	ldrb	r0, [r5, #4]
 8003588:	f7fd fe06 	bl	8001198 <ZbZclAttrIsAnalog>
 800358c:	2800      	cmp	r0, #0
 800358e:	d002      	beq.n	8003596 <??zcl_append_report_config_record_5>
 8003590:	2001      	movs	r0, #1
 8003592:	4681      	mov	r9, r0
 8003594:	e001      	b.n	800359a <??zcl_append_report_config_record_4>

08003596 <??zcl_append_report_config_record_5>:
 8003596:	2000      	movs	r0, #0
 8003598:	4681      	mov	r9, r0

0800359a <??zcl_append_report_config_record_4>:
 800359a:	f1b8 0f08 	cmp.w	r8, #8
 800359e:	d202      	bcs.n	80035a6 <??zcl_append_report_config_record_6>
 80035a0:	f05f 30ff 	movs.w	r0, #4294967295
 80035a4:	e0f3      	b.n	800378e <??zcl_append_report_config_record_7>

080035a6 <??zcl_append_report_config_record_6>:
 80035a6:	7828      	ldrb	r0, [r5, #0]
 80035a8:	55f0      	strb	r0, [r6, r7]
 80035aa:	1c7f      	adds	r7, r7, #1
 80035ac:	8869      	ldrh	r1, [r5, #2]
 80035ae:	eb06 0007 	add.w	r0, r6, r7
 80035b2:	f000 fcb9 	bl	8003f28 <putle16>
 80035b6:	1cbf      	adds	r7, r7, #2
 80035b8:	7928      	ldrb	r0, [r5, #4]
 80035ba:	55f0      	strb	r0, [r6, r7]
 80035bc:	1c7f      	adds	r7, r7, #1
 80035be:	88e9      	ldrh	r1, [r5, #6]
 80035c0:	eb06 0007 	add.w	r0, r6, r7
 80035c4:	f000 fcb0 	bl	8003f28 <putle16>
 80035c8:	1cbf      	adds	r7, r7, #2
 80035ca:	8929      	ldrh	r1, [r5, #8]
 80035cc:	eb06 0007 	add.w	r0, r6, r7
 80035d0:	f000 fcaa 	bl	8003f28 <putle16>
 80035d4:	1cbf      	adds	r7, r7, #2
 80035d6:	4648      	mov	r0, r9
 80035d8:	b2c0      	uxtb	r0, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	f000 80bd 	beq.w	800375a <??zcl_append_report_config_record_8>
 80035e0:	7928      	ldrb	r0, [r5, #4]
 80035e2:	f7fd fc9d 	bl	8000f20 <ZbZclAttrTypeLength>
 80035e6:	0004      	movs	r4, r0
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d101      	bne.n	80035f0 <??zcl_append_report_config_record_9>
 80035ec:	2001      	movs	r0, #1
 80035ee:	e0ce      	b.n	800378e <??zcl_append_report_config_record_7>

080035f0 <??zcl_append_report_config_record_9>:
 80035f0:	2c01      	cmp	r4, #1
 80035f2:	d00e      	beq.n	8003612 <??zcl_append_report_config_record_10>
 80035f4:	f0c0 80af 	bcc.w	8003756 <??zcl_append_report_config_record_11>
 80035f8:	2c03      	cmp	r4, #3
 80035fa:	d02f      	beq.n	800365c <??zcl_append_report_config_record_12>
 80035fc:	d319      	bcc.n	8003632 <??zcl_append_report_config_record_13>
 80035fe:	2c05      	cmp	r4, #5
 8003600:	d054      	beq.n	80036ac <??zcl_append_report_config_record_14>
 8003602:	d33f      	bcc.n	8003684 <??zcl_append_report_config_record_15>
 8003604:	2c07      	cmp	r4, #7
 8003606:	d07c      	beq.n	8003702 <??zcl_append_report_config_record_16>
 8003608:	d365      	bcc.n	80036d6 <??zcl_append_report_config_record_17>
 800360a:	2c08      	cmp	r4, #8
 800360c:	f000 808e 	beq.w	800372c <??zcl_append_report_config_record_18>
 8003610:	e0a1      	b.n	8003756 <??zcl_append_report_config_record_11>

08003612 <??zcl_append_report_config_record_10>:
 8003612:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003616:	2201      	movs	r2, #1
 8003618:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <??DataTable11_1>)
 800361a:	f001 fe09 	bl	8005230 <__aeabi_cdrcmple>
 800361e:	d801      	bhi.n	8003624 <??zcl_append_report_config_record_19>
 8003620:	2001      	movs	r0, #1
 8003622:	e0b4      	b.n	800378e <??zcl_append_report_config_record_7>

08003624 <??zcl_append_report_config_record_19>:
 8003624:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003628:	f001 fe44 	bl	80052b4 <__aeabi_d2iz>
 800362c:	55f0      	strb	r0, [r6, r7]
 800362e:	1c7f      	adds	r7, r7, #1
 8003630:	e093      	b.n	800375a <??zcl_append_report_config_record_8>

08003632 <??zcl_append_report_config_record_13>:
 8003632:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003636:	2201      	movs	r2, #1
 8003638:	4b58      	ldr	r3, [pc, #352]	@ (800379c <??DataTable11_2>)
 800363a:	f001 fdf9 	bl	8005230 <__aeabi_cdrcmple>
 800363e:	d801      	bhi.n	8003644 <??zcl_append_report_config_record_20>
 8003640:	2001      	movs	r0, #1
 8003642:	e0a4      	b.n	800378e <??zcl_append_report_config_record_7>

08003644 <??zcl_append_report_config_record_20>:
 8003644:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003648:	f001 fe34 	bl	80052b4 <__aeabi_d2iz>
 800364c:	0001      	movs	r1, r0
 800364e:	b289      	uxth	r1, r1
 8003650:	eb06 0007 	add.w	r0, r6, r7
 8003654:	f000 fc68 	bl	8003f28 <putle16>
 8003658:	1cbf      	adds	r7, r7, #2
 800365a:	e07e      	b.n	800375a <??zcl_append_report_config_record_8>

0800365c <??zcl_append_report_config_record_12>:
 800365c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003660:	4a4f      	ldr	r2, [pc, #316]	@ (80037a0 <??DataTable11_3>)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <??DataTable11_4>)
 8003664:	f001 fde4 	bl	8005230 <__aeabi_cdrcmple>
 8003668:	d801      	bhi.n	800366e <??zcl_append_report_config_record_21>
 800366a:	2001      	movs	r0, #1
 800366c:	e08f      	b.n	800378e <??zcl_append_report_config_record_7>

0800366e <??zcl_append_report_config_record_21>:
 800366e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003672:	f001 fe47 	bl	8005304 <__aeabi_d2uiz>
 8003676:	0001      	movs	r1, r0
 8003678:	eb06 0007 	add.w	r0, r6, r7
 800367c:	f000 fc5a 	bl	8003f34 <putle24>
 8003680:	1cff      	adds	r7, r7, #3
 8003682:	e06a      	b.n	800375a <??zcl_append_report_config_record_8>

08003684 <??zcl_append_report_config_record_15>:
 8003684:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003688:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <??DataTable11_5>)
 800368a:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <??DataTable11_6>)
 800368c:	f001 fdd0 	bl	8005230 <__aeabi_cdrcmple>
 8003690:	d801      	bhi.n	8003696 <??zcl_append_report_config_record_22>
 8003692:	2001      	movs	r0, #1
 8003694:	e07b      	b.n	800378e <??zcl_append_report_config_record_7>

08003696 <??zcl_append_report_config_record_22>:
 8003696:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800369a:	f001 fe33 	bl	8005304 <__aeabi_d2uiz>
 800369e:	0001      	movs	r1, r0
 80036a0:	eb06 0007 	add.w	r0, r6, r7
 80036a4:	f000 fc52 	bl	8003f4c <putle32>
 80036a8:	1d3f      	adds	r7, r7, #4
 80036aa:	e056      	b.n	800375a <??zcl_append_report_config_record_8>

080036ac <??zcl_append_report_config_record_14>:
 80036ac:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <??DataTable11_7>)
 80036b2:	4b40      	ldr	r3, [pc, #256]	@ (80037b4 <??DataTable11_8>)
 80036b4:	f001 fdbc 	bl	8005230 <__aeabi_cdrcmple>
 80036b8:	d801      	bhi.n	80036be <??zcl_append_report_config_record_23>
 80036ba:	2001      	movs	r0, #1
 80036bc:	e067      	b.n	800378e <??zcl_append_report_config_record_7>

080036be <??zcl_append_report_config_record_23>:
 80036be:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036c2:	f001 fe6f 	bl	80053a4 <__aeabi_d2ulz>
 80036c6:	0002      	movs	r2, r0
 80036c8:	000b      	movs	r3, r1
 80036ca:	eb06 0007 	add.w	r0, r6, r7
 80036ce:	f000 fc48 	bl	8003f62 <putle40>
 80036d2:	1d7f      	adds	r7, r7, #5
 80036d4:	e041      	b.n	800375a <??zcl_append_report_config_record_8>

080036d6 <??zcl_append_report_config_record_17>:
 80036d6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036da:	f07f 021e 	mvns.w	r2, #30
 80036de:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <??DataTable11_9>)
 80036e0:	f001 fda6 	bl	8005230 <__aeabi_cdrcmple>
 80036e4:	d801      	bhi.n	80036ea <??zcl_append_report_config_record_24>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e051      	b.n	800378e <??zcl_append_report_config_record_7>

080036ea <??zcl_append_report_config_record_24>:
 80036ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036ee:	f001 fe59 	bl	80053a4 <__aeabi_d2ulz>
 80036f2:	0002      	movs	r2, r0
 80036f4:	000b      	movs	r3, r1
 80036f6:	eb06 0007 	add.w	r0, r6, r7
 80036fa:	f000 fc3c 	bl	8003f76 <putle48>
 80036fe:	1dbf      	adds	r7, r7, #6
 8003700:	e02b      	b.n	800375a <??zcl_append_report_config_record_8>

08003702 <??zcl_append_report_config_record_16>:
 8003702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003706:	2201      	movs	r2, #1
 8003708:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <??DataTable11_10>)
 800370a:	f001 fd91 	bl	8005230 <__aeabi_cdrcmple>
 800370e:	d801      	bhi.n	8003714 <??zcl_append_report_config_record_25>
 8003710:	2001      	movs	r0, #1
 8003712:	e03c      	b.n	800378e <??zcl_append_report_config_record_7>

08003714 <??zcl_append_report_config_record_25>:
 8003714:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003718:	f001 fe44 	bl	80053a4 <__aeabi_d2ulz>
 800371c:	0002      	movs	r2, r0
 800371e:	000b      	movs	r3, r1
 8003720:	eb06 0007 	add.w	r0, r6, r7
 8003724:	f000 fc36 	bl	8003f94 <putle56>
 8003728:	1dff      	adds	r7, r7, #7
 800372a:	e016      	b.n	800375a <??zcl_append_report_config_record_8>

0800372c <??zcl_append_report_config_record_18>:
 800372c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003730:	2201      	movs	r2, #1
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <??DataTable11_11>)
 8003734:	f001 fd7c 	bl	8005230 <__aeabi_cdrcmple>
 8003738:	d801      	bhi.n	800373e <??zcl_append_report_config_record_26>
 800373a:	2001      	movs	r0, #1
 800373c:	e027      	b.n	800378e <??zcl_append_report_config_record_7>

0800373e <??zcl_append_report_config_record_26>:
 800373e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003742:	f001 fe2f 	bl	80053a4 <__aeabi_d2ulz>
 8003746:	0002      	movs	r2, r0
 8003748:	000b      	movs	r3, r1
 800374a:	eb06 0007 	add.w	r0, r6, r7
 800374e:	f000 fc30 	bl	8003fb2 <putle64>
 8003752:	3708      	adds	r7, #8
 8003754:	e001      	b.n	800375a <??zcl_append_report_config_record_8>

08003756 <??zcl_append_report_config_record_11>:
 8003756:	2001      	movs	r0, #1
 8003758:	e019      	b.n	800378e <??zcl_append_report_config_record_7>

0800375a <??zcl_append_report_config_record_8>:
 800375a:	e017      	b.n	800378c <??zcl_append_report_config_record_27>

0800375c <??zcl_append_report_config_record_1>:
 800375c:	f1b8 0f08 	cmp.w	r8, #8
 8003760:	d202      	bcs.n	8003768 <??zcl_append_report_config_record_28>
 8003762:	f05f 30ff 	movs.w	r0, #4294967295
 8003766:	e012      	b.n	800378e <??zcl_append_report_config_record_7>

08003768 <??zcl_append_report_config_record_28>:
 8003768:	7828      	ldrb	r0, [r5, #0]
 800376a:	55f0      	strb	r0, [r6, r7]
 800376c:	1c7f      	adds	r7, r7, #1
 800376e:	8869      	ldrh	r1, [r5, #2]
 8003770:	eb06 0007 	add.w	r0, r6, r7
 8003774:	f000 fbd8 	bl	8003f28 <putle16>
 8003778:	1cbf      	adds	r7, r7, #2
 800377a:	8b29      	ldrh	r1, [r5, #24]
 800377c:	eb06 0007 	add.w	r0, r6, r7
 8003780:	f000 fbd2 	bl	8003f28 <putle16>
 8003784:	1cbf      	adds	r7, r7, #2
 8003786:	e001      	b.n	800378c <??zcl_append_report_config_record_27>

08003788 <??zcl_append_report_config_record_2>:
 8003788:	2001      	movs	r0, #1
 800378a:	e000      	b.n	800378e <??zcl_append_report_config_record_7>

0800378c <??zcl_append_report_config_record_27>:
 800378c:	0038      	movs	r0, r7

0800378e <??zcl_append_report_config_record_7>:
 800378e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08003794 <??DataTable11>:
 8003794:	0000 3ff0                                   ...?

08003798 <??DataTable11_1>:
 8003798:	e000 406f                                   ..o@

0800379c <??DataTable11_2>:
 800379c:	ffe0 40ef                                   ...@

080037a0 <??DataTable11_3>:
 80037a0:	0001 e000                                   ....

080037a4 <??DataTable11_4>:
 80037a4:	ffff 416f                                   ..oA

080037a8 <??DataTable11_5>:
 80037a8:	0001 ffe0                                   ....

080037ac <??DataTable11_6>:
 80037ac:	ffff 41ef                                   ...A

080037b0 <??DataTable11_7>:
 80037b0:	e001 ffff                                   ....

080037b4 <??DataTable11_8>:
 80037b4:	ffff 426f                                   ..oB

080037b8 <??DataTable11_9>:
 80037b8:	ffff 42ef                                   ...B

080037bc <??DataTable11_10>:
 80037bc:	0000 4370                                   ..pC

080037c0 <??DataTable11_11>:
 80037c0:	0000 43f0                                   ...C

080037c4 <ZbZclAttrReportConfigReq>:
 80037c4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	b09b      	sub	sp, #108	@ 0x6c
 80037ca:	0004      	movs	r4, r0
 80037cc:	000d      	movs	r5, r1
 80037ce:	001e      	movs	r6, r3
 80037d0:	2700      	movs	r7, #0
 80037d2:	7c28      	ldrb	r0, [r5, #16]
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d002      	beq.n	80037de <??ZbZclAttrReportConfigReq_0>
 80037d8:	7c28      	ldrb	r0, [r5, #16]
 80037da:	2807      	cmp	r0, #7
 80037dc:	d301      	bcc.n	80037e2 <??ZbZclAttrReportConfigReq_1>

080037de <??ZbZclAttrReportConfigReq_0>:
 80037de:	2001      	movs	r0, #1
 80037e0:	e059      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

080037e2 <??ZbZclAttrReportConfigReq_1>:
 80037e2:	f05f 0800 	movs.w	r8, #0

080037e6 <??ZbZclAttrReportConfigReq_3>:
 80037e6:	7c28      	ldrb	r0, [r5, #16]
 80037e8:	4580      	cmp	r8, r0
 80037ea:	d215      	bcs.n	8003818 <??ZbZclAttrReportConfigReq_4>
 80037ec:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80037f0:	4428      	add	r0, r5
 80037f2:	f110 0918 	adds.w	r9, r0, #24
 80037f6:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 80037fa:	a80c      	add	r0, sp, #48	@ 0x30
 80037fc:	eb00 0107 	add.w	r1, r0, r7
 8003800:	4648      	mov	r0, r9
 8003802:	f7ff feab 	bl	800355c <zcl_append_report_config_record>
 8003806:	0001      	movs	r1, r0
 8003808:	2901      	cmp	r1, #1
 800380a:	da01      	bge.n	8003810 <??ZbZclAttrReportConfigReq_5>
 800380c:	2001      	movs	r0, #1
 800380e:	e042      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

08003810 <??ZbZclAttrReportConfigReq_5>:
 8003810:	19cf      	adds	r7, r1, r7
 8003812:	f118 0801 	adds.w	r8, r8, #1
 8003816:	e7e6      	b.n	80037e6 <??ZbZclAttrReportConfigReq_3>

08003818 <??ZbZclAttrReportConfigReq_4>:
 8003818:	f05f 0930 	movs.w	r9, #48	@ 0x30
 800381c:	f05f 0a00 	movs.w	sl, #0
 8003820:	46eb      	mov	fp, sp
 8003822:	4652      	mov	r2, sl
 8003824:	4649      	mov	r1, r9
 8003826:	4658      	mov	r0, fp
 8003828:	f001 f843 	bl	80048b2 <__aeabi_memset>
 800382c:	2000      	movs	r0, #0
 800382e:	f88d 001a 	strb.w	r0, [sp, #26]
 8003832:	8a20      	ldrh	r0, [r4, #16]
 8003834:	2800      	cmp	r0, #0
 8003836:	d001      	beq.n	800383c <??ZbZclAttrReportConfigReq_6>
 8003838:	2001      	movs	r0, #1
 800383a:	e000      	b.n	800383e <??ZbZclAttrReportConfigReq_7>

0800383c <??ZbZclAttrReportConfigReq_6>:
 800383c:	2000      	movs	r0, #0

0800383e <??ZbZclAttrReportConfigReq_7>:
 800383e:	f88d 001b 	strb.w	r0, [sp, #27]
 8003842:	8a20      	ldrh	r0, [r4, #16]
 8003844:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003848:	2006      	movs	r0, #6
 800384a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800384e:	f00b f841 	bl	800e8d4 <ZbZclGetNextSeqnum>
 8003852:	f88d 0020 	strb.w	r0, [sp, #32]
 8003856:	4668      	mov	r0, sp
 8003858:	0029      	movs	r1, r5
 800385a:	2210      	movs	r2, #16
 800385c:	f00c fa4f 	bl	800fcfe <__aeabi_memcpy>
 8003860:	8aa0      	ldrh	r0, [r4, #20]
 8003862:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003866:	89a0      	ldrh	r0, [r4, #12]
 8003868:	f8ad 0012 	strh.w	r0, [sp, #18]
 800386c:	7ba0      	ldrb	r0, [r4, #14]
 800386e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003872:	8ae0      	ldrh	r0, [r4, #22]
 8003874:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003878:	7e20      	ldrb	r0, [r4, #24]
 800387a:	f88d 0018 	strb.w	r0, [sp, #24]
 800387e:	7e60      	ldrb	r0, [r4, #25]
 8003880:	f88d 0019 	strb.w	r0, [sp, #25]
 8003884:	a80c      	add	r0, sp, #48	@ 0x30
 8003886:	9009      	str	r0, [sp, #36]	@ 0x24
 8003888:	970a      	str	r7, [sp, #40]	@ 0x28
 800388a:	0033      	movs	r3, r6
 800388c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800388e:	4669      	mov	r1, sp
 8003890:	68a0      	ldr	r0, [r4, #8]
 8003892:	f00b f84a 	bl	800e92a <ZbZclCommandReq>

08003896 <??ZbZclAttrReportConfigReq_2>:
 8003896:	b01d      	add	sp, #116	@ 0x74
 8003898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800389c <ZbZclAttrReportReadReq>:
 800389c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b09b      	sub	sp, #108	@ 0x6c
 80038a2:	0005      	movs	r5, r0
 80038a4:	000e      	movs	r6, r1
 80038a6:	001f      	movs	r7, r3
 80038a8:	2400      	movs	r4, #0
 80038aa:	7c30      	ldrb	r0, [r6, #16]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d002      	beq.n	80038b6 <??ZbZclAttrReportReadReq_0>
 80038b0:	7c30      	ldrb	r0, [r6, #16]
 80038b2:	2807      	cmp	r0, #7
 80038b4:	d301      	bcc.n	80038ba <??ZbZclAttrReportReadReq_1>

080038b6 <??ZbZclAttrReportReadReq_0>:
 80038b6:	2001      	movs	r0, #1
 80038b8:	e050      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ba <??ZbZclAttrReportReadReq_1>:
 80038ba:	f05f 0800 	movs.w	r8, #0

080038be <??ZbZclAttrReportReadReq_3>:
 80038be:	7c30      	ldrb	r0, [r6, #16]
 80038c0:	4580      	cmp	r8, r0
 80038c2:	d217      	bcs.n	80038f4 <??ZbZclAttrReportReadReq_4>
 80038c4:	1ce0      	adds	r0, r4, #3
 80038c6:	283a      	cmp	r0, #58	@ 0x3a
 80038c8:	d301      	bcc.n	80038ce <??ZbZclAttrReportReadReq_5>
 80038ca:	2001      	movs	r0, #1
 80038cc:	e046      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ce <??ZbZclAttrReportReadReq_5>:
 80038ce:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038d2:	4430      	add	r0, r6
 80038d4:	7e00      	ldrb	r0, [r0, #24]
 80038d6:	a90c      	add	r1, sp, #48	@ 0x30
 80038d8:	5508      	strb	r0, [r1, r4]
 80038da:	1c64      	adds	r4, r4, #1
 80038dc:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038e0:	4430      	add	r0, r6
 80038e2:	8b41      	ldrh	r1, [r0, #26]
 80038e4:	a80c      	add	r0, sp, #48	@ 0x30
 80038e6:	4420      	add	r0, r4
 80038e8:	f000 fb1e 	bl	8003f28 <putle16>
 80038ec:	1ca4      	adds	r4, r4, #2
 80038ee:	f118 0801 	adds.w	r8, r8, #1
 80038f2:	e7e4      	b.n	80038be <??ZbZclAttrReportReadReq_3>

080038f4 <??ZbZclAttrReportReadReq_4>:
 80038f4:	f05f 0930 	movs.w	r9, #48	@ 0x30
 80038f8:	f05f 0a00 	movs.w	sl, #0
 80038fc:	46eb      	mov	fp, sp
 80038fe:	4652      	mov	r2, sl
 8003900:	4649      	mov	r1, r9
 8003902:	4658      	mov	r0, fp
 8003904:	f000 ffd5 	bl	80048b2 <__aeabi_memset>
 8003908:	2000      	movs	r0, #0
 800390a:	f88d 001a 	strb.w	r0, [sp, #26]
 800390e:	2008      	movs	r0, #8
 8003910:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8003914:	f00a ffde 	bl	800e8d4 <ZbZclGetNextSeqnum>
 8003918:	f88d 0020 	strb.w	r0, [sp, #32]
 800391c:	4668      	mov	r0, sp
 800391e:	0031      	movs	r1, r6
 8003920:	2210      	movs	r2, #16
 8003922:	f00c f9ec 	bl	800fcfe <__aeabi_memcpy>
 8003926:	8aa8      	ldrh	r0, [r5, #20]
 8003928:	f8ad 0010 	strh.w	r0, [sp, #16]
 800392c:	89a8      	ldrh	r0, [r5, #12]
 800392e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8003932:	7ba8      	ldrb	r0, [r5, #14]
 8003934:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003938:	8ae8      	ldrh	r0, [r5, #22]
 800393a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800393e:	7e28      	ldrb	r0, [r5, #24]
 8003940:	f88d 0018 	strb.w	r0, [sp, #24]
 8003944:	7e68      	ldrb	r0, [r5, #25]
 8003946:	f88d 0019 	strb.w	r0, [sp, #25]
 800394a:	a80c      	add	r0, sp, #48	@ 0x30
 800394c:	9009      	str	r0, [sp, #36]	@ 0x24
 800394e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003950:	003b      	movs	r3, r7
 8003952:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003954:	4669      	mov	r1, sp
 8003956:	68a8      	ldr	r0, [r5, #8]
 8003958:	f00a ffe7 	bl	800e92a <ZbZclCommandReq>

0800395c <??ZbZclAttrReportReadReq_2>:
 800395c:	b01d      	add	sp, #116	@ 0x74
 800395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003962 <ZbZclAttrReportConfigDefault>:
 8003962:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003966:	0007      	movs	r7, r0
 8003968:	4688      	mov	r8, r1
 800396a:	4691      	mov	r9, r2
 800396c:	469a      	mov	sl, r3
 800396e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003970:	4641      	mov	r1, r8
 8003972:	b289      	uxth	r1, r1
 8003974:	0038      	movs	r0, r7
 8003976:	f7fc fc32 	bl	80001de <ZbZclAttrFind>
 800397a:	0005      	movs	r5, r0
 800397c:	2d00      	cmp	r5, #0
 800397e:	d101      	bne.n	8003984 <??ZbZclAttrReportConfigDefault_0>
 8003980:	2086      	movs	r0, #134	@ 0x86
 8003982:	e02b      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003984 <??ZbZclAttrReportConfigDefault_0>:
 8003984:	68a8      	ldr	r0, [r5, #8]
 8003986:	7900      	ldrb	r0, [r0, #4]
 8003988:	0780      	lsls	r0, r0, #30
 800398a:	d401      	bmi.n	8003990 <??ZbZclAttrReportConfigDefault_2>
 800398c:	208c      	movs	r0, #140	@ 0x8c
 800398e:	e025      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003990 <??ZbZclAttrReportConfigDefault_2>:
 8003990:	2200      	movs	r2, #0
 8003992:	4641      	mov	r1, r8
 8003994:	b289      	uxth	r1, r1
 8003996:	0038      	movs	r0, r7
 8003998:	f7fe ff45 	bl	8002826 <zcl_reporting_find>
 800399c:	0006      	movs	r6, r0
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d101      	bne.n	80039a6 <??ZbZclAttrReportConfigDefault_3>
 80039a2:	208b      	movs	r0, #139	@ 0x8b
 80039a4:	e01a      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

080039a6 <??ZbZclAttrReportConfigDefault_3>:
 80039a6:	f8ad 9002 	strh.w	r9, [sp, #2]
 80039aa:	f8ad a000 	strh.w	sl, [sp]
 80039ae:	4669      	mov	r1, sp
 80039b0:	f10d 0002 	add.w	r0, sp, #2
 80039b4:	f7ff f894 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 80039b8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80039bc:	84b0      	strh	r0, [r6, #36]	@ 0x24
 80039be:	f8bd 0000 	ldrh.w	r0, [sp]
 80039c2:	84f0      	strh	r0, [r6, #38]	@ 0x26
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d003      	beq.n	80039d0 <??ZbZclAttrReportConfigDefault_4>
 80039c8:	ed94 0b00 	vldr	d0, [r4]
 80039cc:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

080039d0 <??ZbZclAttrReportConfigDefault_4>:
 80039d0:	2201      	movs	r2, #1
 80039d2:	0031      	movs	r1, r6
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f7ff f8b3 	bl	8002b40 <zcl_reporting_reset_defaults>
 80039da:	2000      	movs	r0, #0

080039dc <??ZbZclAttrReportConfigDefault_1>:
 80039dc:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080039e0 <ZbZclClusterReportCallbackAttach>:
 80039e0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80039e2:	4770      	bx	lr

080039e4 <ZbZclClusterGetEndpoint>:
 80039e4:	7b80      	ldrb	r0, [r0, #14]
 80039e6:	4770      	bx	lr

080039e8 <ZbZclClusterSetCallbackArg>:
 80039e8:	6541      	str	r1, [r0, #84]	@ 0x54
 80039ea:	4770      	bx	lr

080039ec <ZbZclClusterSetMfrCode>:
 80039ec:	8201      	strh	r1, [r0, #16]
 80039ee:	4770      	bx	lr

080039f0 <ZbZclClusterGetClusterId>:
 80039f0:	8980      	ldrh	r0, [r0, #12]
 80039f2:	4770      	bx	lr

080039f4 <ZbZclClusterSetProfileId>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	0004      	movs	r4, r0
 80039f8:	000d      	movs	r5, r1
 80039fa:	82a5      	strh	r5, [r4, #20]
 80039fc:	7ba0      	ldrb	r0, [r4, #14]
 80039fe:	28ff      	cmp	r0, #255	@ 0xff
 8003a00:	d008      	beq.n	8003a14 <??ZbZclClusterSetProfileId_0>
 8003a02:	0020      	movs	r0, r4
 8003a04:	f00b f865 	bl	800ead2 <ZbZclClusterUnbind>
 8003a08:	7f23      	ldrb	r3, [r4, #28]
 8003a0a:	8aa2      	ldrh	r2, [r4, #20]
 8003a0c:	7ba1      	ldrb	r1, [r4, #14]
 8003a0e:	0020      	movs	r0, r4
 8003a10:	f00b f81c 	bl	800ea4c <ZbZclClusterBind>

08003a14 <??ZbZclClusterSetProfileId_0>:
 8003a14:	bd31      	pop	{r0, r4, r5, pc}

08003a16 <ZbZclClusterGetProfileId>:
 8003a16:	b510      	push	{r4, lr}
 8003a18:	0004      	movs	r4, r0
 8003a1a:	7ba1      	ldrb	r1, [r4, #14]
 8003a1c:	68a0      	ldr	r0, [r4, #8]
 8003a1e:	f00a fd00 	bl	800e422 <ZbApsEndpointProfile>
 8003a22:	0001      	movs	r1, r0
 8003a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a28:	b289      	uxth	r1, r1
 8003a2a:	4291      	cmp	r1, r2
 8003a2c:	d101      	bne.n	8003a32 <??ZbZclClusterGetProfileId_0>
 8003a2e:	8aa1      	ldrh	r1, [r4, #20]
 8003a30:	0008      	movs	r0, r1

08003a32 <??ZbZclClusterGetProfileId_0>:
 8003a32:	b280      	uxth	r0, r0
 8003a34:	bd10      	pop	{r4, pc}

08003a36 <ZbZclClusterSetMinSecurity>:
 8003a36:	b430      	push	{r4, r5}
 8003a38:	0003      	movs	r3, r0
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	7d9a      	ldrb	r2, [r3, #22]
 8003a3e:	f012 0203 	ands.w	r2, r2, #3
 8003a42:	2a01      	cmp	r2, #1
 8003a44:	d101      	bne.n	8003a4a <??ZbZclClusterSetMinSecurity_0>
 8003a46:	2401      	movs	r4, #1
 8003a48:	e000      	b.n	8003a4c <??ZbZclClusterSetMinSecurity_1>

08003a4a <??ZbZclClusterSetMinSecurity_0>:
 8003a4a:	2400      	movs	r4, #0

08003a4c <??ZbZclClusterSetMinSecurity_1>:
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	2aab      	cmp	r2, #171	@ 0xab
 8003a52:	d01d      	beq.n	8003a90 <??ZbZclClusterSetMinSecurity_2>
 8003a54:	2aac      	cmp	r2, #172	@ 0xac
 8003a56:	d00f      	beq.n	8003a78 <??ZbZclClusterSetMinSecurity_3>
 8003a58:	2aaf      	cmp	r2, #175	@ 0xaf
 8003a5a:	d123      	bne.n	8003aa4 <??ZbZclClusterSetMinSecurity_4>

08003a5c <??ZbZclClusterSetMinSecurity_5>:
 8003a5c:	8add      	ldrh	r5, [r3, #22]
 8003a5e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003a62:	4015      	ands	r5, r2
 8003a64:	82dd      	strh	r5, [r3, #22]
 8003a66:	8add      	ldrh	r5, [r3, #22]
 8003a68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a6c:	4015      	ands	r5, r2
 8003a6e:	82dd      	strh	r5, [r3, #22]
 8003a70:	0022      	movs	r2, r4
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	2a00      	cmp	r2, #0

08003a76 <??ZbZclClusterSetMinSecurity_6>:
 8003a76:	e017      	b.n	8003aa8 <??ZbZclClusterSetMinSecurity_7>

08003a78 <??ZbZclClusterSetMinSecurity_3>:
 8003a78:	8ada      	ldrh	r2, [r3, #22]
 8003a7a:	f052 0202 	orrs.w	r2, r2, #2
 8003a7e:	82da      	strh	r2, [r3, #22]
 8003a80:	8ada      	ldrh	r2, [r3, #22]
 8003a82:	f052 0201 	orrs.w	r2, r2, #1
 8003a86:	82da      	strh	r2, [r3, #22]
 8003a88:	0022      	movs	r2, r4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	2a00      	cmp	r2, #0

08003a8e <??ZbZclClusterSetMinSecurity_8>:
 8003a8e:	e00b      	b.n	8003aa8 <??ZbZclClusterSetMinSecurity_7>

08003a90 <??ZbZclClusterSetMinSecurity_2>:
 8003a90:	8add      	ldrh	r5, [r3, #22]
 8003a92:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003a96:	4015      	ands	r5, r2
 8003a98:	82dd      	strh	r5, [r3, #22]
 8003a9a:	8ada      	ldrh	r2, [r3, #22]
 8003a9c:	f052 0201 	orrs.w	r2, r2, #1
 8003aa0:	82da      	strh	r2, [r3, #22]
 8003aa2:	e001      	b.n	8003aa8 <??ZbZclClusterSetMinSecurity_7>

08003aa4 <??ZbZclClusterSetMinSecurity_4>:
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	0010      	movs	r0, r2

08003aa8 <??ZbZclClusterSetMinSecurity_7>:
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	d000      	beq.n	8003ab2 <??ZbZclClusterSetMinSecurity_9>
 8003ab0:	7499      	strb	r1, [r3, #18]

08003ab2 <??ZbZclClusterSetMinSecurity_9>:
 8003ab2:	b2c0      	uxtb	r0, r0
 8003ab4:	bc30      	pop	{r4, r5}
 8003ab6:	4770      	bx	lr

08003ab8 <ZbZclClusterCheckMinSecurity>:
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	0004      	movs	r4, r0
 8003abe:	000d      	movs	r5, r1
 8003ac0:	0016      	movs	r6, r2
 8003ac2:	2700      	movs	r7, #0
 8003ac4:	7ca0      	ldrb	r0, [r4, #18]
 8003ac6:	28af      	cmp	r0, #175	@ 0xaf
 8003ac8:	d102      	bne.n	8003ad0 <??ZbZclClusterCheckMinSecurity_0>
 8003aca:	2001      	movs	r0, #1
 8003acc:	0007      	movs	r7, r0
 8003ace:	e073      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003ad0 <??ZbZclClusterCheckMinSecurity_0>:
 8003ad0:	7ca0      	ldrb	r0, [r4, #18]
 8003ad2:	28ac      	cmp	r0, #172	@ 0xac
 8003ad4:	d10a      	bne.n	8003aec <??ZbZclClusterCheckMinSecurity_2>
 8003ad6:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003ada:	28ac      	cmp	r0, #172	@ 0xac
 8003adc:	d003      	beq.n	8003ae6 <??ZbZclClusterCheckMinSecurity_3>
 8003ade:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003ae2:	28ab      	cmp	r0, #171	@ 0xab
 8003ae4:	d101      	bne.n	8003aea <??ZbZclClusterCheckMinSecurity_4>

08003ae6 <??ZbZclClusterCheckMinSecurity_3>:
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	0007      	movs	r7, r0

08003aea <??ZbZclClusterCheckMinSecurity_4>:
 8003aea:	e065      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003aec <??ZbZclClusterCheckMinSecurity_2>:
 8003aec:	7ca0      	ldrb	r0, [r4, #18]
 8003aee:	28ab      	cmp	r0, #171	@ 0xab
 8003af0:	d162      	bne.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>
 8003af2:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003af6:	28ab      	cmp	r0, #171	@ 0xab
 8003af8:	d102      	bne.n	8003b00 <??ZbZclClusterCheckMinSecurity_6>
 8003afa:	2001      	movs	r0, #1
 8003afc:	0007      	movs	r7, r0
 8003afe:	e05b      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b00 <??ZbZclClusterCheckMinSecurity_6>:
 8003b00:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b04:	28ac      	cmp	r0, #172	@ 0xac
 8003b06:	d157      	bne.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b08 <??ZbZclClusterCheckMinSecurity_7>:
 8003b08:	89a0      	ldrh	r0, [r4, #12]
 8003b0a:	2819      	cmp	r0, #25
 8003b0c:	d114      	bne.n	8003b38 <??ZbZclClusterCheckMinSecurity_8>
 8003b0e:	7f20      	ldrb	r0, [r4, #28]
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d111      	bne.n	8003b38 <??ZbZclClusterCheckMinSecurity_8>
 8003b14:	0028      	movs	r0, r5
 8003b16:	f00a fcb7 	bl	800e488 <ZbApsAddrIsBcast>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d00b      	beq.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b1e:	7830      	ldrb	r0, [r6, #0]
 8003b20:	2801      	cmp	r0, #1
 8003b22:	d108      	bne.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b24:	78b0      	ldrb	r0, [r6, #2]
 8003b26:	2801      	cmp	r0, #1
 8003b28:	d105      	bne.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b2a:	79f0      	ldrb	r0, [r6, #7]
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d102      	bne.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b30:	2001      	movs	r0, #1
 8003b32:	0007      	movs	r7, r0
 8003b34:	e040      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b36 <??ZbZclClusterCheckMinSecurity_9>:
 8003b36:	e03f      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b38 <??ZbZclClusterCheckMinSecurity_8>:
 8003b38:	f240 7802 	movw	r8, #1794	@ 0x702
 8003b3c:	89a0      	ldrh	r0, [r4, #12]
 8003b3e:	4540      	cmp	r0, r8
 8003b40:	d11a      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b42:	7f20      	ldrb	r0, [r4, #28]
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d117      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b48:	7830      	ldrb	r0, [r6, #0]
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d114      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b4e:	79f0      	ldrb	r0, [r6, #7]
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d111      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b54:	78b0      	ldrb	r0, [r6, #2]
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d10e      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b5a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003b5c:	2802      	cmp	r0, #2
 8003b5e:	d30b      	bcc.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b60:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003b62:	f000 f995 	bl	8003e90 <pletoh16>
 8003b66:	0001      	movs	r1, r0
 8003b68:	f240 3206 	movw	r2, #774	@ 0x306
 8003b6c:	b289      	uxth	r1, r1
 8003b6e:	4291      	cmp	r1, r2
 8003b70:	d102      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b72:	2101      	movs	r1, #1
 8003b74:	000f      	movs	r7, r1
 8003b76:	e01f      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b78 <??ZbZclClusterCheckMinSecurity_10>:
 8003b78:	89a0      	ldrh	r0, [r4, #12]
 8003b7a:	4540      	cmp	r0, r8
 8003b7c:	d11b      	bne.n	8003bb6 <??ZbZclClusterCheckMinSecurity_11>
 8003b7e:	7f20      	ldrb	r0, [r4, #28]
 8003b80:	2801      	cmp	r0, #1
 8003b82:	d118      	bne.n	8003bb6 <??ZbZclClusterCheckMinSecurity_11>
 8003b84:	7830      	ldrb	r0, [r6, #0]
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d114      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b8a:	79f0      	ldrb	r0, [r6, #7]
 8003b8c:	2801      	cmp	r0, #1
 8003b8e:	d111      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b90:	78b0      	ldrb	r0, [r6, #2]
 8003b92:	2801      	cmp	r0, #1
 8003b94:	d10e      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b96:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003b98:	2802      	cmp	r0, #2
 8003b9a:	d30b      	bcc.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b9c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003b9e:	f000 f977 	bl	8003e90 <pletoh16>
 8003ba2:	0001      	movs	r1, r0
 8003ba4:	f240 3206 	movw	r2, #774	@ 0x306
 8003ba8:	b289      	uxth	r1, r1
 8003baa:	4291      	cmp	r1, r2
 8003bac:	d102      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003bae:	2101      	movs	r1, #1
 8003bb0:	000f      	movs	r7, r1
 8003bb2:	e001      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003bb4 <??ZbZclClusterCheckMinSecurity_12>:
 8003bb4:	e000      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003bb6 <??ZbZclClusterCheckMinSecurity_11>:
 8003bb6:	e7ff      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003bb8 <??ZbZclClusterCheckMinSecurity_1>:
 8003bb8:	0038      	movs	r0, r7
 8003bba:	b2c0      	uxtb	r0, r0
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bc0 <ZbZclClusterSetTxOptions>:
 8003bc0:	05ca      	lsls	r2, r1, #23
 8003bc2:	d400      	bmi.n	8003bc6 <??ZbZclClusterSetTxOptions_0>

08003bc4 <??ZbZclClusterSetTxOptions_1>:
 8003bc4:	82c1      	strh	r1, [r0, #22]

08003bc6 <??ZbZclClusterSetTxOptions_0>:
 8003bc6:	4770      	bx	lr

08003bc8 <ZbZclClusterGetTxOptions>:
 8003bc8:	8ac0      	ldrh	r0, [r0, #22]
 8003bca:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 8003bce:	4008      	ands	r0, r1
 8003bd0:	4770      	bx	lr

08003bd2 <ZbZclTxOptsFromSecurityStatus>:
 8003bd2:	0001      	movs	r1, r0
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f050 0004 	orrs.w	r0, r0, #4
 8003bda:	f050 0008 	orrs.w	r0, r0, #8
 8003bde:	000a      	movs	r2, r1
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	2aab      	cmp	r2, #171	@ 0xab
 8003be4:	d102      	bne.n	8003bec <??ZbZclTxOptsFromSecurityStatus_0>
 8003be6:	f050 0001 	orrs.w	r0, r0, #1
 8003bea:	e007      	b.n	8003bfc <??ZbZclTxOptsFromSecurityStatus_1>

08003bec <??ZbZclTxOptsFromSecurityStatus_0>:
 8003bec:	000a      	movs	r2, r1
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	2aac      	cmp	r2, #172	@ 0xac
 8003bf2:	d103      	bne.n	8003bfc <??ZbZclTxOptsFromSecurityStatus_1>
 8003bf4:	f050 0001 	orrs.w	r0, r0, #1
 8003bf8:	f050 0002 	orrs.w	r0, r0, #2

08003bfc <??ZbZclTxOptsFromSecurityStatus_1>:
 8003bfc:	b280      	uxth	r0, r0
 8003bfe:	4770      	bx	lr

08003c00 <ZbZclClusterGetDirection>:
 8003c00:	7f00      	ldrb	r0, [r0, #28]
 8003c02:	4770      	bx	lr

08003c04 <ZbZclClusterGetDirectionStr>:
 8003c04:	0001      	movs	r1, r0
 8003c06:	7f08      	ldrb	r0, [r1, #28]
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d003      	beq.n	8003c14 <??ZbZclClusterGetDirectionStr_0>
 8003c0c:	2802      	cmp	r0, #2
 8003c0e:	d005      	beq.n	8003c1c <??ZbZclClusterGetDirectionStr_1>
 8003c10:	d302      	bcc.n	8003c18 <??ZbZclClusterGetDirectionStr_2>
 8003c12:	e005      	b.n	8003c20 <??ZbZclClusterGetDirectionStr_3>

08003c14 <??ZbZclClusterGetDirectionStr_0>:
 8003c14:	4803      	ldr	r0, [pc, #12]	@ (8003c24 <??DataTable1>)
 8003c16:	e004      	b.n	8003c22 <??ZbZclClusterGetDirectionStr_4>

08003c18 <??ZbZclClusterGetDirectionStr_2>:
 8003c18:	4803      	ldr	r0, [pc, #12]	@ (8003c28 <??DataTable1_1>)
 8003c1a:	e002      	b.n	8003c22 <??ZbZclClusterGetDirectionStr_4>

08003c1c <??ZbZclClusterGetDirectionStr_1>:
 8003c1c:	4803      	ldr	r0, [pc, #12]	@ (8003c2c <??DataTable1_2>)
 8003c1e:	e000      	b.n	8003c22 <??ZbZclClusterGetDirectionStr_4>

08003c20 <??ZbZclClusterGetDirectionStr_3>:
 8003c20:	4803      	ldr	r0, [pc, #12]	@ (8003c30 <??DataTable1_3>)

08003c22 <??ZbZclClusterGetDirectionStr_4>:
 8003c22:	4770      	bx	lr

08003c24 <??DataTable1>:
 8003c24:	0814 0801                                   ....

08003c28 <??DataTable1_1>:
 8003c28:	081c 0801                                   ....

08003c2c <??DataTable1_2>:
 8003c2c:	0824 0801                                   $...

08003c30 <??DataTable1_3>:
 8003c30:	082c 0801                                   ,...

08003c34 <ZbZclClusterSetDiscoverRoute>:
 8003c34:	7601      	strb	r1, [r0, #24]
 8003c36:	4770      	bx	lr

08003c38 <ZbZclClusterSetRadius>:
 8003c38:	7641      	strb	r1, [r0, #25]
 8003c3a:	4770      	bx	lr

08003c3c <ZbZclClusterGetRadius>:
 8003c3c:	7e40      	ldrb	r0, [r0, #25]
 8003c3e:	4770      	bx	lr

08003c40 <ZbZclClusterSetMaxAsduLength>:
 8003c40:	b410      	push	{r4}
 8003c42:	0002      	movs	r2, r0
 8003c44:	000b      	movs	r3, r1
 8003c46:	0018      	movs	r0, r3
 8003c48:	b280      	uxth	r0, r0
 8003c4a:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 8003c4e:	42a0      	cmp	r0, r4
 8003c50:	d301      	bcc.n	8003c56 <??ZbZclClusterSetMaxAsduLength_0>
 8003c52:	2000      	movs	r0, #0
 8003c54:	e007      	b.n	8003c66 <??ZbZclClusterSetMaxAsduLength_1>

08003c56 <??ZbZclClusterSetMaxAsduLength_0>:
 8003c56:	0018      	movs	r0, r3
 8003c58:	b280      	uxth	r0, r0
 8003c5a:	2839      	cmp	r0, #57	@ 0x39
 8003c5c:	d201      	bcs.n	8003c62 <??ZbZclClusterSetMaxAsduLength_2>
 8003c5e:	2039      	movs	r0, #57	@ 0x39
 8003c60:	0003      	movs	r3, r0

08003c62 <??ZbZclClusterSetMaxAsduLength_2>:
 8003c62:	8353      	strh	r3, [r2, #26]
 8003c64:	2001      	movs	r0, #1

08003c66 <??ZbZclClusterSetMaxAsduLength_1>:
 8003c66:	bc10      	pop	{r4}
 8003c68:	4770      	bx	lr

08003c6a <ZbZclClusterGetMaxAsduLength>:
 8003c6a:	8b40      	ldrh	r0, [r0, #26]
 8003c6c:	4770      	bx	lr

08003c6e <ZbZclClusterInitCommandReq>:
 8003c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c72:	0004      	movs	r4, r0
 8003c74:	000d      	movs	r5, r1
 8003c76:	2630      	movs	r6, #48	@ 0x30
 8003c78:	2700      	movs	r7, #0
 8003c7a:	46a8      	mov	r8, r5
 8003c7c:	003a      	movs	r2, r7
 8003c7e:	0031      	movs	r1, r6
 8003c80:	4640      	mov	r0, r8
 8003c82:	f000 fe16 	bl	80048b2 <__aeabi_memset>
 8003c86:	8aa0      	ldrh	r0, [r4, #20]
 8003c88:	8228      	strh	r0, [r5, #16]
 8003c8a:	89a0      	ldrh	r0, [r4, #12]
 8003c8c:	8268      	strh	r0, [r5, #18]
 8003c8e:	7ba0      	ldrb	r0, [r4, #14]
 8003c90:	82a8      	strh	r0, [r5, #20]
 8003c92:	8ae0      	ldrh	r0, [r4, #22]
 8003c94:	82e8      	strh	r0, [r5, #22]
 8003c96:	7e20      	ldrb	r0, [r4, #24]
 8003c98:	7628      	strb	r0, [r5, #24]
 8003c9a:	7e60      	ldrb	r0, [r4, #25]
 8003c9c:	7668      	strb	r0, [r5, #25]
 8003c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ca2 <ZbZclClusterInitApsdeReq>:
 8003ca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca6:	0005      	movs	r5, r0
 8003ca8:	000e      	movs	r6, r1
 8003caa:	0014      	movs	r4, r2
 8003cac:	2730      	movs	r7, #48	@ 0x30
 8003cae:	f05f 0800 	movs.w	r8, #0
 8003cb2:	46b1      	mov	r9, r6
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	0039      	movs	r1, r7
 8003cb8:	4648      	mov	r0, r9
 8003cba:	f000 fdfa 	bl	80048b2 <__aeabi_memset>
 8003cbe:	8aa8      	ldrh	r0, [r5, #20]
 8003cc0:	8230      	strh	r0, [r6, #16]
 8003cc2:	89a8      	ldrh	r0, [r5, #12]
 8003cc4:	8270      	strh	r0, [r6, #18]
 8003cc6:	7ba8      	ldrb	r0, [r5, #14]
 8003cc8:	82b0      	strh	r0, [r6, #20]
 8003cca:	8ae8      	ldrh	r0, [r5, #22]
 8003ccc:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003cce:	7e28      	ldrb	r0, [r5, #24]
 8003cd0:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8003cd4:	7e68      	ldrb	r0, [r5, #25]
 8003cd6:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8003cda:	2c00      	cmp	r4, #0
 8003cdc:	d00b      	beq.n	8003cf6 <??ZbZclClusterInitApsdeReq_0>
 8003cde:	8ab0      	ldrh	r0, [r6, #20]
 8003ce0:	28ff      	cmp	r0, #255	@ 0xff
 8003ce2:	d101      	bne.n	8003ce8 <??ZbZclClusterInitApsdeReq_1>
 8003ce4:	8860      	ldrh	r0, [r4, #2]
 8003ce6:	82b0      	strh	r0, [r6, #20]

08003ce8 <??ZbZclClusterInitApsdeReq_1>:
 8003ce8:	8c20      	ldrh	r0, [r4, #32]
 8003cea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003cee:	4288      	cmp	r0, r1
 8003cf0:	d001      	beq.n	8003cf6 <??ZbZclClusterInitApsdeReq_0>
 8003cf2:	8c20      	ldrh	r0, [r4, #32]
 8003cf4:	8230      	strh	r0, [r6, #16]

08003cf6 <??ZbZclClusterInitApsdeReq_0>:
 8003cf6:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

08003cfa <ZbZclParseHeader>:
 8003cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfe:	0004      	movs	r4, r0
 8003d00:	000d      	movs	r5, r1
 8003d02:	0016      	movs	r6, r2
 8003d04:	2700      	movs	r7, #0
 8003d06:	2e03      	cmp	r6, #3
 8003d08:	d202      	bcs.n	8003d10 <??ZbZclParseHeader_0>
 8003d0a:	f05f 30ff 	movs.w	r0, #4294967295
 8003d0e:	e035      	b.n	8003d7c <??ZbZclParseHeader_1>

08003d10 <??ZbZclParseHeader_0>:
 8003d10:	f05f 0808 	movs.w	r8, #8
 8003d14:	f05f 0900 	movs.w	r9, #0
 8003d18:	46a2      	mov	sl, r4
 8003d1a:	464a      	mov	r2, r9
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	4650      	mov	r0, sl
 8003d20:	f000 fdc7 	bl	80048b2 <__aeabi_memset>
 8003d24:	5de8      	ldrb	r0, [r5, r7]
 8003d26:	f010 0003 	ands.w	r0, r0, #3
 8003d2a:	7020      	strb	r0, [r4, #0]
 8003d2c:	5de8      	ldrb	r0, [r5, r7]
 8003d2e:	b2c0      	uxtb	r0, r0
 8003d30:	0880      	lsrs	r0, r0, #2
 8003d32:	f010 0001 	ands.w	r0, r0, #1
 8003d36:	7060      	strb	r0, [r4, #1]
 8003d38:	5de8      	ldrb	r0, [r5, r7]
 8003d3a:	b2c0      	uxtb	r0, r0
 8003d3c:	08c0      	lsrs	r0, r0, #3
 8003d3e:	f010 0001 	ands.w	r0, r0, #1
 8003d42:	70a0      	strb	r0, [r4, #2]
 8003d44:	5de8      	ldrb	r0, [r5, r7]
 8003d46:	b2c0      	uxtb	r0, r0
 8003d48:	0900      	lsrs	r0, r0, #4
 8003d4a:	f010 0001 	ands.w	r0, r0, #1
 8003d4e:	70e0      	strb	r0, [r4, #3]
 8003d50:	1c7f      	adds	r7, r7, #1
 8003d52:	7860      	ldrb	r0, [r4, #1]
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d00a      	beq.n	8003d6e <??ZbZclParseHeader_2>
 8003d58:	2e05      	cmp	r6, #5
 8003d5a:	d202      	bcs.n	8003d62 <??ZbZclParseHeader_3>
 8003d5c:	f05f 30ff 	movs.w	r0, #4294967295
 8003d60:	e00c      	b.n	8003d7c <??ZbZclParseHeader_1>

08003d62 <??ZbZclParseHeader_3>:
 8003d62:	eb05 0007 	add.w	r0, r5, r7
 8003d66:	f000 f893 	bl	8003e90 <pletoh16>
 8003d6a:	80a0      	strh	r0, [r4, #4]
 8003d6c:	1cbf      	adds	r7, r7, #2

08003d6e <??ZbZclParseHeader_2>:
 8003d6e:	5de8      	ldrb	r0, [r5, r7]
 8003d70:	71a0      	strb	r0, [r4, #6]
 8003d72:	1c7f      	adds	r7, r7, #1
 8003d74:	5de8      	ldrb	r0, [r5, r7]
 8003d76:	71e0      	strb	r0, [r4, #7]
 8003d78:	1c7f      	adds	r7, r7, #1
 8003d7a:	0038      	movs	r0, r7

08003d7c <??ZbZclParseHeader_1>:
 8003d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d80 <ZbZclPrependHeader>:
 8003d80:	b470      	push	{r4, r5, r6}
 8003d82:	0003      	movs	r3, r0
 8003d84:	2400      	movs	r4, #0
 8003d86:	0015      	movs	r5, r2
 8003d88:	2600      	movs	r6, #0
 8003d8a:	7858      	ldrb	r0, [r3, #1]
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d004      	beq.n	8003d9a <??ZbZclPrependHeader_0>
 8003d90:	2a05      	cmp	r2, #5
 8003d92:	d202      	bcs.n	8003d9a <??ZbZclPrependHeader_0>
 8003d94:	f05f 30ff 	movs.w	r0, #4294967295
 8003d98:	e030      	b.n	8003dfc <??ZbZclPrependHeader_1>

08003d9a <??ZbZclPrependHeader_0>:
 8003d9a:	2a03      	cmp	r2, #3
 8003d9c:	d202      	bcs.n	8003da4 <??ZbZclPrependHeader_2>
 8003d9e:	f05f 30ff 	movs.w	r0, #4294967295
 8003da2:	e02b      	b.n	8003dfc <??ZbZclPrependHeader_1>

08003da4 <??ZbZclPrependHeader_2>:
 8003da4:	1e6d      	subs	r5, r5, #1
 8003da6:	79d8      	ldrb	r0, [r3, #7]
 8003da8:	5548      	strb	r0, [r1, r5]
 8003daa:	1c76      	adds	r6, r6, #1
 8003dac:	1e6d      	subs	r5, r5, #1
 8003dae:	7998      	ldrb	r0, [r3, #6]
 8003db0:	5548      	strb	r0, [r1, r5]
 8003db2:	1c76      	adds	r6, r6, #1
 8003db4:	7858      	ldrb	r0, [r3, #1]
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d009      	beq.n	8003dce <??ZbZclPrependHeader_3>
 8003dba:	1e6d      	subs	r5, r5, #1
 8003dbc:	8898      	ldrh	r0, [r3, #4]
 8003dbe:	b280      	uxth	r0, r0
 8003dc0:	0a00      	lsrs	r0, r0, #8
 8003dc2:	5548      	strb	r0, [r1, r5]
 8003dc4:	1c76      	adds	r6, r6, #1
 8003dc6:	1e6d      	subs	r5, r5, #1
 8003dc8:	8898      	ldrh	r0, [r3, #4]
 8003dca:	5548      	strb	r0, [r1, r5]
 8003dcc:	1c76      	adds	r6, r6, #1

08003dce <??ZbZclPrependHeader_3>:
 8003dce:	7818      	ldrb	r0, [r3, #0]
 8003dd0:	f010 0003 	ands.w	r0, r0, #3
 8003dd4:	4304      	orrs	r4, r0
 8003dd6:	7858      	ldrb	r0, [r3, #1]
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d001      	beq.n	8003de0 <??ZbZclPrependHeader_4>
 8003ddc:	f054 0404 	orrs.w	r4, r4, #4

08003de0 <??ZbZclPrependHeader_4>:
 8003de0:	7898      	ldrb	r0, [r3, #2]
 8003de2:	2801      	cmp	r0, #1
 8003de4:	d101      	bne.n	8003dea <??ZbZclPrependHeader_5>
 8003de6:	f054 0408 	orrs.w	r4, r4, #8

08003dea <??ZbZclPrependHeader_5>:
 8003dea:	78d8      	ldrb	r0, [r3, #3]
 8003dec:	2801      	cmp	r0, #1
 8003dee:	d101      	bne.n	8003df4 <??ZbZclPrependHeader_6>
 8003df0:	f054 0410 	orrs.w	r4, r4, #16

08003df4 <??ZbZclPrependHeader_6>:
 8003df4:	1e6d      	subs	r5, r5, #1
 8003df6:	554c      	strb	r4, [r1, r5]
 8003df8:	1c76      	adds	r6, r6, #1
 8003dfa:	0030      	movs	r0, r6

08003dfc <??ZbZclPrependHeader_1>:
 8003dfc:	bc70      	pop	{r4, r5, r6}
 8003dfe:	4770      	bx	lr

08003e00 <ZbZclAppendHeader>:
 8003e00:	b430      	push	{r4, r5}
 8003e02:	0003      	movs	r3, r0
 8003e04:	2400      	movs	r4, #0
 8003e06:	2500      	movs	r5, #0
 8003e08:	7858      	ldrb	r0, [r3, #1]
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d004      	beq.n	8003e18 <??ZbZclAppendHeader_0>
 8003e0e:	2a05      	cmp	r2, #5
 8003e10:	d202      	bcs.n	8003e18 <??ZbZclAppendHeader_0>
 8003e12:	f05f 30ff 	movs.w	r0, #4294967295
 8003e16:	e02b      	b.n	8003e70 <??ZbZclAppendHeader_1>

08003e18 <??ZbZclAppendHeader_0>:
 8003e18:	2a03      	cmp	r2, #3
 8003e1a:	d202      	bcs.n	8003e22 <??ZbZclAppendHeader_2>
 8003e1c:	f05f 30ff 	movs.w	r0, #4294967295
 8003e20:	e026      	b.n	8003e70 <??ZbZclAppendHeader_1>

08003e22 <??ZbZclAppendHeader_2>:
 8003e22:	7818      	ldrb	r0, [r3, #0]
 8003e24:	f010 0003 	ands.w	r0, r0, #3
 8003e28:	4304      	orrs	r4, r0
 8003e2a:	7858      	ldrb	r0, [r3, #1]
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d001      	beq.n	8003e34 <??ZbZclAppendHeader_3>
 8003e30:	f054 0404 	orrs.w	r4, r4, #4

08003e34 <??ZbZclAppendHeader_3>:
 8003e34:	7898      	ldrb	r0, [r3, #2]
 8003e36:	2801      	cmp	r0, #1
 8003e38:	d101      	bne.n	8003e3e <??ZbZclAppendHeader_4>
 8003e3a:	f054 0408 	orrs.w	r4, r4, #8

08003e3e <??ZbZclAppendHeader_4>:
 8003e3e:	78d8      	ldrb	r0, [r3, #3]
 8003e40:	2801      	cmp	r0, #1
 8003e42:	d101      	bne.n	8003e48 <??ZbZclAppendHeader_5>
 8003e44:	f054 0410 	orrs.w	r4, r4, #16

08003e48 <??ZbZclAppendHeader_5>:
 8003e48:	554c      	strb	r4, [r1, r5]
 8003e4a:	1c6d      	adds	r5, r5, #1
 8003e4c:	7858      	ldrb	r0, [r3, #1]
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d007      	beq.n	8003e62 <??ZbZclAppendHeader_6>
 8003e52:	8898      	ldrh	r0, [r3, #4]
 8003e54:	5548      	strb	r0, [r1, r5]
 8003e56:	1c6d      	adds	r5, r5, #1
 8003e58:	8898      	ldrh	r0, [r3, #4]
 8003e5a:	b280      	uxth	r0, r0
 8003e5c:	0a00      	lsrs	r0, r0, #8
 8003e5e:	5548      	strb	r0, [r1, r5]
 8003e60:	1c6d      	adds	r5, r5, #1

08003e62 <??ZbZclAppendHeader_6>:
 8003e62:	7998      	ldrb	r0, [r3, #6]
 8003e64:	5548      	strb	r0, [r1, r5]
 8003e66:	1c6d      	adds	r5, r5, #1
 8003e68:	79d8      	ldrb	r0, [r3, #7]
 8003e6a:	5548      	strb	r0, [r1, r5]
 8003e6c:	1c6d      	adds	r5, r5, #1
 8003e6e:	0028      	movs	r0, r5

08003e70 <??ZbZclAppendHeader_1>:
 8003e70:	bc30      	pop	{r4, r5}
 8003e72:	4770      	bx	lr

08003e74 <is_little_endian>:
 8003e74:	b081      	sub	sp, #4
 8003e76:	2001      	movs	r0, #1
 8003e78:	f8ad 0000 	strh.w	r0, [sp]
 8003e7c:	4668      	mov	r0, sp
 8003e7e:	7800      	ldrb	r0, [r0, #0]
 8003e80:	2801      	cmp	r0, #1
 8003e82:	d101      	bne.n	8003e88 <??is_little_endian_0>
 8003e84:	2001      	movs	r0, #1
 8003e86:	e000      	b.n	8003e8a <??is_little_endian_1>

08003e88 <??is_little_endian_0>:
 8003e88:	2000      	movs	r0, #0

08003e8a <??is_little_endian_1>:
 8003e8a:	b2c0      	uxtb	r0, r0
 8003e8c:	b001      	add	sp, #4
 8003e8e:	4770      	bx	lr

08003e90 <pletoh16>:
 8003e90:	0001      	movs	r1, r0
 8003e92:	7808      	ldrb	r0, [r1, #0]
 8003e94:	7849      	ldrb	r1, [r1, #1]
 8003e96:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8003e9a:	b280      	uxth	r0, r0
 8003e9c:	4770      	bx	lr

08003e9e <pletoh24>:
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	0004      	movs	r4, r0
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f7ff fff4 	bl	8003e90 <pletoh16>
 8003ea8:	b280      	uxth	r0, r0
 8003eaa:	78a1      	ldrb	r1, [r4, #2]
 8003eac:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <pletoh32>:
 8003eb2:	b538      	push	{r3, r4, r5, lr}
 8003eb4:	0004      	movs	r4, r0
 8003eb6:	0020      	movs	r0, r4
 8003eb8:	f7ff ffea 	bl	8003e90 <pletoh16>
 8003ebc:	0005      	movs	r5, r0
 8003ebe:	b2ad      	uxth	r5, r5
 8003ec0:	1ca0      	adds	r0, r4, #2
 8003ec2:	f7ff ffe5 	bl	8003e90 <pletoh16>
 8003ec6:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8003eca:	0028      	movs	r0, r5
 8003ecc:	bd32      	pop	{r1, r4, r5, pc}

08003ece <pletoh40>:
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	0004      	movs	r4, r0
 8003ed2:	0020      	movs	r0, r4
 8003ed4:	f7ff ffed 	bl	8003eb2 <pletoh32>
 8003ed8:	7921      	ldrb	r1, [r4, #4]
 8003eda:	bd10      	pop	{r4, pc}

08003edc <pletoh48>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	0004      	movs	r4, r0
 8003ee0:	0020      	movs	r0, r4
 8003ee2:	f7ff fff4 	bl	8003ece <pletoh40>
 8003ee6:	7962      	ldrb	r2, [r4, #5]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	0213      	lsls	r3, r2, #8
 8003eec:	2200      	movs	r2, #0
 8003eee:	4310      	orrs	r0, r2
 8003ef0:	4319      	orrs	r1, r3
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <pletoh56>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	0004      	movs	r4, r0
 8003ef8:	0020      	movs	r0, r4
 8003efa:	f7ff ffef 	bl	8003edc <pletoh48>
 8003efe:	79a2      	ldrb	r2, [r4, #6]
 8003f00:	2300      	movs	r3, #0
 8003f02:	0413      	lsls	r3, r2, #16
 8003f04:	2200      	movs	r2, #0
 8003f06:	4310      	orrs	r0, r2
 8003f08:	4319      	orrs	r1, r3
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <pletoh64>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	0005      	movs	r5, r0
 8003f10:	0028      	movs	r0, r5
 8003f12:	f7ff ffce 	bl	8003eb2 <pletoh32>
 8003f16:	0004      	movs	r4, r0
 8003f18:	1d28      	adds	r0, r5, #4
 8003f1a:	f7ff ffca 	bl	8003eb2 <pletoh32>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	0022      	movs	r2, r4
 8003f22:	0010      	movs	r0, r2
 8003f24:	0019      	movs	r1, r3
 8003f26:	bd34      	pop	{r2, r4, r5, pc}

08003f28 <putle16>:
 8003f28:	7001      	strb	r1, [r0, #0]
 8003f2a:	000a      	movs	r2, r1
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	0a12      	lsrs	r2, r2, #8
 8003f30:	7042      	strb	r2, [r0, #1]
 8003f32:	4770      	bx	lr

08003f34 <putle24>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	0004      	movs	r4, r0
 8003f38:	000d      	movs	r5, r1
 8003f3a:	0029      	movs	r1, r5
 8003f3c:	b289      	uxth	r1, r1
 8003f3e:	0020      	movs	r0, r4
 8003f40:	f7ff fff2 	bl	8003f28 <putle16>
 8003f44:	0028      	movs	r0, r5
 8003f46:	0c00      	lsrs	r0, r0, #16
 8003f48:	70a0      	strb	r0, [r4, #2]
 8003f4a:	bd31      	pop	{r0, r4, r5, pc}

08003f4c <putle32>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	0004      	movs	r4, r0
 8003f50:	000d      	movs	r5, r1
 8003f52:	0029      	movs	r1, r5
 8003f54:	0020      	movs	r0, r4
 8003f56:	f7ff ffed 	bl	8003f34 <putle24>
 8003f5a:	0028      	movs	r0, r5
 8003f5c:	0e00      	lsrs	r0, r0, #24
 8003f5e:	70e0      	strb	r0, [r4, #3]
 8003f60:	bd31      	pop	{r0, r4, r5, pc}

08003f62 <putle40>:
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	0006      	movs	r6, r0
 8003f66:	0014      	movs	r4, r2
 8003f68:	001d      	movs	r5, r3
 8003f6a:	0021      	movs	r1, r4
 8003f6c:	0030      	movs	r0, r6
 8003f6e:	f7ff ffed 	bl	8003f4c <putle32>
 8003f72:	7135      	strb	r5, [r6, #4]
 8003f74:	bd70      	pop	{r4, r5, r6, pc}

08003f76 <putle48>:
 8003f76:	b570      	push	{r4, r5, r6, lr}
 8003f78:	0006      	movs	r6, r0
 8003f7a:	0014      	movs	r4, r2
 8003f7c:	001d      	movs	r5, r3
 8003f7e:	0022      	movs	r2, r4
 8003f80:	002b      	movs	r3, r5
 8003f82:	0030      	movs	r0, r6
 8003f84:	f7ff ffed 	bl	8003f62 <putle40>
 8003f88:	0020      	movs	r0, r4
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	0a08      	lsrs	r0, r1, #8
 8003f8e:	2100      	movs	r1, #0
 8003f90:	7170      	strb	r0, [r6, #5]
 8003f92:	bd70      	pop	{r4, r5, r6, pc}

08003f94 <putle56>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	0006      	movs	r6, r0
 8003f98:	0014      	movs	r4, r2
 8003f9a:	001d      	movs	r5, r3
 8003f9c:	0022      	movs	r2, r4
 8003f9e:	002b      	movs	r3, r5
 8003fa0:	0030      	movs	r0, r6
 8003fa2:	f7ff ffe8 	bl	8003f76 <putle48>
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	0029      	movs	r1, r5
 8003faa:	0c08      	lsrs	r0, r1, #16
 8003fac:	2100      	movs	r1, #0
 8003fae:	71b0      	strb	r0, [r6, #6]
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}

08003fb2 <putle64>:
 8003fb2:	b570      	push	{r4, r5, r6, lr}
 8003fb4:	0006      	movs	r6, r0
 8003fb6:	0014      	movs	r4, r2
 8003fb8:	001d      	movs	r5, r3
 8003fba:	0022      	movs	r2, r4
 8003fbc:	002b      	movs	r3, r5
 8003fbe:	0030      	movs	r0, r6
 8003fc0:	f7ff ffe8 	bl	8003f94 <putle56>
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	0029      	movs	r1, r5
 8003fc8:	0e08      	lsrs	r0, r1, #24
 8003fca:	2100      	movs	r1, #0
 8003fcc:	71f0      	strb	r0, [r6, #7]
 8003fce:	bd70      	pop	{r4, r5, r6, pc}

08003fd0 <ZbZclAppendFloat>:
 8003fd0:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd4:	b081      	sub	sp, #4
 8003fd6:	ed2d 8b04 	vpush	{d8-d9}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	eeb0 8a40 	vmov.f32	s16, s0
 8003fe0:	eef0 8a60 	vmov.f32	s17, s1
 8003fe4:	000e      	movs	r6, r1
 8003fe6:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8003fea:	2838      	cmp	r0, #56	@ 0x38
 8003fec:	d149      	bne.n	8004082 <??ZbZclAppendFloat_0>
 8003fee:	2400      	movs	r4, #0
 8003ff0:	2510      	movs	r5, #16
 8003ff2:	f07f 070e 	mvns.w	r7, #14
 8003ff6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003ff8:	2802      	cmp	r0, #2
 8003ffa:	d202      	bcs.n	8004002 <??ZbZclAppendFloat_1>
 8003ffc:	f05f 30ff 	movs.w	r0, #4294967295
 8004000:	e120      	b.n	8004244 <??ZbZclAppendFloat_2>

08004002 <??ZbZclAppendFloat_1>:
 8004002:	003a      	movs	r2, r7
 8004004:	0029      	movs	r1, r5
 8004006:	4668      	mov	r0, sp
 8004008:	eeb0 0a48 	vmov.f32	s0, s16
 800400c:	eef0 0a68 	vmov.f32	s1, s17
 8004010:	f000 fb08 	bl	8004624 <ZbZclFloatFrexp>
 8004014:	eeb0 9a40 	vmov.f32	s18, s0
 8004018:	eef0 9a60 	vmov.f32	s19, s1
 800401c:	f8dd 8000 	ldr.w	r8, [sp]
 8004020:	ebb8 0807 	subs.w	r8, r8, r7
 8004024:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8004028:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 800402c:	ec51 0b19 	vmov	r0, r1, d9
 8004030:	2200      	movs	r2, #0
 8004032:	2300      	movs	r3, #0
 8004034:	f001 f904 	bl	8005240 <__aeabi_cdcmpeq>
 8004038:	d210      	bcs.n	800405c <??ZbZclAppendFloat_3>
 800403a:	ec51 0b19 	vmov	r0, r1, d9
 800403e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004042:	f001 f937 	bl	80052b4 <__aeabi_d2iz>
 8004046:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800404a:	fb10 f101 	smulbb	r1, r0, r1
 800404e:	0589      	lsls	r1, r1, #22
 8004050:	0d89      	lsrs	r1, r1, #22
 8004052:	ea58 0101 	orrs.w	r1, r8, r1
 8004056:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 800405a:	e00b      	b.n	8004074 <??ZbZclAppendFloat_4>

0800405c <??ZbZclAppendFloat_3>:
 800405c:	ec51 0b19 	vmov	r0, r1, d9
 8004060:	f001 f928 	bl	80052b4 <__aeabi_d2iz>
 8004064:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004068:	fb10 f101 	smulbb	r1, r0, r1
 800406c:	0589      	lsls	r1, r1, #22
 800406e:	0d89      	lsrs	r1, r1, #22
 8004070:	ea58 0101 	orrs.w	r1, r8, r1

08004074 <??ZbZclAppendFloat_4>:
 8004074:	7031      	strb	r1, [r6, #0]
 8004076:	0008      	movs	r0, r1
 8004078:	b280      	uxth	r0, r0
 800407a:	0a00      	lsrs	r0, r0, #8
 800407c:	7070      	strb	r0, [r6, #1]
 800407e:	2002      	movs	r0, #2
 8004080:	e0e0      	b.n	8004244 <??ZbZclAppendFloat_2>

08004082 <??ZbZclAppendFloat_0>:
 8004082:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004086:	2839      	cmp	r0, #57	@ 0x39
 8004088:	d14e      	bne.n	8004128 <??ZbZclAppendFloat_5>
 800408a:	2400      	movs	r4, #0
 800408c:	2580      	movs	r5, #128	@ 0x80
 800408e:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 8004092:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004094:	2804      	cmp	r0, #4
 8004096:	d202      	bcs.n	800409e <??ZbZclAppendFloat_6>
 8004098:	f05f 30ff 	movs.w	r0, #4294967295
 800409c:	e0d2      	b.n	8004244 <??ZbZclAppendFloat_2>

0800409e <??ZbZclAppendFloat_6>:
 800409e:	003a      	movs	r2, r7
 80040a0:	0029      	movs	r1, r5
 80040a2:	4668      	mov	r0, sp
 80040a4:	eeb0 0a48 	vmov.f32	s0, s16
 80040a8:	eef0 0a68 	vmov.f32	s1, s17
 80040ac:	f000 faba 	bl	8004624 <ZbZclFloatFrexp>
 80040b0:	eeb0 9a40 	vmov.f32	s18, s0
 80040b4:	eef0 9a60 	vmov.f32	s19, s1
 80040b8:	f8dd 8000 	ldr.w	r8, [sp]
 80040bc:	ebb8 0807 	subs.w	r8, r8, r7
 80040c0:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 80040c4:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 80040c8:	ec51 0b19 	vmov	r0, r1, d9
 80040cc:	2200      	movs	r2, #0
 80040ce:	2300      	movs	r3, #0
 80040d0:	f001 f8b6 	bl	8005240 <__aeabi_cdcmpeq>
 80040d4:	d210      	bcs.n	80040f8 <??ZbZclAppendFloat_7>
 80040d6:	ec51 0b19 	vmov	r0, r1, d9
 80040da:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80040de:	f001 f911 	bl	8005304 <__aeabi_d2uiz>
 80040e2:	0001      	movs	r1, r0
 80040e4:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 80040e8:	4341      	muls	r1, r0
 80040ea:	0249      	lsls	r1, r1, #9
 80040ec:	0a49      	lsrs	r1, r1, #9
 80040ee:	ea58 0101 	orrs.w	r1, r8, r1
 80040f2:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 80040f6:	e00b      	b.n	8004110 <??ZbZclAppendFloat_8>

080040f8 <??ZbZclAppendFloat_7>:
 80040f8:	ec51 0b19 	vmov	r0, r1, d9
 80040fc:	f001 f902 	bl	8005304 <__aeabi_d2uiz>
 8004100:	0001      	movs	r1, r0
 8004102:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8004106:	4341      	muls	r1, r0
 8004108:	0249      	lsls	r1, r1, #9
 800410a:	0a49      	lsrs	r1, r1, #9
 800410c:	ea58 0101 	orrs.w	r1, r8, r1

08004110 <??ZbZclAppendFloat_8>:
 8004110:	7031      	strb	r1, [r6, #0]
 8004112:	0008      	movs	r0, r1
 8004114:	0a00      	lsrs	r0, r0, #8
 8004116:	7070      	strb	r0, [r6, #1]
 8004118:	0008      	movs	r0, r1
 800411a:	0c00      	lsrs	r0, r0, #16
 800411c:	70b0      	strb	r0, [r6, #2]
 800411e:	0008      	movs	r0, r1
 8004120:	0e00      	lsrs	r0, r0, #24
 8004122:	70f0      	strb	r0, [r6, #3]
 8004124:	2004      	movs	r0, #4
 8004126:	e08d      	b.n	8004244 <??ZbZclAppendFloat_2>

08004128 <??ZbZclAppendFloat_5>:
 8004128:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800412c:	283a      	cmp	r0, #58	@ 0x3a
 800412e:	f040 8087 	bne.w	8004240 <??ZbZclAppendFloat_9>
 8004132:	2400      	movs	r4, #0
 8004134:	2500      	movs	r5, #0
 8004136:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 800413a:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8004880 <??DataTable3>
 800413e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004140:	2808      	cmp	r0, #8
 8004142:	d202      	bcs.n	800414a <??ZbZclAppendFloat_10>
 8004144:	f05f 30ff 	movs.w	r0, #4294967295
 8004148:	e07c      	b.n	8004244 <??ZbZclAppendFloat_2>

0800414a <??ZbZclAppendFloat_10>:
 800414a:	4642      	mov	r2, r8
 800414c:	0039      	movs	r1, r7
 800414e:	4668      	mov	r0, sp
 8004150:	eeb0 0a48 	vmov.f32	s0, s16
 8004154:	eef0 0a68 	vmov.f32	s1, s17
 8004158:	f000 fa64 	bl	8004624 <ZbZclFloatFrexp>
 800415c:	eeb0 9a40 	vmov.f32	s18, s0
 8004160:	eef0 9a60 	vmov.f32	s19, s1
 8004164:	9800      	ldr	r0, [sp, #0]
 8004166:	17c1      	asrs	r1, r0, #31
 8004168:	ea5f 79e8 	movs.w	r9, r8, asr #31
 800416c:	ebb0 0008 	subs.w	r0, r0, r8
 8004170:	eb71 0109 	sbcs.w	r1, r1, r9
 8004174:	0501      	lsls	r1, r0, #20
 8004176:	2000      	movs	r0, #0
 8004178:	2200      	movs	r2, #0
 800417a:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 8004884 <??DataTable3_1>
 800417e:	4010      	ands	r0, r2
 8004180:	4019      	ands	r1, r3
 8004182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004186:	ec51 0b19 	vmov	r0, r1, d9
 800418a:	2200      	movs	r2, #0
 800418c:	2300      	movs	r3, #0
 800418e:	f001 f857 	bl	8005240 <__aeabi_cdcmpeq>
 8004192:	d21f      	bcs.n	80041d4 <??ZbZclAppendFloat_11>
 8004194:	ec51 0b19 	vmov	r0, r1, d9
 8004198:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800419c:	f001 f902 	bl	80053a4 <__aeabi_d2ulz>
 80041a0:	2200      	movs	r2, #0
 80041a2:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 80041a6:	fba2 ab00 	umull	sl, fp, r2, r0
 80041aa:	fb02 bb01 	mla	fp, r2, r1, fp
 80041ae:	fb03 bb00 	mla	fp, r3, r0, fp
 80041b2:	f05f 30ff 	movs.w	r0, #4294967295
 80041b6:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8004888 <??DataTable3_2>
 80041ba:	ea1a 0000 	ands.w	r0, sl, r0
 80041be:	ea1b 0101 	ands.w	r1, fp, r1
 80041c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041c6:	4310      	orrs	r0, r2
 80041c8:	4319      	orrs	r1, r3
 80041ca:	f050 0200 	orrs.w	r2, r0, #0
 80041ce:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 80041d2:	e018      	b.n	8004206 <??ZbZclAppendFloat_12>

080041d4 <??ZbZclAppendFloat_11>:
 80041d4:	ec51 0b19 	vmov	r0, r1, d9
 80041d8:	f001 f8e4 	bl	80053a4 <__aeabi_d2ulz>
 80041dc:	2200      	movs	r2, #0
 80041de:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 80041e2:	fba2 ab00 	umull	sl, fp, r2, r0
 80041e6:	fb02 bb01 	mla	fp, r2, r1, fp
 80041ea:	fb03 bb00 	mla	fp, r3, r0, fp
 80041ee:	f05f 30ff 	movs.w	r0, #4294967295
 80041f2:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8004888 <??DataTable3_2>
 80041f6:	ea1a 0000 	ands.w	r0, sl, r0
 80041fa:	ea1b 0101 	ands.w	r1, fp, r1
 80041fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004202:	4302      	orrs	r2, r0
 8004204:	430b      	orrs	r3, r1

08004206 <??ZbZclAppendFloat_12>:
 8004206:	7032      	strb	r2, [r6, #0]
 8004208:	0010      	movs	r0, r2
 800420a:	b280      	uxth	r0, r0
 800420c:	0a00      	lsrs	r0, r0, #8
 800420e:	7070      	strb	r0, [r6, #1]
 8004210:	0010      	movs	r0, r2
 8004212:	0c00      	lsrs	r0, r0, #16
 8004214:	70b0      	strb	r0, [r6, #2]
 8004216:	0010      	movs	r0, r2
 8004218:	0e00      	lsrs	r0, r0, #24
 800421a:	70f0      	strb	r0, [r6, #3]
 800421c:	7133      	strb	r3, [r6, #4]
 800421e:	0010      	movs	r0, r2
 8004220:	0019      	movs	r1, r3
 8004222:	0a08      	lsrs	r0, r1, #8
 8004224:	2100      	movs	r1, #0
 8004226:	7170      	strb	r0, [r6, #5]
 8004228:	0010      	movs	r0, r2
 800422a:	0019      	movs	r1, r3
 800422c:	0c08      	lsrs	r0, r1, #16
 800422e:	2100      	movs	r1, #0
 8004230:	71b0      	strb	r0, [r6, #6]
 8004232:	0010      	movs	r0, r2
 8004234:	0019      	movs	r1, r3
 8004236:	0e08      	lsrs	r0, r1, #24
 8004238:	2100      	movs	r1, #0
 800423a:	71f0      	strb	r0, [r6, #7]
 800423c:	2008      	movs	r0, #8
 800423e:	e001      	b.n	8004244 <??ZbZclAppendFloat_2>

08004240 <??ZbZclAppendFloat_9>:
 8004240:	f05f 30ff 	movs.w	r0, #4294967295

08004244 <??ZbZclAppendFloat_2>:
 8004244:	b004      	add	sp, #16
 8004246:	ecbd 8b04 	vpop	{d8-d9}
 800424a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800424e <ZbZclParseFloat>:
 800424e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004252:	ed2d 8b02 	vpush	{d8}
 8004256:	000e      	movs	r6, r1
 8004258:	4691      	mov	r9, r2
 800425a:	2000      	movs	r0, #0
 800425c:	f889 0000 	strb.w	r0, [r9]
 8004260:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004264:	2838      	cmp	r0, #56	@ 0x38
 8004266:	d006      	beq.n	8004276 <??ZbZclParseFloat_0>
 8004268:	f0c0 8138 	bcc.w	80044dc <??ZbZclParseFloat_1>
 800426c:	283a      	cmp	r0, #58	@ 0x3a
 800426e:	f000 80ad 	beq.w	80043cc <??ZbZclParseFloat_2>
 8004272:	d354      	bcc.n	800431e <??ZbZclParseFloat_3>
 8004274:	e132      	b.n	80044dc <??ZbZclParseFloat_1>

08004276 <??ZbZclParseFloat_0>:
 8004276:	0030      	movs	r0, r6
 8004278:	f7ff fe0a 	bl	8003e90 <pletoh16>
 800427c:	0004      	movs	r4, r0
 800427e:	0020      	movs	r0, r4
 8004280:	b280      	uxth	r0, r0
 8004282:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 8004286:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 800428a:	d121      	bne.n	80042d0 <??ZbZclParseFloat_4>
 800428c:	05a0      	lsls	r0, r4, #22
 800428e:	d008      	beq.n	80042a2 <??ZbZclParseFloat_5>
 8004290:	2000      	movs	r0, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	f000 fe9c 	bl	8004fd4 <__aeabi_ddiv>
 800429c:	ec41 0b10 	vmov	d0, r0, r1
 80042a0:	e127      	b.n	80044f2 <??ZbZclParseFloat_6>

080042a2 <??ZbZclParseFloat_5>:
 80042a2:	0420      	lsls	r0, r4, #16
 80042a4:	d50a      	bpl.n	80042bc <??ZbZclParseFloat_7>
 80042a6:	2000      	movs	r0, #0
 80042a8:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 800488c <??DataTable3_3>
 80042ac:	2200      	movs	r2, #0
 80042ae:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80042b2:	f000 fe8f 	bl	8004fd4 <__aeabi_ddiv>
 80042b6:	ec41 0b10 	vmov	d0, r0, r1
 80042ba:	e008      	b.n	80042ce <??ZbZclParseFloat_8>

080042bc <??ZbZclParseFloat_7>:
 80042bc:	2000      	movs	r0, #0
 80042be:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 800488c <??DataTable3_3>
 80042c2:	2200      	movs	r2, #0
 80042c4:	2300      	movs	r3, #0
 80042c6:	f000 fe85 	bl	8004fd4 <__aeabi_ddiv>
 80042ca:	ec41 0b10 	vmov	d0, r0, r1

080042ce <??ZbZclParseFloat_8>:
 80042ce:	e110      	b.n	80044f2 <??ZbZclParseFloat_6>

080042d0 <??ZbZclParseFloat_4>:
 80042d0:	f3c4 2884 	ubfx	r8, r4, #10, #5
 80042d4:	4645      	mov	r5, r8
 80042d6:	b2ad      	uxth	r5, r5
 80042d8:	3d0f      	subs	r5, #15
 80042da:	3d0a      	subs	r5, #10
 80042dc:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 80042e0:	d004      	beq.n	80042ec <??ZbZclParseFloat_9>
 80042e2:	05a7      	lsls	r7, r4, #22
 80042e4:	0dbf      	lsrs	r7, r7, #22
 80042e6:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 80042ea:	e002      	b.n	80042f2 <??ZbZclParseFloat_10>

080042ec <??ZbZclParseFloat_9>:
 80042ec:	1c6d      	adds	r5, r5, #1
 80042ee:	05a7      	lsls	r7, r4, #22
 80042f0:	0dbf      	lsrs	r7, r7, #22

080042f2 <??ZbZclParseFloat_10>:
 80042f2:	0038      	movs	r0, r7
 80042f4:	b280      	uxth	r0, r0
 80042f6:	f000 fcc9 	bl	8004c8c <__aeabi_ui2d>
 80042fa:	ec41 0b18 	vmov	d8, r0, r1
 80042fe:	0420      	lsls	r0, r4, #16
 8004300:	d505      	bpl.n	800430e <??ZbZclParseFloat_11>
 8004302:	ec51 0b18 	vmov	r0, r1, d8
 8004306:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800430a:	ec41 0b18 	vmov	d8, r0, r1

0800430e <??ZbZclParseFloat_11>:
 800430e:	0028      	movs	r0, r5
 8004310:	eeb0 0a48 	vmov.f32	s0, s16
 8004314:	eef0 0a68 	vmov.f32	s1, s17
 8004318:	f000 f8ef 	bl	80044fa <ZbZclFloatLdexp>
 800431c:	e0e9      	b.n	80044f2 <??ZbZclParseFloat_6>

0800431e <??ZbZclParseFloat_3>:
 800431e:	0030      	movs	r0, r6
 8004320:	f7ff fdc7 	bl	8003eb2 <pletoh32>
 8004324:	0004      	movs	r4, r0
 8004326:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 800432a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800432e:	d121      	bne.n	8004374 <??ZbZclParseFloat_12>
 8004330:	0260      	lsls	r0, r4, #9
 8004332:	d008      	beq.n	8004346 <??ZbZclParseFloat_13>
 8004334:	2000      	movs	r0, #0
 8004336:	2100      	movs	r1, #0
 8004338:	2200      	movs	r2, #0
 800433a:	2300      	movs	r3, #0
 800433c:	f000 fe4a 	bl	8004fd4 <__aeabi_ddiv>
 8004340:	ec41 0b10 	vmov	d0, r0, r1
 8004344:	e0d5      	b.n	80044f2 <??ZbZclParseFloat_6>

08004346 <??ZbZclParseFloat_13>:
 8004346:	2c00      	cmp	r4, #0
 8004348:	d50a      	bpl.n	8004360 <??ZbZclParseFloat_14>
 800434a:	2000      	movs	r0, #0
 800434c:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 800488c <??DataTable3_3>
 8004350:	2200      	movs	r2, #0
 8004352:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004356:	f000 fe3d 	bl	8004fd4 <__aeabi_ddiv>
 800435a:	ec41 0b10 	vmov	d0, r0, r1
 800435e:	e008      	b.n	8004372 <??ZbZclParseFloat_15>

08004360 <??ZbZclParseFloat_14>:
 8004360:	2000      	movs	r0, #0
 8004362:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 800488c <??DataTable3_3>
 8004366:	2200      	movs	r2, #0
 8004368:	2300      	movs	r3, #0
 800436a:	f000 fe33 	bl	8004fd4 <__aeabi_ddiv>
 800436e:	ec41 0b10 	vmov	d0, r0, r1

08004372 <??ZbZclParseFloat_15>:
 8004372:	e0be      	b.n	80044f2 <??ZbZclParseFloat_6>

08004374 <??ZbZclParseFloat_12>:
 8004374:	0025      	movs	r5, r4
 8004376:	0ded      	lsrs	r5, r5, #23
 8004378:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 800437c:	002f      	movs	r7, r5
 800437e:	b2bf      	uxth	r7, r7
 8004380:	3f7f      	subs	r7, #127	@ 0x7f
 8004382:	3f17      	subs	r7, #23
 8004384:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8004388:	d006      	beq.n	8004398 <??ZbZclParseFloat_16>
 800438a:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800438e:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8004392:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 8004396:	e004      	b.n	80043a2 <??ZbZclParseFloat_17>

08004398 <??ZbZclParseFloat_16>:
 8004398:	1c7f      	adds	r7, r7, #1
 800439a:	ea5f 2844 	movs.w	r8, r4, lsl #9
 800439e:	ea5f 2858 	movs.w	r8, r8, lsr #9

080043a2 <??ZbZclParseFloat_17>:
 80043a2:	4640      	mov	r0, r8
 80043a4:	f000 fc72 	bl	8004c8c <__aeabi_ui2d>
 80043a8:	ec41 0b18 	vmov	d8, r0, r1
 80043ac:	2c00      	cmp	r4, #0
 80043ae:	d505      	bpl.n	80043bc <??ZbZclParseFloat_18>
 80043b0:	ec51 0b18 	vmov	r0, r1, d8
 80043b4:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80043b8:	ec41 0b18 	vmov	d8, r0, r1

080043bc <??ZbZclParseFloat_18>:
 80043bc:	0038      	movs	r0, r7
 80043be:	eeb0 0a48 	vmov.f32	s0, s16
 80043c2:	eef0 0a68 	vmov.f32	s1, s17
 80043c6:	f000 f898 	bl	80044fa <ZbZclFloatLdexp>
 80043ca:	e092      	b.n	80044f2 <??ZbZclParseFloat_6>

080043cc <??ZbZclParseFloat_2>:
 80043cc:	0030      	movs	r0, r6
 80043ce:	f7ff fd9d 	bl	8003f0c <pletoh64>
 80043d2:	0004      	movs	r4, r0
 80043d4:	000d      	movs	r5, r1
 80043d6:	2000      	movs	r0, #0
 80043d8:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 8004884 <??DataTable3_1>
 80043dc:	ea14 0200 	ands.w	r2, r4, r0
 80043e0:	ea15 0301 	ands.w	r3, r5, r1
 80043e4:	f05f 0a00 	movs.w	sl, #0
 80043e8:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 8004884 <??DataTable3_1>
 80043ec:	455b      	cmp	r3, fp
 80043ee:	d131      	bne.n	8004454 <??ZbZclParseFloat_19>
 80043f0:	4552      	cmp	r2, sl
 80043f2:	d12f      	bne.n	8004454 <??ZbZclParseFloat_19>
 80043f4:	f05f 30ff 	movs.w	r0, #4294967295
 80043f8:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8004888 <??DataTable3_2>
 80043fc:	4020      	ands	r0, r4
 80043fe:	4029      	ands	r1, r5
 8004400:	2900      	cmp	r1, #0
 8004402:	d101      	bne.n	8004408 <??ZbZclParseFloat_20>
 8004404:	2800      	cmp	r0, #0
 8004406:	d008      	beq.n	800441a <??ZbZclParseFloat_21>

08004408 <??ZbZclParseFloat_20>:
 8004408:	2000      	movs	r0, #0
 800440a:	2100      	movs	r1, #0
 800440c:	2200      	movs	r2, #0
 800440e:	2300      	movs	r3, #0
 8004410:	f000 fde0 	bl	8004fd4 <__aeabi_ddiv>
 8004414:	ec41 0b10 	vmov	d0, r0, r1
 8004418:	e06b      	b.n	80044f2 <??ZbZclParseFloat_6>

0800441a <??ZbZclParseFloat_21>:
 800441a:	f014 0000 	ands.w	r0, r4, #0
 800441e:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8004422:	2900      	cmp	r1, #0
 8004424:	d101      	bne.n	800442a <??ZbZclParseFloat_22>
 8004426:	2800      	cmp	r0, #0
 8004428:	d00a      	beq.n	8004440 <??ZbZclParseFloat_23>

0800442a <??ZbZclParseFloat_22>:
 800442a:	2000      	movs	r0, #0
 800442c:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 800488c <??DataTable3_3>
 8004430:	2200      	movs	r2, #0
 8004432:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004436:	f000 fdcd 	bl	8004fd4 <__aeabi_ddiv>
 800443a:	ec41 0b10 	vmov	d0, r0, r1
 800443e:	e008      	b.n	8004452 <??ZbZclParseFloat_24>

08004440 <??ZbZclParseFloat_23>:
 8004440:	2000      	movs	r0, #0
 8004442:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 800488c <??DataTable3_3>
 8004446:	2200      	movs	r2, #0
 8004448:	2300      	movs	r3, #0
 800444a:	f000 fdc3 	bl	8004fd4 <__aeabi_ddiv>
 800444e:	ec41 0b10 	vmov	d0, r0, r1

08004452 <??ZbZclParseFloat_24>:
 8004452:	e04e      	b.n	80044f2 <??ZbZclParseFloat_6>

08004454 <??ZbZclParseFloat_19>:
 8004454:	0022      	movs	r2, r4
 8004456:	002b      	movs	r3, r5
 8004458:	0d1a      	lsrs	r2, r3, #20
 800445a:	2300      	movs	r3, #0
 800445c:	4690      	mov	r8, r2
 800445e:	ea5f 5848 	movs.w	r8, r8, lsl #21
 8004462:	ea5f 5858 	movs.w	r8, r8, lsr #21
 8004466:	4647      	mov	r7, r8
 8004468:	b2bf      	uxth	r7, r7
 800446a:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 800446e:	3f34      	subs	r7, #52	@ 0x34
 8004470:	4020      	ands	r0, r4
 8004472:	4029      	ands	r1, r5
 8004474:	2900      	cmp	r1, #0
 8004476:	d101      	bne.n	800447c <??ZbZclParseFloat_25>
 8004478:	2800      	cmp	r0, #0
 800447a:	d00a      	beq.n	8004492 <??ZbZclParseFloat_26>

0800447c <??ZbZclParseFloat_25>:
 800447c:	f05f 30ff 	movs.w	r0, #4294967295
 8004480:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8004888 <??DataTable3_2>
 8004484:	4020      	ands	r0, r4
 8004486:	4029      	ands	r1, r5
 8004488:	f110 0a00 	adds.w	sl, r0, #0
 800448c:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 8004490:	e008      	b.n	80044a4 <??ZbZclParseFloat_27>

08004492 <??ZbZclParseFloat_26>:
 8004492:	1c7f      	adds	r7, r7, #1
 8004494:	f05f 30ff 	movs.w	r0, #4294967295
 8004498:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8004888 <??DataTable3_2>
 800449c:	ea14 0a00 	ands.w	sl, r4, r0
 80044a0:	ea15 0b01 	ands.w	fp, r5, r1

080044a4 <??ZbZclParseFloat_27>:
 80044a4:	4650      	mov	r0, sl
 80044a6:	4659      	mov	r1, fp
 80044a8:	f000 fc34 	bl	8004d14 <__aeabi_ul2d>
 80044ac:	ec41 0b18 	vmov	d8, r0, r1
 80044b0:	f014 0000 	ands.w	r0, r4, #0
 80044b4:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d101      	bne.n	80044c0 <??ZbZclParseFloat_28>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d005      	beq.n	80044cc <??ZbZclParseFloat_29>

080044c0 <??ZbZclParseFloat_28>:
 80044c0:	ec51 0b18 	vmov	r0, r1, d8
 80044c4:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80044c8:	ec41 0b18 	vmov	d8, r0, r1

080044cc <??ZbZclParseFloat_29>:
 80044cc:	0038      	movs	r0, r7
 80044ce:	eeb0 0a48 	vmov.f32	s0, s16
 80044d2:	eef0 0a68 	vmov.f32	s1, s17
 80044d6:	f000 f810 	bl	80044fa <ZbZclFloatLdexp>
 80044da:	e00a      	b.n	80044f2 <??ZbZclParseFloat_6>

080044dc <??ZbZclParseFloat_1>:
 80044dc:	208d      	movs	r0, #141	@ 0x8d
 80044de:	f889 0000 	strb.w	r0, [r9]
 80044e2:	2000      	movs	r0, #0
 80044e4:	2100      	movs	r1, #0
 80044e6:	2200      	movs	r2, #0
 80044e8:	2300      	movs	r3, #0
 80044ea:	f000 fd73 	bl	8004fd4 <__aeabi_ddiv>
 80044ee:	ec41 0b10 	vmov	d0, r0, r1

080044f2 <??ZbZclParseFloat_6>:
 80044f2:	ecbd 8b02 	vpop	{d8}
 80044f6:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080044fa <ZbZclFloatLdexp>:
 80044fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fe:	ed2d 8b04 	vpush	{d8-d9}
 8004502:	b084      	sub	sp, #16
 8004504:	eeb0 8a40 	vmov.f32	s16, s0
 8004508:	eef0 8a60 	vmov.f32	s17, s1
 800450c:	0006      	movs	r6, r0
 800450e:	2730      	movs	r7, #48	@ 0x30
 8004510:	ec53 2b18 	vmov	r2, r3, d8
 8004514:	ec51 0b18 	vmov	r0, r1, d8
 8004518:	f000 fe92 	bl	8005240 <__aeabi_cdcmpeq>
 800451c:	d10c      	bne.n	8004538 <??ZbZclFloatLdexp_0>
 800451e:	ec53 2b18 	vmov	r2, r3, d8
 8004522:	ec51 0b18 	vmov	r0, r1, d8
 8004526:	f000 fa75 	bl	8004a14 <__adddf3>
 800452a:	0002      	movs	r2, r0
 800452c:	000b      	movs	r3, r1
 800452e:	ec51 0b18 	vmov	r0, r1, d8
 8004532:	f000 fe85 	bl	8005240 <__aeabi_cdcmpeq>
 8004536:	d104      	bne.n	8004542 <??ZbZclFloatLdexp_1>

08004538 <??ZbZclFloatLdexp_0>:
 8004538:	eeb0 0a48 	vmov.f32	s0, s16
 800453c:	eef0 0a68 	vmov.f32	s1, s17
 8004540:	e06b      	b.n	800461a <??ZbZclFloatLdexp_2>

08004542 <??ZbZclFloatLdexp_1>:
 8004542:	2e01      	cmp	r6, #1
 8004544:	db2c      	blt.n	80045a0 <??ZbZclFloatLdexp_3>
 8004546:	2401      	movs	r4, #1
 8004548:	2500      	movs	r5, #0
 800454a:	0020      	movs	r0, r4
 800454c:	0029      	movs	r1, r5
 800454e:	003a      	movs	r2, r7
 8004550:	f000 fa4e 	bl	80049f0 <__aeabi_llsl>
 8004554:	4680      	mov	r8, r0
 8004556:	4689      	mov	r9, r1
 8004558:	4640      	mov	r0, r8
 800455a:	4649      	mov	r1, r9
 800455c:	f000 fbda 	bl	8004d14 <__aeabi_ul2d>
 8004560:	ec41 0b19 	vmov	d9, r0, r1

08004564 <??ZbZclFloatLdexp_4>:
 8004564:	42be      	cmp	r6, r7
 8004566:	db09      	blt.n	800457c <??ZbZclFloatLdexp_5>
 8004568:	ec51 0b18 	vmov	r0, r1, d8
 800456c:	ec53 2b19 	vmov	r2, r3, d9
 8004570:	f000 fc06 	bl	8004d80 <__aeabi_dmul>
 8004574:	ec41 0b18 	vmov	d8, r0, r1
 8004578:	1bf6      	subs	r6, r6, r7
 800457a:	e7f3      	b.n	8004564 <??ZbZclFloatLdexp_4>

0800457c <??ZbZclFloatLdexp_5>:
 800457c:	0020      	movs	r0, r4
 800457e:	0029      	movs	r1, r5
 8004580:	0032      	movs	r2, r6
 8004582:	f000 fa35 	bl	80049f0 <__aeabi_llsl>
 8004586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800458a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800458e:	f000 fbc1 	bl	8004d14 <__aeabi_ul2d>
 8004592:	ec53 2b18 	vmov	r2, r3, d8
 8004596:	f000 fbf3 	bl	8004d80 <__aeabi_dmul>
 800459a:	ec41 0b18 	vmov	d8, r0, r1
 800459e:	e038      	b.n	8004612 <??ZbZclFloatLdexp_6>

080045a0 <??ZbZclFloatLdexp_3>:
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	d536      	bpl.n	8004612 <??ZbZclFloatLdexp_6>
 80045a4:	2401      	movs	r4, #1
 80045a6:	2500      	movs	r5, #0
 80045a8:	0020      	movs	r0, r4
 80045aa:	0029      	movs	r1, r5
 80045ac:	003a      	movs	r2, r7
 80045ae:	f000 fa1f 	bl	80049f0 <__aeabi_llsl>
 80045b2:	4682      	mov	sl, r0
 80045b4:	468b      	mov	fp, r1
 80045b6:	4650      	mov	r0, sl
 80045b8:	4659      	mov	r1, fp
 80045ba:	f000 fbab 	bl	8004d14 <__aeabi_ul2d>
 80045be:	0002      	movs	r2, r0
 80045c0:	000b      	movs	r3, r1
 80045c2:	2000      	movs	r0, #0
 80045c4:	49b1      	ldr	r1, [pc, #708]	@ (800488c <??DataTable3_3>)
 80045c6:	f000 fd05 	bl	8004fd4 <__aeabi_ddiv>
 80045ca:	ec41 0b19 	vmov	d9, r0, r1
 80045ce:	f1d6 0800 	rsbs	r8, r6, #0

080045d2 <??ZbZclFloatLdexp_7>:
 80045d2:	45b8      	cmp	r8, r7
 80045d4:	db0a      	blt.n	80045ec <??ZbZclFloatLdexp_8>
 80045d6:	ec53 2b18 	vmov	r2, r3, d8
 80045da:	ec51 0b19 	vmov	r0, r1, d9
 80045de:	f000 fbcf 	bl	8004d80 <__aeabi_dmul>
 80045e2:	ec41 0b18 	vmov	d8, r0, r1
 80045e6:	ebb8 0807 	subs.w	r8, r8, r7
 80045ea:	e7f2      	b.n	80045d2 <??ZbZclFloatLdexp_7>

080045ec <??ZbZclFloatLdexp_8>:
 80045ec:	0020      	movs	r0, r4
 80045ee:	0029      	movs	r1, r5
 80045f0:	4642      	mov	r2, r8
 80045f2:	f000 f9fd 	bl	80049f0 <__aeabi_llsl>
 80045f6:	e9cd 0100 	strd	r0, r1, [sp]
 80045fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045fe:	f000 fb89 	bl	8004d14 <__aeabi_ul2d>
 8004602:	0002      	movs	r2, r0
 8004604:	000b      	movs	r3, r1
 8004606:	ec51 0b18 	vmov	r0, r1, d8
 800460a:	f000 fce3 	bl	8004fd4 <__aeabi_ddiv>
 800460e:	ec41 0b18 	vmov	d8, r0, r1

08004612 <??ZbZclFloatLdexp_6>:
 8004612:	eeb0 0a48 	vmov.f32	s0, s16
 8004616:	eef0 0a68 	vmov.f32	s1, s17

0800461a <??ZbZclFloatLdexp_2>:
 800461a:	b004      	add	sp, #16
 800461c:	ecbd 8b04 	vpop	{d8-d9}
 8004620:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004624 <ZbZclFloatFrexp>:
 8004624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	ed2d 8b06 	vpush	{d8-d10}
 800462c:	b086      	sub	sp, #24
 800462e:	eeb0 8a40 	vmov.f32	s16, s0
 8004632:	eef0 8a60 	vmov.f32	s17, s1
 8004636:	4682      	mov	sl, r0
 8004638:	000e      	movs	r6, r1
 800463a:	4693      	mov	fp, r2
 800463c:	2730      	movs	r7, #48	@ 0x30
 800463e:	f05f 0800 	movs.w	r8, #0
 8004642:	f05f 0901 	movs.w	r9, #1
 8004646:	eeb0 9a48 	vmov.f32	s18, s16
 800464a:	eef0 9a68 	vmov.f32	s19, s17
 800464e:	ec51 0b18 	vmov	r0, r1, d8
 8004652:	2200      	movs	r2, #0
 8004654:	2300      	movs	r3, #0
 8004656:	f000 fdf3 	bl	8005240 <__aeabi_cdcmpeq>
 800465a:	d208      	bcs.n	800466e <??ZbZclFloatFrexp_0>
 800465c:	f05f 30ff 	movs.w	r0, #4294967295
 8004660:	4681      	mov	r9, r0
 8004662:	ec51 0b19 	vmov	r0, r1, d9
 8004666:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800466a:	ec41 0b19 	vmov	d9, r0, r1

0800466e <??ZbZclFloatFrexp_0>:
 800466e:	ec53 2b19 	vmov	r2, r3, d9
 8004672:	ec51 0b19 	vmov	r0, r1, d9
 8004676:	f000 fde3 	bl	8005240 <__aeabi_cdcmpeq>
 800467a:	d00b      	beq.n	8004694 <??ZbZclFloatFrexp_1>
 800467c:	f8ca 6000 	str.w	r6, [sl]
 8004680:	4648      	mov	r0, r9
 8004682:	f000 fb13 	bl	8004cac <__aeabi_i2d>
 8004686:	2200      	movs	r2, #0
 8004688:	4b81      	ldr	r3, [pc, #516]	@ (8004890 <??DataTable3_4>)
 800468a:	f000 fb79 	bl	8004d80 <__aeabi_dmul>
 800468e:	ec41 0b10 	vmov	d0, r0, r1
 8004692:	e0ef      	b.n	8004874 <??ZbZclFloatFrexp_2>

08004694 <??ZbZclFloatFrexp_1>:
 8004694:	2000      	movs	r0, #0
 8004696:	497d      	ldr	r1, [pc, #500]	@ (800488c <??DataTable3_3>)
 8004698:	2200      	movs	r2, #0
 800469a:	2300      	movs	r3, #0
 800469c:	f000 fc9a 	bl	8004fd4 <__aeabi_ddiv>
 80046a0:	ec53 2b19 	vmov	r2, r3, d9
 80046a4:	f000 fdcc 	bl	8005240 <__aeabi_cdcmpeq>
 80046a8:	d00b      	beq.n	80046c2 <??ZbZclFloatFrexp_3>
 80046aa:	2000      	movs	r0, #0
 80046ac:	4977      	ldr	r1, [pc, #476]	@ (800488c <??DataTable3_3>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80046b4:	f000 fc8e 	bl	8004fd4 <__aeabi_ddiv>
 80046b8:	ec53 2b19 	vmov	r2, r3, d9
 80046bc:	f000 fdc0 	bl	8005240 <__aeabi_cdcmpeq>
 80046c0:	d107      	bne.n	80046d2 <??ZbZclFloatFrexp_4>

080046c2 <??ZbZclFloatFrexp_3>:
 80046c2:	f8ca 6000 	str.w	r6, [sl]
 80046c6:	4648      	mov	r0, r9
 80046c8:	f000 faf0 	bl	8004cac <__aeabi_i2d>
 80046cc:	ec41 0b10 	vmov	d0, r0, r1
 80046d0:	e0d0      	b.n	8004874 <??ZbZclFloatFrexp_2>

080046d2 <??ZbZclFloatFrexp_4>:
 80046d2:	ec53 2b19 	vmov	r2, r3, d9
 80046d6:	ec51 0b19 	vmov	r0, r1, d9
 80046da:	f000 f99b 	bl	8004a14 <__adddf3>
 80046de:	ec53 2b19 	vmov	r2, r3, d9
 80046e2:	f000 fdad 	bl	8005240 <__aeabi_cdcmpeq>
 80046e6:	d10b      	bne.n	8004700 <??ZbZclFloatFrexp_5>
 80046e8:	f8ca b000 	str.w	fp, [sl]
 80046ec:	4648      	mov	r0, r9
 80046ee:	f000 fadd 	bl	8004cac <__aeabi_i2d>
 80046f2:	2200      	movs	r2, #0
 80046f4:	2300      	movs	r3, #0
 80046f6:	f000 fb43 	bl	8004d80 <__aeabi_dmul>
 80046fa:	ec41 0b10 	vmov	d0, r0, r1
 80046fe:	e0b9      	b.n	8004874 <??ZbZclFloatFrexp_2>

08004700 <??ZbZclFloatFrexp_5>:
 8004700:	ec51 0b19 	vmov	r0, r1, d9
 8004704:	2200      	movs	r2, #0
 8004706:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 800470a:	f000 fd91 	bl	8005230 <__aeabi_cdrcmple>
 800470e:	d854      	bhi.n	80047ba <??ZbZclFloatFrexp_6>
 8004710:	2001      	movs	r0, #1
 8004712:	2100      	movs	r1, #0
 8004714:	003a      	movs	r2, r7
 8004716:	f000 f96b 	bl	80049f0 <__aeabi_llsl>
 800471a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004722:	f000 faf7 	bl	8004d14 <__aeabi_ul2d>
 8004726:	0002      	movs	r2, r0
 8004728:	000b      	movs	r3, r1
 800472a:	2000      	movs	r0, #0
 800472c:	4957      	ldr	r1, [pc, #348]	@ (800488c <??DataTable3_3>)
 800472e:	f000 fc51 	bl	8004fd4 <__aeabi_ddiv>
 8004732:	ec41 0b1a 	vmov	d10, r0, r1
 8004736:	2002      	movs	r0, #2
 8004738:	2100      	movs	r1, #0
 800473a:	003a      	movs	r2, r7
 800473c:	f000 f958 	bl	80049f0 <__aeabi_llsl>
 8004740:	e9cd 0100 	strd	r0, r1, [sp]

08004744 <??ZbZclFloatFrexp_7>:
 8004744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004748:	f000 fae4 	bl	8004d14 <__aeabi_ul2d>
 800474c:	0002      	movs	r2, r0
 800474e:	000b      	movs	r3, r1
 8004750:	ec51 0b19 	vmov	r0, r1, d9
 8004754:	f000 fd6c 	bl	8005230 <__aeabi_cdrcmple>
 8004758:	d813      	bhi.n	8004782 <??ZbZclFloatFrexp_8>
 800475a:	ec53 2b19 	vmov	r2, r3, d9
 800475e:	ec51 0b1a 	vmov	r0, r1, d10
 8004762:	f000 fb0d 	bl	8004d80 <__aeabi_dmul>
 8004766:	ec41 0b19 	vmov	d9, r0, r1
 800476a:	eb17 0808 	adds.w	r8, r7, r8
 800476e:	45b0      	cmp	r8, r6
 8004770:	dbe8      	blt.n	8004744 <??ZbZclFloatFrexp_7>
 8004772:	f8ca 6000 	str.w	r6, [sl]
 8004776:	4648      	mov	r0, r9
 8004778:	f000 fa98 	bl	8004cac <__aeabi_i2d>
 800477c:	ec41 0b10 	vmov	d0, r0, r1
 8004780:	e078      	b.n	8004874 <??ZbZclFloatFrexp_2>

08004782 <??ZbZclFloatFrexp_8>:
 8004782:	ec51 0b19 	vmov	r0, r1, d9
 8004786:	2200      	movs	r2, #0
 8004788:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 800478c:	f000 fd50 	bl	8005230 <__aeabi_cdrcmple>
 8004790:	d865      	bhi.n	800485e <??ZbZclFloatFrexp_9>
 8004792:	ec53 2b19 	vmov	r2, r3, d9
 8004796:	2000      	movs	r0, #0
 8004798:	493e      	ldr	r1, [pc, #248]	@ (8004894 <??DataTable3_5>)
 800479a:	f000 faf1 	bl	8004d80 <__aeabi_dmul>
 800479e:	ec41 0b19 	vmov	d9, r0, r1
 80047a2:	f118 0801 	adds.w	r8, r8, #1
 80047a6:	45b0      	cmp	r8, r6
 80047a8:	dbeb      	blt.n	8004782 <??ZbZclFloatFrexp_8>
 80047aa:	f8ca 6000 	str.w	r6, [sl]
 80047ae:	4648      	mov	r0, r9
 80047b0:	f000 fa7c 	bl	8004cac <__aeabi_i2d>
 80047b4:	ec41 0b10 	vmov	d0, r0, r1
 80047b8:	e05c      	b.n	8004874 <??ZbZclFloatFrexp_2>

080047ba <??ZbZclFloatFrexp_6>:
 80047ba:	ec51 0b19 	vmov	r0, r1, d9
 80047be:	2200      	movs	r2, #0
 80047c0:	4b32      	ldr	r3, [pc, #200]	@ (800488c <??DataTable3_3>)
 80047c2:	f000 fd3d 	bl	8005240 <__aeabi_cdcmpeq>
 80047c6:	d24a      	bcs.n	800485e <??ZbZclFloatFrexp_9>
 80047c8:	2401      	movs	r4, #1
 80047ca:	2500      	movs	r5, #0
 80047cc:	0020      	movs	r0, r4
 80047ce:	0029      	movs	r1, r5
 80047d0:	003a      	movs	r2, r7
 80047d2:	f000 f90d 	bl	80049f0 <__aeabi_llsl>
 80047d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047de:	f000 fa99 	bl	8004d14 <__aeabi_ul2d>
 80047e2:	ec41 0b1a 	vmov	d10, r0, r1
 80047e6:	0020      	movs	r0, r4
 80047e8:	0029      	movs	r1, r5
 80047ea:	003a      	movs	r2, r7
 80047ec:	f000 f900 	bl	80049f0 <__aeabi_llsl>
 80047f0:	e9cd 0100 	strd	r0, r1, [sp]

080047f4 <??ZbZclFloatFrexp_10>:
 80047f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047f8:	f000 fa8c 	bl	8004d14 <__aeabi_ul2d>
 80047fc:	0002      	movs	r2, r0
 80047fe:	000b      	movs	r3, r1
 8004800:	2000      	movs	r0, #0
 8004802:	4922      	ldr	r1, [pc, #136]	@ (800488c <??DataTable3_3>)
 8004804:	f000 fbe6 	bl	8004fd4 <__aeabi_ddiv>
 8004808:	0002      	movs	r2, r0
 800480a:	000b      	movs	r3, r1
 800480c:	ec51 0b18 	vmov	r0, r1, d8
 8004810:	f000 fd16 	bl	8005240 <__aeabi_cdcmpeq>
 8004814:	d20e      	bcs.n	8004834 <??ZbZclFloatFrexp_11>
 8004816:	ebb8 0007 	subs.w	r0, r8, r7
 800481a:	4583      	cmp	fp, r0
 800481c:	da0a      	bge.n	8004834 <??ZbZclFloatFrexp_11>

0800481e <??ZbZclFloatFrexp_12>:
 800481e:	ec53 2b19 	vmov	r2, r3, d9
 8004822:	ec51 0b1a 	vmov	r0, r1, d10
 8004826:	f000 faab 	bl	8004d80 <__aeabi_dmul>
 800482a:	ec41 0b19 	vmov	d9, r0, r1
 800482e:	ebb8 0807 	subs.w	r8, r8, r7
 8004832:	e7df      	b.n	80047f4 <??ZbZclFloatFrexp_10>

08004834 <??ZbZclFloatFrexp_11>:
 8004834:	ec51 0b19 	vmov	r0, r1, d9
 8004838:	2200      	movs	r2, #0
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <??DataTable3_3>)
 800483c:	f000 fd00 	bl	8005240 <__aeabi_cdcmpeq>
 8004840:	d20d      	bcs.n	800485e <??ZbZclFloatFrexp_9>
 8004842:	f1b8 0801 	subs.w	r8, r8, #1
 8004846:	45d8      	cmp	r8, fp
 8004848:	d009      	beq.n	800485e <??ZbZclFloatFrexp_9>

0800484a <??ZbZclFloatFrexp_13>:
 800484a:	ec53 2b19 	vmov	r2, r3, d9
 800484e:	2000      	movs	r0, #0
 8004850:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 8004854:	f000 fa94 	bl	8004d80 <__aeabi_dmul>
 8004858:	ec41 0b19 	vmov	d9, r0, r1
 800485c:	e7ea      	b.n	8004834 <??ZbZclFloatFrexp_11>

0800485e <??ZbZclFloatFrexp_9>:
 800485e:	f8ca 8000 	str.w	r8, [sl]
 8004862:	4648      	mov	r0, r9
 8004864:	f000 fa22 	bl	8004cac <__aeabi_i2d>
 8004868:	ec53 2b19 	vmov	r2, r3, d9
 800486c:	f000 fa88 	bl	8004d80 <__aeabi_dmul>
 8004870:	ec41 0b10 	vmov	d0, r0, r1

08004874 <??ZbZclFloatFrexp_2>:
 8004874:	b006      	add	sp, #24
 8004876:	ecbd 8b06 	vpop	{d8-d10}
 800487a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004880 <??DataTable3>:
 8004880:	fc01 ffff                                   ....

08004884 <??DataTable3_1>:
 8004884:	0000 7ff0                                   ....

08004888 <??DataTable3_2>:
 8004888:	ffff 000f                                   ....

0800488c <??DataTable3_3>:
 800488c:	0000 3ff0                                   ...?

08004890 <??DataTable3_4>:
 8004890:	0000 3ff8                                   ...?

08004894 <??DataTable3_5>:
 8004894:	0000 3fe0                                   ...?

08004898 <ZbZclAttrIsFloat>:
 8004898:	0001      	movs	r1, r0
 800489a:	0008      	movs	r0, r1
 800489c:	b2c0      	uxtb	r0, r0
 800489e:	2838      	cmp	r0, #56	@ 0x38
 80048a0:	db05      	blt.n	80048ae <??ZbZclAttrIsFloat_0>
 80048a2:	0008      	movs	r0, r1
 80048a4:	b2c0      	uxtb	r0, r0
 80048a6:	283b      	cmp	r0, #59	@ 0x3b
 80048a8:	da01      	bge.n	80048ae <??ZbZclAttrIsFloat_0>
 80048aa:	2001      	movs	r0, #1
 80048ac:	e000      	b.n	80048b0 <??ZbZclAttrIsFloat_1>

080048ae <??ZbZclAttrIsFloat_0>:
 80048ae:	2000      	movs	r0, #0

080048b0 <??ZbZclAttrIsFloat_1>:
 80048b0:	4770      	bx	lr

080048b2 <__aeabi_memset>:
 80048b2:	b470      	push	{r4, r5, r6}
 80048b4:	0784      	lsls	r4, r0, #30
 80048b6:	d046      	beq.n	8004946 <__aeabi_memset+0x94>
 80048b8:	1e4c      	subs	r4, r1, #1
 80048ba:	2900      	cmp	r1, #0
 80048bc:	d041      	beq.n	8004942 <__aeabi_memset+0x90>
 80048be:	b2d5      	uxtb	r5, r2
 80048c0:	4603      	mov	r3, r0
 80048c2:	e002      	b.n	80048ca <__aeabi_memset+0x18>
 80048c4:	1e61      	subs	r1, r4, #1
 80048c6:	b3e4      	cbz	r4, 8004942 <__aeabi_memset+0x90>
 80048c8:	460c      	mov	r4, r1
 80048ca:	f803 5b01 	strb.w	r5, [r3], #1
 80048ce:	0799      	lsls	r1, r3, #30
 80048d0:	d1f8      	bne.n	80048c4 <__aeabi_memset+0x12>
 80048d2:	2c03      	cmp	r4, #3
 80048d4:	d92e      	bls.n	8004934 <__aeabi_memset+0x82>
 80048d6:	b2d5      	uxtb	r5, r2
 80048d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80048dc:	2c0f      	cmp	r4, #15
 80048de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80048e2:	d919      	bls.n	8004918 <__aeabi_memset+0x66>
 80048e4:	4626      	mov	r6, r4
 80048e6:	f103 0110 	add.w	r1, r3, #16
 80048ea:	3e10      	subs	r6, #16
 80048ec:	2e0f      	cmp	r6, #15
 80048ee:	f841 5c10 	str.w	r5, [r1, #-16]
 80048f2:	f841 5c0c 	str.w	r5, [r1, #-12]
 80048f6:	f841 5c08 	str.w	r5, [r1, #-8]
 80048fa:	f841 5c04 	str.w	r5, [r1, #-4]
 80048fe:	f101 0110 	add.w	r1, r1, #16
 8004902:	d8f2      	bhi.n	80048ea <__aeabi_memset+0x38>
 8004904:	f1a4 0110 	sub.w	r1, r4, #16
 8004908:	f021 010f 	bic.w	r1, r1, #15
 800490c:	f004 040f 	and.w	r4, r4, #15
 8004910:	3110      	adds	r1, #16
 8004912:	2c03      	cmp	r4, #3
 8004914:	440b      	add	r3, r1
 8004916:	d90d      	bls.n	8004934 <__aeabi_memset+0x82>
 8004918:	461e      	mov	r6, r3
 800491a:	4621      	mov	r1, r4
 800491c:	3904      	subs	r1, #4
 800491e:	2903      	cmp	r1, #3
 8004920:	f846 5b04 	str.w	r5, [r6], #4
 8004924:	d8fa      	bhi.n	800491c <__aeabi_memset+0x6a>
 8004926:	1f21      	subs	r1, r4, #4
 8004928:	f021 0103 	bic.w	r1, r1, #3
 800492c:	3104      	adds	r1, #4
 800492e:	440b      	add	r3, r1
 8004930:	f004 0403 	and.w	r4, r4, #3
 8004934:	b12c      	cbz	r4, 8004942 <__aeabi_memset+0x90>
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	441c      	add	r4, r3
 800493a:	f803 2b01 	strb.w	r2, [r3], #1
 800493e:	42a3      	cmp	r3, r4
 8004940:	d1fb      	bne.n	800493a <__aeabi_memset+0x88>
 8004942:	bc70      	pop	{r4, r5, r6}
 8004944:	4770      	bx	lr
 8004946:	460c      	mov	r4, r1
 8004948:	4603      	mov	r3, r0
 800494a:	e7c2      	b.n	80048d2 <__aeabi_memset+0x20>
 800494c:	0000      	movs	r0, r0
	...

08004950 <memchr>:
 8004950:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8004954:	2a10      	cmp	r2, #16
 8004956:	db2b      	blt.n	80049b0 <memchr+0x60>
 8004958:	f010 0f07 	tst.w	r0, #7
 800495c:	d008      	beq.n	8004970 <memchr+0x20>
 800495e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004962:	3a01      	subs	r2, #1
 8004964:	428b      	cmp	r3, r1
 8004966:	d02d      	beq.n	80049c4 <memchr+0x74>
 8004968:	f010 0f07 	tst.w	r0, #7
 800496c:	b342      	cbz	r2, 80049c0 <memchr+0x70>
 800496e:	d1f6      	bne.n	800495e <memchr+0xe>
 8004970:	b4f0      	push	{r4, r5, r6, r7}
 8004972:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004976:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800497a:	f022 0407 	bic.w	r4, r2, #7
 800497e:	f07f 0700 	mvns.w	r7, #0
 8004982:	2300      	movs	r3, #0
 8004984:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004988:	3c08      	subs	r4, #8
 800498a:	ea85 0501 	eor.w	r5, r5, r1
 800498e:	ea86 0601 	eor.w	r6, r6, r1
 8004992:	fa85 f547 	uadd8	r5, r5, r7
 8004996:	faa3 f587 	sel	r5, r3, r7
 800499a:	fa86 f647 	uadd8	r6, r6, r7
 800499e:	faa5 f687 	sel	r6, r5, r7
 80049a2:	b98e      	cbnz	r6, 80049c8 <memchr+0x78>
 80049a4:	d1ee      	bne.n	8004984 <memchr+0x34>
 80049a6:	bcf0      	pop	{r4, r5, r6, r7}
 80049a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80049ac:	f002 0207 	and.w	r2, r2, #7
 80049b0:	b132      	cbz	r2, 80049c0 <memchr+0x70>
 80049b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80049b6:	3a01      	subs	r2, #1
 80049b8:	ea83 0301 	eor.w	r3, r3, r1
 80049bc:	b113      	cbz	r3, 80049c4 <memchr+0x74>
 80049be:	d1f8      	bne.n	80049b2 <memchr+0x62>
 80049c0:	2000      	movs	r0, #0
 80049c2:	4770      	bx	lr
 80049c4:	3801      	subs	r0, #1
 80049c6:	4770      	bx	lr
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	bf06      	itte	eq
 80049cc:	4635      	moveq	r5, r6
 80049ce:	3803      	subeq	r0, #3
 80049d0:	3807      	subne	r0, #7
 80049d2:	f015 0f01 	tst.w	r5, #1
 80049d6:	d107      	bne.n	80049e8 <memchr+0x98>
 80049d8:	3001      	adds	r0, #1
 80049da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80049de:	bf02      	ittt	eq
 80049e0:	3001      	addeq	r0, #1
 80049e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80049e6:	3001      	addeq	r0, #1
 80049e8:	bcf0      	pop	{r4, r5, r6, r7}
 80049ea:	3801      	subs	r0, #1
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop

080049f0 <__aeabi_llsl>:
 80049f0:	4091      	lsls	r1, r2
 80049f2:	0003      	movs	r3, r0
 80049f4:	4090      	lsls	r0, r2
 80049f6:	469c      	mov	ip, r3
 80049f8:	3a20      	subs	r2, #32
 80049fa:	4093      	lsls	r3, r2
 80049fc:	4319      	orrs	r1, r3
 80049fe:	4252      	negs	r2, r2
 8004a00:	4663      	mov	r3, ip
 8004a02:	40d3      	lsrs	r3, r2
 8004a04:	4319      	orrs	r1, r3
 8004a06:	4770      	bx	lr

08004a08 <__aeabi_drsub>:
 8004a08:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8004a0c:	e002      	b.n	8004a14 <__adddf3>
 8004a0e:	bf00      	nop

08004a10 <__aeabi_dsub>:
 8004a10:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08004a14 <__adddf3>:
 8004a14:	b530      	push	{r4, r5, lr}
 8004a16:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004a1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004a1e:	ea94 0f05 	teq	r4, r5
 8004a22:	bf08      	it	eq
 8004a24:	ea90 0f02 	teqeq	r0, r2
 8004a28:	bf1f      	itttt	ne
 8004a2a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004a2e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004a32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004a36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004a3a:	f000 80e2 	beq.w	8004c02 <__adddf3+0x1ee>
 8004a3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004a42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004a46:	bfb8      	it	lt
 8004a48:	426d      	neglt	r5, r5
 8004a4a:	dd0c      	ble.n	8004a66 <__adddf3+0x52>
 8004a4c:	442c      	add	r4, r5
 8004a4e:	ea80 0202 	eor.w	r2, r0, r2
 8004a52:	ea81 0303 	eor.w	r3, r1, r3
 8004a56:	ea82 0000 	eor.w	r0, r2, r0
 8004a5a:	ea83 0101 	eor.w	r1, r3, r1
 8004a5e:	ea80 0202 	eor.w	r2, r0, r2
 8004a62:	ea81 0303 	eor.w	r3, r1, r3
 8004a66:	2d36      	cmp	r5, #54	@ 0x36
 8004a68:	bf88      	it	hi
 8004a6a:	bd30      	pophi	{r4, r5, pc}
 8004a6c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004a74:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8004a78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004a7c:	d002      	beq.n	8004a84 <__adddf3+0x70>
 8004a7e:	4240      	negs	r0, r0
 8004a80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004a84:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8004a88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004a8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004a90:	d002      	beq.n	8004a98 <__adddf3+0x84>
 8004a92:	4252      	negs	r2, r2
 8004a94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004a98:	ea94 0f05 	teq	r4, r5
 8004a9c:	f000 80a7 	beq.w	8004bee <__adddf3+0x1da>
 8004aa0:	f1a4 0401 	sub.w	r4, r4, #1
 8004aa4:	f1d5 0e20 	rsbs	lr, r5, #32
 8004aa8:	db0d      	blt.n	8004ac6 <__adddf3+0xb2>
 8004aaa:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004aae:	fa22 f205 	lsr.w	r2, r2, r5
 8004ab2:	1880      	adds	r0, r0, r2
 8004ab4:	f141 0100 	adc.w	r1, r1, #0
 8004ab8:	fa03 f20e 	lsl.w	r2, r3, lr
 8004abc:	1880      	adds	r0, r0, r2
 8004abe:	fa43 f305 	asr.w	r3, r3, r5
 8004ac2:	4159      	adcs	r1, r3
 8004ac4:	e00e      	b.n	8004ae4 <__adddf3+0xd0>
 8004ac6:	f1a5 0520 	sub.w	r5, r5, #32
 8004aca:	f10e 0e20 	add.w	lr, lr, #32
 8004ace:	2a01      	cmp	r2, #1
 8004ad0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004ad4:	bf28      	it	cs
 8004ad6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004ada:	fa43 f305 	asr.w	r3, r3, r5
 8004ade:	18c0      	adds	r0, r0, r3
 8004ae0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004ae4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004ae8:	d507      	bpl.n	8004afa <__adddf3+0xe6>
 8004aea:	f04f 0e00 	mov.w	lr, #0
 8004aee:	f1dc 0c00 	rsbs	ip, ip, #0
 8004af2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004af6:	eb6e 0101 	sbc.w	r1, lr, r1
 8004afa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004afe:	d31b      	bcc.n	8004b38 <__adddf3+0x124>
 8004b00:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004b04:	d30c      	bcc.n	8004b20 <__adddf3+0x10c>
 8004b06:	0849      	lsrs	r1, r1, #1
 8004b08:	ea5f 0030 	movs.w	r0, r0, rrx
 8004b0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004b10:	f104 0401 	add.w	r4, r4, #1
 8004b14:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004b18:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004b1c:	f080 809a 	bcs.w	8004c54 <__adddf3+0x240>
 8004b20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8004b24:	bf08      	it	eq
 8004b26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004b2a:	f150 0000 	adcs.w	r0, r0, #0
 8004b2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004b32:	ea41 0105 	orr.w	r1, r1, r5
 8004b36:	bd30      	pop	{r4, r5, pc}
 8004b38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004b3c:	4140      	adcs	r0, r0
 8004b3e:	eb41 0101 	adc.w	r1, r1, r1
 8004b42:	3c01      	subs	r4, #1
 8004b44:	bf28      	it	cs
 8004b46:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8004b4a:	d2e9      	bcs.n	8004b20 <__adddf3+0x10c>
 8004b4c:	f091 0f00 	teq	r1, #0
 8004b50:	bf04      	itt	eq
 8004b52:	4601      	moveq	r1, r0
 8004b54:	2000      	moveq	r0, #0
 8004b56:	fab1 f381 	clz	r3, r1
 8004b5a:	bf08      	it	eq
 8004b5c:	3320      	addeq	r3, #32
 8004b5e:	f1a3 030b 	sub.w	r3, r3, #11
 8004b62:	f1b3 0220 	subs.w	r2, r3, #32
 8004b66:	da0c      	bge.n	8004b82 <__adddf3+0x16e>
 8004b68:	320c      	adds	r2, #12
 8004b6a:	dd08      	ble.n	8004b7e <__adddf3+0x16a>
 8004b6c:	f102 0c14 	add.w	ip, r2, #20
 8004b70:	f1c2 020c 	rsb	r2, r2, #12
 8004b74:	fa01 f00c 	lsl.w	r0, r1, ip
 8004b78:	fa21 f102 	lsr.w	r1, r1, r2
 8004b7c:	e00c      	b.n	8004b98 <__adddf3+0x184>
 8004b7e:	f102 0214 	add.w	r2, r2, #20
 8004b82:	bfd8      	it	le
 8004b84:	f1c2 0c20 	rsble	ip, r2, #32
 8004b88:	fa01 f102 	lsl.w	r1, r1, r2
 8004b8c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004b90:	bfdc      	itt	le
 8004b92:	ea41 010c 	orrle.w	r1, r1, ip
 8004b96:	4090      	lslle	r0, r2
 8004b98:	1ae4      	subs	r4, r4, r3
 8004b9a:	bfa2      	ittt	ge
 8004b9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004ba0:	4329      	orrge	r1, r5
 8004ba2:	bd30      	popge	{r4, r5, pc}
 8004ba4:	ea6f 0404 	mvn.w	r4, r4
 8004ba8:	3c1f      	subs	r4, #31
 8004baa:	da1c      	bge.n	8004be6 <__adddf3+0x1d2>
 8004bac:	340c      	adds	r4, #12
 8004bae:	dc0e      	bgt.n	8004bce <__adddf3+0x1ba>
 8004bb0:	f104 0414 	add.w	r4, r4, #20
 8004bb4:	f1c4 0220 	rsb	r2, r4, #32
 8004bb8:	fa20 f004 	lsr.w	r0, r0, r4
 8004bbc:	fa01 f302 	lsl.w	r3, r1, r2
 8004bc0:	ea40 0003 	orr.w	r0, r0, r3
 8004bc4:	fa21 f304 	lsr.w	r3, r1, r4
 8004bc8:	ea45 0103 	orr.w	r1, r5, r3
 8004bcc:	bd30      	pop	{r4, r5, pc}
 8004bce:	f1c4 040c 	rsb	r4, r4, #12
 8004bd2:	f1c4 0220 	rsb	r2, r4, #32
 8004bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8004bda:	fa01 f304 	lsl.w	r3, r1, r4
 8004bde:	ea40 0003 	orr.w	r0, r0, r3
 8004be2:	4629      	mov	r1, r5
 8004be4:	bd30      	pop	{r4, r5, pc}
 8004be6:	fa21 f004 	lsr.w	r0, r1, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	bd30      	pop	{r4, r5, pc}
 8004bee:	f094 0f00 	teq	r4, #0
 8004bf2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8004bf6:	bf06      	itte	eq
 8004bf8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004bfc:	3401      	addeq	r4, #1
 8004bfe:	3d01      	subne	r5, #1
 8004c00:	e74e      	b.n	8004aa0 <__adddf3+0x8c>
 8004c02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004c06:	bf18      	it	ne
 8004c08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004c0c:	d029      	beq.n	8004c62 <__adddf3+0x24e>
 8004c0e:	ea94 0f05 	teq	r4, r5
 8004c12:	bf08      	it	eq
 8004c14:	ea90 0f02 	teqeq	r0, r2
 8004c18:	d005      	beq.n	8004c26 <__adddf3+0x212>
 8004c1a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004c1e:	bf04      	itt	eq
 8004c20:	4619      	moveq	r1, r3
 8004c22:	4610      	moveq	r0, r2
 8004c24:	bd30      	pop	{r4, r5, pc}
 8004c26:	ea91 0f03 	teq	r1, r3
 8004c2a:	bf1e      	ittt	ne
 8004c2c:	2100      	movne	r1, #0
 8004c2e:	2000      	movne	r0, #0
 8004c30:	bd30      	popne	{r4, r5, pc}
 8004c32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004c36:	d105      	bne.n	8004c44 <__adddf3+0x230>
 8004c38:	0040      	lsls	r0, r0, #1
 8004c3a:	4149      	adcs	r1, r1
 8004c3c:	bf28      	it	cs
 8004c3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8004c42:	bd30      	pop	{r4, r5, pc}
 8004c44:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8004c48:	bf3c      	itt	cc
 8004c4a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8004c4e:	bd30      	popcc	{r4, r5, pc}
 8004c50:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004c54:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8004c58:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c5c:	f04f 0000 	mov.w	r0, #0
 8004c60:	bd30      	pop	{r4, r5, pc}
 8004c62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004c66:	bf1a      	itte	ne
 8004c68:	4619      	movne	r1, r3
 8004c6a:	4610      	movne	r0, r2
 8004c6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004c70:	bf1c      	itt	ne
 8004c72:	460b      	movne	r3, r1
 8004c74:	4602      	movne	r2, r0
 8004c76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004c7a:	bf06      	itte	eq
 8004c7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004c80:	ea91 0f03 	teqeq	r1, r3
 8004c84:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8004c88:	bd30      	pop	{r4, r5, pc}
 8004c8a:	bf00      	nop

08004c8c <__aeabi_ui2d>:
 8004c8c:	f090 0f00 	teq	r0, #0
 8004c90:	bf04      	itt	eq
 8004c92:	2100      	moveq	r1, #0
 8004c94:	4770      	bxeq	lr
 8004c96:	b530      	push	{r4, r5, lr}
 8004c98:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004c9c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004ca0:	f04f 0500 	mov.w	r5, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	e750      	b.n	8004b4c <__adddf3+0x138>
 8004caa:	bf00      	nop

08004cac <__aeabi_i2d>:
 8004cac:	f090 0f00 	teq	r0, #0
 8004cb0:	bf04      	itt	eq
 8004cb2:	2100      	moveq	r1, #0
 8004cb4:	4770      	bxeq	lr
 8004cb6:	b530      	push	{r4, r5, lr}
 8004cb8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004cbc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004cc0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8004cc4:	bf48      	it	mi
 8004cc6:	4240      	negmi	r0, r0
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	e73e      	b.n	8004b4c <__adddf3+0x138>
 8004cce:	bf00      	nop

08004cd0 <__aeabi_f2d>:
 8004cd0:	0042      	lsls	r2, r0, #1
 8004cd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004cd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8004cda:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004cde:	bf1f      	itttt	ne
 8004ce0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8004ce4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004ce8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004cec:	4770      	bxne	lr
 8004cee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8004cf2:	bf08      	it	eq
 8004cf4:	4770      	bxeq	lr
 8004cf6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004cfa:	bf04      	itt	eq
 8004cfc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004d00:	4770      	bxeq	lr
 8004d02:	b530      	push	{r4, r5, lr}
 8004d04:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004d08:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004d0c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004d10:	e71c      	b.n	8004b4c <__adddf3+0x138>
 8004d12:	bf00      	nop

08004d14 <__aeabi_ul2d>:
 8004d14:	ea50 0201 	orrs.w	r2, r0, r1
 8004d18:	bf08      	it	eq
 8004d1a:	4770      	bxeq	lr
 8004d1c:	b530      	push	{r4, r5, lr}
 8004d1e:	f04f 0500 	mov.w	r5, #0
 8004d22:	e00a      	b.n	8004d3a <__aeabi_l2d+0x16>

08004d24 <__aeabi_l2d>:
 8004d24:	ea50 0201 	orrs.w	r2, r0, r1
 8004d28:	bf08      	it	eq
 8004d2a:	4770      	bxeq	lr
 8004d2c:	b530      	push	{r4, r5, lr}
 8004d2e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8004d32:	d502      	bpl.n	8004d3a <__aeabi_l2d+0x16>
 8004d34:	4240      	negs	r0, r0
 8004d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d3a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004d3e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004d42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004d46:	f43f aed8 	beq.w	8004afa <__adddf3+0xe6>
 8004d4a:	f04f 0203 	mov.w	r2, #3
 8004d4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004d52:	bf18      	it	ne
 8004d54:	3203      	addne	r2, #3
 8004d56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004d5a:	bf18      	it	ne
 8004d5c:	3203      	addne	r2, #3
 8004d5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004d62:	f1c2 0320 	rsb	r3, r2, #32
 8004d66:	fa00 fc03 	lsl.w	ip, r0, r3
 8004d6a:	fa20 f002 	lsr.w	r0, r0, r2
 8004d6e:	fa01 fe03 	lsl.w	lr, r1, r3
 8004d72:	ea40 000e 	orr.w	r0, r0, lr
 8004d76:	fa21 f102 	lsr.w	r1, r1, r2
 8004d7a:	4414      	add	r4, r2
 8004d7c:	e6bd      	b.n	8004afa <__adddf3+0xe6>
 8004d7e:	bf00      	nop

08004d80 <__aeabi_dmul>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004d86:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004d8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004d8e:	bf1d      	ittte	ne
 8004d90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004d94:	ea94 0f0c 	teqne	r4, ip
 8004d98:	ea95 0f0c 	teqne	r5, ip
 8004d9c:	f000 f8de 	bleq	8004f5c <__aeabi_dmul+0x1dc>
 8004da0:	442c      	add	r4, r5
 8004da2:	ea81 0603 	eor.w	r6, r1, r3
 8004da6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004daa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004dae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004db2:	bf18      	it	ne
 8004db4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004db8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004dbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dc0:	d038      	beq.n	8004e34 <__aeabi_dmul+0xb4>
 8004dc2:	fba0 ce02 	umull	ip, lr, r0, r2
 8004dc6:	f04f 0500 	mov.w	r5, #0
 8004dca:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004dce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8004dd2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004dd6:	f04f 0600 	mov.w	r6, #0
 8004dda:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004dde:	f09c 0f00 	teq	ip, #0
 8004de2:	bf18      	it	ne
 8004de4:	f04e 0e01 	orrne.w	lr, lr, #1
 8004de8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004dec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004df0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8004df4:	d204      	bcs.n	8004e00 <__aeabi_dmul+0x80>
 8004df6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004dfa:	416d      	adcs	r5, r5
 8004dfc:	eb46 0606 	adc.w	r6, r6, r6
 8004e00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004e04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004e08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004e0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004e10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004e14:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004e18:	bf88      	it	hi
 8004e1a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004e1e:	d81e      	bhi.n	8004e5e <__aeabi_dmul+0xde>
 8004e20:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8004e24:	bf08      	it	eq
 8004e26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004e2a:	f150 0000 	adcs.w	r0, r0, #0
 8004e2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004e38:	ea46 0101 	orr.w	r1, r6, r1
 8004e3c:	ea40 0002 	orr.w	r0, r0, r2
 8004e40:	ea81 0103 	eor.w	r1, r1, r3
 8004e44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004e48:	bfc2      	ittt	gt
 8004e4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004e4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004e52:	bd70      	popgt	{r4, r5, r6, pc}
 8004e54:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004e58:	f04f 0e00 	mov.w	lr, #0
 8004e5c:	3c01      	subs	r4, #1
 8004e5e:	f300 80ab 	bgt.w	8004fb8 <__aeabi_dmul+0x238>
 8004e62:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8004e66:	bfde      	ittt	le
 8004e68:	2000      	movle	r0, #0
 8004e6a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8004e6e:	bd70      	pople	{r4, r5, r6, pc}
 8004e70:	f1c4 0400 	rsb	r4, r4, #0
 8004e74:	3c20      	subs	r4, #32
 8004e76:	da35      	bge.n	8004ee4 <__aeabi_dmul+0x164>
 8004e78:	340c      	adds	r4, #12
 8004e7a:	dc1b      	bgt.n	8004eb4 <__aeabi_dmul+0x134>
 8004e7c:	f104 0414 	add.w	r4, r4, #20
 8004e80:	f1c4 0520 	rsb	r5, r4, #32
 8004e84:	fa00 f305 	lsl.w	r3, r0, r5
 8004e88:	fa20 f004 	lsr.w	r0, r0, r4
 8004e8c:	fa01 f205 	lsl.w	r2, r1, r5
 8004e90:	ea40 0002 	orr.w	r0, r0, r2
 8004e94:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8004e98:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004e9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004ea0:	fa21 f604 	lsr.w	r6, r1, r4
 8004ea4:	eb42 0106 	adc.w	r1, r2, r6
 8004ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004eac:	bf08      	it	eq
 8004eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	f1c4 040c 	rsb	r4, r4, #12
 8004eb8:	f1c4 0520 	rsb	r5, r4, #32
 8004ebc:	fa00 f304 	lsl.w	r3, r0, r4
 8004ec0:	fa20 f005 	lsr.w	r0, r0, r5
 8004ec4:	fa01 f204 	lsl.w	r2, r1, r4
 8004ec8:	ea40 0002 	orr.w	r0, r0, r2
 8004ecc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004ed0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004ed4:	f141 0100 	adc.w	r1, r1, #0
 8004ed8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004edc:	bf08      	it	eq
 8004ede:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	f1c4 0520 	rsb	r5, r4, #32
 8004ee8:	fa00 f205 	lsl.w	r2, r0, r5
 8004eec:	ea4e 0e02 	orr.w	lr, lr, r2
 8004ef0:	fa20 f304 	lsr.w	r3, r0, r4
 8004ef4:	fa01 f205 	lsl.w	r2, r1, r5
 8004ef8:	ea43 0302 	orr.w	r3, r3, r2
 8004efc:	fa21 f004 	lsr.w	r0, r1, r4
 8004f00:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004f04:	fa21 f204 	lsr.w	r2, r1, r4
 8004f08:	ea20 0002 	bic.w	r0, r0, r2
 8004f0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004f10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004f14:	bf08      	it	eq
 8004f16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f094 0f00 	teq	r4, #0
 8004f20:	d10f      	bne.n	8004f42 <__aeabi_dmul+0x1c2>
 8004f22:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8004f26:	0040      	lsls	r0, r0, #1
 8004f28:	eb41 0101 	adc.w	r1, r1, r1
 8004f2c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004f30:	bf08      	it	eq
 8004f32:	3c01      	subeq	r4, #1
 8004f34:	d0f7      	beq.n	8004f26 <__aeabi_dmul+0x1a6>
 8004f36:	ea41 0106 	orr.w	r1, r1, r6
 8004f3a:	f095 0f00 	teq	r5, #0
 8004f3e:	bf18      	it	ne
 8004f40:	4770      	bxne	lr
 8004f42:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8004f46:	0052      	lsls	r2, r2, #1
 8004f48:	eb43 0303 	adc.w	r3, r3, r3
 8004f4c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004f50:	bf08      	it	eq
 8004f52:	3d01      	subeq	r5, #1
 8004f54:	d0f7      	beq.n	8004f46 <__aeabi_dmul+0x1c6>
 8004f56:	ea43 0306 	orr.w	r3, r3, r6
 8004f5a:	4770      	bx	lr
 8004f5c:	ea94 0f0c 	teq	r4, ip
 8004f60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004f64:	bf18      	it	ne
 8004f66:	ea95 0f0c 	teqne	r5, ip
 8004f6a:	d00c      	beq.n	8004f86 <__aeabi_dmul+0x206>
 8004f6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004f70:	bf18      	it	ne
 8004f72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004f76:	d1d1      	bne.n	8004f1c <__aeabi_dmul+0x19c>
 8004f78:	ea81 0103 	eor.w	r1, r1, r3
 8004f7c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004f80:	f04f 0000 	mov.w	r0, #0
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
 8004f86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004f8a:	bf06      	itte	eq
 8004f8c:	4610      	moveq	r0, r2
 8004f8e:	4619      	moveq	r1, r3
 8004f90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004f94:	d019      	beq.n	8004fca <__aeabi_dmul+0x24a>
 8004f96:	ea94 0f0c 	teq	r4, ip
 8004f9a:	d102      	bne.n	8004fa2 <__aeabi_dmul+0x222>
 8004f9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004fa0:	d113      	bne.n	8004fca <__aeabi_dmul+0x24a>
 8004fa2:	ea95 0f0c 	teq	r5, ip
 8004fa6:	d105      	bne.n	8004fb4 <__aeabi_dmul+0x234>
 8004fa8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004fac:	bf1c      	itt	ne
 8004fae:	4610      	movne	r0, r2
 8004fb0:	4619      	movne	r1, r3
 8004fb2:	d10a      	bne.n	8004fca <__aeabi_dmul+0x24a>
 8004fb4:	ea81 0103 	eor.w	r1, r1, r3
 8004fb8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004fbc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004fc0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004fce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}

08004fd4 <__aeabi_ddiv>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004fda:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004fe2:	bf1d      	ittte	ne
 8004fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004fe8:	ea94 0f0c 	teqne	r4, ip
 8004fec:	ea95 0f0c 	teqne	r5, ip
 8004ff0:	f000 f8a7 	bleq	8005142 <__aeabi_ddiv+0x16e>
 8004ff4:	eba4 0405 	sub.w	r4, r4, r5
 8004ff8:	ea81 0e03 	eor.w	lr, r1, r3
 8004ffc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005000:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005004:	f000 8088 	beq.w	8005118 <__aeabi_ddiv+0x144>
 8005008:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800500c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8005010:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005014:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005018:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800501c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005020:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005024:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005028:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800502c:	429d      	cmp	r5, r3
 800502e:	bf08      	it	eq
 8005030:	4296      	cmpeq	r6, r2
 8005032:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8005036:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800503a:	d202      	bcs.n	8005042 <__aeabi_ddiv+0x6e>
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005042:	1ab6      	subs	r6, r6, r2
 8005044:	eb65 0503 	sbc.w	r5, r5, r3
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	ea4f 0232 	mov.w	r2, r2, rrx
 800504e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005052:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8005056:	ebb6 0e02 	subs.w	lr, r6, r2
 800505a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800505e:	bf22      	ittt	cs
 8005060:	1ab6      	subcs	r6, r6, r2
 8005062:	4675      	movcs	r5, lr
 8005064:	ea40 000c 	orrcs.w	r0, r0, ip
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	ea4f 0232 	mov.w	r2, r2, rrx
 800506e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005072:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005076:	bf22      	ittt	cs
 8005078:	1ab6      	subcs	r6, r6, r2
 800507a:	4675      	movcs	r5, lr
 800507c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	ea4f 0232 	mov.w	r2, r2, rrx
 8005086:	ebb6 0e02 	subs.w	lr, r6, r2
 800508a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800508e:	bf22      	ittt	cs
 8005090:	1ab6      	subcs	r6, r6, r2
 8005092:	4675      	movcs	r5, lr
 8005094:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	ea4f 0232 	mov.w	r2, r2, rrx
 800509e:	ebb6 0e02 	subs.w	lr, r6, r2
 80050a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80050a6:	bf22      	ittt	cs
 80050a8:	1ab6      	subcs	r6, r6, r2
 80050aa:	4675      	movcs	r5, lr
 80050ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80050b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80050b4:	d018      	beq.n	80050e8 <__aeabi_ddiv+0x114>
 80050b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80050ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80050be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80050c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80050c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80050ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80050ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80050d2:	d1c0      	bne.n	8005056 <__aeabi_ddiv+0x82>
 80050d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80050d8:	d10b      	bne.n	80050f2 <__aeabi_ddiv+0x11e>
 80050da:	ea41 0100 	orr.w	r1, r1, r0
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80050e6:	e7b6      	b.n	8005056 <__aeabi_ddiv+0x82>
 80050e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80050ec:	bf04      	itt	eq
 80050ee:	4301      	orreq	r1, r0
 80050f0:	2000      	moveq	r0, #0
 80050f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80050f6:	bf88      	it	hi
 80050f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80050fc:	f63f aeaf 	bhi.w	8004e5e <__aeabi_dmul+0xde>
 8005100:	ebb5 0c03 	subs.w	ip, r5, r3
 8005104:	bf04      	itt	eq
 8005106:	ebb6 0c02 	subseq.w	ip, r6, r2
 800510a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800510e:	f150 0000 	adcs.w	r0, r0, #0
 8005112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800511c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005120:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005124:	bfc2      	ittt	gt
 8005126:	ebd4 050c 	rsbsgt	r5, r4, ip
 800512a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800512e:	bd70      	popgt	{r4, r5, r6, pc}
 8005130:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005134:	f04f 0e00 	mov.w	lr, #0
 8005138:	3c01      	subs	r4, #1
 800513a:	e690      	b.n	8004e5e <__aeabi_dmul+0xde>
 800513c:	ea45 0e06 	orr.w	lr, r5, r6
 8005140:	e68d      	b.n	8004e5e <__aeabi_dmul+0xde>
 8005142:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005146:	ea94 0f0c 	teq	r4, ip
 800514a:	bf08      	it	eq
 800514c:	ea95 0f0c 	teqeq	r5, ip
 8005150:	f43f af3b 	beq.w	8004fca <__aeabi_dmul+0x24a>
 8005154:	ea94 0f0c 	teq	r4, ip
 8005158:	d10a      	bne.n	8005170 <__aeabi_ddiv+0x19c>
 800515a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800515e:	f47f af34 	bne.w	8004fca <__aeabi_dmul+0x24a>
 8005162:	ea95 0f0c 	teq	r5, ip
 8005166:	f47f af25 	bne.w	8004fb4 <__aeabi_dmul+0x234>
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	e72c      	b.n	8004fca <__aeabi_dmul+0x24a>
 8005170:	ea95 0f0c 	teq	r5, ip
 8005174:	d106      	bne.n	8005184 <__aeabi_ddiv+0x1b0>
 8005176:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800517a:	f43f aefd 	beq.w	8004f78 <__aeabi_dmul+0x1f8>
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	e722      	b.n	8004fca <__aeabi_dmul+0x24a>
 8005184:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005188:	bf18      	it	ne
 800518a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800518e:	f47f aec5 	bne.w	8004f1c <__aeabi_dmul+0x19c>
 8005192:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005196:	f47f af0d 	bne.w	8004fb4 <__aeabi_dmul+0x234>
 800519a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800519e:	f47f aeeb 	bne.w	8004f78 <__aeabi_dmul+0x1f8>
 80051a2:	e712      	b.n	8004fca <__aeabi_dmul+0x24a>

080051a4 <__gedf2>:
 80051a4:	f04f 3cff 	mov.w	ip, #4294967295
 80051a8:	e006      	b.n	80051b8 <__cmpdf2+0x4>
 80051aa:	bf00      	nop

080051ac <__ledf2>:
 80051ac:	f04f 0c01 	mov.w	ip, #1
 80051b0:	e002      	b.n	80051b8 <__cmpdf2+0x4>
 80051b2:	bf00      	nop

080051b4 <__cmpdf2>:
 80051b4:	f04f 0c01 	mov.w	ip, #1
 80051b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80051bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80051c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80051c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80051c8:	bf18      	it	ne
 80051ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80051ce:	d01b      	beq.n	8005208 <__cmpdf2+0x54>
 80051d0:	b001      	add	sp, #4
 80051d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80051d6:	bf0c      	ite	eq
 80051d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80051dc:	ea91 0f03 	teqne	r1, r3
 80051e0:	bf02      	ittt	eq
 80051e2:	ea90 0f02 	teqeq	r0, r2
 80051e6:	2000      	moveq	r0, #0
 80051e8:	4770      	bxeq	lr
 80051ea:	f110 0f00 	cmn.w	r0, #0
 80051ee:	ea91 0f03 	teq	r1, r3
 80051f2:	bf58      	it	pl
 80051f4:	4299      	cmppl	r1, r3
 80051f6:	bf08      	it	eq
 80051f8:	4290      	cmpeq	r0, r2
 80051fa:	bf2c      	ite	cs
 80051fc:	17d8      	asrcs	r0, r3, #31
 80051fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005202:	f040 0001 	orr.w	r0, r0, #1
 8005206:	4770      	bx	lr
 8005208:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800520c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005210:	d102      	bne.n	8005218 <__cmpdf2+0x64>
 8005212:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005216:	d107      	bne.n	8005228 <__cmpdf2+0x74>
 8005218:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800521c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005220:	d1d6      	bne.n	80051d0 <__cmpdf2+0x1c>
 8005222:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005226:	d0d3      	beq.n	80051d0 <__cmpdf2+0x1c>
 8005228:	f85d 0b04 	ldr.w	r0, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <__aeabi_cdrcmple>:
 8005230:	4684      	mov	ip, r0
 8005232:	4610      	mov	r0, r2
 8005234:	4662      	mov	r2, ip
 8005236:	468c      	mov	ip, r1
 8005238:	4619      	mov	r1, r3
 800523a:	4663      	mov	r3, ip
 800523c:	e000      	b.n	8005240 <__aeabi_cdcmpeq>
 800523e:	bf00      	nop

08005240 <__aeabi_cdcmpeq>:
 8005240:	b501      	push	{r0, lr}
 8005242:	f7ff ffb7 	bl	80051b4 <__cmpdf2>
 8005246:	2800      	cmp	r0, #0
 8005248:	bf48      	it	mi
 800524a:	f110 0f00 	cmnmi.w	r0, #0
 800524e:	bd01      	pop	{r0, pc}

08005250 <__aeabi_dcmpeq>:
 8005250:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005254:	f7ff fff4 	bl	8005240 <__aeabi_cdcmpeq>
 8005258:	bf0c      	ite	eq
 800525a:	2001      	moveq	r0, #1
 800525c:	2000      	movne	r0, #0
 800525e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005262:	bf00      	nop

08005264 <__aeabi_dcmplt>:
 8005264:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005268:	f7ff ffea 	bl	8005240 <__aeabi_cdcmpeq>
 800526c:	bf34      	ite	cc
 800526e:	2001      	movcc	r0, #1
 8005270:	2000      	movcs	r0, #0
 8005272:	f85d fb08 	ldr.w	pc, [sp], #8
 8005276:	bf00      	nop

08005278 <__aeabi_dcmple>:
 8005278:	f84d ed08 	str.w	lr, [sp, #-8]!
 800527c:	f7ff ffe0 	bl	8005240 <__aeabi_cdcmpeq>
 8005280:	bf94      	ite	ls
 8005282:	2001      	movls	r0, #1
 8005284:	2000      	movhi	r0, #0
 8005286:	f85d fb08 	ldr.w	pc, [sp], #8
 800528a:	bf00      	nop

0800528c <__aeabi_dcmpge>:
 800528c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005290:	f7ff ffce 	bl	8005230 <__aeabi_cdrcmple>
 8005294:	bf94      	ite	ls
 8005296:	2001      	movls	r0, #1
 8005298:	2000      	movhi	r0, #0
 800529a:	f85d fb08 	ldr.w	pc, [sp], #8
 800529e:	bf00      	nop

080052a0 <__aeabi_dcmpgt>:
 80052a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80052a4:	f7ff ffc4 	bl	8005230 <__aeabi_cdrcmple>
 80052a8:	bf34      	ite	cc
 80052aa:	2001      	movcc	r0, #1
 80052ac:	2000      	movcs	r0, #0
 80052ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80052b2:	bf00      	nop

080052b4 <__aeabi_d2iz>:
 80052b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80052b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80052bc:	d215      	bcs.n	80052ea <__aeabi_d2iz+0x36>
 80052be:	d511      	bpl.n	80052e4 <__aeabi_d2iz+0x30>
 80052c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80052c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80052c8:	d912      	bls.n	80052f0 <__aeabi_d2iz+0x3c>
 80052ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80052ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80052d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80052da:	fa23 f002 	lsr.w	r0, r3, r2
 80052de:	bf18      	it	ne
 80052e0:	4240      	negne	r0, r0
 80052e2:	4770      	bx	lr
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	4770      	bx	lr
 80052ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80052ee:	d105      	bne.n	80052fc <__aeabi_d2iz+0x48>
 80052f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80052f4:	bf08      	it	eq
 80052f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80052fa:	4770      	bx	lr
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop

08005304 <__aeabi_d2uiz>:
 8005304:	004a      	lsls	r2, r1, #1
 8005306:	d211      	bcs.n	800532c <__aeabi_d2uiz+0x28>
 8005308:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800530c:	d211      	bcs.n	8005332 <__aeabi_d2uiz+0x2e>
 800530e:	d50d      	bpl.n	800532c <__aeabi_d2uiz+0x28>
 8005310:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005314:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005318:	d40e      	bmi.n	8005338 <__aeabi_d2uiz+0x34>
 800531a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800531e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005322:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005326:	fa23 f002 	lsr.w	r0, r3, r2
 800532a:	4770      	bx	lr
 800532c:	f04f 0000 	mov.w	r0, #0
 8005330:	4770      	bx	lr
 8005332:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005336:	d102      	bne.n	800533e <__aeabi_d2uiz+0x3a>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	4770      	bx	lr
 800533e:	f04f 0000 	mov.w	r0, #0
 8005342:	4770      	bx	lr

08005344 <__aeabi_uldivmod>:
 8005344:	b953      	cbnz	r3, 800535c <__aeabi_uldivmod+0x18>
 8005346:	b94a      	cbnz	r2, 800535c <__aeabi_uldivmod+0x18>
 8005348:	2900      	cmp	r1, #0
 800534a:	bf08      	it	eq
 800534c:	2800      	cmpeq	r0, #0
 800534e:	bf1c      	itt	ne
 8005350:	f04f 31ff 	movne.w	r1, #4294967295
 8005354:	f04f 30ff 	movne.w	r0, #4294967295
 8005358:	f000 b9a0 	b.w	800569c <__aeabi_idiv0>
 800535c:	f1ad 0c08 	sub.w	ip, sp, #8
 8005360:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005364:	f000 f83c 	bl	80053e0 <__udivmoddi4>
 8005368:	f8dd e004 	ldr.w	lr, [sp, #4]
 800536c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005370:	b004      	add	sp, #16
 8005372:	4770      	bx	lr

08005374 <__aeabi_d2lz>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4604      	mov	r4, r0
 800537c:	460d      	mov	r5, r1
 800537e:	f7ff ff71 	bl	8005264 <__aeabi_dcmplt>
 8005382:	b928      	cbnz	r0, 8005390 <__aeabi_d2lz+0x1c>
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800538c:	f000 b80a 	b.w	80053a4 <__aeabi_d2ulz>
 8005390:	4620      	mov	r0, r4
 8005392:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8005396:	f000 f805 	bl	80053a4 <__aeabi_d2ulz>
 800539a:	4240      	negs	r0, r0
 800539c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop

080053a4 <__aeabi_d2ulz>:
 80053a4:	b5d0      	push	{r4, r6, r7, lr}
 80053a6:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <__aeabi_d2ulz+0x34>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	4606      	mov	r6, r0
 80053ac:	460f      	mov	r7, r1
 80053ae:	f7ff fce7 	bl	8004d80 <__aeabi_dmul>
 80053b2:	f7ff ffa7 	bl	8005304 <__aeabi_d2uiz>
 80053b6:	4604      	mov	r4, r0
 80053b8:	f7ff fc68 	bl	8004c8c <__aeabi_ui2d>
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <__aeabi_d2ulz+0x38>)
 80053be:	2200      	movs	r2, #0
 80053c0:	f7ff fcde 	bl	8004d80 <__aeabi_dmul>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7ff fb20 	bl	8004a10 <__aeabi_dsub>
 80053d0:	f7ff ff98 	bl	8005304 <__aeabi_d2uiz>
 80053d4:	4621      	mov	r1, r4
 80053d6:	bdd0      	pop	{r4, r6, r7, pc}
 80053d8:	3df00000 	.word	0x3df00000
 80053dc:	41f00000 	.word	0x41f00000

080053e0 <__udivmoddi4>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	9d08      	ldr	r5, [sp, #32]
 80053e6:	460c      	mov	r4, r1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d14e      	bne.n	800548a <__udivmoddi4+0xaa>
 80053ec:	4694      	mov	ip, r2
 80053ee:	458c      	cmp	ip, r1
 80053f0:	4686      	mov	lr, r0
 80053f2:	fab2 f282 	clz	r2, r2
 80053f6:	d962      	bls.n	80054be <__udivmoddi4+0xde>
 80053f8:	b14a      	cbz	r2, 800540e <__udivmoddi4+0x2e>
 80053fa:	f1c2 0320 	rsb	r3, r2, #32
 80053fe:	4091      	lsls	r1, r2
 8005400:	fa20 f303 	lsr.w	r3, r0, r3
 8005404:	fa0c fc02 	lsl.w	ip, ip, r2
 8005408:	4319      	orrs	r1, r3
 800540a:	fa00 fe02 	lsl.w	lr, r0, r2
 800540e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005412:	fa1f f68c 	uxth.w	r6, ip
 8005416:	fbb1 f4f7 	udiv	r4, r1, r7
 800541a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800541e:	fb07 1114 	mls	r1, r7, r4, r1
 8005422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005426:	fb04 f106 	mul.w	r1, r4, r6
 800542a:	4299      	cmp	r1, r3
 800542c:	d90a      	bls.n	8005444 <__udivmoddi4+0x64>
 800542e:	eb1c 0303 	adds.w	r3, ip, r3
 8005432:	f104 30ff 	add.w	r0, r4, #4294967295
 8005436:	f080 8112 	bcs.w	800565e <__udivmoddi4+0x27e>
 800543a:	4299      	cmp	r1, r3
 800543c:	f240 810f 	bls.w	800565e <__udivmoddi4+0x27e>
 8005440:	3c02      	subs	r4, #2
 8005442:	4463      	add	r3, ip
 8005444:	1a59      	subs	r1, r3, r1
 8005446:	fa1f f38e 	uxth.w	r3, lr
 800544a:	fbb1 f0f7 	udiv	r0, r1, r7
 800544e:	fb07 1110 	mls	r1, r7, r0, r1
 8005452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005456:	fb00 f606 	mul.w	r6, r0, r6
 800545a:	429e      	cmp	r6, r3
 800545c:	d90a      	bls.n	8005474 <__udivmoddi4+0x94>
 800545e:	eb1c 0303 	adds.w	r3, ip, r3
 8005462:	f100 31ff 	add.w	r1, r0, #4294967295
 8005466:	f080 80fc 	bcs.w	8005662 <__udivmoddi4+0x282>
 800546a:	429e      	cmp	r6, r3
 800546c:	f240 80f9 	bls.w	8005662 <__udivmoddi4+0x282>
 8005470:	4463      	add	r3, ip
 8005472:	3802      	subs	r0, #2
 8005474:	1b9b      	subs	r3, r3, r6
 8005476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800547a:	2100      	movs	r1, #0
 800547c:	b11d      	cbz	r5, 8005486 <__udivmoddi4+0xa6>
 800547e:	40d3      	lsrs	r3, r2
 8005480:	2200      	movs	r2, #0
 8005482:	e9c5 3200 	strd	r3, r2, [r5]
 8005486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548a:	428b      	cmp	r3, r1
 800548c:	d905      	bls.n	800549a <__udivmoddi4+0xba>
 800548e:	b10d      	cbz	r5, 8005494 <__udivmoddi4+0xb4>
 8005490:	e9c5 0100 	strd	r0, r1, [r5]
 8005494:	2100      	movs	r1, #0
 8005496:	4608      	mov	r0, r1
 8005498:	e7f5      	b.n	8005486 <__udivmoddi4+0xa6>
 800549a:	fab3 f183 	clz	r1, r3
 800549e:	2900      	cmp	r1, #0
 80054a0:	d146      	bne.n	8005530 <__udivmoddi4+0x150>
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	d302      	bcc.n	80054ac <__udivmoddi4+0xcc>
 80054a6:	4290      	cmp	r0, r2
 80054a8:	f0c0 80f0 	bcc.w	800568c <__udivmoddi4+0x2ac>
 80054ac:	1a86      	subs	r6, r0, r2
 80054ae:	eb64 0303 	sbc.w	r3, r4, r3
 80054b2:	2001      	movs	r0, #1
 80054b4:	2d00      	cmp	r5, #0
 80054b6:	d0e6      	beq.n	8005486 <__udivmoddi4+0xa6>
 80054b8:	e9c5 6300 	strd	r6, r3, [r5]
 80054bc:	e7e3      	b.n	8005486 <__udivmoddi4+0xa6>
 80054be:	2a00      	cmp	r2, #0
 80054c0:	f040 8090 	bne.w	80055e4 <__udivmoddi4+0x204>
 80054c4:	eba1 040c 	sub.w	r4, r1, ip
 80054c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80054cc:	fa1f f78c 	uxth.w	r7, ip
 80054d0:	2101      	movs	r1, #1
 80054d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80054d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80054da:	fb08 4416 	mls	r4, r8, r6, r4
 80054de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80054e2:	fb07 f006 	mul.w	r0, r7, r6
 80054e6:	4298      	cmp	r0, r3
 80054e8:	d908      	bls.n	80054fc <__udivmoddi4+0x11c>
 80054ea:	eb1c 0303 	adds.w	r3, ip, r3
 80054ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80054f2:	d202      	bcs.n	80054fa <__udivmoddi4+0x11a>
 80054f4:	4298      	cmp	r0, r3
 80054f6:	f200 80cd 	bhi.w	8005694 <__udivmoddi4+0x2b4>
 80054fa:	4626      	mov	r6, r4
 80054fc:	1a1c      	subs	r4, r3, r0
 80054fe:	fa1f f38e 	uxth.w	r3, lr
 8005502:	fbb4 f0f8 	udiv	r0, r4, r8
 8005506:	fb08 4410 	mls	r4, r8, r0, r4
 800550a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800550e:	fb00 f707 	mul.w	r7, r0, r7
 8005512:	429f      	cmp	r7, r3
 8005514:	d908      	bls.n	8005528 <__udivmoddi4+0x148>
 8005516:	eb1c 0303 	adds.w	r3, ip, r3
 800551a:	f100 34ff 	add.w	r4, r0, #4294967295
 800551e:	d202      	bcs.n	8005526 <__udivmoddi4+0x146>
 8005520:	429f      	cmp	r7, r3
 8005522:	f200 80b0 	bhi.w	8005686 <__udivmoddi4+0x2a6>
 8005526:	4620      	mov	r0, r4
 8005528:	1bdb      	subs	r3, r3, r7
 800552a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800552e:	e7a5      	b.n	800547c <__udivmoddi4+0x9c>
 8005530:	f1c1 0620 	rsb	r6, r1, #32
 8005534:	408b      	lsls	r3, r1
 8005536:	fa22 f706 	lsr.w	r7, r2, r6
 800553a:	431f      	orrs	r7, r3
 800553c:	fa20 fc06 	lsr.w	ip, r0, r6
 8005540:	fa04 f301 	lsl.w	r3, r4, r1
 8005544:	ea43 030c 	orr.w	r3, r3, ip
 8005548:	40f4      	lsrs	r4, r6
 800554a:	fa00 f801 	lsl.w	r8, r0, r1
 800554e:	0c38      	lsrs	r0, r7, #16
 8005550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8005554:	fbb4 fef0 	udiv	lr, r4, r0
 8005558:	fa1f fc87 	uxth.w	ip, r7
 800555c:	fb00 441e 	mls	r4, r0, lr, r4
 8005560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005564:	fb0e f90c 	mul.w	r9, lr, ip
 8005568:	45a1      	cmp	r9, r4
 800556a:	fa02 f201 	lsl.w	r2, r2, r1
 800556e:	d90a      	bls.n	8005586 <__udivmoddi4+0x1a6>
 8005570:	193c      	adds	r4, r7, r4
 8005572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8005576:	f080 8084 	bcs.w	8005682 <__udivmoddi4+0x2a2>
 800557a:	45a1      	cmp	r9, r4
 800557c:	f240 8081 	bls.w	8005682 <__udivmoddi4+0x2a2>
 8005580:	f1ae 0e02 	sub.w	lr, lr, #2
 8005584:	443c      	add	r4, r7
 8005586:	eba4 0409 	sub.w	r4, r4, r9
 800558a:	fa1f f983 	uxth.w	r9, r3
 800558e:	fbb4 f3f0 	udiv	r3, r4, r0
 8005592:	fb00 4413 	mls	r4, r0, r3, r4
 8005596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800559a:	fb03 fc0c 	mul.w	ip, r3, ip
 800559e:	45a4      	cmp	ip, r4
 80055a0:	d907      	bls.n	80055b2 <__udivmoddi4+0x1d2>
 80055a2:	193c      	adds	r4, r7, r4
 80055a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80055a8:	d267      	bcs.n	800567a <__udivmoddi4+0x29a>
 80055aa:	45a4      	cmp	ip, r4
 80055ac:	d965      	bls.n	800567a <__udivmoddi4+0x29a>
 80055ae:	3b02      	subs	r3, #2
 80055b0:	443c      	add	r4, r7
 80055b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80055b6:	fba0 9302 	umull	r9, r3, r0, r2
 80055ba:	eba4 040c 	sub.w	r4, r4, ip
 80055be:	429c      	cmp	r4, r3
 80055c0:	46ce      	mov	lr, r9
 80055c2:	469c      	mov	ip, r3
 80055c4:	d351      	bcc.n	800566a <__udivmoddi4+0x28a>
 80055c6:	d04e      	beq.n	8005666 <__udivmoddi4+0x286>
 80055c8:	b155      	cbz	r5, 80055e0 <__udivmoddi4+0x200>
 80055ca:	ebb8 030e 	subs.w	r3, r8, lr
 80055ce:	eb64 040c 	sbc.w	r4, r4, ip
 80055d2:	fa04 f606 	lsl.w	r6, r4, r6
 80055d6:	40cb      	lsrs	r3, r1
 80055d8:	431e      	orrs	r6, r3
 80055da:	40cc      	lsrs	r4, r1
 80055dc:	e9c5 6400 	strd	r6, r4, [r5]
 80055e0:	2100      	movs	r1, #0
 80055e2:	e750      	b.n	8005486 <__udivmoddi4+0xa6>
 80055e4:	f1c2 0320 	rsb	r3, r2, #32
 80055e8:	fa20 f103 	lsr.w	r1, r0, r3
 80055ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80055f0:	fa24 f303 	lsr.w	r3, r4, r3
 80055f4:	4094      	lsls	r4, r2
 80055f6:	430c      	orrs	r4, r1
 80055f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80055fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8005600:	fa1f f78c 	uxth.w	r7, ip
 8005604:	fbb3 f0f8 	udiv	r0, r3, r8
 8005608:	fb08 3110 	mls	r1, r8, r0, r3
 800560c:	0c23      	lsrs	r3, r4, #16
 800560e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005612:	fb00 f107 	mul.w	r1, r0, r7
 8005616:	4299      	cmp	r1, r3
 8005618:	d908      	bls.n	800562c <__udivmoddi4+0x24c>
 800561a:	eb1c 0303 	adds.w	r3, ip, r3
 800561e:	f100 36ff 	add.w	r6, r0, #4294967295
 8005622:	d22c      	bcs.n	800567e <__udivmoddi4+0x29e>
 8005624:	4299      	cmp	r1, r3
 8005626:	d92a      	bls.n	800567e <__udivmoddi4+0x29e>
 8005628:	3802      	subs	r0, #2
 800562a:	4463      	add	r3, ip
 800562c:	1a5b      	subs	r3, r3, r1
 800562e:	b2a4      	uxth	r4, r4
 8005630:	fbb3 f1f8 	udiv	r1, r3, r8
 8005634:	fb08 3311 	mls	r3, r8, r1, r3
 8005638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800563c:	fb01 f307 	mul.w	r3, r1, r7
 8005640:	42a3      	cmp	r3, r4
 8005642:	d908      	bls.n	8005656 <__udivmoddi4+0x276>
 8005644:	eb1c 0404 	adds.w	r4, ip, r4
 8005648:	f101 36ff 	add.w	r6, r1, #4294967295
 800564c:	d213      	bcs.n	8005676 <__udivmoddi4+0x296>
 800564e:	42a3      	cmp	r3, r4
 8005650:	d911      	bls.n	8005676 <__udivmoddi4+0x296>
 8005652:	3902      	subs	r1, #2
 8005654:	4464      	add	r4, ip
 8005656:	1ae4      	subs	r4, r4, r3
 8005658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800565c:	e739      	b.n	80054d2 <__udivmoddi4+0xf2>
 800565e:	4604      	mov	r4, r0
 8005660:	e6f0      	b.n	8005444 <__udivmoddi4+0x64>
 8005662:	4608      	mov	r0, r1
 8005664:	e706      	b.n	8005474 <__udivmoddi4+0x94>
 8005666:	45c8      	cmp	r8, r9
 8005668:	d2ae      	bcs.n	80055c8 <__udivmoddi4+0x1e8>
 800566a:	ebb9 0e02 	subs.w	lr, r9, r2
 800566e:	eb63 0c07 	sbc.w	ip, r3, r7
 8005672:	3801      	subs	r0, #1
 8005674:	e7a8      	b.n	80055c8 <__udivmoddi4+0x1e8>
 8005676:	4631      	mov	r1, r6
 8005678:	e7ed      	b.n	8005656 <__udivmoddi4+0x276>
 800567a:	4603      	mov	r3, r0
 800567c:	e799      	b.n	80055b2 <__udivmoddi4+0x1d2>
 800567e:	4630      	mov	r0, r6
 8005680:	e7d4      	b.n	800562c <__udivmoddi4+0x24c>
 8005682:	46d6      	mov	lr, sl
 8005684:	e77f      	b.n	8005586 <__udivmoddi4+0x1a6>
 8005686:	4463      	add	r3, ip
 8005688:	3802      	subs	r0, #2
 800568a:	e74d      	b.n	8005528 <__udivmoddi4+0x148>
 800568c:	4606      	mov	r6, r0
 800568e:	4623      	mov	r3, r4
 8005690:	4608      	mov	r0, r1
 8005692:	e70f      	b.n	80054b4 <__udivmoddi4+0xd4>
 8005694:	3e02      	subs	r6, #2
 8005696:	4463      	add	r3, ip
 8005698:	e730      	b.n	80054fc <__udivmoddi4+0x11c>
 800569a:	bf00      	nop

0800569c <__aeabi_idiv0>:
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop

080056a0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80056a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056ac:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80056ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ba:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	cafecafe 	.word	0xcafecafe

080056dc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <LL_LPM_EnableSleep+0x1c>)
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	4a04      	ldr	r2, [pc, #16]	@ (80056f8 <LL_LPM_EnableSleep+0x1c>)
 80056e6:	f023 0304 	bic.w	r3, r3, #4
 80056ea:	6113      	str	r3, [r2, #16]
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	e000ed00 	.word	0xe000ed00

080056fc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005700:	4b04      	ldr	r3, [pc, #16]	@ (8005714 <MX_APPE_Config+0x18>)
 8005702:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005706:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8005708:	f000 f806 	bl	8005718 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800570c:	f000 f80b 	bl	8005726 <Config_HSE>

  return;
 8005710:	bf00      	nop
}
 8005712:	bd80      	pop	{r7, pc}
 8005714:	58004000 	.word	0x58004000

08005718 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800571c:	bf00      	nop
}
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800572c:	2000      	movs	r0, #0
 800572e:	f008 fb37 	bl	800dda0 <OTP_Read>
 8005732:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	799b      	ldrb	r3, [r3, #6]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ffae 	bl	80056a0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8005744:	bf00      	nop
 8005746:	bf00      	nop
}
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005756:	f001 fe5b 	bl	8007410 <HAL_GetTick>
 800575a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d00a      	beq.n	800577e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8005768:	f001 fe6a 	bl	8007440 <HAL_GetTickFreq>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005776:	e002      	b.n	800577e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8005778:	f7ff ffb0 	bl	80056dc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800577c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800577e:	f001 fe47 	bl	8007410 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	429a      	cmp	r2, r3
 800578c:	d8f4      	bhi.n	8005778 <HAL_Delay+0x2a>
  }
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UTIL_SEQ_Idle>:

  /* USER CODE END MX_APPE_Process_2 */
}

void UTIL_SEQ_Idle(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800579c:	bf00      	nop
}
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d003      	beq.n	80057be <UTIL_SEQ_EvtIdle+0x18>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d004      	beq.n	80057c6 <UTIL_SEQ_EvtIdle+0x20>
 80057bc:	e00a      	b.n	80057d4 <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 80057be:	2002      	movs	r0, #2
 80057c0:	f009 fc8e 	bl	800f0e0 <UTIL_SEQ_Run>
    break;
 80057c4:	e00b      	b.n	80057de <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80057c6:	2004      	movs	r0, #4
 80057c8:	f009 fdb2 	bl	800f330 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 80057cc:	2003      	movs	r0, #3
 80057ce:	f009 fc87 	bl	800f0e0 <UTIL_SEQ_Run>
    break;
 80057d2:	e004      	b.n	80057de <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	f009 fc82 	bl	800f0e0 <UTIL_SEQ_Run>
    break;
 80057dc:	bf00      	nop
  }
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f008 fc2a 	bl	800e048 <TL_MM_EvtDone>
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005808:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800580a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4313      	orrs	r3, r2
 8005812:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800583c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4313      	orrs	r3, r2
 8005844:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4013      	ands	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <__io_putchar>:
#define HAL_SMALL_WAIT  50

// check if necessary
// Define serial output function using UART2
int __io_putchar(int ch)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 8005868:	1d39      	adds	r1, r7, #4
 800586a:	2332      	movs	r3, #50	@ 0x32
 800586c:	2201      	movs	r2, #1
 800586e:	4804      	ldr	r0, [pc, #16]	@ (8005880 <__io_putchar+0x20>)
 8005870:	f007 f8fb 	bl	800ca6a <HAL_UART_Transmit>
    return 1;
 8005874:	2301      	movs	r3, #1
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200002f4 	.word	0x200002f4

08005884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800588a:	f001 fd53 	bl	8007334 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800588e:	f7ff ff35 	bl	80056fc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005892:	f000 f865 	bl	8005960 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005896:	f000 f8d3 	bl	8005a40 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800589a:	f000 f9b7 	bl	8005c0c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800589e:	f000 fb4d 	bl	8005f3c <MX_GPIO_Init>
  MX_DMA_Init();
 80058a2:	f000 fb39 	bl	8005f18 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80058a6:	f000 faeb 	bl	8005e80 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80058aa:	f000 f9cb 	bl	8005c44 <MX_RTC_Init>
  MX_I2C1_Init();
 80058ae:	f000 f96d 	bl	8005b8c <MX_I2C1_Init>
  MX_TIM2_Init();
 80058b2:	f000 fa4f 	bl	8005d54 <MX_TIM2_Init>
  MX_TIM16_Init();
 80058b6:	f000 fabd 	bl	8005e34 <MX_TIM16_Init>
  MX_ADC1_Init();
 80058ba:	f000 f8e1 	bl	8005a80 <MX_ADC1_Init>
  MX_TIM1_Init();
 80058be:	f000 f9f5 	bl	8005cac <MX_TIM1_Init>
  MX_RF_Init();
 80058c2:	f000 f9b7 	bl	8005c34 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  // check if anything else necessary and to put to header/source
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 80058c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005930 <main+0xac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6898      	ldr	r0, [r3, #8]
 80058cc:	2300      	movs	r3, #0
 80058ce:	2202      	movs	r2, #2
 80058d0:	2100      	movs	r1, #0
 80058d2:	f009 fffd 	bl	800f8d0 <setvbuf>
  printf("\n\n\nNew start\n");
 80058d6:	4817      	ldr	r0, [pc, #92]	@ (8005934 <main+0xb0>)
 80058d8:	f009 fff2 	bl	800f8c0 <puts>

  // init DHT11
  //init_dht11(&dht11, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
  TEMP_HUMID_init(&OBJ_TEMP_HUMID, DHT22, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058e4:	4a14      	ldr	r2, [pc, #80]	@ (8005938 <main+0xb4>)
 80058e6:	2101      	movs	r1, #1
 80058e8:	4814      	ldr	r0, [pc, #80]	@ (800593c <main+0xb8>)
 80058ea:	f001 fc82 	bl	80071f2 <TEMP_HUMID_init>
  SOIL_MOIST_init(&OBJ_SOIL_MOIST_sensor_1, &adc_buffer[0]);
 80058ee:	4914      	ldr	r1, [pc, #80]	@ (8005940 <main+0xbc>)
 80058f0:	4814      	ldr	r0, [pc, #80]	@ (8005944 <main+0xc0>)
 80058f2:	f001 fc2a 	bl	800714a <SOIL_MOIST_init>
  SOIL_MOIST_init(&OBJ_SOIL_MOIST_sensor_2, &adc_buffer[1]);
 80058f6:	4914      	ldr	r1, [pc, #80]	@ (8005948 <main+0xc4>)
 80058f8:	4814      	ldr	r0, [pc, #80]	@ (800594c <main+0xc8>)
 80058fa:	f001 fc26 	bl	800714a <SOIL_MOIST_init>
  RGB_init(&OBJ_RGB_LED, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80058fe:	230c      	movs	r3, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2304      	movs	r3, #4
 8005904:	2200      	movs	r2, #0
 8005906:	4912      	ldr	r1, [pc, #72]	@ (8005950 <main+0xcc>)
 8005908:	4812      	ldr	r0, [pc, #72]	@ (8005954 <main+0xd0>)
 800590a:	f001 fb53 	bl	8006fb4 <RGB_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 800590e:	2203      	movs	r2, #3
 8005910:	490b      	ldr	r1, [pc, #44]	@ (8005940 <main+0xbc>)
 8005912:	4811      	ldr	r0, [pc, #68]	@ (8005958 <main+0xd4>)
 8005914:	f002 f8b4 	bl	8007a80 <HAL_ADC_Start_DMA>

  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 8005918:	4810      	ldr	r0, [pc, #64]	@ (800595c <main+0xd8>)
 800591a:	f005 fe2b 	bl	800b574 <HAL_TIM_Base_Start_IT>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <main+0xa6>
    {
      /* Starting Error */
      Error_Handler();
 8005924:	f000 fb5e 	bl	8005fe4 <Error_Handler>
  /* Init code for STM32_WPAN */
//  MX_APPE_Init();

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <main+0xa6>
 800592e:	bf00      	nop
 8005930:	2000002c 	.word	0x2000002c
 8005934:	08010660 	.word	0x08010660
 8005938:	200002a8 	.word	0x200002a8
 800593c:	200003a8 	.word	0x200003a8
 8005940:	20000388 	.word	0x20000388
 8005944:	200003c4 	.word	0x200003c4
 8005948:	2000038a 	.word	0x2000038a
 800594c:	200003cc 	.word	0x200003cc
 8005950:	2000025c 	.word	0x2000025c
 8005954:	20000390 	.word	0x20000390
 8005958:	20000098 	.word	0x20000098
 800595c:	20000210 	.word	0x20000210

08005960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b09a      	sub	sp, #104	@ 0x68
 8005964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005966:	f107 0320 	add.w	r3, r7, #32
 800596a:	2248      	movs	r2, #72	@ 0x48
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f00a f93a 	bl	800fbe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	615a      	str	r2, [r3, #20]
 8005984:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f023 0303 	bic.w	r3, r3, #3
 80059a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059aa:	4b24      	ldr	r3, [pc, #144]	@ (8005a3c <SystemClock_Config+0xdc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059b2:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <SystemClock_Config+0xdc>)
 80059b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <SystemClock_Config+0xdc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80059c6:	232b      	movs	r3, #43	@ 0x2b
 80059c8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80059d6:	2301      	movs	r3, #1
 80059d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059da:	2340      	movs	r3, #64	@ 0x40
 80059dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80059de:	2300      	movs	r3, #0
 80059e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80059e2:	2360      	movs	r3, #96	@ 0x60
 80059e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80059e6:	2305      	movs	r3, #5
 80059e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059ee:	f107 0320 	add.w	r3, r7, #32
 80059f2:	4618      	mov	r0, r3
 80059f4:	f004 f926 	bl	8009c44 <HAL_RCC_OscConfig>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80059fe:	f000 faf1 	bl	8005fe4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005a02:	236f      	movs	r3, #111	@ 0x6f
 8005a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005a06:	2302      	movs	r3, #2
 8005a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f004 fc82 	bl	800a32c <HAL_RCC_ClockConfig>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005a2e:	f000 fad9 	bl	8005fe4 <Error_Handler>
  }
}
 8005a32:	bf00      	nop
 8005a34:	3768      	adds	r7, #104	@ 0x68
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	58000400 	.word	0x58000400

08005a40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b094      	sub	sp, #80	@ 0x50
 8005a44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a46:	463b      	mov	r3, r7
 8005a48:	2250      	movs	r2, #80	@ 0x50
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f00a f8cb 	bl	800fbe8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8005a52:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005a56:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8005a58:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005a5c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005a62:	2310      	movs	r3, #16
 8005a64:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a66:	463b      	mov	r3, r7
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f005 f89c 	bl	800aba6 <HAL_RCCEx_PeriphCLKConfig>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8005a74:	f000 fab6 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005a78:	bf00      	nop
 8005a7a:	3750      	adds	r7, #80	@ 0x50
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a86:	463b      	mov	r3, r7
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	611a      	str	r2, [r3, #16]
 8005a94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005a96:	4b38      	ldr	r3, [pc, #224]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005a98:	4a38      	ldr	r2, [pc, #224]	@ (8005b7c <MX_ADC1_Init+0xfc>)
 8005a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8005a9c:	4b36      	ldr	r3, [pc, #216]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005a9e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005aa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005aa4:	4b34      	ldr	r3, [pc, #208]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005aaa:	4b33      	ldr	r3, [pc, #204]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005ab0:	4b31      	ldr	r3, [pc, #196]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005ab6:	4b30      	ldr	r3, [pc, #192]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ab8:	2208      	movs	r2, #8
 8005aba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005abc:	4b2e      	ldr	r3, [pc, #184]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005aca:	2203      	movs	r2, #3
 8005acc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005ace:	4b2a      	ldr	r3, [pc, #168]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ad6:	4b28      	ldr	r3, [pc, #160]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005adc:	4b26      	ldr	r3, [pc, #152]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005ae2:	4b25      	ldr	r3, [pc, #148]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005aea:	4b23      	ldr	r3, [pc, #140]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005aec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005af0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005af2:	4b21      	ldr	r3, [pc, #132]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005afa:	481f      	ldr	r0, [pc, #124]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005afc:	f001 fe74 	bl	80077e8 <HAL_ADC_Init>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8005b06:	f000 fa6d 	bl	8005fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <MX_ADC1_Init+0x100>)
 8005b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005b0e:	2306      	movs	r3, #6
 8005b10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005b16:	237f      	movs	r3, #127	@ 0x7f
 8005b18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b22:	463b      	mov	r3, r7
 8005b24:	4619      	mov	r1, r3
 8005b26:	4814      	ldr	r0, [pc, #80]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005b28:	f002 f84c 	bl	8007bc4 <HAL_ADC_ConfigChannel>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8005b32:	f000 fa57 	bl	8005fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005b36:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <MX_ADC1_Init+0x104>)
 8005b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b3e:	463b      	mov	r3, r7
 8005b40:	4619      	mov	r1, r3
 8005b42:	480d      	ldr	r0, [pc, #52]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005b44:	f002 f83e 	bl	8007bc4 <HAL_ADC_ConfigChannel>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8005b4e:	f000 fa49 	bl	8005fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <MX_ADC1_Init+0x108>)
 8005b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005b56:	2312      	movs	r3, #18
 8005b58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4806      	ldr	r0, [pc, #24]	@ (8005b78 <MX_ADC1_Init+0xf8>)
 8005b60:	f002 f830 	bl	8007bc4 <HAL_ADC_ConfigChannel>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8005b6a:	f000 fa3b 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000098 	.word	0x20000098
 8005b7c:	50040000 	.word	0x50040000
 8005b80:	25b00200 	.word	0x25b00200
 8005b84:	2a000400 	.word	0x2a000400
 8005b88:	2e300800 	.word	0x2e300800

08005b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b90:	4b1b      	ldr	r3, [pc, #108]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005b92:	4a1c      	ldr	r2, [pc, #112]	@ (8005c04 <MX_I2C1_Init+0x78>)
 8005b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8005b96:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005b98:	4a1b      	ldr	r2, [pc, #108]	@ (8005c08 <MX_I2C1_Init+0x7c>)
 8005b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005b9c:	4b18      	ldr	r3, [pc, #96]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ba2:	4b17      	ldr	r3, [pc, #92]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ba8:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005bb4:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005bba:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bc6:	480e      	ldr	r0, [pc, #56]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bc8:	f003 faf0 	bl	80091ac <HAL_I2C_Init>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005bd2:	f000 fa07 	bl	8005fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4809      	ldr	r0, [pc, #36]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bda:	f003 fb82 	bl	80092e2 <HAL_I2CEx_ConfigAnalogFilter>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005be4:	f000 f9fe 	bl	8005fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005be8:	2100      	movs	r1, #0
 8005bea:	4805      	ldr	r0, [pc, #20]	@ (8005c00 <MX_I2C1_Init+0x74>)
 8005bec:	f003 fbc4 	bl	8009378 <HAL_I2CEx_ConfigDigitalFilter>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005bf6:	f000 f9f5 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2000015c 	.word	0x2000015c
 8005c04:	40005400 	.word	0x40005400
 8005c08:	00b07cb4 	.word	0x00b07cb4

08005c0c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8005c10:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <MX_IPCC_Init+0x20>)
 8005c12:	4a07      	ldr	r2, [pc, #28]	@ (8005c30 <MX_IPCC_Init+0x24>)
 8005c14:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8005c16:	4805      	ldr	r0, [pc, #20]	@ (8005c2c <MX_IPCC_Init+0x20>)
 8005c18:	f003 fbfa 	bl	8009410 <HAL_IPCC_Init>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8005c22:	f000 f9df 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8005c26:	bf00      	nop
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	200001b0 	.word	0x200001b0
 8005c30:	58000c00 	.word	0x58000c00

08005c34 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005c48:	4b16      	ldr	r3, [pc, #88]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <MX_RTC_Init+0x64>)
 8005c4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005c4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8005c54:	4b13      	ldr	r3, [pc, #76]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c56:	220f      	movs	r2, #15
 8005c58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8005c5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c5c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005c60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005c62:	4b10      	ldr	r3, [pc, #64]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005c68:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005c7a:	480a      	ldr	r0, [pc, #40]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c7c:	f005 fa1a 	bl	800b0b4 <HAL_RTC_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8005c86:	f000 f9ad 	bl	8005fe4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4805      	ldr	r0, [pc, #20]	@ (8005ca4 <MX_RTC_Init+0x60>)
 8005c90:	f005 fb10 	bl	800b2b4 <HAL_RTCEx_SetWakeUpTimer>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8005c9a:	f000 f9a3 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200001ec 	.word	0x200001ec
 8005ca8:	40002800 	.word	0x40002800

08005cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cc0:	1d3b      	adds	r3, r7, #4
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	605a      	str	r2, [r3, #4]
 8005cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005cca:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005ccc:	4a20      	ldr	r2, [pc, #128]	@ (8005d50 <MX_TIM1_Init+0xa4>)
 8005cce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 8005cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005cd2:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8005cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8005cde:	4b1b      	ldr	r3, [pc, #108]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005ce0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ce6:	4b19      	ldr	r3, [pc, #100]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005cec:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cf2:	4b16      	ldr	r3, [pc, #88]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005cf8:	4814      	ldr	r0, [pc, #80]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005cfa:	f005 fb76 	bl	800b3ea <HAL_TIM_Base_Init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8005d04:	f000 f96e 	bl	8005fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005d0e:	f107 0310 	add.w	r3, r7, #16
 8005d12:	4619      	mov	r1, r3
 8005d14:	480d      	ldr	r0, [pc, #52]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005d16:	f006 f851 	bl	800bdbc <HAL_TIM_ConfigClockSource>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8005d20:	f000 f960 	bl	8005fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d24:	2300      	movs	r3, #0
 8005d26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d30:	1d3b      	adds	r3, r7, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4805      	ldr	r0, [pc, #20]	@ (8005d4c <MX_TIM1_Init+0xa0>)
 8005d36:	f006 fd85 	bl	800c844 <HAL_TIMEx_MasterConfigSynchronization>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005d40:	f000 f950 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005d44:	bf00      	nop
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000210 	.word	0x20000210
 8005d50:	40012c00 	.word	0x40012c00

08005d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	@ 0x28
 8005d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d5a:	f107 031c 	add.w	r3, r7, #28
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d66:	463b      	mov	r3, r7
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	611a      	str	r2, [r3, #16]
 8005d74:	615a      	str	r2, [r3, #20]
 8005d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d78:	4b2d      	ldr	r3, [pc, #180]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8005d80:	4b2b      	ldr	r3, [pc, #172]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005d82:	f240 123f 	movw	r2, #319	@ 0x13f
 8005d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d88:	4b29      	ldr	r3, [pc, #164]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005d8e:	4b28      	ldr	r3, [pc, #160]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d96:	4b26      	ldr	r3, [pc, #152]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9c:	4b24      	ldr	r3, [pc, #144]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005da2:	4823      	ldr	r0, [pc, #140]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005da4:	f005 fc34 	bl	800b610 <HAL_TIM_PWM_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8005dae:	f000 f919 	bl	8005fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005dba:	f107 031c 	add.w	r3, r7, #28
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	481b      	ldr	r0, [pc, #108]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005dc2:	f006 fd3f 	bl	800c844 <HAL_TIMEx_MasterConfigSynchronization>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8005dcc:	f000 f90a 	bl	8005fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dd0:	2360      	movs	r3, #96	@ 0x60
 8005dd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005de0:	463b      	mov	r3, r7
 8005de2:	2200      	movs	r2, #0
 8005de4:	4619      	mov	r1, r3
 8005de6:	4812      	ldr	r0, [pc, #72]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005de8:	f005 fed4 	bl	800bb94 <HAL_TIM_PWM_ConfigChannel>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8005df2:	f000 f8f7 	bl	8005fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005df6:	463b      	mov	r3, r7
 8005df8:	2208      	movs	r2, #8
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	480c      	ldr	r0, [pc, #48]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005dfe:	f005 fec9 	bl	800bb94 <HAL_TIM_PWM_ConfigChannel>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8005e08:	f000 f8ec 	bl	8005fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	220c      	movs	r2, #12
 8005e10:	4619      	mov	r1, r3
 8005e12:	4807      	ldr	r0, [pc, #28]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005e14:	f005 febe 	bl	800bb94 <HAL_TIM_PWM_ConfigChannel>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8005e1e:	f000 f8e1 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005e22:	4803      	ldr	r0, [pc, #12]	@ (8005e30 <MX_TIM2_Init+0xdc>)
 8005e24:	f000 fac4 	bl	80063b0 <HAL_TIM_MspPostInit>

}
 8005e28:	bf00      	nop
 8005e2a:	3728      	adds	r7, #40	@ 0x28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	2000025c 	.word	0x2000025c

08005e34 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005e38:	4b0f      	ldr	r3, [pc, #60]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e3a:	4a10      	ldr	r2, [pc, #64]	@ (8005e7c <MX_TIM16_Init+0x48>)
 8005e3c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e40:	221f      	movs	r2, #31
 8005e42:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e44:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e50:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e52:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005e58:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e5e:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005e64:	4804      	ldr	r0, [pc, #16]	@ (8005e78 <MX_TIM16_Init+0x44>)
 8005e66:	f005 fac0 	bl	800b3ea <HAL_TIM_Base_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005e70:	f000 f8b8 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005e74:	bf00      	nop
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	200002a8 	.word	0x200002a8
 8005e7c:	40014400 	.word	0x40014400

08005e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e84:	4b22      	ldr	r3, [pc, #136]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005e86:	4a23      	ldr	r2, [pc, #140]	@ (8005f14 <MX_USART1_UART_Init+0x94>)
 8005e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e8a:	4b21      	ldr	r3, [pc, #132]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e92:	4b1f      	ldr	r3, [pc, #124]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e98:	4b1d      	ldr	r3, [pc, #116]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005ea6:	220c      	movs	r2, #12
 8005ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eaa:	4b19      	ldr	r3, [pc, #100]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eb0:	4b17      	ldr	r3, [pc, #92]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005eb6:	4b16      	ldr	r3, [pc, #88]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ebc:	4b14      	ldr	r3, [pc, #80]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ec2:	4b13      	ldr	r3, [pc, #76]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ec8:	4811      	ldr	r0, [pc, #68]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005eca:	f006 fd7e 	bl	800c9ca <HAL_UART_Init>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005ed4:	f000 f886 	bl	8005fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ed8:	2100      	movs	r1, #0
 8005eda:	480d      	ldr	r0, [pc, #52]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005edc:	f007 fe95 	bl	800dc0a <HAL_UARTEx_SetTxFifoThreshold>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005ee6:	f000 f87d 	bl	8005fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005eea:	2100      	movs	r1, #0
 8005eec:	4808      	ldr	r0, [pc, #32]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005eee:	f007 feca 	bl	800dc86 <HAL_UARTEx_SetRxFifoThreshold>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005ef8:	f000 f874 	bl	8005fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005efc:	4804      	ldr	r0, [pc, #16]	@ (8005f10 <MX_USART1_UART_Init+0x90>)
 8005efe:	f007 fe4b 	bl	800db98 <HAL_UARTEx_DisableFifoMode>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005f08:	f000 f86c 	bl	8005fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f0c:	bf00      	nop
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	200002f4 	.word	0x200002f4
 8005f14:	40013800 	.word	0x40013800

08005f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005f1c:	2004      	movs	r0, #4
 8005f1e:	f7ff fc6d 	bl	80057fc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f22:	2001      	movs	r0, #1
 8005f24:	f7ff fc6a 	bl	80057fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	200b      	movs	r0, #11
 8005f2e:	f002 fbf8 	bl	8008722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005f32:	200b      	movs	r0, #11
 8005f34:	f002 fc0f 	bl	8008756 <HAL_NVIC_EnableIRQ>

}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f42:	1d3b      	adds	r3, r7, #4
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	605a      	str	r2, [r3, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f50:	2004      	movs	r0, #4
 8005f52:	f7ff fc6c 	bl	800582e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f56:	2002      	movs	r0, #2
 8005f58:	f7ff fc69 	bl	800582e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	f7ff fc66 	bl	800582e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f62:	2010      	movs	r0, #16
 8005f64:	f7ff fc63 	bl	800582e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	481b      	ldr	r0, [pc, #108]	@ (8005fdc <MX_GPIO_Init+0xa0>)
 8005f6e:	f003 f8c7 	bl	8009100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8005f72:	2302      	movs	r3, #2
 8005f74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f86:	f002 ff33 	bl	8008df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_HUMID_Pin */
  GPIO_InitStruct.Pin = TEMP_HUMID_Pin;
 8005f8a:	2380      	movs	r3, #128	@ 0x80
 8005f8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEMP_HUMID_GPIO_Port, &GPIO_InitStruct);
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f9e:	f002 ff27 	bl	8008df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4809      	ldr	r0, [pc, #36]	@ (8005fdc <MX_GPIO_Init+0xa0>)
 8005fb8:	f002 ff1a 	bl	8008df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8005fbc:	2380      	movs	r3, #128	@ 0x80
 8005fbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4804      	ldr	r0, [pc, #16]	@ (8005fe0 <MX_GPIO_Init+0xa4>)
 8005fce:	f002 ff0f 	bl	8008df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	48001000 	.word	0x48001000
 8005fe0:	48000400 	.word	0x48000400

08005fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005fe8:	b672      	cpsid	i
}
 8005fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005fec:	bf00      	nop
 8005fee:	e7fd      	b.n	8005fec <Error_Handler+0x8>

08005ff0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ffc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <LL_AHB2_GRP1_EnableClock>:
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800601a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800601e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4313      	orrs	r3, r2
 8006028:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800602e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4013      	ands	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006036:	68fb      	ldr	r3, [r7, #12]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4313      	orrs	r3, r2
 800605a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006082:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006084:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4313      	orrs	r3, r2
 800608c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006092:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4013      	ands	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80060b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4313      	orrs	r3, r2
 80060be:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4013      	ands	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80060de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80060e2:	f7ff ffaf 	bl	8006044 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2100      	movs	r1, #0
 80060ea:	202e      	movs	r0, #46	@ 0x2e
 80060ec:	f002 fb19 	bl	8008722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80060f0:	202e      	movs	r0, #46	@ 0x2e
 80060f2:	f002 fb30 	bl	8008756 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060f6:	bf00      	nop
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b09c      	sub	sp, #112	@ 0x70
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006104:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	60da      	str	r2, [r3, #12]
 8006112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	2250      	movs	r2, #80	@ 0x50
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f009 fd63 	bl	800fbe8 <memset>
  if(hadc->Instance==ADC1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a32      	ldr	r2, [pc, #200]	@ (80061f0 <HAL_ADC_MspInit+0xf4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d15c      	bne.n	80061e6 <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800612c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006130:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8006132:	2318      	movs	r3, #24
 8006134:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8006136:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800613a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800613c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006140:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8006142:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006146:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8006148:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800614c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800614e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006152:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006154:	f107 030c 	add.w	r3, r7, #12
 8006158:	4618      	mov	r0, r3
 800615a:	f004 fd24 	bl	800aba6 <HAL_RCCEx_PeriphCLKConfig>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8006164:	f7ff ff3e 	bl	8005fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006168:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800616c:	f7ff ff51 	bl	8006012 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006170:	2001      	movs	r0, #1
 8006172:	f7ff ff4e 	bl	8006012 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8006176:	2370      	movs	r3, #112	@ 0x70
 8006178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800617a:	2303      	movs	r3, #3
 800617c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617e:	2300      	movs	r3, #0
 8006180:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006182:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006186:	4619      	mov	r1, r3
 8006188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800618c:	f002 fe30 	bl	8008df0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006190:	4b18      	ldr	r3, [pc, #96]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 8006192:	4a19      	ldr	r2, [pc, #100]	@ (80061f8 <HAL_ADC_MspInit+0xfc>)
 8006194:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006196:	4b17      	ldr	r3, [pc, #92]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 8006198:	2205      	movs	r2, #5
 800619a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800619c:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 800619e:	2200      	movs	r2, #0
 80061a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061a2:	4b14      	ldr	r3, [pc, #80]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061aa:	2280      	movs	r2, #128	@ 0x80
 80061ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061ae:	4b11      	ldr	r3, [pc, #68]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061b6:	4b0f      	ldr	r3, [pc, #60]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80061be:	4b0d      	ldr	r3, [pc, #52]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061c0:	2220      	movs	r2, #32
 80061c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80061c4:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80061ca:	480a      	ldr	r0, [pc, #40]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061cc:	f002 fade 	bl	800878c <HAL_DMA_Init>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 80061d6:	f7ff ff05 	bl	8005fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a05      	ldr	r2, [pc, #20]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80061e0:	4a04      	ldr	r2, [pc, #16]	@ (80061f4 <HAL_ADC_MspInit+0xf8>)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80061e6:	bf00      	nop
 80061e8:	3770      	adds	r7, #112	@ 0x70
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	50040000 	.word	0x50040000
 80061f4:	200000fc 	.word	0x200000fc
 80061f8:	40020008 	.word	0x40020008

080061fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b09c      	sub	sp, #112	@ 0x70
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006204:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006214:	f107 030c 	add.w	r3, r7, #12
 8006218:	2250      	movs	r2, #80	@ 0x50
 800621a:	2100      	movs	r1, #0
 800621c:	4618      	mov	r0, r3
 800621e:	f009 fce3 	bl	800fbe8 <memset>
  if(hi2c->Instance==I2C1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a17      	ldr	r2, [pc, #92]	@ (8006284 <HAL_I2C_MspInit+0x88>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d126      	bne.n	800627a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800622c:	2304      	movs	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006230:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	4618      	mov	r0, r3
 800623c:	f004 fcb3 	bl	800aba6 <HAL_RCCEx_PeriphCLKConfig>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006246:	f7ff fecd 	bl	8005fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800624a:	2002      	movs	r0, #2
 800624c:	f7ff fee1 	bl	8006012 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006250:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006254:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006256:	2312      	movs	r3, #18
 8006258:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625a:	2300      	movs	r3, #0
 800625c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625e:	2300      	movs	r3, #0
 8006260:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006262:	2304      	movs	r3, #4
 8006264:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006266:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800626a:	4619      	mov	r1, r3
 800626c:	4806      	ldr	r0, [pc, #24]	@ (8006288 <HAL_I2C_MspInit+0x8c>)
 800626e:	f002 fdbf 	bl	8008df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006272:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006276:	f7ff fefe 	bl	8006076 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800627a:	bf00      	nop
 800627c:	3770      	adds	r7, #112	@ 0x70
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40005400 	.word	0x40005400
 8006288:	48000400 	.word	0x48000400

0800628c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a0d      	ldr	r2, [pc, #52]	@ (80062d0 <HAL_IPCC_MspInit+0x44>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d113      	bne.n	80062c6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800629e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80062a2:	f7ff fecf 	bl	8006044 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	202c      	movs	r0, #44	@ 0x2c
 80062ac:	f002 fa39 	bl	8008722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80062b0:	202c      	movs	r0, #44	@ 0x2c
 80062b2:	f002 fa50 	bl	8008756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	202d      	movs	r0, #45	@ 0x2d
 80062bc:	f002 fa31 	bl	8008722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80062c0:	202d      	movs	r0, #45	@ 0x2d
 80062c2:	f002 fa48 	bl	8008756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	58000c00 	.word	0x58000c00

080062d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b096      	sub	sp, #88	@ 0x58
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	2250      	movs	r2, #80	@ 0x50
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f009 fc7f 	bl	800fbe8 <memset>
  if(hrtc->Instance==RTC)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a0f      	ldr	r2, [pc, #60]	@ (800632c <HAL_RTC_MspInit+0x58>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d117      	bne.n	8006324 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80062f4:	f003 f912 	bl	800951c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80062f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80062fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006302:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006304:	f107 0308 	add.w	r3, r7, #8
 8006308:	4618      	mov	r0, r3
 800630a:	f004 fc4c 	bl	800aba6 <HAL_RCCEx_PeriphCLKConfig>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8006314:	f7ff fe66 	bl	8005fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006318:	f7ff fe6a 	bl	8005ff0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800631c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006320:	f7ff fea9 	bl	8006076 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8006324:	bf00      	nop
 8006326:	3758      	adds	r7, #88	@ 0x58
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40002800 	.word	0x40002800

08006330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <HAL_TIM_Base_MspInit+0x58>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10c      	bne.n	800635c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006342:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006346:	f7ff feaf 	bl	80060a8 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	2019      	movs	r0, #25
 8006350:	f002 f9e7 	bl	8008722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006354:	2019      	movs	r0, #25
 8006356:	f002 f9fe 	bl	8008756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800635a:	e010      	b.n	800637e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a0a      	ldr	r2, [pc, #40]	@ (800638c <HAL_TIM_Base_MspInit+0x5c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10b      	bne.n	800637e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006366:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800636a:	f7ff fe9d 	bl	80060a8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800636e:	2200      	movs	r2, #0
 8006370:	2100      	movs	r1, #0
 8006372:	2019      	movs	r0, #25
 8006374:	f002 f9d5 	bl	8008722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006378:	2019      	movs	r0, #25
 800637a:	f002 f9ec 	bl	8008756 <HAL_NVIC_EnableIRQ>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40014400 	.word	0x40014400

08006390 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a0:	d102      	bne.n	80063a8 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063a2:	2001      	movs	r0, #1
 80063a4:	f7ff fe67 	bl	8006076 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b8:	f107 030c 	add.w	r3, r7, #12
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d0:	d113      	bne.n	80063fa <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d2:	2001      	movs	r0, #1
 80063d4:	f7ff fe1d 	bl	8006012 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 80063d8:	230d      	movs	r3, #13
 80063da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063dc:	2302      	movs	r3, #2
 80063de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80063e0:	2302      	movs	r3, #2
 80063e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80063e8:	2301      	movs	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80063f6:	f002 fcfb 	bl	8008df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80063fa:	bf00      	nop
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b09c      	sub	sp, #112	@ 0x70
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800640c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800641c:	f107 030c 	add.w	r3, r7, #12
 8006420:	2250      	movs	r2, #80	@ 0x50
 8006422:	2100      	movs	r1, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f009 fbdf 	bl	800fbe8 <memset>
  if(huart->Instance==USART1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1b      	ldr	r2, [pc, #108]	@ (800649c <HAL_UART_MspInit+0x98>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d12e      	bne.n	8006492 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006434:	2301      	movs	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006438:	2300      	movs	r3, #0
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	4618      	mov	r0, r3
 8006442:	f004 fbb0 	bl	800aba6 <HAL_RCCEx_PeriphCLKConfig>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800644c:	f7ff fdca 	bl	8005fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006450:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006454:	f7ff fe28 	bl	80060a8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006458:	2001      	movs	r0, #1
 800645a:	f7ff fdda 	bl	8006012 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800645e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006462:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006464:	2302      	movs	r3, #2
 8006466:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006468:	2300      	movs	r3, #0
 800646a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800646c:	2300      	movs	r3, #0
 800646e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006470:	2307      	movs	r3, #7
 8006472:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006474:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006478:	4619      	mov	r1, r3
 800647a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800647e:	f002 fcb7 	bl	8008df0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006482:	2200      	movs	r2, #0
 8006484:	2100      	movs	r1, #0
 8006486:	2024      	movs	r0, #36	@ 0x24
 8006488:	f002 f94b 	bl	8008722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800648c:	2024      	movs	r0, #36	@ 0x24
 800648e:	f002 f962 	bl	8008756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8006492:	bf00      	nop
 8006494:	3770      	adds	r7, #112	@ 0x70
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40013800 	.word	0x40013800

080064a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <NMI_Handler+0x4>

080064a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <HardFault_Handler+0x4>

080064b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <MemManage_Handler+0x4>

080064b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <BusFault_Handler+0x4>

080064c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <UsageFault_Handler+0x4>

080064c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064d6:	b480      	push	{r7}
 80064d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064da:	bf00      	nop
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064e8:	bf00      	nop
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064f6:	f000 ff77 	bl	80073e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064fa:	bf00      	nop
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006504:	4802      	ldr	r0, [pc, #8]	@ (8006510 <DMA1_Channel1_IRQHandler+0x10>)
 8006506:	f002 fb22 	bl	8008b4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200000fc 	.word	0x200000fc

08006514 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006518:	4804      	ldr	r0, [pc, #16]	@ (800652c <TIM1_UP_TIM16_IRQHandler+0x18>)
 800651a:	f005 fa33 	bl	800b984 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800651e:	4804      	ldr	r0, [pc, #16]	@ (8006530 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8006520:	f005 fa30 	bl	800b984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  cyclic_routine();
 8006524:	f000 fcfc 	bl	8006f20 <cyclic_routine>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006528:	bf00      	nop
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000210 	.word	0x20000210
 8006530:	200002a8 	.word	0x200002a8

08006534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006538:	4802      	ldr	r0, [pc, #8]	@ (8006544 <USART1_IRQHandler+0x10>)
 800653a:	f006 fb25 	bl	800cb88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200002f4 	.word	0x200002f4

08006548 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800654c:	f008 fc88 	bl	800ee60 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006550:	bf00      	nop
 8006552:	bd80      	pop	{r7, pc}

08006554 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006558:	f008 fcd8 	bl	800ef0c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800655c:	bf00      	nop
 800655e:	bd80      	pop	{r7, pc}

08006560 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006564:	f002 fdfe 	bl	8009164 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006568:	bf00      	nop
 800656a:	bd80      	pop	{r7, pc}

0800656c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return 1;
 8006570:	2301      	movs	r3, #1
}
 8006572:	4618      	mov	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <_kill>:

int _kill(int pid, int sig)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006586:	f009 fb8d 	bl	800fca4 <__errno>
 800658a:	4603      	mov	r3, r0
 800658c:	2216      	movs	r2, #22
 800658e:	601a      	str	r2, [r3, #0]
  return -1;
 8006590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <_exit>:

void _exit (int status)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80065a4:	f04f 31ff 	mov.w	r1, #4294967295
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ffe7 	bl	800657c <_kill>
  while (1) {}    /* Make sure we hang here */
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <_exit+0x12>

080065b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e00a      	b.n	80065da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80065c4:	f3af 8000 	nop.w
 80065c8:	4601      	mov	r1, r0
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	60ba      	str	r2, [r7, #8]
 80065d0:	b2ca      	uxtb	r2, r1
 80065d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3301      	adds	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	dbf0      	blt.n	80065c4 <_read+0x12>
  }

  return len;
 80065e2:	687b      	ldr	r3, [r7, #4]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e009      	b.n	8006612 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	60ba      	str	r2, [r7, #8]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff f92a 	bl	8005860 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3301      	adds	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	dbf1      	blt.n	80065fe <_write+0x12>
  }
  return len;
 800661a:	687b      	ldr	r3, [r7, #4]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_close>:

int _close(int file)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800664c:	605a      	str	r2, [r3, #4]
  return 0;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <_isatty>:

int _isatty(int file)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006664:	2301      	movs	r3, #1
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006694:	4a14      	ldr	r2, [pc, #80]	@ (80066e8 <_sbrk+0x5c>)
 8006696:	4b15      	ldr	r3, [pc, #84]	@ (80066ec <_sbrk+0x60>)
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066a0:	4b13      	ldr	r3, [pc, #76]	@ (80066f0 <_sbrk+0x64>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <_sbrk+0x64>)
 80066aa:	4a12      	ldr	r2, [pc, #72]	@ (80066f4 <_sbrk+0x68>)
 80066ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066ae:	4b10      	ldr	r3, [pc, #64]	@ (80066f0 <_sbrk+0x64>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d207      	bcs.n	80066cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066bc:	f009 faf2 	bl	800fca4 <__errno>
 80066c0:	4603      	mov	r3, r0
 80066c2:	220c      	movs	r2, #12
 80066c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	e009      	b.n	80066e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066cc:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <_sbrk+0x64>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <_sbrk+0x64>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	4a05      	ldr	r2, [pc, #20]	@ (80066f0 <_sbrk+0x64>)
 80066dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20030000 	.word	0x20030000
 80066ec:	00000400 	.word	0x00000400
 80066f0:	200003d4 	.word	0x200003d4
 80066f4:	20000648 	.word	0x20000648

080066f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80066fc:	4b24      	ldr	r3, [pc, #144]	@ (8006790 <SystemInit+0x98>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006702:	4a23      	ldr	r2, [pc, #140]	@ (8006790 <SystemInit+0x98>)
 8006704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800670c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006720:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006724:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006730:	4b18      	ldr	r3, [pc, #96]	@ (8006794 <SystemInit+0x9c>)
 8006732:	4013      	ands	r3, r2
 8006734:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800673a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800673e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006742:	f023 0305 	bic.w	r3, r3, #5
 8006746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800674a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800675e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006762:	4a0d      	ldr	r2, [pc, #52]	@ (8006798 <SystemInit+0xa0>)
 8006764:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676a:	4a0b      	ldr	r2, [pc, #44]	@ (8006798 <SystemInit+0xa0>)
 800676c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800676e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800677c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800677e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006782:	2200      	movs	r2, #0
 8006784:	619a      	str	r2, [r3, #24]
}
 8006786:	bf00      	nop
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	e000ed00 	.word	0xe000ed00
 8006794:	faf6fefb 	.word	0xfaf6fefb
 8006798:	22041000 	.word	0x22041000

0800679c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800679c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800679e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067a0:	3304      	adds	r3, #4

080067a2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067a2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067a4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80067a6:	d3f9      	bcc.n	800679c <CopyDataInit>
  bx lr
 80067a8:	4770      	bx	lr

080067aa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80067aa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80067ac:	3004      	adds	r0, #4

080067ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80067ae:	4288      	cmp	r0, r1
  bcc FillZerobss
 80067b0:	d3fb      	bcc.n	80067aa <FillZerobss>
  bx lr
 80067b2:	4770      	bx	lr

080067b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80067b4:	480c      	ldr	r0, [pc, #48]	@ (80067e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80067b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80067b8:	f7ff ff9e 	bl	80066f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80067bc:	480b      	ldr	r0, [pc, #44]	@ (80067ec <LoopForever+0x6>)
 80067be:	490c      	ldr	r1, [pc, #48]	@ (80067f0 <LoopForever+0xa>)
 80067c0:	4a0c      	ldr	r2, [pc, #48]	@ (80067f4 <LoopForever+0xe>)
 80067c2:	2300      	movs	r3, #0
 80067c4:	f7ff ffed 	bl	80067a2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80067c8:	480b      	ldr	r0, [pc, #44]	@ (80067f8 <LoopForever+0x12>)
 80067ca:	490c      	ldr	r1, [pc, #48]	@ (80067fc <LoopForever+0x16>)
 80067cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006800 <LoopForever+0x1a>)
 80067ce:	2300      	movs	r3, #0
 80067d0:	f7ff ffe7 	bl	80067a2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80067d4:	480b      	ldr	r0, [pc, #44]	@ (8006804 <LoopForever+0x1e>)
 80067d6:	490c      	ldr	r1, [pc, #48]	@ (8006808 <LoopForever+0x22>)
 80067d8:	2300      	movs	r3, #0
 80067da:	f7ff ffe8 	bl	80067ae <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80067de:	f009 fa67 	bl	800fcb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80067e2:	f7ff f84f 	bl	8005884 <main>

080067e6 <LoopForever>:

LoopForever:
  b LoopForever
 80067e6:	e7fe      	b.n	80067e6 <LoopForever>
  ldr   r0, =_estack
 80067e8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80067ec:	20000008 	.word	0x20000008
 80067f0:	2000007c 	.word	0x2000007c
 80067f4:	08010bcc 	.word	0x08010bcc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80067f8:	200300d8 	.word	0x200300d8
 80067fc:	200300d8 	.word	0x200300d8
 8006800:	08010c40 	.word	0x08010c40
  INIT_BSS _sbss, _ebss
 8006804:	2000007c 	.word	0x2000007c
 8006808:	20000648 	.word	0x20000648

0800680c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800680c:	e7fe      	b.n	800680c <ADC1_IRQHandler>
	...

08006810 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8006814:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <DWT_Delay_Init+0x58>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4a13      	ldr	r2, [pc, #76]	@ (8006868 <DWT_Delay_Init+0x58>)
 800681a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800681e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8006820:	4b11      	ldr	r3, [pc, #68]	@ (8006868 <DWT_Delay_Init+0x58>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4a10      	ldr	r2, [pc, #64]	@ (8006868 <DWT_Delay_Init+0x58>)
 8006826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800682a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800682c:	4b0f      	ldr	r3, [pc, #60]	@ (800686c <DWT_Delay_Init+0x5c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0e      	ldr	r2, [pc, #56]	@ (800686c <DWT_Delay_Init+0x5c>)
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8006838:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <DWT_Delay_Init+0x5c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0b      	ldr	r2, [pc, #44]	@ (800686c <DWT_Delay_Init+0x5c>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8006844:	4b09      	ldr	r3, [pc, #36]	@ (800686c <DWT_Delay_Init+0x5c>)
 8006846:	2200      	movs	r2, #0
 8006848:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800684a:	bf00      	nop
     __ASM volatile ("NOP");
 800684c:	bf00      	nop
  __ASM volatile ("NOP");
 800684e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8006850:	4b06      	ldr	r3, [pc, #24]	@ (800686c <DWT_Delay_Init+0x5c>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8006858:	2300      	movs	r3, #0
 800685a:	e000      	b.n	800685e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800685c:	2301      	movs	r3, #1
  }
}
 800685e:	4618      	mov	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	e000edf0 	.word	0xe000edf0
 800686c:	e0001000 	.word	0xe0001000

08006870 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8006878:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <delay+0x40>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800687e:	f003 ff01 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 8006882:	4603      	mov	r3, r0
 8006884:	4a0b      	ldr	r2, [pc, #44]	@ (80068b4 <delay+0x44>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	0c9b      	lsrs	r3, r3, #18
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8006894:	bf00      	nop
 8006896:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <delay+0x40>)
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	1ad2      	subs	r2, r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d3f8      	bcc.n	8006896 <delay+0x26>
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e0001000 	.word	0xe0001000
 80068b4:	431bde83 	.word	0x431bde83

080068b8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	609a      	str	r2, [r3, #8]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80068d4:	887b      	ldrh	r3, [r7, #2]
 80068d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d8:	2301      	movs	r3, #1
 80068da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068dc:	2300      	movs	r3, #0
 80068de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f002 fa82 	bl	8008df0 <HAL_GPIO_Init>
}
 80068ec:	bf00      	nop
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006900:	f107 030c 	add.w	r3, r7, #12
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	60da      	str	r2, [r3, #12]
 800690e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8006910:	887b      	ldrh	r3, [r7, #2]
 8006912:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f002 fa64 	bl	8008df0 <HAL_GPIO_Init>
}
 8006928:	bf00      	nop
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <DHT_Start>:


void DHT_Start (void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8006934:	f7ff ff6c 	bl	8006810 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8006938:	2180      	movs	r1, #128	@ 0x80
 800693a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800693e:	f7ff ffbb 	bl	80068b8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8006942:	2200      	movs	r2, #0
 8006944:	2180      	movs	r1, #128	@ 0x80
 8006946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800694a:	f002 fbd9 	bl	8009100 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 800694e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8006952:	f7ff ff8d 	bl	8006870 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8006956:	2201      	movs	r2, #1
 8006958:	2180      	movs	r1, #128	@ 0x80
 800695a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800695e:	f002 fbcf 	bl	8009100 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8006962:	2014      	movs	r0, #20
 8006964:	f7ff ff84 	bl	8006870 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8006968:	2180      	movs	r1, #128	@ 0x80
 800696a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800696e:	f7ff ffc1 	bl	80068f4 <Set_Pin_Input>
}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}

08006976 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8006980:	2028      	movs	r0, #40	@ 0x28
 8006982:	f7ff ff75 	bl	8006870 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8006986:	2180      	movs	r1, #128	@ 0x80
 8006988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800698c:	f002 fba0 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10f      	bne.n	80069b6 <DHT_Check_Response+0x40>
	{
		delay (80);
 8006996:	2050      	movs	r0, #80	@ 0x50
 8006998:	f7ff ff6a 	bl	8006870 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 800699c:	2180      	movs	r1, #128	@ 0x80
 800699e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80069a2:	f002 fb95 	bl	80090d0 <HAL_GPIO_ReadPin>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <DHT_Check_Response+0x3c>
 80069ac:	2301      	movs	r3, #1
 80069ae:	71fb      	strb	r3, [r7, #7]
 80069b0:	e001      	b.n	80069b6 <DHT_Check_Response+0x40>
		else Response = -1;
 80069b2:	23ff      	movs	r3, #255	@ 0xff
 80069b4:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80069b6:	bf00      	nop
 80069b8:	2180      	movs	r1, #128	@ 0x80
 80069ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80069be:	f002 fb87 	bl	80090d0 <HAL_GPIO_ReadPin>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f7      	bne.n	80069b8 <DHT_Check_Response+0x42>

	return Response;
 80069c8:	79fb      	ldrb	r3, [r7, #7]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80069d8:	2300      	movs	r3, #0
 80069da:	71bb      	strb	r3, [r7, #6]
 80069dc:	e03a      	b.n	8006a54 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80069de:	bf00      	nop
 80069e0:	2180      	movs	r1, #128	@ 0x80
 80069e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80069e6:	f002 fb73 	bl	80090d0 <HAL_GPIO_ReadPin>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f7      	beq.n	80069e0 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80069f0:	2028      	movs	r0, #40	@ 0x28
 80069f2:	f7ff ff3d 	bl	8006870 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80069f6:	2180      	movs	r1, #128	@ 0x80
 80069f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80069fc:	f002 fb68 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10e      	bne.n	8006a24 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8006a06:	79bb      	ldrb	r3, [r7, #6]
 8006a08:	f1c3 0307 	rsb	r3, r3, #7
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	b25b      	sxtb	r3, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	b25a      	sxtb	r2, r3
 8006a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b25b      	sxtb	r3, r3
 8006a20:	71fb      	strb	r3, [r7, #7]
 8006a22:	e00b      	b.n	8006a3c <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8006a24:	79bb      	ldrb	r3, [r7, #6]
 8006a26:	f1c3 0307 	rsb	r3, r3, #7
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	b25a      	sxtb	r2, r3
 8006a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8006a3c:	bf00      	nop
 8006a3e:	2180      	movs	r1, #128	@ 0x80
 8006a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a44:	f002 fb44 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f7      	bne.n	8006a3e <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8006a4e:	79bb      	ldrb	r3, [r7, #6]
 8006a50:	3301      	adds	r3, #1
 8006a52:	71bb      	strb	r3, [r7, #6]
 8006a54:	79bb      	ldrb	r3, [r7, #6]
 8006a56:	2b07      	cmp	r3, #7
 8006a58:	d9c1      	bls.n	80069de <DHT_Read+0xc>
	}
	return i;
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8006a6c:	f7ff ff60 	bl	8006930 <DHT_Start>
	Presence = DHT_Check_Response ();
 8006a70:	f7ff ff81 	bl	8006976 <DHT_Check_Response>
 8006a74:	4603      	mov	r3, r0
 8006a76:	461a      	mov	r2, r3
 8006a78:	4b27      	ldr	r3, [pc, #156]	@ (8006b18 <DHT_GetData+0xb4>)
 8006a7a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8006a7c:	f7ff ffa9 	bl	80069d2 <DHT_Read>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	4b25      	ldr	r3, [pc, #148]	@ (8006b1c <DHT_GetData+0xb8>)
 8006a86:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8006a88:	f7ff ffa3 	bl	80069d2 <DHT_Read>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4b23      	ldr	r3, [pc, #140]	@ (8006b20 <DHT_GetData+0xbc>)
 8006a92:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8006a94:	f7ff ff9d 	bl	80069d2 <DHT_Read>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	4b21      	ldr	r3, [pc, #132]	@ (8006b24 <DHT_GetData+0xc0>)
 8006a9e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8006aa0:	f7ff ff97 	bl	80069d2 <DHT_Read>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b28 <DHT_GetData+0xc4>)
 8006aaa:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8006aac:	f7ff ff91 	bl	80069d2 <DHT_Read>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b2c <DHT_GetData+0xc8>)
 8006ab6:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8006ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b2c <DHT_GetData+0xc8>)
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	4b17      	ldr	r3, [pc, #92]	@ (8006b1c <DHT_GetData+0xb8>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4b16      	ldr	r3, [pc, #88]	@ (8006b20 <DHT_GetData+0xbc>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	4413      	add	r3, r2
 8006aca:	4a16      	ldr	r2, [pc, #88]	@ (8006b24 <DHT_GetData+0xc0>)
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	4413      	add	r3, r2
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <DHT_GetData+0xc4>)
 8006ad2:	7812      	ldrb	r2, [r2, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	d119      	bne.n	8006b0e <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 8006ada:	4b12      	ldr	r3, [pc, #72]	@ (8006b24 <DHT_GetData+0xc0>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	4a11      	ldr	r2, [pc, #68]	@ (8006b28 <DHT_GetData+0xc4>)
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8006af4:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <DHT_GetData+0xb8>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	4a09      	ldr	r2, [pc, #36]	@ (8006b20 <DHT_GetData+0xbc>)
 8006afc:	7812      	ldrb	r2, [r2, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200003de 	.word	0x200003de
 8006b1c:	200003d8 	.word	0x200003d8
 8006b20:	200003d9 	.word	0x200003d9
 8006b24:	200003da 	.word	0x200003da
 8006b28:	200003db 	.word	0x200003db
 8006b2c:	200003dc 	.word	0x200003dc

08006b30 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	887a      	ldrh	r2, [r7, #2]
 8006b4e:	809a      	strh	r2, [r3, #4]
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b68:	f107 030c 	add.w	r3, r7, #12
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d111      	bne.n	8006ba2 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	889b      	ldrh	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b84:	2301      	movs	r3, #1
 8006b86:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f107 020c 	add.w	r2, r7, #12
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f002 f928 	bl	8008df0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8006ba0:	e013      	b.n	8006bca <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d110      	bne.n	8006bca <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	889b      	ldrh	r3, [r3, #4]
 8006bac:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f107 020c 	add.w	r2, r7, #12
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 f913 	bl	8008df0 <HAL_GPIO_Init>
}
 8006bca:	bf00      	nop
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b094      	sub	sp, #80	@ 0x50
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006bde:	2300      	movs	r3, #0
 8006be0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006be2:	2300      	movs	r3, #0
 8006be4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8006c00:	2101      	movs	r1, #1
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ffaa 	bl	8006b5c <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	889b      	ldrh	r3, [r3, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	4619      	mov	r1, r3
 8006c14:	f002 fa74 	bl	8009100 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8006c18:	2012      	movs	r0, #18
 8006c1a:	f7fe fd98 	bl	800574e <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8006c1e:	b672      	cpsid	i
}
 8006c20:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f004 fc36 	bl	800b498 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff94 	bl	8006b5c <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006c3e:	e00b      	b.n	8006c58 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006c4e:	d903      	bls.n	8006c58 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8006c50:	b662      	cpsie	i
}
 8006c52:	bf00      	nop
			__enable_irq();
			return 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e130      	b.n	8006eba <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	889b      	ldrh	r3, [r3, #4]
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f002 fa34 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d0e8      	beq.n	8006c40 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2200      	movs	r2, #0
 8006c76:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8006c78:	e00b      	b.n	8006c92 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006c88:	d903      	bls.n	8006c92 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 8006c8a:	b662      	cpsie	i
}
 8006c8c:	bf00      	nop
			__enable_irq();
			return 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e113      	b.n	8006eba <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	889b      	ldrh	r3, [r3, #4]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f002 fa17 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0e8      	beq.n	8006c7a <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006cbc:	e00b      	b.n	8006cd6 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006ccc:	d903      	bls.n	8006cd6 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8006cce:	b662      	cpsie	i
}
 8006cd0:	bf00      	nop
			__enable_irq();
			return 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e0f1      	b.n	8006eba <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	889b      	ldrh	r3, [r3, #4]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	f002 f9f5 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d0e8      	beq.n	8006cbe <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf4:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8006cf6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006cf8:	2b4a      	cmp	r3, #74	@ 0x4a
 8006cfa:	d80c      	bhi.n	8006d16 <readDHT11+0x144>
 8006cfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006cfe:	2b55      	cmp	r3, #85	@ 0x55
 8006d00:	d909      	bls.n	8006d16 <readDHT11+0x144>
 8006d02:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006d04:	2b4a      	cmp	r3, #74	@ 0x4a
 8006d06:	d806      	bhi.n	8006d16 <readDHT11+0x144>
 8006d08:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006d0a:	2b55      	cmp	r3, #85	@ 0x55
 8006d0c:	d903      	bls.n	8006d16 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 8006d0e:	b662      	cpsie	i
}
 8006d10:	bf00      	nop
	{
		__enable_irq();
		return 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e0d1      	b.n	8006eba <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1a:	e05d      	b.n	8006dd8 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8006d26:	e00b      	b.n	8006d40 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006d36:	d903      	bls.n	8006d40 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8006d38:	b662      	cpsie	i
}
 8006d3a:	bf00      	nop
				__enable_irq();
				return 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e0bc      	b.n	8006eba <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	889b      	ldrh	r3, [r3, #4]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f002 f9c0 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0e8      	beq.n	8006d28 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006d60:	e00b      	b.n	8006d7a <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006d70:	d903      	bls.n	8006d7a <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8006d72:	b662      	cpsie	i
}
 8006d74:	bf00      	nop
				__enable_irq();
				return 0;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e09f      	b.n	8006eba <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f002 f9a3 	bl	80090d0 <HAL_GPIO_ReadPin>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d0e8      	beq.n	8006d62 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8006d9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d9c:	2b14      	cmp	r3, #20
 8006d9e:	d906      	bls.n	8006dae <readDHT11+0x1dc>
 8006da0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006da2:	2b1d      	cmp	r3, #29
 8006da4:	d803      	bhi.n	8006dae <readDHT11+0x1dc>
		{
			mBit = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006dac:	e008      	b.n	8006dc0 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8006dae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006db0:	2b3c      	cmp	r3, #60	@ 0x3c
 8006db2:	d905      	bls.n	8006dc0 <readDHT11+0x1ee>
 8006db4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006db6:	2b4f      	cmp	r3, #79	@ 0x4f
 8006db8:	d802      	bhi.n	8006dc0 <readDHT11+0x1ee>
		{
			 mBit = 1;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8006dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006dc4:	b2d9      	uxtb	r1, r3
 8006dc6:	f107 0208 	add.w	r2, r7, #8
 8006dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dcc:	4413      	add	r3, r2
 8006dce:	460a      	mov	r2, r1
 8006dd0:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dda:	2b27      	cmp	r3, #39	@ 0x27
 8006ddc:	dd9e      	ble.n	8006d1c <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f004 fb9e 	bl	800b524 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8006de8:	b662      	cpsie	i
}
 8006dea:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8006dec:	2300      	movs	r3, #0
 8006dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8006df0:	e011      	b.n	8006e16 <readDHT11+0x244>
	{
		humVal += mData[i];
 8006df2:	f107 0208 	add.w	r2, r7, #8
 8006df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006df8:	4413      	add	r3, r2
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006e00:	4413      	add	r3, r2
 8006e02:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 8006e06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 8006e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e12:	3301      	adds	r3, #1
 8006e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e18:	2b07      	cmp	r3, #7
 8006e1a:	ddea      	ble.n	8006df2 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e20:	e011      	b.n	8006e46 <readDHT11+0x274>
	{
		tempVal += mData[i];
 8006e22:	f107 0208 	add.w	r2, r7, #8
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e28:	4413      	add	r3, r2
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8006e30:	4413      	add	r3, r2
 8006e32:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 8006e36:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 8006e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e42:	3301      	adds	r3, #1
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e48:	2b17      	cmp	r3, #23
 8006e4a:	ddea      	ble.n	8006e22 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8006e4c:	2320      	movs	r3, #32
 8006e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e50:	e011      	b.n	8006e76 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 8006e52:	f107 0208 	add.w	r2, r7, #8
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	4413      	add	r3, r2
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006e60:	4413      	add	r3, r2
 8006e62:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 8006e66:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	3301      	adds	r3, #1
 8006e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	2b27      	cmp	r3, #39	@ 0x27
 8006e7a:	ddea      	ble.n	8006e52 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 8006e7c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 8006e86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 8006e90:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 8006e9a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006e9e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8006eae:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006eb6:	735a      	strb	r2, [r3, #13]


	return 1;
 8006eb8:	2301      	movs	r3, #1
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3750      	adds	r7, #80	@ 0x50
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <DHT22_Init>:
static uint8_t oneWirePin_Idx;

//*** Functions prototypes ***//
//OneWire Initialise
void DHT22_Init(GPIO_TypeDef* DataPort, uint16_t DataPin)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	807b      	strh	r3, [r7, #2]
	oneWire_PORT = DataPort;
 8006ed0:	4a10      	ldr	r2, [pc, #64]	@ (8006f14 <DHT22_Init+0x50>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
	oneWire_PIN = DataPin;
 8006ed6:	4a10      	ldr	r2, [pc, #64]	@ (8006f18 <DHT22_Init+0x54>)
 8006ed8:	887b      	ldrh	r3, [r7, #2]
 8006eda:	8013      	strh	r3, [r2, #0]
	for(uint8_t i=0; i<16; i++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e00e      	b.n	8006f00 <DHT22_Init+0x3c>
	{
		if(DataPin & (1 << i))
 8006ee2:	887a      	ldrh	r2, [r7, #2]
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	fa42 f303 	asr.w	r3, r2, r3
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <DHT22_Init+0x36>
		{
			oneWirePin_Idx = i;
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8006f1c <DHT22_Init+0x58>)
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	7013      	strb	r3, [r2, #0]
			break;
 8006ef8:	e006      	b.n	8006f08 <DHT22_Init+0x44>
	for(uint8_t i=0; i<16; i++)
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	3301      	adds	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d9ed      	bls.n	8006ee2 <DHT22_Init+0x1e>
		}
	}

	
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	200003e0 	.word	0x200003e0
 8006f18:	200003e4 	.word	0x200003e4
 8006f1c:	200003e6 	.word	0x200003e6

08006f20 <cyclic_routine>:
extern struct SOIL_MOIST_obj OBJ_SOIL_MOIST_sensor_1;	// Object for soil moisture sensor 1
extern struct SOIL_MOIST_obj OBJ_SOIL_MOIST_sensor_2;	// Object for soil moisture sensor 2

struct APP_ZIGBEE_cyclic_data data = {0};

void cyclic_routine(void){
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
	TEMP_HUMID_read(&OBJ_TEMP_HUMID);
 8006f24:	481c      	ldr	r0, [pc, #112]	@ (8006f98 <cyclic_routine+0x78>)
 8006f26:	f000 f989 	bl	800723c <TEMP_HUMID_read>
	data.temperature = TEMP_HUMID_get_temperature(&OBJ_TEMP_HUMID);
 8006f2a:	481b      	ldr	r0, [pc, #108]	@ (8006f98 <cyclic_routine+0x78>)
 8006f2c:	f000 f9c2 	bl	80072b4 <TEMP_HUMID_get_temperature>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f36:	801a      	strh	r2, [r3, #0]
	data.humidity = TEMP_HUMID_get_humidity(&OBJ_TEMP_HUMID);
 8006f38:	4817      	ldr	r0, [pc, #92]	@ (8006f98 <cyclic_routine+0x78>)
 8006f3a:	f000 f9db 	bl	80072f4 <TEMP_HUMID_get_humidity>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b16      	ldr	r3, [pc, #88]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f44:	805a      	strh	r2, [r3, #2]
	data.soil_moisture_1 = SOIL_MOIST_get_moisture_percent(&OBJ_SOIL_MOIST_sensor_1);
 8006f46:	4816      	ldr	r0, [pc, #88]	@ (8006fa0 <cyclic_routine+0x80>)
 8006f48:	f000 f910 	bl	800716c <SOIL_MOIST_get_moisture_percent>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f52:	809a      	strh	r2, [r3, #4]
	data.soil_moisture_2 = SOIL_MOIST_get_moisture_percent(&OBJ_SOIL_MOIST_sensor_2);
 8006f54:	4813      	ldr	r0, [pc, #76]	@ (8006fa4 <cyclic_routine+0x84>)
 8006f56:	f000 f909 	bl	800716c <SOIL_MOIST_get_moisture_percent>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f60:	80da      	strh	r2, [r3, #6]
#ifdef DEGBUG_PRINTF
	printf("Temperature: %d, Humidity: %d\n", data.temperature, data.humidity);
 8006f62:	4b0e      	ldr	r3, [pc, #56]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f70:	461a      	mov	r2, r3
 8006f72:	480d      	ldr	r0, [pc, #52]	@ (8006fa8 <cyclic_routine+0x88>)
 8006f74:	f008 fc3c 	bl	800f7f0 <iprintf>
	printf("Soil Moisture1: %d promille\n", data.soil_moisture_1);
 8006f78:	4b08      	ldr	r3, [pc, #32]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	480a      	ldr	r0, [pc, #40]	@ (8006fac <cyclic_routine+0x8c>)
 8006f82:	f008 fc35 	bl	800f7f0 <iprintf>
#endif
	APP_ZIGBEE_cyclic_reporting(&data);
 8006f86:	4805      	ldr	r0, [pc, #20]	@ (8006f9c <cyclic_routine+0x7c>)
 8006f88:	f007 fea8 	bl	800ecdc <APP_ZIGBEE_cyclic_reporting>
	HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8006f8c:	2110      	movs	r1, #16
 8006f8e:	4808      	ldr	r0, [pc, #32]	@ (8006fb0 <cyclic_routine+0x90>)
 8006f90:	f002 f8ce 	bl	8009130 <HAL_GPIO_TogglePin>
}
 8006f94:	bf00      	nop
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	200003a8 	.word	0x200003a8
 8006f9c:	200003e8 	.word	0x200003e8
 8006fa0:	200003c4 	.word	0x200003c4
 8006fa4:	200003cc 	.word	0x200003cc
 8006fa8:	08010670 	.word	0x08010670
 8006fac:	08010690 	.word	0x08010690
 8006fb0:	48001000 	.word	0x48001000

08006fb4 <RGB_init>:
void setPWM_normal_timer(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse);
uint16_t saturate_color(uint16_t in);
struct RGB_colors xy_to_RGB(float x, float y, float brightness);
void update_color_xy(struct RGB_obj *obj);

void RGB_init(struct RGB_obj *obj, TIM_HandleTypeDef *timer, uint32_t channel_red, uint32_t channel_green, uint32_t channel_blue){
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
	struct RGB_colors zero_col = {0};
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	809a      	strh	r2, [r3, #4]
	obj->timer = timer;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	601a      	str	r2, [r3, #0]
	obj->channel_red = channel_red;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	605a      	str	r2, [r3, #4]
	obj->channel_green = channel_green;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	609a      	str	r2, [r3, #8]
	obj->channel_blue = channel_blue;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	60da      	str	r2, [r3, #12]
	obj->XY_col.x = 0;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	821a      	strh	r2, [r3, #16]
	obj->XY_col.y = 0,
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	825a      	strh	r2, [r3, #18]
	obj->XY_col.brightness = 0xFF,
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	22ff      	movs	r2, #255	@ 0xff
 8006ff4:	829a      	strh	r2, [r3, #20]
	obj->on_status = false;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	759a      	strb	r2, [r3, #22]
	RGB_set(obj, zero_col);
 8006ffc:	f107 0310 	add.w	r3, r7, #16
 8007000:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f804 	bl	8007012 <RGB_set>
}
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <RGB_set>:
void RGB_set_brightness(struct RGB_obj *obj, uint16_t brightness){
	obj->XY_col.brightness = brightness;
	update_color_xy(obj);
}

void RGB_set(struct RGB_obj *obj, struct RGB_colors color){
 8007012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007014:	b097      	sub	sp, #92	@ 0x5c
 8007016:	af12      	add	r7, sp, #72	@ 0x48
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	1d3b      	adds	r3, r7, #4
 800701c:	e883 0006 	stmia.w	r3, {r1, r2}
	setPWM_normal_timer(*obj->timer, obj->channel_blue, color.b);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681e      	ldr	r6, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	893a      	ldrh	r2, [r7, #8]
 800702a:	9210      	str	r2, [sp, #64]	@ 0x40
 800702c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800702e:	466d      	mov	r5, sp
 8007030:	f106 0410 	add.w	r4, r6, #16
 8007034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800703a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800703c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800703e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007040:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007044:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007048:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800704c:	f000 f834 	bl	80070b8 <setPWM_normal_timer>
	setPWM_normal_timer(*obj->timer, obj->channel_green, color.g);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681e      	ldr	r6, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	88fa      	ldrh	r2, [r7, #6]
 800705a:	9210      	str	r2, [sp, #64]	@ 0x40
 800705c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800705e:	466d      	mov	r5, sp
 8007060:	f106 0410 	add.w	r4, r6, #16
 8007064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800706a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800706c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800706e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007070:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007074:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007078:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800707c:	f000 f81c 	bl	80070b8 <setPWM_normal_timer>
	setPWM_normal_timer(*obj->timer, obj->channel_red, color.r);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681e      	ldr	r6, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	88ba      	ldrh	r2, [r7, #4]
 800708a:	9210      	str	r2, [sp, #64]	@ 0x40
 800708c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800708e:	466d      	mov	r5, sp
 8007090:	f106 0410 	add.w	r4, r6, #16
 8007094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800709a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800709c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800709e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80070a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80070a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80070ac:	f000 f804 	bl	80070b8 <setPWM_normal_timer>
}
 80070b0:	bf00      	nop
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070b8 <setPWM_normal_timer>:
void RGB_turn_on(struct RGB_obj *obj){
	obj->on_status = true;
	update_color_xy(obj);
}

void setPWM_normal_timer(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse) {
 80070b8:	b084      	sub	sp, #16
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b088      	sub	sp, #32
 80070be:	af00      	add	r7, sp, #0
 80070c0:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80070c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); 								// stop generation of pwm
 80070c8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80070ca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80070ce:	f004 fbd1 	bl	800b874 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = MAX_BRIGHTNESS; 							// set the period duration
 80070d2:	2364      	movs	r3, #100	@ 0x64
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer); 										// re-inititialize with new period value
 80070d6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80070da:	f004 fa99 	bl	800b610 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80070de:	2360      	movs	r3, #96	@ 0x60
 80070e0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = saturate_color(pulse); 										// set the pulse duration
 80070e2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f81e 	bl	8007128 <saturate_color>
 80070ec:	4603      	mov	r3, r0
 80070ee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80070f8:	1d3b      	adds	r3, r7, #4
 80070fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80070fc:	4619      	mov	r1, r3
 80070fe:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8007102:	f004 fd47 	bl	800bb94 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8007106:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007108:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800710c:	f004 fad8 	bl	800b6c0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&timer, channel);
 8007110:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8007112:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8007116:	f005 fafd 	bl	800c714 <HAL_TIMEx_PWMN_Start>
}
 800711a:	bf00      	nop
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007124:	b004      	add	sp, #16
 8007126:	4770      	bx	lr

08007128 <saturate_color>:

uint16_t saturate_color(uint16_t in){
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	80fb      	strh	r3, [r7, #6]
	if(in > MAX_BRIGHTNESS){
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b64      	cmp	r3, #100	@ 0x64
 8007136:	d901      	bls.n	800713c <saturate_color+0x14>
		return MAX_BRIGHTNESS;
 8007138:	2364      	movs	r3, #100	@ 0x64
 800713a:	e000      	b.n	800713e <saturate_color+0x16>
	}else{
		return in;
 800713c:	88fb      	ldrh	r3, [r7, #6]
	}
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <SOIL_MOIST_init>:
#define VAL_RANGE (MAX_ADC-WATER_MEAS)

uint16_t saturate(uint16_t val);


void SOIL_MOIST_init(struct SOIL_MOIST_obj *obj, uint16_t *DMA_location){
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
	obj->type = SOIL_MOIST;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
	obj->ADC_val = DMA_location;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	605a      	str	r2, [r3, #4]
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <SOIL_MOIST_get_moisture_percent>:


int16_t SOIL_MOIST_get_moisture_percent(struct SOIL_MOIST_obj *obj){
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	int32_t working_val = saturate(*obj->ADC_val) -  WATER_MEAS;	// saturated and offset compensated
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f81e 	bl	80071bc <saturate>
 8007180:	4603      	mov	r3, r0
 8007182:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 8007186:	60fb      	str	r3, [r7, #12]
	working_val = 1000 * working_val / VAL_RANGE;					// multiplication order is important to avoid overflow
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	4a09      	ldr	r2, [pc, #36]	@ (80071b8 <SOIL_MOIST_get_moisture_percent+0x4c>)
 8007194:	fb82 1203 	smull	r1, r2, r2, r3
 8007198:	1212      	asrs	r2, r2, #8
 800719a:	17db      	asrs	r3, r3, #31
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	60fb      	str	r3, [r7, #12]
	working_val = 1000 - working_val;								// invert, since high adc is low moisture
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80071a6:	60fb      	str	r3, [r7, #12]
	int16_t shortened = (int16_t)(working_val);						// cast back to 16 bit
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	817b      	strh	r3, [r7, #10]
	return shortened;
 80071ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	2916a177 	.word	0x2916a177

080071bc <saturate>:



// private FCT

uint16_t saturate(uint16_t val){
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	80fb      	strh	r3, [r7, #6]
	if(val > MAX_ADC){
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071cc:	d302      	bcc.n	80071d4 <saturate+0x18>
		return MAX_ADC;
 80071ce:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80071d2:	e008      	b.n	80071e6 <saturate+0x2a>
	}else if(val < WATER_MEAS){
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80071da:	4293      	cmp	r3, r2
 80071dc:	d802      	bhi.n	80071e4 <saturate+0x28>
		return WATER_MEAS;
 80071de:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80071e2:	e000      	b.n	80071e6 <saturate+0x2a>
	}else{
		return val;
 80071e4:	88fb      	ldrh	r3, [r7, #6]
	}
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <TEMP_HUMID_init>:
#include "TEMP_HUMID.h"


void TEMP_HUMID_init(struct TEMP_HUMID_obj *obj, enum TEMP_HUMID_sensortype type, TIM_HandleTypeDef *timer, GPIO_TypeDef* port, uint16_t pin){
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	460b      	mov	r3, r1
 8007200:	72fb      	strb	r3, [r7, #11]
	obj->type = type;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	7afa      	ldrb	r2, [r7, #11]
 8007206:	701a      	strb	r2, [r3, #0]
	//make tim16 maybe to tim17
	switch(obj->type){
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <TEMP_HUMID_init+0x24>
 8007210:	2b01      	cmp	r3, #1
 8007212:	d009      	beq.n	8007228 <TEMP_HUMID_init+0x36>
		break;
	case DHT22:
		DHT22_Init(port, pin);
		break;
	default:
		break;
 8007214:	e00e      	b.n	8007234 <TEMP_HUMID_init+0x42>
		init_dht11(&obj->dht11, timer, port, pin);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f103 000c 	add.w	r0, r3, #12
 800721c:	8b3b      	ldrh	r3, [r7, #24]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	f7ff fc85 	bl	8006b30 <init_dht11>
		break;
 8007226:	e005      	b.n	8007234 <TEMP_HUMID_init+0x42>
		DHT22_Init(port, pin);
 8007228:	8b3b      	ldrh	r3, [r7, #24]
 800722a:	4619      	mov	r1, r3
 800722c:	6838      	ldr	r0, [r7, #0]
 800722e:	f7ff fe49 	bl	8006ec4 <DHT22_Init>
		break;
 8007232:	bf00      	nop
	}
}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <TEMP_HUMID_read>:

void TEMP_HUMID_read(struct TEMP_HUMID_obj *obj){
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	switch (obj->type){
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <TEMP_HUMID_read+0x16>
 800724c:	2b01      	cmp	r3, #1
 800724e:	d018      	beq.n	8007282 <TEMP_HUMID_read+0x46>
 8007250:	e023      	b.n	800729a <TEMP_HUMID_read+0x5e>
	case DHT11:
		readDHT11(&obj->dht11);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	330c      	adds	r3, #12
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fcbb 	bl	8006bd2 <readDHT11>
		obj->temperature_degC = (float)obj->dht11.temperature;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	7e1b      	ldrb	r3, [r3, #24]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	edc3 7a01 	vstr	s15, [r3, #4]
		obj->humidity_percent = (float)obj->dht11.humidty;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7e5b      	ldrb	r3, [r3, #25]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8007280:	e014      	b.n	80072ac <TEMP_HUMID_read+0x70>
	case DHT22:
		DHT_DataTypedef data;
		DHT_GetData(&data);
 8007282:	f107 0308 	add.w	r3, r7, #8
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fbec 	bl	8006a64 <DHT_GetData>
		obj->temperature_degC = data.Temperature;
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]
		obj->humidity_percent = data.Humidity;
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	609a      	str	r2, [r3, #8]
		break;
 8007298:	e008      	b.n	80072ac <TEMP_HUMID_read+0x70>
	default:
		obj->temperature_degC = 0.0f;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	605a      	str	r2, [r3, #4]
		obj->humidity_percent = 0.0f;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
		break;
 80072aa:	bf00      	nop
	}
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <TEMP_HUMID_get_temperature>:

int16_t TEMP_HUMID_get_temperature(struct TEMP_HUMID_obj *obj){
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	float value_mul = obj->temperature_degC;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	60fb      	str	r3, [r7, #12]
	if(obj->type == DHT11){
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d107      	bne.n	80072da <TEMP_HUMID_get_temperature+0x26>
		value_mul = value_mul * 10.0f;
 80072ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80072ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80072d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072d6:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ((int16_t)(value_mul));
 80072da:	edd7 7a03 	vldr	s15, [r7, #12]
 80072de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e2:	ee17 3a90 	vmov	r3, s15
 80072e6:	b21b      	sxth	r3, r3
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <TEMP_HUMID_get_humidity>:

int16_t TEMP_HUMID_get_humidity(struct TEMP_HUMID_obj *obj){
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	float value_mul = obj->humidity_percent;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	60fb      	str	r3, [r7, #12]
	if(obj->type == DHT11){
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d107      	bne.n	800731a <TEMP_HUMID_get_humidity+0x26>
			value_mul = value_mul * 10.0f;
 800730a:	edd7 7a03 	vldr	s15, [r7, #12]
 800730e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007316:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	return ((int16_t)(value_mul));
 800731a:	edd7 7a03 	vldr	s15, [r7, #12]
 800731e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007322:	ee17 3a90 	vmov	r3, s15
 8007326:	b21b      	sxth	r3, r3
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800733e:	4b0c      	ldr	r3, [pc, #48]	@ (8007370 <HAL_Init+0x3c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a0b      	ldr	r2, [pc, #44]	@ (8007370 <HAL_Init+0x3c>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007348:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800734a:	2003      	movs	r0, #3
 800734c:	f001 f9de 	bl	800870c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007350:	200f      	movs	r0, #15
 8007352:	f000 f80f 	bl	8007374 <HAL_InitTick>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	71fb      	strb	r3, [r7, #7]
 8007360:	e001      	b.n	8007366 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007362:	f7fe feba 	bl	80060da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007366:	79fb      	ldrb	r3, [r7, #7]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	58004000 	.word	0x58004000

08007374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007380:	4b17      	ldr	r3, [pc, #92]	@ (80073e0 <HAL_InitTick+0x6c>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d024      	beq.n	80073d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007388:	f003 f97c 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b14      	ldr	r3, [pc, #80]	@ (80073e0 <HAL_InitTick+0x6c>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	4619      	mov	r1, r3
 8007394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007398:	fbb3 f3f1 	udiv	r3, r3, r1
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f9e6 	bl	8008772 <HAL_SYSTICK_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10f      	bne.n	80073cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b0f      	cmp	r3, #15
 80073b0:	d809      	bhi.n	80073c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073b2:	2200      	movs	r2, #0
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ba:	f001 f9b2 	bl	8008722 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80073be:	4a09      	ldr	r2, [pc, #36]	@ (80073e4 <HAL_InitTick+0x70>)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e007      	b.n	80073d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	e004      	b.n	80073d6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
 80073d0:	e001      	b.n	80073d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000010 	.word	0x20000010
 80073e4:	2000000c 	.word	0x2000000c

080073e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80073ec:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <HAL_IncTick+0x20>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	4b06      	ldr	r3, [pc, #24]	@ (800740c <HAL_IncTick+0x24>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4413      	add	r3, r2
 80073f8:	4a04      	ldr	r2, [pc, #16]	@ (800740c <HAL_IncTick+0x24>)
 80073fa:	6013      	str	r3, [r2, #0]
}
 80073fc:	bf00      	nop
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000010 	.word	0x20000010
 800740c:	200003f0 	.word	0x200003f0

08007410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return uwTick;
 8007414:	4b03      	ldr	r3, [pc, #12]	@ (8007424 <HAL_GetTick+0x14>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	4618      	mov	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	200003f0 	.word	0x200003f0

08007428 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800742c:	4b03      	ldr	r3, [pc, #12]	@ (800743c <HAL_GetTickPrio+0x14>)
 800742e:	681b      	ldr	r3, [r3, #0]
}
 8007430:	4618      	mov	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	2000000c 	.word	0x2000000c

08007440 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007444:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <HAL_GetTickFreq+0x14>)
 8007446:	781b      	ldrb	r3, [r3, #0]
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000010 	.word	0x20000010

08007458 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	609a      	str	r2, [r3, #8]
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3360      	adds	r3, #96	@ 0x60
 80074d2:	461a      	mov	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4b08      	ldr	r3, [pc, #32]	@ (8007504 <LL_ADC_SetOffset+0x44>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	03fff000 	.word	0x03fff000

08007508 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3360      	adds	r3, #96	@ 0x60
 8007516:	461a      	mov	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3360      	adds	r3, #96	@ 0x60
 8007544:	461a      	mov	r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	431a      	orrs	r2, r3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007582:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3330      	adds	r3, #48	@ 0x30
 80075a0:	461a      	mov	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	0a1b      	lsrs	r3, r3, #8
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	f003 030c 	and.w	r3, r3, #12
 80075ac:	4413      	add	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	211f      	movs	r1, #31
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	43db      	mvns	r3, r3
 80075c2:	401a      	ands	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	0e9b      	lsrs	r3, r3, #26
 80075c8:	f003 011f 	and.w	r1, r3, #31
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	431a      	orrs	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80075dc:	bf00      	nop
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3314      	adds	r3, #20
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	0e5b      	lsrs	r3, r3, #25
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	4413      	add	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	0d1b      	lsrs	r3, r3, #20
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	2107      	movs	r1, #7
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	43db      	mvns	r3, r3
 800761c:	401a      	ands	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	0d1b      	lsrs	r3, r3, #20
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	431a      	orrs	r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007658:	43db      	mvns	r3, r3
 800765a:	401a      	ands	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f003 0318 	and.w	r3, r3, #24
 8007662:	4908      	ldr	r1, [pc, #32]	@ (8007684 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007664:	40d9      	lsrs	r1, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	400b      	ands	r3, r1
 800766a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766e:	431a      	orrs	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	0007ffff 	.word	0x0007ffff

08007688 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007698:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6093      	str	r3, [r2, #8]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076c0:	d101      	bne.n	80076c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80076e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800770c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007710:	d101      	bne.n	8007716 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007734:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007738:	f043 0201 	orr.w	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <LL_ADC_IsEnabled+0x18>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <LL_ADC_IsEnabled+0x1a>
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d101      	bne.n	80077b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d101      	bne.n	80077d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
	...

080077e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e12e      	b.n	8007a64 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fe fc71 	bl	80060fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff ff3d 	bl	80076ac <LL_ADC_IsDeepPowerDownEnabled>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff ff23 	bl	8007688 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff ff58 	bl	80076fc <LL_ADC_IsInternalRegulatorEnabled>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d115      	bne.n	800787e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff ff3c 	bl	80076d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800785c:	4b83      	ldr	r3, [pc, #524]	@ (8007a6c <HAL_ADC_Init+0x284>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	099b      	lsrs	r3, r3, #6
 8007862:	4a83      	ldr	r2, [pc, #524]	@ (8007a70 <HAL_ADC_Init+0x288>)
 8007864:	fba2 2303 	umull	r2, r3, r2, r3
 8007868:	099b      	lsrs	r3, r3, #6
 800786a:	3301      	adds	r3, #1
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007870:	e002      	b.n	8007878 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3b01      	subs	r3, #1
 8007876:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f9      	bne.n	8007872 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff ff3a 	bl	80076fc <LL_ADC_IsInternalRegulatorEnabled>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10d      	bne.n	80078aa <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007892:	f043 0210 	orr.w	r2, r3, #16
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff ff73 	bl	800779a <LL_ADC_REG_IsConversionOngoing>
 80078b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 80c7 	bne.w	8007a52 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 80c3 	bne.w	8007a52 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80078d4:	f043 0202 	orr.w	r2, r3, #2
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff ff33 	bl	800774c <LL_ADC_IsEnabled>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078ec:	4861      	ldr	r0, [pc, #388]	@ (8007a74 <HAL_ADC_Init+0x28c>)
 80078ee:	f7ff ff2d 	bl	800774c <LL_ADC_IsEnabled>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d105      	bne.n	8007904 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	4619      	mov	r1, r3
 80078fe:	485e      	ldr	r0, [pc, #376]	@ (8007a78 <HAL_ADC_Init+0x290>)
 8007900:	f7ff fdaa 	bl	8007458 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7e5b      	ldrb	r3, [r3, #25]
 8007908:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800790e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007914:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800791a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007922:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007924:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d106      	bne.n	8007944 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	3b01      	subs	r3, #1
 800793c:	045b      	lsls	r3, r3, #17
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	4313      	orrs	r3, r2
 8007942:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	4313      	orrs	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	4b45      	ldr	r3, [pc, #276]	@ (8007a7c <HAL_ADC_Init+0x294>)
 8007968:	4013      	ands	r3, r2
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	69b9      	ldr	r1, [r7, #24]
 8007970:	430b      	orrs	r3, r1
 8007972:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ff0e 	bl	800779a <LL_ADC_REG_IsConversionOngoing>
 800797e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff ff1b 	bl	80077c0 <LL_ADC_INJ_IsConversionOngoing>
 800798a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d13d      	bne.n	8007a0e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d13a      	bne.n	8007a0e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800799c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079b4:	f023 0302 	bic.w	r3, r3, #2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	430b      	orrs	r3, r1
 80079c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d118      	bne.n	80079fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80079d6:	f023 0304 	bic.w	r3, r3, #4
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80079e2:	4311      	orrs	r1, r2
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80079e8:	4311      	orrs	r1, r2
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80079ee:	430a      	orrs	r2, r1
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	611a      	str	r2, [r3, #16]
 80079fc:	e007      	b.n	8007a0e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0201 	bic.w	r2, r2, #1
 8007a0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d10c      	bne.n	8007a30 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	f023 010f 	bic.w	r1, r3, #15
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	1e5a      	subs	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a2e:	e007      	b.n	8007a40 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 020f 	bic.w	r2, r2, #15
 8007a3e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a44:	f023 0303 	bic.w	r3, r3, #3
 8007a48:	f043 0201 	orr.w	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007a50:	e007      	b.n	8007a62 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a56:	f043 0210 	orr.w	r2, r3, #16
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000008 	.word	0x20000008
 8007a70:	053e2d63 	.word	0x053e2d63
 8007a74:	50040000 	.word	0x50040000
 8007a78:	50040300 	.word	0x50040300
 8007a7c:	fff0c007 	.word	0xfff0c007

08007a80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff fe82 	bl	800779a <LL_ADC_REG_IsConversionOngoing>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d167      	bne.n	8007b6c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_ADC_Start_DMA+0x2a>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e063      	b.n	8007b72 <HAL_ADC_Start_DMA+0xf2>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fc4c 	bl	8008350 <ADC_Enable>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d14f      	bne.n	8007b62 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d006      	beq.n	8007af0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae6:	f023 0206 	bic.w	r2, r3, #6
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8007aee:	e002      	b.n	8007af6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007afa:	4a20      	ldr	r2, [pc, #128]	@ (8007b7c <HAL_ADC_Start_DMA+0xfc>)
 8007afc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b02:	4a1f      	ldr	r2, [pc, #124]	@ (8007b80 <HAL_ADC_Start_DMA+0x100>)
 8007b04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007b84 <HAL_ADC_Start_DMA+0x104>)
 8007b0c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	221c      	movs	r2, #28
 8007b14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0210 	orr.w	r2, r2, #16
 8007b2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0201 	orr.w	r2, r2, #1
 8007b3c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3340      	adds	r3, #64	@ 0x40
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f000 fec5 	bl	80088dc <HAL_DMA_Start_IT>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff fe09 	bl	8007772 <LL_ADC_REG_StartConversion>
 8007b60:	e006      	b.n	8007b70 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007b6a:	e001      	b.n	8007b70 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08008445 	.word	0x08008445
 8007b80:	0800851d 	.word	0x0800851d
 8007b84:	08008539 	.word	0x08008539

08007b88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0b6      	sub	sp, #216	@ 0xd8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_ADC_ConfigChannel+0x22>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e39f      	b.n	8008326 <HAL_ADC_ConfigChannel+0x762>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fdd1 	bl	800779a <LL_ADC_REG_IsConversionOngoing>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f040 8384 	bne.w	8008308 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	6859      	ldr	r1, [r3, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f7ff fcbf 	bl	8007590 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fdbf 	bl	800779a <LL_ADC_REG_IsConversionOngoing>
 8007c1c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fdcb 	bl	80077c0 <LL_ADC_INJ_IsConversionOngoing>
 8007c2a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f040 81a6 	bne.w	8007f84 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 81a1 	bne.w	8007f84 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6819      	ldr	r1, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f7ff fcca 	bl	80075e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	08db      	lsrs	r3, r3, #3
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d00a      	beq.n	8007c8c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6919      	ldr	r1, [r3, #16]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c86:	f7ff fc1b 	bl	80074c0 <LL_ADC_SetOffset>
 8007c8a:	e17b      	b.n	8007f84 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fc38 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <HAL_ADC_ConfigChannel+0xf4>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff fc2d 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	0e9b      	lsrs	r3, r3, #26
 8007cb2:	f003 021f 	and.w	r2, r3, #31
 8007cb6:	e01e      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x132>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fc22 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007cce:	fa93 f3a3 	rbit	r3, r3
 8007cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8007ce6:	2320      	movs	r3, #32
 8007ce8:	e004      	b.n	8007cf4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8007cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cee:	fab3 f383 	clz	r3, r3
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <HAL_ADC_ConfigChannel+0x14a>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	0e9b      	lsrs	r3, r3, #26
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	e018      	b.n	8007d40 <HAL_ADC_ConfigChannel+0x17c>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d1a:	fa93 f3a3 	rbit	r3, r3
 8007d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007d32:	2320      	movs	r3, #32
 8007d34:	e004      	b.n	8007d40 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d3a:	fab3 f383 	clz	r3, r3
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d106      	bne.n	8007d52 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fbf1 	bl	8007534 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2101      	movs	r1, #1
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fbd5 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <HAL_ADC_ConfigChannel+0x1ba>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fbca 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007d74:	4603      	mov	r3, r0
 8007d76:	0e9b      	lsrs	r3, r3, #26
 8007d78:	f003 021f 	and.w	r2, r3, #31
 8007d7c:	e01e      	b.n	8007dbc <HAL_ADC_ConfigChannel+0x1f8>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fbbf 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d94:	fa93 f3a3 	rbit	r3, r3
 8007d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007dac:	2320      	movs	r3, #32
 8007dae:	e004      	b.n	8007dba <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d105      	bne.n	8007dd4 <HAL_ADC_ConfigChannel+0x210>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	0e9b      	lsrs	r3, r3, #26
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	e018      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x242>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007de0:	fa93 f3a3 	rbit	r3, r3
 8007de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007df8:	2320      	movs	r3, #32
 8007dfa:	e004      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e00:	fab3 f383 	clz	r3, r3
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d106      	bne.n	8007e18 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2101      	movs	r1, #1
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fb8e 	bl	8007534 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fb72 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <HAL_ADC_ConfigChannel+0x280>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2102      	movs	r1, #2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fb67 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	0e9b      	lsrs	r3, r3, #26
 8007e3e:	f003 021f 	and.w	r2, r3, #31
 8007e42:	e01e      	b.n	8007e82 <HAL_ADC_ConfigChannel+0x2be>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2102      	movs	r1, #2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fb5c 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e5a:	fa93 f3a3 	rbit	r3, r3
 8007e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007e72:	2320      	movs	r3, #32
 8007e74:	e004      	b.n	8007e80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e7a:	fab3 f383 	clz	r3, r3
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x2d6>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	0e9b      	lsrs	r3, r3, #26
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	e016      	b.n	8007ec8 <HAL_ADC_ConfigChannel+0x304>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ea6:	fa93 f3a3 	rbit	r3, r3
 8007eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007eae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007eba:	2320      	movs	r3, #32
 8007ebc:	e004      	b.n	8007ec8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ec2:	fab3 f383 	clz	r3, r3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d106      	bne.n	8007eda <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff fb2d 	bl	8007534 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2103      	movs	r1, #3
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fb11 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <HAL_ADC_ConfigChannel+0x342>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2103      	movs	r1, #3
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fb06 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007efc:	4603      	mov	r3, r0
 8007efe:	0e9b      	lsrs	r3, r3, #26
 8007f00:	f003 021f 	and.w	r2, r3, #31
 8007f04:	e017      	b.n	8007f36 <HAL_ADC_ConfigChannel+0x372>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fafb 	bl	8007508 <LL_ADC_GetOffsetChannel>
 8007f12:	4603      	mov	r3, r0
 8007f14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f18:	fa93 f3a3 	rbit	r3, r3
 8007f1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007f22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007f28:	2320      	movs	r3, #32
 8007f2a:	e003      	b.n	8007f34 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f2e:	fab3 f383 	clz	r3, r3
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d105      	bne.n	8007f4e <HAL_ADC_ConfigChannel+0x38a>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	0e9b      	lsrs	r3, r3, #26
 8007f48:	f003 031f 	and.w	r3, r3, #31
 8007f4c:	e011      	b.n	8007f72 <HAL_ADC_ConfigChannel+0x3ae>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f56:	fa93 f3a3 	rbit	r3, r3
 8007f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007f66:	2320      	movs	r3, #32
 8007f68:	e003      	b.n	8007f72 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f6c:	fab3 f383 	clz	r3, r3
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d106      	bne.n	8007f84 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2103      	movs	r1, #3
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fad8 	bl	8007534 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff fbdf 	bl	800774c <LL_ADC_IsEnabled>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 81c2 	bne.w	800831a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6819      	ldr	r1, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f7ff fb4c 	bl	8007640 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	4a8e      	ldr	r2, [pc, #568]	@ (80081e8 <HAL_ADC_ConfigChannel+0x624>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	f040 8130 	bne.w	8008214 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <HAL_ADC_ConfigChannel+0x418>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	0e9b      	lsrs	r3, r3, #26
 8007fca:	3301      	adds	r3, #1
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2b09      	cmp	r3, #9
 8007fd2:	bf94      	ite	ls
 8007fd4:	2301      	movls	r3, #1
 8007fd6:	2300      	movhi	r3, #0
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	e019      	b.n	8008010 <HAL_ADC_ConfigChannel+0x44c>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fe4:	fa93 f3a3 	rbit	r3, r3
 8007fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007fec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	e003      	b.n	8008000 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007ff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ffa:	fab3 f383 	clz	r3, r3
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	3301      	adds	r3, #1
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	2b09      	cmp	r3, #9
 8008008:	bf94      	ite	ls
 800800a:	2301      	movls	r3, #1
 800800c:	2300      	movhi	r3, #0
 800800e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008010:	2b00      	cmp	r3, #0
 8008012:	d079      	beq.n	8008108 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801c:	2b00      	cmp	r3, #0
 800801e:	d107      	bne.n	8008030 <HAL_ADC_ConfigChannel+0x46c>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	0e9b      	lsrs	r3, r3, #26
 8008026:	3301      	adds	r3, #1
 8008028:	069b      	lsls	r3, r3, #26
 800802a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800802e:	e015      	b.n	800805c <HAL_ADC_ConfigChannel+0x498>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008038:	fa93 f3a3 	rbit	r3, r3
 800803c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800803e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008040:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008048:	2320      	movs	r3, #32
 800804a:	e003      	b.n	8008054 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800804c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800804e:	fab3 f383 	clz	r3, r3
 8008052:	b2db      	uxtb	r3, r3
 8008054:	3301      	adds	r3, #1
 8008056:	069b      	lsls	r3, r3, #26
 8008058:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <HAL_ADC_ConfigChannel+0x4b8>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	0e9b      	lsrs	r3, r3, #26
 800806e:	3301      	adds	r3, #1
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2101      	movs	r1, #1
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	e017      	b.n	80080ac <HAL_ADC_ConfigChannel+0x4e8>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008084:	fa93 f3a3 	rbit	r3, r3
 8008088:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800808a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800808c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800808e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008094:	2320      	movs	r3, #32
 8008096:	e003      	b.n	80080a0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8008098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800809a:	fab3 f383 	clz	r3, r3
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	3301      	adds	r3, #1
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	2101      	movs	r1, #1
 80080a8:	fa01 f303 	lsl.w	r3, r1, r3
 80080ac:	ea42 0103 	orr.w	r1, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x50e>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	0e9b      	lsrs	r3, r3, #26
 80080c2:	3301      	adds	r3, #1
 80080c4:	f003 021f 	and.w	r2, r3, #31
 80080c8:	4613      	mov	r3, r2
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	4413      	add	r3, r2
 80080ce:	051b      	lsls	r3, r3, #20
 80080d0:	e018      	b.n	8008104 <HAL_ADC_ConfigChannel+0x540>
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	fa93 f3a3 	rbit	r3, r3
 80080de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80080e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80080e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80080ea:	2320      	movs	r3, #32
 80080ec:	e003      	b.n	80080f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80080ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f0:	fab3 f383 	clz	r3, r3
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f003 021f 	and.w	r2, r3, #31
 80080fc:	4613      	mov	r3, r2
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	4413      	add	r3, r2
 8008102:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008104:	430b      	orrs	r3, r1
 8008106:	e080      	b.n	800820a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008110:	2b00      	cmp	r3, #0
 8008112:	d107      	bne.n	8008124 <HAL_ADC_ConfigChannel+0x560>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	0e9b      	lsrs	r3, r3, #26
 800811a:	3301      	adds	r3, #1
 800811c:	069b      	lsls	r3, r3, #26
 800811e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008122:	e015      	b.n	8008150 <HAL_ADC_ConfigChannel+0x58c>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	fa93 f3a3 	rbit	r3, r3
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800813c:	2320      	movs	r3, #32
 800813e:	e003      	b.n	8008148 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	fab3 f383 	clz	r3, r3
 8008146:	b2db      	uxtb	r3, r3
 8008148:	3301      	adds	r3, #1
 800814a:	069b      	lsls	r3, r3, #26
 800814c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008158:	2b00      	cmp	r3, #0
 800815a:	d109      	bne.n	8008170 <HAL_ADC_ConfigChannel+0x5ac>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	0e9b      	lsrs	r3, r3, #26
 8008162:	3301      	adds	r3, #1
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2101      	movs	r1, #1
 800816a:	fa01 f303 	lsl.w	r3, r1, r3
 800816e:	e017      	b.n	80081a0 <HAL_ADC_ConfigChannel+0x5dc>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	fa93 f3a3 	rbit	r3, r3
 800817c:	61fb      	str	r3, [r7, #28]
  return result;
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8008188:	2320      	movs	r3, #32
 800818a:	e003      	b.n	8008194 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	fab3 f383 	clz	r3, r3
 8008192:	b2db      	uxtb	r3, r3
 8008194:	3301      	adds	r3, #1
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	2101      	movs	r1, #1
 800819c:	fa01 f303 	lsl.w	r3, r1, r3
 80081a0:	ea42 0103 	orr.w	r1, r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10d      	bne.n	80081cc <HAL_ADC_ConfigChannel+0x608>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	0e9b      	lsrs	r3, r3, #26
 80081b6:	3301      	adds	r3, #1
 80081b8:	f003 021f 	and.w	r2, r3, #31
 80081bc:	4613      	mov	r3, r2
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	4413      	add	r3, r2
 80081c2:	3b1e      	subs	r3, #30
 80081c4:	051b      	lsls	r3, r3, #20
 80081c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80081ca:	e01d      	b.n	8008208 <HAL_ADC_ConfigChannel+0x644>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	fa93 f3a3 	rbit	r3, r3
 80081d8:	613b      	str	r3, [r7, #16]
  return result;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d103      	bne.n	80081ec <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80081e4:	2320      	movs	r3, #32
 80081e6:	e005      	b.n	80081f4 <HAL_ADC_ConfigChannel+0x630>
 80081e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	fab3 f383 	clz	r3, r3
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	3301      	adds	r3, #1
 80081f6:	f003 021f 	and.w	r2, r3, #31
 80081fa:	4613      	mov	r3, r2
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4413      	add	r3, r2
 8008200:	3b1e      	subs	r3, #30
 8008202:	051b      	lsls	r3, r3, #20
 8008204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008208:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800820e:	4619      	mov	r1, r3
 8008210:	f7ff f9ea 	bl	80075e8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	4b45      	ldr	r3, [pc, #276]	@ (8008330 <HAL_ADC_ConfigChannel+0x76c>)
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d07c      	beq.n	800831a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008220:	4844      	ldr	r0, [pc, #272]	@ (8008334 <HAL_ADC_ConfigChannel+0x770>)
 8008222:	f7ff f93f 	bl	80074a4 <LL_ADC_GetCommonPathInternalCh>
 8008226:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800822a:	4843      	ldr	r0, [pc, #268]	@ (8008338 <HAL_ADC_ConfigChannel+0x774>)
 800822c:	f7ff fa8e 	bl	800774c <LL_ADC_IsEnabled>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d15e      	bne.n	80082f4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a40      	ldr	r2, [pc, #256]	@ (800833c <HAL_ADC_ConfigChannel+0x778>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d127      	bne.n	8008290 <HAL_ADC_ConfigChannel+0x6cc>
 8008240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d121      	bne.n	8008290 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a39      	ldr	r2, [pc, #228]	@ (8008338 <HAL_ADC_ConfigChannel+0x774>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d161      	bne.n	800831a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800825a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800825e:	4619      	mov	r1, r3
 8008260:	4834      	ldr	r0, [pc, #208]	@ (8008334 <HAL_ADC_ConfigChannel+0x770>)
 8008262:	f7ff f90c 	bl	800747e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008266:	4b36      	ldr	r3, [pc, #216]	@ (8008340 <HAL_ADC_ConfigChannel+0x77c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	099b      	lsrs	r3, r3, #6
 800826c:	4a35      	ldr	r2, [pc, #212]	@ (8008344 <HAL_ADC_ConfigChannel+0x780>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	099b      	lsrs	r3, r3, #6
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	4613      	mov	r3, r2
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008280:	e002      	b.n	8008288 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b01      	subs	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1f9      	bne.n	8008282 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800828e:	e044      	b.n	800831a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a2c      	ldr	r2, [pc, #176]	@ (8008348 <HAL_ADC_ConfigChannel+0x784>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d113      	bne.n	80082c2 <HAL_ADC_ConfigChannel+0x6fe>
 800829a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800829e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10d      	bne.n	80082c2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a23      	ldr	r2, [pc, #140]	@ (8008338 <HAL_ADC_ConfigChannel+0x774>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d134      	bne.n	800831a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80082b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082b8:	4619      	mov	r1, r3
 80082ba:	481e      	ldr	r0, [pc, #120]	@ (8008334 <HAL_ADC_ConfigChannel+0x770>)
 80082bc:	f7ff f8df 	bl	800747e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80082c0:	e02b      	b.n	800831a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a21      	ldr	r2, [pc, #132]	@ (800834c <HAL_ADC_ConfigChannel+0x788>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d126      	bne.n	800831a <HAL_ADC_ConfigChannel+0x756>
 80082cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d120      	bne.n	800831a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a16      	ldr	r2, [pc, #88]	@ (8008338 <HAL_ADC_ConfigChannel+0x774>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d11b      	bne.n	800831a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80082e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082ea:	4619      	mov	r1, r3
 80082ec:	4811      	ldr	r0, [pc, #68]	@ (8008334 <HAL_ADC_ConfigChannel+0x770>)
 80082ee:	f7ff f8c6 	bl	800747e <LL_ADC_SetCommonPathInternalCh>
 80082f2:	e012      	b.n	800831a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f8:	f043 0220 	orr.w	r2, r3, #32
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008306:	e008      	b.n	800831a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830c:	f043 0220 	orr.w	r2, r3, #32
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8008322:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008326:	4618      	mov	r0, r3
 8008328:	37d8      	adds	r7, #216	@ 0xd8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	80080000 	.word	0x80080000
 8008334:	50040300 	.word	0x50040300
 8008338:	50040000 	.word	0x50040000
 800833c:	c7520000 	.word	0xc7520000
 8008340:	20000008 	.word	0x20000008
 8008344:	053e2d63 	.word	0x053e2d63
 8008348:	cb840000 	.word	0xcb840000
 800834c:	80000001 	.word	0x80000001

08008350 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008358:	2300      	movs	r3, #0
 800835a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff f9f3 	bl	800774c <LL_ADC_IsEnabled>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d15e      	bne.n	800842a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	4b30      	ldr	r3, [pc, #192]	@ (8008434 <ADC_Enable+0xe4>)
 8008374:	4013      	ands	r3, r2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00d      	beq.n	8008396 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837e:	f043 0210 	orr.w	r2, r3, #16
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800838a:	f043 0201 	orr.w	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e04a      	b.n	800842c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff f9c2 	bl	8007724 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80083a0:	4825      	ldr	r0, [pc, #148]	@ (8008438 <ADC_Enable+0xe8>)
 80083a2:	f7ff f87f 	bl	80074a4 <LL_ADC_GetCommonPathInternalCh>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00f      	beq.n	80083d0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80083b0:	4b22      	ldr	r3, [pc, #136]	@ (800843c <ADC_Enable+0xec>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	099b      	lsrs	r3, r3, #6
 80083b6:	4a22      	ldr	r2, [pc, #136]	@ (8008440 <ADC_Enable+0xf0>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	099b      	lsrs	r3, r3, #6
 80083be:	3301      	adds	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80083c2:	e002      	b.n	80083ca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1f9      	bne.n	80083c4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80083d0:	f7ff f81e 	bl	8007410 <HAL_GetTick>
 80083d4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80083d6:	e021      	b.n	800841c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff f9b5 	bl	800774c <LL_ADC_IsEnabled>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff f999 	bl	8007724 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80083f2:	f7ff f80d 	bl	8007410 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d90d      	bls.n	800841c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008404:	f043 0210 	orr.w	r2, r3, #16
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008410:	f043 0201 	orr.w	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e007      	b.n	800842c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b01      	cmp	r3, #1
 8008428:	d1d6      	bne.n	80083d8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	8000003f 	.word	0x8000003f
 8008438:	50040300 	.word	0x50040300
 800843c:	20000008 	.word	0x20000008
 8008440:	053e2d63 	.word	0x053e2d63

08008444 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800845a:	2b00      	cmp	r3, #0
 800845c:	d14b      	bne.n	80084f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008462:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d021      	beq.n	80084bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff f874 	bl	800756a <LL_ADC_REG_IsTriggerSourceSWStart>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d032      	beq.n	80084ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d12b      	bne.n	80084ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d11f      	bne.n	80084ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b2:	f043 0201 	orr.w	r2, r3, #1
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80084ba:	e018      	b.n	80084ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d111      	bne.n	80084ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e6:	f043 0201 	orr.w	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7ff fb4a 	bl	8007b88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80084f4:	e00e      	b.n	8008514 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084fa:	f003 0310 	and.w	r3, r3, #16
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7ff fb54 	bl	8007bb0 <HAL_ADC_ErrorCallback>
}
 8008508:	e004      	b.n	8008514 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800850e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff fb36 	bl	8007b9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008544:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008556:	f043 0204 	orr.w	r2, r3, #4
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fb26 	bl	8007bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008564:	bf00      	nop
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800857c:	4b0c      	ldr	r3, [pc, #48]	@ (80085b0 <__NVIC_SetPriorityGrouping+0x44>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008588:	4013      	ands	r3, r2
 800858a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008594:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800859c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800859e:	4a04      	ldr	r2, [pc, #16]	@ (80085b0 <__NVIC_SetPriorityGrouping+0x44>)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	60d3      	str	r3, [r2, #12]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	e000ed00 	.word	0xe000ed00

080085b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085b8:	4b04      	ldr	r3, [pc, #16]	@ (80085cc <__NVIC_GetPriorityGrouping+0x18>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	0a1b      	lsrs	r3, r3, #8
 80085be:	f003 0307 	and.w	r3, r3, #7
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	e000ed00 	.word	0xe000ed00

080085d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db0b      	blt.n	80085fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	f003 021f 	and.w	r2, r3, #31
 80085e8:	4907      	ldr	r1, [pc, #28]	@ (8008608 <__NVIC_EnableIRQ+0x38>)
 80085ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ee:	095b      	lsrs	r3, r3, #5
 80085f0:	2001      	movs	r0, #1
 80085f2:	fa00 f202 	lsl.w	r2, r0, r2
 80085f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	e000e100 	.word	0xe000e100

0800860c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861c:	2b00      	cmp	r3, #0
 800861e:	db0a      	blt.n	8008636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	b2da      	uxtb	r2, r3
 8008624:	490c      	ldr	r1, [pc, #48]	@ (8008658 <__NVIC_SetPriority+0x4c>)
 8008626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862a:	0112      	lsls	r2, r2, #4
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	440b      	add	r3, r1
 8008630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008634:	e00a      	b.n	800864c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	b2da      	uxtb	r2, r3
 800863a:	4908      	ldr	r1, [pc, #32]	@ (800865c <__NVIC_SetPriority+0x50>)
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	3b04      	subs	r3, #4
 8008644:	0112      	lsls	r2, r2, #4
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	440b      	add	r3, r1
 800864a:	761a      	strb	r2, [r3, #24]
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	e000e100 	.word	0xe000e100
 800865c:	e000ed00 	.word	0xe000ed00

08008660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008660:	b480      	push	{r7}
 8008662:	b089      	sub	sp, #36	@ 0x24
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f1c3 0307 	rsb	r3, r3, #7
 800867a:	2b04      	cmp	r3, #4
 800867c:	bf28      	it	cs
 800867e:	2304      	movcs	r3, #4
 8008680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	3304      	adds	r3, #4
 8008686:	2b06      	cmp	r3, #6
 8008688:	d902      	bls.n	8008690 <NVIC_EncodePriority+0x30>
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	3b03      	subs	r3, #3
 800868e:	e000      	b.n	8008692 <NVIC_EncodePriority+0x32>
 8008690:	2300      	movs	r3, #0
 8008692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008694:	f04f 32ff 	mov.w	r2, #4294967295
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	fa02 f303 	lsl.w	r3, r2, r3
 800869e:	43da      	mvns	r2, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	401a      	ands	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086a8:	f04f 31ff 	mov.w	r1, #4294967295
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	43d9      	mvns	r1, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086b8:	4313      	orrs	r3, r2
         );
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3724      	adds	r7, #36	@ 0x24
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d8:	d301      	bcc.n	80086de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086da:	2301      	movs	r3, #1
 80086dc:	e00f      	b.n	80086fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086de:	4a0a      	ldr	r2, [pc, #40]	@ (8008708 <SysTick_Config+0x40>)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086e6:	210f      	movs	r1, #15
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	f7ff ff8e 	bl	800860c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <SysTick_Config+0x40>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086f6:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <SysTick_Config+0x40>)
 80086f8:	2207      	movs	r2, #7
 80086fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	e000e010 	.word	0xe000e010

0800870c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff29 	bl	800856c <__NVIC_SetPriorityGrouping>
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	4603      	mov	r3, r0
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008730:	f7ff ff40 	bl	80085b4 <__NVIC_GetPriorityGrouping>
 8008734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	6978      	ldr	r0, [r7, #20]
 800873c:	f7ff ff90 	bl	8008660 <NVIC_EncodePriority>
 8008740:	4602      	mov	r2, r0
 8008742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff ff5f 	bl	800860c <__NVIC_SetPriority>
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	4603      	mov	r3, r0
 800875e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008764:	4618      	mov	r0, r3
 8008766:	f7ff ff33 	bl	80085d0 <__NVIC_EnableIRQ>
}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b082      	sub	sp, #8
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff ffa4 	bl	80086c8 <SysTick_Config>
 8008780:	4603      	mov	r3, r0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e08e      	b.n	80088bc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	4b47      	ldr	r3, [pc, #284]	@ (80088c4 <HAL_DMA_Init+0x138>)
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d80f      	bhi.n	80087ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	4b45      	ldr	r3, [pc, #276]	@ (80088c8 <HAL_DMA_Init+0x13c>)
 80087b2:	4413      	add	r3, r2
 80087b4:	4a45      	ldr	r2, [pc, #276]	@ (80088cc <HAL_DMA_Init+0x140>)
 80087b6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ba:	091b      	lsrs	r3, r3, #4
 80087bc:	009a      	lsls	r2, r3, #2
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a42      	ldr	r2, [pc, #264]	@ (80088d0 <HAL_DMA_Init+0x144>)
 80087c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80087c8:	e00e      	b.n	80087e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	4b40      	ldr	r3, [pc, #256]	@ (80088d4 <HAL_DMA_Init+0x148>)
 80087d2:	4413      	add	r3, r2
 80087d4:	4a3d      	ldr	r2, [pc, #244]	@ (80088cc <HAL_DMA_Init+0x140>)
 80087d6:	fba2 2303 	umull	r2, r3, r2, r3
 80087da:	091b      	lsrs	r3, r3, #4
 80087dc:	009a      	lsls	r2, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a3c      	ldr	r2, [pc, #240]	@ (80088d8 <HAL_DMA_Init+0x14c>)
 80087e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80087fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800880c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa74 	bl	8008d28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008848:	d102      	bne.n	8008850 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008858:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800885c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008866:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d010      	beq.n	8008892 <HAL_DMA_Init+0x106>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2b04      	cmp	r3, #4
 8008876:	d80c      	bhi.n	8008892 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fa93 	bl	8008da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800888e:	605a      	str	r2, [r3, #4]
 8008890:	e008      	b.n	80088a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40020407 	.word	0x40020407
 80088c8:	bffdfff8 	.word	0xbffdfff8
 80088cc:	cccccccd 	.word	0xcccccccd
 80088d0:	40020000 	.word	0x40020000
 80088d4:	bffdfbf8 	.word	0xbffdfbf8
 80088d8:	40020400 	.word	0x40020400

080088dc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_DMA_Start_IT+0x20>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e066      	b.n	80089ca <HAL_DMA_Start_IT+0xee>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d155      	bne.n	80089bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0201 	bic.w	r2, r2, #1
 800892c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f9b9 	bl	8008cac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 020e 	orr.w	r2, r2, #14
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e00f      	b.n	8008974 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0204 	bic.w	r2, r2, #4
 8008962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 020a 	orr.w	r2, r2, #10
 8008972:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800898c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008990:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008996:	2b00      	cmp	r3, #0
 8008998:	d007      	beq.n	80089aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e005      	b.n	80089c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80089c4:	2302      	movs	r3, #2
 80089c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e04f      	b.n	8008a84 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d008      	beq.n	8008a02 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2204      	movs	r2, #4
 80089f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e040      	b.n	8008a84 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 020e 	bic.w	r2, r2, #14
 8008a10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0201 	bic.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a36:	f003 021c 	and.w	r2, r3, #28
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	2101      	movs	r1, #1
 8008a40:	fa01 f202 	lsl.w	r2, r1, r2
 8008a44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00c      	beq.n	8008a72 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008a70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d005      	beq.n	8008ab4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2204      	movs	r2, #4
 8008aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	73fb      	strb	r3, [r7, #15]
 8008ab2:	e047      	b.n	8008b44 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 020e 	bic.w	r2, r2, #14
 8008ac2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0201 	bic.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ade:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae8:	f003 021c 	and.w	r2, r3, #28
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af0:	2101      	movs	r1, #1
 8008af2:	fa01 f202 	lsl.w	r2, r1, r2
 8008af6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00c      	beq.n	8008b24 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008b22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	4798      	blx	r3
    }
  }
  return status;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6a:	f003 031c 	and.w	r3, r3, #28
 8008b6e:	2204      	movs	r2, #4
 8008b70:	409a      	lsls	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4013      	ands	r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d026      	beq.n	8008bc8 <HAL_DMA_IRQHandler+0x7a>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d021      	beq.n	8008bc8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d107      	bne.n	8008ba2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0204 	bic.w	r2, r2, #4
 8008ba0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba6:	f003 021c 	and.w	r2, r3, #28
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bae:	2104      	movs	r1, #4
 8008bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8008bb4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d071      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008bc6:	e06c      	b.n	8008ca2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bcc:	f003 031c 	and.w	r3, r3, #28
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	409a      	lsls	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d02e      	beq.n	8008c3a <HAL_DMA_IRQHandler+0xec>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d029      	beq.n	8008c3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 020a 	bic.w	r2, r2, #10
 8008c02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c10:	f003 021c 	and.w	r2, r3, #28
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c18:	2102      	movs	r1, #2
 8008c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d038      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008c38:	e033      	b.n	8008ca2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3e:	f003 031c 	and.w	r3, r3, #28
 8008c42:	2208      	movs	r2, #8
 8008c44:	409a      	lsls	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d02a      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x156>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f003 0308 	and.w	r3, r3, #8
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d025      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 020e 	bic.w	r2, r2, #14
 8008c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6c:	f003 021c 	and.w	r2, r3, #28
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c74:	2101      	movs	r1, #1
 8008c76:	fa01 f202 	lsl.w	r2, r1, r2
 8008c7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
}
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008cc2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008cd4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cda:	f003 021c 	and.w	r2, r3, #28
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8008ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d108      	bne.n	8008d0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008d0a:	e007      	b.n	8008d1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	60da      	str	r2, [r3, #12]
}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	4b17      	ldr	r3, [pc, #92]	@ (8008d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d80a      	bhi.n	8008d52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d40:	089b      	lsrs	r3, r3, #2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d48:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	6493      	str	r3, [r2, #72]	@ 0x48
 8008d50:	e007      	b.n	8008d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	009a      	lsls	r2, r3, #2
 8008d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008d5c:	4413      	add	r3, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	3b08      	subs	r3, #8
 8008d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d70:	091b      	lsrs	r3, r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a0a      	ldr	r2, [pc, #40]	@ (8008da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008d78:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f003 031f 	and.w	r3, r3, #31
 8008d80:	2201      	movs	r2, #1
 8008d82:	409a      	lsls	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008d88:	bf00      	nop
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	40020407 	.word	0x40020407
 8008d98:	4002081c 	.word	0x4002081c
 8008d9c:	cccccccd 	.word	0xcccccccd
 8008da0:	40020880 	.word	0x40020880

08008da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008db4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	4b0b      	ldr	r3, [pc, #44]	@ (8008de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a09      	ldr	r2, [pc, #36]	@ (8008dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008dc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	409a      	lsls	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008dda:	bf00      	nop
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	1000823f 	.word	0x1000823f
 8008dec:	40020940 	.word	0x40020940

08008df0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dfe:	e14c      	b.n	800909a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	2101      	movs	r1, #1
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 813e 	beq.w	8009094 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d005      	beq.n	8008e30 <HAL_GPIO_Init+0x40>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d130      	bne.n	8008e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	43db      	mvns	r3, r3
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4013      	ands	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	fa02 f303 	lsl.w	r3, r2, r3
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e66:	2201      	movs	r2, #1
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6e:	43db      	mvns	r3, r3
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4013      	ands	r3, r2
 8008e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	091b      	lsrs	r3, r3, #4
 8008e7c:	f003 0201 	and.w	r2, r3, #1
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d017      	beq.n	8008ece <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	689a      	ldr	r2, [r3, #8]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d123      	bne.n	8008f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	08da      	lsrs	r2, r3, #3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3208      	adds	r2, #8
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	220f      	movs	r2, #15
 8008ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef6:	43db      	mvns	r3, r3
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4013      	ands	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	08da      	lsrs	r2, r3, #3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3208      	adds	r2, #8
 8008f1c:	6939      	ldr	r1, [r7, #16]
 8008f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f32:	43db      	mvns	r3, r3
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	4013      	ands	r3, r2
 8008f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f003 0203 	and.w	r2, r3, #3
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 8098 	beq.w	8009094 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008f64:	4a54      	ldr	r2, [pc, #336]	@ (80090b8 <HAL_GPIO_Init+0x2c8>)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	089b      	lsrs	r3, r3, #2
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	220f      	movs	r2, #15
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	43db      	mvns	r3, r3
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4013      	ands	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008f8e:	d019      	beq.n	8008fc4 <HAL_GPIO_Init+0x1d4>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a4a      	ldr	r2, [pc, #296]	@ (80090bc <HAL_GPIO_Init+0x2cc>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d013      	beq.n	8008fc0 <HAL_GPIO_Init+0x1d0>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a49      	ldr	r2, [pc, #292]	@ (80090c0 <HAL_GPIO_Init+0x2d0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00d      	beq.n	8008fbc <HAL_GPIO_Init+0x1cc>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a48      	ldr	r2, [pc, #288]	@ (80090c4 <HAL_GPIO_Init+0x2d4>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <HAL_GPIO_Init+0x1c8>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a47      	ldr	r2, [pc, #284]	@ (80090c8 <HAL_GPIO_Init+0x2d8>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d101      	bne.n	8008fb4 <HAL_GPIO_Init+0x1c4>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	e008      	b.n	8008fc6 <HAL_GPIO_Init+0x1d6>
 8008fb4:	2307      	movs	r3, #7
 8008fb6:	e006      	b.n	8008fc6 <HAL_GPIO_Init+0x1d6>
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e004      	b.n	8008fc6 <HAL_GPIO_Init+0x1d6>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e002      	b.n	8008fc6 <HAL_GPIO_Init+0x1d6>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <HAL_GPIO_Init+0x1d6>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	f002 0203 	and.w	r2, r2, #3
 8008fcc:	0092      	lsls	r2, r2, #2
 8008fce:	4093      	lsls	r3, r2
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008fd6:	4938      	ldr	r1, [pc, #224]	@ (80090b8 <HAL_GPIO_Init+0x2c8>)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	089b      	lsrs	r3, r3, #2
 8008fdc:	3302      	adds	r3, #2
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fe4:	4b39      	ldr	r3, [pc, #228]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	43db      	mvns	r3, r3
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4313      	orrs	r3, r2
 8009006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009008:	4a30      	ldr	r2, [pc, #192]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800900e:	4b2f      	ldr	r3, [pc, #188]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	43db      	mvns	r3, r3
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4013      	ands	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009032:	4a26      	ldr	r2, [pc, #152]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009038:	4b24      	ldr	r3, [pc, #144]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 800903a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	43db      	mvns	r3, r3
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4013      	ands	r3, r2
 8009048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4313      	orrs	r3, r2
 800905c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800905e:	4a1b      	ldr	r2, [pc, #108]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009066:	4b19      	ldr	r3, [pc, #100]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 8009068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800906c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	43db      	mvns	r3, r3
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4013      	ands	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800908c:	4a0f      	ldr	r2, [pc, #60]	@ (80090cc <HAL_GPIO_Init+0x2dc>)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	3301      	adds	r3, #1
 8009098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f47f aeab 	bne.w	8008e00 <HAL_GPIO_Init+0x10>
  }
}
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	40010000 	.word	0x40010000
 80090bc:	48000400 	.word	0x48000400
 80090c0:	48000800 	.word	0x48000800
 80090c4:	48000c00 	.word	0x48000c00
 80090c8:	48001000 	.word	0x48001000
 80090cc:	58000800 	.word	0x58000800

080090d0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	887b      	ldrh	r3, [r7, #2]
 80090e2:	4013      	ands	r3, r2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80090e8:	2301      	movs	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]
 80090ec:	e001      	b.n	80090f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	807b      	strh	r3, [r7, #2]
 800910c:	4613      	mov	r3, r2
 800910e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009110:	787b      	ldrb	r3, [r7, #1]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009116:	887a      	ldrh	r2, [r7, #2]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800911c:	e002      	b.n	8009124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800911e:	887a      	ldrh	r2, [r7, #2]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009142:	887a      	ldrh	r2, [r7, #2]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4013      	ands	r3, r2
 8009148:	041a      	lsls	r2, r3, #16
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	43d9      	mvns	r1, r3
 800914e:	887b      	ldrh	r3, [r7, #2]
 8009150:	400b      	ands	r3, r1
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	619a      	str	r2, [r3, #24]
}
 8009158:	bf00      	nop
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800916a:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <HAL_HSEM_IRQHandler+0x30>)
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009170:	4b08      	ldr	r3, [pc, #32]	@ (8009194 <HAL_HSEM_IRQHandler+0x30>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	43db      	mvns	r3, r3
 8009178:	4906      	ldr	r1, [pc, #24]	@ (8009194 <HAL_HSEM_IRQHandler+0x30>)
 800917a:	4013      	ands	r3, r2
 800917c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800917e:	4a05      	ldr	r2, [pc, #20]	@ (8009194 <HAL_HSEM_IRQHandler+0x30>)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f807 	bl	8009198 <HAL_HSEM_FreeCallback>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	58001500 	.word	0x58001500

08009198 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e08d      	b.n	80092da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d106      	bne.n	80091d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fd f812 	bl	80061fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2224      	movs	r2, #36	@ 0x24
 80091dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80091fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800920c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d107      	bne.n	8009226 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009222:	609a      	str	r2, [r3, #8]
 8009224:	e006      	b.n	8009234 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009232:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d108      	bne.n	800924e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800924a:	605a      	str	r2, [r3, #4]
 800924c:	e007      	b.n	800925e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800925c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800926c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009270:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009280:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691a      	ldr	r2, [r3, #16]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69d9      	ldr	r1, [r3, #28]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1a      	ldr	r2, [r3, #32]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d138      	bne.n	800936a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009302:	2302      	movs	r3, #2
 8009304:	e032      	b.n	800936c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2224      	movs	r2, #36	@ 0x24
 8009312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0201 	bic.w	r2, r2, #1
 8009324:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009334:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6819      	ldr	r1, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f042 0201 	orr.w	r2, r2, #1
 8009354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	e000      	b.n	800936c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800936a:	2302      	movs	r3, #2
  }
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b20      	cmp	r3, #32
 800938c:	d139      	bne.n	8009402 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009394:	2b01      	cmp	r3, #1
 8009396:	d101      	bne.n	800939c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009398:	2302      	movs	r3, #2
 800939a:	e033      	b.n	8009404 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2224      	movs	r2, #36	@ 0x24
 80093a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0201 	bic.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80093ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0201 	orr.w	r2, r2, #1
 80093ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	e000      	b.n	8009404 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009402:	2302      	movs	r3, #2
  }
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d01e      	beq.n	8009460 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009422:	4b13      	ldr	r3, [pc, #76]	@ (8009470 <HAL_IPCC_Init+0x60>)
 8009424:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d102      	bne.n	8009438 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7fc ff2a 	bl	800628c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009438:	68b8      	ldr	r0, [r7, #8]
 800943a:	f000 f85b 	bl	80094f4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f82c 	bl	80094a8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800945e:	e001      	b.n	8009464 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	58000c00 	.word	0x58000c00

08009474 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e00f      	b.n	80094d6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	4a0b      	ldr	r2, [pc, #44]	@ (80094ec <IPCC_SetDefaultCallbacks+0x44>)
 80094c0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3306      	adds	r3, #6
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	4a08      	ldr	r2, [pc, #32]	@ (80094f0 <IPCC_SetDefaultCallbacks+0x48>)
 80094ce:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b05      	cmp	r3, #5
 80094da:	d9ec      	bls.n	80094b6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	08009475 	.word	0x08009475
 80094f0:	0800948f 	.word	0x0800948f

080094f4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009508:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	223f      	movs	r2, #63	@ 0x3f
 800950e:	609a      	str	r2, [r3, #8]
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009520:	4b05      	ldr	r3, [pc, #20]	@ (8009538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a04      	ldr	r2, [pc, #16]	@ (8009538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	58000400 	.word	0x58000400

0800953c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8009540:	4b04      	ldr	r3, [pc, #16]	@ (8009554 <HAL_PWREx_GetVoltageRange+0x18>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8009548:	4618      	mov	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	58000400 	.word	0x58000400

08009558 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800955c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800956a:	d101      	bne.n	8009570 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <LL_RCC_HSE_Enable>:
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800958a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800958e:	6013      	str	r3, [r2, #0]
}
 8009590:	bf00      	nop
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <LL_RCC_HSE_Disable>:
{
 800959a:	b480      	push	{r7}
 800959c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800959e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80095a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095ac:	6013      	str	r3, [r2, #0]
}
 80095ae:	bf00      	nop
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <LL_RCC_HSE_IsReady>:
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80095bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095ca:	d101      	bne.n	80095d0 <LL_RCC_HSE_IsReady+0x18>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <LL_RCC_HSE_IsReady+0x1a>
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <LL_RCC_HSI_Enable>:
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80095e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80095ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095ee:	6013      	str	r3, [r2, #0]
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <LL_RCC_HSI_Disable>:
{
 80095fa:	b480      	push	{r7}
 80095fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80095fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800960c:	6013      	str	r3, [r2, #0]
}
 800960e:	bf00      	nop
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <LL_RCC_HSI_IsReady>:
{
 8009618:	b480      	push	{r7}
 800961a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800961c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800962a:	d101      	bne.n	8009630 <LL_RCC_HSI_IsReady+0x18>
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <LL_RCC_HSI_IsReady+0x1a>
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <LL_RCC_HSI_SetCalibTrimming>:
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	061b      	lsls	r3, r3, #24
 8009652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009656:	4313      	orrs	r3, r2
 8009658:	604b      	str	r3, [r1, #4]
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <LL_RCC_HSI48_Enable>:
{
 8009666:	b480      	push	{r7}
 8009668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800966a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800966e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009672:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800967e:	bf00      	nop
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <LL_RCC_HSI48_Disable>:
{
 8009688:	b480      	push	{r7}
 800968a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800968c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009690:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009698:	f023 0301 	bic.w	r3, r3, #1
 800969c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80096a0:	bf00      	nop
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <LL_RCC_HSI48_IsReady>:
{
 80096aa:	b480      	push	{r7}
 80096ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80096ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d101      	bne.n	80096c2 <LL_RCC_HSI48_IsReady+0x18>
 80096be:	2301      	movs	r3, #1
 80096c0:	e000      	b.n	80096c4 <LL_RCC_HSI48_IsReady+0x1a>
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <LL_RCC_LSE_Enable>:
{
 80096ce:	b480      	push	{r7}
 80096d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80096e6:	bf00      	nop
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <LL_RCC_LSE_Disable>:
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80096f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009700:	f023 0301 	bic.w	r3, r3, #1
 8009704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <LL_RCC_LSE_EnableBypass>:
{
 8009712:	b480      	push	{r7}
 8009714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009722:	f043 0304 	orr.w	r3, r3, #4
 8009726:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800972a:	bf00      	nop
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <LL_RCC_LSE_DisableBypass>:
{
 8009734:	b480      	push	{r7}
 8009736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800973c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009744:	f023 0304 	bic.w	r3, r3, #4
 8009748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800974c:	bf00      	nop
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <LL_RCC_LSE_IsReady>:
{
 8009756:	b480      	push	{r7}
 8009758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800975a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800975e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	d101      	bne.n	800976e <LL_RCC_LSE_IsReady+0x18>
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <LL_RCC_LSE_IsReady+0x1a>
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <LL_RCC_LSI1_Enable>:
{
 800977a:	b480      	push	{r7}
 800977c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800977e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800978a:	f043 0301 	orr.w	r3, r3, #1
 800978e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8009792:	bf00      	nop
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <LL_RCC_LSI1_Disable>:
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80097a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80097ac:	f023 0301 	bic.w	r3, r3, #1
 80097b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <LL_RCC_LSI1_IsReady>:
{
 80097be:	b480      	push	{r7}
 80097c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80097c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d101      	bne.n	80097d6 <LL_RCC_LSI1_IsReady+0x18>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <LL_RCC_LSI1_IsReady+0x1a>
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <LL_RCC_LSI2_Enable>:
{
 80097e2:	b480      	push	{r7}
 80097e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80097e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80097f2:	f043 0304 	orr.w	r3, r3, #4
 80097f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80097fa:	bf00      	nop
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <LL_RCC_LSI2_Disable>:
{
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800980c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009814:	f023 0304 	bic.w	r3, r3, #4
 8009818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800981c:	bf00      	nop
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <LL_RCC_LSI2_IsReady>:
{
 8009826:	b480      	push	{r7}
 8009828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800982a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800982e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009832:	f003 0308 	and.w	r3, r3, #8
 8009836:	2b08      	cmp	r3, #8
 8009838:	d101      	bne.n	800983e <LL_RCC_LSI2_IsReady+0x18>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <LL_RCC_LSI2_IsReady+0x1a>
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <LL_RCC_LSI2_SetTrimming>:
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800985a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009866:	4313      	orrs	r3, r2
 8009868:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <LL_RCC_MSI_Enable>:
{
 8009878:	b480      	push	{r7}
 800987a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800987c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009886:	f043 0301 	orr.w	r3, r3, #1
 800988a:	6013      	str	r3, [r2, #0]
}
 800988c:	bf00      	nop
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <LL_RCC_MSI_Disable>:
{
 8009896:	b480      	push	{r7}
 8009898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800989a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80098a4:	f023 0301 	bic.w	r3, r3, #1
 80098a8:	6013      	str	r3, [r2, #0]
}
 80098aa:	bf00      	nop
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <LL_RCC_MSI_IsReady>:
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80098b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d101      	bne.n	80098ca <LL_RCC_MSI_IsReady+0x16>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <LL_RCC_MSI_IsReady+0x18>
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <LL_RCC_MSI_SetRange>:
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80098de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80098e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	600b      	str	r3, [r1, #0]
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <LL_RCC_MSI_GetRange>:
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800990e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2bb0      	cmp	r3, #176	@ 0xb0
 8009914:	d901      	bls.n	800991a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009916:	23b0      	movs	r3, #176	@ 0xb0
 8009918:	607b      	str	r3, [r7, #4]
  return msiRange;
 800991a:	687b      	ldr	r3, [r7, #4]
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009942:	4313      	orrs	r3, r2
 8009944:	604b      	str	r3, [r1, #4]
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <LL_RCC_SetSysClkSource>:
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800995a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f023 0203 	bic.w	r2, r3, #3
 8009964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4313      	orrs	r3, r2
 800996c:	608b      	str	r3, [r1, #8]
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <LL_RCC_GetSysClkSource>:
{
 800997a:	b480      	push	{r7}
 800997c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800997e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 030c 	and.w	r3, r3, #12
}
 8009988:	4618      	mov	r0, r3
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <LL_RCC_SetAHBPrescaler>:
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800999a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80099a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	608b      	str	r3, [r1, #8]
}
 80099ae:	bf00      	nop
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <LL_C2_RCC_SetAHBPrescaler>:
{
 80099ba:	b480      	push	{r7}
 80099bc:	b083      	sub	sp, #12
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80099c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80099ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80099ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <LL_RCC_SetAHB4Prescaler>:
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80099ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80099f6:	f023 020f 	bic.w	r2, r3, #15
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	091b      	lsrs	r3, r3, #4
 80099fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a02:	4313      	orrs	r3, r2
 8009a04:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <LL_RCC_SetAPB1Prescaler>:
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	608b      	str	r3, [r1, #8]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <LL_RCC_SetAPB2Prescaler>:
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009a4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	608b      	str	r3, [r1, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <LL_RCC_GetAHBPrescaler>:
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <LL_RCC_GetAHB4Prescaler>:
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a84:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <LL_RCC_GetAPB1Prescaler>:
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <LL_RCC_GetAPB2Prescaler>:
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ada:	6013      	str	r3, [r2, #0]
}
 8009adc:	bf00      	nop
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009af4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009af8:	6013      	str	r3, [r2, #0]
}
 8009afa:	bf00      	nop
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b16:	d101      	bne.n	8009b1c <LL_RCC_PLL_IsReady+0x18>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <LL_RCC_PLL_IsReady+0x1a>
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009b42:	b480      	push	{r7}
 8009b44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009b72:	b480      	push	{r7}
 8009b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f003 0303 	and.w	r3, r3, #3
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8009b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b9c:	d101      	bne.n	8009ba2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e000      	b.n	8009ba4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8009bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bc2:	d101      	bne.n	8009bc8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e000      	b.n	8009bca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009be8:	d101      	bne.n	8009bee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8009bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c0c:	d101      	bne.n	8009c12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8009c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c30:	d101      	bne.n	8009c36 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c44:	b590      	push	{r4, r7, lr}
 8009c46:	b08d      	sub	sp, #52	@ 0x34
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e363      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 808d 	beq.w	8009d7e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c64:	f7ff fe89 	bl	800997a <LL_RCC_GetSysClkSource>
 8009c68:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c6a:	f7ff ff82 	bl	8009b72 <LL_RCC_PLL_GetMainSource>
 8009c6e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <HAL_RCC_OscConfig+0x3e>
 8009c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c78:	2b0c      	cmp	r3, #12
 8009c7a:	d147      	bne.n	8009d0c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d144      	bne.n	8009d0c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e347      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009c92:	f7ff fe34 	bl	80098fe <LL_RCC_MSI_GetRange>
 8009c96:	4603      	mov	r3, r0
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	d914      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fd2f 	bl	800a704 <RCC_SetFlashLatencyFromMSIRange>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e336      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff fe0e 	bl	80098d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff fe32 	bl	8009928 <LL_RCC_MSI_SetCalibTrimming>
 8009cc4:	e013      	b.n	8009cee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff fe03 	bl	80098d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff fe27 	bl	8009928 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fd10 	bl	800a704 <RCC_SetFlashLatencyFromMSIRange>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e317      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009cee:	f000 fcc9 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	4aa4      	ldr	r2, [pc, #656]	@ (8009f88 <HAL_RCC_OscConfig+0x344>)
 8009cf6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009cf8:	4ba4      	ldr	r3, [pc, #656]	@ (8009f8c <HAL_RCC_OscConfig+0x348>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fd fb39 	bl	8007374 <HAL_InitTick>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d039      	beq.n	8009d7c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e308      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01e      	beq.n	8009d52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009d14:	f7ff fdb0 	bl	8009878 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009d18:	f7fd fb7a 	bl	8007410 <HAL_GetTick>
 8009d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8009d1e:	e008      	b.n	8009d32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d20:	f7fd fb76 	bl	8007410 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d901      	bls.n	8009d32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	e2f5      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8009d32:	f7ff fdbf 	bl	80098b4 <LL_RCC_MSI_IsReady>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0f1      	beq.n	8009d20 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fdc8 	bl	80098d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fdec 	bl	8009928 <LL_RCC_MSI_SetCalibTrimming>
 8009d50:	e015      	b.n	8009d7e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009d52:	f7ff fda0 	bl	8009896 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009d56:	f7fd fb5b 	bl	8007410 <HAL_GetTick>
 8009d5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009d5c:	e008      	b.n	8009d70 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d5e:	f7fd fb57 	bl	8007410 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e2d6      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009d70:	f7ff fda0 	bl	80098b4 <LL_RCC_MSI_IsReady>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f1      	bne.n	8009d5e <HAL_RCC_OscConfig+0x11a>
 8009d7a:	e000      	b.n	8009d7e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009d7c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d047      	beq.n	8009e1a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d8a:	f7ff fdf6 	bl	800997a <LL_RCC_GetSysClkSource>
 8009d8e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009d90:	f7ff feef 	bl	8009b72 <LL_RCC_PLL_GetMainSource>
 8009d94:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d005      	beq.n	8009da8 <HAL_RCC_OscConfig+0x164>
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	2b0c      	cmp	r3, #12
 8009da0:	d108      	bne.n	8009db4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d105      	bne.n	8009db4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d134      	bne.n	8009e1a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e2b4      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dbc:	d102      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x180>
 8009dbe:	f7ff fbdd 	bl	800957c <LL_RCC_HSE_Enable>
 8009dc2:	e001      	b.n	8009dc8 <HAL_RCC_OscConfig+0x184>
 8009dc4:	f7ff fbe9 	bl	800959a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d012      	beq.n	8009df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd0:	f7fd fb1e 	bl	8007410 <HAL_GetTick>
 8009dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009dd6:	e008      	b.n	8009dea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dd8:	f7fd fb1a 	bl	8007410 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b64      	cmp	r3, #100	@ 0x64
 8009de4:	d901      	bls.n	8009dea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e299      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009dea:	f7ff fbe5 	bl	80095b8 <LL_RCC_HSE_IsReady>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0f1      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x194>
 8009df4:	e011      	b.n	8009e1a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df6:	f7fd fb0b 	bl	8007410 <HAL_GetTick>
 8009dfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009dfc:	e008      	b.n	8009e10 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dfe:	f7fd fb07 	bl	8007410 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b64      	cmp	r3, #100	@ 0x64
 8009e0a:	d901      	bls.n	8009e10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e286      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009e10:	f7ff fbd2 	bl	80095b8 <LL_RCC_HSE_IsReady>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1f1      	bne.n	8009dfe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d04c      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e26:	f7ff fda8 	bl	800997a <LL_RCC_GetSysClkSource>
 8009e2a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e2c:	f7ff fea1 	bl	8009b72 <LL_RCC_PLL_GetMainSource>
 8009e30:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d005      	beq.n	8009e44 <HAL_RCC_OscConfig+0x200>
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	2b0c      	cmp	r3, #12
 8009e3c:	d10e      	bne.n	8009e5c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d10b      	bne.n	8009e5c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e266      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fbf1 	bl	800963c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009e5a:	e031      	b.n	8009ec0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d019      	beq.n	8009e98 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e64:	f7ff fbba 	bl	80095dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e68:	f7fd fad2 	bl	8007410 <HAL_GetTick>
 8009e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009e6e:	e008      	b.n	8009e82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e70:	f7fd face 	bl	8007410 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e24d      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009e82:	f7ff fbc9 	bl	8009618 <LL_RCC_HSI_IsReady>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0f1      	beq.n	8009e70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fbd3 	bl	800963c <LL_RCC_HSI_SetCalibTrimming>
 8009e96:	e013      	b.n	8009ec0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e98:	f7ff fbaf 	bl	80095fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9c:	f7fd fab8 	bl	8007410 <HAL_GetTick>
 8009ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ea4:	f7fd fab4 	bl	8007410 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e233      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009eb6:	f7ff fbaf 	bl	8009618 <LL_RCC_HSI_IsReady>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1f1      	bne.n	8009ea4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0308 	and.w	r3, r3, #8
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 80a3 	beq.w	800a020 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d076      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0310 	and.w	r3, r3, #16
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d046      	beq.n	8009f7c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009eee:	f7ff fc66 	bl	80097be <LL_RCC_LSI1_IsReady>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d113      	bne.n	8009f20 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009ef8:	f7ff fc3f 	bl	800977a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009efc:	f7fd fa88 	bl	8007410 <HAL_GetTick>
 8009f00:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009f02:	e008      	b.n	8009f16 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009f04:	f7fd fa84 	bl	8007410 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d901      	bls.n	8009f16 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e203      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009f16:	f7ff fc52 	bl	80097be <LL_RCC_LSI1_IsReady>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0f1      	beq.n	8009f04 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009f20:	f7ff fc5f 	bl	80097e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f24:	f7fd fa74 	bl	8007410 <HAL_GetTick>
 8009f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009f2c:	f7fd fa70 	bl	8007410 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e1ef      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009f3e:	f7ff fc72 	bl	8009826 <LL_RCC_LSI2_IsReady>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0f1      	beq.n	8009f2c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff fc7c 	bl	800984a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009f52:	f7ff fc23 	bl	800979c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f56:	f7fd fa5b 	bl	8007410 <HAL_GetTick>
 8009f5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009f5c:	e008      	b.n	8009f70 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009f5e:	f7fd fa57 	bl	8007410 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d901      	bls.n	8009f70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e1d6      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009f70:	f7ff fc25 	bl	80097be <LL_RCC_LSI1_IsReady>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1f1      	bne.n	8009f5e <HAL_RCC_OscConfig+0x31a>
 8009f7a:	e051      	b.n	800a020 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009f7c:	f7ff fbfd 	bl	800977a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f80:	f7fd fa46 	bl	8007410 <HAL_GetTick>
 8009f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009f86:	e00c      	b.n	8009fa2 <HAL_RCC_OscConfig+0x35e>
 8009f88:	20000008 	.word	0x20000008
 8009f8c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009f90:	f7fd fa3e 	bl	8007410 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e1bd      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009fa2:	f7ff fc0c 	bl	80097be <LL_RCC_LSI1_IsReady>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d0f1      	beq.n	8009f90 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009fac:	f7ff fc2a 	bl	8009804 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009fb2:	f7fd fa2d 	bl	8007410 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e1ac      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009fc4:	f7ff fc2f 	bl	8009826 <LL_RCC_LSI2_IsReady>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f1      	bne.n	8009fb2 <HAL_RCC_OscConfig+0x36e>
 8009fce:	e027      	b.n	800a020 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009fd0:	f7ff fc18 	bl	8009804 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd4:	f7fd fa1c 	bl	8007410 <HAL_GetTick>
 8009fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009fda:	e008      	b.n	8009fee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009fdc:	f7fd fa18 	bl	8007410 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d901      	bls.n	8009fee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e197      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009fee:	f7ff fc1a 	bl	8009826 <LL_RCC_LSI2_IsReady>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1f1      	bne.n	8009fdc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009ff8:	f7ff fbd0 	bl	800979c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ffc:	f7fd fa08 	bl	8007410 <HAL_GetTick>
 800a000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800a004:	f7fd fa04 	bl	8007410 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e183      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800a016:	f7ff fbd2 	bl	80097be <LL_RCC_LSI1_IsReady>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1f1      	bne.n	800a004 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d05b      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a02c:	4ba7      	ldr	r3, [pc, #668]	@ (800a2cc <HAL_RCC_OscConfig+0x688>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a034:	2b00      	cmp	r3, #0
 800a036:	d114      	bne.n	800a062 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a038:	f7ff fa70 	bl	800951c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a03c:	f7fd f9e8 	bl	8007410 <HAL_GetTick>
 800a040:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a042:	e008      	b.n	800a056 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a044:	f7fd f9e4 	bl	8007410 <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d901      	bls.n	800a056 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e163      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a056:	4b9d      	ldr	r3, [pc, #628]	@ (800a2cc <HAL_RCC_OscConfig+0x688>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0f0      	beq.n	800a044 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d102      	bne.n	800a070 <HAL_RCC_OscConfig+0x42c>
 800a06a:	f7ff fb30 	bl	80096ce <LL_RCC_LSE_Enable>
 800a06e:	e00c      	b.n	800a08a <HAL_RCC_OscConfig+0x446>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	2b05      	cmp	r3, #5
 800a076:	d104      	bne.n	800a082 <HAL_RCC_OscConfig+0x43e>
 800a078:	f7ff fb4b 	bl	8009712 <LL_RCC_LSE_EnableBypass>
 800a07c:	f7ff fb27 	bl	80096ce <LL_RCC_LSE_Enable>
 800a080:	e003      	b.n	800a08a <HAL_RCC_OscConfig+0x446>
 800a082:	f7ff fb35 	bl	80096f0 <LL_RCC_LSE_Disable>
 800a086:	f7ff fb55 	bl	8009734 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d014      	beq.n	800a0bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a092:	f7fd f9bd 	bl	8007410 <HAL_GetTick>
 800a096:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800a098:	e00a      	b.n	800a0b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a09a:	f7fd f9b9 	bl	8007410 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d901      	bls.n	800a0b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e136      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800a0b0:	f7ff fb51 	bl	8009756 <LL_RCC_LSE_IsReady>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0ef      	beq.n	800a09a <HAL_RCC_OscConfig+0x456>
 800a0ba:	e013      	b.n	800a0e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0bc:	f7fd f9a8 	bl	8007410 <HAL_GetTick>
 800a0c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800a0c2:	e00a      	b.n	800a0da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0c4:	f7fd f9a4 	bl	8007410 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e121      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800a0da:	f7ff fb3c 	bl	8009756 <LL_RCC_LSE_IsReady>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1ef      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d02c      	beq.n	800a14a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d014      	beq.n	800a122 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0f8:	f7ff fab5 	bl	8009666 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0fc:	f7fd f988 	bl	8007410 <HAL_GetTick>
 800a100:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a102:	e008      	b.n	800a116 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a104:	f7fd f984 	bl	8007410 <HAL_GetTick>
 800a108:	4602      	mov	r2, r0
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d901      	bls.n	800a116 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e103      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800a116:	f7ff fac8 	bl	80096aa <LL_RCC_HSI48_IsReady>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0f1      	beq.n	800a104 <HAL_RCC_OscConfig+0x4c0>
 800a120:	e013      	b.n	800a14a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a122:	f7ff fab1 	bl	8009688 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a126:	f7fd f973 	bl	8007410 <HAL_GetTick>
 800a12a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a12c:	e008      	b.n	800a140 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a12e:	f7fd f96f 	bl	8007410 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e0ee      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800a140:	f7ff fab3 	bl	80096aa <LL_RCC_HSI48_IsReady>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1f1      	bne.n	800a12e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 80e4 	beq.w	800a31c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a154:	f7ff fc11 	bl	800997a <LL_RCC_GetSysClkSource>
 800a158:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800a15a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a166:	2b02      	cmp	r3, #2
 800a168:	f040 80b4 	bne.w	800a2d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f003 0203 	and.w	r2, r3, #3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a176:	429a      	cmp	r2, r3
 800a178:	d123      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a184:	429a      	cmp	r2, r3
 800a186:	d11c      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	0a1b      	lsrs	r3, r3, #8
 800a18c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a194:	429a      	cmp	r2, r3
 800a196:	d114      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d10d      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d106      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d05d      	beq.n	800a27e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b0c      	cmp	r3, #12
 800a1c6:	d058      	beq.n	800a27a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a1c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e0a1      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a1da:	f7ff fc84 	bl	8009ae6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a1de:	f7fd f917 	bl	8007410 <HAL_GetTick>
 800a1e2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1e4:	e008      	b.n	800a1f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e6:	f7fd f913 	bl	8007410 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d901      	bls.n	800a1f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e092      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a1f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1ef      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a20a:	68da      	ldr	r2, [r3, #12]
 800a20c:	4b30      	ldr	r3, [pc, #192]	@ (800a2d0 <HAL_RCC_OscConfig+0x68c>)
 800a20e:	4013      	ands	r3, r2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a218:	4311      	orrs	r1, r2
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a21e:	0212      	lsls	r2, r2, #8
 800a220:	4311      	orrs	r1, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a226:	4311      	orrs	r1, r2
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a22c:	4311      	orrs	r1, r2
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a232:	430a      	orrs	r2, r1
 800a234:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a238:	4313      	orrs	r3, r2
 800a23a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a23c:	f7ff fc44 	bl	8009ac8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a24a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a24e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a250:	f7fd f8de 	bl	8007410 <HAL_GetTick>
 800a254:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a256:	e008      	b.n	800a26a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a258:	f7fd f8da 	bl	8007410 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b02      	cmp	r3, #2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e059      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a26a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0ef      	beq.n	800a258 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a278:	e050      	b.n	800a31c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e04f      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a27e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d147      	bne.n	800a31c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a28c:	f7ff fc1c 	bl	8009ac8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a29a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a29e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2a0:	f7fd f8b6 	bl	8007410 <HAL_GetTick>
 800a2a4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2a6:	e008      	b.n	800a2ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2a8:	f7fd f8b2 	bl	8007410 <HAL_GetTick>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d901      	bls.n	800a2ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e031      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a2ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d0ef      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x664>
 800a2c8:	e028      	b.n	800a31c <HAL_RCC_OscConfig+0x6d8>
 800a2ca:	bf00      	nop
 800a2cc:	58000400 	.word	0x58000400
 800a2d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	2b0c      	cmp	r3, #12
 800a2d8:	d01e      	beq.n	800a318 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2da:	f7ff fc04 	bl	8009ae6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2de:	f7fd f897 	bl	8007410 <HAL_GetTick>
 800a2e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2e4:	e008      	b.n	800a2f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2e6:	f7fd f893 	bl	8007410 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d901      	bls.n	800a2f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e012      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1ef      	bne.n	800a2e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800a306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a310:	4b05      	ldr	r3, [pc, #20]	@ (800a328 <HAL_RCC_OscConfig+0x6e4>)
 800a312:	4013      	ands	r3, r2
 800a314:	60cb      	str	r3, [r1, #12]
 800a316:	e001      	b.n	800a31c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3734      	adds	r7, #52	@ 0x34
 800a322:	46bd      	mov	sp, r7
 800a324:	bd90      	pop	{r4, r7, pc}
 800a326:	bf00      	nop
 800a328:	eefefffc 	.word	0xeefefffc

0800a32c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e12d      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a340:	4b98      	ldr	r3, [pc, #608]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d91b      	bls.n	800a386 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a34e:	4b95      	ldr	r3, [pc, #596]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f023 0207 	bic.w	r2, r3, #7
 800a356:	4993      	ldr	r1, [pc, #588]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a35e:	f7fd f857 	bl	8007410 <HAL_GetTick>
 800a362:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a364:	e008      	b.n	800a378 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a366:	f7fd f853 	bl	8007410 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	2b02      	cmp	r3, #2
 800a372:	d901      	bls.n	800a378 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e111      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a378:	4b8a      	ldr	r3, [pc, #552]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0307 	and.w	r3, r3, #7
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d1ef      	bne.n	800a366 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d016      	beq.n	800a3c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fafb 	bl	8009992 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a39c:	f7fd f838 	bl	8007410 <HAL_GetTick>
 800a3a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a3a2:	e008      	b.n	800a3b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a3a4:	f7fd f834 	bl	8007410 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e0f2      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a3b6:	f7ff fbe8 	bl	8009b8a <LL_RCC_IsActiveFlag_HPRE>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f1      	beq.n	800a3a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d016      	beq.n	800a3fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff faf2 	bl	80099ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a3d6:	f7fd f81b 	bl	8007410 <HAL_GetTick>
 800a3da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a3dc:	e008      	b.n	800a3f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a3de:	f7fd f817 	bl	8007410 <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d901      	bls.n	800a3f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e0d5      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a3f0:	f7ff fbdd 	bl	8009bae <LL_RCC_IsActiveFlag_C2HPRE>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0f1      	beq.n	800a3de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d016      	beq.n	800a434 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff faeb 	bl	80099e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a410:	f7fc fffe 	bl	8007410 <HAL_GetTick>
 800a414:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a416:	e008      	b.n	800a42a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a418:	f7fc fffa 	bl	8007410 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b02      	cmp	r3, #2
 800a424:	d901      	bls.n	800a42a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e0b8      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a42a:	f7ff fbd3 	bl	8009bd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0f1      	beq.n	800a418 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d016      	beq.n	800a46e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	4618      	mov	r0, r3
 800a446:	f7ff fae5 	bl	8009a14 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a44a:	f7fc ffe1 	bl	8007410 <HAL_GetTick>
 800a44e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a450:	e008      	b.n	800a464 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a452:	f7fc ffdd 	bl	8007410 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d901      	bls.n	800a464 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e09b      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a464:	f7ff fbc9 	bl	8009bfa <LL_RCC_IsActiveFlag_PPRE1>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0f1      	beq.n	800a452 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d017      	beq.n	800a4aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fadb 	bl	8009a3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a486:	f7fc ffc3 	bl	8007410 <HAL_GetTick>
 800a48a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a48c:	e008      	b.n	800a4a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a48e:	f7fc ffbf 	bl	8007410 <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e07d      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a4a0:	f7ff fbbd 	bl	8009c1e <LL_RCC_IsActiveFlag_PPRE2>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f1      	beq.n	800a48e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d043      	beq.n	800a53e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d106      	bne.n	800a4cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a4be:	f7ff f87b 	bl	80095b8 <LL_RCC_HSE_IsReady>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11e      	bne.n	800a506 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e067      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a4d4:	f7ff fb16 	bl	8009b04 <LL_RCC_PLL_IsReady>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d113      	bne.n	800a506 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e05c      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d106      	bne.n	800a4f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a4ea:	f7ff f9e3 	bl	80098b4 <LL_RCC_MSI_IsReady>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d108      	bne.n	800a506 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e051      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a4f8:	f7ff f88e 	bl	8009618 <LL_RCC_HSI_IsReady>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e04a      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fa21 	bl	8009952 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a510:	f7fc ff7e 	bl	8007410 <HAL_GetTick>
 800a514:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a516:	e00a      	b.n	800a52e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a518:	f7fc ff7a 	bl	8007410 <HAL_GetTick>
 800a51c:	4602      	mov	r2, r0
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a526:	4293      	cmp	r3, r2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e036      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a52e:	f7ff fa24 	bl	800997a <LL_RCC_GetSysClkSource>
 800a532:	4602      	mov	r2, r0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d1ec      	bne.n	800a518 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0307 	and.w	r3, r3, #7
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d21b      	bcs.n	800a584 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a54c:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f023 0207 	bic.w	r2, r3, #7
 800a554:	4913      	ldr	r1, [pc, #76]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	4313      	orrs	r3, r2
 800a55a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55c:	f7fc ff58 	bl	8007410 <HAL_GetTick>
 800a560:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a562:	e008      	b.n	800a576 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a564:	f7fc ff54 	bl	8007410 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e012      	b.n	800a59c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a576:	4b0b      	ldr	r3, [pc, #44]	@ (800a5a4 <HAL_RCC_ClockConfig+0x278>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d1ef      	bne.n	800a564 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a584:	f000 f87e 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800a588:	4603      	mov	r3, r0
 800a58a:	4a07      	ldr	r2, [pc, #28]	@ (800a5a8 <HAL_RCC_ClockConfig+0x27c>)
 800a58c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a58e:	f7fc ff4b 	bl	8007428 <HAL_GetTickPrio>
 800a592:	4603      	mov	r3, r0
 800a594:	4618      	mov	r0, r3
 800a596:	f7fc feed 	bl	8007374 <HAL_InitTick>
 800a59a:	4603      	mov	r3, r0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	58004000 	.word	0x58004000
 800a5a8:	20000008 	.word	0x20000008

0800a5ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5b2:	f7ff f9e2 	bl	800997a <LL_RCC_GetSysClkSource>
 800a5b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a5be:	f7ff f99e 	bl	80098fe <LL_RCC_MSI_GetRange>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	091b      	lsrs	r3, r3, #4
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	4a2b      	ldr	r2, [pc, #172]	@ (800a678 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	e04b      	b.n	800a66c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d102      	bne.n	800a5e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a5da:	4b28      	ldr	r3, [pc, #160]	@ (800a67c <HAL_RCC_GetSysClockFreq+0xd0>)
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	e045      	b.n	800a66c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d10a      	bne.n	800a5fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a5e6:	f7fe ffb7 	bl	8009558 <LL_RCC_HSE_IsEnabledDiv2>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d102      	bne.n	800a5f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a5f0:	4b22      	ldr	r3, [pc, #136]	@ (800a67c <HAL_RCC_GetSysClockFreq+0xd0>)
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	e03a      	b.n	800a66c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a5f6:	4b22      	ldr	r3, [pc, #136]	@ (800a680 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e037      	b.n	800a66c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a5fc:	f7ff fab9 	bl	8009b72 <LL_RCC_PLL_GetMainSource>
 800a600:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b02      	cmp	r3, #2
 800a606:	d003      	beq.n	800a610 <HAL_RCC_GetSysClockFreq+0x64>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d003      	beq.n	800a616 <HAL_RCC_GetSysClockFreq+0x6a>
 800a60e:	e00d      	b.n	800a62c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a610:	4b1a      	ldr	r3, [pc, #104]	@ (800a67c <HAL_RCC_GetSysClockFreq+0xd0>)
 800a612:	60bb      	str	r3, [r7, #8]
        break;
 800a614:	e015      	b.n	800a642 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a616:	f7fe ff9f 	bl	8009558 <LL_RCC_HSE_IsEnabledDiv2>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d102      	bne.n	800a626 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a620:	4b16      	ldr	r3, [pc, #88]	@ (800a67c <HAL_RCC_GetSysClockFreq+0xd0>)
 800a622:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a624:	e00d      	b.n	800a642 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a626:	4b16      	ldr	r3, [pc, #88]	@ (800a680 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a628:	60bb      	str	r3, [r7, #8]
        break;
 800a62a:	e00a      	b.n	800a642 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a62c:	f7ff f967 	bl	80098fe <LL_RCC_MSI_GetRange>
 800a630:	4603      	mov	r3, r0
 800a632:	091b      	lsrs	r3, r3, #4
 800a634:	f003 030f 	and.w	r3, r3, #15
 800a638:	4a0f      	ldr	r2, [pc, #60]	@ (800a678 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a63e:	60bb      	str	r3, [r7, #8]
        break;
 800a640:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a642:	f7ff fa71 	bl	8009b28 <LL_RCC_PLL_GetN>
 800a646:	4602      	mov	r2, r0
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	fb03 f402 	mul.w	r4, r3, r2
 800a64e:	f7ff fa84 	bl	8009b5a <LL_RCC_PLL_GetDivider>
 800a652:	4603      	mov	r3, r0
 800a654:	091b      	lsrs	r3, r3, #4
 800a656:	3301      	adds	r3, #1
 800a658:	fbb4 f4f3 	udiv	r4, r4, r3
 800a65c:	f7ff fa71 	bl	8009b42 <LL_RCC_PLL_GetR>
 800a660:	4603      	mov	r3, r0
 800a662:	0f5b      	lsrs	r3, r3, #29
 800a664:	3301      	adds	r3, #1
 800a666:	fbb4 f3f3 	udiv	r3, r4, r3
 800a66a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a66c:	68fb      	ldr	r3, [r7, #12]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	bd90      	pop	{r4, r7, pc}
 800a676:	bf00      	nop
 800a678:	08010894 	.word	0x08010894
 800a67c:	00f42400 	.word	0x00f42400
 800a680:	01e84800 	.word	0x01e84800

0800a684 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a684:	b598      	push	{r3, r4, r7, lr}
 800a686:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a688:	f7ff ff90 	bl	800a5ac <HAL_RCC_GetSysClockFreq>
 800a68c:	4604      	mov	r4, r0
 800a68e:	f7ff f9e9 	bl	8009a64 <LL_RCC_GetAHBPrescaler>
 800a692:	4603      	mov	r3, r0
 800a694:	091b      	lsrs	r3, r3, #4
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	4a03      	ldr	r2, [pc, #12]	@ (800a6a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800a69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	bd98      	pop	{r3, r4, r7, pc}
 800a6a8:	08010834 	.word	0x08010834

0800a6ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6ac:	b598      	push	{r3, r4, r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a6b0:	f7ff ffe8 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	f7ff f9ef 	bl	8009a98 <LL_RCC_GetAPB1Prescaler>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	0a1b      	lsrs	r3, r3, #8
 800a6be:	f003 0307 	and.w	r3, r3, #7
 800a6c2:	4a04      	ldr	r2, [pc, #16]	@ (800a6d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6c8:	f003 031f 	and.w	r3, r3, #31
 800a6cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	bd98      	pop	{r3, r4, r7, pc}
 800a6d4:	08010874 	.word	0x08010874

0800a6d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6d8:	b598      	push	{r3, r4, r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a6dc:	f7ff ffd2 	bl	800a684 <HAL_RCC_GetHCLKFreq>
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	f7ff f9e5 	bl	8009ab0 <LL_RCC_GetAPB2Prescaler>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	0adb      	lsrs	r3, r3, #11
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	4a04      	ldr	r2, [pc, #16]	@ (800a700 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	bd98      	pop	{r3, r4, r7, pc}
 800a700:	08010874 	.word	0x08010874

0800a704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2bb0      	cmp	r3, #176	@ 0xb0
 800a710:	d903      	bls.n	800a71a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a712:	4b15      	ldr	r3, [pc, #84]	@ (800a768 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	e007      	b.n	800a72a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	091b      	lsrs	r3, r3, #4
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	4a11      	ldr	r2, [pc, #68]	@ (800a768 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a728:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a72a:	f7ff f9a7 	bl	8009a7c <LL_RCC_GetAHB4Prescaler>
 800a72e:	4603      	mov	r3, r0
 800a730:	091b      	lsrs	r3, r3, #4
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	4a0d      	ldr	r2, [pc, #52]	@ (800a76c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a742:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	4a0a      	ldr	r2, [pc, #40]	@ (800a770 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a748:	fba2 2303 	umull	r2, r3, r2, r3
 800a74c:	0c9c      	lsrs	r4, r3, #18
 800a74e:	f7fe fef5 	bl	800953c <HAL_PWREx_GetVoltageRange>
 800a752:	4603      	mov	r3, r0
 800a754:	4619      	mov	r1, r3
 800a756:	4620      	mov	r0, r4
 800a758:	f000 f80c 	bl	800a774 <RCC_SetFlashLatency>
 800a75c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	bd90      	pop	{r4, r7, pc}
 800a766:	bf00      	nop
 800a768:	08010894 	.word	0x08010894
 800a76c:	08010834 	.word	0x08010834
 800a770:	431bde83 	.word	0x431bde83

0800a774 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	b093      	sub	sp, #76	@ 0x4c
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a77e:	4b37      	ldr	r3, [pc, #220]	@ (800a85c <RCC_SetFlashLatency+0xe8>)
 800a780:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800a784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a78a:	4a35      	ldr	r2, [pc, #212]	@ (800a860 <RCC_SetFlashLatency+0xec>)
 800a78c:	f107 031c 	add.w	r3, r7, #28
 800a790:	ca07      	ldmia	r2, {r0, r1, r2}
 800a792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a796:	4b33      	ldr	r3, [pc, #204]	@ (800a864 <RCC_SetFlashLatency+0xf0>)
 800a798:	f107 040c 	add.w	r4, r7, #12
 800a79c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a79e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ac:	d11a      	bne.n	800a7e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7b2:	e013      	b.n	800a7dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a7b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	3348      	adds	r3, #72	@ 0x48
 800a7ba:	443b      	add	r3, r7
 800a7bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d807      	bhi.n	800a7d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	3348      	adds	r3, #72	@ 0x48
 800a7cc:	443b      	add	r3, r7
 800a7ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a7d2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800a7d4:	e020      	b.n	800a818 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d8:	3301      	adds	r3, #1
 800a7da:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d9e8      	bls.n	800a7b4 <RCC_SetFlashLatency+0x40>
 800a7e2:	e019      	b.n	800a818 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7e8:	e013      	b.n	800a812 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	3348      	adds	r3, #72	@ 0x48
 800a7f0:	443b      	add	r3, r7
 800a7f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d807      	bhi.n	800a80c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	3348      	adds	r3, #72	@ 0x48
 800a802:	443b      	add	r3, r7
 800a804:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a808:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800a80a:	e005      	b.n	800a818 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a80e:	3301      	adds	r3, #1
 800a810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a814:	2b02      	cmp	r3, #2
 800a816:	d9e8      	bls.n	800a7ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a818:	4b13      	ldr	r3, [pc, #76]	@ (800a868 <RCC_SetFlashLatency+0xf4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f023 0207 	bic.w	r2, r3, #7
 800a820:	4911      	ldr	r1, [pc, #68]	@ (800a868 <RCC_SetFlashLatency+0xf4>)
 800a822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a824:	4313      	orrs	r3, r2
 800a826:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a828:	f7fc fdf2 	bl	8007410 <HAL_GetTick>
 800a82c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a82e:	e008      	b.n	800a842 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a830:	f7fc fdee 	bl	8007410 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d901      	bls.n	800a842 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e007      	b.n	800a852 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a842:	4b09      	ldr	r3, [pc, #36]	@ (800a868 <RCC_SetFlashLatency+0xf4>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d1ef      	bne.n	800a830 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	374c      	adds	r7, #76	@ 0x4c
 800a856:	46bd      	mov	sp, r7
 800a858:	bd90      	pop	{r4, r7, pc}
 800a85a:	bf00      	nop
 800a85c:	080106b0 	.word	0x080106b0
 800a860:	080106c0 	.word	0x080106c0
 800a864:	080106cc 	.word	0x080106cc
 800a868:	58004000 	.word	0x58004000

0800a86c <LL_RCC_LSE_IsEnabled>:
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <LL_RCC_LSE_IsEnabled+0x18>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <LL_RCC_LSE_IsEnabled+0x1a>
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <LL_RCC_LSE_IsReady>:
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a89c:	f003 0302 	and.w	r3, r3, #2
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d101      	bne.n	800a8a8 <LL_RCC_LSE_IsReady+0x18>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <LL_RCC_LSE_IsReady+0x1a>
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <LL_RCC_SetRFWKPClockSource>:
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a8bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a8c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <LL_RCC_SetSMPSClockSource>:
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a8e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ee:	f023 0203 	bic.w	r2, r3, #3
 800a8f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <LL_RCC_SetSMPSPrescaler>:
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a916:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a91a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4313      	orrs	r3, r2
 800a922:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <LL_RCC_SetUSARTClockSource>:
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a940:	f023 0203 	bic.w	r2, r3, #3
 800a944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <LL_RCC_SetLPUARTClockSource>:
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a96c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4313      	orrs	r3, r2
 800a978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <LL_RCC_SetI2CClockSource>:
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a994:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	091b      	lsrs	r3, r3, #4
 800a99c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	401a      	ands	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	011b      	lsls	r3, r3, #4
 800a9a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800a9ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a9b6:	bf00      	nop
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <LL_RCC_SetLPTIMClockSource>:
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a9ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	0c1b      	lsrs	r3, r3, #16
 800a9d6:	041b      	lsls	r3, r3, #16
 800a9d8:	43db      	mvns	r3, r3
 800a9da:	401a      	ands	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	041b      	lsls	r3, r3, #16
 800a9e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a9ea:	bf00      	nop
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <LL_RCC_SetSAIClockSource>:
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a9fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aa0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <LL_RCC_SetRNGClockSource>:
{
 800aa22:	b480      	push	{r7}
 800aa24:	b083      	sub	sp, #12
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800aa2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800aa36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <LL_RCC_SetCLK48ClockSource>:
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800aa56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aa62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800aa6e:	bf00      	nop
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <LL_RCC_SetUSBClockSource>:
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff ffe3 	bl	800aa4e <LL_RCC_SetCLK48ClockSource>
}
 800aa88:	bf00      	nop
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <LL_RCC_SetADCClockSource>:
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800aa98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaa0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800aaa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <LL_RCC_SetRTCClockSource>:
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800aac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aacc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <LL_RCC_GetRTCClockSource>:
{
 800aae8:	b480      	push	{r7}
 800aaea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800aaec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <LL_RCC_ForceBackupDomainReset>:
{
 800ab02:	b480      	push	{r7}
 800ab04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ab06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab1a:	bf00      	nop
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <LL_RCC_ReleaseBackupDomainReset>:
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ab28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ab3c:	bf00      	nop
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <LL_RCC_PLLSAI1_Enable>:
{
 800ab46:	b480      	push	{r7}
 800ab48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ab4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ab58:	6013      	str	r3, [r2, #0]
}
 800ab5a:	bf00      	nop
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <LL_RCC_PLLSAI1_Disable>:
{
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ab68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab76:	6013      	str	r3, [r2, #0]
}
 800ab78:	bf00      	nop
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <LL_RCC_PLLSAI1_IsReady>:
{
 800ab82:	b480      	push	{r7}
 800ab84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ab86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab94:	d101      	bne.n	800ab9a <LL_RCC_PLLSAI1_IsReady+0x18>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e000      	b.n	800ab9c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b088      	sub	sp, #32
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800abae:	2300      	movs	r3, #0
 800abb0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800abb2:	2300      	movs	r3, #0
 800abb4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d034      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800abca:	d021      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800abcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800abd0:	d81b      	bhi.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800abd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800abd6:	d01d      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800abd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800abdc:	d815      	bhi.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00b      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x54>
 800abe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800abe6:	d110      	bne.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800abe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800abf6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800abf8:	e00d      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f947 	bl	800ae92 <RCCEx_PLLSAI1_ConfigNP>
 800ac04:	4603      	mov	r3, r0
 800ac06:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac08:	e005      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	77fb      	strb	r3, [r7, #31]
        break;
 800ac0e:	e002      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ac10:	bf00      	nop
 800ac12:	e000      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ac14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac16:	7ffb      	ldrb	r3, [r7, #31]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff fee8 	bl	800a9f6 <LL_RCC_SetSAIClockSource>
 800ac26:	e001      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac28:	7ffb      	ldrb	r3, [r7, #31]
 800ac2a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d046      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800ac38:	f7ff ff56 	bl	800aae8 <LL_RCC_GetRTCClockSource>
 800ac3c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d03c      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ac48:	f7fe fc68 	bl	800951c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d105      	bne.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff ff30 	bl	800aabc <LL_RCC_SetRTCClockSource>
 800ac5c:	e02e      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ac5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac66:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ac68:	f7ff ff4b 	bl	800ab02 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ac6c:	f7ff ff5a 	bl	800ab24 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800ac7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800ac88:	f7ff fdf0 	bl	800a86c <LL_RCC_LSE_IsEnabled>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d114      	bne.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac92:	f7fc fbbd 	bl	8007410 <HAL_GetTick>
 800ac96:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ac98:	e00b      	b.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac9a:	f7fc fbb9 	bl	8007410 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d902      	bls.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	77fb      	strb	r3, [r7, #31]
              break;
 800acb0:	e004      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800acb2:	f7ff fded 	bl	800a890 <LL_RCC_LSE_IsReady>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d1ee      	bne.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800acbc:	7ffb      	ldrb	r3, [r7, #31]
 800acbe:	77bb      	strb	r3, [r7, #30]
 800acc0:	e001      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc2:	7ffb      	ldrb	r3, [r7, #31]
 800acc4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff fe2a 	bl	800a930 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	69db      	ldr	r3, [r3, #28]
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff fe35 	bl	800a95c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 0310 	and.w	r3, r3, #16
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d004      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fe5d 	bl	800a9c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fe52 	bl	800a9c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0304 	and.w	r3, r3, #4
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff fe2a 	bl	800a988 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0308 	and.w	r3, r3, #8
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff fe1f 	bl	800a988 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d022      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fe8d 	bl	800aa7a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad68:	d107      	bne.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800ad6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad78:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad82:	d10b      	bne.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f8dd 	bl	800af48 <RCCEx_PLLSAI1_ConfigNQ>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ad92:	7ffb      	ldrb	r3, [r7, #31]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800ad98:	7ffb      	ldrb	r3, [r7, #31]
 800ad9a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d02b      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adb0:	d008      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adba:	d003      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d105      	bne.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fe2a 	bl	800aa22 <LL_RCC_SetRNGClockSource>
 800adce:	e00a      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	2000      	movs	r0, #0
 800addc:	f7ff fe21 	bl	800aa22 <LL_RCC_SetRNGClockSource>
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff fe34 	bl	800aa4e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800adee:	d107      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800adf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800adfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d022      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fe3d 	bl	800aa90 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae1e:	d107      	bne.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ae20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae2e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae38:	d10b      	bne.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f8dd 	bl	800affe <RCCEx_PLLSAI1_ConfigNR>
 800ae44:	4603      	mov	r3, r0
 800ae46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ae48:	7ffb      	ldrb	r3, [r7, #31]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ae4e:	7ffb      	ldrb	r3, [r7, #31]
 800ae50:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d004      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff fd26 	bl	800a8b4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d009      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fd45 	bl	800a908 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff fd2c 	bl	800a8e0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ae88:	7fbb      	ldrb	r3, [r7, #30]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ae9e:	f7ff fe61 	bl	800ab64 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aea2:	f7fc fab5 	bl	8007410 <HAL_GetTick>
 800aea6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aea8:	e009      	b.n	800aebe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aeaa:	f7fc fab1 	bl	8007410 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d902      	bls.n	800aebe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	73fb      	strb	r3, [r7, #15]
      break;
 800aebc:	e004      	b.n	800aec8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aebe:	f7ff fe60 	bl	800ab82 <LL_RCC_PLLSAI1_IsReady>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1f0      	bne.n	800aeaa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d137      	bne.n	800af3e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800aece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aee2:	4313      	orrs	r3, r2
 800aee4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800aee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aef8:	4313      	orrs	r3, r2
 800aefa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800aefc:	f7ff fe23 	bl	800ab46 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af00:	f7fc fa86 	bl	8007410 <HAL_GetTick>
 800af04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800af06:	e009      	b.n	800af1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af08:	f7fc fa82 	bl	8007410 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d902      	bls.n	800af1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	73fb      	strb	r3, [r7, #15]
        break;
 800af1a:	e004      	b.n	800af26 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800af1c:	f7ff fe31 	bl	800ab82 <LL_RCC_PLLSAI1_IsReady>
 800af20:	4603      	mov	r3, r0
 800af22:	2b01      	cmp	r3, #1
 800af24:	d1f0      	bne.n	800af08 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d108      	bne.n	800af3e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800af2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af30:	691a      	ldr	r2, [r3, #16]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af3a:	4313      	orrs	r3, r2
 800af3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800af54:	f7ff fe06 	bl	800ab64 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800af58:	f7fc fa5a 	bl	8007410 <HAL_GetTick>
 800af5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800af5e:	e009      	b.n	800af74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af60:	f7fc fa56 	bl	8007410 <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d902      	bls.n	800af74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	73fb      	strb	r3, [r7, #15]
      break;
 800af72:	e004      	b.n	800af7e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800af74:	f7ff fe05 	bl	800ab82 <LL_RCC_PLLSAI1_IsReady>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f0      	bne.n	800af60 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d137      	bne.n	800aff4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800af84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800af98:	4313      	orrs	r3, r2
 800af9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800af9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800afae:	4313      	orrs	r3, r2
 800afb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800afb2:	f7ff fdc8 	bl	800ab46 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afb6:	f7fc fa2b 	bl	8007410 <HAL_GetTick>
 800afba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800afbc:	e009      	b.n	800afd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800afbe:	f7fc fa27 	bl	8007410 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d902      	bls.n	800afd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	73fb      	strb	r3, [r7, #15]
        break;
 800afd0:	e004      	b.n	800afdc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800afd2:	f7ff fdd6 	bl	800ab82 <LL_RCC_PLLSAI1_IsReady>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d1f0      	bne.n	800afbe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d108      	bne.n	800aff4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800afe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afe6:	691a      	ldr	r2, [r3, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aff0:	4313      	orrs	r3, r2
 800aff2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b00a:	f7ff fdab 	bl	800ab64 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b00e:	f7fc f9ff 	bl	8007410 <HAL_GetTick>
 800b012:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b014:	e009      	b.n	800b02a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b016:	f7fc f9fb 	bl	8007410 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d902      	bls.n	800b02a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	73fb      	strb	r3, [r7, #15]
      break;
 800b028:	e004      	b.n	800b034 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b02a:	f7ff fdaa 	bl	800ab82 <LL_RCC_PLLSAI1_IsReady>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f0      	bne.n	800b016 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d137      	bne.n	800b0aa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800b03a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	021b      	lsls	r3, r3, #8
 800b04a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b04e:	4313      	orrs	r3, r2
 800b050:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800b052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b064:	4313      	orrs	r3, r2
 800b066:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800b068:	f7ff fd6d 	bl	800ab46 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b06c:	f7fc f9d0 	bl	8007410 <HAL_GetTick>
 800b070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b072:	e009      	b.n	800b088 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b074:	f7fc f9cc 	bl	8007410 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d902      	bls.n	800b088 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	73fb      	strb	r3, [r7, #15]
        break;
 800b086:	e004      	b.n	800b092 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800b088:	f7ff fd7b 	bl	800ab82 <LL_RCC_PLLSAI1_IsReady>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d1f0      	bne.n	800b074 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d108      	bne.n	800b0aa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800b098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b09c:	691a      	ldr	r2, [r3, #16]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e09f      	b.n	800b206 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fb f8fa 	bl	80062d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b0e8:	4b49      	ldr	r3, [pc, #292]	@ (800b210 <HAL_RTC_Init+0x15c>)
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	f003 0310 	and.w	r3, r3, #16
 800b0f0:	2b10      	cmp	r3, #16
 800b0f2:	d07e      	beq.n	800b1f2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	22ca      	movs	r2, #202	@ 0xca
 800b0fa:	625a      	str	r2, [r3, #36]	@ 0x24
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2253      	movs	r2, #83	@ 0x53
 800b102:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f8ab 	bl	800b260 <RTC_EnterInitMode>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00a      	beq.n	800b126 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	22ff      	movs	r2, #255	@ 0xff
 800b116:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2204      	movs	r2, #4
 800b11c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
 800b124:	e067      	b.n	800b1f6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	6812      	ldr	r2, [r2, #0]
 800b130:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b138:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	6899      	ldr	r1, [r3, #8]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	431a      	orrs	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	431a      	orrs	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	430a      	orrs	r2, r1
 800b156:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	68d2      	ldr	r2, [r2, #12]
 800b160:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6919      	ldr	r1, [r3, #16]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	041a      	lsls	r2, r3, #16
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	430a      	orrs	r2, r1
 800b174:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b184:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0203 	bic.w	r2, r2, #3
 800b194:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	69da      	ldr	r2, [r3, #28]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f003 0320 	and.w	r3, r3, #32
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d113      	bne.n	800b1e4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f829 	bl	800b214 <HAL_RTC_WaitForSynchro>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00d      	beq.n	800b1e4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	22ff      	movs	r2, #255	@ 0xff
 800b1ce:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2204      	movs	r2, #4
 800b1d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e010      	b.n	800b206 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	22ff      	movs	r2, #255	@ 0xff
 800b1ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
 800b1f0:	e001      	b.n	800b1f6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	40002800 	.word	0x40002800

0800b214 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800b22a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b22c:	f7fc f8f0 	bl	8007410 <HAL_GetTick>
 800b230:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b232:	e009      	b.n	800b248 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b234:	f7fc f8ec 	bl	8007410 <HAL_GetTick>
 800b238:	4602      	mov	r2, r0
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b242:	d901      	bls.n	800b248 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e007      	b.n	800b258 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0ee      	beq.n	800b234 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d119      	bne.n	800b2aa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295
 800b27e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b280:	f7fc f8c6 	bl	8007410 <HAL_GetTick>
 800b284:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b286:	e009      	b.n	800b29c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b288:	f7fc f8c2 	bl	8007410 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b296:	d901      	bls.n	800b29c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e007      	b.n	800b2ac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0ee      	beq.n	800b288 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e089      	b.n	800b3e2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	22ca      	movs	r2, #202	@ 0xca
 800b2e4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2253      	movs	r2, #83	@ 0x53
 800b2ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d020      	beq.n	800b33e <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800b2fc:	f7fc f888 	bl	8007410 <HAL_GetTick>
 800b300:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800b302:	e015      	b.n	800b330 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b304:	f7fc f884 	bl	8007410 <HAL_GetTick>
 800b308:	4602      	mov	r2, r0
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b312:	d90d      	bls.n	800b330 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	22ff      	movs	r2, #255	@ 0xff
 800b31a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2203      	movs	r2, #3
 800b320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e058      	b.n	800b3e2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f003 0304 	and.w	r3, r3, #4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1e2      	bne.n	800b304 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689a      	ldr	r2, [r3, #8]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b34c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800b34e:	f7fc f85f 	bl	8007410 <HAL_GetTick>
 800b352:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b354:	e015      	b.n	800b382 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b356:	f7fc f85b 	bl	8007410 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b364:	d90d      	bls.n	800b382 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	22ff      	movs	r2, #255	@ 0xff
 800b36c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2203      	movs	r2, #3
 800b372:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800b37e:	2303      	movs	r3, #3
 800b380:	e02f      	b.n	800b3e2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0e2      	beq.n	800b356 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f022 0207 	bic.w	r2, r2, #7
 800b39e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6899      	ldr	r1, [r3, #8]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689a      	ldr	r2, [r3, #8]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	22ff      	movs	r2, #255	@ 0xff
 800b3ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e049      	b.n	800b490 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d106      	bne.n	800b416 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7fa ff8d 	bl	8006330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3304      	adds	r3, #4
 800b426:	4619      	mov	r1, r3
 800b428:	4610      	mov	r0, r2
 800b42a:	f000 fdc3 	bl	800bfb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d001      	beq.n	800b4b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e02e      	b.n	800b50e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a17      	ldr	r2, [pc, #92]	@ (800b51c <HAL_TIM_Base_Start+0x84>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d004      	beq.n	800b4cc <HAL_TIM_Base_Start+0x34>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ca:	d115      	bne.n	800b4f8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	4b13      	ldr	r3, [pc, #76]	@ (800b520 <HAL_TIM_Base_Start+0x88>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b06      	cmp	r3, #6
 800b4dc:	d015      	beq.n	800b50a <HAL_TIM_Base_Start+0x72>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4e4:	d011      	beq.n	800b50a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f042 0201 	orr.w	r2, r2, #1
 800b4f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f6:	e008      	b.n	800b50a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f042 0201 	orr.w	r2, r2, #1
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	e000      	b.n	800b50c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b50a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3714      	adds	r7, #20
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	40012c00 	.word	0x40012c00
 800b520:	00010007 	.word	0x00010007

0800b524 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6a1a      	ldr	r2, [r3, #32]
 800b532:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b536:	4013      	ands	r3, r2
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10f      	bne.n	800b55c <HAL_TIM_Base_Stop+0x38>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6a1a      	ldr	r2, [r3, #32]
 800b542:	f240 4344 	movw	r3, #1092	@ 0x444
 800b546:	4013      	ands	r3, r2
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d107      	bne.n	800b55c <HAL_TIM_Base_Stop+0x38>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f022 0201 	bic.w	r2, r2, #1
 800b55a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
	...

0800b574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b01      	cmp	r3, #1
 800b586:	d001      	beq.n	800b58c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e036      	b.n	800b5fa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a17      	ldr	r2, [pc, #92]	@ (800b608 <HAL_TIM_Base_Start_IT+0x94>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d004      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x44>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5b6:	d115      	bne.n	800b5e4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	689a      	ldr	r2, [r3, #8]
 800b5be:	4b13      	ldr	r3, [pc, #76]	@ (800b60c <HAL_TIM_Base_Start_IT+0x98>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b06      	cmp	r3, #6
 800b5c8:	d015      	beq.n	800b5f6 <HAL_TIM_Base_Start_IT+0x82>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5d0:	d011      	beq.n	800b5f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f042 0201 	orr.w	r2, r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5e2:	e008      	b.n	800b5f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0201 	orr.w	r2, r2, #1
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	e000      	b.n	800b5f8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	40012c00 	.word	0x40012c00
 800b60c:	00010007 	.word	0x00010007

0800b610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e049      	b.n	800b6b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fa feaa 	bl	8006390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f000 fcb0 	bl	800bfb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <HAL_TIM_PWM_Start+0x24>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	bf14      	ite	ne
 800b6dc:	2301      	movne	r3, #1
 800b6de:	2300      	moveq	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	e03c      	b.n	800b75e <HAL_TIM_PWM_Start+0x9e>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d109      	bne.n	800b6fe <HAL_TIM_PWM_Start+0x3e>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	bf14      	ite	ne
 800b6f6:	2301      	movne	r3, #1
 800b6f8:	2300      	moveq	r3, #0
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	e02f      	b.n	800b75e <HAL_TIM_PWM_Start+0x9e>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b08      	cmp	r3, #8
 800b702:	d109      	bne.n	800b718 <HAL_TIM_PWM_Start+0x58>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	bf14      	ite	ne
 800b710:	2301      	movne	r3, #1
 800b712:	2300      	moveq	r3, #0
 800b714:	b2db      	uxtb	r3, r3
 800b716:	e022      	b.n	800b75e <HAL_TIM_PWM_Start+0x9e>
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	2b0c      	cmp	r3, #12
 800b71c:	d109      	bne.n	800b732 <HAL_TIM_PWM_Start+0x72>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b01      	cmp	r3, #1
 800b728:	bf14      	ite	ne
 800b72a:	2301      	movne	r3, #1
 800b72c:	2300      	moveq	r3, #0
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	e015      	b.n	800b75e <HAL_TIM_PWM_Start+0x9e>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b10      	cmp	r3, #16
 800b736:	d109      	bne.n	800b74c <HAL_TIM_PWM_Start+0x8c>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	2b01      	cmp	r3, #1
 800b742:	bf14      	ite	ne
 800b744:	2301      	movne	r3, #1
 800b746:	2300      	moveq	r3, #0
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	e008      	b.n	800b75e <HAL_TIM_PWM_Start+0x9e>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b01      	cmp	r3, #1
 800b756:	bf14      	ite	ne
 800b758:	2301      	movne	r3, #1
 800b75a:	2300      	moveq	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e079      	b.n	800b85a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d104      	bne.n	800b776 <HAL_TIM_PWM_Start+0xb6>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b774:	e023      	b.n	800b7be <HAL_TIM_PWM_Start+0xfe>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b04      	cmp	r3, #4
 800b77a:	d104      	bne.n	800b786 <HAL_TIM_PWM_Start+0xc6>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b784:	e01b      	b.n	800b7be <HAL_TIM_PWM_Start+0xfe>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d104      	bne.n	800b796 <HAL_TIM_PWM_Start+0xd6>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b794:	e013      	b.n	800b7be <HAL_TIM_PWM_Start+0xfe>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b0c      	cmp	r3, #12
 800b79a:	d104      	bne.n	800b7a6 <HAL_TIM_PWM_Start+0xe6>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7a4:	e00b      	b.n	800b7be <HAL_TIM_PWM_Start+0xfe>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b10      	cmp	r3, #16
 800b7aa:	d104      	bne.n	800b7b6 <HAL_TIM_PWM_Start+0xf6>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7b4:	e003      	b.n	800b7be <HAL_TIM_PWM_Start+0xfe>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 ff7e 	bl	800c6c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a24      	ldr	r2, [pc, #144]	@ (800b864 <HAL_TIM_PWM_Start+0x1a4>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d009      	beq.n	800b7ea <HAL_TIM_PWM_Start+0x12a>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a23      	ldr	r2, [pc, #140]	@ (800b868 <HAL_TIM_PWM_Start+0x1a8>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d004      	beq.n	800b7ea <HAL_TIM_PWM_Start+0x12a>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a21      	ldr	r2, [pc, #132]	@ (800b86c <HAL_TIM_PWM_Start+0x1ac>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d101      	bne.n	800b7ee <HAL_TIM_PWM_Start+0x12e>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e000      	b.n	800b7f0 <HAL_TIM_PWM_Start+0x130>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d007      	beq.n	800b804 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b802:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a16      	ldr	r2, [pc, #88]	@ (800b864 <HAL_TIM_PWM_Start+0x1a4>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d004      	beq.n	800b818 <HAL_TIM_PWM_Start+0x158>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b816:	d115      	bne.n	800b844 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	4b14      	ldr	r3, [pc, #80]	@ (800b870 <HAL_TIM_PWM_Start+0x1b0>)
 800b820:	4013      	ands	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b06      	cmp	r3, #6
 800b828:	d015      	beq.n	800b856 <HAL_TIM_PWM_Start+0x196>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b830:	d011      	beq.n	800b856 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f042 0201 	orr.w	r2, r2, #1
 800b840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b842:	e008      	b.n	800b856 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f042 0201 	orr.w	r2, r2, #1
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	e000      	b.n	800b858 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	40012c00 	.word	0x40012c00
 800b868:	40014400 	.word	0x40014400
 800b86c:	40014800 	.word	0x40014800
 800b870:	00010007 	.word	0x00010007

0800b874 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2200      	movs	r2, #0
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	4618      	mov	r0, r3
 800b888:	f000 ff1e 	bl	800c6c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a39      	ldr	r2, [pc, #228]	@ (800b978 <HAL_TIM_PWM_Stop+0x104>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d009      	beq.n	800b8aa <HAL_TIM_PWM_Stop+0x36>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a38      	ldr	r2, [pc, #224]	@ (800b97c <HAL_TIM_PWM_Stop+0x108>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d004      	beq.n	800b8aa <HAL_TIM_PWM_Stop+0x36>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a36      	ldr	r2, [pc, #216]	@ (800b980 <HAL_TIM_PWM_Stop+0x10c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d101      	bne.n	800b8ae <HAL_TIM_PWM_Stop+0x3a>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <HAL_TIM_PWM_Stop+0x3c>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d017      	beq.n	800b8e4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6a1a      	ldr	r2, [r3, #32]
 800b8ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b8be:	4013      	ands	r3, r2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10f      	bne.n	800b8e4 <HAL_TIM_PWM_Stop+0x70>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6a1a      	ldr	r2, [r3, #32]
 800b8ca:	f240 4344 	movw	r3, #1092	@ 0x444
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d107      	bne.n	800b8e4 <HAL_TIM_PWM_Stop+0x70>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b8e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6a1a      	ldr	r2, [r3, #32]
 800b8ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10f      	bne.n	800b914 <HAL_TIM_PWM_Stop+0xa0>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6a1a      	ldr	r2, [r3, #32]
 800b8fa:	f240 4344 	movw	r3, #1092	@ 0x444
 800b8fe:	4013      	ands	r3, r2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d107      	bne.n	800b914 <HAL_TIM_PWM_Stop+0xa0>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0201 	bic.w	r2, r2, #1
 800b912:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d104      	bne.n	800b924 <HAL_TIM_PWM_Stop+0xb0>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b922:	e023      	b.n	800b96c <HAL_TIM_PWM_Stop+0xf8>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b04      	cmp	r3, #4
 800b928:	d104      	bne.n	800b934 <HAL_TIM_PWM_Stop+0xc0>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b932:	e01b      	b.n	800b96c <HAL_TIM_PWM_Stop+0xf8>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b08      	cmp	r3, #8
 800b938:	d104      	bne.n	800b944 <HAL_TIM_PWM_Stop+0xd0>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b942:	e013      	b.n	800b96c <HAL_TIM_PWM_Stop+0xf8>
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2b0c      	cmp	r3, #12
 800b948:	d104      	bne.n	800b954 <HAL_TIM_PWM_Stop+0xe0>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b952:	e00b      	b.n	800b96c <HAL_TIM_PWM_Stop+0xf8>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2b10      	cmp	r3, #16
 800b958:	d104      	bne.n	800b964 <HAL_TIM_PWM_Stop+0xf0>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b962:	e003      	b.n	800b96c <HAL_TIM_PWM_Stop+0xf8>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	40012c00 	.word	0x40012c00
 800b97c:	40014400 	.word	0x40014400
 800b980:	40014800 	.word	0x40014800

0800b984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d020      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01b      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f06f 0202 	mvn.w	r2, #2
 800b9b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fad1 	bl	800bf76 <HAL_TIM_IC_CaptureCallback>
 800b9d4:	e005      	b.n	800b9e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fac3 	bl	800bf62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fad4 	bl	800bf8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d020      	beq.n	800ba34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f003 0304 	and.w	r3, r3, #4
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d01b      	beq.n	800ba34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f06f 0204 	mvn.w	r2, #4
 800ba04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2202      	movs	r2, #2
 800ba0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 faab 	bl	800bf76 <HAL_TIM_IC_CaptureCallback>
 800ba20:	e005      	b.n	800ba2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fa9d 	bl	800bf62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 faae 	bl	800bf8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f003 0308 	and.w	r3, r3, #8
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d020      	beq.n	800ba80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f003 0308 	and.w	r3, r3, #8
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01b      	beq.n	800ba80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f06f 0208 	mvn.w	r2, #8
 800ba50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2204      	movs	r2, #4
 800ba56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	f003 0303 	and.w	r3, r3, #3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fa85 	bl	800bf76 <HAL_TIM_IC_CaptureCallback>
 800ba6c:	e005      	b.n	800ba7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fa77 	bl	800bf62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fa88 	bl	800bf8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f003 0310 	and.w	r3, r3, #16
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d020      	beq.n	800bacc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f003 0310 	and.w	r3, r3, #16
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01b      	beq.n	800bacc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f06f 0210 	mvn.w	r2, #16
 800ba9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2208      	movs	r2, #8
 800baa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fa5f 	bl	800bf76 <HAL_TIM_IC_CaptureCallback>
 800bab8:	e005      	b.n	800bac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fa51 	bl	800bf62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fa62 	bl	800bf8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00c      	beq.n	800baf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	2b00      	cmp	r3, #0
 800bade:	d007      	beq.n	800baf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0201 	mvn.w	r2, #1
 800bae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa2f 	bl	800bf4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d104      	bne.n	800bb04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00c      	beq.n	800bb1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d007      	beq.n	800bb1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bb16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fefd 	bl	800c918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00c      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d007      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bb3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fef5 	bl	800c92c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00c      	beq.n	800bb66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d007      	beq.n	800bb66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fa1c 	bl	800bf9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f003 0320 	and.w	r3, r3, #32
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00c      	beq.n	800bb8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d007      	beq.n	800bb8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f06f 0220 	mvn.w	r2, #32
 800bb82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 febd 	bl	800c904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb8a:	bf00      	nop
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d101      	bne.n	800bbb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e0ff      	b.n	800bdb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b14      	cmp	r3, #20
 800bbbe:	f200 80f0 	bhi.w	800bda2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bbc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc8:	0800bc1d 	.word	0x0800bc1d
 800bbcc:	0800bda3 	.word	0x0800bda3
 800bbd0:	0800bda3 	.word	0x0800bda3
 800bbd4:	0800bda3 	.word	0x0800bda3
 800bbd8:	0800bc5d 	.word	0x0800bc5d
 800bbdc:	0800bda3 	.word	0x0800bda3
 800bbe0:	0800bda3 	.word	0x0800bda3
 800bbe4:	0800bda3 	.word	0x0800bda3
 800bbe8:	0800bc9f 	.word	0x0800bc9f
 800bbec:	0800bda3 	.word	0x0800bda3
 800bbf0:	0800bda3 	.word	0x0800bda3
 800bbf4:	0800bda3 	.word	0x0800bda3
 800bbf8:	0800bcdf 	.word	0x0800bcdf
 800bbfc:	0800bda3 	.word	0x0800bda3
 800bc00:	0800bda3 	.word	0x0800bda3
 800bc04:	0800bda3 	.word	0x0800bda3
 800bc08:	0800bd21 	.word	0x0800bd21
 800bc0c:	0800bda3 	.word	0x0800bda3
 800bc10:	0800bda3 	.word	0x0800bda3
 800bc14:	0800bda3 	.word	0x0800bda3
 800bc18:	0800bd61 	.word	0x0800bd61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68b9      	ldr	r1, [r7, #8]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fa36 	bl	800c094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	699a      	ldr	r2, [r3, #24]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f042 0208 	orr.w	r2, r2, #8
 800bc36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	699a      	ldr	r2, [r3, #24]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f022 0204 	bic.w	r2, r2, #4
 800bc46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6999      	ldr	r1, [r3, #24]
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	691a      	ldr	r2, [r3, #16]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	619a      	str	r2, [r3, #24]
      break;
 800bc5a:	e0a5      	b.n	800bda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fa92 	bl	800c18c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699a      	ldr	r2, [r3, #24]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6999      	ldr	r1, [r3, #24]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	021a      	lsls	r2, r3, #8
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	619a      	str	r2, [r3, #24]
      break;
 800bc9c:	e084      	b.n	800bda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 faeb 	bl	800c280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69da      	ldr	r2, [r3, #28]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f042 0208 	orr.w	r2, r2, #8
 800bcb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69da      	ldr	r2, [r3, #28]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0204 	bic.w	r2, r2, #4
 800bcc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69d9      	ldr	r1, [r3, #28]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	691a      	ldr	r2, [r3, #16]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	61da      	str	r2, [r3, #28]
      break;
 800bcdc:	e064      	b.n	800bda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68b9      	ldr	r1, [r7, #8]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fb43 	bl	800c370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69da      	ldr	r2, [r3, #28]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69da      	ldr	r2, [r3, #28]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69d9      	ldr	r1, [r3, #28]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	021a      	lsls	r2, r3, #8
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	430a      	orrs	r2, r1
 800bd1c:	61da      	str	r2, [r3, #28]
      break;
 800bd1e:	e043      	b.n	800bda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68b9      	ldr	r1, [r7, #8]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fb80 	bl	800c42c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f042 0208 	orr.w	r2, r2, #8
 800bd3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0204 	bic.w	r2, r2, #4
 800bd4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	691a      	ldr	r2, [r3, #16]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bd5e:	e023      	b.n	800bda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68b9      	ldr	r1, [r7, #8]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 fbb8 	bl	800c4dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	021a      	lsls	r2, r3, #8
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bda0:	e002      	b.n	800bda8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	75fb      	strb	r3, [r7, #23]
      break;
 800bda6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop

0800bdbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d101      	bne.n	800bdd8 <HAL_TIM_ConfigClockSource+0x1c>
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	e0b6      	b.n	800bf46 <HAL_TIM_ConfigClockSource+0x18a>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2202      	movs	r2, #2
 800bde4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bdf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bdfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be14:	d03e      	beq.n	800be94 <HAL_TIM_ConfigClockSource+0xd8>
 800be16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be1a:	f200 8087 	bhi.w	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be22:	f000 8086 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x176>
 800be26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2a:	d87f      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be2c:	2b70      	cmp	r3, #112	@ 0x70
 800be2e:	d01a      	beq.n	800be66 <HAL_TIM_ConfigClockSource+0xaa>
 800be30:	2b70      	cmp	r3, #112	@ 0x70
 800be32:	d87b      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be34:	2b60      	cmp	r3, #96	@ 0x60
 800be36:	d050      	beq.n	800beda <HAL_TIM_ConfigClockSource+0x11e>
 800be38:	2b60      	cmp	r3, #96	@ 0x60
 800be3a:	d877      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be3c:	2b50      	cmp	r3, #80	@ 0x50
 800be3e:	d03c      	beq.n	800beba <HAL_TIM_ConfigClockSource+0xfe>
 800be40:	2b50      	cmp	r3, #80	@ 0x50
 800be42:	d873      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be44:	2b40      	cmp	r3, #64	@ 0x40
 800be46:	d058      	beq.n	800befa <HAL_TIM_ConfigClockSource+0x13e>
 800be48:	2b40      	cmp	r3, #64	@ 0x40
 800be4a:	d86f      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be4c:	2b30      	cmp	r3, #48	@ 0x30
 800be4e:	d064      	beq.n	800bf1a <HAL_TIM_ConfigClockSource+0x15e>
 800be50:	2b30      	cmp	r3, #48	@ 0x30
 800be52:	d86b      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be54:	2b20      	cmp	r3, #32
 800be56:	d060      	beq.n	800bf1a <HAL_TIM_ConfigClockSource+0x15e>
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d867      	bhi.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d05c      	beq.n	800bf1a <HAL_TIM_ConfigClockSource+0x15e>
 800be60:	2b10      	cmp	r3, #16
 800be62:	d05a      	beq.n	800bf1a <HAL_TIM_ConfigClockSource+0x15e>
 800be64:	e062      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be76:	f000 fc07 	bl	800c688 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	609a      	str	r2, [r3, #8]
      break;
 800be92:	e04f      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bea4:	f000 fbf0 	bl	800c688 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800beb6:	609a      	str	r2, [r3, #8]
      break;
 800beb8:	e03c      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bec6:	461a      	mov	r2, r3
 800bec8:	f000 fb62 	bl	800c590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2150      	movs	r1, #80	@ 0x50
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 fbbb 	bl	800c64e <TIM_ITRx_SetConfig>
      break;
 800bed8:	e02c      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bee6:	461a      	mov	r2, r3
 800bee8:	f000 fb81 	bl	800c5ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2160      	movs	r1, #96	@ 0x60
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 fbab 	bl	800c64e <TIM_ITRx_SetConfig>
      break;
 800bef8:	e01c      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf06:	461a      	mov	r2, r3
 800bf08:	f000 fb42 	bl	800c590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2140      	movs	r1, #64	@ 0x40
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fb9b 	bl	800c64e <TIM_ITRx_SetConfig>
      break;
 800bf18:	e00c      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4619      	mov	r1, r3
 800bf24:	4610      	mov	r0, r2
 800bf26:	f000 fb92 	bl	800c64e <TIM_ITRx_SetConfig>
      break;
 800bf2a:	e003      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf30:	e000      	b.n	800bf34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bf32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf4e:	b480      	push	{r7}
 800bf50:	b083      	sub	sp, #12
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b083      	sub	sp, #12
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf6a:	bf00      	nop
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf7e:	bf00      	nop
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf92:	bf00      	nop
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b083      	sub	sp, #12
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfa6:	bf00      	nop
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
	...

0800bfb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a30      	ldr	r2, [pc, #192]	@ (800c088 <TIM_Base_SetConfig+0xd4>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d003      	beq.n	800bfd4 <TIM_Base_SetConfig+0x20>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfd2:	d108      	bne.n	800bfe6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a27      	ldr	r2, [pc, #156]	@ (800c088 <TIM_Base_SetConfig+0xd4>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d00b      	beq.n	800c006 <TIM_Base_SetConfig+0x52>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bff4:	d007      	beq.n	800c006 <TIM_Base_SetConfig+0x52>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a24      	ldr	r2, [pc, #144]	@ (800c08c <TIM_Base_SetConfig+0xd8>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d003      	beq.n	800c006 <TIM_Base_SetConfig+0x52>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4a23      	ldr	r2, [pc, #140]	@ (800c090 <TIM_Base_SetConfig+0xdc>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d108      	bne.n	800c018 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c00c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4313      	orrs	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a12      	ldr	r2, [pc, #72]	@ (800c088 <TIM_Base_SetConfig+0xd4>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d007      	beq.n	800c054 <TIM_Base_SetConfig+0xa0>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a11      	ldr	r2, [pc, #68]	@ (800c08c <TIM_Base_SetConfig+0xd8>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d003      	beq.n	800c054 <TIM_Base_SetConfig+0xa0>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a10      	ldr	r2, [pc, #64]	@ (800c090 <TIM_Base_SetConfig+0xdc>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d103      	bne.n	800c05c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	f003 0301 	and.w	r3, r3, #1
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d105      	bne.n	800c07a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	f023 0201 	bic.w	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	611a      	str	r2, [r3, #16]
  }
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	40012c00 	.word	0x40012c00
 800c08c:	40014400 	.word	0x40014400
 800c090:	40014800 	.word	0x40014800

0800c094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	f023 0201 	bic.w	r2, r3, #1
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 0303 	bic.w	r3, r3, #3
 800c0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f023 0302 	bic.w	r3, r3, #2
 800c0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a24      	ldr	r2, [pc, #144]	@ (800c180 <TIM_OC1_SetConfig+0xec>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d007      	beq.n	800c104 <TIM_OC1_SetConfig+0x70>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a23      	ldr	r2, [pc, #140]	@ (800c184 <TIM_OC1_SetConfig+0xf0>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d003      	beq.n	800c104 <TIM_OC1_SetConfig+0x70>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a22      	ldr	r2, [pc, #136]	@ (800c188 <TIM_OC1_SetConfig+0xf4>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d10c      	bne.n	800c11e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f023 0308 	bic.w	r3, r3, #8
 800c10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	4313      	orrs	r3, r2
 800c114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f023 0304 	bic.w	r3, r3, #4
 800c11c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a17      	ldr	r2, [pc, #92]	@ (800c180 <TIM_OC1_SetConfig+0xec>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d007      	beq.n	800c136 <TIM_OC1_SetConfig+0xa2>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a17      	ldr	r2, [pc, #92]	@ (800c188 <TIM_OC1_SetConfig+0xf4>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d003      	beq.n	800c136 <TIM_OC1_SetConfig+0xa2>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a14      	ldr	r2, [pc, #80]	@ (800c184 <TIM_OC1_SetConfig+0xf0>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d111      	bne.n	800c15a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	4313      	orrs	r3, r2
 800c158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	621a      	str	r2, [r3, #32]
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	40012c00 	.word	0x40012c00
 800c184:	40014800 	.word	0x40014800
 800c188:	40014400 	.word	0x40014400

0800c18c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	f023 0210 	bic.w	r2, r3, #16
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c1ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f023 0320 	bic.w	r3, r3, #32
 800c1da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	011b      	lsls	r3, r3, #4
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a22      	ldr	r2, [pc, #136]	@ (800c274 <TIM_OC2_SetConfig+0xe8>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d10d      	bne.n	800c20c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	011b      	lsls	r3, r3, #4
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	4313      	orrs	r3, r2
 800c202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c20a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a19      	ldr	r2, [pc, #100]	@ (800c274 <TIM_OC2_SetConfig+0xe8>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d007      	beq.n	800c224 <TIM_OC2_SetConfig+0x98>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a18      	ldr	r2, [pc, #96]	@ (800c278 <TIM_OC2_SetConfig+0xec>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d003      	beq.n	800c224 <TIM_OC2_SetConfig+0x98>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a17      	ldr	r2, [pc, #92]	@ (800c27c <TIM_OC2_SetConfig+0xf0>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d113      	bne.n	800c24c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c22a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	4313      	orrs	r3, r2
 800c24a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	621a      	str	r2, [r3, #32]
}
 800c266:	bf00      	nop
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	40012c00 	.word	0x40012c00
 800c278:	40014400 	.word	0x40014400
 800c27c:	40014800 	.word	0x40014800

0800c280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c280:	b480      	push	{r7}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1b      	ldr	r3, [r3, #32]
 800c28e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0303 	bic.w	r3, r3, #3
 800c2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	021b      	lsls	r3, r3, #8
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a21      	ldr	r2, [pc, #132]	@ (800c364 <TIM_OC3_SetConfig+0xe4>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d10d      	bne.n	800c2fe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c2e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	021b      	lsls	r3, r3, #8
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a18      	ldr	r2, [pc, #96]	@ (800c364 <TIM_OC3_SetConfig+0xe4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d007      	beq.n	800c316 <TIM_OC3_SetConfig+0x96>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a17      	ldr	r2, [pc, #92]	@ (800c368 <TIM_OC3_SetConfig+0xe8>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d003      	beq.n	800c316 <TIM_OC3_SetConfig+0x96>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a16      	ldr	r2, [pc, #88]	@ (800c36c <TIM_OC3_SetConfig+0xec>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d113      	bne.n	800c33e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	011b      	lsls	r3, r3, #4
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	4313      	orrs	r3, r2
 800c330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	699b      	ldr	r3, [r3, #24]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	621a      	str	r2, [r3, #32]
}
 800c358:	bf00      	nop
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	40012c00 	.word	0x40012c00
 800c368:	40014400 	.word	0x40014400
 800c36c:	40014800 	.word	0x40014800

0800c370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c370:	b480      	push	{r7}
 800c372:	b087      	sub	sp, #28
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a1b      	ldr	r3, [r3, #32]
 800c384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c39e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	021b      	lsls	r3, r3, #8
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c3be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	031b      	lsls	r3, r3, #12
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a14      	ldr	r2, [pc, #80]	@ (800c420 <TIM_OC4_SetConfig+0xb0>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d007      	beq.n	800c3e4 <TIM_OC4_SetConfig+0x74>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a13      	ldr	r2, [pc, #76]	@ (800c424 <TIM_OC4_SetConfig+0xb4>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d003      	beq.n	800c3e4 <TIM_OC4_SetConfig+0x74>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a12      	ldr	r2, [pc, #72]	@ (800c428 <TIM_OC4_SetConfig+0xb8>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d109      	bne.n	800c3f8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	019b      	lsls	r3, r3, #6
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	621a      	str	r2, [r3, #32]
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	40012c00 	.word	0x40012c00
 800c424:	40014400 	.word	0x40014400
 800c428:	40014800 	.word	0x40014800

0800c42c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a1b      	ldr	r3, [r3, #32]
 800c440:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c45a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	041b      	lsls	r3, r3, #16
 800c478:	693a      	ldr	r2, [r7, #16]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a13      	ldr	r2, [pc, #76]	@ (800c4d0 <TIM_OC5_SetConfig+0xa4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d007      	beq.n	800c496 <TIM_OC5_SetConfig+0x6a>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a12      	ldr	r2, [pc, #72]	@ (800c4d4 <TIM_OC5_SetConfig+0xa8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d003      	beq.n	800c496 <TIM_OC5_SetConfig+0x6a>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a11      	ldr	r2, [pc, #68]	@ (800c4d8 <TIM_OC5_SetConfig+0xac>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d109      	bne.n	800c4aa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c49c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	021b      	lsls	r3, r3, #8
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	621a      	str	r2, [r3, #32]
}
 800c4c4:	bf00      	nop
 800c4c6:	371c      	adds	r7, #28
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	40012c00 	.word	0x40012c00
 800c4d4:	40014400 	.word	0x40014400
 800c4d8:	40014800 	.word	0x40014800

0800c4dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c50a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	021b      	lsls	r3, r3, #8
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	4313      	orrs	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	051b      	lsls	r3, r3, #20
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a14      	ldr	r2, [pc, #80]	@ (800c584 <TIM_OC6_SetConfig+0xa8>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d007      	beq.n	800c548 <TIM_OC6_SetConfig+0x6c>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a13      	ldr	r2, [pc, #76]	@ (800c588 <TIM_OC6_SetConfig+0xac>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d003      	beq.n	800c548 <TIM_OC6_SetConfig+0x6c>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a12      	ldr	r2, [pc, #72]	@ (800c58c <TIM_OC6_SetConfig+0xb0>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d109      	bne.n	800c55c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c54e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	029b      	lsls	r3, r3, #10
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	4313      	orrs	r3, r2
 800c55a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	693a      	ldr	r2, [r7, #16]
 800c574:	621a      	str	r2, [r3, #32]
}
 800c576:	bf00      	nop
 800c578:	371c      	adds	r7, #28
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	40012c00 	.word	0x40012c00
 800c588:	40014400 	.word	0x40014400
 800c58c:	40014800 	.word	0x40014800

0800c590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6a1b      	ldr	r3, [r3, #32]
 800c5a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6a1b      	ldr	r3, [r3, #32]
 800c5a6:	f023 0201 	bic.w	r2, r3, #1
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c5ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	011b      	lsls	r3, r3, #4
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	f023 030a 	bic.w	r3, r3, #10
 800c5cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	621a      	str	r2, [r3, #32]
}
 800c5e2:	bf00      	nop
 800c5e4:	371c      	adds	r7, #28
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b087      	sub	sp, #28
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	f023 0210 	bic.w	r2, r3, #16
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	031b      	lsls	r3, r3, #12
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	4313      	orrs	r3, r2
 800c622:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c62a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	011b      	lsls	r3, r3, #4
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	4313      	orrs	r3, r2
 800c634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	621a      	str	r2, [r3, #32]
}
 800c642:	bf00      	nop
 800c644:	371c      	adds	r7, #28
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c64e:	b480      	push	{r7}
 800c650:	b085      	sub	sp, #20
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4313      	orrs	r3, r2
 800c670:	f043 0307 	orr.w	r3, r3, #7
 800c674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	609a      	str	r2, [r3, #8]
}
 800c67c:	bf00      	nop
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	021a      	lsls	r2, r3, #8
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	609a      	str	r2, [r3, #8]
}
 800c6bc:	bf00      	nop
 800c6be:	371c      	adds	r7, #28
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	f003 031f 	and.w	r3, r3, #31
 800c6da:	2201      	movs	r2, #1
 800c6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6a1a      	ldr	r2, [r3, #32]
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	43db      	mvns	r3, r3
 800c6ea:	401a      	ands	r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6a1a      	ldr	r2, [r3, #32]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f003 031f 	and.w	r3, r3, #31
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c700:	431a      	orrs	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	621a      	str	r2, [r3, #32]
}
 800c706:	bf00      	nop
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
	...

0800c714 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d109      	bne.n	800c738 <HAL_TIMEx_PWMN_Start+0x24>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	bf14      	ite	ne
 800c730:	2301      	movne	r3, #1
 800c732:	2300      	moveq	r3, #0
 800c734:	b2db      	uxtb	r3, r3
 800c736:	e022      	b.n	800c77e <HAL_TIMEx_PWMN_Start+0x6a>
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	d109      	bne.n	800c752 <HAL_TIMEx_PWMN_Start+0x3e>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b01      	cmp	r3, #1
 800c748:	bf14      	ite	ne
 800c74a:	2301      	movne	r3, #1
 800c74c:	2300      	moveq	r3, #0
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	e015      	b.n	800c77e <HAL_TIMEx_PWMN_Start+0x6a>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b08      	cmp	r3, #8
 800c756:	d109      	bne.n	800c76c <HAL_TIMEx_PWMN_Start+0x58>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b01      	cmp	r3, #1
 800c762:	bf14      	ite	ne
 800c764:	2301      	movne	r3, #1
 800c766:	2300      	moveq	r3, #0
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	e008      	b.n	800c77e <HAL_TIMEx_PWMN_Start+0x6a>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800c772:	b2db      	uxtb	r3, r3
 800c774:	2b01      	cmp	r3, #1
 800c776:	bf14      	ite	ne
 800c778:	2301      	movne	r3, #1
 800c77a:	2300      	moveq	r3, #0
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e055      	b.n	800c832 <HAL_TIMEx_PWMN_Start+0x11e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d104      	bne.n	800c796 <HAL_TIMEx_PWMN_Start+0x82>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c794:	e013      	b.n	800c7be <HAL_TIMEx_PWMN_Start+0xaa>
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b04      	cmp	r3, #4
 800c79a:	d104      	bne.n	800c7a6 <HAL_TIMEx_PWMN_Start+0x92>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7a4:	e00b      	b.n	800c7be <HAL_TIMEx_PWMN_Start+0xaa>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d104      	bne.n	800c7b6 <HAL_TIMEx_PWMN_Start+0xa2>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7b4:	e003      	b.n	800c7be <HAL_TIMEx_PWMN_Start+0xaa>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f8ba 	bl	800c940 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c7da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a16      	ldr	r2, [pc, #88]	@ (800c83c <HAL_TIMEx_PWMN_Start+0x128>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d004      	beq.n	800c7f0 <HAL_TIMEx_PWMN_Start+0xdc>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7ee:	d115      	bne.n	800c81c <HAL_TIMEx_PWMN_Start+0x108>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689a      	ldr	r2, [r3, #8]
 800c7f6:	4b12      	ldr	r3, [pc, #72]	@ (800c840 <HAL_TIMEx_PWMN_Start+0x12c>)
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b06      	cmp	r3, #6
 800c800:	d015      	beq.n	800c82e <HAL_TIMEx_PWMN_Start+0x11a>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c808:	d011      	beq.n	800c82e <HAL_TIMEx_PWMN_Start+0x11a>
    {
      __HAL_TIM_ENABLE(htim);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c81a:	e008      	b.n	800c82e <HAL_TIMEx_PWMN_Start+0x11a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f042 0201 	orr.w	r2, r2, #1
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	e000      	b.n	800c830 <HAL_TIMEx_PWMN_Start+0x11c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c82e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	40012c00 	.word	0x40012c00
 800c840:	00010007 	.word	0x00010007

0800c844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c854:	2b01      	cmp	r3, #1
 800c856:	d101      	bne.n	800c85c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c858:	2302      	movs	r3, #2
 800c85a:	e04a      	b.n	800c8f2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2202      	movs	r2, #2
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a1f      	ldr	r2, [pc, #124]	@ (800c900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d108      	bne.n	800c898 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c88c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	4313      	orrs	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c89e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a12      	ldr	r2, [pc, #72]	@ (800c900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d004      	beq.n	800c8c6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8c4:	d10c      	bne.n	800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	40012c00 	.word	0x40012c00

0800c904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f003 030f 	and.w	r3, r3, #15
 800c952:	2204      	movs	r2, #4
 800c954:	fa02 f303 	lsl.w	r3, r2, r3
 800c958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6a1a      	ldr	r2, [r3, #32]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	43db      	mvns	r3, r3
 800c962:	401a      	ands	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6a1a      	ldr	r2, [r3, #32]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f003 030f 	and.w	r3, r3, #15
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	fa01 f303 	lsl.w	r3, r1, r3
 800c978:	431a      	orrs	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <LL_RCC_GetUSARTClockSource>:
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c996:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4013      	ands	r3, r2
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <LL_RCC_GetLPUARTClockSource>:
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b083      	sub	sp, #12
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c9b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4013      	ands	r3, r2
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d101      	bne.n	800c9dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e042      	b.n	800ca62 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d106      	bne.n	800c9f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f9 fd08 	bl	8006404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2224      	movs	r2, #36	@ 0x24
 800c9f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f022 0201 	bic.w	r2, r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fe41 	bl	800d69c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 fc16 	bl	800d24c <UART_SetConfig>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d101      	bne.n	800ca2a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e01b      	b.n	800ca62 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	689a      	ldr	r2, [r3, #8]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f042 0201 	orr.w	r2, r2, #1
 800ca58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fec0 	bl	800d7e0 <UART_CheckIdleState>
 800ca60:	4603      	mov	r3, r0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b08a      	sub	sp, #40	@ 0x28
 800ca6e:	af02      	add	r7, sp, #8
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	60b9      	str	r1, [r7, #8]
 800ca74:	603b      	str	r3, [r7, #0]
 800ca76:	4613      	mov	r3, r2
 800ca78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca80:	2b20      	cmp	r3, #32
 800ca82:	d17b      	bne.n	800cb7c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <HAL_UART_Transmit+0x26>
 800ca8a:	88fb      	ldrh	r3, [r7, #6]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e074      	b.n	800cb7e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2221      	movs	r2, #33	@ 0x21
 800caa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800caa4:	f7fa fcb4 	bl	8007410 <HAL_GetTick>
 800caa8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	88fa      	ldrh	r2, [r7, #6]
 800caae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	88fa      	ldrh	r2, [r7, #6]
 800cab6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cac2:	d108      	bne.n	800cad6 <HAL_UART_Transmit+0x6c>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cacc:	2300      	movs	r3, #0
 800cace:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	61bb      	str	r3, [r7, #24]
 800cad4:	e003      	b.n	800cade <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cade:	e030      	b.n	800cb42 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2200      	movs	r2, #0
 800cae8:	2180      	movs	r1, #128	@ 0x80
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f000 ff22 	bl	800d934 <UART_WaitOnFlagUntilTimeout>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d005      	beq.n	800cb02 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2220      	movs	r2, #32
 800cafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e03d      	b.n	800cb7e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10b      	bne.n	800cb20 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	881b      	ldrh	r3, [r3, #0]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	3302      	adds	r3, #2
 800cb1c:	61bb      	str	r3, [r7, #24]
 800cb1e:	e007      	b.n	800cb30 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	781a      	ldrb	r2, [r3, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1c8      	bne.n	800cae0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2200      	movs	r2, #0
 800cb56:	2140      	movs	r1, #64	@ 0x40
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f000 feeb 	bl	800d934 <UART_WaitOnFlagUntilTimeout>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d005      	beq.n	800cb70 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e006      	b.n	800cb7e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2220      	movs	r2, #32
 800cb74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e000      	b.n	800cb7e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cb7c:	2302      	movs	r3, #2
  }
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b0ba      	sub	sp, #232	@ 0xe8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cbb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cbbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d11b      	bne.n	800cbfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbc8:	f003 0320 	and.w	r3, r3, #32
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d015      	beq.n	800cbfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d105      	bne.n	800cbe8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d009      	beq.n	800cbfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 8300 	beq.w	800d1f2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
      }
      return;
 800cbfa:	e2fa      	b.n	800d1f2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 8123 	beq.w	800ce4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc0a:	4b8d      	ldr	r3, [pc, #564]	@ (800ce40 <HAL_UART_IRQHandler+0x2b8>)
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d106      	bne.n	800cc20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cc16:	4b8b      	ldr	r3, [pc, #556]	@ (800ce44 <HAL_UART_IRQHandler+0x2bc>)
 800cc18:	4013      	ands	r3, r2
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 8116 	beq.w	800ce4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d011      	beq.n	800cc50 <HAL_UART_IRQHandler+0xc8>
 800cc2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc46:	f043 0201 	orr.w	r2, r3, #1
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc54:	f003 0302 	and.w	r3, r3, #2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d011      	beq.n	800cc80 <HAL_UART_IRQHandler+0xf8>
 800cc5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc76:	f043 0204 	orr.w	r2, r3, #4
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d011      	beq.n	800ccb0 <HAL_UART_IRQHandler+0x128>
 800cc8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00b      	beq.n	800ccb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2204      	movs	r2, #4
 800cc9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cca6:	f043 0202 	orr.w	r2, r3, #2
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccb4:	f003 0308 	and.w	r3, r3, #8
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d017      	beq.n	800ccec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccc0:	f003 0320 	and.w	r3, r3, #32
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d105      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ccc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cccc:	4b5c      	ldr	r3, [pc, #368]	@ (800ce40 <HAL_UART_IRQHandler+0x2b8>)
 800ccce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00b      	beq.n	800ccec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2208      	movs	r2, #8
 800ccda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce2:	f043 0208 	orr.w	r2, r3, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d012      	beq.n	800cd1e <HAL_UART_IRQHandler+0x196>
 800ccf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00c      	beq.n	800cd1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd14:	f043 0220 	orr.w	r2, r3, #32
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 8266 	beq.w	800d1f6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd2e:	f003 0320 	and.w	r3, r3, #32
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d013      	beq.n	800cd5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd3a:	f003 0320 	and.w	r3, r3, #32
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d105      	bne.n	800cd4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d007      	beq.n	800cd5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd72:	2b40      	cmp	r3, #64	@ 0x40
 800cd74:	d005      	beq.n	800cd82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d054      	beq.n	800ce2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fe43 	bl	800da0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd92:	2b40      	cmp	r3, #64	@ 0x40
 800cd94:	d146      	bne.n	800ce24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	3308      	adds	r3, #8
 800cd9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cda4:	e853 3f00 	ldrex	r3, [r3]
 800cda8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cdac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3308      	adds	r3, #8
 800cdbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cdce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cdda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1d9      	bne.n	800cd96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d017      	beq.n	800ce1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdf2:	4a15      	ldr	r2, [pc, #84]	@ (800ce48 <HAL_UART_IRQHandler+0x2c0>)
 800cdf4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fb fe47 	bl	8008a90 <HAL_DMA_Abort_IT>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d019      	beq.n	800ce3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ce16:	4610      	mov	r0, r2
 800ce18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce1a:	e00f      	b.n	800ce3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f9ff 	bl	800d220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce22:	e00b      	b.n	800ce3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f9fb 	bl	800d220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce2a:	e007      	b.n	800ce3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 f9f7 	bl	800d220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ce3a:	e1dc      	b.n	800d1f6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce3c:	bf00      	nop
    return;
 800ce3e:	e1da      	b.n	800d1f6 <HAL_UART_IRQHandler+0x66e>
 800ce40:	10000001 	.word	0x10000001
 800ce44:	04000120 	.word	0x04000120
 800ce48:	0800dadb 	.word	0x0800dadb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	f040 8170 	bne.w	800d136 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce5a:	f003 0310 	and.w	r3, r3, #16
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f000 8169 	beq.w	800d136 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce68:	f003 0310 	and.w	r3, r3, #16
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 8162 	beq.w	800d136 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2210      	movs	r2, #16
 800ce78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce84:	2b40      	cmp	r3, #64	@ 0x40
 800ce86:	f040 80d8 	bne.w	800d03a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 80af 	beq.w	800d000 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cea8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ceac:	429a      	cmp	r2, r3
 800ceae:	f080 80a7 	bcs.w	800d000 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ceb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f040 8087 	bne.w	800cfde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cedc:	e853 3f00 	ldrex	r3, [r3]
 800cee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ceec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cefa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cefe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cf06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1da      	bne.n	800ced0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3308      	adds	r3, #8
 800cf20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf24:	e853 3f00 	ldrex	r3, [r3]
 800cf28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf2c:	f023 0301 	bic.w	r3, r3, #1
 800cf30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3308      	adds	r3, #8
 800cf3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf4a:	e841 2300 	strex	r3, r2, [r1]
 800cf4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e1      	bne.n	800cf1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf60:	e853 3f00 	ldrex	r3, [r3]
 800cf64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3308      	adds	r3, #8
 800cf76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf82:	e841 2300 	strex	r3, r2, [r1]
 800cf86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1e3      	bne.n	800cf56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2220      	movs	r2, #32
 800cf92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa4:	e853 3f00 	ldrex	r3, [r3]
 800cfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfac:	f023 0310 	bic.w	r3, r3, #16
 800cfb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfc6:	e841 2300 	strex	r3, r2, [r1]
 800cfca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1e4      	bne.n	800cf9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fb fcfa 	bl	80089d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f91b 	bl	800d234 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cffe:	e0fc      	b.n	800d1fa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d00a:	429a      	cmp	r2, r3
 800d00c:	f040 80f5 	bne.w	800d1fa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 0320 	and.w	r3, r3, #32
 800d01e:	2b20      	cmp	r3, #32
 800d020:	f040 80eb 	bne.w	800d1fa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2202      	movs	r2, #2
 800d028:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d030:	4619      	mov	r1, r3
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f8fe 	bl	800d234 <HAL_UARTEx_RxEventCallback>
      return;
 800d038:	e0df      	b.n	800d1fa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d046:	b29b      	uxth	r3, r3
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d054:	b29b      	uxth	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80d1 	beq.w	800d1fe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800d05c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 80cc 	beq.w	800d1fe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06e:	e853 3f00 	ldrex	r3, [r3]
 800d072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d076:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d07a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d088:	647b      	str	r3, [r7, #68]	@ 0x44
 800d08a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d08e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d090:	e841 2300 	strex	r3, r2, [r1]
 800d094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1e4      	bne.n	800d066 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a6:	e853 3f00 	ldrex	r3, [r3]
 800d0aa:	623b      	str	r3, [r7, #32]
   return(result);
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d0b2:	f023 0301 	bic.w	r3, r3, #1
 800d0b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	3308      	adds	r3, #8
 800d0c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d0c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0cc:	e841 2300 	strex	r3, r2, [r1]
 800d0d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d1e1      	bne.n	800d09c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2220      	movs	r2, #32
 800d0dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	e853 3f00 	ldrex	r3, [r3]
 800d0f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f023 0310 	bic.w	r3, r3, #16
 800d100:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	461a      	mov	r2, r3
 800d10a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d10e:	61fb      	str	r3, [r7, #28]
 800d110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d112:	69b9      	ldr	r1, [r7, #24]
 800d114:	69fa      	ldr	r2, [r7, #28]
 800d116:	e841 2300 	strex	r3, r2, [r1]
 800d11a:	617b      	str	r3, [r7, #20]
   return(result);
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1e4      	bne.n	800d0ec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2202      	movs	r2, #2
 800d126:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f880 	bl	800d234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d134:	e063      	b.n	800d1fe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d13a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00e      	beq.n	800d160 <HAL_UART_IRQHandler+0x5d8>
 800d142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d008      	beq.n	800d160 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fcff 	bl	800db5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d15e:	e051      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d014      	beq.n	800d196 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d174:	2b00      	cmp	r3, #0
 800d176:	d105      	bne.n	800d184 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d17c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d008      	beq.n	800d196 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d03a      	beq.n	800d202 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	4798      	blx	r3
    }
    return;
 800d194:	e035      	b.n	800d202 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d009      	beq.n	800d1b6 <HAL_UART_IRQHandler+0x62e>
 800d1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d003      	beq.n	800d1b6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fca9 	bl	800db06 <UART_EndTransmit_IT>
    return;
 800d1b4:	e026      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d009      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x64e>
 800d1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fcd8 	bl	800db84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1d4:	e016      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d010      	beq.n	800d204 <HAL_UART_IRQHandler+0x67c>
 800d1e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	da0c      	bge.n	800d204 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fcc0 	bl	800db70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1f0:	e008      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
      return;
 800d1f2:	bf00      	nop
 800d1f4:	e006      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
    return;
 800d1f6:	bf00      	nop
 800d1f8:	e004      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
      return;
 800d1fa:	bf00      	nop
 800d1fc:	e002      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
      return;
 800d1fe:	bf00      	nop
 800d200:	e000      	b.n	800d204 <HAL_UART_IRQHandler+0x67c>
    return;
 800d202:	bf00      	nop
  }
}
 800d204:	37e8      	adds	r7, #232	@ 0xe8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop

0800d20c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	460b      	mov	r3, r1
 800d23e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d24c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d250:	b08c      	sub	sp, #48	@ 0x30
 800d252:	af00      	add	r7, sp, #0
 800d254:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	689a      	ldr	r2, [r3, #8]
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	431a      	orrs	r2, r3
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	431a      	orrs	r2, r3
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	69db      	ldr	r3, [r3, #28]
 800d270:	4313      	orrs	r3, r2
 800d272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	4baf      	ldr	r3, [pc, #700]	@ (800d538 <UART_SetConfig+0x2ec>)
 800d27c:	4013      	ands	r3, r2
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d284:	430b      	orrs	r3, r1
 800d286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	68da      	ldr	r2, [r3, #12]
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	430a      	orrs	r2, r1
 800d29c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4aa4      	ldr	r2, [pc, #656]	@ (800d53c <UART_SetConfig+0x2f0>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d004      	beq.n	800d2b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d2c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d2c6:	697a      	ldr	r2, [r7, #20]
 800d2c8:	6812      	ldr	r2, [r2, #0]
 800d2ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2cc:	430b      	orrs	r3, r1
 800d2ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d6:	f023 010f 	bic.w	r1, r3, #15
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	430a      	orrs	r2, r1
 800d2e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a95      	ldr	r2, [pc, #596]	@ (800d540 <UART_SetConfig+0x2f4>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d125      	bne.n	800d33c <UART_SetConfig+0xf0>
 800d2f0:	2003      	movs	r0, #3
 800d2f2:	f7ff fb4a 	bl	800c98a <LL_RCC_GetUSARTClockSource>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b03      	cmp	r3, #3
 800d2fa:	d81b      	bhi.n	800d334 <UART_SetConfig+0xe8>
 800d2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <UART_SetConfig+0xb8>)
 800d2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d302:	bf00      	nop
 800d304:	0800d315 	.word	0x0800d315
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d31d 	.word	0x0800d31d
 800d310:	0800d32d 	.word	0x0800d32d
 800d314:	2301      	movs	r3, #1
 800d316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d31a:	e042      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d31c:	2302      	movs	r3, #2
 800d31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d322:	e03e      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d32a:	e03a      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d332:	e036      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d33a:	e032      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a7e      	ldr	r2, [pc, #504]	@ (800d53c <UART_SetConfig+0x2f0>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d12a      	bne.n	800d39c <UART_SetConfig+0x150>
 800d346:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800d34a:	f7ff fb2e 	bl	800c9aa <LL_RCC_GetLPUARTClockSource>
 800d34e:	4603      	mov	r3, r0
 800d350:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d354:	d01a      	beq.n	800d38c <UART_SetConfig+0x140>
 800d356:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d35a:	d81b      	bhi.n	800d394 <UART_SetConfig+0x148>
 800d35c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d360:	d00c      	beq.n	800d37c <UART_SetConfig+0x130>
 800d362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d366:	d815      	bhi.n	800d394 <UART_SetConfig+0x148>
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <UART_SetConfig+0x128>
 800d36c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d370:	d008      	beq.n	800d384 <UART_SetConfig+0x138>
 800d372:	e00f      	b.n	800d394 <UART_SetConfig+0x148>
 800d374:	2300      	movs	r3, #0
 800d376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d37a:	e012      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d37c:	2302      	movs	r3, #2
 800d37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d382:	e00e      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d384:	2304      	movs	r3, #4
 800d386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d38a:	e00a      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d38c:	2308      	movs	r3, #8
 800d38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d392:	e006      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d394:	2310      	movs	r3, #16
 800d396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d39a:	e002      	b.n	800d3a2 <UART_SetConfig+0x156>
 800d39c:	2310      	movs	r3, #16
 800d39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a65      	ldr	r2, [pc, #404]	@ (800d53c <UART_SetConfig+0x2f0>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	f040 8097 	bne.w	800d4dc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d3b2:	2b08      	cmp	r3, #8
 800d3b4:	d823      	bhi.n	800d3fe <UART_SetConfig+0x1b2>
 800d3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3bc <UART_SetConfig+0x170>)
 800d3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3bc:	0800d3e1 	.word	0x0800d3e1
 800d3c0:	0800d3ff 	.word	0x0800d3ff
 800d3c4:	0800d3e9 	.word	0x0800d3e9
 800d3c8:	0800d3ff 	.word	0x0800d3ff
 800d3cc:	0800d3ef 	.word	0x0800d3ef
 800d3d0:	0800d3ff 	.word	0x0800d3ff
 800d3d4:	0800d3ff 	.word	0x0800d3ff
 800d3d8:	0800d3ff 	.word	0x0800d3ff
 800d3dc:	0800d3f7 	.word	0x0800d3f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3e0:	f7fd f964 	bl	800a6ac <HAL_RCC_GetPCLK1Freq>
 800d3e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3e6:	e010      	b.n	800d40a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3e8:	4b56      	ldr	r3, [pc, #344]	@ (800d544 <UART_SetConfig+0x2f8>)
 800d3ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3ec:	e00d      	b.n	800d40a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3ee:	f7fd f8dd 	bl	800a5ac <HAL_RCC_GetSysClockFreq>
 800d3f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d3f4:	e009      	b.n	800d40a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d3fc:	e005      	b.n	800d40a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800d3fe:	2300      	movs	r3, #0
 800d400:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 812b 	beq.w	800d668 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d416:	4a4c      	ldr	r2, [pc, #304]	@ (800d548 <UART_SetConfig+0x2fc>)
 800d418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d41c:	461a      	mov	r2, r3
 800d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d420:	fbb3 f3f2 	udiv	r3, r3, r2
 800d424:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	4613      	mov	r3, r2
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	4413      	add	r3, r2
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	429a      	cmp	r2, r3
 800d434:	d305      	bcc.n	800d442 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d43c:	69ba      	ldr	r2, [r7, #24]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d903      	bls.n	800d44a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d448:	e10e      	b.n	800d668 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44c:	2200      	movs	r2, #0
 800d44e:	60bb      	str	r3, [r7, #8]
 800d450:	60fa      	str	r2, [r7, #12]
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d456:	4a3c      	ldr	r2, [pc, #240]	@ (800d548 <UART_SetConfig+0x2fc>)
 800d458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	2200      	movs	r2, #0
 800d460:	603b      	str	r3, [r7, #0]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d46c:	f7f7 ff6a 	bl	8005344 <__aeabi_uldivmod>
 800d470:	4602      	mov	r2, r0
 800d472:	460b      	mov	r3, r1
 800d474:	4610      	mov	r0, r2
 800d476:	4619      	mov	r1, r3
 800d478:	f04f 0200 	mov.w	r2, #0
 800d47c:	f04f 0300 	mov.w	r3, #0
 800d480:	020b      	lsls	r3, r1, #8
 800d482:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d486:	0202      	lsls	r2, r0, #8
 800d488:	6979      	ldr	r1, [r7, #20]
 800d48a:	6849      	ldr	r1, [r1, #4]
 800d48c:	0849      	lsrs	r1, r1, #1
 800d48e:	2000      	movs	r0, #0
 800d490:	460c      	mov	r4, r1
 800d492:	4605      	mov	r5, r0
 800d494:	eb12 0804 	adds.w	r8, r2, r4
 800d498:	eb43 0905 	adc.w	r9, r3, r5
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	469a      	mov	sl, r3
 800d4a4:	4693      	mov	fp, r2
 800d4a6:	4652      	mov	r2, sl
 800d4a8:	465b      	mov	r3, fp
 800d4aa:	4640      	mov	r0, r8
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	f7f7 ff49 	bl	8005344 <__aeabi_uldivmod>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4ba:	6a3b      	ldr	r3, [r7, #32]
 800d4bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4c0:	d308      	bcc.n	800d4d4 <UART_SetConfig+0x288>
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4c8:	d204      	bcs.n	800d4d4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	6a3a      	ldr	r2, [r7, #32]
 800d4d0:	60da      	str	r2, [r3, #12]
 800d4d2:	e0c9      	b.n	800d668 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d4da:	e0c5      	b.n	800d668 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4e4:	d16d      	bne.n	800d5c2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d4e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	2b07      	cmp	r3, #7
 800d4ee:	d82d      	bhi.n	800d54c <UART_SetConfig+0x300>
 800d4f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <UART_SetConfig+0x2ac>)
 800d4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f6:	bf00      	nop
 800d4f8:	0800d519 	.word	0x0800d519
 800d4fc:	0800d521 	.word	0x0800d521
 800d500:	0800d54d 	.word	0x0800d54d
 800d504:	0800d527 	.word	0x0800d527
 800d508:	0800d54d 	.word	0x0800d54d
 800d50c:	0800d54d 	.word	0x0800d54d
 800d510:	0800d54d 	.word	0x0800d54d
 800d514:	0800d52f 	.word	0x0800d52f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d518:	f7fd f8de 	bl	800a6d8 <HAL_RCC_GetPCLK2Freq>
 800d51c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d51e:	e01b      	b.n	800d558 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d520:	4b08      	ldr	r3, [pc, #32]	@ (800d544 <UART_SetConfig+0x2f8>)
 800d522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d524:	e018      	b.n	800d558 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d526:	f7fd f841 	bl	800a5ac <HAL_RCC_GetSysClockFreq>
 800d52a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d52c:	e014      	b.n	800d558 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d52e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d534:	e010      	b.n	800d558 <UART_SetConfig+0x30c>
 800d536:	bf00      	nop
 800d538:	cfff69f3 	.word	0xcfff69f3
 800d53c:	40008000 	.word	0x40008000
 800d540:	40013800 	.word	0x40013800
 800d544:	00f42400 	.word	0x00f42400
 800d548:	080108d4 	.word	0x080108d4
      default:
        pclk = 0U;
 800d54c:	2300      	movs	r3, #0
 800d54e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 8084 	beq.w	800d668 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d564:	4a4b      	ldr	r2, [pc, #300]	@ (800d694 <UART_SetConfig+0x448>)
 800d566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d56a:	461a      	mov	r2, r3
 800d56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d572:	005a      	lsls	r2, r3, #1
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	085b      	lsrs	r3, r3, #1
 800d57a:	441a      	add	r2, r3
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	fbb2 f3f3 	udiv	r3, r2, r3
 800d584:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	2b0f      	cmp	r3, #15
 800d58a:	d916      	bls.n	800d5ba <UART_SetConfig+0x36e>
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d592:	d212      	bcs.n	800d5ba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	b29b      	uxth	r3, r3
 800d598:	f023 030f 	bic.w	r3, r3, #15
 800d59c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	f003 0307 	and.w	r3, r3, #7
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	8bfb      	ldrh	r3, [r7, #30]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	8bfa      	ldrh	r2, [r7, #30]
 800d5b6:	60da      	str	r2, [r3, #12]
 800d5b8:	e056      	b.n	800d668 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d5c0:	e052      	b.n	800d668 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	2b07      	cmp	r3, #7
 800d5ca:	d822      	bhi.n	800d612 <UART_SetConfig+0x3c6>
 800d5cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d5d4 <UART_SetConfig+0x388>)
 800d5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d2:	bf00      	nop
 800d5d4:	0800d5f5 	.word	0x0800d5f5
 800d5d8:	0800d5fd 	.word	0x0800d5fd
 800d5dc:	0800d613 	.word	0x0800d613
 800d5e0:	0800d603 	.word	0x0800d603
 800d5e4:	0800d613 	.word	0x0800d613
 800d5e8:	0800d613 	.word	0x0800d613
 800d5ec:	0800d613 	.word	0x0800d613
 800d5f0:	0800d60b 	.word	0x0800d60b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5f4:	f7fd f870 	bl	800a6d8 <HAL_RCC_GetPCLK2Freq>
 800d5f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d5fa:	e010      	b.n	800d61e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5fc:	4b26      	ldr	r3, [pc, #152]	@ (800d698 <UART_SetConfig+0x44c>)
 800d5fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d600:	e00d      	b.n	800d61e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d602:	f7fc ffd3 	bl	800a5ac <HAL_RCC_GetSysClockFreq>
 800d606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d608:	e009      	b.n	800d61e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d60e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d610:	e005      	b.n	800d61e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d61c:	bf00      	nop
    }

    if (pclk != 0U)
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	2b00      	cmp	r3, #0
 800d622:	d021      	beq.n	800d668 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d628:	4a1a      	ldr	r2, [pc, #104]	@ (800d694 <UART_SetConfig+0x448>)
 800d62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d62e:	461a      	mov	r2, r3
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	fbb3 f2f2 	udiv	r2, r3, r2
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	085b      	lsrs	r3, r3, #1
 800d63c:	441a      	add	r2, r3
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	fbb2 f3f3 	udiv	r3, r2, r3
 800d646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	2b0f      	cmp	r3, #15
 800d64c:	d909      	bls.n	800d662 <UART_SetConfig+0x416>
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d654:	d205      	bcs.n	800d662 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	b29a      	uxth	r2, r3
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	60da      	str	r2, [r3, #12]
 800d660:	e002      	b.n	800d668 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2201      	movs	r2, #1
 800d674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2200      	movs	r2, #0
 800d67c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	2200      	movs	r2, #0
 800d682:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d684:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3730      	adds	r7, #48	@ 0x30
 800d68c:	46bd      	mov	sp, r7
 800d68e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d692:	bf00      	nop
 800d694:	080108d4 	.word	0x080108d4
 800d698:	00f42400 	.word	0x00f42400

0800d69c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a8:	f003 0308 	and.w	r3, r3, #8
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00a      	beq.n	800d6c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	430a      	orrs	r2, r1
 800d6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00a      	beq.n	800d6e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	430a      	orrs	r2, r1
 800d6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ec:	f003 0302 	and.w	r3, r3, #2
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00a      	beq.n	800d70a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	430a      	orrs	r2, r1
 800d708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d70e:	f003 0304 	and.w	r3, r3, #4
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	430a      	orrs	r2, r1
 800d72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d730:	f003 0310 	and.w	r3, r3, #16
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00a      	beq.n	800d74e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	430a      	orrs	r2, r1
 800d74c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d752:	f003 0320 	and.w	r3, r3, #32
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	430a      	orrs	r2, r1
 800d76e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01a      	beq.n	800d7b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	430a      	orrs	r2, r1
 800d790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d79a:	d10a      	bne.n	800d7b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	430a      	orrs	r2, r1
 800d7b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00a      	beq.n	800d7d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	430a      	orrs	r2, r1
 800d7d2:	605a      	str	r2, [r3, #4]
  }
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b098      	sub	sp, #96	@ 0x60
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7f0:	f7f9 fe0e 	bl	8007410 <HAL_GetTick>
 800d7f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f003 0308 	and.w	r3, r3, #8
 800d800:	2b08      	cmp	r3, #8
 800d802:	d12f      	bne.n	800d864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d80c:	2200      	movs	r2, #0
 800d80e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f88e 	bl	800d934 <UART_WaitOnFlagUntilTimeout>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d022      	beq.n	800d864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d826:	e853 3f00 	ldrex	r3, [r3]
 800d82a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d832:	653b      	str	r3, [r7, #80]	@ 0x50
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	461a      	mov	r2, r3
 800d83a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d83c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d83e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d844:	e841 2300 	strex	r3, r2, [r1]
 800d848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1e6      	bne.n	800d81e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2220      	movs	r2, #32
 800d854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d860:	2303      	movs	r3, #3
 800d862:	e063      	b.n	800d92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0304 	and.w	r3, r3, #4
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d149      	bne.n	800d906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d872:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d87a:	2200      	movs	r2, #0
 800d87c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f857 	bl	800d934 <UART_WaitOnFlagUntilTimeout>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d03c      	beq.n	800d906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	623b      	str	r3, [r7, #32]
   return(result);
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8b2:	e841 2300 	strex	r3, r2, [r1]
 800d8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1e6      	bne.n	800d88c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	e853 3f00 	ldrex	r3, [r3]
 800d8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f023 0301 	bic.w	r3, r3, #1
 800d8d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3308      	adds	r3, #8
 800d8dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8de:	61fa      	str	r2, [r7, #28]
 800d8e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	69b9      	ldr	r1, [r7, #24]
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e5      	bne.n	800d8be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2220      	movs	r2, #32
 800d8f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	e012      	b.n	800d92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2220      	movs	r2, #32
 800d90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2220      	movs	r2, #32
 800d912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d92a:	2300      	movs	r3, #0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3758      	adds	r7, #88	@ 0x58
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	4613      	mov	r3, r2
 800d942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d944:	e04f      	b.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94c:	d04b      	beq.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d94e:	f7f9 fd5f 	bl	8007410 <HAL_GetTick>
 800d952:	4602      	mov	r2, r0
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	69ba      	ldr	r2, [r7, #24]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d302      	bcc.n	800d964 <UART_WaitOnFlagUntilTimeout+0x30>
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d101      	bne.n	800d968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e04e      	b.n	800da06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f003 0304 	and.w	r3, r3, #4
 800d972:	2b00      	cmp	r3, #0
 800d974:	d037      	beq.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2b80      	cmp	r3, #128	@ 0x80
 800d97a:	d034      	beq.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b40      	cmp	r3, #64	@ 0x40
 800d980:	d031      	beq.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	69db      	ldr	r3, [r3, #28]
 800d988:	f003 0308 	and.w	r3, r3, #8
 800d98c:	2b08      	cmp	r3, #8
 800d98e:	d110      	bne.n	800d9b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2208      	movs	r2, #8
 800d996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f000 f838 	bl	800da0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2208      	movs	r2, #8
 800d9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e029      	b.n	800da06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9c0:	d111      	bne.n	800d9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f000 f81e 	bl	800da0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2220      	movs	r2, #32
 800d9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	e00f      	b.n	800da06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	69da      	ldr	r2, [r3, #28]
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	bf0c      	ite	eq
 800d9f6:	2301      	moveq	r3, #1
 800d9f8:	2300      	movne	r3, #0
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	429a      	cmp	r2, r3
 800da02:	d0a0      	beq.n	800d946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da0e:	b480      	push	{r7}
 800da10:	b095      	sub	sp, #84	@ 0x54
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da1e:	e853 3f00 	ldrex	r3, [r3]
 800da22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da34:	643b      	str	r3, [r7, #64]	@ 0x40
 800da36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da3c:	e841 2300 	strex	r3, r2, [r1]
 800da40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1e6      	bne.n	800da16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3308      	adds	r3, #8
 800da4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	e853 3f00 	ldrex	r3, [r3]
 800da56:	61fb      	str	r3, [r7, #28]
   return(result);
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da5e:	f023 0301 	bic.w	r3, r3, #1
 800da62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3308      	adds	r3, #8
 800da6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da74:	e841 2300 	strex	r3, r2, [r1]
 800da78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1e3      	bne.n	800da48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da84:	2b01      	cmp	r3, #1
 800da86:	d118      	bne.n	800daba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	60bb      	str	r3, [r7, #8]
   return(result);
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	f023 0310 	bic.w	r3, r3, #16
 800da9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daa6:	61bb      	str	r3, [r7, #24]
 800daa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daaa:	6979      	ldr	r1, [r7, #20]
 800daac:	69ba      	ldr	r2, [r7, #24]
 800daae:	e841 2300 	strex	r3, r2, [r1]
 800dab2:	613b      	str	r3, [r7, #16]
   return(result);
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1e6      	bne.n	800da88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2220      	movs	r2, #32
 800dabe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dace:	bf00      	nop
 800dad0:	3754      	adds	r7, #84	@ 0x54
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f7ff fb91 	bl	800d220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dafe:	bf00      	nop
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b088      	sub	sp, #32
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	e853 3f00 	ldrex	r3, [r3]
 800db1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db22:	61fb      	str	r3, [r7, #28]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db30:	6979      	ldr	r1, [r7, #20]
 800db32:	69ba      	ldr	r2, [r7, #24]
 800db34:	e841 2300 	strex	r3, r2, [r1]
 800db38:	613b      	str	r3, [r7, #16]
   return(result);
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1e6      	bne.n	800db0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2220      	movs	r2, #32
 800db44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff fb5c 	bl	800d20c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db54:	bf00      	nop
 800db56:	3720      	adds	r7, #32
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db8c:	bf00      	nop
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d101      	bne.n	800dbae <HAL_UARTEx_DisableFifoMode+0x16>
 800dbaa:	2302      	movs	r3, #2
 800dbac:	e027      	b.n	800dbfe <HAL_UARTEx_DisableFifoMode+0x66>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2224      	movs	r2, #36	@ 0x24
 800dbba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f022 0201 	bic.w	r2, r2, #1
 800dbd4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dbdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2220      	movs	r2, #32
 800dbf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d101      	bne.n	800dc22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e02d      	b.n	800dc7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2224      	movs	r2, #36	@ 0x24
 800dc2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f022 0201 	bic.w	r2, r2, #1
 800dc48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	430a      	orrs	r2, r1
 800dc5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f850 	bl	800dd04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2220      	movs	r2, #32
 800dc70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d101      	bne.n	800dc9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc9a:	2302      	movs	r3, #2
 800dc9c:	e02d      	b.n	800dcfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2224      	movs	r2, #36	@ 0x24
 800dcaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f022 0201 	bic.w	r2, r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 f812 	bl	800dd04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2220      	movs	r2, #32
 800dcec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
	...

0800dd04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d108      	bne.n	800dd26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd24:	e031      	b.n	800dd8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd26:	2308      	movs	r3, #8
 800dd28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd2a:	2308      	movs	r3, #8
 800dd2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	0e5b      	lsrs	r3, r3, #25
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	f003 0307 	and.w	r3, r3, #7
 800dd3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	0f5b      	lsrs	r3, r3, #29
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	f003 0307 	and.w	r3, r3, #7
 800dd4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
 800dd50:	7b3a      	ldrb	r2, [r7, #12]
 800dd52:	4911      	ldr	r1, [pc, #68]	@ (800dd98 <UARTEx_SetNbDataToProcess+0x94>)
 800dd54:	5c8a      	ldrb	r2, [r1, r2]
 800dd56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd5a:	7b3a      	ldrb	r2, [r7, #12]
 800dd5c:	490f      	ldr	r1, [pc, #60]	@ (800dd9c <UARTEx_SetNbDataToProcess+0x98>)
 800dd5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd60:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	7b7a      	ldrb	r2, [r7, #13]
 800dd70:	4909      	ldr	r1, [pc, #36]	@ (800dd98 <UARTEx_SetNbDataToProcess+0x94>)
 800dd72:	5c8a      	ldrb	r2, [r1, r2]
 800dd74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd78:	7b7a      	ldrb	r2, [r7, #13]
 800dd7a:	4908      	ldr	r1, [pc, #32]	@ (800dd9c <UARTEx_SetNbDataToProcess+0x98>)
 800dd7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dd8a:	bf00      	nop
 800dd8c:	3714      	adds	r7, #20
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	080108ec 	.word	0x080108ec
 800dd9c:	080108f4 	.word	0x080108f4

0800dda0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	@ (800dde8 <OTP_Read+0x48>)
 800ddac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ddae:	e002      	b.n	800ddb6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3b08      	subs	r3, #8
 800ddb4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3307      	adds	r3, #7
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	79fa      	ldrb	r2, [r7, #7]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d003      	beq.n	800ddca <OTP_Read+0x2a>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4a09      	ldr	r2, [pc, #36]	@ (800ddec <OTP_Read+0x4c>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d1f2      	bne.n	800ddb0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3307      	adds	r3, #7
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	79fa      	ldrb	r2, [r7, #7]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d001      	beq.n	800ddda <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ddda:	68fb      	ldr	r3, [r7, #12]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3714      	adds	r7, #20
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	1fff73f8 	.word	0x1fff73f8
 800ddec:	1fff7000 	.word	0x1fff7000

0800ddf0 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b087      	sub	sp, #28
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddf8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800de00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800de02:	b672      	cpsid	i
}
 800de04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d102      	bne.n	800de16 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800de10:	2301      	movs	r3, #1
 800de12:	75fb      	strb	r3, [r7, #23]
 800de14:	e001      	b.n	800de1a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800de16:	2300      	movs	r3, #0
 800de18:	75fb      	strb	r3, [r7, #23]
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f383 8810 	msr	PRIMASK, r3
}
 800de24:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800de26:	7dfb      	ldrb	r3, [r7, #23]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	371c      	adds	r7, #28
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800de34:	b480      	push	{r7}
 800de36:	b087      	sub	sp, #28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de3e:	f3ef 8310 	mrs	r3, PRIMASK
 800de42:	60fb      	str	r3, [r7, #12]
  return(result);
 800de44:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800de46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de48:	b672      	cpsid	i
}
 800de4a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	f383 8810 	msr	PRIMASK, r3
}
 800de72:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800de74:	bf00      	nop
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de88:	f3ef 8310 	mrs	r3, PRIMASK
 800de8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800de8e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800de90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de92:	b672      	cpsid	i
}
 800de94:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	6812      	ldr	r2, [r2, #0]
 800de9e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	6852      	ldr	r2, [r2, #4]
 800dea8:	605a      	str	r2, [r3, #4]
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	f383 8810 	msr	PRIMASK, r3
}
 800deb4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800deb6:	bf00      	nop
 800deb8:	371c      	adds	r7, #28
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b086      	sub	sp, #24
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800decc:	f3ef 8310 	mrs	r3, PRIMASK
 800ded0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ded2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ded4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ded6:	b672      	cpsid	i
}
 800ded8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff ffca 	bl	800de80 <LST_remove_node>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	f383 8810 	msr	PRIMASK, r3
}
 800def6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800def8:	bf00      	nop
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800df06:	e01c      	b.n	800df42 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800df08:	1d3b      	adds	r3, r7, #4
 800df0a:	4619      	mov	r1, r3
 800df0c:	4812      	ldr	r0, [pc, #72]	@ (800df58 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800df0e:	f7ff ffd8 	bl	800dec2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7a5b      	ldrb	r3, [r3, #9]
 800df16:	2b0f      	cmp	r3, #15
 800df18:	d003      	beq.n	800df22 <HW_IPCC_BLE_RxEvtNot+0x22>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7a5b      	ldrb	r3, [r3, #9]
 800df1e:	2b0e      	cmp	r3, #14
 800df20:	d105      	bne.n	800df2e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4619      	mov	r1, r3
 800df26:	2002      	movs	r0, #2
 800df28:	f000 f8e0 	bl	800e0ec <OutputDbgTrace>
 800df2c:	e004      	b.n	800df38 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4619      	mov	r1, r3
 800df32:	2003      	movs	r0, #3
 800df34:	f000 f8da 	bl	800e0ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800df38:	4b08      	ldr	r3, [pc, #32]	@ (800df5c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	4610      	mov	r0, r2
 800df40:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800df42:	4805      	ldr	r0, [pc, #20]	@ (800df58 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800df44:	f7ff ff54 	bl	800ddf0 <LST_is_empty>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d0dc      	beq.n	800df08 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800df4e:	bf00      	nop
}
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	200300c8 	.word	0x200300c8
 800df5c:	200003fc 	.word	0x200003fc

0800df60 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800df64:	4b02      	ldr	r3, [pc, #8]	@ (800df70 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4798      	blx	r3

  return;
 800df6a:	bf00      	nop
}
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	20000400 	.word	0x20000400

0800df74 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800df78:	4b07      	ldr	r3, [pc, #28]	@ (800df98 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4619      	mov	r1, r3
 800df80:	2005      	movs	r0, #5
 800df82:	f000 f8b3 	bl	800e0ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800df86:	4b05      	ldr	r3, [pc, #20]	@ (800df9c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a03      	ldr	r2, [pc, #12]	@ (800df98 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800df8c:	68d2      	ldr	r2, [r2, #12]
 800df8e:	6812      	ldr	r2, [r2, #0]
 800df90:	4610      	mov	r0, r2
 800df92:	4798      	blx	r3

  return;
 800df94:	bf00      	nop
}
 800df96:	bd80      	pop	{r7, pc}
 800df98:	20030000 	.word	0x20030000
 800df9c:	20000404 	.word	0x20000404

0800dfa0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dfa6:	e00e      	b.n	800dfc6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800dfa8:	1d3b      	adds	r3, r7, #4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	480b      	ldr	r0, [pc, #44]	@ (800dfdc <HW_IPCC_SYS_EvtNot+0x3c>)
 800dfae:	f7ff ff88 	bl	800dec2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	2006      	movs	r0, #6
 800dfb8:	f000 f898 	bl	800e0ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800dfbc:	4b08      	ldr	r3, [pc, #32]	@ (800dfe0 <HW_IPCC_SYS_EvtNot+0x40>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800dfc6:	4805      	ldr	r0, [pc, #20]	@ (800dfdc <HW_IPCC_SYS_EvtNot+0x3c>)
 800dfc8:	f7ff ff12 	bl	800ddf0 <LST_is_empty>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0ea      	beq.n	800dfa8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800dfd2:	bf00      	nop
}
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	200300d0 	.word	0x200300d0
 800dfe0:	20000408 	.word	0x20000408

0800dfe4 <TL_ZIGBEE_SendM4RequestToM0>:
  return;
}

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800dfe8:	4b04      	ldr	r3, [pc, #16]	@ (800dffc <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 800dfea:	69db      	ldr	r3, [r3, #28]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	2208      	movs	r2, #8
 800dff0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 800dff2:	f001 f801 	bl	800eff8 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 800dff6:	bf00      	nop
}
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20030000 	.word	0x20030000

0800e000 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 800e004:	4b03      	ldr	r3, [pc, #12]	@ (800e014 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 800e006:	69db      	ldr	r3, [r3, #28]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 fe0e 	bl	800ec2c <TL_ZIGBEE_CmdEvtReceived>

  return;
 800e010:	bf00      	nop
}
 800e012:	bd80      	pop	{r7, pc}
 800e014:	20030000 	.word	0x20030000

0800e018 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 800e01c:	4b03      	ldr	r3, [pc, #12]	@ (800e02c <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4618      	mov	r0, r3
 800e024:	f000 fe0c 	bl	800ec40 <TL_ZIGBEE_NotReceived>

  return;
 800e028:	bf00      	nop
}
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	20030000 	.word	0x20030000

0800e030 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:
  return;
}

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 800e034:	4b03      	ldr	r3, [pc, #12]	@ (800e044 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 800e036:	69db      	ldr	r3, [r3, #28]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 fe36 	bl	800ecac <TL_ZIGBEE_M0RequestReceived>

  return;
 800e040:	bf00      	nop
}
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20030000 	.word	0x20030000

0800e048 <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e050:	6879      	ldr	r1, [r7, #4]
 800e052:	4807      	ldr	r0, [pc, #28]	@ (800e070 <TL_MM_EvtDone+0x28>)
 800e054:	f7ff feee 	bl	800de34 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	2000      	movs	r0, #0
 800e05c:	f000 f846 	bl	800e0ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e060:	4804      	ldr	r0, [pc, #16]	@ (800e074 <TL_MM_EvtDone+0x2c>)
 800e062:	f000 fffb 	bl	800f05c <HW_IPCC_MM_SendFreeBuf>

  return;
 800e066:	bf00      	nop
}
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	200003f4 	.word	0x200003f4
 800e074:	0800e079 	.word	0x0800e079

0800e078 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e07e:	e00c      	b.n	800e09a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e080:	1d3b      	adds	r3, r7, #4
 800e082:	4619      	mov	r1, r3
 800e084:	480a      	ldr	r0, [pc, #40]	@ (800e0b0 <SendFreeBuf+0x38>)
 800e086:	f7ff ff1c 	bl	800dec2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e08a:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b4 <SendFreeBuf+0x3c>)
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	4611      	mov	r1, r2
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff fecd 	bl	800de34 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e09a:	4805      	ldr	r0, [pc, #20]	@ (800e0b0 <SendFreeBuf+0x38>)
 800e09c:	f7ff fea8 	bl	800ddf0 <LST_is_empty>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0ec      	beq.n	800e080 <SendFreeBuf+0x8>
  }

  return;
 800e0a6:	bf00      	nop
}
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	200003f4 	.word	0x200003f4
 800e0b4:	20030000 	.word	0x20030000

0800e0b8 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e0be:	e008      	b.n	800e0d2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e0c0:	1d3b      	adds	r3, r7, #4
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4808      	ldr	r0, [pc, #32]	@ (800e0e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e0c6:	f7ff fefc 	bl	800dec2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f7 fb8a 	bl	80057e6 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e0d2:	4805      	ldr	r0, [pc, #20]	@ (800e0e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e0d4:	f7ff fe8c 	bl	800ddf0 <LST_is_empty>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d0f0      	beq.n	800e0c0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e0de:	bf00      	nop
}
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	200300c0 	.word	0x200300c0

0800e0ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	6039      	str	r1, [r7, #0]
 800e0f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e0f8:	79fb      	ldrb	r3, [r7, #7]
 800e0fa:	2b06      	cmp	r3, #6
 800e0fc:	d845      	bhi.n	800e18a <OutputDbgTrace+0x9e>
 800e0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e104 <OutputDbgTrace+0x18>)
 800e100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e104:	0800e121 	.word	0x0800e121
 800e108:	0800e145 	.word	0x0800e145
 800e10c:	0800e14b 	.word	0x0800e14b
 800e110:	0800e15f 	.word	0x0800e15f
 800e114:	0800e16b 	.word	0x0800e16b
 800e118:	0800e171 	.word	0x0800e171
 800e11c:	0800e17f 	.word	0x0800e17f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	7a5b      	ldrb	r3, [r3, #9]
 800e128:	2bff      	cmp	r3, #255	@ 0xff
 800e12a:	d005      	beq.n	800e138 <OutputDbgTrace+0x4c>
 800e12c:	2bff      	cmp	r3, #255	@ 0xff
 800e12e:	dc05      	bgt.n	800e13c <OutputDbgTrace+0x50>
 800e130:	2b0e      	cmp	r3, #14
 800e132:	d005      	beq.n	800e140 <OutputDbgTrace+0x54>
 800e134:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e136:	e001      	b.n	800e13c <OutputDbgTrace+0x50>
          break;
 800e138:	bf00      	nop
 800e13a:	e027      	b.n	800e18c <OutputDbgTrace+0xa0>
          break;
 800e13c:	bf00      	nop
 800e13e:	e025      	b.n	800e18c <OutputDbgTrace+0xa0>
          break;
 800e140:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e142:	e023      	b.n	800e18c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e148:	e020      	b.n	800e18c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	7a5b      	ldrb	r3, [r3, #9]
 800e152:	2b0e      	cmp	r3, #14
 800e154:	d001      	beq.n	800e15a <OutputDbgTrace+0x6e>
 800e156:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e158:	e000      	b.n	800e15c <OutputDbgTrace+0x70>
          break;
 800e15a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e15c:	e016      	b.n	800e18c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	7a5b      	ldrb	r3, [r3, #9]
 800e166:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e168:	e010      	b.n	800e18c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e16e:	e00d      	b.n	800e18c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	7a5b      	ldrb	r3, [r3, #9]
 800e178:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e17a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e17c:	e006      	b.n	800e18c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	7a5b      	ldrb	r3, [r3, #9]
 800e186:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e188:	e000      	b.n	800e18c <OutputDbgTrace+0xa0>

    default:
      break;
 800e18a:	bf00      	nop
  }

  return;
 800e18c:	bf00      	nop
}
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 800e198:	b480      	push	{r7}
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	bf00      	nop
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b087      	sub	sp, #28
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	e00a      	b.n	800e1ce <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	441a      	add	r2, r3
 800e1be:	68f9      	ldr	r1, [r7, #12]
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	440b      	add	r3, r1
 800e1c4:	7812      	ldrb	r2, [r2, #0]
 800e1c6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	617b      	str	r3, [r7, #20]
 800e1ce:	697a      	ldr	r2, [r7, #20]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d3f0      	bcc.n	800e1b8 <zb_ipc_m4_memcpy2+0x12>
    }
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	371c      	adds	r7, #28
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 800e1ee:	200c      	movs	r0, #12
 800e1f0:	f001 f96c 	bl	800f4cc <malloc>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00a      	beq.n	800e214 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 800e1fe:	220c      	movs	r2, #12
 800e200:	2100      	movs	r1, #0
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f001 fcf0 	bl	800fbe8 <memset>
        info->callback = callback;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	605a      	str	r2, [r3, #4]
    }
    return info;
 800e214:	68fb      	ldr	r3, [r7, #12]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b082      	sub	sp, #8
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
    free(info);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f001 f958 	bl	800f4dc <free>
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800e23a:	f000 fcc7 	bl	800ebcc <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800e23e:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d006      	beq.n	800e256 <zb_ipc_m4_get_retval+0x22>
 800e248:	4b09      	ldr	r3, [pc, #36]	@ (800e270 <zb_ipc_m4_get_retval+0x3c>)
 800e24a:	4a0a      	ldr	r2, [pc, #40]	@ (800e274 <zb_ipc_m4_get_retval+0x40>)
 800e24c:	f240 1151 	movw	r1, #337	@ 0x151
 800e250:	4809      	ldr	r0, [pc, #36]	@ (800e278 <zb_ipc_m4_get_retval+0x44>)
 800e252:	f001 f91d 	bl	800f490 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f103 0108 	add.w	r1, r3, #8
 800e25c:	463b      	mov	r3, r7
 800e25e:	2204      	movs	r2, #4
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff ffa0 	bl	800e1a6 <zb_ipc_m4_memcpy2>
    return retval;
 800e266:	683b      	ldr	r3, [r7, #0]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	080106dc 	.word	0x080106dc
 800e274:	08010b10 	.word	0x08010b10
 800e278:	080106f0 	.word	0x080106f0

0800e27c <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 800e284:	f04f 0200 	mov.w	r2, #0
 800e288:	f04f 0300 	mov.w	r3, #0
 800e28c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 800e290:	f000 fce6 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e294:	f000 fc8e 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e298:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f042 020e 	orr.w	r2, r2, #14
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	705a      	strb	r2, [r3, #1]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	709a      	strb	r2, [r3, #2]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	711a      	strb	r2, [r3, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	715a      	strb	r2, [r3, #5]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	719a      	strb	r2, [r3, #6]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800e2c2:	f000 fc8f 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800e2c6:	f000 fc81 	bl	800ebcc <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800e2ca:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d006      	beq.n	800e2e2 <ZbExtendedAddress+0x66>
 800e2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e308 <ZbExtendedAddress+0x8c>)
 800e2d6:	4a0d      	ldr	r2, [pc, #52]	@ (800e30c <ZbExtendedAddress+0x90>)
 800e2d8:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800e2dc:	480c      	ldr	r0, [pc, #48]	@ (800e310 <ZbExtendedAddress+0x94>)
 800e2de:	f001 f8d7 	bl	800f490 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	f103 0108 	add.w	r1, r3, #8
 800e2e8:	f107 0308 	add.w	r3, r7, #8
 800e2ec:	2208      	movs	r2, #8
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff ff59 	bl	800e1a6 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 800e2f4:	f7ff ff50 	bl	800e198 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 800e2f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	4619      	mov	r1, r3
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	08010768 	.word	0x08010768
 800e30c:	08010b28 	.word	0x08010b28
 800e310:	080106f0 	.word	0x080106f0

0800e314 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b08c      	sub	sp, #48	@ 0x30
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	607a      	str	r2, [r7, #4]
 800e31e:	603b      	str	r3, [r7, #0]
 800e320:	460b      	mov	r3, r1
 800e322:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 800e324:	897b      	ldrh	r3, [r7, #10]
 800e326:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 800e330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e332:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 800e334:	f000 fc94 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e338:	f000 fc3c 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e33c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 800e33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e340:	2200      	movs	r2, #0
 800e342:	701a      	strb	r2, [r3, #0]
 800e344:	2200      	movs	r2, #0
 800e346:	f042 0202 	orr.w	r2, r2, #2
 800e34a:	705a      	strb	r2, [r3, #1]
 800e34c:	2200      	movs	r2, #0
 800e34e:	709a      	strb	r2, [r3, #2]
 800e350:	2200      	movs	r2, #0
 800e352:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800e354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e356:	2200      	movs	r2, #0
 800e358:	f042 0202 	orr.w	r2, r2, #2
 800e35c:	711a      	strb	r2, [r3, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	715a      	strb	r2, [r3, #5]
 800e362:	2200      	movs	r2, #0
 800e364:	719a      	strb	r2, [r3, #6]
 800e366:	2200      	movs	r2, #0
 800e368:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 800e36a:	f107 0218 	add.w	r2, r7, #24
 800e36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e370:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 800e372:	f107 0214 	add.w	r2, r7, #20
 800e376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e378:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800e37a:	f000 fc33 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800e37e:	f7ff ff0b 	bl	800e198 <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 800e382:	7d3b      	ldrb	r3, [r7, #20]
 800e384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 800e388:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3730      	adds	r7, #48	@ 0x30
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b088      	sub	sp, #32
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800e3a2:	6839      	ldr	r1, [r7, #0]
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7ff ff1d 	bl	800e1e4 <zb_ipc_m4_cb_info_alloc>
 800e3aa:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 800e3b2:	2370      	movs	r3, #112	@ 0x70
 800e3b4:	e031      	b.n	800e41a <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 800e3b6:	f000 fc53 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e3ba:	f000 fbfb 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e3be:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f042 0204 	orr.w	r2, r2, #4
 800e3c8:	701a      	strb	r2, [r3, #0]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f042 0202 	orr.w	r2, r2, #2
 800e3d0:	705a      	strb	r2, [r3, #1]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	709a      	strb	r2, [r3, #2]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f042 0202 	orr.w	r2, r2, #2
 800e3e2:	711a      	strb	r2, [r3, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	715a      	strb	r2, [r3, #5]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	719a      	strb	r2, [r3, #6]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800e3f6:	69fa      	ldr	r2, [r7, #28]
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800e3fc:	f000 fbf2 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 800e400:	f7ff ff18 	bl	800e234 <zb_ipc_m4_get_retval>
 800e404:	4603      	mov	r3, r0
 800e406:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800e408:	f7ff fec6 	bl	800e198 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d002      	beq.n	800e418 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 800e412:	69f8      	ldr	r0, [r7, #28]
 800e414:	f7ff ff03 	bl	800e21e <zb_ipc_m4_cb_info_free>
    }
    return status;
 800e418:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3720      	adds	r7, #32
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b084      	sub	sp, #16
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	460b      	mov	r3, r1
 800e42c:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 800e42e:	f000 fc17 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e432:	f000 fbbf 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e436:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f042 020d 	orr.w	r2, r2, #13
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	2200      	movs	r2, #0
 800e444:	f042 0202 	orr.w	r2, r2, #2
 800e448:	705a      	strb	r2, [r3, #1]
 800e44a:	2200      	movs	r2, #0
 800e44c:	709a      	strb	r2, [r3, #2]
 800e44e:	2200      	movs	r2, #0
 800e450:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	f042 0201 	orr.w	r2, r2, #1
 800e45a:	711a      	strb	r2, [r3, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	715a      	strb	r2, [r3, #5]
 800e460:	2200      	movs	r2, #0
 800e462:	719a      	strb	r2, [r3, #6]
 800e464:	2200      	movs	r2, #0
 800e466:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 800e468:	78fa      	ldrb	r2, [r7, #3]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800e46e:	f000 fbb9 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 800e472:	f7ff fedf 	bl	800e234 <zb_ipc_m4_get_retval>
 800e476:	4603      	mov	r3, r0
 800e478:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 800e47a:	f7ff fe8d 	bl	800e198 <Post_ZigbeeCmdProcessing>
    return val_ret;
 800e47e:	897b      	ldrh	r3, [r7, #10]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d101      	bne.n	800e49c <ZbApsAddrIsBcast+0x14>
        return true;
 800e498:	2301      	movs	r3, #1
 800e49a:	e012      	b.n	800e4c2 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d10d      	bne.n	800e4c0 <ZbApsAddrIsBcast+0x38>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	88db      	ldrh	r3, [r3, #6]
 800e4a8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d907      	bls.n	800e4c0 <ZbApsAddrIsBcast+0x38>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	88db      	ldrh	r3, [r3, #6]
 800e4b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d001      	beq.n	800e4c0 <ZbApsAddrIsBcast+0x38>
        return true;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e000      	b.n	800e4c2 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	370c      	adds	r7, #12
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b08a      	sub	sp, #40	@ 0x28
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
 800e4da:	460b      	mov	r3, r1
 800e4dc:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 800e4de:	897b      	ldrh	r3, [r7, #10]
 800e4e0:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ec:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 800e4ee:	f000 fbb7 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e4f2:	f000 fb5f 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e4f6:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f042 0210 	orr.w	r2, r2, #16
 800e500:	701a      	strb	r2, [r3, #0]
 800e502:	2200      	movs	r2, #0
 800e504:	f042 0202 	orr.w	r2, r2, #2
 800e508:	705a      	strb	r2, [r3, #1]
 800e50a:	2200      	movs	r2, #0
 800e50c:	709a      	strb	r2, [r3, #2]
 800e50e:	2200      	movs	r2, #0
 800e510:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800e512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e514:	2200      	movs	r2, #0
 800e516:	f042 0202 	orr.w	r2, r2, #2
 800e51a:	711a      	strb	r2, [r3, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	715a      	strb	r2, [r3, #5]
 800e520:	2200      	movs	r2, #0
 800e522:	719a      	strb	r2, [r3, #6]
 800e524:	2200      	movs	r2, #0
 800e526:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 800e528:	f107 0214 	add.w	r2, r7, #20
 800e52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 800e530:	f107 0210 	add.w	r2, r7, #16
 800e534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e536:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800e538:	f000 fb54 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800e53c:	f7ff fe2c 	bl	800e198 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 800e540:	7c3b      	ldrb	r3, [r7, #16]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3728      	adds	r7, #40	@ 0x28
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b086      	sub	sp, #24
 800e54e:	af00      	add	r7, sp, #0
 800e550:	60f8      	str	r0, [r7, #12]
 800e552:	60b9      	str	r1, [r7, #8]
 800e554:	607a      	str	r2, [r7, #4]
 800e556:	f000 fb83 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
 800e55a:	f000 fb2b 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e55e:	6178      	str	r0, [r7, #20]
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	2200      	movs	r2, #0
 800e564:	f042 0215 	orr.w	r2, r2, #21
 800e568:	701a      	strb	r2, [r3, #0]
 800e56a:	2200      	movs	r2, #0
 800e56c:	f042 0202 	orr.w	r2, r2, #2
 800e570:	705a      	strb	r2, [r3, #1]
 800e572:	2200      	movs	r2, #0
 800e574:	709a      	strb	r2, [r3, #2]
 800e576:	2200      	movs	r2, #0
 800e578:	70da      	strb	r2, [r3, #3]
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f042 0202 	orr.w	r2, r2, #2
 800e582:	711a      	strb	r2, [r3, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	715a      	strb	r2, [r3, #5]
 800e588:	2200      	movs	r2, #0
 800e58a:	719a      	strb	r2, [r3, #6]
 800e58c:	2200      	movs	r2, #0
 800e58e:	71da      	strb	r2, [r3, #7]
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	609a      	str	r2, [r3, #8]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	60da      	str	r2, [r3, #12]
 800e59c:	f000 fb22 	bl	800ebe4 <ZIGBEE_CmdTransfer>
 800e5a0:	f7ff fdfa 	bl	800e198 <Post_ZigbeeCmdProcessing>
 800e5a4:	3718      	adds	r7, #24
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b092      	sub	sp, #72	@ 0x48
 800e5ae:	af02      	add	r7, sp, #8
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	70fb      	strb	r3, [r7, #3]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7ff fe5e 	bl	800e27c <ZbExtendedAddress>
 800e5c0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800e5c8:	f107 0208 	add.w	r2, r7, #8
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	2320      	movs	r3, #32
 800e5d2:	21c1      	movs	r1, #193	@ 0xc1
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff ff7a 	bl	800e4ce <ZbApsGetIndex>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 800e5e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d120      	bne.n	800e62a <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 800e5e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	d011      	beq.n	800e614 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 800e5f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800e5f8:	4299      	cmp	r1, r3
 800e5fa:	bf08      	it	eq
 800e5fc:	4290      	cmpeq	r0, r2
 800e5fe:	d10b      	bne.n	800e618 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 800e600:	7c3b      	ldrb	r3, [r7, #16]
 800e602:	78fa      	ldrb	r2, [r7, #3]
 800e604:	429a      	cmp	r2, r3
 800e606:	d109      	bne.n	800e61c <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 800e608:	8a7b      	ldrh	r3, [r7, #18]
 800e60a:	883a      	ldrh	r2, [r7, #0]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d107      	bne.n	800e620 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 800e610:	2301      	movs	r3, #1
 800e612:	e00c      	b.n	800e62e <ZbApsBindSrcExists+0x84>
            continue;
 800e614:	bf00      	nop
 800e616:	e004      	b.n	800e622 <ZbApsBindSrcExists+0x78>
            continue;
 800e618:	bf00      	nop
 800e61a:	e002      	b.n	800e622 <ZbApsBindSrcExists+0x78>
            continue;
 800e61c:	bf00      	nop
 800e61e:	e000      	b.n	800e622 <ZbApsBindSrcExists+0x78>
            continue;
 800e620:	bf00      	nop
    for (i = 0;; i++) {
 800e622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e624:	3301      	adds	r3, #1
 800e626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800e628:	e7ce      	b.n	800e5c8 <ZbApsBindSrcExists+0x1e>
            break;
 800e62a:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3740      	adds	r7, #64	@ 0x40
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
	...

0800e638 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 800e644:	2300      	movs	r3, #0
 800e646:	4a24      	ldr	r2, [pc, #144]	@ (800e6d8 <ZbTimerAlloc+0xa0>)
 800e648:	210c      	movs	r1, #12
 800e64a:	2000      	movs	r0, #0
 800e64c:	f000 fa6d 	bl	800eb2a <zb_heap_alloc>
 800e650:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d039      	beq.n	800e6cc <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 800e664:	f000 fafc 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e668:	f000 faa4 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e66c:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2200      	movs	r2, #0
 800e672:	f042 0214 	orr.w	r2, r2, #20
 800e676:	701a      	strb	r2, [r3, #0]
 800e678:	2200      	movs	r2, #0
 800e67a:	705a      	strb	r2, [r3, #1]
 800e67c:	2200      	movs	r2, #0
 800e67e:	709a      	strb	r2, [r3, #2]
 800e680:	2200      	movs	r2, #0
 800e682:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	2200      	movs	r2, #0
 800e688:	f042 0201 	orr.w	r2, r2, #1
 800e68c:	711a      	strb	r2, [r3, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	715a      	strb	r2, [r3, #5]
 800e692:	2200      	movs	r2, #0
 800e694:	719a      	strb	r2, [r3, #6]
 800e696:	2200      	movs	r2, #0
 800e698:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 800e6a0:	f000 faa0 	bl	800ebe4 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 800e6a4:	f7ff fdc6 	bl	800e234 <zb_ipc_m4_get_retval>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 800e6b0:	f7ff fd72 	bl	800e198 <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d107      	bne.n	800e6cc <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4a06      	ldr	r2, [pc, #24]	@ (800e6d8 <ZbTimerAlloc+0xa0>)
 800e6c0:	6979      	ldr	r1, [r7, #20]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f000 fa40 	bl	800eb48 <zb_heap_free>
            timer = NULL;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 800e6cc:	697b      	ldr	r3, [r7, #20]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3718      	adds	r7, #24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	0801077c 	.word	0x0801077c

0800e6dc <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 800e6e4:	f000 fabc 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e6e8:	f000 fa64 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e6ec:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f042 0215 	orr.w	r2, r2, #21
 800e6f6:	701a      	strb	r2, [r3, #0]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	705a      	strb	r2, [r3, #1]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	709a      	strb	r2, [r3, #2]
 800e700:	2200      	movs	r2, #0
 800e702:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	f042 0201 	orr.w	r2, r2, #1
 800e70c:	711a      	strb	r2, [r3, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	715a      	strb	r2, [r3, #5]
 800e712:	2200      	movs	r2, #0
 800e714:	719a      	strb	r2, [r3, #6]
 800e716:	2200      	movs	r2, #0
 800e718:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	461a      	mov	r2, r3
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800e724:	f000 fa5e 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800e728:	f7ff fd36 	bl	800e198 <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 800e72c:	2300      	movs	r3, #0
 800e72e:	4a04      	ldr	r2, [pc, #16]	@ (800e740 <ZbTimerFree+0x64>)
 800e730:	6879      	ldr	r1, [r7, #4]
 800e732:	2000      	movs	r0, #0
 800e734:	f000 fa08 	bl	800eb48 <zb_heap_free>
}
 800e738:	bf00      	nop
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	0801077c 	.word	0x0801077c

0800e744 <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800e74e:	f000 fa87 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e752:	f000 fa2f 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e756:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f042 0217 	orr.w	r2, r2, #23
 800e760:	701a      	strb	r2, [r3, #0]
 800e762:	2200      	movs	r2, #0
 800e764:	705a      	strb	r2, [r3, #1]
 800e766:	2200      	movs	r2, #0
 800e768:	709a      	strb	r2, [r3, #2]
 800e76a:	2200      	movs	r2, #0
 800e76c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	f042 0202 	orr.w	r2, r2, #2
 800e776:	711a      	strb	r2, [r3, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	715a      	strb	r2, [r3, #5]
 800e77c:	2200      	movs	r2, #0
 800e77e:	719a      	strb	r2, [r3, #6]
 800e780:	2200      	movs	r2, #0
 800e782:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	461a      	mov	r2, r3
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800e794:	f000 fa26 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800e798:	f7ff fcfe 	bl	800e198 <Post_ZigbeeCmdProcessing>
}
 800e79c:	bf00      	nop
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a13      	ldr	r2, [pc, #76]	@ (800e800 <ZbTimeoutRemaining+0x5c>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d909      	bls.n	800e7ca <ZbTimeoutRemaining+0x26>
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7bc:	d805      	bhi.n	800e7ca <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 800e7be:	683a      	ldr	r2, [r7, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	e014      	b.n	800e7f4 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	4a0c      	ldr	r2, [pc, #48]	@ (800e800 <ZbTimeoutRemaining+0x5c>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d905      	bls.n	800e7de <ZbTimeoutRemaining+0x3a>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7d8:	d801      	bhi.n	800e7de <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	e00a      	b.n	800e7f4 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d301      	bcc.n	800e7ea <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	e004      	b.n	800e7f4 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3714      	adds	r7, #20
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	bffffffd 	.word	0xbffffffd

0800e804 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b08c      	sub	sp, #48	@ 0x30
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	607a      	str	r2, [r7, #4]
 800e80e:	603b      	str	r3, [r7, #0]
 800e810:	460b      	mov	r3, r1
 800e812:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 800e814:	897b      	ldrh	r3, [r7, #10]
 800e816:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 800e820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e822:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 800e824:	f000 fa1c 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e828:	f000 f9c4 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e82c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 800e82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e830:	2200      	movs	r2, #0
 800e832:	701a      	strb	r2, [r3, #0]
 800e834:	2200      	movs	r2, #0
 800e836:	f042 0203 	orr.w	r2, r2, #3
 800e83a:	705a      	strb	r2, [r3, #1]
 800e83c:	2200      	movs	r2, #0
 800e83e:	709a      	strb	r2, [r3, #2]
 800e840:	2200      	movs	r2, #0
 800e842:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800e844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e846:	2200      	movs	r2, #0
 800e848:	f042 0202 	orr.w	r2, r2, #2
 800e84c:	711a      	strb	r2, [r3, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	715a      	strb	r2, [r3, #5]
 800e852:	2200      	movs	r2, #0
 800e854:	719a      	strb	r2, [r3, #6]
 800e856:	2200      	movs	r2, #0
 800e858:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 800e85a:	f107 0218 	add.w	r2, r7, #24
 800e85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e860:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 800e862:	f107 0214 	add.w	r2, r7, #20
 800e866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e868:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800e86a:	f000 f9bb 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800e86e:	f7ff fc93 	bl	800e198 <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 800e872:	7d3b      	ldrb	r3, [r7, #20]
 800e874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 800e878:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3730      	adds	r7, #48	@ 0x30
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <ZbNwkGet>:
    return status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af02      	add	r7, sp, #8
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	607a      	str	r2, [r7, #4]
 800e88e:	603b      	str	r3, [r7, #0]
 800e890:	460b      	mov	r3, r1
 800e892:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 800e894:	8979      	ldrh	r1, [r7, #10]
 800e896:	2300      	movs	r3, #0
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f7ff ffb0 	bl	800e804 <ZbNwkGetIndex>
 800e8a4:	4603      	mov	r3, r0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b086      	sub	sp, #24
 800e8b2:	af02      	add	r7, sp, #8
 800e8b4:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 800e8b6:	f107 020c 	add.w	r2, r7, #12
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	2304      	movs	r3, #4
 800e8c0:	f241 111d 	movw	r1, #4381	@ 0x111d
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff fd25 	bl	800e314 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 800e8da:	f000 f9c1 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e8de:	f000 f969 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e8e2:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f042 0211 	orr.w	r2, r2, #17
 800e8ec:	701a      	strb	r2, [r3, #0]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f042 0204 	orr.w	r2, r2, #4
 800e8f4:	705a      	strb	r2, [r3, #1]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	709a      	strb	r2, [r3, #2]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	711a      	strb	r2, [r3, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	715a      	strb	r2, [r3, #5]
 800e908:	2200      	movs	r2, #0
 800e90a:	719a      	strb	r2, [r3, #6]
 800e90c:	2200      	movs	r2, #0
 800e90e:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800e910:	f000 f968 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 800e914:	f7ff fc8e 	bl	800e234 <zb_ipc_m4_get_retval>
 800e918:	4603      	mov	r3, r0
 800e91a:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 800e91c:	f7ff fc3c 	bl	800e198 <Post_ZigbeeCmdProcessing>
    return rc;
 800e920:	78fb      	ldrb	r3, [r7, #3]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b088      	sub	sp, #32
 800e92e:	af00      	add	r7, sp, #0
 800e930:	60f8      	str	r0, [r7, #12]
 800e932:	60b9      	str	r1, [r7, #8]
 800e934:	607a      	str	r2, [r7, #4]
 800e936:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d013      	beq.n	800e96a <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f7ff fc4d 	bl	800e1e4 <zb_ipc_m4_cb_info_alloc>
 800e94a:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d101      	bne.n	800e956 <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 800e952:	2389      	movs	r3, #137	@ 0x89
 800e954:	e03e      	b.n	800e9d4 <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff fd95 	bl	800e488 <ZbApsAddrIsBcast>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	2201      	movs	r2, #1
 800e968:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 800e96a:	f000 f979 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e96e:	f000 f921 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e972:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	2200      	movs	r2, #0
 800e978:	f042 0212 	orr.w	r2, r2, #18
 800e97c:	701a      	strb	r2, [r3, #0]
 800e97e:	2200      	movs	r2, #0
 800e980:	f042 0204 	orr.w	r2, r2, #4
 800e984:	705a      	strb	r2, [r3, #1]
 800e986:	2200      	movs	r2, #0
 800e988:	709a      	strb	r2, [r3, #2]
 800e98a:	2200      	movs	r2, #0
 800e98c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2200      	movs	r2, #0
 800e992:	f042 0202 	orr.w	r2, r2, #2
 800e996:	711a      	strb	r2, [r3, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	715a      	strb	r2, [r3, #5]
 800e99c:	2200      	movs	r2, #0
 800e99e:	719a      	strb	r2, [r3, #6]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800e9aa:	69fa      	ldr	r2, [r7, #28]
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800e9b0:	f000 f918 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800e9b4:	f7ff fc3e 	bl	800e234 <zb_ipc_m4_get_retval>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800e9bc:	f7ff fbec 	bl	800e198 <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d005      	beq.n	800e9d2 <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 800e9cc:	69f8      	ldr	r0, [r7, #28]
 800e9ce:	f7ff fc26 	bl	800e21e <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 800e9d2:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3720      	adds	r7, #32
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800e9ea:	f000 f939 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800e9ee:	f000 f8e1 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800e9f2:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f042 0214 	orr.w	r2, r2, #20
 800e9fc:	701a      	strb	r2, [r3, #0]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f042 0204 	orr.w	r2, r2, #4
 800ea04:	705a      	strb	r2, [r3, #1]
 800ea06:	2200      	movs	r2, #0
 800ea08:	709a      	strb	r2, [r3, #2]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f042 0204 	orr.w	r2, r2, #4
 800ea16:	711a      	strb	r2, [r3, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	715a      	strb	r2, [r3, #5]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	719a      	strb	r2, [r3, #6]
 800ea20:	2200      	movs	r2, #0
 800ea22:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 800ea36:	78fa      	ldrb	r2, [r7, #3]
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800ea3c:	f000 f8d2 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800ea40:	f7ff fbaa 	bl	800e198 <Post_ZigbeeCmdProcessing>
}
 800ea44:	bf00      	nop
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <ZbZclClusterBind>:
    return rc;
}

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	4608      	mov	r0, r1
 800ea56:	4611      	mov	r1, r2
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	70fb      	strb	r3, [r7, #3]
 800ea5e:	460b      	mov	r3, r1
 800ea60:	803b      	strh	r3, [r7, #0]
 800ea62:	4613      	mov	r3, r2
 800ea64:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 800ea66:	f000 f8fb 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ea6a:	f000 f8a3 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ea6e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f042 0204 	orr.w	r2, r2, #4
 800ea78:	701a      	strb	r2, [r3, #0]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f042 0204 	orr.w	r2, r2, #4
 800ea80:	705a      	strb	r2, [r3, #1]
 800ea82:	2200      	movs	r2, #0
 800ea84:	709a      	strb	r2, [r3, #2]
 800ea86:	2200      	movs	r2, #0
 800ea88:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f042 0204 	orr.w	r2, r2, #4
 800ea92:	711a      	strb	r2, [r3, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	715a      	strb	r2, [r3, #5]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	719a      	strb	r2, [r3, #6]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 800eaa6:	78fa      	ldrb	r2, [r7, #3]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 800eaac:	883a      	ldrh	r2, [r7, #0]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 800eab2:	78ba      	ldrb	r2, [r7, #2]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800eab8:	f000 f894 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800eabc:	f7ff fbba 	bl	800e234 <zb_ipc_m4_get_retval>
 800eac0:	4603      	mov	r3, r0
 800eac2:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 800eac4:	f7ff fb68 	bl	800e198 <Post_ZigbeeCmdProcessing>
    return status;
 800eac8:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800eada:	f000 f8c1 	bl	800ec60 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800eade:	f000 f869 	bl	800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800eae2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f042 0206 	orr.w	r2, r2, #6
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f042 0204 	orr.w	r2, r2, #4
 800eaf4:	705a      	strb	r2, [r3, #1]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	709a      	strb	r2, [r3, #2]
 800eafa:	2200      	movs	r2, #0
 800eafc:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	f042 0201 	orr.w	r2, r2, #1
 800eb06:	711a      	strb	r2, [r3, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	715a      	strb	r2, [r3, #5]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	719a      	strb	r2, [r3, #6]
 800eb10:	2200      	movs	r2, #0
 800eb12:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800eb1a:	f000 f863 	bl	800ebe4 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800eb1e:	f7ff fb3b 	bl	800e198 <Post_ZigbeeCmdProcessing>
}
 800eb22:	bf00      	nop
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	60f8      	str	r0, [r7, #12]
 800eb32:	60b9      	str	r1, [r7, #8]
 800eb34:	607a      	str	r2, [r7, #4]
 800eb36:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 800eb38:	68b8      	ldr	r0, [r7, #8]
 800eb3a:	f000 fcc7 	bl	800f4cc <malloc>
 800eb3e:	4603      	mov	r3, r0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
 800eb54:	603b      	str	r3, [r7, #0]
    free(ptr);
 800eb56:	68b8      	ldr	r0, [r7, #8]
 800eb58:	f000 fcc0 	bl	800f4dc <free>
}
 800eb5c:	bf00      	nop
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b087      	sub	sp, #28
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
 800eb70:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 800eb76:	e00e      	b.n	800eb96 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 800eb78:	89fb      	ldrh	r3, [r7, #14]
 800eb7a:	0a1b      	lsrs	r3, r3, #8
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	89fb      	ldrh	r3, [r7, #14]
 800eb80:	b2d9      	uxtb	r1, r3
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	1c58      	adds	r0, r3, #1
 800eb86:	6178      	str	r0, [r7, #20]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	404b      	eors	r3, r1
 800eb8c:	4908      	ldr	r1, [pc, #32]	@ (800ebb0 <WpanCrc+0x4c>)
 800eb8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb92:	4053      	eors	r3, r2
 800eb94:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	1e5a      	subs	r2, r3, #1
 800eb9a:	607a      	str	r2, [r7, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1eb      	bne.n	800eb78 <WpanCrc+0x14>
    }
    return crc;
 800eba0:	89fb      	ldrh	r3, [r7, #14]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	371c      	adds	r7, #28
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	08010910 	.word	0x08010910

0800ebb4 <ZIGBEE_Get_OTCmdPayloadBuffer>:
{
  p_ZIGBEE_otcmdbuffer = p_buffer;
}

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800ebb8:	4b03      	ldr	r3, [pc, #12]	@ (800ebc8 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	330c      	adds	r3, #12
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	2000040c 	.word	0x2000040c

0800ebcc <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800ebd0:	4b03      	ldr	r3, [pc, #12]	@ (800ebe0 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	330b      	adds	r3, #11
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	2000040c 	.word	0x2000040c

0800ebe4 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800ebea:	4b0f      	ldr	r3, [pc, #60]	@ (800ec28 <ZIGBEE_CmdTransfer+0x44>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	330c      	adds	r3, #12
 800ebf0:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800ebf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec28 <ZIGBEE_CmdTransfer+0x44>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ebfc:	725a      	strb	r2, [r3, #9]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f042 0202 	orr.w	r2, r2, #2
 800ec04:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	3302      	adds	r3, #2
 800ec0c:	b2da      	uxtb	r2, r3
 800ec0e:	4b06      	ldr	r3, [pc, #24]	@ (800ec28 <ZIGBEE_CmdTransfer+0x44>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	0092      	lsls	r2, r2, #2
 800ec14:	b2d2      	uxtb	r2, r2
 800ec16:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 800ec18:	f7ff f9e4 	bl	800dfe4 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800ec1c:	f000 f827 	bl	800ec6e <Wait_Getting_Ack_From_M0>
}
 800ec20:	bf00      	nop
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	2000040c 	.word	0x2000040c

0800ec2c <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800ec34:	f000 f822 	bl	800ec7c <Receive_Ack_From_M0>
}
 800ec38:	bf00      	nop
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 800ec48:	4a04      	ldr	r2, [pc, #16]	@ (800ec5c <TL_ZIGBEE_NotReceived+0x1c>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800ec4e:	f000 f81d 	bl	800ec8c <Receive_Notification_From_M0>
}
 800ec52:	bf00      	nop
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20000410 	.word	0x20000410

0800ec60 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800ec64:	2004      	movs	r0, #4
 800ec66:	f000 fb83 	bl	800f370 <UTIL_SEQ_WaitEvt>
}
 800ec6a:	bf00      	nop
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800ec72:	2002      	movs	r0, #2
 800ec74:	f000 fb7c 	bl	800f370 <UTIL_SEQ_WaitEvt>
}
 800ec78:	bf00      	nop
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800ec80:	2002      	movs	r0, #2
 800ec82:	f000 fb55 	bl	800f330 <UTIL_SEQ_SetEvt>
}
 800ec86:	bf00      	nop
 800ec88:	bd80      	pop	{r7, pc}
	...

0800ec8c <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 800ec90:	4b05      	ldr	r3, [pc, #20]	@ (800eca8 <Receive_Notification_From_M0+0x1c>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	3301      	adds	r3, #1
 800ec96:	4a04      	ldr	r2, [pc, #16]	@ (800eca8 <Receive_Notification_From_M0+0x1c>)
 800ec98:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	2001      	movs	r0, #1
 800ec9e:	f000 fb1b 	bl	800f2d8 <UTIL_SEQ_SetTask>
}
 800eca2:	bf00      	nop
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20000418 	.word	0x20000418

0800ecac <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800ecb4:	4a07      	ldr	r2, [pc, #28]	@ (800ecd4 <TL_ZIGBEE_M0RequestReceived+0x28>)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 800ecba:	4b07      	ldr	r3, [pc, #28]	@ (800ecd8 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	4a05      	ldr	r2, [pc, #20]	@ (800ecd8 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800ecc2:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	2002      	movs	r0, #2
 800ecc8:	f000 fb06 	bl	800f2d8 <UTIL_SEQ_SetTask>
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	20000414 	.word	0x20000414
 800ecd8:	2000041c 	.word	0x2000041c

0800ecdc <APP_ZIGBEE_cyclic_reporting>:
  }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

void APP_ZIGBEE_cyclic_reporting(struct APP_ZIGBEE_cyclic_data *data){
 800ecdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece0:	b083      	sub	sp, #12
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
  ZbZclAttrIntegerWrite(zigbee_app_info.temperature_meas_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->temperature);
 800ece6:	4b1e      	ldr	r3, [pc, #120]	@ (800ed60 <APP_ZIGBEE_cyclic_reporting+0x84>)
 800ece8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecf0:	b21b      	sxth	r3, r3
 800ecf2:	17de      	asrs	r6, r3, #31
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4632      	mov	r2, r6
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	460a      	mov	r2, r1
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	f7f2 feb0 	bl	8001a62 <ZbZclAttrIntegerWrite>
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->humidity);
 800ed02:	4b17      	ldr	r3, [pc, #92]	@ (800ed60 <APP_ZIGBEE_cyclic_reporting+0x84>)
 800ed04:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed0c:	b21b      	sxth	r3, r3
 800ed0e:	17da      	asrs	r2, r3, #31
 800ed10:	469a      	mov	sl, r3
 800ed12:	4693      	mov	fp, r2
 800ed14:	4652      	mov	r2, sl
 800ed16:	465b      	mov	r3, fp
 800ed18:	2100      	movs	r1, #0
 800ed1a:	f7f2 fea2 	bl	8001a62 <ZbZclAttrIntegerWrite>
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_3, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->soil_moisture_1);
 800ed1e:	4b10      	ldr	r3, [pc, #64]	@ (800ed60 <APP_ZIGBEE_cyclic_reporting+0x84>)
 800ed20:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ed28:	b21b      	sxth	r3, r3
 800ed2a:	17da      	asrs	r2, r3, #31
 800ed2c:	4698      	mov	r8, r3
 800ed2e:	4691      	mov	r9, r2
 800ed30:	4642      	mov	r2, r8
 800ed32:	464b      	mov	r3, r9
 800ed34:	2100      	movs	r1, #0
 800ed36:	f7f2 fe94 	bl	8001a62 <ZbZclAttrIntegerWrite>
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_4, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->soil_moisture_2);
 800ed3a:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <APP_ZIGBEE_cyclic_reporting+0x84>)
 800ed3c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ed44:	b21b      	sxth	r3, r3
 800ed46:	17da      	asrs	r2, r3, #31
 800ed48:	461c      	mov	r4, r3
 800ed4a:	4615      	mov	r5, r2
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	462b      	mov	r3, r5
 800ed50:	2100      	movs	r1, #0
 800ed52:	f7f2 fe86 	bl	8001a62 <ZbZclAttrIntegerWrite>
}
 800ed56:	bf00      	nop
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	20000420 	.word	0x20000420

0800ed64 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	685a      	ldr	r2, [r3, #4]
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	041b      	lsls	r3, r3, #16
 800ed76:	43db      	mvns	r3, r3
 800ed78:	401a      	ands	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	605a      	str	r2, [r3, #4]
}
 800ed7e:	bf00      	nop
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	041b      	lsls	r3, r3, #16
 800ed9c:	431a      	orrs	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	605a      	str	r2, [r3, #4]
}
 800eda2:	bf00      	nop
 800eda4:	370c      	adds	r7, #12
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr

0800edae <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800edae:	b480      	push	{r7}
 800edb0:	b083      	sub	sp, #12
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	685a      	ldr	r2, [r3, #4]
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	431a      	orrs	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	605a      	str	r2, [r3, #4]
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	609a      	str	r2, [r3, #8]
}
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	041a      	lsls	r2, r3, #16
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	609a      	str	r2, [r3, #8]
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	68da      	ldr	r2, [r3, #12]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d101      	bne.n	800ee26 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800ee22:	2301      	movs	r3, #1
 800ee24:	e000      	b.n	800ee28 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800ee26:	2300      	movs	r3, #0
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	69da      	ldr	r2, [r3, #28]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	4013      	ands	r3, r2
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d101      	bne.n	800ee50 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e000      	b.n	800ee52 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
	...

0800ee60 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800ee64:	2102      	movs	r1, #2
 800ee66:	4828      	ldr	r0, [pc, #160]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800ee68:	f7ff ffe4 	bl	800ee34 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d008      	beq.n	800ee84 <HW_IPCC_Rx_Handler+0x24>
 800ee72:	4b25      	ldr	r3, [pc, #148]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f003 0302 	and.w	r3, r3, #2
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d102      	bne.n	800ee84 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800ee7e:	f000 f8af 	bl	800efe0 <HW_IPCC_SYS_EvtHandler>
 800ee82:	e03e      	b.n	800ef02 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800ee84:	2104      	movs	r1, #4
 800ee86:	4820      	ldr	r0, [pc, #128]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800ee88:	f7ff ffd4 	bl	800ee34 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d008      	beq.n	800eea4 <HW_IPCC_Rx_Handler+0x44>
 800ee92:	4b1d      	ldr	r3, [pc, #116]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f003 0304 	and.w	r3, r3, #4
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d102      	bne.n	800eea4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800ee9e:	f000 f8c5 	bl	800f02c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800eea2:	e02e      	b.n	800ef02 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800eea4:	2110      	movs	r1, #16
 800eea6:	4818      	ldr	r0, [pc, #96]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800eea8:	f7ff ffc4 	bl	800ee34 <LL_C2_IPCC_IsActiveFlag_CHx>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d008      	beq.n	800eec4 <HW_IPCC_Rx_Handler+0x64>
 800eeb2:	4b15      	ldr	r3, [pc, #84]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	f003 0310 	and.w	r3, r3, #16
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800eebe:	f000 f8c1 	bl	800f044 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800eec2:	e01e      	b.n	800ef02 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800eec4:	2101      	movs	r1, #1
 800eec6:	4810      	ldr	r0, [pc, #64]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800eec8:	f7ff ffb4 	bl	800ee34 <LL_C2_IPCC_IsActiveFlag_CHx>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d008      	beq.n	800eee4 <HW_IPCC_Rx_Handler+0x84>
 800eed2:	4b0d      	ldr	r3, [pc, #52]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800eed4:	685b      	ldr	r3, [r3, #4]
 800eed6:	f003 0301 	and.w	r3, r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d102      	bne.n	800eee4 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800eede:	f000 f85b 	bl	800ef98 <HW_IPCC_BLE_EvtHandler>
 800eee2:	e00e      	b.n	800ef02 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800eee4:	2108      	movs	r1, #8
 800eee6:	4808      	ldr	r0, [pc, #32]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800eee8:	f7ff ffa4 	bl	800ee34 <LL_C2_IPCC_IsActiveFlag_CHx>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d008      	beq.n	800ef04 <HW_IPCC_Rx_Handler+0xa4>
 800eef2:	4b05      	ldr	r3, [pc, #20]	@ (800ef08 <HW_IPCC_Rx_Handler+0xa8>)
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	f003 0308 	and.w	r3, r3, #8
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d102      	bne.n	800ef04 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800eefe:	f000 f8e3 	bl	800f0c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ef02:	bf00      	nop
 800ef04:	bf00      	nop
}
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	58000c00 	.word	0x58000c00

0800ef0c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ef10:	2102      	movs	r1, #2
 800ef12:	4820      	ldr	r0, [pc, #128]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef14:	f7ff ff79 	bl	800ee0a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d107      	bne.n	800ef2e <HW_IPCC_Tx_Handler+0x22>
 800ef1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d101      	bne.n	800ef2e <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ef2a:	f000 f84d 	bl	800efc8 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800ef2e:	2104      	movs	r1, #4
 800ef30:	4818      	ldr	r0, [pc, #96]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef32:	f7ff ff6a 	bl	800ee0a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d108      	bne.n	800ef4e <HW_IPCC_Tx_Handler+0x42>
 800ef3c:	4b15      	ldr	r3, [pc, #84]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 800ef48:	f000 f864 	bl	800f014 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 800ef4c:	e01e      	b.n	800ef8c <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ef4e:	2108      	movs	r1, #8
 800ef50:	4810      	ldr	r0, [pc, #64]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef52:	f7ff ff5a 	bl	800ee0a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d108      	bne.n	800ef6e <HW_IPCC_Tx_Handler+0x62>
 800ef5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d102      	bne.n	800ef6e <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ef68:	f000 f89a 	bl	800f0a0 <HW_IPCC_MM_FreeBufHandler>
 800ef6c:	e00e      	b.n	800ef8c <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ef6e:	2120      	movs	r1, #32
 800ef70:	4808      	ldr	r0, [pc, #32]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef72:	f7ff ff4a 	bl	800ee0a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d108      	bne.n	800ef8e <HW_IPCC_Tx_Handler+0x82>
 800ef7c:	4b05      	ldr	r3, [pc, #20]	@ (800ef94 <HW_IPCC_Tx_Handler+0x88>)
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d102      	bne.n	800ef8e <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ef88:	f000 f812 	bl	800efb0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ef8c:	bf00      	nop
 800ef8e:	bf00      	nop
}
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	58000c00 	.word	0x58000c00

0800ef98 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800ef9c:	f7fe ffb0 	bl	800df00 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800efa0:	2101      	movs	r1, #1
 800efa2:	4802      	ldr	r0, [pc, #8]	@ (800efac <HW_IPCC_BLE_EvtHandler+0x14>)
 800efa4:	f7ff ff14 	bl	800edd0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800efa8:	bf00      	nop
}
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	58000c00 	.word	0x58000c00

0800efb0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800efb4:	2120      	movs	r1, #32
 800efb6:	4803      	ldr	r0, [pc, #12]	@ (800efc4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800efb8:	f7ff fee7 	bl	800ed8a <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800efbc:	f7fe ffd0 	bl	800df60 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800efc0:	bf00      	nop
}
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	58000c00 	.word	0x58000c00

0800efc8 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800efcc:	2102      	movs	r1, #2
 800efce:	4803      	ldr	r0, [pc, #12]	@ (800efdc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800efd0:	f7ff fedb 	bl	800ed8a <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800efd4:	f7fe ffce 	bl	800df74 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800efd8:	bf00      	nop
}
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	58000c00 	.word	0x58000c00

0800efe0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800efe4:	f7fe ffdc 	bl	800dfa0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800efe8:	2102      	movs	r1, #2
 800efea:	4802      	ldr	r0, [pc, #8]	@ (800eff4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800efec:	f7ff fef0 	bl	800edd0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800eff0:	bf00      	nop
}
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	58000c00 	.word	0x58000c00

0800eff8 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

  return;
}

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800effc:	2104      	movs	r1, #4
 800effe:	4804      	ldr	r0, [pc, #16]	@ (800f010 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800f000:	f7ff fef4 	bl	800edec <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800f004:	2104      	movs	r1, #4
 800f006:	4802      	ldr	r0, [pc, #8]	@ (800f010 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800f008:	f7ff feac 	bl	800ed64 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800f00c:	bf00      	nop
}
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	58000c00 	.word	0x58000c00

0800f014 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

  return;
}

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800f018:	2104      	movs	r1, #4
 800f01a:	4803      	ldr	r0, [pc, #12]	@ (800f028 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 800f01c:	f7ff feb5 	bl	800ed8a <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 800f020:	f7fe ffee 	bl	800e000 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 800f024:	bf00      	nop
}
 800f026:	bd80      	pop	{r7, pc}
 800f028:	58000c00 	.word	0x58000c00

0800f02c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800f030:	2104      	movs	r1, #4
 800f032:	4803      	ldr	r0, [pc, #12]	@ (800f040 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 800f034:	f7ff febb 	bl	800edae <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 800f038:	f7fe ffee 	bl	800e018 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 800f03c:	bf00      	nop
}
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	58000c00 	.word	0x58000c00

0800f044 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800f048:	2110      	movs	r1, #16
 800f04a:	4803      	ldr	r0, [pc, #12]	@ (800f058 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 800f04c:	f7ff feaf 	bl	800edae <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 800f050:	f7fe ffee 	bl	800e030 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 800f054:	bf00      	nop
}
 800f056:	bd80      	pop	{r7, pc}
 800f058:	58000c00 	.word	0x58000c00

0800f05c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800f064:	2108      	movs	r1, #8
 800f066:	480c      	ldr	r0, [pc, #48]	@ (800f098 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f068:	f7ff fecf 	bl	800ee0a <LL_C1_IPCC_IsActiveFlag_CHx>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d007      	beq.n	800f082 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800f072:	4a0a      	ldr	r2, [pc, #40]	@ (800f09c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f078:	2108      	movs	r1, #8
 800f07a:	4807      	ldr	r0, [pc, #28]	@ (800f098 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f07c:	f7ff fe72 	bl	800ed64 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800f080:	e006      	b.n	800f090 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f086:	2108      	movs	r1, #8
 800f088:	4803      	ldr	r0, [pc, #12]	@ (800f098 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800f08a:	f7ff feaf 	bl	800edec <LL_C1_IPCC_SetFlag_CHx>
  return;
 800f08e:	bf00      	nop
}
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	58000c00 	.word	0x58000c00
 800f09c:	20000458 	.word	0x20000458

0800f0a0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f0a4:	2108      	movs	r1, #8
 800f0a6:	4806      	ldr	r0, [pc, #24]	@ (800f0c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f0a8:	f7ff fe6f 	bl	800ed8a <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800f0ac:	4b05      	ldr	r3, [pc, #20]	@ (800f0c4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800f0b2:	2108      	movs	r1, #8
 800f0b4:	4802      	ldr	r0, [pc, #8]	@ (800f0c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800f0b6:	f7ff fe99 	bl	800edec <LL_C1_IPCC_SetFlag_CHx>

  return;
 800f0ba:	bf00      	nop
}
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	58000c00 	.word	0x58000c00
 800f0c4:	20000458 	.word	0x20000458

0800f0c8 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800f0cc:	f7fe fff4 	bl	800e0b8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800f0d0:	2108      	movs	r1, #8
 800f0d2:	4802      	ldr	r0, [pc, #8]	@ (800f0dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800f0d4:	f7ff fe7c 	bl	800edd0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800f0d8:	bf00      	nop
}
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	58000c00 	.word	0x58000c00

0800f0e0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b090      	sub	sp, #64	@ 0x40
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800f0e8:	4b73      	ldr	r3, [pc, #460]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800f0ee:	4b72      	ldr	r3, [pc, #456]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	4a70      	ldr	r2, [pc, #448]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f0f8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800f0fa:	4b70      	ldr	r3, [pc, #448]	@ (800f2bc <UTIL_SEQ_Run+0x1dc>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800f100:	4b6f      	ldr	r3, [pc, #444]	@ (800f2c0 <UTIL_SEQ_Run+0x1e0>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800f106:	4b6f      	ldr	r3, [pc, #444]	@ (800f2c4 <UTIL_SEQ_Run+0x1e4>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800f10c:	4b6e      	ldr	r3, [pc, #440]	@ (800f2c8 <UTIL_SEQ_Run+0x1e8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f112:	e08d      	b.n	800f230 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800f114:	2300      	movs	r3, #0
 800f116:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f118:	e002      	b.n	800f120 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800f11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f11c:	3301      	adds	r3, #1
 800f11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800f120:	4a6a      	ldr	r2, [pc, #424]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f124:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12a:	401a      	ands	r2, r3
 800f12c:	4b62      	ldr	r3, [pc, #392]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4013      	ands	r3, r2
 800f132:	2b00      	cmp	r3, #0
 800f134:	d0f1      	beq.n	800f11a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800f136:	4a65      	ldr	r2, [pc, #404]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f13a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	401a      	ands	r2, r3
 800f142:	4b5d      	ldr	r3, [pc, #372]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4013      	ands	r3, r2
 800f148:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f14a:	4a60      	ldr	r2, [pc, #384]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	4413      	add	r3, r2
 800f152:	685a      	ldr	r2, [r3, #4]
 800f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f156:	4013      	ands	r3, r2
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d106      	bne.n	800f16a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f15c:	4a5b      	ldr	r2, [pc, #364]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	4413      	add	r3, r2
 800f164:	f04f 32ff 	mov.w	r2, #4294967295
 800f168:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f16a:	4a58      	ldr	r2, [pc, #352]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	4413      	add	r3, r2
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f176:	4013      	ands	r3, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 f951 	bl	800f420 <SEQ_BitPosition>
 800f17e:	4603      	mov	r3, r0
 800f180:	461a      	mov	r2, r3
 800f182:	4b53      	ldr	r3, [pc, #332]	@ (800f2d0 <UTIL_SEQ_Run+0x1f0>)
 800f184:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f186:	4a51      	ldr	r2, [pc, #324]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f18a:	00db      	lsls	r3, r3, #3
 800f18c:	4413      	add	r3, r2
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	4b4f      	ldr	r3, [pc, #316]	@ (800f2d0 <UTIL_SEQ_Run+0x1f0>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2101      	movs	r1, #1
 800f196:	fa01 f303 	lsl.w	r3, r1, r3
 800f19a:	43db      	mvns	r3, r3
 800f19c:	401a      	ands	r2, r3
 800f19e:	494b      	ldr	r1, [pc, #300]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a2:	00db      	lsls	r3, r3, #3
 800f1a4:	440b      	add	r3, r1
 800f1a6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800f1ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800f1ae:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f1b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1b2:	b672      	cpsid	i
}
 800f1b4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f1b6:	4b46      	ldr	r3, [pc, #280]	@ (800f2d0 <UTIL_SEQ_Run+0x1f0>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c0:	43da      	mvns	r2, r3
 800f1c2:	4b3e      	ldr	r3, [pc, #248]	@ (800f2bc <UTIL_SEQ_Run+0x1dc>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	4a3c      	ldr	r2, [pc, #240]	@ (800f2bc <UTIL_SEQ_Run+0x1dc>)
 800f1ca:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1d0:	e013      	b.n	800f1fa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	4a3d      	ldr	r2, [pc, #244]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f1d8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f1dc:	4b3c      	ldr	r3, [pc, #240]	@ (800f2d0 <UTIL_SEQ_Run+0x1f0>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800f1e6:	43da      	mvns	r2, r3
 800f1e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	400a      	ands	r2, r1
 800f1ee:	4937      	ldr	r1, [pc, #220]	@ (800f2cc <UTIL_SEQ_Run+0x1ec>)
 800f1f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d1e8      	bne.n	800f1d2 <UTIL_SEQ_Run+0xf2>
 800f200:	6a3b      	ldr	r3, [r7, #32]
 800f202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	f383 8810 	msr	PRIMASK, r3
}
 800f20a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f20c:	4b30      	ldr	r3, [pc, #192]	@ (800f2d0 <UTIL_SEQ_Run+0x1f0>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a30      	ldr	r2, [pc, #192]	@ (800f2d4 <UTIL_SEQ_Run+0x1f4>)
 800f212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f216:	4798      	blx	r3

    local_taskset = TaskSet;
 800f218:	4b28      	ldr	r3, [pc, #160]	@ (800f2bc <UTIL_SEQ_Run+0x1dc>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800f21e:	4b28      	ldr	r3, [pc, #160]	@ (800f2c0 <UTIL_SEQ_Run+0x1e0>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800f224:	4b27      	ldr	r3, [pc, #156]	@ (800f2c4 <UTIL_SEQ_Run+0x1e4>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800f22a:	4b27      	ldr	r3, [pc, #156]	@ (800f2c8 <UTIL_SEQ_Run+0x1e8>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	401a      	ands	r2, r3
 800f236:	4b20      	ldr	r3, [pc, #128]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4013      	ands	r3, r2
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d005      	beq.n	800f24c <UTIL_SEQ_Run+0x16c>
 800f240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f244:	4013      	ands	r3, r2
 800f246:	2b00      	cmp	r3, #0
 800f248:	f43f af64 	beq.w	800f114 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f24c:	4b20      	ldr	r3, [pc, #128]	@ (800f2d0 <UTIL_SEQ_Run+0x1f0>)
 800f24e:	f04f 32ff 	mov.w	r2, #4294967295
 800f252:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f254:	f000 f8d6 	bl	800f404 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f258:	f3ef 8310 	mrs	r3, PRIMASK
 800f25c:	613b      	str	r3, [r7, #16]
  return(result);
 800f25e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f262:	b672      	cpsid	i
}
 800f264:	bf00      	nop
  local_taskset = TaskSet;
 800f266:	4b15      	ldr	r3, [pc, #84]	@ (800f2bc <UTIL_SEQ_Run+0x1dc>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800f26c:	4b14      	ldr	r3, [pc, #80]	@ (800f2c0 <UTIL_SEQ_Run+0x1e0>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800f272:	4b14      	ldr	r3, [pc, #80]	@ (800f2c4 <UTIL_SEQ_Run+0x1e4>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f278:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27c:	401a      	ands	r2, r3
 800f27e:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4013      	ands	r3, r2
 800f284:	2b00      	cmp	r3, #0
 800f286:	d107      	bne.n	800f298 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f288:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c8 <UTIL_SEQ_Run+0x1e8>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f28e:	4013      	ands	r3, r2
 800f290:	2b00      	cmp	r3, #0
 800f292:	d101      	bne.n	800f298 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f294:	f7f6 fa80 	bl	8005798 <UTIL_SEQ_Idle>
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f383 8810 	msr	PRIMASK, r3
}
 800f2a2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f2a4:	f000 f8b5 	bl	800f412 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f2a8:	4a03      	ldr	r2, [pc, #12]	@ (800f2b8 <UTIL_SEQ_Run+0x1d8>)
 800f2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ac:	6013      	str	r3, [r2, #0]

  return;
 800f2ae:	bf00      	nop
}
 800f2b0:	3740      	adds	r7, #64	@ 0x40
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	2000001c 	.word	0x2000001c
 800f2bc:	2000045c 	.word	0x2000045c
 800f2c0:	20000460 	.word	0x20000460
 800f2c4:	20000018 	.word	0x20000018
 800f2c8:	20000464 	.word	0x20000464
 800f2cc:	200004ec 	.word	0x200004ec
 800f2d0:	20000468 	.word	0x20000468
 800f2d4:	2000046c 	.word	0x2000046c

0800f2d8 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2e2:	f3ef 8310 	mrs	r3, PRIMASK
 800f2e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f2ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2ec:	b672      	cpsid	i
}
 800f2ee:	bf00      	nop

  TaskSet |= TaskId_bm;
 800f2f0:	4b0d      	ldr	r3, [pc, #52]	@ (800f328 <UTIL_SEQ_SetTask+0x50>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800f328 <UTIL_SEQ_SetTask+0x50>)
 800f2fa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f2fc:	4a0b      	ldr	r2, [pc, #44]	@ (800f32c <UTIL_SEQ_SetTask+0x54>)
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	431a      	orrs	r2, r3
 800f308:	4908      	ldr	r1, [pc, #32]	@ (800f32c <UTIL_SEQ_SetTask+0x54>)
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	f383 8810 	msr	PRIMASK, r3
}
 800f31a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f31c:	bf00      	nop
}
 800f31e:	371c      	adds	r7, #28
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	2000045c 	.word	0x2000045c
 800f32c:	200004ec 	.word	0x200004ec

0800f330 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f330:	b480      	push	{r7}
 800f332:	b087      	sub	sp, #28
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f338:	f3ef 8310 	mrs	r3, PRIMASK
 800f33c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f33e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f340:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f342:	b672      	cpsid	i
}
 800f344:	bf00      	nop

  EvtSet |= EvtId_bm;
 800f346:	4b09      	ldr	r3, [pc, #36]	@ (800f36c <UTIL_SEQ_SetEvt+0x3c>)
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	4a07      	ldr	r2, [pc, #28]	@ (800f36c <UTIL_SEQ_SetEvt+0x3c>)
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	f383 8810 	msr	PRIMASK, r3
}
 800f35c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f35e:	bf00      	nop
}
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	20000460 	.word	0x20000460

0800f370 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b088      	sub	sp, #32
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f378:	4b1f      	ldr	r3, [pc, #124]	@ (800f3f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f37e:	4b1e      	ldr	r3, [pc, #120]	@ (800f3f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f386:	d102      	bne.n	800f38e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f388:	2300      	movs	r3, #0
 800f38a:	61fb      	str	r3, [r7, #28]
 800f38c:	e005      	b.n	800f39a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f38e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2201      	movs	r2, #1
 800f394:	fa02 f303 	lsl.w	r3, r2, r3
 800f398:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f39a:	4b18      	ldr	r3, [pc, #96]	@ (800f3fc <UTIL_SEQ_WaitEvt+0x8c>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f3a0:	4a16      	ldr	r2, [pc, #88]	@ (800f3fc <UTIL_SEQ_WaitEvt+0x8c>)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f3a6:	e003      	b.n	800f3b0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f3a8:	6879      	ldr	r1, [r7, #4]
 800f3aa:	69f8      	ldr	r0, [r7, #28]
 800f3ac:	f7f6 f9fb 	bl	80057a6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f3b0:	4b13      	ldr	r3, [pc, #76]	@ (800f400 <UTIL_SEQ_WaitEvt+0x90>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d0f5      	beq.n	800f3a8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f3bc:	4a0e      	ldr	r2, [pc, #56]	@ (800f3f8 <UTIL_SEQ_WaitEvt+0x88>)
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800f3c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3c8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f3ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3cc:	b672      	cpsid	i
}
 800f3ce:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	43da      	mvns	r2, r3
 800f3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800f400 <UTIL_SEQ_WaitEvt+0x90>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4013      	ands	r3, r2
 800f3da:	4a09      	ldr	r2, [pc, #36]	@ (800f400 <UTIL_SEQ_WaitEvt+0x90>)
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f383 8810 	msr	PRIMASK, r3
}
 800f3e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f3ea:	4a04      	ldr	r2, [pc, #16]	@ (800f3fc <UTIL_SEQ_WaitEvt+0x8c>)
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	6013      	str	r3, [r2, #0]
  return;
 800f3f0:	bf00      	nop
}
 800f3f2:	3720      	adds	r7, #32
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20000468 	.word	0x20000468
 800f3fc:	20000464 	.word	0x20000464
 800f400:	20000460 	.word	0x20000460

0800f404 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f404:	b480      	push	{r7}
 800f406:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f408:	bf00      	nop
}
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f412:	b480      	push	{r7}
 800f414:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f416:	bf00      	nop
}
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f420:	b480      	push	{r7}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800f428:	2300      	movs	r3, #0
 800f42a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f436:	d204      	bcs.n	800f442 <SEQ_BitPosition+0x22>
 800f438:	2310      	movs	r3, #16
 800f43a:	73fb      	strb	r3, [r7, #15]
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	041b      	lsls	r3, r3, #16
 800f440:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f448:	d205      	bcs.n	800f456 <SEQ_BitPosition+0x36>
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
 800f44c:	3308      	adds	r3, #8
 800f44e:	73fb      	strb	r3, [r7, #15]
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	021b      	lsls	r3, r3, #8
 800f454:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f45c:	d205      	bcs.n	800f46a <SEQ_BitPosition+0x4a>
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	3304      	adds	r3, #4
 800f462:	73fb      	strb	r3, [r7, #15]
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	011b      	lsls	r3, r3, #4
 800f468:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	0f1b      	lsrs	r3, r3, #28
 800f46e:	4a07      	ldr	r2, [pc, #28]	@ (800f48c <SEQ_BitPosition+0x6c>)
 800f470:	5cd2      	ldrb	r2, [r2, r3]
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	4413      	add	r3, r2
 800f476:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	f1c3 031f 	rsb	r3, r3, #31
 800f47e:	b2db      	uxtb	r3, r3
}
 800f480:	4618      	mov	r0, r3
 800f482:	3714      	adds	r7, #20
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	08010b3c 	.word	0x08010b3c

0800f490 <__assert_func>:
 800f490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f492:	4614      	mov	r4, r2
 800f494:	461a      	mov	r2, r3
 800f496:	4b09      	ldr	r3, [pc, #36]	@ (800f4bc <__assert_func+0x2c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4605      	mov	r5, r0
 800f49c:	68d8      	ldr	r0, [r3, #12]
 800f49e:	b954      	cbnz	r4, 800f4b6 <__assert_func+0x26>
 800f4a0:	4b07      	ldr	r3, [pc, #28]	@ (800f4c0 <__assert_func+0x30>)
 800f4a2:	461c      	mov	r4, r3
 800f4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4a8:	9100      	str	r1, [sp, #0]
 800f4aa:	462b      	mov	r3, r5
 800f4ac:	4905      	ldr	r1, [pc, #20]	@ (800f4c4 <__assert_func+0x34>)
 800f4ae:	f000 f96f 	bl	800f790 <fiprintf>
 800f4b2:	f000 fc34 	bl	800fd1e <abort>
 800f4b6:	4b04      	ldr	r3, [pc, #16]	@ (800f4c8 <__assert_func+0x38>)
 800f4b8:	e7f4      	b.n	800f4a4 <__assert_func+0x14>
 800f4ba:	bf00      	nop
 800f4bc:	2000002c 	.word	0x2000002c
 800f4c0:	08010b87 	.word	0x08010b87
 800f4c4:	08010b59 	.word	0x08010b59
 800f4c8:	08010b4c 	.word	0x08010b4c

0800f4cc <malloc>:
 800f4cc:	4b02      	ldr	r3, [pc, #8]	@ (800f4d8 <malloc+0xc>)
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f000 b82d 	b.w	800f530 <_malloc_r>
 800f4d6:	bf00      	nop
 800f4d8:	2000002c 	.word	0x2000002c

0800f4dc <free>:
 800f4dc:	4b02      	ldr	r3, [pc, #8]	@ (800f4e8 <free+0xc>)
 800f4de:	4601      	mov	r1, r0
 800f4e0:	6818      	ldr	r0, [r3, #0]
 800f4e2:	f000 bc23 	b.w	800fd2c <_free_r>
 800f4e6:	bf00      	nop
 800f4e8:	2000002c 	.word	0x2000002c

0800f4ec <sbrk_aligned>:
 800f4ec:	b570      	push	{r4, r5, r6, lr}
 800f4ee:	4e0f      	ldr	r6, [pc, #60]	@ (800f52c <sbrk_aligned+0x40>)
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	6831      	ldr	r1, [r6, #0]
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	b911      	cbnz	r1, 800f4fe <sbrk_aligned+0x12>
 800f4f8:	f000 fbb2 	bl	800fc60 <_sbrk_r>
 800f4fc:	6030      	str	r0, [r6, #0]
 800f4fe:	4621      	mov	r1, r4
 800f500:	4628      	mov	r0, r5
 800f502:	f000 fbad 	bl	800fc60 <_sbrk_r>
 800f506:	1c43      	adds	r3, r0, #1
 800f508:	d103      	bne.n	800f512 <sbrk_aligned+0x26>
 800f50a:	f04f 34ff 	mov.w	r4, #4294967295
 800f50e:	4620      	mov	r0, r4
 800f510:	bd70      	pop	{r4, r5, r6, pc}
 800f512:	1cc4      	adds	r4, r0, #3
 800f514:	f024 0403 	bic.w	r4, r4, #3
 800f518:	42a0      	cmp	r0, r4
 800f51a:	d0f8      	beq.n	800f50e <sbrk_aligned+0x22>
 800f51c:	1a21      	subs	r1, r4, r0
 800f51e:	4628      	mov	r0, r5
 800f520:	f000 fb9e 	bl	800fc60 <_sbrk_r>
 800f524:	3001      	adds	r0, #1
 800f526:	d1f2      	bne.n	800f50e <sbrk_aligned+0x22>
 800f528:	e7ef      	b.n	800f50a <sbrk_aligned+0x1e>
 800f52a:	bf00      	nop
 800f52c:	200004fc 	.word	0x200004fc

0800f530 <_malloc_r>:
 800f530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f534:	1ccd      	adds	r5, r1, #3
 800f536:	f025 0503 	bic.w	r5, r5, #3
 800f53a:	3508      	adds	r5, #8
 800f53c:	2d0c      	cmp	r5, #12
 800f53e:	bf38      	it	cc
 800f540:	250c      	movcc	r5, #12
 800f542:	2d00      	cmp	r5, #0
 800f544:	4606      	mov	r6, r0
 800f546:	db01      	blt.n	800f54c <_malloc_r+0x1c>
 800f548:	42a9      	cmp	r1, r5
 800f54a:	d904      	bls.n	800f556 <_malloc_r+0x26>
 800f54c:	230c      	movs	r3, #12
 800f54e:	6033      	str	r3, [r6, #0]
 800f550:	2000      	movs	r0, #0
 800f552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f62c <_malloc_r+0xfc>
 800f55a:	f000 f869 	bl	800f630 <__malloc_lock>
 800f55e:	f8d8 3000 	ldr.w	r3, [r8]
 800f562:	461c      	mov	r4, r3
 800f564:	bb44      	cbnz	r4, 800f5b8 <_malloc_r+0x88>
 800f566:	4629      	mov	r1, r5
 800f568:	4630      	mov	r0, r6
 800f56a:	f7ff ffbf 	bl	800f4ec <sbrk_aligned>
 800f56e:	1c43      	adds	r3, r0, #1
 800f570:	4604      	mov	r4, r0
 800f572:	d158      	bne.n	800f626 <_malloc_r+0xf6>
 800f574:	f8d8 4000 	ldr.w	r4, [r8]
 800f578:	4627      	mov	r7, r4
 800f57a:	2f00      	cmp	r7, #0
 800f57c:	d143      	bne.n	800f606 <_malloc_r+0xd6>
 800f57e:	2c00      	cmp	r4, #0
 800f580:	d04b      	beq.n	800f61a <_malloc_r+0xea>
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	4639      	mov	r1, r7
 800f586:	4630      	mov	r0, r6
 800f588:	eb04 0903 	add.w	r9, r4, r3
 800f58c:	f000 fb68 	bl	800fc60 <_sbrk_r>
 800f590:	4581      	cmp	r9, r0
 800f592:	d142      	bne.n	800f61a <_malloc_r+0xea>
 800f594:	6821      	ldr	r1, [r4, #0]
 800f596:	1a6d      	subs	r5, r5, r1
 800f598:	4629      	mov	r1, r5
 800f59a:	4630      	mov	r0, r6
 800f59c:	f7ff ffa6 	bl	800f4ec <sbrk_aligned>
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d03a      	beq.n	800f61a <_malloc_r+0xea>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	442b      	add	r3, r5
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	bb62      	cbnz	r2, 800f60c <_malloc_r+0xdc>
 800f5b2:	f8c8 7000 	str.w	r7, [r8]
 800f5b6:	e00f      	b.n	800f5d8 <_malloc_r+0xa8>
 800f5b8:	6822      	ldr	r2, [r4, #0]
 800f5ba:	1b52      	subs	r2, r2, r5
 800f5bc:	d420      	bmi.n	800f600 <_malloc_r+0xd0>
 800f5be:	2a0b      	cmp	r2, #11
 800f5c0:	d917      	bls.n	800f5f2 <_malloc_r+0xc2>
 800f5c2:	1961      	adds	r1, r4, r5
 800f5c4:	42a3      	cmp	r3, r4
 800f5c6:	6025      	str	r5, [r4, #0]
 800f5c8:	bf18      	it	ne
 800f5ca:	6059      	strne	r1, [r3, #4]
 800f5cc:	6863      	ldr	r3, [r4, #4]
 800f5ce:	bf08      	it	eq
 800f5d0:	f8c8 1000 	streq.w	r1, [r8]
 800f5d4:	5162      	str	r2, [r4, r5]
 800f5d6:	604b      	str	r3, [r1, #4]
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f000 f82f 	bl	800f63c <__malloc_unlock>
 800f5de:	f104 000b 	add.w	r0, r4, #11
 800f5e2:	1d23      	adds	r3, r4, #4
 800f5e4:	f020 0007 	bic.w	r0, r0, #7
 800f5e8:	1ac2      	subs	r2, r0, r3
 800f5ea:	bf1c      	itt	ne
 800f5ec:	1a1b      	subne	r3, r3, r0
 800f5ee:	50a3      	strne	r3, [r4, r2]
 800f5f0:	e7af      	b.n	800f552 <_malloc_r+0x22>
 800f5f2:	6862      	ldr	r2, [r4, #4]
 800f5f4:	42a3      	cmp	r3, r4
 800f5f6:	bf0c      	ite	eq
 800f5f8:	f8c8 2000 	streq.w	r2, [r8]
 800f5fc:	605a      	strne	r2, [r3, #4]
 800f5fe:	e7eb      	b.n	800f5d8 <_malloc_r+0xa8>
 800f600:	4623      	mov	r3, r4
 800f602:	6864      	ldr	r4, [r4, #4]
 800f604:	e7ae      	b.n	800f564 <_malloc_r+0x34>
 800f606:	463c      	mov	r4, r7
 800f608:	687f      	ldr	r7, [r7, #4]
 800f60a:	e7b6      	b.n	800f57a <_malloc_r+0x4a>
 800f60c:	461a      	mov	r2, r3
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	42a3      	cmp	r3, r4
 800f612:	d1fb      	bne.n	800f60c <_malloc_r+0xdc>
 800f614:	2300      	movs	r3, #0
 800f616:	6053      	str	r3, [r2, #4]
 800f618:	e7de      	b.n	800f5d8 <_malloc_r+0xa8>
 800f61a:	230c      	movs	r3, #12
 800f61c:	6033      	str	r3, [r6, #0]
 800f61e:	4630      	mov	r0, r6
 800f620:	f000 f80c 	bl	800f63c <__malloc_unlock>
 800f624:	e794      	b.n	800f550 <_malloc_r+0x20>
 800f626:	6005      	str	r5, [r0, #0]
 800f628:	e7d6      	b.n	800f5d8 <_malloc_r+0xa8>
 800f62a:	bf00      	nop
 800f62c:	20000500 	.word	0x20000500

0800f630 <__malloc_lock>:
 800f630:	4801      	ldr	r0, [pc, #4]	@ (800f638 <__malloc_lock+0x8>)
 800f632:	f000 bb62 	b.w	800fcfa <__retarget_lock_acquire_recursive>
 800f636:	bf00      	nop
 800f638:	20000644 	.word	0x20000644

0800f63c <__malloc_unlock>:
 800f63c:	4801      	ldr	r0, [pc, #4]	@ (800f644 <__malloc_unlock+0x8>)
 800f63e:	f000 bb5d 	b.w	800fcfc <__retarget_lock_release_recursive>
 800f642:	bf00      	nop
 800f644:	20000644 	.word	0x20000644

0800f648 <std>:
 800f648:	2300      	movs	r3, #0
 800f64a:	b510      	push	{r4, lr}
 800f64c:	4604      	mov	r4, r0
 800f64e:	e9c0 3300 	strd	r3, r3, [r0]
 800f652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f656:	6083      	str	r3, [r0, #8]
 800f658:	8181      	strh	r1, [r0, #12]
 800f65a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f65c:	81c2      	strh	r2, [r0, #14]
 800f65e:	6183      	str	r3, [r0, #24]
 800f660:	4619      	mov	r1, r3
 800f662:	2208      	movs	r2, #8
 800f664:	305c      	adds	r0, #92	@ 0x5c
 800f666:	f000 fabf 	bl	800fbe8 <memset>
 800f66a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a0 <std+0x58>)
 800f66c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f66e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a4 <std+0x5c>)
 800f670:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f672:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a8 <std+0x60>)
 800f674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f676:	4b0d      	ldr	r3, [pc, #52]	@ (800f6ac <std+0x64>)
 800f678:	6323      	str	r3, [r4, #48]	@ 0x30
 800f67a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6b0 <std+0x68>)
 800f67c:	6224      	str	r4, [r4, #32]
 800f67e:	429c      	cmp	r4, r3
 800f680:	d006      	beq.n	800f690 <std+0x48>
 800f682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f686:	4294      	cmp	r4, r2
 800f688:	d002      	beq.n	800f690 <std+0x48>
 800f68a:	33d0      	adds	r3, #208	@ 0xd0
 800f68c:	429c      	cmp	r4, r3
 800f68e:	d105      	bne.n	800f69c <std+0x54>
 800f690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f698:	f000 bb2e 	b.w	800fcf8 <__retarget_lock_init_recursive>
 800f69c:	bd10      	pop	{r4, pc}
 800f69e:	bf00      	nop
 800f6a0:	0800fa39 	.word	0x0800fa39
 800f6a4:	0800fa5b 	.word	0x0800fa5b
 800f6a8:	0800fa93 	.word	0x0800fa93
 800f6ac:	0800fab7 	.word	0x0800fab7
 800f6b0:	20000504 	.word	0x20000504

0800f6b4 <stdio_exit_handler>:
 800f6b4:	4a02      	ldr	r2, [pc, #8]	@ (800f6c0 <stdio_exit_handler+0xc>)
 800f6b6:	4903      	ldr	r1, [pc, #12]	@ (800f6c4 <stdio_exit_handler+0x10>)
 800f6b8:	4803      	ldr	r0, [pc, #12]	@ (800f6c8 <stdio_exit_handler+0x14>)
 800f6ba:	f000 b87b 	b.w	800f7b4 <_fwalk_sglue>
 800f6be:	bf00      	nop
 800f6c0:	20000020 	.word	0x20000020
 800f6c4:	08010469 	.word	0x08010469
 800f6c8:	20000030 	.word	0x20000030

0800f6cc <cleanup_stdio>:
 800f6cc:	6841      	ldr	r1, [r0, #4]
 800f6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f700 <cleanup_stdio+0x34>)
 800f6d0:	4299      	cmp	r1, r3
 800f6d2:	b510      	push	{r4, lr}
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	d001      	beq.n	800f6dc <cleanup_stdio+0x10>
 800f6d8:	f000 fec6 	bl	8010468 <_fflush_r>
 800f6dc:	68a1      	ldr	r1, [r4, #8]
 800f6de:	4b09      	ldr	r3, [pc, #36]	@ (800f704 <cleanup_stdio+0x38>)
 800f6e0:	4299      	cmp	r1, r3
 800f6e2:	d002      	beq.n	800f6ea <cleanup_stdio+0x1e>
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 febf 	bl	8010468 <_fflush_r>
 800f6ea:	68e1      	ldr	r1, [r4, #12]
 800f6ec:	4b06      	ldr	r3, [pc, #24]	@ (800f708 <cleanup_stdio+0x3c>)
 800f6ee:	4299      	cmp	r1, r3
 800f6f0:	d004      	beq.n	800f6fc <cleanup_stdio+0x30>
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f8:	f000 beb6 	b.w	8010468 <_fflush_r>
 800f6fc:	bd10      	pop	{r4, pc}
 800f6fe:	bf00      	nop
 800f700:	20000504 	.word	0x20000504
 800f704:	2000056c 	.word	0x2000056c
 800f708:	200005d4 	.word	0x200005d4

0800f70c <global_stdio_init.part.0>:
 800f70c:	b510      	push	{r4, lr}
 800f70e:	4b0b      	ldr	r3, [pc, #44]	@ (800f73c <global_stdio_init.part.0+0x30>)
 800f710:	4c0b      	ldr	r4, [pc, #44]	@ (800f740 <global_stdio_init.part.0+0x34>)
 800f712:	4a0c      	ldr	r2, [pc, #48]	@ (800f744 <global_stdio_init.part.0+0x38>)
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	4620      	mov	r0, r4
 800f718:	2200      	movs	r2, #0
 800f71a:	2104      	movs	r1, #4
 800f71c:	f7ff ff94 	bl	800f648 <std>
 800f720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f724:	2201      	movs	r2, #1
 800f726:	2109      	movs	r1, #9
 800f728:	f7ff ff8e 	bl	800f648 <std>
 800f72c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f730:	2202      	movs	r2, #2
 800f732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f736:	2112      	movs	r1, #18
 800f738:	f7ff bf86 	b.w	800f648 <std>
 800f73c:	2000063c 	.word	0x2000063c
 800f740:	20000504 	.word	0x20000504
 800f744:	0800f6b5 	.word	0x0800f6b5

0800f748 <__sfp_lock_acquire>:
 800f748:	4801      	ldr	r0, [pc, #4]	@ (800f750 <__sfp_lock_acquire+0x8>)
 800f74a:	f000 bad6 	b.w	800fcfa <__retarget_lock_acquire_recursive>
 800f74e:	bf00      	nop
 800f750:	20000645 	.word	0x20000645

0800f754 <__sfp_lock_release>:
 800f754:	4801      	ldr	r0, [pc, #4]	@ (800f75c <__sfp_lock_release+0x8>)
 800f756:	f000 bad1 	b.w	800fcfc <__retarget_lock_release_recursive>
 800f75a:	bf00      	nop
 800f75c:	20000645 	.word	0x20000645

0800f760 <__sinit>:
 800f760:	b510      	push	{r4, lr}
 800f762:	4604      	mov	r4, r0
 800f764:	f7ff fff0 	bl	800f748 <__sfp_lock_acquire>
 800f768:	6a23      	ldr	r3, [r4, #32]
 800f76a:	b11b      	cbz	r3, 800f774 <__sinit+0x14>
 800f76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f770:	f7ff bff0 	b.w	800f754 <__sfp_lock_release>
 800f774:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <__sinit+0x28>)
 800f776:	6223      	str	r3, [r4, #32]
 800f778:	4b04      	ldr	r3, [pc, #16]	@ (800f78c <__sinit+0x2c>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1f5      	bne.n	800f76c <__sinit+0xc>
 800f780:	f7ff ffc4 	bl	800f70c <global_stdio_init.part.0>
 800f784:	e7f2      	b.n	800f76c <__sinit+0xc>
 800f786:	bf00      	nop
 800f788:	0800f6cd 	.word	0x0800f6cd
 800f78c:	2000063c 	.word	0x2000063c

0800f790 <fiprintf>:
 800f790:	b40e      	push	{r1, r2, r3}
 800f792:	b503      	push	{r0, r1, lr}
 800f794:	4601      	mov	r1, r0
 800f796:	ab03      	add	r3, sp, #12
 800f798:	4805      	ldr	r0, [pc, #20]	@ (800f7b0 <fiprintf+0x20>)
 800f79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f79e:	6800      	ldr	r0, [r0, #0]
 800f7a0:	9301      	str	r3, [sp, #4]
 800f7a2:	f000 fb37 	bl	800fe14 <_vfiprintf_r>
 800f7a6:	b002      	add	sp, #8
 800f7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7ac:	b003      	add	sp, #12
 800f7ae:	4770      	bx	lr
 800f7b0:	2000002c 	.word	0x2000002c

0800f7b4 <_fwalk_sglue>:
 800f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	4607      	mov	r7, r0
 800f7ba:	4688      	mov	r8, r1
 800f7bc:	4614      	mov	r4, r2
 800f7be:	2600      	movs	r6, #0
 800f7c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7c4:	f1b9 0901 	subs.w	r9, r9, #1
 800f7c8:	d505      	bpl.n	800f7d6 <_fwalk_sglue+0x22>
 800f7ca:	6824      	ldr	r4, [r4, #0]
 800f7cc:	2c00      	cmp	r4, #0
 800f7ce:	d1f7      	bne.n	800f7c0 <_fwalk_sglue+0xc>
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7d6:	89ab      	ldrh	r3, [r5, #12]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d907      	bls.n	800f7ec <_fwalk_sglue+0x38>
 800f7dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	d003      	beq.n	800f7ec <_fwalk_sglue+0x38>
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	47c0      	blx	r8
 800f7ea:	4306      	orrs	r6, r0
 800f7ec:	3568      	adds	r5, #104	@ 0x68
 800f7ee:	e7e9      	b.n	800f7c4 <_fwalk_sglue+0x10>

0800f7f0 <iprintf>:
 800f7f0:	b40f      	push	{r0, r1, r2, r3}
 800f7f2:	b507      	push	{r0, r1, r2, lr}
 800f7f4:	4906      	ldr	r1, [pc, #24]	@ (800f810 <iprintf+0x20>)
 800f7f6:	ab04      	add	r3, sp, #16
 800f7f8:	6808      	ldr	r0, [r1, #0]
 800f7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7fe:	6881      	ldr	r1, [r0, #8]
 800f800:	9301      	str	r3, [sp, #4]
 800f802:	f000 fb07 	bl	800fe14 <_vfiprintf_r>
 800f806:	b003      	add	sp, #12
 800f808:	f85d eb04 	ldr.w	lr, [sp], #4
 800f80c:	b004      	add	sp, #16
 800f80e:	4770      	bx	lr
 800f810:	2000002c 	.word	0x2000002c

0800f814 <_puts_r>:
 800f814:	6a03      	ldr	r3, [r0, #32]
 800f816:	b570      	push	{r4, r5, r6, lr}
 800f818:	6884      	ldr	r4, [r0, #8]
 800f81a:	4605      	mov	r5, r0
 800f81c:	460e      	mov	r6, r1
 800f81e:	b90b      	cbnz	r3, 800f824 <_puts_r+0x10>
 800f820:	f7ff ff9e 	bl	800f760 <__sinit>
 800f824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f826:	07db      	lsls	r3, r3, #31
 800f828:	d405      	bmi.n	800f836 <_puts_r+0x22>
 800f82a:	89a3      	ldrh	r3, [r4, #12]
 800f82c:	0598      	lsls	r0, r3, #22
 800f82e:	d402      	bmi.n	800f836 <_puts_r+0x22>
 800f830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f832:	f000 fa62 	bl	800fcfa <__retarget_lock_acquire_recursive>
 800f836:	89a3      	ldrh	r3, [r4, #12]
 800f838:	0719      	lsls	r1, r3, #28
 800f83a:	d502      	bpl.n	800f842 <_puts_r+0x2e>
 800f83c:	6923      	ldr	r3, [r4, #16]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d135      	bne.n	800f8ae <_puts_r+0x9a>
 800f842:	4621      	mov	r1, r4
 800f844:	4628      	mov	r0, r5
 800f846:	f000 f979 	bl	800fb3c <__swsetup_r>
 800f84a:	b380      	cbz	r0, 800f8ae <_puts_r+0x9a>
 800f84c:	f04f 35ff 	mov.w	r5, #4294967295
 800f850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f852:	07da      	lsls	r2, r3, #31
 800f854:	d405      	bmi.n	800f862 <_puts_r+0x4e>
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	059b      	lsls	r3, r3, #22
 800f85a:	d402      	bmi.n	800f862 <_puts_r+0x4e>
 800f85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f85e:	f000 fa4d 	bl	800fcfc <__retarget_lock_release_recursive>
 800f862:	4628      	mov	r0, r5
 800f864:	bd70      	pop	{r4, r5, r6, pc}
 800f866:	2b00      	cmp	r3, #0
 800f868:	da04      	bge.n	800f874 <_puts_r+0x60>
 800f86a:	69a2      	ldr	r2, [r4, #24]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	dc17      	bgt.n	800f8a0 <_puts_r+0x8c>
 800f870:	290a      	cmp	r1, #10
 800f872:	d015      	beq.n	800f8a0 <_puts_r+0x8c>
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	1c5a      	adds	r2, r3, #1
 800f878:	6022      	str	r2, [r4, #0]
 800f87a:	7019      	strb	r1, [r3, #0]
 800f87c:	68a3      	ldr	r3, [r4, #8]
 800f87e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f882:	3b01      	subs	r3, #1
 800f884:	60a3      	str	r3, [r4, #8]
 800f886:	2900      	cmp	r1, #0
 800f888:	d1ed      	bne.n	800f866 <_puts_r+0x52>
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	da11      	bge.n	800f8b2 <_puts_r+0x9e>
 800f88e:	4622      	mov	r2, r4
 800f890:	210a      	movs	r1, #10
 800f892:	4628      	mov	r0, r5
 800f894:	f000 f913 	bl	800fabe <__swbuf_r>
 800f898:	3001      	adds	r0, #1
 800f89a:	d0d7      	beq.n	800f84c <_puts_r+0x38>
 800f89c:	250a      	movs	r5, #10
 800f89e:	e7d7      	b.n	800f850 <_puts_r+0x3c>
 800f8a0:	4622      	mov	r2, r4
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f000 f90b 	bl	800fabe <__swbuf_r>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d1e7      	bne.n	800f87c <_puts_r+0x68>
 800f8ac:	e7ce      	b.n	800f84c <_puts_r+0x38>
 800f8ae:	3e01      	subs	r6, #1
 800f8b0:	e7e4      	b.n	800f87c <_puts_r+0x68>
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	1c5a      	adds	r2, r3, #1
 800f8b6:	6022      	str	r2, [r4, #0]
 800f8b8:	220a      	movs	r2, #10
 800f8ba:	701a      	strb	r2, [r3, #0]
 800f8bc:	e7ee      	b.n	800f89c <_puts_r+0x88>
	...

0800f8c0 <puts>:
 800f8c0:	4b02      	ldr	r3, [pc, #8]	@ (800f8cc <puts+0xc>)
 800f8c2:	4601      	mov	r1, r0
 800f8c4:	6818      	ldr	r0, [r3, #0]
 800f8c6:	f7ff bfa5 	b.w	800f814 <_puts_r>
 800f8ca:	bf00      	nop
 800f8cc:	2000002c 	.word	0x2000002c

0800f8d0 <setvbuf>:
 800f8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f8d4:	461d      	mov	r5, r3
 800f8d6:	4b57      	ldr	r3, [pc, #348]	@ (800fa34 <setvbuf+0x164>)
 800f8d8:	681f      	ldr	r7, [r3, #0]
 800f8da:	4604      	mov	r4, r0
 800f8dc:	460e      	mov	r6, r1
 800f8de:	4690      	mov	r8, r2
 800f8e0:	b127      	cbz	r7, 800f8ec <setvbuf+0x1c>
 800f8e2:	6a3b      	ldr	r3, [r7, #32]
 800f8e4:	b913      	cbnz	r3, 800f8ec <setvbuf+0x1c>
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	f7ff ff3a 	bl	800f760 <__sinit>
 800f8ec:	f1b8 0f02 	cmp.w	r8, #2
 800f8f0:	d006      	beq.n	800f900 <setvbuf+0x30>
 800f8f2:	f1b8 0f01 	cmp.w	r8, #1
 800f8f6:	f200 809a 	bhi.w	800fa2e <setvbuf+0x15e>
 800f8fa:	2d00      	cmp	r5, #0
 800f8fc:	f2c0 8097 	blt.w	800fa2e <setvbuf+0x15e>
 800f900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f902:	07d9      	lsls	r1, r3, #31
 800f904:	d405      	bmi.n	800f912 <setvbuf+0x42>
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	059a      	lsls	r2, r3, #22
 800f90a:	d402      	bmi.n	800f912 <setvbuf+0x42>
 800f90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f90e:	f000 f9f4 	bl	800fcfa <__retarget_lock_acquire_recursive>
 800f912:	4621      	mov	r1, r4
 800f914:	4638      	mov	r0, r7
 800f916:	f000 fda7 	bl	8010468 <_fflush_r>
 800f91a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f91c:	b141      	cbz	r1, 800f930 <setvbuf+0x60>
 800f91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f922:	4299      	cmp	r1, r3
 800f924:	d002      	beq.n	800f92c <setvbuf+0x5c>
 800f926:	4638      	mov	r0, r7
 800f928:	f000 fa00 	bl	800fd2c <_free_r>
 800f92c:	2300      	movs	r3, #0
 800f92e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f930:	2300      	movs	r3, #0
 800f932:	61a3      	str	r3, [r4, #24]
 800f934:	6063      	str	r3, [r4, #4]
 800f936:	89a3      	ldrh	r3, [r4, #12]
 800f938:	061b      	lsls	r3, r3, #24
 800f93a:	d503      	bpl.n	800f944 <setvbuf+0x74>
 800f93c:	6921      	ldr	r1, [r4, #16]
 800f93e:	4638      	mov	r0, r7
 800f940:	f000 f9f4 	bl	800fd2c <_free_r>
 800f944:	89a3      	ldrh	r3, [r4, #12]
 800f946:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800f94a:	f023 0303 	bic.w	r3, r3, #3
 800f94e:	f1b8 0f02 	cmp.w	r8, #2
 800f952:	81a3      	strh	r3, [r4, #12]
 800f954:	d061      	beq.n	800fa1a <setvbuf+0x14a>
 800f956:	ab01      	add	r3, sp, #4
 800f958:	466a      	mov	r2, sp
 800f95a:	4621      	mov	r1, r4
 800f95c:	4638      	mov	r0, r7
 800f95e:	f000 fdab 	bl	80104b8 <__swhatbuf_r>
 800f962:	89a3      	ldrh	r3, [r4, #12]
 800f964:	4318      	orrs	r0, r3
 800f966:	81a0      	strh	r0, [r4, #12]
 800f968:	bb2d      	cbnz	r5, 800f9b6 <setvbuf+0xe6>
 800f96a:	9d00      	ldr	r5, [sp, #0]
 800f96c:	4628      	mov	r0, r5
 800f96e:	f7ff fdad 	bl	800f4cc <malloc>
 800f972:	4606      	mov	r6, r0
 800f974:	2800      	cmp	r0, #0
 800f976:	d152      	bne.n	800fa1e <setvbuf+0x14e>
 800f978:	f8dd 9000 	ldr.w	r9, [sp]
 800f97c:	45a9      	cmp	r9, r5
 800f97e:	d140      	bne.n	800fa02 <setvbuf+0x132>
 800f980:	f04f 35ff 	mov.w	r5, #4294967295
 800f984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f988:	f043 0202 	orr.w	r2, r3, #2
 800f98c:	81a2      	strh	r2, [r4, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	60a2      	str	r2, [r4, #8]
 800f992:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800f996:	6022      	str	r2, [r4, #0]
 800f998:	6122      	str	r2, [r4, #16]
 800f99a:	2201      	movs	r2, #1
 800f99c:	6162      	str	r2, [r4, #20]
 800f99e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f9a0:	07d6      	lsls	r6, r2, #31
 800f9a2:	d404      	bmi.n	800f9ae <setvbuf+0xde>
 800f9a4:	0598      	lsls	r0, r3, #22
 800f9a6:	d402      	bmi.n	800f9ae <setvbuf+0xde>
 800f9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9aa:	f000 f9a7 	bl	800fcfc <__retarget_lock_release_recursive>
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	b003      	add	sp, #12
 800f9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9b6:	2e00      	cmp	r6, #0
 800f9b8:	d0d8      	beq.n	800f96c <setvbuf+0x9c>
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	b913      	cbnz	r3, 800f9c4 <setvbuf+0xf4>
 800f9be:	4638      	mov	r0, r7
 800f9c0:	f7ff fece 	bl	800f760 <__sinit>
 800f9c4:	f1b8 0f01 	cmp.w	r8, #1
 800f9c8:	bf08      	it	eq
 800f9ca:	89a3      	ldrheq	r3, [r4, #12]
 800f9cc:	6026      	str	r6, [r4, #0]
 800f9ce:	bf04      	itt	eq
 800f9d0:	f043 0301 	orreq.w	r3, r3, #1
 800f9d4:	81a3      	strheq	r3, [r4, #12]
 800f9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9da:	f013 0208 	ands.w	r2, r3, #8
 800f9de:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f9e2:	d01e      	beq.n	800fa22 <setvbuf+0x152>
 800f9e4:	07d9      	lsls	r1, r3, #31
 800f9e6:	bf41      	itttt	mi
 800f9e8:	2200      	movmi	r2, #0
 800f9ea:	426d      	negmi	r5, r5
 800f9ec:	60a2      	strmi	r2, [r4, #8]
 800f9ee:	61a5      	strmi	r5, [r4, #24]
 800f9f0:	bf58      	it	pl
 800f9f2:	60a5      	strpl	r5, [r4, #8]
 800f9f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f9f6:	07d2      	lsls	r2, r2, #31
 800f9f8:	d401      	bmi.n	800f9fe <setvbuf+0x12e>
 800f9fa:	059b      	lsls	r3, r3, #22
 800f9fc:	d513      	bpl.n	800fa26 <setvbuf+0x156>
 800f9fe:	2500      	movs	r5, #0
 800fa00:	e7d5      	b.n	800f9ae <setvbuf+0xde>
 800fa02:	4648      	mov	r0, r9
 800fa04:	f7ff fd62 	bl	800f4cc <malloc>
 800fa08:	4606      	mov	r6, r0
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d0b8      	beq.n	800f980 <setvbuf+0xb0>
 800fa0e:	89a3      	ldrh	r3, [r4, #12]
 800fa10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa14:	81a3      	strh	r3, [r4, #12]
 800fa16:	464d      	mov	r5, r9
 800fa18:	e7cf      	b.n	800f9ba <setvbuf+0xea>
 800fa1a:	2500      	movs	r5, #0
 800fa1c:	e7b2      	b.n	800f984 <setvbuf+0xb4>
 800fa1e:	46a9      	mov	r9, r5
 800fa20:	e7f5      	b.n	800fa0e <setvbuf+0x13e>
 800fa22:	60a2      	str	r2, [r4, #8]
 800fa24:	e7e6      	b.n	800f9f4 <setvbuf+0x124>
 800fa26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa28:	f000 f968 	bl	800fcfc <__retarget_lock_release_recursive>
 800fa2c:	e7e7      	b.n	800f9fe <setvbuf+0x12e>
 800fa2e:	f04f 35ff 	mov.w	r5, #4294967295
 800fa32:	e7bc      	b.n	800f9ae <setvbuf+0xde>
 800fa34:	2000002c 	.word	0x2000002c

0800fa38 <__sread>:
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa40:	f000 f8fc 	bl	800fc3c <_read_r>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	bfab      	itete	ge
 800fa48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fa4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa4c:	181b      	addge	r3, r3, r0
 800fa4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa52:	bfac      	ite	ge
 800fa54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa56:	81a3      	strhlt	r3, [r4, #12]
 800fa58:	bd10      	pop	{r4, pc}

0800fa5a <__swrite>:
 800fa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5e:	461f      	mov	r7, r3
 800fa60:	898b      	ldrh	r3, [r1, #12]
 800fa62:	05db      	lsls	r3, r3, #23
 800fa64:	4605      	mov	r5, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	4616      	mov	r6, r2
 800fa6a:	d505      	bpl.n	800fa78 <__swrite+0x1e>
 800fa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa70:	2302      	movs	r3, #2
 800fa72:	2200      	movs	r2, #0
 800fa74:	f000 f8d0 	bl	800fc18 <_lseek_r>
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa82:	81a3      	strh	r3, [r4, #12]
 800fa84:	4632      	mov	r2, r6
 800fa86:	463b      	mov	r3, r7
 800fa88:	4628      	mov	r0, r5
 800fa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8e:	f000 b8f7 	b.w	800fc80 <_write_r>

0800fa92 <__sseek>:
 800fa92:	b510      	push	{r4, lr}
 800fa94:	460c      	mov	r4, r1
 800fa96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa9a:	f000 f8bd 	bl	800fc18 <_lseek_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	bf15      	itete	ne
 800faa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800faa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800faaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800faae:	81a3      	strheq	r3, [r4, #12]
 800fab0:	bf18      	it	ne
 800fab2:	81a3      	strhne	r3, [r4, #12]
 800fab4:	bd10      	pop	{r4, pc}

0800fab6 <__sclose>:
 800fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faba:	f000 b89d 	b.w	800fbf8 <_close_r>

0800fabe <__swbuf_r>:
 800fabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac0:	460e      	mov	r6, r1
 800fac2:	4614      	mov	r4, r2
 800fac4:	4605      	mov	r5, r0
 800fac6:	b118      	cbz	r0, 800fad0 <__swbuf_r+0x12>
 800fac8:	6a03      	ldr	r3, [r0, #32]
 800faca:	b90b      	cbnz	r3, 800fad0 <__swbuf_r+0x12>
 800facc:	f7ff fe48 	bl	800f760 <__sinit>
 800fad0:	69a3      	ldr	r3, [r4, #24]
 800fad2:	60a3      	str	r3, [r4, #8]
 800fad4:	89a3      	ldrh	r3, [r4, #12]
 800fad6:	071a      	lsls	r2, r3, #28
 800fad8:	d501      	bpl.n	800fade <__swbuf_r+0x20>
 800fada:	6923      	ldr	r3, [r4, #16]
 800fadc:	b943      	cbnz	r3, 800faf0 <__swbuf_r+0x32>
 800fade:	4621      	mov	r1, r4
 800fae0:	4628      	mov	r0, r5
 800fae2:	f000 f82b 	bl	800fb3c <__swsetup_r>
 800fae6:	b118      	cbz	r0, 800faf0 <__swbuf_r+0x32>
 800fae8:	f04f 37ff 	mov.w	r7, #4294967295
 800faec:	4638      	mov	r0, r7
 800faee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf0:	6823      	ldr	r3, [r4, #0]
 800faf2:	6922      	ldr	r2, [r4, #16]
 800faf4:	1a98      	subs	r0, r3, r2
 800faf6:	6963      	ldr	r3, [r4, #20]
 800faf8:	b2f6      	uxtb	r6, r6
 800fafa:	4283      	cmp	r3, r0
 800fafc:	4637      	mov	r7, r6
 800fafe:	dc05      	bgt.n	800fb0c <__swbuf_r+0x4e>
 800fb00:	4621      	mov	r1, r4
 800fb02:	4628      	mov	r0, r5
 800fb04:	f000 fcb0 	bl	8010468 <_fflush_r>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d1ed      	bne.n	800fae8 <__swbuf_r+0x2a>
 800fb0c:	68a3      	ldr	r3, [r4, #8]
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	60a3      	str	r3, [r4, #8]
 800fb12:	6823      	ldr	r3, [r4, #0]
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	6022      	str	r2, [r4, #0]
 800fb18:	701e      	strb	r6, [r3, #0]
 800fb1a:	6962      	ldr	r2, [r4, #20]
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d004      	beq.n	800fb2c <__swbuf_r+0x6e>
 800fb22:	89a3      	ldrh	r3, [r4, #12]
 800fb24:	07db      	lsls	r3, r3, #31
 800fb26:	d5e1      	bpl.n	800faec <__swbuf_r+0x2e>
 800fb28:	2e0a      	cmp	r6, #10
 800fb2a:	d1df      	bne.n	800faec <__swbuf_r+0x2e>
 800fb2c:	4621      	mov	r1, r4
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f000 fc9a 	bl	8010468 <_fflush_r>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d0d9      	beq.n	800faec <__swbuf_r+0x2e>
 800fb38:	e7d6      	b.n	800fae8 <__swbuf_r+0x2a>
	...

0800fb3c <__swsetup_r>:
 800fb3c:	b538      	push	{r3, r4, r5, lr}
 800fb3e:	4b29      	ldr	r3, [pc, #164]	@ (800fbe4 <__swsetup_r+0xa8>)
 800fb40:	4605      	mov	r5, r0
 800fb42:	6818      	ldr	r0, [r3, #0]
 800fb44:	460c      	mov	r4, r1
 800fb46:	b118      	cbz	r0, 800fb50 <__swsetup_r+0x14>
 800fb48:	6a03      	ldr	r3, [r0, #32]
 800fb4a:	b90b      	cbnz	r3, 800fb50 <__swsetup_r+0x14>
 800fb4c:	f7ff fe08 	bl	800f760 <__sinit>
 800fb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb54:	0719      	lsls	r1, r3, #28
 800fb56:	d422      	bmi.n	800fb9e <__swsetup_r+0x62>
 800fb58:	06da      	lsls	r2, r3, #27
 800fb5a:	d407      	bmi.n	800fb6c <__swsetup_r+0x30>
 800fb5c:	2209      	movs	r2, #9
 800fb5e:	602a      	str	r2, [r5, #0]
 800fb60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb64:	81a3      	strh	r3, [r4, #12]
 800fb66:	f04f 30ff 	mov.w	r0, #4294967295
 800fb6a:	e033      	b.n	800fbd4 <__swsetup_r+0x98>
 800fb6c:	0758      	lsls	r0, r3, #29
 800fb6e:	d512      	bpl.n	800fb96 <__swsetup_r+0x5a>
 800fb70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb72:	b141      	cbz	r1, 800fb86 <__swsetup_r+0x4a>
 800fb74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb78:	4299      	cmp	r1, r3
 800fb7a:	d002      	beq.n	800fb82 <__swsetup_r+0x46>
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	f000 f8d5 	bl	800fd2c <_free_r>
 800fb82:	2300      	movs	r3, #0
 800fb84:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb86:	89a3      	ldrh	r3, [r4, #12]
 800fb88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	6063      	str	r3, [r4, #4]
 800fb92:	6923      	ldr	r3, [r4, #16]
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	89a3      	ldrh	r3, [r4, #12]
 800fb98:	f043 0308 	orr.w	r3, r3, #8
 800fb9c:	81a3      	strh	r3, [r4, #12]
 800fb9e:	6923      	ldr	r3, [r4, #16]
 800fba0:	b94b      	cbnz	r3, 800fbb6 <__swsetup_r+0x7a>
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbac:	d003      	beq.n	800fbb6 <__swsetup_r+0x7a>
 800fbae:	4621      	mov	r1, r4
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	f000 fca7 	bl	8010504 <__smakebuf_r>
 800fbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbba:	f013 0201 	ands.w	r2, r3, #1
 800fbbe:	d00a      	beq.n	800fbd6 <__swsetup_r+0x9a>
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	60a2      	str	r2, [r4, #8]
 800fbc4:	6962      	ldr	r2, [r4, #20]
 800fbc6:	4252      	negs	r2, r2
 800fbc8:	61a2      	str	r2, [r4, #24]
 800fbca:	6922      	ldr	r2, [r4, #16]
 800fbcc:	b942      	cbnz	r2, 800fbe0 <__swsetup_r+0xa4>
 800fbce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fbd2:	d1c5      	bne.n	800fb60 <__swsetup_r+0x24>
 800fbd4:	bd38      	pop	{r3, r4, r5, pc}
 800fbd6:	0799      	lsls	r1, r3, #30
 800fbd8:	bf58      	it	pl
 800fbda:	6962      	ldrpl	r2, [r4, #20]
 800fbdc:	60a2      	str	r2, [r4, #8]
 800fbde:	e7f4      	b.n	800fbca <__swsetup_r+0x8e>
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	e7f7      	b.n	800fbd4 <__swsetup_r+0x98>
 800fbe4:	2000002c 	.word	0x2000002c

0800fbe8 <memset>:
 800fbe8:	4402      	add	r2, r0
 800fbea:	4603      	mov	r3, r0
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d100      	bne.n	800fbf2 <memset+0xa>
 800fbf0:	4770      	bx	lr
 800fbf2:	f803 1b01 	strb.w	r1, [r3], #1
 800fbf6:	e7f9      	b.n	800fbec <memset+0x4>

0800fbf8 <_close_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d06      	ldr	r5, [pc, #24]	@ (800fc14 <_close_r+0x1c>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	602b      	str	r3, [r5, #0]
 800fc04:	f7f6 fd0e 	bl	8006624 <_close>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_close_r+0x1a>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_close_r+0x1a>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20000640 	.word	0x20000640

0800fc18 <_lseek_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d07      	ldr	r5, [pc, #28]	@ (800fc38 <_lseek_r+0x20>)
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	4608      	mov	r0, r1
 800fc20:	4611      	mov	r1, r2
 800fc22:	2200      	movs	r2, #0
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	f7f6 fd23 	bl	8006672 <_lseek>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_lseek_r+0x1e>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_lseek_r+0x1e>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	20000640 	.word	0x20000640

0800fc3c <_read_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d07      	ldr	r5, [pc, #28]	@ (800fc5c <_read_r+0x20>)
 800fc40:	4604      	mov	r4, r0
 800fc42:	4608      	mov	r0, r1
 800fc44:	4611      	mov	r1, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	602a      	str	r2, [r5, #0]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f7f6 fcb1 	bl	80065b2 <_read>
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	d102      	bne.n	800fc5a <_read_r+0x1e>
 800fc54:	682b      	ldr	r3, [r5, #0]
 800fc56:	b103      	cbz	r3, 800fc5a <_read_r+0x1e>
 800fc58:	6023      	str	r3, [r4, #0]
 800fc5a:	bd38      	pop	{r3, r4, r5, pc}
 800fc5c:	20000640 	.word	0x20000640

0800fc60 <_sbrk_r>:
 800fc60:	b538      	push	{r3, r4, r5, lr}
 800fc62:	4d06      	ldr	r5, [pc, #24]	@ (800fc7c <_sbrk_r+0x1c>)
 800fc64:	2300      	movs	r3, #0
 800fc66:	4604      	mov	r4, r0
 800fc68:	4608      	mov	r0, r1
 800fc6a:	602b      	str	r3, [r5, #0]
 800fc6c:	f7f6 fd0e 	bl	800668c <_sbrk>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	d102      	bne.n	800fc7a <_sbrk_r+0x1a>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	b103      	cbz	r3, 800fc7a <_sbrk_r+0x1a>
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	bd38      	pop	{r3, r4, r5, pc}
 800fc7c:	20000640 	.word	0x20000640

0800fc80 <_write_r>:
 800fc80:	b538      	push	{r3, r4, r5, lr}
 800fc82:	4d07      	ldr	r5, [pc, #28]	@ (800fca0 <_write_r+0x20>)
 800fc84:	4604      	mov	r4, r0
 800fc86:	4608      	mov	r0, r1
 800fc88:	4611      	mov	r1, r2
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	602a      	str	r2, [r5, #0]
 800fc8e:	461a      	mov	r2, r3
 800fc90:	f7f6 fcac 	bl	80065ec <_write>
 800fc94:	1c43      	adds	r3, r0, #1
 800fc96:	d102      	bne.n	800fc9e <_write_r+0x1e>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	b103      	cbz	r3, 800fc9e <_write_r+0x1e>
 800fc9c:	6023      	str	r3, [r4, #0]
 800fc9e:	bd38      	pop	{r3, r4, r5, pc}
 800fca0:	20000640 	.word	0x20000640

0800fca4 <__errno>:
 800fca4:	4b01      	ldr	r3, [pc, #4]	@ (800fcac <__errno+0x8>)
 800fca6:	6818      	ldr	r0, [r3, #0]
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	2000002c 	.word	0x2000002c

0800fcb0 <__libc_init_array>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	4d0d      	ldr	r5, [pc, #52]	@ (800fce8 <__libc_init_array+0x38>)
 800fcb4:	4c0d      	ldr	r4, [pc, #52]	@ (800fcec <__libc_init_array+0x3c>)
 800fcb6:	1b64      	subs	r4, r4, r5
 800fcb8:	10a4      	asrs	r4, r4, #2
 800fcba:	2600      	movs	r6, #0
 800fcbc:	42a6      	cmp	r6, r4
 800fcbe:	d109      	bne.n	800fcd4 <__libc_init_array+0x24>
 800fcc0:	4d0b      	ldr	r5, [pc, #44]	@ (800fcf0 <__libc_init_array+0x40>)
 800fcc2:	4c0c      	ldr	r4, [pc, #48]	@ (800fcf4 <__libc_init_array+0x44>)
 800fcc4:	f000 fcc0 	bl	8010648 <_init>
 800fcc8:	1b64      	subs	r4, r4, r5
 800fcca:	10a4      	asrs	r4, r4, #2
 800fccc:	2600      	movs	r6, #0
 800fcce:	42a6      	cmp	r6, r4
 800fcd0:	d105      	bne.n	800fcde <__libc_init_array+0x2e>
 800fcd2:	bd70      	pop	{r4, r5, r6, pc}
 800fcd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcd8:	4798      	blx	r3
 800fcda:	3601      	adds	r6, #1
 800fcdc:	e7ee      	b.n	800fcbc <__libc_init_array+0xc>
 800fcde:	f855 3b04 	ldr.w	r3, [r5], #4
 800fce2:	4798      	blx	r3
 800fce4:	3601      	adds	r6, #1
 800fce6:	e7f2      	b.n	800fcce <__libc_init_array+0x1e>
 800fce8:	08010bc4 	.word	0x08010bc4
 800fcec:	08010bc4 	.word	0x08010bc4
 800fcf0:	08010bc4 	.word	0x08010bc4
 800fcf4:	08010bc8 	.word	0x08010bc8

0800fcf8 <__retarget_lock_init_recursive>:
 800fcf8:	4770      	bx	lr

0800fcfa <__retarget_lock_acquire_recursive>:
 800fcfa:	4770      	bx	lr

0800fcfc <__retarget_lock_release_recursive>:
 800fcfc:	4770      	bx	lr

0800fcfe <__aeabi_memcpy>:
 800fcfe:	f000 b800 	b.w	800fd02 <memcpy>

0800fd02 <memcpy>:
 800fd02:	440a      	add	r2, r1
 800fd04:	4291      	cmp	r1, r2
 800fd06:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd0a:	d100      	bne.n	800fd0e <memcpy+0xc>
 800fd0c:	4770      	bx	lr
 800fd0e:	b510      	push	{r4, lr}
 800fd10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd18:	4291      	cmp	r1, r2
 800fd1a:	d1f9      	bne.n	800fd10 <memcpy+0xe>
 800fd1c:	bd10      	pop	{r4, pc}

0800fd1e <abort>:
 800fd1e:	b508      	push	{r3, lr}
 800fd20:	2006      	movs	r0, #6
 800fd22:	f000 fc53 	bl	80105cc <raise>
 800fd26:	2001      	movs	r0, #1
 800fd28:	f7f6 fc38 	bl	800659c <_exit>

0800fd2c <_free_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	4605      	mov	r5, r0
 800fd30:	2900      	cmp	r1, #0
 800fd32:	d041      	beq.n	800fdb8 <_free_r+0x8c>
 800fd34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd38:	1f0c      	subs	r4, r1, #4
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	bfb8      	it	lt
 800fd3e:	18e4      	addlt	r4, r4, r3
 800fd40:	f7ff fc76 	bl	800f630 <__malloc_lock>
 800fd44:	4a1d      	ldr	r2, [pc, #116]	@ (800fdbc <_free_r+0x90>)
 800fd46:	6813      	ldr	r3, [r2, #0]
 800fd48:	b933      	cbnz	r3, 800fd58 <_free_r+0x2c>
 800fd4a:	6063      	str	r3, [r4, #4]
 800fd4c:	6014      	str	r4, [r2, #0]
 800fd4e:	4628      	mov	r0, r5
 800fd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd54:	f7ff bc72 	b.w	800f63c <__malloc_unlock>
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	d908      	bls.n	800fd6e <_free_r+0x42>
 800fd5c:	6820      	ldr	r0, [r4, #0]
 800fd5e:	1821      	adds	r1, r4, r0
 800fd60:	428b      	cmp	r3, r1
 800fd62:	bf01      	itttt	eq
 800fd64:	6819      	ldreq	r1, [r3, #0]
 800fd66:	685b      	ldreq	r3, [r3, #4]
 800fd68:	1809      	addeq	r1, r1, r0
 800fd6a:	6021      	streq	r1, [r4, #0]
 800fd6c:	e7ed      	b.n	800fd4a <_free_r+0x1e>
 800fd6e:	461a      	mov	r2, r3
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	b10b      	cbz	r3, 800fd78 <_free_r+0x4c>
 800fd74:	42a3      	cmp	r3, r4
 800fd76:	d9fa      	bls.n	800fd6e <_free_r+0x42>
 800fd78:	6811      	ldr	r1, [r2, #0]
 800fd7a:	1850      	adds	r0, r2, r1
 800fd7c:	42a0      	cmp	r0, r4
 800fd7e:	d10b      	bne.n	800fd98 <_free_r+0x6c>
 800fd80:	6820      	ldr	r0, [r4, #0]
 800fd82:	4401      	add	r1, r0
 800fd84:	1850      	adds	r0, r2, r1
 800fd86:	4283      	cmp	r3, r0
 800fd88:	6011      	str	r1, [r2, #0]
 800fd8a:	d1e0      	bne.n	800fd4e <_free_r+0x22>
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	6053      	str	r3, [r2, #4]
 800fd92:	4408      	add	r0, r1
 800fd94:	6010      	str	r0, [r2, #0]
 800fd96:	e7da      	b.n	800fd4e <_free_r+0x22>
 800fd98:	d902      	bls.n	800fda0 <_free_r+0x74>
 800fd9a:	230c      	movs	r3, #12
 800fd9c:	602b      	str	r3, [r5, #0]
 800fd9e:	e7d6      	b.n	800fd4e <_free_r+0x22>
 800fda0:	6820      	ldr	r0, [r4, #0]
 800fda2:	1821      	adds	r1, r4, r0
 800fda4:	428b      	cmp	r3, r1
 800fda6:	bf04      	itt	eq
 800fda8:	6819      	ldreq	r1, [r3, #0]
 800fdaa:	685b      	ldreq	r3, [r3, #4]
 800fdac:	6063      	str	r3, [r4, #4]
 800fdae:	bf04      	itt	eq
 800fdb0:	1809      	addeq	r1, r1, r0
 800fdb2:	6021      	streq	r1, [r4, #0]
 800fdb4:	6054      	str	r4, [r2, #4]
 800fdb6:	e7ca      	b.n	800fd4e <_free_r+0x22>
 800fdb8:	bd38      	pop	{r3, r4, r5, pc}
 800fdba:	bf00      	nop
 800fdbc:	20000500 	.word	0x20000500

0800fdc0 <__sfputc_r>:
 800fdc0:	6893      	ldr	r3, [r2, #8]
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	b410      	push	{r4}
 800fdc8:	6093      	str	r3, [r2, #8]
 800fdca:	da08      	bge.n	800fdde <__sfputc_r+0x1e>
 800fdcc:	6994      	ldr	r4, [r2, #24]
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	db01      	blt.n	800fdd6 <__sfputc_r+0x16>
 800fdd2:	290a      	cmp	r1, #10
 800fdd4:	d103      	bne.n	800fdde <__sfputc_r+0x1e>
 800fdd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdda:	f7ff be70 	b.w	800fabe <__swbuf_r>
 800fdde:	6813      	ldr	r3, [r2, #0]
 800fde0:	1c58      	adds	r0, r3, #1
 800fde2:	6010      	str	r0, [r2, #0]
 800fde4:	7019      	strb	r1, [r3, #0]
 800fde6:	4608      	mov	r0, r1
 800fde8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <__sfputs_r>:
 800fdee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	460f      	mov	r7, r1
 800fdf4:	4614      	mov	r4, r2
 800fdf6:	18d5      	adds	r5, r2, r3
 800fdf8:	42ac      	cmp	r4, r5
 800fdfa:	d101      	bne.n	800fe00 <__sfputs_r+0x12>
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	e007      	b.n	800fe10 <__sfputs_r+0x22>
 800fe00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe04:	463a      	mov	r2, r7
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ffda 	bl	800fdc0 <__sfputc_r>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	d1f3      	bne.n	800fdf8 <__sfputs_r+0xa>
 800fe10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe14 <_vfiprintf_r>:
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	460d      	mov	r5, r1
 800fe1a:	b09d      	sub	sp, #116	@ 0x74
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	4698      	mov	r8, r3
 800fe20:	4606      	mov	r6, r0
 800fe22:	b118      	cbz	r0, 800fe2c <_vfiprintf_r+0x18>
 800fe24:	6a03      	ldr	r3, [r0, #32]
 800fe26:	b90b      	cbnz	r3, 800fe2c <_vfiprintf_r+0x18>
 800fe28:	f7ff fc9a 	bl	800f760 <__sinit>
 800fe2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe2e:	07d9      	lsls	r1, r3, #31
 800fe30:	d405      	bmi.n	800fe3e <_vfiprintf_r+0x2a>
 800fe32:	89ab      	ldrh	r3, [r5, #12]
 800fe34:	059a      	lsls	r2, r3, #22
 800fe36:	d402      	bmi.n	800fe3e <_vfiprintf_r+0x2a>
 800fe38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe3a:	f7ff ff5e 	bl	800fcfa <__retarget_lock_acquire_recursive>
 800fe3e:	89ab      	ldrh	r3, [r5, #12]
 800fe40:	071b      	lsls	r3, r3, #28
 800fe42:	d501      	bpl.n	800fe48 <_vfiprintf_r+0x34>
 800fe44:	692b      	ldr	r3, [r5, #16]
 800fe46:	b99b      	cbnz	r3, 800fe70 <_vfiprintf_r+0x5c>
 800fe48:	4629      	mov	r1, r5
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	f7ff fe76 	bl	800fb3c <__swsetup_r>
 800fe50:	b170      	cbz	r0, 800fe70 <_vfiprintf_r+0x5c>
 800fe52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe54:	07dc      	lsls	r4, r3, #31
 800fe56:	d504      	bpl.n	800fe62 <_vfiprintf_r+0x4e>
 800fe58:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5c:	b01d      	add	sp, #116	@ 0x74
 800fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe62:	89ab      	ldrh	r3, [r5, #12]
 800fe64:	0598      	lsls	r0, r3, #22
 800fe66:	d4f7      	bmi.n	800fe58 <_vfiprintf_r+0x44>
 800fe68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe6a:	f7ff ff47 	bl	800fcfc <__retarget_lock_release_recursive>
 800fe6e:	e7f3      	b.n	800fe58 <_vfiprintf_r+0x44>
 800fe70:	2300      	movs	r3, #0
 800fe72:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe74:	2320      	movs	r3, #32
 800fe76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe7e:	2330      	movs	r3, #48	@ 0x30
 800fe80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010030 <_vfiprintf_r+0x21c>
 800fe84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe88:	f04f 0901 	mov.w	r9, #1
 800fe8c:	4623      	mov	r3, r4
 800fe8e:	469a      	mov	sl, r3
 800fe90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe94:	b10a      	cbz	r2, 800fe9a <_vfiprintf_r+0x86>
 800fe96:	2a25      	cmp	r2, #37	@ 0x25
 800fe98:	d1f9      	bne.n	800fe8e <_vfiprintf_r+0x7a>
 800fe9a:	ebba 0b04 	subs.w	fp, sl, r4
 800fe9e:	d00b      	beq.n	800feb8 <_vfiprintf_r+0xa4>
 800fea0:	465b      	mov	r3, fp
 800fea2:	4622      	mov	r2, r4
 800fea4:	4629      	mov	r1, r5
 800fea6:	4630      	mov	r0, r6
 800fea8:	f7ff ffa1 	bl	800fdee <__sfputs_r>
 800feac:	3001      	adds	r0, #1
 800feae:	f000 80a7 	beq.w	8010000 <_vfiprintf_r+0x1ec>
 800feb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feb4:	445a      	add	r2, fp
 800feb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800feb8:	f89a 3000 	ldrb.w	r3, [sl]
 800febc:	2b00      	cmp	r3, #0
 800febe:	f000 809f 	beq.w	8010000 <_vfiprintf_r+0x1ec>
 800fec2:	2300      	movs	r3, #0
 800fec4:	f04f 32ff 	mov.w	r2, #4294967295
 800fec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fecc:	f10a 0a01 	add.w	sl, sl, #1
 800fed0:	9304      	str	r3, [sp, #16]
 800fed2:	9307      	str	r3, [sp, #28]
 800fed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fed8:	931a      	str	r3, [sp, #104]	@ 0x68
 800feda:	4654      	mov	r4, sl
 800fedc:	2205      	movs	r2, #5
 800fede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee2:	4853      	ldr	r0, [pc, #332]	@ (8010030 <_vfiprintf_r+0x21c>)
 800fee4:	f7f4 fd34 	bl	8004950 <memchr>
 800fee8:	9a04      	ldr	r2, [sp, #16]
 800feea:	b9d8      	cbnz	r0, 800ff24 <_vfiprintf_r+0x110>
 800feec:	06d1      	lsls	r1, r2, #27
 800feee:	bf44      	itt	mi
 800fef0:	2320      	movmi	r3, #32
 800fef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fef6:	0713      	lsls	r3, r2, #28
 800fef8:	bf44      	itt	mi
 800fefa:	232b      	movmi	r3, #43	@ 0x2b
 800fefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff00:	f89a 3000 	ldrb.w	r3, [sl]
 800ff04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff06:	d015      	beq.n	800ff34 <_vfiprintf_r+0x120>
 800ff08:	9a07      	ldr	r2, [sp, #28]
 800ff0a:	4654      	mov	r4, sl
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	f04f 0c0a 	mov.w	ip, #10
 800ff12:	4621      	mov	r1, r4
 800ff14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff18:	3b30      	subs	r3, #48	@ 0x30
 800ff1a:	2b09      	cmp	r3, #9
 800ff1c:	d94b      	bls.n	800ffb6 <_vfiprintf_r+0x1a2>
 800ff1e:	b1b0      	cbz	r0, 800ff4e <_vfiprintf_r+0x13a>
 800ff20:	9207      	str	r2, [sp, #28]
 800ff22:	e014      	b.n	800ff4e <_vfiprintf_r+0x13a>
 800ff24:	eba0 0308 	sub.w	r3, r0, r8
 800ff28:	fa09 f303 	lsl.w	r3, r9, r3
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	46a2      	mov	sl, r4
 800ff32:	e7d2      	b.n	800feda <_vfiprintf_r+0xc6>
 800ff34:	9b03      	ldr	r3, [sp, #12]
 800ff36:	1d19      	adds	r1, r3, #4
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	9103      	str	r1, [sp, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	bfbb      	ittet	lt
 800ff40:	425b      	neglt	r3, r3
 800ff42:	f042 0202 	orrlt.w	r2, r2, #2
 800ff46:	9307      	strge	r3, [sp, #28]
 800ff48:	9307      	strlt	r3, [sp, #28]
 800ff4a:	bfb8      	it	lt
 800ff4c:	9204      	strlt	r2, [sp, #16]
 800ff4e:	7823      	ldrb	r3, [r4, #0]
 800ff50:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff52:	d10a      	bne.n	800ff6a <_vfiprintf_r+0x156>
 800ff54:	7863      	ldrb	r3, [r4, #1]
 800ff56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff58:	d132      	bne.n	800ffc0 <_vfiprintf_r+0x1ac>
 800ff5a:	9b03      	ldr	r3, [sp, #12]
 800ff5c:	1d1a      	adds	r2, r3, #4
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	9203      	str	r2, [sp, #12]
 800ff62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff66:	3402      	adds	r4, #2
 800ff68:	9305      	str	r3, [sp, #20]
 800ff6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010040 <_vfiprintf_r+0x22c>
 800ff6e:	7821      	ldrb	r1, [r4, #0]
 800ff70:	2203      	movs	r2, #3
 800ff72:	4650      	mov	r0, sl
 800ff74:	f7f4 fcec 	bl	8004950 <memchr>
 800ff78:	b138      	cbz	r0, 800ff8a <_vfiprintf_r+0x176>
 800ff7a:	9b04      	ldr	r3, [sp, #16]
 800ff7c:	eba0 000a 	sub.w	r0, r0, sl
 800ff80:	2240      	movs	r2, #64	@ 0x40
 800ff82:	4082      	lsls	r2, r0
 800ff84:	4313      	orrs	r3, r2
 800ff86:	3401      	adds	r4, #1
 800ff88:	9304      	str	r3, [sp, #16]
 800ff8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8e:	4829      	ldr	r0, [pc, #164]	@ (8010034 <_vfiprintf_r+0x220>)
 800ff90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff94:	2206      	movs	r2, #6
 800ff96:	f7f4 fcdb 	bl	8004950 <memchr>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	d03f      	beq.n	801001e <_vfiprintf_r+0x20a>
 800ff9e:	4b26      	ldr	r3, [pc, #152]	@ (8010038 <_vfiprintf_r+0x224>)
 800ffa0:	bb1b      	cbnz	r3, 800ffea <_vfiprintf_r+0x1d6>
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	3307      	adds	r3, #7
 800ffa6:	f023 0307 	bic.w	r3, r3, #7
 800ffaa:	3308      	adds	r3, #8
 800ffac:	9303      	str	r3, [sp, #12]
 800ffae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffb0:	443b      	add	r3, r7
 800ffb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffb4:	e76a      	b.n	800fe8c <_vfiprintf_r+0x78>
 800ffb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffba:	460c      	mov	r4, r1
 800ffbc:	2001      	movs	r0, #1
 800ffbe:	e7a8      	b.n	800ff12 <_vfiprintf_r+0xfe>
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	3401      	adds	r4, #1
 800ffc4:	9305      	str	r3, [sp, #20]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	f04f 0c0a 	mov.w	ip, #10
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd2:	3a30      	subs	r2, #48	@ 0x30
 800ffd4:	2a09      	cmp	r2, #9
 800ffd6:	d903      	bls.n	800ffe0 <_vfiprintf_r+0x1cc>
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d0c6      	beq.n	800ff6a <_vfiprintf_r+0x156>
 800ffdc:	9105      	str	r1, [sp, #20]
 800ffde:	e7c4      	b.n	800ff6a <_vfiprintf_r+0x156>
 800ffe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e7f0      	b.n	800ffcc <_vfiprintf_r+0x1b8>
 800ffea:	ab03      	add	r3, sp, #12
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	462a      	mov	r2, r5
 800fff0:	4b12      	ldr	r3, [pc, #72]	@ (801003c <_vfiprintf_r+0x228>)
 800fff2:	a904      	add	r1, sp, #16
 800fff4:	4630      	mov	r0, r6
 800fff6:	f3af 8000 	nop.w
 800fffa:	4607      	mov	r7, r0
 800fffc:	1c78      	adds	r0, r7, #1
 800fffe:	d1d6      	bne.n	800ffae <_vfiprintf_r+0x19a>
 8010000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010002:	07d9      	lsls	r1, r3, #31
 8010004:	d405      	bmi.n	8010012 <_vfiprintf_r+0x1fe>
 8010006:	89ab      	ldrh	r3, [r5, #12]
 8010008:	059a      	lsls	r2, r3, #22
 801000a:	d402      	bmi.n	8010012 <_vfiprintf_r+0x1fe>
 801000c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801000e:	f7ff fe75 	bl	800fcfc <__retarget_lock_release_recursive>
 8010012:	89ab      	ldrh	r3, [r5, #12]
 8010014:	065b      	lsls	r3, r3, #25
 8010016:	f53f af1f 	bmi.w	800fe58 <_vfiprintf_r+0x44>
 801001a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801001c:	e71e      	b.n	800fe5c <_vfiprintf_r+0x48>
 801001e:	ab03      	add	r3, sp, #12
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	462a      	mov	r2, r5
 8010024:	4b05      	ldr	r3, [pc, #20]	@ (801003c <_vfiprintf_r+0x228>)
 8010026:	a904      	add	r1, sp, #16
 8010028:	4630      	mov	r0, r6
 801002a:	f000 f879 	bl	8010120 <_printf_i>
 801002e:	e7e4      	b.n	800fffa <_vfiprintf_r+0x1e6>
 8010030:	08010b88 	.word	0x08010b88
 8010034:	08010b92 	.word	0x08010b92
 8010038:	00000000 	.word	0x00000000
 801003c:	0800fdef 	.word	0x0800fdef
 8010040:	08010b8e 	.word	0x08010b8e

08010044 <_printf_common>:
 8010044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010048:	4616      	mov	r6, r2
 801004a:	4698      	mov	r8, r3
 801004c:	688a      	ldr	r2, [r1, #8]
 801004e:	690b      	ldr	r3, [r1, #16]
 8010050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010054:	4293      	cmp	r3, r2
 8010056:	bfb8      	it	lt
 8010058:	4613      	movlt	r3, r2
 801005a:	6033      	str	r3, [r6, #0]
 801005c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010060:	4607      	mov	r7, r0
 8010062:	460c      	mov	r4, r1
 8010064:	b10a      	cbz	r2, 801006a <_printf_common+0x26>
 8010066:	3301      	adds	r3, #1
 8010068:	6033      	str	r3, [r6, #0]
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	0699      	lsls	r1, r3, #26
 801006e:	bf42      	ittt	mi
 8010070:	6833      	ldrmi	r3, [r6, #0]
 8010072:	3302      	addmi	r3, #2
 8010074:	6033      	strmi	r3, [r6, #0]
 8010076:	6825      	ldr	r5, [r4, #0]
 8010078:	f015 0506 	ands.w	r5, r5, #6
 801007c:	d106      	bne.n	801008c <_printf_common+0x48>
 801007e:	f104 0a19 	add.w	sl, r4, #25
 8010082:	68e3      	ldr	r3, [r4, #12]
 8010084:	6832      	ldr	r2, [r6, #0]
 8010086:	1a9b      	subs	r3, r3, r2
 8010088:	42ab      	cmp	r3, r5
 801008a:	dc26      	bgt.n	80100da <_printf_common+0x96>
 801008c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010090:	6822      	ldr	r2, [r4, #0]
 8010092:	3b00      	subs	r3, #0
 8010094:	bf18      	it	ne
 8010096:	2301      	movne	r3, #1
 8010098:	0692      	lsls	r2, r2, #26
 801009a:	d42b      	bmi.n	80100f4 <_printf_common+0xb0>
 801009c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100a0:	4641      	mov	r1, r8
 80100a2:	4638      	mov	r0, r7
 80100a4:	47c8      	blx	r9
 80100a6:	3001      	adds	r0, #1
 80100a8:	d01e      	beq.n	80100e8 <_printf_common+0xa4>
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	6922      	ldr	r2, [r4, #16]
 80100ae:	f003 0306 	and.w	r3, r3, #6
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	bf02      	ittt	eq
 80100b6:	68e5      	ldreq	r5, [r4, #12]
 80100b8:	6833      	ldreq	r3, [r6, #0]
 80100ba:	1aed      	subeq	r5, r5, r3
 80100bc:	68a3      	ldr	r3, [r4, #8]
 80100be:	bf0c      	ite	eq
 80100c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100c4:	2500      	movne	r5, #0
 80100c6:	4293      	cmp	r3, r2
 80100c8:	bfc4      	itt	gt
 80100ca:	1a9b      	subgt	r3, r3, r2
 80100cc:	18ed      	addgt	r5, r5, r3
 80100ce:	2600      	movs	r6, #0
 80100d0:	341a      	adds	r4, #26
 80100d2:	42b5      	cmp	r5, r6
 80100d4:	d11a      	bne.n	801010c <_printf_common+0xc8>
 80100d6:	2000      	movs	r0, #0
 80100d8:	e008      	b.n	80100ec <_printf_common+0xa8>
 80100da:	2301      	movs	r3, #1
 80100dc:	4652      	mov	r2, sl
 80100de:	4641      	mov	r1, r8
 80100e0:	4638      	mov	r0, r7
 80100e2:	47c8      	blx	r9
 80100e4:	3001      	adds	r0, #1
 80100e6:	d103      	bne.n	80100f0 <_printf_common+0xac>
 80100e8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f0:	3501      	adds	r5, #1
 80100f2:	e7c6      	b.n	8010082 <_printf_common+0x3e>
 80100f4:	18e1      	adds	r1, r4, r3
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	2030      	movs	r0, #48	@ 0x30
 80100fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100fe:	4422      	add	r2, r4
 8010100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010108:	3302      	adds	r3, #2
 801010a:	e7c7      	b.n	801009c <_printf_common+0x58>
 801010c:	2301      	movs	r3, #1
 801010e:	4622      	mov	r2, r4
 8010110:	4641      	mov	r1, r8
 8010112:	4638      	mov	r0, r7
 8010114:	47c8      	blx	r9
 8010116:	3001      	adds	r0, #1
 8010118:	d0e6      	beq.n	80100e8 <_printf_common+0xa4>
 801011a:	3601      	adds	r6, #1
 801011c:	e7d9      	b.n	80100d2 <_printf_common+0x8e>
	...

08010120 <_printf_i>:
 8010120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010124:	7e0f      	ldrb	r7, [r1, #24]
 8010126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010128:	2f78      	cmp	r7, #120	@ 0x78
 801012a:	4691      	mov	r9, r2
 801012c:	4680      	mov	r8, r0
 801012e:	460c      	mov	r4, r1
 8010130:	469a      	mov	sl, r3
 8010132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010136:	d807      	bhi.n	8010148 <_printf_i+0x28>
 8010138:	2f62      	cmp	r7, #98	@ 0x62
 801013a:	d80a      	bhi.n	8010152 <_printf_i+0x32>
 801013c:	2f00      	cmp	r7, #0
 801013e:	f000 80d2 	beq.w	80102e6 <_printf_i+0x1c6>
 8010142:	2f58      	cmp	r7, #88	@ 0x58
 8010144:	f000 80b9 	beq.w	80102ba <_printf_i+0x19a>
 8010148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801014c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010150:	e03a      	b.n	80101c8 <_printf_i+0xa8>
 8010152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010156:	2b15      	cmp	r3, #21
 8010158:	d8f6      	bhi.n	8010148 <_printf_i+0x28>
 801015a:	a101      	add	r1, pc, #4	@ (adr r1, 8010160 <_printf_i+0x40>)
 801015c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010160:	080101b9 	.word	0x080101b9
 8010164:	080101cd 	.word	0x080101cd
 8010168:	08010149 	.word	0x08010149
 801016c:	08010149 	.word	0x08010149
 8010170:	08010149 	.word	0x08010149
 8010174:	08010149 	.word	0x08010149
 8010178:	080101cd 	.word	0x080101cd
 801017c:	08010149 	.word	0x08010149
 8010180:	08010149 	.word	0x08010149
 8010184:	08010149 	.word	0x08010149
 8010188:	08010149 	.word	0x08010149
 801018c:	080102cd 	.word	0x080102cd
 8010190:	080101f7 	.word	0x080101f7
 8010194:	08010287 	.word	0x08010287
 8010198:	08010149 	.word	0x08010149
 801019c:	08010149 	.word	0x08010149
 80101a0:	080102ef 	.word	0x080102ef
 80101a4:	08010149 	.word	0x08010149
 80101a8:	080101f7 	.word	0x080101f7
 80101ac:	08010149 	.word	0x08010149
 80101b0:	08010149 	.word	0x08010149
 80101b4:	0801028f 	.word	0x0801028f
 80101b8:	6833      	ldr	r3, [r6, #0]
 80101ba:	1d1a      	adds	r2, r3, #4
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	6032      	str	r2, [r6, #0]
 80101c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80101c8:	2301      	movs	r3, #1
 80101ca:	e09d      	b.n	8010308 <_printf_i+0x1e8>
 80101cc:	6833      	ldr	r3, [r6, #0]
 80101ce:	6820      	ldr	r0, [r4, #0]
 80101d0:	1d19      	adds	r1, r3, #4
 80101d2:	6031      	str	r1, [r6, #0]
 80101d4:	0606      	lsls	r6, r0, #24
 80101d6:	d501      	bpl.n	80101dc <_printf_i+0xbc>
 80101d8:	681d      	ldr	r5, [r3, #0]
 80101da:	e003      	b.n	80101e4 <_printf_i+0xc4>
 80101dc:	0645      	lsls	r5, r0, #25
 80101de:	d5fb      	bpl.n	80101d8 <_printf_i+0xb8>
 80101e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80101e4:	2d00      	cmp	r5, #0
 80101e6:	da03      	bge.n	80101f0 <_printf_i+0xd0>
 80101e8:	232d      	movs	r3, #45	@ 0x2d
 80101ea:	426d      	negs	r5, r5
 80101ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101f0:	4859      	ldr	r0, [pc, #356]	@ (8010358 <_printf_i+0x238>)
 80101f2:	230a      	movs	r3, #10
 80101f4:	e011      	b.n	801021a <_printf_i+0xfa>
 80101f6:	6821      	ldr	r1, [r4, #0]
 80101f8:	6833      	ldr	r3, [r6, #0]
 80101fa:	0608      	lsls	r0, r1, #24
 80101fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8010200:	d402      	bmi.n	8010208 <_printf_i+0xe8>
 8010202:	0649      	lsls	r1, r1, #25
 8010204:	bf48      	it	mi
 8010206:	b2ad      	uxthmi	r5, r5
 8010208:	2f6f      	cmp	r7, #111	@ 0x6f
 801020a:	4853      	ldr	r0, [pc, #332]	@ (8010358 <_printf_i+0x238>)
 801020c:	6033      	str	r3, [r6, #0]
 801020e:	bf14      	ite	ne
 8010210:	230a      	movne	r3, #10
 8010212:	2308      	moveq	r3, #8
 8010214:	2100      	movs	r1, #0
 8010216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801021a:	6866      	ldr	r6, [r4, #4]
 801021c:	60a6      	str	r6, [r4, #8]
 801021e:	2e00      	cmp	r6, #0
 8010220:	bfa2      	ittt	ge
 8010222:	6821      	ldrge	r1, [r4, #0]
 8010224:	f021 0104 	bicge.w	r1, r1, #4
 8010228:	6021      	strge	r1, [r4, #0]
 801022a:	b90d      	cbnz	r5, 8010230 <_printf_i+0x110>
 801022c:	2e00      	cmp	r6, #0
 801022e:	d04b      	beq.n	80102c8 <_printf_i+0x1a8>
 8010230:	4616      	mov	r6, r2
 8010232:	fbb5 f1f3 	udiv	r1, r5, r3
 8010236:	fb03 5711 	mls	r7, r3, r1, r5
 801023a:	5dc7      	ldrb	r7, [r0, r7]
 801023c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010240:	462f      	mov	r7, r5
 8010242:	42bb      	cmp	r3, r7
 8010244:	460d      	mov	r5, r1
 8010246:	d9f4      	bls.n	8010232 <_printf_i+0x112>
 8010248:	2b08      	cmp	r3, #8
 801024a:	d10b      	bne.n	8010264 <_printf_i+0x144>
 801024c:	6823      	ldr	r3, [r4, #0]
 801024e:	07df      	lsls	r7, r3, #31
 8010250:	d508      	bpl.n	8010264 <_printf_i+0x144>
 8010252:	6923      	ldr	r3, [r4, #16]
 8010254:	6861      	ldr	r1, [r4, #4]
 8010256:	4299      	cmp	r1, r3
 8010258:	bfde      	ittt	le
 801025a:	2330      	movle	r3, #48	@ 0x30
 801025c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010260:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010264:	1b92      	subs	r2, r2, r6
 8010266:	6122      	str	r2, [r4, #16]
 8010268:	f8cd a000 	str.w	sl, [sp]
 801026c:	464b      	mov	r3, r9
 801026e:	aa03      	add	r2, sp, #12
 8010270:	4621      	mov	r1, r4
 8010272:	4640      	mov	r0, r8
 8010274:	f7ff fee6 	bl	8010044 <_printf_common>
 8010278:	3001      	adds	r0, #1
 801027a:	d14a      	bne.n	8010312 <_printf_i+0x1f2>
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	b004      	add	sp, #16
 8010282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	f043 0320 	orr.w	r3, r3, #32
 801028c:	6023      	str	r3, [r4, #0]
 801028e:	4833      	ldr	r0, [pc, #204]	@ (801035c <_printf_i+0x23c>)
 8010290:	2778      	movs	r7, #120	@ 0x78
 8010292:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	6831      	ldr	r1, [r6, #0]
 801029a:	061f      	lsls	r7, r3, #24
 801029c:	f851 5b04 	ldr.w	r5, [r1], #4
 80102a0:	d402      	bmi.n	80102a8 <_printf_i+0x188>
 80102a2:	065f      	lsls	r7, r3, #25
 80102a4:	bf48      	it	mi
 80102a6:	b2ad      	uxthmi	r5, r5
 80102a8:	6031      	str	r1, [r6, #0]
 80102aa:	07d9      	lsls	r1, r3, #31
 80102ac:	bf44      	itt	mi
 80102ae:	f043 0320 	orrmi.w	r3, r3, #32
 80102b2:	6023      	strmi	r3, [r4, #0]
 80102b4:	b11d      	cbz	r5, 80102be <_printf_i+0x19e>
 80102b6:	2310      	movs	r3, #16
 80102b8:	e7ac      	b.n	8010214 <_printf_i+0xf4>
 80102ba:	4827      	ldr	r0, [pc, #156]	@ (8010358 <_printf_i+0x238>)
 80102bc:	e7e9      	b.n	8010292 <_printf_i+0x172>
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	f023 0320 	bic.w	r3, r3, #32
 80102c4:	6023      	str	r3, [r4, #0]
 80102c6:	e7f6      	b.n	80102b6 <_printf_i+0x196>
 80102c8:	4616      	mov	r6, r2
 80102ca:	e7bd      	b.n	8010248 <_printf_i+0x128>
 80102cc:	6833      	ldr	r3, [r6, #0]
 80102ce:	6825      	ldr	r5, [r4, #0]
 80102d0:	6961      	ldr	r1, [r4, #20]
 80102d2:	1d18      	adds	r0, r3, #4
 80102d4:	6030      	str	r0, [r6, #0]
 80102d6:	062e      	lsls	r6, r5, #24
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	d501      	bpl.n	80102e0 <_printf_i+0x1c0>
 80102dc:	6019      	str	r1, [r3, #0]
 80102de:	e002      	b.n	80102e6 <_printf_i+0x1c6>
 80102e0:	0668      	lsls	r0, r5, #25
 80102e2:	d5fb      	bpl.n	80102dc <_printf_i+0x1bc>
 80102e4:	8019      	strh	r1, [r3, #0]
 80102e6:	2300      	movs	r3, #0
 80102e8:	6123      	str	r3, [r4, #16]
 80102ea:	4616      	mov	r6, r2
 80102ec:	e7bc      	b.n	8010268 <_printf_i+0x148>
 80102ee:	6833      	ldr	r3, [r6, #0]
 80102f0:	1d1a      	adds	r2, r3, #4
 80102f2:	6032      	str	r2, [r6, #0]
 80102f4:	681e      	ldr	r6, [r3, #0]
 80102f6:	6862      	ldr	r2, [r4, #4]
 80102f8:	2100      	movs	r1, #0
 80102fa:	4630      	mov	r0, r6
 80102fc:	f7f4 fb28 	bl	8004950 <memchr>
 8010300:	b108      	cbz	r0, 8010306 <_printf_i+0x1e6>
 8010302:	1b80      	subs	r0, r0, r6
 8010304:	6060      	str	r0, [r4, #4]
 8010306:	6863      	ldr	r3, [r4, #4]
 8010308:	6123      	str	r3, [r4, #16]
 801030a:	2300      	movs	r3, #0
 801030c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010310:	e7aa      	b.n	8010268 <_printf_i+0x148>
 8010312:	6923      	ldr	r3, [r4, #16]
 8010314:	4632      	mov	r2, r6
 8010316:	4649      	mov	r1, r9
 8010318:	4640      	mov	r0, r8
 801031a:	47d0      	blx	sl
 801031c:	3001      	adds	r0, #1
 801031e:	d0ad      	beq.n	801027c <_printf_i+0x15c>
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	079b      	lsls	r3, r3, #30
 8010324:	d413      	bmi.n	801034e <_printf_i+0x22e>
 8010326:	68e0      	ldr	r0, [r4, #12]
 8010328:	9b03      	ldr	r3, [sp, #12]
 801032a:	4298      	cmp	r0, r3
 801032c:	bfb8      	it	lt
 801032e:	4618      	movlt	r0, r3
 8010330:	e7a6      	b.n	8010280 <_printf_i+0x160>
 8010332:	2301      	movs	r3, #1
 8010334:	4632      	mov	r2, r6
 8010336:	4649      	mov	r1, r9
 8010338:	4640      	mov	r0, r8
 801033a:	47d0      	blx	sl
 801033c:	3001      	adds	r0, #1
 801033e:	d09d      	beq.n	801027c <_printf_i+0x15c>
 8010340:	3501      	adds	r5, #1
 8010342:	68e3      	ldr	r3, [r4, #12]
 8010344:	9903      	ldr	r1, [sp, #12]
 8010346:	1a5b      	subs	r3, r3, r1
 8010348:	42ab      	cmp	r3, r5
 801034a:	dcf2      	bgt.n	8010332 <_printf_i+0x212>
 801034c:	e7eb      	b.n	8010326 <_printf_i+0x206>
 801034e:	2500      	movs	r5, #0
 8010350:	f104 0619 	add.w	r6, r4, #25
 8010354:	e7f5      	b.n	8010342 <_printf_i+0x222>
 8010356:	bf00      	nop
 8010358:	08010b99 	.word	0x08010b99
 801035c:	08010baa 	.word	0x08010baa

08010360 <__sflush_r>:
 8010360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010368:	0716      	lsls	r6, r2, #28
 801036a:	4605      	mov	r5, r0
 801036c:	460c      	mov	r4, r1
 801036e:	d454      	bmi.n	801041a <__sflush_r+0xba>
 8010370:	684b      	ldr	r3, [r1, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	dc02      	bgt.n	801037c <__sflush_r+0x1c>
 8010376:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010378:	2b00      	cmp	r3, #0
 801037a:	dd48      	ble.n	801040e <__sflush_r+0xae>
 801037c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801037e:	2e00      	cmp	r6, #0
 8010380:	d045      	beq.n	801040e <__sflush_r+0xae>
 8010382:	2300      	movs	r3, #0
 8010384:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010388:	682f      	ldr	r7, [r5, #0]
 801038a:	6a21      	ldr	r1, [r4, #32]
 801038c:	602b      	str	r3, [r5, #0]
 801038e:	d030      	beq.n	80103f2 <__sflush_r+0x92>
 8010390:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	0759      	lsls	r1, r3, #29
 8010396:	d505      	bpl.n	80103a4 <__sflush_r+0x44>
 8010398:	6863      	ldr	r3, [r4, #4]
 801039a:	1ad2      	subs	r2, r2, r3
 801039c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801039e:	b10b      	cbz	r3, 80103a4 <__sflush_r+0x44>
 80103a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80103a2:	1ad2      	subs	r2, r2, r3
 80103a4:	2300      	movs	r3, #0
 80103a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80103a8:	6a21      	ldr	r1, [r4, #32]
 80103aa:	4628      	mov	r0, r5
 80103ac:	47b0      	blx	r6
 80103ae:	1c43      	adds	r3, r0, #1
 80103b0:	89a3      	ldrh	r3, [r4, #12]
 80103b2:	d106      	bne.n	80103c2 <__sflush_r+0x62>
 80103b4:	6829      	ldr	r1, [r5, #0]
 80103b6:	291d      	cmp	r1, #29
 80103b8:	d82b      	bhi.n	8010412 <__sflush_r+0xb2>
 80103ba:	4a2a      	ldr	r2, [pc, #168]	@ (8010464 <__sflush_r+0x104>)
 80103bc:	410a      	asrs	r2, r1
 80103be:	07d6      	lsls	r6, r2, #31
 80103c0:	d427      	bmi.n	8010412 <__sflush_r+0xb2>
 80103c2:	2200      	movs	r2, #0
 80103c4:	6062      	str	r2, [r4, #4]
 80103c6:	04d9      	lsls	r1, r3, #19
 80103c8:	6922      	ldr	r2, [r4, #16]
 80103ca:	6022      	str	r2, [r4, #0]
 80103cc:	d504      	bpl.n	80103d8 <__sflush_r+0x78>
 80103ce:	1c42      	adds	r2, r0, #1
 80103d0:	d101      	bne.n	80103d6 <__sflush_r+0x76>
 80103d2:	682b      	ldr	r3, [r5, #0]
 80103d4:	b903      	cbnz	r3, 80103d8 <__sflush_r+0x78>
 80103d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80103d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80103da:	602f      	str	r7, [r5, #0]
 80103dc:	b1b9      	cbz	r1, 801040e <__sflush_r+0xae>
 80103de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80103e2:	4299      	cmp	r1, r3
 80103e4:	d002      	beq.n	80103ec <__sflush_r+0x8c>
 80103e6:	4628      	mov	r0, r5
 80103e8:	f7ff fca0 	bl	800fd2c <_free_r>
 80103ec:	2300      	movs	r3, #0
 80103ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80103f0:	e00d      	b.n	801040e <__sflush_r+0xae>
 80103f2:	2301      	movs	r3, #1
 80103f4:	4628      	mov	r0, r5
 80103f6:	47b0      	blx	r6
 80103f8:	4602      	mov	r2, r0
 80103fa:	1c50      	adds	r0, r2, #1
 80103fc:	d1c9      	bne.n	8010392 <__sflush_r+0x32>
 80103fe:	682b      	ldr	r3, [r5, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d0c6      	beq.n	8010392 <__sflush_r+0x32>
 8010404:	2b1d      	cmp	r3, #29
 8010406:	d001      	beq.n	801040c <__sflush_r+0xac>
 8010408:	2b16      	cmp	r3, #22
 801040a:	d11e      	bne.n	801044a <__sflush_r+0xea>
 801040c:	602f      	str	r7, [r5, #0]
 801040e:	2000      	movs	r0, #0
 8010410:	e022      	b.n	8010458 <__sflush_r+0xf8>
 8010412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010416:	b21b      	sxth	r3, r3
 8010418:	e01b      	b.n	8010452 <__sflush_r+0xf2>
 801041a:	690f      	ldr	r7, [r1, #16]
 801041c:	2f00      	cmp	r7, #0
 801041e:	d0f6      	beq.n	801040e <__sflush_r+0xae>
 8010420:	0793      	lsls	r3, r2, #30
 8010422:	680e      	ldr	r6, [r1, #0]
 8010424:	bf08      	it	eq
 8010426:	694b      	ldreq	r3, [r1, #20]
 8010428:	600f      	str	r7, [r1, #0]
 801042a:	bf18      	it	ne
 801042c:	2300      	movne	r3, #0
 801042e:	eba6 0807 	sub.w	r8, r6, r7
 8010432:	608b      	str	r3, [r1, #8]
 8010434:	f1b8 0f00 	cmp.w	r8, #0
 8010438:	dde9      	ble.n	801040e <__sflush_r+0xae>
 801043a:	6a21      	ldr	r1, [r4, #32]
 801043c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801043e:	4643      	mov	r3, r8
 8010440:	463a      	mov	r2, r7
 8010442:	4628      	mov	r0, r5
 8010444:	47b0      	blx	r6
 8010446:	2800      	cmp	r0, #0
 8010448:	dc08      	bgt.n	801045c <__sflush_r+0xfc>
 801044a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801044e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	f04f 30ff 	mov.w	r0, #4294967295
 8010458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801045c:	4407      	add	r7, r0
 801045e:	eba8 0800 	sub.w	r8, r8, r0
 8010462:	e7e7      	b.n	8010434 <__sflush_r+0xd4>
 8010464:	dfbffffe 	.word	0xdfbffffe

08010468 <_fflush_r>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	690b      	ldr	r3, [r1, #16]
 801046c:	4605      	mov	r5, r0
 801046e:	460c      	mov	r4, r1
 8010470:	b913      	cbnz	r3, 8010478 <_fflush_r+0x10>
 8010472:	2500      	movs	r5, #0
 8010474:	4628      	mov	r0, r5
 8010476:	bd38      	pop	{r3, r4, r5, pc}
 8010478:	b118      	cbz	r0, 8010482 <_fflush_r+0x1a>
 801047a:	6a03      	ldr	r3, [r0, #32]
 801047c:	b90b      	cbnz	r3, 8010482 <_fflush_r+0x1a>
 801047e:	f7ff f96f 	bl	800f760 <__sinit>
 8010482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d0f3      	beq.n	8010472 <_fflush_r+0xa>
 801048a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801048c:	07d0      	lsls	r0, r2, #31
 801048e:	d404      	bmi.n	801049a <_fflush_r+0x32>
 8010490:	0599      	lsls	r1, r3, #22
 8010492:	d402      	bmi.n	801049a <_fflush_r+0x32>
 8010494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010496:	f7ff fc30 	bl	800fcfa <__retarget_lock_acquire_recursive>
 801049a:	4628      	mov	r0, r5
 801049c:	4621      	mov	r1, r4
 801049e:	f7ff ff5f 	bl	8010360 <__sflush_r>
 80104a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104a4:	07da      	lsls	r2, r3, #31
 80104a6:	4605      	mov	r5, r0
 80104a8:	d4e4      	bmi.n	8010474 <_fflush_r+0xc>
 80104aa:	89a3      	ldrh	r3, [r4, #12]
 80104ac:	059b      	lsls	r3, r3, #22
 80104ae:	d4e1      	bmi.n	8010474 <_fflush_r+0xc>
 80104b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104b2:	f7ff fc23 	bl	800fcfc <__retarget_lock_release_recursive>
 80104b6:	e7dd      	b.n	8010474 <_fflush_r+0xc>

080104b8 <__swhatbuf_r>:
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	460c      	mov	r4, r1
 80104bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104c0:	2900      	cmp	r1, #0
 80104c2:	b096      	sub	sp, #88	@ 0x58
 80104c4:	4615      	mov	r5, r2
 80104c6:	461e      	mov	r6, r3
 80104c8:	da0d      	bge.n	80104e6 <__swhatbuf_r+0x2e>
 80104ca:	89a3      	ldrh	r3, [r4, #12]
 80104cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80104d0:	f04f 0100 	mov.w	r1, #0
 80104d4:	bf14      	ite	ne
 80104d6:	2340      	movne	r3, #64	@ 0x40
 80104d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80104dc:	2000      	movs	r0, #0
 80104de:	6031      	str	r1, [r6, #0]
 80104e0:	602b      	str	r3, [r5, #0]
 80104e2:	b016      	add	sp, #88	@ 0x58
 80104e4:	bd70      	pop	{r4, r5, r6, pc}
 80104e6:	466a      	mov	r2, sp
 80104e8:	f000 f878 	bl	80105dc <_fstat_r>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	dbec      	blt.n	80104ca <__swhatbuf_r+0x12>
 80104f0:	9901      	ldr	r1, [sp, #4]
 80104f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80104f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80104fa:	4259      	negs	r1, r3
 80104fc:	4159      	adcs	r1, r3
 80104fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010502:	e7eb      	b.n	80104dc <__swhatbuf_r+0x24>

08010504 <__smakebuf_r>:
 8010504:	898b      	ldrh	r3, [r1, #12]
 8010506:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010508:	079d      	lsls	r5, r3, #30
 801050a:	4606      	mov	r6, r0
 801050c:	460c      	mov	r4, r1
 801050e:	d507      	bpl.n	8010520 <__smakebuf_r+0x1c>
 8010510:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	6123      	str	r3, [r4, #16]
 8010518:	2301      	movs	r3, #1
 801051a:	6163      	str	r3, [r4, #20]
 801051c:	b003      	add	sp, #12
 801051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010520:	ab01      	add	r3, sp, #4
 8010522:	466a      	mov	r2, sp
 8010524:	f7ff ffc8 	bl	80104b8 <__swhatbuf_r>
 8010528:	9f00      	ldr	r7, [sp, #0]
 801052a:	4605      	mov	r5, r0
 801052c:	4639      	mov	r1, r7
 801052e:	4630      	mov	r0, r6
 8010530:	f7fe fffe 	bl	800f530 <_malloc_r>
 8010534:	b948      	cbnz	r0, 801054a <__smakebuf_r+0x46>
 8010536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801053a:	059a      	lsls	r2, r3, #22
 801053c:	d4ee      	bmi.n	801051c <__smakebuf_r+0x18>
 801053e:	f023 0303 	bic.w	r3, r3, #3
 8010542:	f043 0302 	orr.w	r3, r3, #2
 8010546:	81a3      	strh	r3, [r4, #12]
 8010548:	e7e2      	b.n	8010510 <__smakebuf_r+0xc>
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	6020      	str	r0, [r4, #0]
 801054e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010552:	81a3      	strh	r3, [r4, #12]
 8010554:	9b01      	ldr	r3, [sp, #4]
 8010556:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801055a:	b15b      	cbz	r3, 8010574 <__smakebuf_r+0x70>
 801055c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010560:	4630      	mov	r0, r6
 8010562:	f000 f84d 	bl	8010600 <_isatty_r>
 8010566:	b128      	cbz	r0, 8010574 <__smakebuf_r+0x70>
 8010568:	89a3      	ldrh	r3, [r4, #12]
 801056a:	f023 0303 	bic.w	r3, r3, #3
 801056e:	f043 0301 	orr.w	r3, r3, #1
 8010572:	81a3      	strh	r3, [r4, #12]
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	431d      	orrs	r5, r3
 8010578:	81a5      	strh	r5, [r4, #12]
 801057a:	e7cf      	b.n	801051c <__smakebuf_r+0x18>

0801057c <_raise_r>:
 801057c:	291f      	cmp	r1, #31
 801057e:	b538      	push	{r3, r4, r5, lr}
 8010580:	4605      	mov	r5, r0
 8010582:	460c      	mov	r4, r1
 8010584:	d904      	bls.n	8010590 <_raise_r+0x14>
 8010586:	2316      	movs	r3, #22
 8010588:	6003      	str	r3, [r0, #0]
 801058a:	f04f 30ff 	mov.w	r0, #4294967295
 801058e:	bd38      	pop	{r3, r4, r5, pc}
 8010590:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010592:	b112      	cbz	r2, 801059a <_raise_r+0x1e>
 8010594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010598:	b94b      	cbnz	r3, 80105ae <_raise_r+0x32>
 801059a:	4628      	mov	r0, r5
 801059c:	f000 f852 	bl	8010644 <_getpid_r>
 80105a0:	4622      	mov	r2, r4
 80105a2:	4601      	mov	r1, r0
 80105a4:	4628      	mov	r0, r5
 80105a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105aa:	f000 b839 	b.w	8010620 <_kill_r>
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d00a      	beq.n	80105c8 <_raise_r+0x4c>
 80105b2:	1c59      	adds	r1, r3, #1
 80105b4:	d103      	bne.n	80105be <_raise_r+0x42>
 80105b6:	2316      	movs	r3, #22
 80105b8:	6003      	str	r3, [r0, #0]
 80105ba:	2001      	movs	r0, #1
 80105bc:	e7e7      	b.n	801058e <_raise_r+0x12>
 80105be:	2100      	movs	r1, #0
 80105c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105c4:	4620      	mov	r0, r4
 80105c6:	4798      	blx	r3
 80105c8:	2000      	movs	r0, #0
 80105ca:	e7e0      	b.n	801058e <_raise_r+0x12>

080105cc <raise>:
 80105cc:	4b02      	ldr	r3, [pc, #8]	@ (80105d8 <raise+0xc>)
 80105ce:	4601      	mov	r1, r0
 80105d0:	6818      	ldr	r0, [r3, #0]
 80105d2:	f7ff bfd3 	b.w	801057c <_raise_r>
 80105d6:	bf00      	nop
 80105d8:	2000002c 	.word	0x2000002c

080105dc <_fstat_r>:
 80105dc:	b538      	push	{r3, r4, r5, lr}
 80105de:	4d07      	ldr	r5, [pc, #28]	@ (80105fc <_fstat_r+0x20>)
 80105e0:	2300      	movs	r3, #0
 80105e2:	4604      	mov	r4, r0
 80105e4:	4608      	mov	r0, r1
 80105e6:	4611      	mov	r1, r2
 80105e8:	602b      	str	r3, [r5, #0]
 80105ea:	f7f6 f827 	bl	800663c <_fstat>
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	d102      	bne.n	80105f8 <_fstat_r+0x1c>
 80105f2:	682b      	ldr	r3, [r5, #0]
 80105f4:	b103      	cbz	r3, 80105f8 <_fstat_r+0x1c>
 80105f6:	6023      	str	r3, [r4, #0]
 80105f8:	bd38      	pop	{r3, r4, r5, pc}
 80105fa:	bf00      	nop
 80105fc:	20000640 	.word	0x20000640

08010600 <_isatty_r>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4d06      	ldr	r5, [pc, #24]	@ (801061c <_isatty_r+0x1c>)
 8010604:	2300      	movs	r3, #0
 8010606:	4604      	mov	r4, r0
 8010608:	4608      	mov	r0, r1
 801060a:	602b      	str	r3, [r5, #0]
 801060c:	f7f6 f826 	bl	800665c <_isatty>
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	d102      	bne.n	801061a <_isatty_r+0x1a>
 8010614:	682b      	ldr	r3, [r5, #0]
 8010616:	b103      	cbz	r3, 801061a <_isatty_r+0x1a>
 8010618:	6023      	str	r3, [r4, #0]
 801061a:	bd38      	pop	{r3, r4, r5, pc}
 801061c:	20000640 	.word	0x20000640

08010620 <_kill_r>:
 8010620:	b538      	push	{r3, r4, r5, lr}
 8010622:	4d07      	ldr	r5, [pc, #28]	@ (8010640 <_kill_r+0x20>)
 8010624:	2300      	movs	r3, #0
 8010626:	4604      	mov	r4, r0
 8010628:	4608      	mov	r0, r1
 801062a:	4611      	mov	r1, r2
 801062c:	602b      	str	r3, [r5, #0]
 801062e:	f7f5 ffa5 	bl	800657c <_kill>
 8010632:	1c43      	adds	r3, r0, #1
 8010634:	d102      	bne.n	801063c <_kill_r+0x1c>
 8010636:	682b      	ldr	r3, [r5, #0]
 8010638:	b103      	cbz	r3, 801063c <_kill_r+0x1c>
 801063a:	6023      	str	r3, [r4, #0]
 801063c:	bd38      	pop	{r3, r4, r5, pc}
 801063e:	bf00      	nop
 8010640:	20000640 	.word	0x20000640

08010644 <_getpid_r>:
 8010644:	f7f5 bf92 	b.w	800656c <_getpid>

08010648 <_init>:
 8010648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064a:	bf00      	nop
 801064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801064e:	bc08      	pop	{r3}
 8010650:	469e      	mov	lr, r3
 8010652:	4770      	bx	lr

08010654 <_fini>:
 8010654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010656:	bf00      	nop
 8010658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801065a:	bc08      	pop	{r3}
 801065c:	469e      	mov	lr, r3
 801065e:	4770      	bx	lr
