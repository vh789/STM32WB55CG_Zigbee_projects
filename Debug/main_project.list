
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b28  08009b28  0000ab28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b30  08009b30  0000ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  08009b38  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d0  20000070  08009ba0  0000b070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000540  08009ba0  0000b540  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 11 MB_MEM1       000000b0  20030028  20030028  0000c000  2**2
                  ALLOC
 12 .debug_info   00029d95  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054ae  00000000  00000000  00034e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002858  00000000  00000000  0003a2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001eef  00000000  00000000  0003cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4a2  00000000  00000000  0003ea2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ea1b  00000000  00000000  00069ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011278d  00000000  00000000  000988ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b228  00000000  00000000  001ab0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b62e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800999c 	.word	0x0800999c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800999c 	.word	0x0800999c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800051e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800052a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	cafecafe 	.word	0xcafecafe

0800054c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000556:	f023 0304 	bic.w	r3, r3, #4
 800055a:	6113      	str	r3, [r2, #16]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <MX_APPE_Config+0x18>)
 8000572:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000576:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000578:	f000 f806 	bl	8000588 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800057c:	f000 f80b 	bl	8000596 <Config_HSE>

  return;
 8000580:	bf00      	nop
}
 8000582:	bd80      	pop	{r7, pc}
 8000584:	58004000 	.word	0x58004000

08000588 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800058c:	bf00      	nop
}
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f007 fd7f 	bl	80080a0 <OTP_Read>
 80005a2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffae 	bl	8000510 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c6:	f001 faeb 	bl	8001ba0 <HAL_GetTick>
 80005ca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d00a      	beq.n	80005ee <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80005d8:	f001 fafa 	bl	8001bd0 <HAL_GetTickFreq>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e6:	e002      	b.n	80005ee <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005e8:	f7ff ffb0 	bl	800054c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80005ec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	f001 fad7 	bl	8001ba0 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f4      	bhi.n	80005e8 <HAL_Delay+0x2a>
  }
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f007 fe8b 	bl	800832c <TL_MM_EvtDone>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800062a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800062c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800063a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800065c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800065e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800066c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000674:	68fb      	ldr	r3, [r7, #12]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <__io_putchar>:
#define HAL_SMALL_WAIT  50

// check if necessary
// Define serial output function using UART2
int __io_putchar(int ch)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	2332      	movs	r3, #50	@ 0x32
 8000690:	2201      	movs	r2, #1
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <__io_putchar+0x20>)
 8000694:	f006 fb6a 	bl	8006d6c <HAL_UART_Transmit>
    return 1;
 8000698:	2301      	movs	r3, #1
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002e8 	.word	0x200002e8

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f001 fa0a 	bl	8001ac4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80006b0:	f7ff ff5c 	bl	800056c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f850 	bl	8000758 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b8:	f000 f8be 	bl	8000838 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80006bc:	f000 f9a2 	bl	8000a04 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fb38 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c4:	f000 fb24 	bl	8000d10 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fad6 	bl	8000c78 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80006cc:	f000 f9b6 	bl	8000a3c <MX_RTC_Init>
  MX_I2C1_Init();
 80006d0:	f000 f958 	bl	8000984 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006d4:	f000 fa3a 	bl	8000b4c <MX_TIM2_Init>
  MX_TIM16_Init();
 80006d8:	f000 faa8 	bl	8000c2c <MX_TIM16_Init>
  MX_ADC1_Init();
 80006dc:	f000 f8cc 	bl	8000878 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006e0:	f000 f9e0 	bl	8000aa4 <MX_TIM1_Init>
  MX_RF_Init();
 80006e4:	f000 f9a2 	bl	8000a2c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  // check if anything else necessary and to put to header/source
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <main+0x90>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6898      	ldr	r0, [r3, #8]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2202      	movs	r2, #2
 80006f2:	2100      	movs	r1, #0
 80006f4:	f008 faf0 	bl	8008cd8 <setvbuf>
  printf("\n\n\nNew start\n");
 80006f8:	4810      	ldr	r0, [pc, #64]	@ (800073c <main+0x94>)
 80006fa:	f008 fae5 	bl	8008cc8 <puts>

  // init DHT11
  //init_dht11(&dht11, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
  TEMP_HUMID_init(&OBJ_TEMP_HUMID, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000704:	490e      	ldr	r1, [pc, #56]	@ (8000740 <main+0x98>)
 8000706:	480f      	ldr	r0, [pc, #60]	@ (8000744 <main+0x9c>)
 8000708:	f001 f998 	bl	8001a3c <TEMP_HUMID_init>
  SOIL_MOIST_init(&OBJ_SOIL_MOIST_sensor_1, &adc_buffer[0]);
 800070c:	490e      	ldr	r1, [pc, #56]	@ (8000748 <main+0xa0>)
 800070e:	480f      	ldr	r0, [pc, #60]	@ (800074c <main+0xa4>)
 8000710:	f001 f946 	bl	80019a0 <SOIL_MOIST_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 8000714:	2203      	movs	r2, #3
 8000716:	490c      	ldr	r1, [pc, #48]	@ (8000748 <main+0xa0>)
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <main+0xa8>)
 800071a:	f001 fd79 	bl	8002210 <HAL_ADC_Start_DMA>

  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <main+0xac>)
 8000720:	f005 faf0 	bl	8005d04 <HAL_TIM_Base_Start_IT>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <main+0x86>
    {
      /* Starting Error */
      Error_Handler();
 800072a:	f000 fb57 	bl	8000ddc <Error_Handler>
    /* USER CODE END WHILE */
//    MX_APPE_Process();

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000732:	f7ff ff44 	bl	80005be <HAL_Delay>
 8000736:	e7fa      	b.n	800072e <main+0x86>
 8000738:	20000020 	.word	0x20000020
 800073c:	080099b4 	.word	0x080099b4
 8000740:	2000029c 	.word	0x2000029c
 8000744:	20000384 	.word	0x20000384
 8000748:	2000037c 	.word	0x2000037c
 800074c:	200003a0 	.word	0x200003a0
 8000750:	2000008c 	.word	0x2000008c
 8000754:	20000204 	.word	0x20000204

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09a      	sub	sp, #104	@ 0x68
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2248      	movs	r2, #72	@ 0x48
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f008 fc42 	bl	8008ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800077e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800078c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f023 0303 	bic.w	r3, r3, #3
 8000798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <SystemClock_Config+0xdc>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007aa:	4a22      	ldr	r2, [pc, #136]	@ (8000834 <SystemClock_Config+0xdc>)
 80007ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <SystemClock_Config+0xdc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80007be:	232b      	movs	r3, #43	@ 0x2b
 80007c0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ce:	2301      	movs	r3, #1
 80007d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007da:	2360      	movs	r3, #96	@ 0x60
 80007dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007de:	2305      	movs	r3, #5
 80007e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fdf2 	bl	80043d4 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007f6:	f000 faf1 	bl	8000ddc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007fa:	236f      	movs	r3, #111	@ 0x6f
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007fe:	2302      	movs	r3, #2
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f004 f94e 	bl	8004abc <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000826:	f000 fad9 	bl	8000ddc <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3768      	adds	r7, #104	@ 0x68
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	58000400 	.word	0x58000400

08000838 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	@ 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2250      	movs	r2, #80	@ 0x50
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f008 fbd3 	bl	8008ff0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800084a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800084e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000850:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000856:	2300      	movs	r3, #0
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800085a:	2310      	movs	r3, #16
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4618      	mov	r0, r3
 8000862:	f004 fd68 	bl	8005336 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800086c:	f000 fab6 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000870:	bf00      	nop
 8000872:	3750      	adds	r7, #80	@ 0x50
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800088e:	4b38      	ldr	r3, [pc, #224]	@ (8000970 <MX_ADC1_Init+0xf8>)
 8000890:	4a38      	ldr	r2, [pc, #224]	@ (8000974 <MX_ADC1_Init+0xfc>)
 8000892:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000894:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <MX_ADC1_Init+0xf8>)
 8000896:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800089a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800089c:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <MX_ADC1_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ae:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d4:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008dc:	2201      	movs	r2, #1
 80008de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f2:	481f      	ldr	r0, [pc, #124]	@ (8000970 <MX_ADC1_Init+0xf8>)
 80008f4:	f001 fb40 	bl	8001f78 <HAL_ADC_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80008fe:	f000 fa6d 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_ADC1_Init+0x100>)
 8000904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000906:	2306      	movs	r3, #6
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090e:	237f      	movs	r3, #127	@ 0x7f
 8000910:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000912:	2304      	movs	r3, #4
 8000914:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	4814      	ldr	r0, [pc, #80]	@ (8000970 <MX_ADC1_Init+0xf8>)
 8000920:	f001 fd18 	bl	8002354 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800092a:	f000 fa57 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_ADC1_Init+0x104>)
 8000930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000932:	230c      	movs	r3, #12
 8000934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_ADC1_Init+0xf8>)
 800093c:	f001 fd0a 	bl	8002354 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000946:	f000 fa49 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <MX_ADC1_Init+0x108>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800094e:	2312      	movs	r3, #18
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_ADC1_Init+0xf8>)
 8000958:	f001 fcfc 	bl	8002354 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000962:	f000 fa3b 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000008c 	.word	0x2000008c
 8000974:	50040000 	.word	0x50040000
 8000978:	25b00200 	.word	0x25b00200
 800097c:	2a000400 	.word	0x2a000400
 8000980:	2e300800 	.word	0x2e300800

08000984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_I2C1_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_I2C1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_I2C1_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_I2C1_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_I2C1_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009c0:	f002 ffbc 	bl	800393c <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 fa07 	bl	8000ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009d2:	f003 f84e 	bl	8003a72 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 f9fe 	bl	8000ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_I2C1_Init+0x74>)
 80009e4:	f003 f890 	bl	8003b08 <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f9f5 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000150 	.word	0x20000150
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00b07cb4 	.word	0x00b07cb4

08000a04 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_IPCC_Init+0x20>)
 8000a0a:	4a07      	ldr	r2, [pc, #28]	@ (8000a28 <MX_IPCC_Init+0x24>)
 8000a0c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_IPCC_Init+0x20>)
 8000a10:	f003 f8c6 	bl	8003ba0 <HAL_IPCC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000a1a:	f000 f9df 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001a4 	.word	0x200001a4
 8000a28:	58000c00 	.word	0x58000c00

08000a2c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <MX_RTC_Init+0x64>)
 8000a44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a4e:	220f      	movs	r2, #15
 8000a50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a54:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a72:	480a      	ldr	r0, [pc, #40]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a74:	f004 fee6 	bl	8005844 <HAL_RTC_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f9ad 	bl	8000ddc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_RTC_Init+0x60>)
 8000a88:	f004 ffdc 	bl	8005a44 <HAL_RTCEx_SetWakeUpTimer>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000a92:	f000 f9a3 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001e0 	.word	0x200001e0
 8000aa0:	40002800 	.word	0x40002800

08000aa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000ac4:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <MX_TIM1_Init+0xa4>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000aca:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000ad8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af0:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000af2:	f005 f842 	bl	8005b7a <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 f96e 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000b0e:	f005 fbb9 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b18:	f000 f960 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_TIM1_Init+0xa0>)
 8000b2e:	f006 f82f 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b38:	f000 f950 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000204 	.word	0x20000204
 8000b48:	40012c00 	.word	0x40012c00

08000b4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b70:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000b78:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b7a:	f240 123f 	movw	r2, #319	@ 0x13f
 8000b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b86:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b9a:	4823      	ldr	r0, [pc, #140]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000b9c:	f005 f900 	bl	8005da0 <HAL_TIM_PWM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000ba6:	f000 f919 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481b      	ldr	r0, [pc, #108]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000bba:	f005 ffe9 	bl	8006b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000bc4:	f000 f90a 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	@ 0x60
 8000bca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000be0:	f005 fa3c 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000bea:	f000 f8f7 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000bf6:	f005 fa31 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000c00:	f000 f8ec 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	220c      	movs	r2, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000c0c:	f005 fa26 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000c16:	f000 f8e1 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <MX_TIM2_Init+0xdc>)
 8000c1c:	f000 fac4 	bl	80011a8 <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	@ 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000250 	.word	0x20000250

08000c2c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c32:	4a10      	ldr	r2, [pc, #64]	@ (8000c74 <MX_TIM16_Init+0x48>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c38:	221f      	movs	r2, #31
 8000c3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c44:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c48:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <MX_TIM16_Init+0x44>)
 8000c5e:	f004 ff8c 	bl	8005b7a <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000c68:	f000 f8b8 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000029c 	.word	0x2000029c
 8000c74:	40014400 	.word	0x40014400

08000c78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000c7e:	4a23      	ldr	r2, [pc, #140]	@ (8000d0c <MX_USART1_UART_Init+0x94>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc0:	4811      	ldr	r0, [pc, #68]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000cc2:	f006 f803 	bl	8006ccc <HAL_UART_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ccc:	f000 f886 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000cd4:	f007 f919 	bl	8007f0a <HAL_UARTEx_SetTxFifoThreshold>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cde:	f000 f87d 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4808      	ldr	r0, [pc, #32]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000ce6:	f007 f94e 	bl	8007f86 <HAL_UARTEx_SetRxFifoThreshold>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf0:	f000 f874 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <MX_USART1_UART_Init+0x90>)
 8000cf6:	f007 f8cf 	bl	8007e98 <HAL_UARTEx_DisableFifoMode>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f000 f86c 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200002e8 	.word	0x200002e8
 8000d0c:	40013800 	.word	0x40013800

08000d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d14:	2004      	movs	r0, #4
 8000d16:	f7ff fc82 	bl	800061e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fc7f 	bl	800061e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	200b      	movs	r0, #11
 8000d26:	f002 f8c4 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d2a:	200b      	movs	r0, #11
 8000d2c:	f002 f8db 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f7ff fc81 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff fc7e 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fc7b 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f7ff fc78 	bl	8000650 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2110      	movs	r1, #16
 8000d64:	481b      	ldr	r0, [pc, #108]	@ (8000dd4 <MX_GPIO_Init+0xa0>)
 8000d66:	f002 fd93 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f002 fbff 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_HUMID_Pin */
  GPIO_InitStruct.Pin = TEMP_HUMID_Pin;
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEMP_HUMID_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f002 fbf3 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <MX_GPIO_Init+0xa0>)
 8000db0:	f002 fbe6 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_GPIO_Init+0xa4>)
 8000dc6:	f002 fbdb 	bl	8003580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	48001000 	.word	0x48001000
 8000dd8:	48000400 	.word	0x48000400

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <LL_AHB2_GRP1_EnableClock>:
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ebc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000ed6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000eda:	f7ff ffaf 	bl	8000e3c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	202e      	movs	r0, #46	@ 0x2e
 8000ee4:	f001 ffe5 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000ee8:	202e      	movs	r0, #46	@ 0x2e
 8000eea:	f001 fffc 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b09c      	sub	sp, #112	@ 0x70
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2250      	movs	r2, #80	@ 0x50
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f008 f86b 	bl	8008ff0 <memset>
  if(hadc->Instance==ADC1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a32      	ldr	r2, [pc, #200]	@ (8000fe8 <HAL_ADC_MspInit+0xf4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d15c      	bne.n	8000fde <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000f2a:	2318      	movs	r3, #24
 8000f2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000f2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f3a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000f40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f9f0 	bl	8005336 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000f5c:	f7ff ff3e 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f64:	f7ff ff51 	bl	8000e0a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff ff4e 	bl	8000e0a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8000f6e:	2370      	movs	r3, #112	@ 0x70
 8000f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f84:	f002 fafc 	bl	8003580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <HAL_ADC_MspInit+0xfc>)
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000f90:	2205      	movs	r2, #5
 8000f92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fb8:	2220      	movs	r2, #32
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fc2:	480a      	ldr	r0, [pc, #40]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fc4:	f001 ffaa 	bl	8002f1c <HAL_DMA_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000fce:	f7ff ff05 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_ADC_MspInit+0xf8>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fde:	bf00      	nop
 8000fe0:	3770      	adds	r7, #112	@ 0x70
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	50040000 	.word	0x50040000
 8000fec:	200000f0 	.word	0x200000f0
 8000ff0:	40020008 	.word	0x40020008

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	@ 0x70
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2250      	movs	r2, #80	@ 0x50
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f007 ffeb 	bl	8008ff0 <memset>
  if(hi2c->Instance==I2C1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a17      	ldr	r2, [pc, #92]	@ (800107c <HAL_I2C_MspInit+0x88>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d126      	bne.n	8001072 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001024:	2304      	movs	r3, #4
 8001026:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001028:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4618      	mov	r0, r3
 8001034:	f004 f97f 	bl	8005336 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800103e:	f7ff fecd 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2002      	movs	r0, #2
 8001044:	f7ff fee1 	bl	8000e0a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001048:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001062:	4619      	mov	r1, r3
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <HAL_I2C_MspInit+0x8c>)
 8001066:	f002 fa8b 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800106e:	f7ff fefe 	bl	8000e6e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	3770      	adds	r7, #112	@ 0x70
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005400 	.word	0x40005400
 8001080:	48000400 	.word	0x48000400

08001084 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <HAL_IPCC_MspInit+0x44>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d113      	bne.n	80010be <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001096:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800109a:	f7ff fecf 	bl	8000e3c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	202c      	movs	r0, #44	@ 0x2c
 80010a4:	f001 ff05 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80010a8:	202c      	movs	r0, #44	@ 0x2c
 80010aa:	f001 ff1c 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	202d      	movs	r0, #45	@ 0x2d
 80010b4:	f001 fefd 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80010b8:	202d      	movs	r0, #45	@ 0x2d
 80010ba:	f001 ff14 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	58000c00 	.word	0x58000c00

080010cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b096      	sub	sp, #88	@ 0x58
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2250      	movs	r2, #80	@ 0x50
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f007 ff87 	bl	8008ff0 <memset>
  if(hrtc->Instance==RTC)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <HAL_RTC_MspInit+0x58>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d117      	bne.n	800111c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80010ec:	f002 fdde 	bl	8003cac <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010f4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4618      	mov	r0, r3
 8001102:	f004 f918 	bl	8005336 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 800110c:	f7ff fe66 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001110:	f7ff fe6a 	bl	8000de8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001114:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001118:	f7ff fea9 	bl	8000e6e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800111c:	bf00      	nop
 800111e:	3758      	adds	r7, #88	@ 0x58
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40002800 	.word	0x40002800

08001128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <HAL_TIM_Base_MspInit+0x58>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10c      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800113e:	f7ff feaf 	bl	8000ea0 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2019      	movs	r0, #25
 8001148:	f001 feb3 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800114c:	2019      	movs	r0, #25
 800114e:	f001 feca 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001152:	e010      	b.n	8001176 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <HAL_TIM_Base_MspInit+0x5c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800115e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001162:	f7ff fe9d 	bl	8000ea0 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2019      	movs	r0, #25
 800116c:	f001 fea1 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001170:	2019      	movs	r0, #25
 8001172:	f001 feb8 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40014400 	.word	0x40014400

08001188 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001198:	d102      	bne.n	80011a0 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fe67 	bl	8000e6e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c8:	d113      	bne.n	80011f2 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff fe1d 	bl	8000e0a <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 80011d0:	230d      	movs	r3, #13
 80011d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d8:	2302      	movs	r3, #2
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f002 f9c7 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09c      	sub	sp, #112	@ 0x70
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2250      	movs	r2, #80	@ 0x50
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f007 fee7 	bl	8008ff0 <memset>
  if(huart->Instance==USART1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <HAL_UART_MspInit+0x98>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d12e      	bne.n	800128a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800122c:	2301      	movs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4618      	mov	r0, r3
 800123a:	f004 f87c 	bl	8005336 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001244:	f7ff fdca 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001248:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800124c:	f7ff fe28 	bl	8000ea0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fdda 	bl	8000e0a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001256:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800125a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001268:	2307      	movs	r3, #7
 800126a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f002 f983 	bl	8003580 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2024      	movs	r0, #36	@ 0x24
 8001280:	f001 fe17 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001284:	2024      	movs	r0, #36	@ 0x24
 8001286:	f001 fe2e 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3770      	adds	r7, #112	@ 0x70
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40013800 	.word	0x40013800

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>

080012c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 fc43 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <DMA1_Channel1_IRQHandler+0x10>)
 80012fe:	f001 ffee 	bl	80032de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000f0 	.word	0x200000f0

0800130c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001310:	4804      	ldr	r0, [pc, #16]	@ (8001324 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001312:	f004 fd9c 	bl	8005e4e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001316:	4804      	ldr	r0, [pc, #16]	@ (8001328 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001318:	f004 fd99 	bl	8005e4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  cyclic_routine();
 800131c:	f000 fb1a 	bl	8001954 <cyclic_routine>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000204 	.word	0x20000204
 8001328:	2000029c 	.word	0x2000029c

0800132c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <USART1_IRQHandler+0x10>)
 8001332:	f005 fda9 	bl	8006e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002e8 	.word	0x200002e8

08001340 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001344:	f007 f962 	bl	800860c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001350:	f007 f9b2 	bl	80086b8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800135c:	f002 faca 	bl	80038f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e00a      	b.n	800138c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001376:	f3af 8000 	nop.w
 800137a:	4601      	mov	r1, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	b2ca      	uxtb	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf0      	blt.n	8001376 <_read+0x12>
  }

  return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e009      	b.n	80013c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f963 	bl	8000684 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf1      	blt.n	80013b0 <_write+0x12>
  }
  return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_close>:

int _close(int file)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	@ (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f007 fe1c 	bl	80090ac <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20030000 	.word	0x20030000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	200003a8 	.word	0x200003a8
 80014a8:	20000540 	.word	0x20000540

080014ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <SystemInit+0x98>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a23      	ldr	r2, [pc, #140]	@ (8001544 <SystemInit+0x98>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80014d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <SystemInit+0x9c>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014f6:	f023 0305 	bic.w	r3, r3, #5
 80014fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001506:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001516:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <SystemInit+0xa0>)
 8001518:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <SystemInit+0xa0>)
 8001520:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800152c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001530:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	faf6fefb 	.word	0xfaf6fefb
 800154c:	22041000 	.word	0x22041000

08001550 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001550:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001552:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001554:	3304      	adds	r3, #4

08001556 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001556:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001558:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800155a:	d3f9      	bcc.n	8001550 <CopyDataInit>
  bx lr
 800155c:	4770      	bx	lr

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800155e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001560:	3004      	adds	r0, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001562:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>
  bx lr
 8001566:	4770      	bx	lr

08001568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800156a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f7ff ff9e 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <LoopForever+0x6>)
 8001572:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <LoopForever+0xa>)
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <LoopForever+0xe>)
 8001576:	2300      	movs	r3, #0
 8001578:	f7ff ffed 	bl	8001556 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800157c:	480b      	ldr	r0, [pc, #44]	@ (80015ac <LoopForever+0x12>)
 800157e:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <LoopForever+0x16>)
 8001580:	4a0c      	ldr	r2, [pc, #48]	@ (80015b4 <LoopForever+0x1a>)
 8001582:	2300      	movs	r3, #0
 8001584:	f7ff ffe7 	bl	8001556 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <LoopForever+0x1e>)
 800158a:	490c      	ldr	r1, [pc, #48]	@ (80015bc <LoopForever+0x22>)
 800158c:	2300      	movs	r3, #0
 800158e:	f7ff ffe8 	bl	8001562 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001592:	f007 fd91 	bl	80090b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001596:	f7ff f887 	bl	80006a8 <main>

0800159a <LoopForever>:

LoopForever:
  b LoopForever
 800159a:	e7fe      	b.n	800159a <LoopForever>
  ldr   r0, =_estack
 800159c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000070 	.word	0x20000070
 80015a8:	08009b38 	.word	0x08009b38
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015ac:	200300d8 	.word	0x200300d8
 80015b0:	200300d8 	.word	0x200300d8
 80015b4:	08009ba0 	.word	0x08009ba0
  INIT_BSS _sbss, _ebss
 80015b8:	20000070 	.word	0x20000070
 80015bc:	20000540 	.word	0x20000540

080015c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_IRQHandler>

080015c2 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	809a      	strh	r2, [r3, #4]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b088      	sub	sp, #32
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d111      	bne.n	8001634 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f001 ffa7 	bl	8003580 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8001632:	e013      	b.n	800165c <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d110      	bne.n	800165c <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f107 020c 	add.w	r2, r7, #12
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f001 ff92 	bl	8003580 <HAL_GPIO_Init>
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001670:	2300      	movs	r3, #0
 8001672:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001674:	2300      	movs	r3, #0
 8001676:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001680:	2300      	movs	r3, #0
 8001682:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001686:	2300      	movs	r3, #0
 8001688:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8001692:	2101      	movs	r1, #1
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffaa 	bl	80015ee <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	f002 f8f3 	bl	8003890 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80016aa:	2012      	movs	r0, #18
 80016ac:	f7fe ff87 	bl	80005be <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 fab5 	bl	8005c28 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff94 	bl	80015ee <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016d0:	e00b      	b.n	80016ea <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016e0:	d903      	bls.n	80016ea <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 80016e2:	b662      	cpsie	i
}
 80016e4:	bf00      	nop
			__enable_irq();
			return 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e130      	b.n	800194c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f002 f8b3 	bl	8003860 <HAL_GPIO_ReadPin>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d0e8      	beq.n	80016d2 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800170a:	e00b      	b.n	8001724 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	b29b      	uxth	r3, r3
 8001716:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800171a:	d903      	bls.n	8001724 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 800171c:	b662      	cpsie	i
}
 800171e:	bf00      	nop
			__enable_irq();
			return 0;
 8001720:	2300      	movs	r3, #0
 8001722:	e113      	b.n	800194c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f002 f896 	bl	8003860 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0e8      	beq.n	800170c <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800174e:	e00b      	b.n	8001768 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	b29b      	uxth	r3, r3
 800175a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800175e:	d903      	bls.n	8001768 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8001760:	b662      	cpsie	i
}
 8001762:	bf00      	nop
			__enable_irq();
			return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e0f1      	b.n	800194c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f002 f874 	bl	8003860 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d0e8      	beq.n	8001750 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8001788:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800178a:	2b4a      	cmp	r3, #74	@ 0x4a
 800178c:	d80c      	bhi.n	80017a8 <readDHT11+0x144>
 800178e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001790:	2b55      	cmp	r3, #85	@ 0x55
 8001792:	d909      	bls.n	80017a8 <readDHT11+0x144>
 8001794:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001796:	2b4a      	cmp	r3, #74	@ 0x4a
 8001798:	d806      	bhi.n	80017a8 <readDHT11+0x144>
 800179a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800179c:	2b55      	cmp	r3, #85	@ 0x55
 800179e:	d903      	bls.n	80017a8 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 80017a0:	b662      	cpsie	i
}
 80017a2:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e0d1      	b.n	800194c <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ac:	e05d      	b.n	800186a <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80017b8:	e00b      	b.n	80017d2 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017c8:	d903      	bls.n	80017d2 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 80017ca:	b662      	cpsie	i
}
 80017cc:	bf00      	nop
				__enable_irq();
				return 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e0bc      	b.n	800194c <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f002 f83f 	bl	8003860 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0e8      	beq.n	80017ba <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80017f2:	e00b      	b.n	800180c <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001802:	d903      	bls.n	800180c <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8001804:	b662      	cpsie	i
}
 8001806:	bf00      	nop
				__enable_irq();
				return 0;
 8001808:	2300      	movs	r3, #0
 800180a:	e09f      	b.n	800194c <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	889b      	ldrh	r3, [r3, #4]
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f002 f822 	bl	8003860 <HAL_GPIO_ReadPin>
 800181c:	4603      	mov	r3, r0
 800181e:	2b01      	cmp	r3, #1
 8001820:	d0e8      	beq.n	80017f4 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 800182c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800182e:	2b14      	cmp	r3, #20
 8001830:	d906      	bls.n	8001840 <readDHT11+0x1dc>
 8001832:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001834:	2b1d      	cmp	r3, #29
 8001836:	d803      	bhi.n	8001840 <readDHT11+0x1dc>
		{
			mBit = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800183e:	e008      	b.n	8001852 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8001840:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001842:	2b3c      	cmp	r3, #60	@ 0x3c
 8001844:	d905      	bls.n	8001852 <readDHT11+0x1ee>
 8001846:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001848:	2b4f      	cmp	r3, #79	@ 0x4f
 800184a:	d802      	bhi.n	8001852 <readDHT11+0x1ee>
		{
			 mBit = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8001852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	f107 0208 	add.w	r2, r7, #8
 800185c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185e:	4413      	add	r3, r2
 8001860:	460a      	mov	r2, r1
 8001862:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8001864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001866:	3301      	adds	r3, #1
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
 800186a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800186c:	2b27      	cmp	r3, #39	@ 0x27
 800186e:	dd9e      	ble.n	80017ae <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fa1d 	bl	8005cb4 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 800187a:	b662      	cpsie	i
}
 800187c:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	643b      	str	r3, [r7, #64]	@ 0x40
 8001882:	e011      	b.n	80018a8 <readDHT11+0x244>
	{
		humVal += mData[i];
 8001884:	f107 0208 	add.w	r2, r7, #8
 8001888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800188a:	4413      	add	r3, r2
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001892:	4413      	add	r3, r2
 8001894:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 8001898:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 80018a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018a4:	3301      	adds	r3, #1
 80018a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80018a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018aa:	2b07      	cmp	r3, #7
 80018ac:	ddea      	ble.n	8001884 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80018ae:	2310      	movs	r3, #16
 80018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018b2:	e011      	b.n	80018d8 <readDHT11+0x274>
	{
		tempVal += mData[i];
 80018b4:	f107 0208 	add.w	r2, r7, #8
 80018b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ba:	4413      	add	r3, r2
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018c2:	4413      	add	r3, r2
 80018c4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 80018c8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 80018d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018d4:	3301      	adds	r3, #1
 80018d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018da:	2b17      	cmp	r3, #23
 80018dc:	ddea      	ble.n	80018b4 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 80018de:	2320      	movs	r3, #32
 80018e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018e2:	e011      	b.n	8001908 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 80018e4:	f107 0208 	add.w	r2, r7, #8
 80018e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ea:	4413      	add	r3, r2
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018f2:	4413      	add	r3, r2
 80018f4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 80018f8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 8001902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001904:	3301      	adds	r3, #1
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800190a:	2b27      	cmp	r3, #39	@ 0x27
 800190c:	ddea      	ble.n	80018e4 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 800190e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 8001918:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 8001922:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 800192c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001930:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001934:	4413      	add	r3, r2
 8001936:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001940:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001948:	735a      	strb	r2, [r3, #13]


	return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3750      	adds	r7, #80	@ 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <cyclic_routine>:

extern struct TEMP_HUMID_obj OBJ_TEMP_HUMID;			// Object for temp/moist sensor
extern struct SOIL_MOIST_obj OBJ_SOIL_MOIST_sensor_1;	// Object for soil moisture sensor 1


void cyclic_routine(void){
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	TEMP_HUMID_read(&OBJ_TEMP_HUMID);
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <cyclic_routine+0x38>)
 800195a:	f000 f882 	bl	8001a62 <TEMP_HUMID_read>


	printf("Temperature: %d, Humidity: %d\n", OBJ_TEMP_HUMID.dht11.temperature, OBJ_TEMP_HUMID.dht11.humidty);
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <cyclic_routine+0x38>)
 8001960:	7e1b      	ldrb	r3, [r3, #24]
 8001962:	4619      	mov	r1, r3
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <cyclic_routine+0x38>)
 8001966:	7e5b      	ldrb	r3, [r3, #25]
 8001968:	461a      	mov	r2, r3
 800196a:	4809      	ldr	r0, [pc, #36]	@ (8001990 <cyclic_routine+0x3c>)
 800196c:	f007 f944 	bl	8008bf8 <iprintf>

	printf("Soil Moisture: %d promille\n", SOIL_MOIST_get_moisture_percent(&OBJ_SOIL_MOIST_sensor_1));
 8001970:	4808      	ldr	r0, [pc, #32]	@ (8001994 <cyclic_routine+0x40>)
 8001972:	f000 f827 	bl	80019c4 <SOIL_MOIST_get_moisture_percent>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	@ (8001998 <cyclic_routine+0x44>)
 800197c:	f007 f93c 	bl	8008bf8 <iprintf>


	HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001980:	2110      	movs	r1, #16
 8001982:	4806      	ldr	r0, [pc, #24]	@ (800199c <cyclic_routine+0x48>)
 8001984:	f001 ff9c 	bl	80038c0 <HAL_GPIO_TogglePin>


}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000384 	.word	0x20000384
 8001990:	080099c4 	.word	0x080099c4
 8001994:	200003a0 	.word	0x200003a0
 8001998:	080099e4 	.word	0x080099e4
 800199c:	48001000 	.word	0x48001000

080019a0 <SOIL_MOIST_init>:
#define WATER_MEAS 3570U

uint32_t saturate(uint32_t val);


void SOIL_MOIST_init(struct SOIL_MOIST_obj *obj, uint16_t *DMA_location){
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
	obj->type = SOIL_MOIST;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	obj->ADC_val = DMA_location;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	605a      	str	r2, [r3, #4]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SOIL_MOIST_get_moisture_percent>:


uint16_t SOIL_MOIST_get_moisture_percent(struct SOIL_MOIST_obj *obj){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	uint32_t working_value = saturate(*obj->ADC_val);// saturate
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f818 	bl	8001a08 <saturate>
 80019d8:	60f8      	str	r0, [r7, #12]
	working_value = working_value - OC_MEAS;	// compensate lower offset
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 80019e0:	60fb      	str	r3, [r7, #12]
	working_value = 10000U*working_value/(WATER_MEAS - OC_MEAS);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SOIL_MOIST_get_moisture_percent+0x40>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	60fb      	str	r3, [r7, #12]
	return (uint16_t)working_value;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	b29b      	uxth	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f4fe9083 	.word	0xf4fe9083

08001a08 <saturate>:



// private FCT

uint32_t saturate(uint32_t val){
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	if(val > WATER_MEAS){
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f640 52f2 	movw	r2, #3570	@ 0xdf2
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d902      	bls.n	8001a20 <saturate+0x18>
		return WATER_MEAS;
 8001a1a:	f640 53f2 	movw	r3, #3570	@ 0xdf2
 8001a1e:	e007      	b.n	8001a30 <saturate+0x28>
	}else if(val < OC_MEAS){
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d801      	bhi.n	8001a2e <saturate+0x26>
		return val;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	e000      	b.n	8001a30 <saturate+0x28>
	}else{
		return val;
 8001a2e:	687b      	ldr	r3, [r7, #4]
	}
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <TEMP_HUMID_init>:
#include "TEMP_HUMID.h"

void TEMP_HUMID_init(struct TEMP_HUMID_obj *obj, TIM_HandleTypeDef *timer, GPIO_TypeDef* port, uint16_t pin){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	807b      	strh	r3, [r7, #2]
	//make tim16 maybe to tim17
	init_dht11(&obj->dht11, timer, port, pin);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f103 000c 	add.w	r0, r3, #12
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	f7ff fdb4 	bl	80015c2 <init_dht11>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <TEMP_HUMID_read>:

void TEMP_HUMID_read(struct TEMP_HUMID_obj *obj){
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	switch (obj->type){
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <TEMP_HUMID_read+0x16>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d021      	beq.n	8001aba <TEMP_HUMID_read+0x58>
 8001a76:	e017      	b.n	8001aa8 <TEMP_HUMID_read+0x46>
	case DHT11:
		readDHT11(&obj->dht11);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	330c      	adds	r3, #12
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fdf1 	bl	8001664 <readDHT11>
		obj->temperature_degC = (float)obj->dht11.temperature;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7e1b      	ldrb	r3, [r3, #24]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	edc3 7a01 	vstr	s15, [r3, #4]
		obj->humidty_percent = (float)obj->dht11.humidty;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7e5b      	ldrb	r3, [r3, #25]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8001aa6:	e009      	b.n	8001abc <TEMP_HUMID_read+0x5a>
	case DHT22:

		break;
	default:
		obj->temperature_degC = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
		obj->humidty_percent = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
		break;
 8001ab8:	e000      	b.n	8001abc <TEMP_HUMID_read+0x5a>
		break;
 8001aba:	bf00      	nop
	}
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_Init+0x3c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_Init+0x3c>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f001 f9de 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f000 f80f 	bl	8001b04 <HAL_InitTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	e001      	b.n	8001af6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af2:	f7ff f9ee 	bl	8000ed2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af6:	79fb      	ldrb	r3, [r7, #7]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	58004000 	.word	0x58004000

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d024      	beq.n	8001b62 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b18:	f003 f97c 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_InitTick+0x6c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 f9e6 	bl	8002f02 <HAL_SYSTICK_Config>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	d809      	bhi.n	8001b56 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b42:	2200      	movs	r2, #0
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4a:	f001 f9b2 	bl	8002eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_InitTick+0x70>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e007      	b.n	8001b66 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e004      	b.n	8001b66 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000010 	.word	0x20000010
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	200003ac 	.word	0x200003ac

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200003ac 	.word	0x200003ac

08001bb8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_GetTickPrio+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000000c 	.word	0x2000000c

08001bd0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_GetTickFreq+0x14>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000010 	.word	0x20000010

08001be8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3360      	adds	r3, #96	@ 0x60
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <LL_ADC_SetOffset+0x44>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	03fff000 	.word	0x03fff000

08001c98 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3360      	adds	r3, #96	@ 0x60
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3360      	adds	r3, #96	@ 0x60
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d12:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3330      	adds	r3, #48	@ 0x30
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	211f      	movs	r1, #31
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 011f 	and.w	r1, r3, #31
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3314      	adds	r3, #20
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0e5b      	lsrs	r3, r3, #25
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0d1b      	lsrs	r3, r3, #20
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2107      	movs	r1, #7
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0d1b      	lsrs	r3, r3, #20
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	0007ffff 	.word	0x0007ffff

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <LL_ADC_IsEnabled+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <LL_ADC_IsEnabled+0x1a>
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f16:	f043 0204 	orr.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e12e      	b.n	80021f4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7fe ffa5 	bl	8000ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff3d 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff23 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff58 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff3c 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fec:	4b83      	ldr	r3, [pc, #524]	@ (80021fc <HAL_ADC_Init+0x284>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	4a83      	ldr	r2, [pc, #524]	@ (8002200 <HAL_ADC_Init+0x288>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002000:	e002      	b.n	8002008 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3b01      	subs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff3a 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff73 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002044:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80c7 	bne.w	80021e2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 80c3 	bne.w	80021e2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002064:	f043 0202 	orr.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff33 	bl	8001edc <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800207c:	4861      	ldr	r0, [pc, #388]	@ (8002204 <HAL_ADC_Init+0x28c>)
 800207e:	f7ff ff2d 	bl	8001edc <LL_ADC_IsEnabled>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4619      	mov	r1, r3
 800208e:	485e      	ldr	r0, [pc, #376]	@ (8002208 <HAL_ADC_Init+0x290>)
 8002090:	f7ff fdaa 	bl	8001be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7e5b      	ldrb	r3, [r3, #25]
 8002098:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80020b4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d106      	bne.n	80020d4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	3b01      	subs	r3, #1
 80020cc:	045b      	lsls	r3, r3, #17
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b45      	ldr	r3, [pc, #276]	@ (800220c <HAL_ADC_Init+0x294>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	430b      	orrs	r3, r1
 8002102:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff0e 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 800210e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff1b 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 800211a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d13d      	bne.n	800219e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d13a      	bne.n	800219e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800212c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002134:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002144:	f023 0302 	bic.w	r3, r3, #2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	69b9      	ldr	r1, [r7, #24]
 800214e:	430b      	orrs	r3, r1
 8002150:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002158:	2b01      	cmp	r3, #1
 800215a:	d118      	bne.n	800218e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800217e:	430a      	orrs	r2, r1
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	611a      	str	r2, [r3, #16]
 800218c:	e007      	b.n	800219e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10c      	bne.n	80021c0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f023 010f 	bic.w	r1, r3, #15
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	1e5a      	subs	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80021be:	e007      	b.n	80021d0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 020f 	bic.w	r2, r2, #15
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f023 0303 	bic.w	r3, r3, #3
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	655a      	str	r2, [r3, #84]	@ 0x54
 80021e0:	e007      	b.n	80021f2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000008 	.word	0x20000008
 8002200:	053e2d63 	.word	0x053e2d63
 8002204:	50040000 	.word	0x50040000
 8002208:	50040300 	.word	0x50040300
 800220c:	fff0c007 	.word	0xfff0c007

08002210 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe82 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d167      	bne.n	80022fc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Start_DMA+0x2a>
 8002236:	2302      	movs	r3, #2
 8002238:	e063      	b.n	8002302 <HAL_ADC_Start_DMA+0xf2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fc4c 	bl	8002ae0 <ADC_Enable>
 8002248:	4603      	mov	r3, r0
 800224a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d14f      	bne.n	80022f2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f023 0206 	bic.w	r2, r3, #6
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	659a      	str	r2, [r3, #88]	@ 0x58
 800227e:	e002      	b.n	8002286 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a20      	ldr	r2, [pc, #128]	@ (800230c <HAL_ADC_Start_DMA+0xfc>)
 800228c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_ADC_Start_DMA+0x100>)
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_ADC_Start_DMA+0x104>)
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	221c      	movs	r2, #28
 80022a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0210 	orr.w	r2, r2, #16
 80022bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3340      	adds	r3, #64	@ 0x40
 80022d8:	4619      	mov	r1, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f000 fec5 	bl	800306c <HAL_DMA_Start_IT>
 80022e2:	4603      	mov	r3, r0
 80022e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe09 	bl	8001f02 <LL_ADC_REG_StartConversion>
 80022f0:	e006      	b.n	8002300 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002300:	7dfb      	ldrb	r3, [r7, #23]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08002bd5 	.word	0x08002bd5
 8002310:	08002cad 	.word	0x08002cad
 8002314:	08002cc9 	.word	0x08002cc9

08002318 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0b6      	sub	sp, #216	@ 0xd8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x22>
 8002372:	2302      	movs	r3, #2
 8002374:	e39f      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x762>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fdd1 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 8384 	bne.w	8002a98 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	f7ff fcbf 	bl	8001d20 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fdbf 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 80023ac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fdcb 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 80023ba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 81a6 	bne.w	8002714 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f040 81a1 	bne.w	8002714 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	461a      	mov	r2, r3
 80023e0:	f7ff fcca 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d00a      	beq.n	800241c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002416:	f7ff fc1b 	bl	8001c50 <LL_ADC_SetOffset>
 800241a:	e17b      	b.n	8002714 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fc38 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0xf4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc2d 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 021f 	and.w	r2, r3, #31
 8002446:	e01e      	b.n	8002486 <HAL_ADC_ConfigChannel+0x132>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc22 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800246a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800246e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800247a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_ADC_ConfigChannel+0x14a>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0e9b      	lsrs	r3, r3, #26
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	e018      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x17c>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80024c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fbf1 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fbd5 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x1ba>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fbca 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	e01e      	b.n	800254c <HAL_ADC_ConfigChannel+0x1f8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbbf 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800252c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x210>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	e018      	b.n	8002596 <HAL_ADC_ConfigChannel+0x242>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800257c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e004      	b.n	8002596 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800258c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	429a      	cmp	r2, r3
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb8e 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb72 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x280>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fb67 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	e01e      	b.n	8002612 <HAL_ADC_ConfigChannel+0x2be>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fb5c 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80025f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80025fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e004      	b.n	8002610 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002606:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <HAL_ADC_ConfigChannel+0x2d6>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	e016      	b.n	8002658 <HAL_ADC_ConfigChannel+0x304>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800263c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800263e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e004      	b.n	8002658 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800264e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb2d 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb11 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x342>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2103      	movs	r1, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fb06 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	e017      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x372>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2103      	movs	r1, #3
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fafb 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80026bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_ConfigChannel+0x38a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	e011      	b.n	8002702 <HAL_ADC_ConfigChannel+0x3ae>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80026ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80026f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e003      	b.n	8002702 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80026fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	429a      	cmp	r2, r3
 8002704:	d106      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	2103      	movs	r1, #3
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fad8 	bl	8001cc4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fbdf 	bl	8001edc <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 81c2 	bne.w	8002aaa <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	461a      	mov	r2, r3
 8002734:	f7ff fb4c 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a8e      	ldr	r2, [pc, #568]	@ (8002978 <HAL_ADC_ConfigChannel+0x624>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f040 8130 	bne.w	80029a4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_ADC_ConfigChannel+0x418>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2b09      	cmp	r3, #9
 8002762:	bf94      	ite	ls
 8002764:	2301      	movls	r3, #1
 8002766:	2300      	movhi	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e019      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x44c>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800277a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800277e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2b09      	cmp	r3, #9
 8002798:	bf94      	ite	ls
 800279a:	2301      	movls	r3, #1
 800279c:	2300      	movhi	r3, #0
 800279e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d079      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x46c>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	069b      	lsls	r3, r3, #26
 80027ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027be:	e015      	b.n	80027ec <HAL_ADC_ConfigChannel+0x498>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80027d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e003      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	069b      	lsls	r3, r3, #26
 80027e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_ConfigChannel+0x4b8>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	3301      	adds	r3, #1
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	e017      	b.n	800283c <HAL_ADC_ConfigChannel+0x4e8>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800281a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800281e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	ea42 0103 	orr.w	r1, r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x50e>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0e9b      	lsrs	r3, r3, #26
 8002852:	3301      	adds	r3, #1
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	051b      	lsls	r3, r3, #20
 8002860:	e018      	b.n	8002894 <HAL_ADC_ConfigChannel+0x540>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e003      	b.n	8002886 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800287e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002894:	430b      	orrs	r3, r1
 8002896:	e080      	b.n	800299a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x560>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	3301      	adds	r3, #1
 80028ac:	069b      	lsls	r3, r3, #26
 80028ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028b2:	e015      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x58c>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80028c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80028d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	069b      	lsls	r3, r3, #26
 80028dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x5ac>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	e017      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5dc>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	61fb      	str	r3, [r7, #28]
  return result;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	ea42 0103 	orr.w	r1, r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_ADC_ConfigChannel+0x608>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0e9b      	lsrs	r3, r3, #26
 8002946:	3301      	adds	r3, #1
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	3b1e      	subs	r3, #30
 8002954:	051b      	lsls	r3, r3, #20
 8002956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800295a:	e01d      	b.n	8002998 <HAL_ADC_ConfigChannel+0x644>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	613b      	str	r3, [r7, #16]
  return result;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002974:	2320      	movs	r3, #32
 8002976:	e005      	b.n	8002984 <HAL_ADC_ConfigChannel+0x630>
 8002978:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 021f 	and.w	r2, r3, #31
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	3b1e      	subs	r3, #30
 8002992:	051b      	lsls	r3, r3, #20
 8002994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002998:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299e:	4619      	mov	r1, r3
 80029a0:	f7ff f9ea 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b45      	ldr	r3, [pc, #276]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x76c>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d07c      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b0:	4844      	ldr	r0, [pc, #272]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x770>)
 80029b2:	f7ff f93f 	bl	8001c34 <LL_ADC_GetCommonPathInternalCh>
 80029b6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ba:	4843      	ldr	r0, [pc, #268]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x774>)
 80029bc:	f7ff fa8e 	bl	8001edc <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d15e      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a40      	ldr	r2, [pc, #256]	@ (8002acc <HAL_ADC_ConfigChannel+0x778>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d127      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x6cc>
 80029d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d121      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a39      	ldr	r2, [pc, #228]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x774>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d161      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029ee:	4619      	mov	r1, r3
 80029f0:	4834      	ldr	r0, [pc, #208]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x770>)
 80029f2:	f7ff f90c 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f6:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x77c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	4a35      	ldr	r2, [pc, #212]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x780>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1e:	e044      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x784>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d113      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x6fe>
 8002a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x774>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d134      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a48:	4619      	mov	r1, r3
 8002a4a:	481e      	ldr	r0, [pc, #120]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x770>)
 8002a4c:	f7ff f8df 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a50:	e02b      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a21      	ldr	r2, [pc, #132]	@ (8002adc <HAL_ADC_ConfigChannel+0x788>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d126      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
 8002a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d120      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x774>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d11b      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x770>)
 8002a7e:	f7ff f8c6 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
 8002a82:	e012      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a96:	e008      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002ab2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	37d8      	adds	r7, #216	@ 0xd8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	80080000 	.word	0x80080000
 8002ac4:	50040300 	.word	0x50040300
 8002ac8:	50040000 	.word	0x50040000
 8002acc:	c7520000 	.word	0xc7520000
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	053e2d63 	.word	0x053e2d63
 8002ad8:	cb840000 	.word	0xcb840000
 8002adc:	80000001 	.word	0x80000001

08002ae0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f9f3 	bl	8001edc <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d15e      	bne.n	8002bba <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4b30      	ldr	r3, [pc, #192]	@ (8002bc4 <ADC_Enable+0xe4>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	f043 0210 	orr.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e04a      	b.n	8002bbc <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f9c2 	bl	8001eb4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b30:	4825      	ldr	r0, [pc, #148]	@ (8002bc8 <ADC_Enable+0xe8>)
 8002b32:	f7ff f87f 	bl	8001c34 <LL_ADC_GetCommonPathInternalCh>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00f      	beq.n	8002b60 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b40:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <ADC_Enable+0xec>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	4a22      	ldr	r2, [pc, #136]	@ (8002bd0 <ADC_Enable+0xf0>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b52:	e002      	b.n	8002b5a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002b60:	f7ff f81e 	bl	8001ba0 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b66:	e021      	b.n	8002bac <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9b5 	bl	8001edc <LL_ADC_IsEnabled>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f999 	bl	8001eb4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b82:	f7ff f80d 	bl	8001ba0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d90d      	bls.n	8002bac <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	f043 0210 	orr.w	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d1d6      	bne.n	8002b68 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	8000003f 	.word	0x8000003f
 8002bc8:	50040300 	.word	0x50040300
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	053e2d63 	.word	0x053e2d63

08002bd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d14b      	bne.n	8002c86 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d021      	beq.n	8002c4c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff f874 	bl	8001cfa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d032      	beq.n	8002c7e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d12b      	bne.n	8002c7e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11f      	bne.n	8002c7e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c4a:	e018      	b.n	8002c7e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d111      	bne.n	8002c7e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fb4a 	bl	8002318 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c84:	e00e      	b.n	8002ca4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff fb54 	bl	8002340 <HAL_ADC_ErrorCallback>
}
 8002c98:	e004      	b.n	8002ca4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff fb36 	bl	800232c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0204 	orr.w	r2, r3, #4
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fb26 	bl	8002340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <__NVIC_EnableIRQ+0x38>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	@ (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff29 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff40 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff90 	bl	8002df0 <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5f 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff33 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa4 	bl	8002e58 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e08e      	b.n	800304c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <HAL_DMA_Init+0x138>)
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d80f      	bhi.n	8002f5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b45      	ldr	r3, [pc, #276]	@ (8003058 <HAL_DMA_Init+0x13c>)
 8002f42:	4413      	add	r3, r2
 8002f44:	4a45      	ldr	r2, [pc, #276]	@ (800305c <HAL_DMA_Init+0x140>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a42      	ldr	r2, [pc, #264]	@ (8003060 <HAL_DMA_Init+0x144>)
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f58:	e00e      	b.n	8002f78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_DMA_Init+0x148>)
 8002f62:	4413      	add	r3, r2
 8002f64:	4a3d      	ldr	r2, [pc, #244]	@ (800305c <HAL_DMA_Init+0x140>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <HAL_DMA_Init+0x14c>)
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa74 	bl	80034b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002fec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_DMA_Init+0x106>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d80c      	bhi.n	8003022 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa93 	bl	8003534 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	e008      	b.n	8003034 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40020407 	.word	0x40020407
 8003058:	bffdfff8 	.word	0xbffdfff8
 800305c:	cccccccd 	.word	0xcccccccd
 8003060:	40020000 	.word	0x40020000
 8003064:	bffdfbf8 	.word	0xbffdfbf8
 8003068:	40020400 	.word	0x40020400

0800306c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DMA_Start_IT+0x20>
 8003088:	2302      	movs	r3, #2
 800308a:	e066      	b.n	800315a <HAL_DMA_Start_IT+0xee>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d155      	bne.n	800314c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f9b9 	bl	800343c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 020e 	orr.w	r2, r2, #14
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e00f      	b.n	8003104 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 020a 	orr.w	r2, r2, #10
 8003102:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003120:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003138:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e005      	b.n	8003158 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04f      	b.n	8003214 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d008      	beq.n	8003192 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2204      	movs	r2, #4
 8003184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e040      	b.n	8003214 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 020e 	bic.w	r2, r2, #14
 80031a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f003 021c 	and.w	r2, r3, #28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f202 	lsl.w	r2, r1, r2
 80031d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00c      	beq.n	8003202 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003200:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d005      	beq.n	8003244 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2204      	movs	r2, #4
 800323c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e047      	b.n	80032d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 020e 	bic.w	r2, r2, #14
 8003252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003272:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003278:	f003 021c 	and.w	r2, r3, #28
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003290:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	4798      	blx	r3
    }
  }
  return status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f003 031c 	and.w	r3, r3, #28
 80032fe:	2204      	movs	r2, #4
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d026      	beq.n	8003358 <HAL_DMA_IRQHandler+0x7a>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d021      	beq.n	8003358 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0204 	bic.w	r2, r2, #4
 8003330:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f003 021c 	and.w	r2, r3, #28
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2104      	movs	r1, #4
 8003340:	fa01 f202 	lsl.w	r2, r1, r2
 8003344:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	2b00      	cmp	r3, #0
 800334c:	d071      	beq.n	8003432 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003356:	e06c      	b.n	8003432 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335c:	f003 031c 	and.w	r3, r3, #28
 8003360:	2202      	movs	r2, #2
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d02e      	beq.n	80033ca <HAL_DMA_IRQHandler+0xec>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d029      	beq.n	80033ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 020a 	bic.w	r2, r2, #10
 8003392:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a0:	f003 021c 	and.w	r2, r3, #28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	2102      	movs	r1, #2
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d038      	beq.n	8003432 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033c8:	e033      	b.n	8003432 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f003 031c 	and.w	r3, r3, #28
 80033d2:	2208      	movs	r2, #8
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02a      	beq.n	8003434 <HAL_DMA_IRQHandler+0x156>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d025      	beq.n	8003434 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 020e 	bic.w	r2, r2, #14
 80033f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	f003 021c 	and.w	r2, r3, #28
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003432:	bf00      	nop
 8003434:	bf00      	nop
}
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f003 021c 	and.w	r2, r3, #28
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b10      	cmp	r3, #16
 8003488:	d108      	bne.n	800349c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800349a:	e007      	b.n	80034ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d80a      	bhi.n	80034e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6493      	str	r3, [r2, #72]	@ 0x48
 80034e0:	e007      	b.n	80034f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034ec:	4413      	add	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3b08      	subs	r3, #8
 80034fa:	4a0c      	ldr	r2, [pc, #48]	@ (800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003508:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40020407 	.word	0x40020407
 8003528:	4002081c 	.word	0x4002081c
 800352c:	cccccccd 	.word	0xcccccccd
 8003530:	40020880 	.word	0x40020880

08003534 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003544:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a09      	ldr	r2, [pc, #36]	@ (800357c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3b01      	subs	r3, #1
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2201      	movs	r2, #1
 8003564:	409a      	lsls	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	1000823f 	.word	0x1000823f
 800357c:	40020940 	.word	0x40020940

08003580 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800358e:	e14c      	b.n	800382a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 813e 	beq.w	8003824 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d005      	beq.n	80035c0 <HAL_GPIO_Init+0x40>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d130      	bne.n	8003622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035f6:	2201      	movs	r2, #1
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0201 	and.w	r2, r3, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d017      	beq.n	800365e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2203      	movs	r2, #3
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d123      	bne.n	80036b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	220f      	movs	r2, #15
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	6939      	ldr	r1, [r7, #16]
 80036ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0203 	and.w	r2, r3, #3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8098 	beq.w	8003824 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80036f4:	4a54      	ldr	r2, [pc, #336]	@ (8003848 <HAL_GPIO_Init+0x2c8>)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	089b      	lsrs	r3, r3, #2
 80036fa:	3302      	adds	r3, #2
 80036fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800371e:	d019      	beq.n	8003754 <HAL_GPIO_Init+0x1d4>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a4a      	ldr	r2, [pc, #296]	@ (800384c <HAL_GPIO_Init+0x2cc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1d0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a49      	ldr	r2, [pc, #292]	@ (8003850 <HAL_GPIO_Init+0x2d0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1cc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a48      	ldr	r2, [pc, #288]	@ (8003854 <HAL_GPIO_Init+0x2d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1c8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a47      	ldr	r2, [pc, #284]	@ (8003858 <HAL_GPIO_Init+0x2d8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1c4>
 8003740:	2304      	movs	r3, #4
 8003742:	e008      	b.n	8003756 <HAL_GPIO_Init+0x1d6>
 8003744:	2307      	movs	r3, #7
 8003746:	e006      	b.n	8003756 <HAL_GPIO_Init+0x1d6>
 8003748:	2303      	movs	r3, #3
 800374a:	e004      	b.n	8003756 <HAL_GPIO_Init+0x1d6>
 800374c:	2302      	movs	r3, #2
 800374e:	e002      	b.n	8003756 <HAL_GPIO_Init+0x1d6>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <HAL_GPIO_Init+0x1d6>
 8003754:	2300      	movs	r3, #0
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	f002 0203 	and.w	r2, r2, #3
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	4093      	lsls	r3, r2
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003766:	4938      	ldr	r1, [pc, #224]	@ (8003848 <HAL_GPIO_Init+0x2c8>)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3302      	adds	r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003774:	4b39      	ldr	r3, [pc, #228]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003798:	4a30      	ldr	r2, [pc, #192]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800379e:	4b2f      	ldr	r3, [pc, #188]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c2:	4a26      	ldr	r2, [pc, #152]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037c8:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 80037ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ee:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80037f6:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800381c:	4a0f      	ldr	r2, [pc, #60]	@ (800385c <HAL_GPIO_Init+0x2dc>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f aeab 	bne.w	8003590 <HAL_GPIO_Init+0x10>
  }
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40010000 	.word	0x40010000
 800384c:	48000400 	.word	0x48000400
 8003850:	48000800 	.word	0x48000800
 8003854:	48000c00 	.word	0x48000c00
 8003858:	48001000 	.word	0x48001000
 800385c:	58000800 	.word	0x58000800

08003860 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e001      	b.n	8003882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4013      	ands	r3, r2
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43d9      	mvns	r1, r3
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	400b      	ands	r3, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	619a      	str	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <HAL_HSEM_IRQHandler+0x30>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003900:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <HAL_HSEM_IRQHandler+0x30>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	43db      	mvns	r3, r3
 8003908:	4906      	ldr	r1, [pc, #24]	@ (8003924 <HAL_HSEM_IRQHandler+0x30>)
 800390a:	4013      	ands	r3, r2
 800390c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800390e:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <HAL_HSEM_IRQHandler+0x30>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f807 	bl	8003928 <HAL_HSEM_FreeCallback>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	58001500 	.word	0x58001500

08003928 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e08d      	b.n	8003a6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fb46 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	@ 0x24
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800398c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800399c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	e006      	b.n	80039c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d108      	bne.n	80039de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	e007      	b.n	80039ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d138      	bne.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e032      	b.n	8003afc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2224      	movs	r2, #36	@ 0x24
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d139      	bne.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e033      	b.n	8003b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	@ 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01e      	beq.n	8003bf0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003bb2:	4b13      	ldr	r3, [pc, #76]	@ (8003c00 <HAL_IPCC_Init+0x60>)
 8003bb4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd fa5e 	bl	8001084 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003bc8:	68b8      	ldr	r0, [r7, #8]
 8003bca:	f000 f85b 	bl	8003c84 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f82c 	bl	8003c38 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003bee:	e001      	b.n	8003bf4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	58000c00 	.word	0x58000c00

08003c04 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e00f      	b.n	8003c66 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <IPCC_SetDefaultCallbacks+0x44>)
 8003c50:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3306      	adds	r3, #6
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a08      	ldr	r2, [pc, #32]	@ (8003c80 <IPCC_SetDefaultCallbacks+0x48>)
 8003c5e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d9ec      	bls.n	8003c46 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	08003c05 	.word	0x08003c05
 8003c80:	08003c1f 	.word	0x08003c1f

08003c84 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003c98:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	223f      	movs	r2, #63	@ 0x3f
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	@ (8003cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cba:	6013      	str	r3, [r2, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	58000400 	.word	0x58000400

08003ccc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003cd0:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58000400 	.word	0x58000400

08003ce8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfa:	d101      	bne.n	8003d00 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_RCC_HSE_Enable>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_HSE_Disable>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_HSE_IsReady>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d5a:	d101      	bne.n	8003d60 <LL_RCC_HSE_IsReady+0x18>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <LL_RCC_HSE_IsReady+0x1a>
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_RCC_HSI_Enable>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7e:	6013      	str	r3, [r2, #0]
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <LL_RCC_HSI_Disable>:
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d9c:	6013      	str	r3, [r2, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_HSI_IsReady>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d101      	bne.n	8003dc0 <LL_RCC_HSI_IsReady+0x18>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <LL_RCC_HSI_IsReady+0x1a>
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_RCC_HSI_SetCalibTrimming>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_HSI48_Enable>:
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_HSI48_Disable>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_HSI48_IsReady>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d101      	bne.n	8003e52 <LL_RCC_HSI48_IsReady+0x18>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <LL_RCC_HSI48_IsReady+0x1a>
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_RCC_LSE_Enable>:
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_RCC_LSE_Disable>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_RCC_LSE_EnableBypass>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_RCC_LSE_DisableBypass>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_LSE_IsReady>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d101      	bne.n	8003efe <LL_RCC_LSE_IsReady+0x18>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <LL_RCC_LSE_IsReady+0x1a>
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_LSI1_Enable>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f22:	bf00      	nop
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_LSI1_Disable>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_LSI1_IsReady>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d101      	bne.n	8003f66 <LL_RCC_LSI1_IsReady+0x18>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_RCC_LSI1_IsReady+0x1a>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_RCC_LSI2_Enable>:
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_RCC_LSI2_Disable>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_LSI2_IsReady>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d101      	bne.n	8003fce <LL_RCC_LSI2_IsReady+0x18>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_RCC_LSI2_IsReady+0x1a>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_LSI2_SetTrimming>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_MSI_Enable>:
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_RCC_MSI_Disable>:
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800402a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_MSI_IsReady>:
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d101      	bne.n	800405a <LL_RCC_MSI_IsReady+0x16>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_RCC_MSI_IsReady+0x18>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_MSI_SetRange>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004078:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_RCC_MSI_GetRange>:
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800409e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2bb0      	cmp	r3, #176	@ 0xb0
 80040a4:	d901      	bls.n	80040aa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80040a6:	23b0      	movs	r3, #176	@ 0xb0
 80040a8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80040aa:	687b      	ldr	r3, [r7, #4]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_SetSysClkSource>:
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 0203 	bic.w	r2, r3, #3
 80040f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_GetSysClkSource>:
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_RCC_SetAHBPrescaler>:
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_C2_RCC_SetAHBPrescaler>:
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004156:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800415a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800415e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_SetAHB4Prescaler>:
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004186:	f023 020f 	bic.w	r2, r3, #15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <LL_RCC_SetAPB1Prescaler>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_RCC_SetAPB2Prescaler>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	608b      	str	r3, [r1, #8]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_RCC_GetAHBPrescaler>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_RCC_GetAHB4Prescaler>:
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004214:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_RCC_GetAPB1Prescaler>:
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_RCC_GetAPB2Prescaler>:
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004266:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004284:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004288:	6013      	str	r3, [r2, #0]
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042a6:	d101      	bne.n	80042ac <LL_RCC_PLL_IsReady+0x18>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <LL_RCC_PLL_IsReady+0x1a>
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0303 	and.w	r3, r3, #3
}
 8004310:	4618      	mov	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800432c:	d101      	bne.n	8004332 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004346:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004352:	d101      	bne.n	8004358 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800436c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004378:	d101      	bne.n	800437e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800439c:	d101      	bne.n	80043a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043c0:	d101      	bne.n	80043c6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b08d      	sub	sp, #52	@ 0x34
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e363      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 808d 	beq.w	800450e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f4:	f7ff fe89 	bl	800410a <LL_RCC_GetSysClkSource>
 80043f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043fa:	f7ff ff82 	bl	8004302 <LL_RCC_PLL_GetMainSource>
 80043fe:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x3e>
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d147      	bne.n	800449c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	2b01      	cmp	r3, #1
 8004410:	d144      	bne.n	800449c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e347      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004422:	f7ff fe34 	bl	800408e <LL_RCC_MSI_GetRange>
 8004426:	4603      	mov	r3, r0
 8004428:	429c      	cmp	r4, r3
 800442a:	d914      	bls.n	8004456 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fd2f 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e336      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fe0e 	bl	8004066 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fe32 	bl	80040b8 <LL_RCC_MSI_SetCalibTrimming>
 8004454:	e013      	b.n	800447e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fe03 	bl	8004066 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fe27 	bl	80040b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd10 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e317      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800447e:	f000 fcc9 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004482:	4603      	mov	r3, r0
 8004484:	4aa4      	ldr	r2, [pc, #656]	@ (8004718 <HAL_RCC_OscConfig+0x344>)
 8004486:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004488:	4ba4      	ldr	r3, [pc, #656]	@ (800471c <HAL_RCC_OscConfig+0x348>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd fb39 	bl	8001b04 <HAL_InitTick>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d039      	beq.n	800450c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e308      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01e      	beq.n	80044e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044a4:	f7ff fdb0 	bl	8004008 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a8:	f7fd fb7a 	bl	8001ba0 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b0:	f7fd fb76 	bl	8001ba0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e2f5      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044c2:	f7ff fdbf 	bl	8004044 <LL_RCC_MSI_IsReady>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f1      	beq.n	80044b0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdc8 	bl	8004066 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fdec 	bl	80040b8 <LL_RCC_MSI_SetCalibTrimming>
 80044e0:	e015      	b.n	800450e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044e2:	f7ff fda0 	bl	8004026 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e6:	f7fd fb5b 	bl	8001ba0 <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ee:	f7fd fb57 	bl	8001ba0 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e2d6      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004500:	f7ff fda0 	bl	8004044 <LL_RCC_MSI_IsReady>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f1      	bne.n	80044ee <HAL_RCC_OscConfig+0x11a>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800450c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d047      	beq.n	80045aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451a:	f7ff fdf6 	bl	800410a <LL_RCC_GetSysClkSource>
 800451e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004520:	f7ff feef 	bl	8004302 <LL_RCC_PLL_GetMainSource>
 8004524:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d005      	beq.n	8004538 <HAL_RCC_OscConfig+0x164>
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d108      	bne.n	8004544 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d105      	bne.n	8004544 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d134      	bne.n	80045aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e2b4      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454c:	d102      	bne.n	8004554 <HAL_RCC_OscConfig+0x180>
 800454e:	f7ff fbdd 	bl	8003d0c <LL_RCC_HSE_Enable>
 8004552:	e001      	b.n	8004558 <HAL_RCC_OscConfig+0x184>
 8004554:	f7ff fbe9 	bl	8003d2a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d012      	beq.n	8004586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fb1e 	bl	8001ba0 <HAL_GetTick>
 8004564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fd fb1a 	bl	8001ba0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e299      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800457a:	f7ff fbe5 	bl	8003d48 <LL_RCC_HSE_IsReady>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f1      	beq.n	8004568 <HAL_RCC_OscConfig+0x194>
 8004584:	e011      	b.n	80045aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fd fb0b 	bl	8001ba0 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458e:	f7fd fb07 	bl	8001ba0 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b64      	cmp	r3, #100	@ 0x64
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e286      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80045a0:	f7ff fbd2 	bl	8003d48 <LL_RCC_HSE_IsReady>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f1      	bne.n	800458e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d04c      	beq.n	8004650 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b6:	f7ff fda8 	bl	800410a <LL_RCC_GetSysClkSource>
 80045ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045bc:	f7ff fea1 	bl	8004302 <LL_RCC_PLL_GetMainSource>
 80045c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x200>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d10e      	bne.n	80045ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d10b      	bne.n	80045ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e266      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fbf1 	bl	8003dcc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045ea:	e031      	b.n	8004650 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d019      	beq.n	8004628 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f4:	f7ff fbba 	bl	8003d6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fad2 	bl	8001ba0 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd face 	bl	8001ba0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e24d      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004612:	f7ff fbc9 	bl	8003da8 <LL_RCC_HSI_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f1      	beq.n	8004600 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fbd3 	bl	8003dcc <LL_RCC_HSI_SetCalibTrimming>
 8004626:	e013      	b.n	8004650 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004628:	f7ff fbaf 	bl	8003d8a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd fab8 	bl	8001ba0 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004634:	f7fd fab4 	bl	8001ba0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e233      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004646:	f7ff fbaf 	bl	8003da8 <LL_RCC_HSI_IsReady>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f1      	bne.n	8004634 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80a3 	beq.w	80047b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d076      	beq.n	8004760 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	d046      	beq.n	800470c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800467e:	f7ff fc66 	bl	8003f4e <LL_RCC_LSI1_IsReady>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d113      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004688:	f7ff fc3f 	bl	8003f0a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468c:	f7fd fa88 	bl	8001ba0 <HAL_GetTick>
 8004690:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004694:	f7fd fa84 	bl	8001ba0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e203      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80046a6:	f7ff fc52 	bl	8003f4e <LL_RCC_LSI1_IsReady>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f1      	beq.n	8004694 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80046b0:	f7ff fc5f 	bl	8003f72 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd fa74 	bl	8001ba0 <HAL_GetTick>
 80046b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046bc:	f7fd fa70 	bl	8001ba0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e1ef      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046ce:	f7ff fc72 	bl	8003fb6 <LL_RCC_LSI2_IsReady>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f1      	beq.n	80046bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fc7c 	bl	8003fda <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046e2:	f7ff fc23 	bl	8003f2c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd fa5b 	bl	8001ba0 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046ee:	f7fd fa57 	bl	8001ba0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e1d6      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004700:	f7ff fc25 	bl	8003f4e <LL_RCC_LSI1_IsReady>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f1      	bne.n	80046ee <HAL_RCC_OscConfig+0x31a>
 800470a:	e051      	b.n	80047b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800470c:	f7ff fbfd 	bl	8003f0a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fa46 	bl	8001ba0 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004716:	e00c      	b.n	8004732 <HAL_RCC_OscConfig+0x35e>
 8004718:	20000008 	.word	0x20000008
 800471c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004720:	f7fd fa3e 	bl	8001ba0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e1bd      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004732:	f7ff fc0c 	bl	8003f4e <LL_RCC_LSI1_IsReady>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f1      	beq.n	8004720 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800473c:	f7ff fc2a 	bl	8003f94 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004742:	f7fd fa2d 	bl	8001ba0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1ac      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004754:	f7ff fc2f 	bl	8003fb6 <LL_RCC_LSI2_IsReady>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f1      	bne.n	8004742 <HAL_RCC_OscConfig+0x36e>
 800475e:	e027      	b.n	80047b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004760:	f7ff fc18 	bl	8003f94 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fa1c 	bl	8001ba0 <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800476c:	f7fd fa18 	bl	8001ba0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e197      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800477e:	f7ff fc1a 	bl	8003fb6 <LL_RCC_LSI2_IsReady>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f1      	bne.n	800476c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004788:	f7ff fbd0 	bl	8003f2c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fd fa08 	bl	8001ba0 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004794:	f7fd fa04 	bl	8001ba0 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e183      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80047a6:	f7ff fbd2 	bl	8003f4e <LL_RCC_LSI1_IsReady>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f1      	bne.n	8004794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05b      	beq.n	8004874 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047bc:	4ba7      	ldr	r3, [pc, #668]	@ (8004a5c <HAL_RCC_OscConfig+0x688>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d114      	bne.n	80047f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047c8:	f7ff fa70 	bl	8003cac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047cc:	f7fd f9e8 	bl	8001ba0 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d4:	f7fd f9e4 	bl	8001ba0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e163      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e6:	4b9d      	ldr	r3, [pc, #628]	@ (8004a5c <HAL_RCC_OscConfig+0x688>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0x42c>
 80047fa:	f7ff fb30 	bl	8003e5e <LL_RCC_LSE_Enable>
 80047fe:	e00c      	b.n	800481a <HAL_RCC_OscConfig+0x446>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d104      	bne.n	8004812 <HAL_RCC_OscConfig+0x43e>
 8004808:	f7ff fb4b 	bl	8003ea2 <LL_RCC_LSE_EnableBypass>
 800480c:	f7ff fb27 	bl	8003e5e <LL_RCC_LSE_Enable>
 8004810:	e003      	b.n	800481a <HAL_RCC_OscConfig+0x446>
 8004812:	f7ff fb35 	bl	8003e80 <LL_RCC_LSE_Disable>
 8004816:	f7ff fb55 	bl	8003ec4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fd f9bd 	bl	8001ba0 <HAL_GetTick>
 8004826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd f9b9 	bl	8001ba0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e136      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004840:	f7ff fb51 	bl	8003ee6 <LL_RCC_LSE_IsReady>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ef      	beq.n	800482a <HAL_RCC_OscConfig+0x456>
 800484a:	e013      	b.n	8004874 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd f9a8 	bl	8001ba0 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004852:	e00a      	b.n	800486a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd f9a4 	bl	8001ba0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e121      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800486a:	f7ff fb3c 	bl	8003ee6 <LL_RCC_LSE_IsReady>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ef      	bne.n	8004854 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02c      	beq.n	80048da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d014      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004888:	f7ff fab5 	bl	8003df6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd f988 	bl	8001ba0 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004894:	f7fd f984 	bl	8001ba0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e103      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048a6:	f7ff fac8 	bl	8003e3a <LL_RCC_HSI48_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f1      	beq.n	8004894 <HAL_RCC_OscConfig+0x4c0>
 80048b0:	e013      	b.n	80048da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048b2:	f7ff fab1 	bl	8003e18 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b6:	f7fd f973 	bl	8001ba0 <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048be:	f7fd f96f 	bl	8001ba0 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0ee      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048d0:	f7ff fab3 	bl	8003e3a <LL_RCC_HSI48_IsReady>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f1      	bne.n	80048be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80e4 	beq.w	8004aac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e4:	f7ff fc11 	bl	800410a <LL_RCC_GetSysClkSource>
 80048e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f040 80b4 	bne.w	8004a64 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	429a      	cmp	r2, r3
 8004908:	d123      	bne.n	8004952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d11c      	bne.n	8004952 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d114      	bne.n	8004952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d10d      	bne.n	8004952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d05d      	beq.n	8004a0e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d058      	beq.n	8004a0a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0a1      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800496a:	f7ff fc84 	bl	8004276 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800496e:	f7fd f917 	bl	8001ba0 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004976:	f7fd f913 	bl	8001ba0 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e092      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ef      	bne.n	8004976 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	4b30      	ldr	r3, [pc, #192]	@ (8004a60 <HAL_RCC_OscConfig+0x68c>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049a8:	4311      	orrs	r1, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049ae:	0212      	lsls	r2, r2, #8
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049b6:	4311      	orrs	r1, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80049c2:	430a      	orrs	r2, r1
 80049c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049cc:	f7ff fc44 	bl	8004258 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049e0:	f7fd f8de 	bl	8001ba0 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fd f8da 	bl	8001ba0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e059      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0ef      	beq.n	80049e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a08:	e050      	b.n	8004aac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e04f      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d147      	bne.n	8004aac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a1c:	f7ff fc1c 	bl	8004258 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a30:	f7fd f8b6 	bl	8001ba0 <HAL_GetTick>
 8004a34:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd f8b2 	bl	8001ba0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e031      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ef      	beq.n	8004a38 <HAL_RCC_OscConfig+0x664>
 8004a58:	e028      	b.n	8004aac <HAL_RCC_OscConfig+0x6d8>
 8004a5a:	bf00      	nop
 8004a5c:	58000400 	.word	0x58000400
 8004a60:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d01e      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	f7ff fc04 	bl	8004276 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6e:	f7fd f897 	bl	8001ba0 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fd f893 	bl	8001ba0 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e012      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ef      	bne.n	8004a76 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aa0:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <HAL_RCC_OscConfig+0x6e4>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	60cb      	str	r3, [r1, #12]
 8004aa6:	e001      	b.n	8004aac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3734      	adds	r7, #52	@ 0x34
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	eefefffc 	.word	0xeefefffc

08004abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e12d      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b98      	ldr	r3, [pc, #608]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d91b      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b95      	ldr	r3, [pc, #596]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0207 	bic.w	r2, r3, #7
 8004ae6:	4993      	ldr	r1, [pc, #588]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fd f857 	bl	8001ba0 <HAL_GetTick>
 8004af2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004af6:	f7fd f853 	bl	8001ba0 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e111      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b08:	4b8a      	ldr	r3, [pc, #552]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d1ef      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fafb 	bl	8004122 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b2c:	f7fd f838 	bl	8001ba0 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b34:	f7fd f834 	bl	8001ba0 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e0f2      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b46:	f7ff fbe8 	bl	800431a <LL_RCC_IsActiveFlag_HPRE>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f1      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff faf2 	bl	800414a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b66:	f7fd f81b 	bl	8001ba0 <HAL_GetTick>
 8004b6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b6e:	f7fd f817 	bl	8001ba0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0d5      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b80:	f7ff fbdd 	bl	800433e <LL_RCC_IsActiveFlag_C2HPRE>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f1      	beq.n	8004b6e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff faeb 	bl	8004176 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ba0:	f7fc fffe 	bl	8001ba0 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ba8:	f7fc fffa 	bl	8001ba0 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e0b8      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004bba:	f7ff fbd3 	bl	8004364 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f1      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d016      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fae5 	bl	80041a4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bda:	f7fc ffe1 	bl	8001ba0 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004be2:	f7fc ffdd 	bl	8001ba0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e09b      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bf4:	f7ff fbc9 	bl	800438a <LL_RCC_IsActiveFlag_PPRE1>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f1      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fadb 	bl	80041cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c16:	f7fc ffc3 	bl	8001ba0 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c1e:	f7fc ffbf 	bl	8001ba0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e07d      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004c30:	f7ff fbbd 	bl	80043ae <LL_RCC_IsActiveFlag_PPRE2>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f1      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d043      	beq.n	8004cce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c4e:	f7ff f87b 	bl	8003d48 <LL_RCC_HSE_IsReady>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11e      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e067      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c64:	f7ff fb16 	bl	8004294 <LL_RCC_PLL_IsReady>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d113      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e05c      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c7a:	f7ff f9e3 	bl	8004044 <LL_RCC_MSI_IsReady>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d108      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e051      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c88:	f7ff f88e 	bl	8003da8 <LL_RCC_HSI_IsReady>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e04a      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fa21 	bl	80040e2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca0:	f7fc ff7e 	bl	8001ba0 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fc ff7a 	bl	8001ba0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e036      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	f7ff fa24 	bl	800410a <LL_RCC_GetSysClkSource>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d1ec      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cce:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d21b      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cdc:	4b15      	ldr	r3, [pc, #84]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f023 0207 	bic.w	r2, r3, #7
 8004ce4:	4913      	ldr	r1, [pc, #76]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fc ff58 	bl	8001ba0 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cf4:	f7fc ff54 	bl	8001ba0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e012      	b.n	8004d2c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_ClockConfig+0x278>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1ef      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d14:	f000 f87e 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a07      	ldr	r2, [pc, #28]	@ (8004d38 <HAL_RCC_ClockConfig+0x27c>)
 8004d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004d1e:	f7fc ff4b 	bl	8001bb8 <HAL_GetTickPrio>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fc feed 	bl	8001b04 <HAL_InitTick>
 8004d2a:	4603      	mov	r3, r0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	58004000 	.word	0x58004000
 8004d38:	20000008 	.word	0x20000008

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	f7ff f9e2 	bl	800410a <LL_RCC_GetSysClkSource>
 8004d46:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d4e:	f7ff f99e 	bl	800408e <LL_RCC_MSI_GetRange>
 8004d52:	4603      	mov	r3, r0
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e04b      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d102      	bne.n	8004d70 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d6a:	4b28      	ldr	r3, [pc, #160]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e045      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d10a      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d76:	f7fe ffb7 	bl	8003ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d80:	4b22      	ldr	r3, [pc, #136]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e03a      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d86:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e037      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d8c:	f7ff fab9 	bl	8004302 <LL_RCC_PLL_GetMainSource>
 8004d90:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d003      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x64>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004d9e:	e00d      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004da0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004da2:	60bb      	str	r3, [r7, #8]
        break;
 8004da4:	e015      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004da6:	f7fe ff9f 	bl	8003ce8 <LL_RCC_HSE_IsEnabledDiv2>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004db0:	4b16      	ldr	r3, [pc, #88]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004db2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004db4:	e00d      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004db6:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004db8:	60bb      	str	r3, [r7, #8]
        break;
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004dbc:	f7ff f967 	bl	800408e <LL_RCC_MSI_GetRange>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	60bb      	str	r3, [r7, #8]
        break;
 8004dd0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004dd2:	f7ff fa71 	bl	80042b8 <LL_RCC_PLL_GetN>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	fb03 f402 	mul.w	r4, r3, r2
 8004dde:	f7ff fa84 	bl	80042ea <LL_RCC_PLL_GetDivider>
 8004de2:	4603      	mov	r3, r0
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	3301      	adds	r3, #1
 8004de8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004dec:	f7ff fa71 	bl	80042d2 <LL_RCC_PLL_GetR>
 8004df0:	4603      	mov	r3, r0
 8004df2:	0f5b      	lsrs	r3, r3, #29
 8004df4:	3301      	adds	r3, #1
 8004df6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dfa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	bf00      	nop
 8004e08:	08009a8c 	.word	0x08009a8c
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	01e84800 	.word	0x01e84800

08004e14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e14:	b598      	push	{r3, r4, r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e18:	f7ff ff90 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	f7ff f9e9 	bl	80041f4 <LL_RCC_GetAHBPrescaler>
 8004e22:	4603      	mov	r3, r0
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	4a03      	ldr	r2, [pc, #12]	@ (8004e38 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd98      	pop	{r3, r4, r7, pc}
 8004e38:	08009a2c 	.word	0x08009a2c

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b598      	push	{r3, r4, r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e40:	f7ff ffe8 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e44:	4604      	mov	r4, r0
 8004e46:	f7ff f9ef 	bl	8004228 <LL_RCC_GetAPB1Prescaler>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	4a04      	ldr	r2, [pc, #16]	@ (8004e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd98      	pop	{r3, r4, r7, pc}
 8004e64:	08009a6c 	.word	0x08009a6c

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b598      	push	{r3, r4, r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e6c:	f7ff ffd2 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e70:	4604      	mov	r4, r0
 8004e72:	f7ff f9e5 	bl	8004240 <LL_RCC_GetAPB2Prescaler>
 8004e76:	4603      	mov	r3, r0
 8004e78:	0adb      	lsrs	r3, r3, #11
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	4a04      	ldr	r2, [pc, #16]	@ (8004e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd98      	pop	{r3, r4, r7, pc}
 8004e90:	08009a6c 	.word	0x08009a6c

08004e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004ea0:	d903      	bls.n	8004eaa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004ea2:	4b15      	ldr	r3, [pc, #84]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e007      	b.n	8004eba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	4a11      	ldr	r2, [pc, #68]	@ (8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004eba:	f7ff f9a7 	bl	800420c <LL_RCC_GetAHB4Prescaler>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8004efc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f00 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	0c9c      	lsrs	r4, r3, #18
 8004ede:	f7fe fef5 	bl	8003ccc <HAL_PWREx_GetVoltageRange>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f80c 	bl	8004f04 <RCC_SetFlashLatency>
 8004eec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	08009a8c 	.word	0x08009a8c
 8004efc:	08009a2c 	.word	0x08009a2c
 8004f00:	431bde83 	.word	0x431bde83

08004f04 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b093      	sub	sp, #76	@ 0x4c
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004f0e:	4b37      	ldr	r3, [pc, #220]	@ (8004fec <RCC_SetFlashLatency+0xe8>)
 8004f10:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004f14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004f1a:	4a35      	ldr	r2, [pc, #212]	@ (8004ff0 <RCC_SetFlashLatency+0xec>)
 8004f1c:	f107 031c 	add.w	r3, r7, #28
 8004f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004f26:	4b33      	ldr	r3, [pc, #204]	@ (8004ff4 <RCC_SetFlashLatency+0xf0>)
 8004f28:	f107 040c 	add.w	r4, r7, #12
 8004f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f32:	2300      	movs	r3, #0
 8004f34:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f3c:	d11a      	bne.n	8004f74 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f42:	e013      	b.n	8004f6c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	3348      	adds	r3, #72	@ 0x48
 8004f4a:	443b      	add	r3, r7
 8004f4c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d807      	bhi.n	8004f66 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	3348      	adds	r3, #72	@ 0x48
 8004f5c:	443b      	add	r3, r7
 8004f5e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f62:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004f64:	e020      	b.n	8004fa8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f68:	3301      	adds	r3, #1
 8004f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d9e8      	bls.n	8004f44 <RCC_SetFlashLatency+0x40>
 8004f72:	e019      	b.n	8004fa8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f78:	e013      	b.n	8004fa2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	3348      	adds	r3, #72	@ 0x48
 8004f80:	443b      	add	r3, r7
 8004f82:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d807      	bhi.n	8004f9c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	3348      	adds	r3, #72	@ 0x48
 8004f92:	443b      	add	r3, r7
 8004f94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f98:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004f9a:	e005      	b.n	8004fa8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d9e8      	bls.n	8004f7a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <RCC_SetFlashLatency+0xf4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 0207 	bic.w	r2, r3, #7
 8004fb0:	4911      	ldr	r1, [pc, #68]	@ (8004ff8 <RCC_SetFlashLatency+0xf4>)
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fb8:	f7fc fdf2 	bl	8001ba0 <HAL_GetTick>
 8004fbc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fbe:	e008      	b.n	8004fd2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fc0:	f7fc fdee 	bl	8001ba0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e007      	b.n	8004fe2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <RCC_SetFlashLatency+0xf4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1ef      	bne.n	8004fc0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	374c      	adds	r7, #76	@ 0x4c
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	bf00      	nop
 8004fec:	08009a00 	.word	0x08009a00
 8004ff0:	08009a10 	.word	0x08009a10
 8004ff4:	08009a1c 	.word	0x08009a1c
 8004ff8:	58004000 	.word	0x58004000

08004ffc <LL_RCC_LSE_IsEnabled>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <LL_RCC_LSE_IsEnabled+0x18>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <LL_RCC_LSE_IsEnabled+0x1a>
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <LL_RCC_LSE_IsReady>:
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d101      	bne.n	8005038 <LL_RCC_LSE_IsReady+0x18>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <LL_RCC_LSE_IsReady+0x1a>
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_RCC_SetRFWKPClockSource>:
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005054:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005058:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <LL_RCC_SetSMPSClockSource>:
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4313      	orrs	r3, r2
 800508a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <LL_RCC_SetSMPSPrescaler>:
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_RCC_SetUSARTClockSource>:
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f023 0203 	bic.w	r2, r3, #3
 80050d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_SetLPUARTClockSource>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <LL_RCC_SetI2CClockSource>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005124:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800513c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_SetLPTIMClockSource>:
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	43db      	mvns	r3, r3
 800516a:	401a      	ands	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LL_RCC_SetSAIClockSource>:
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800518e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800519a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_RCC_SetRNGClockSource>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80051c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_RCC_SetCLK48ClockSource>:
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_RCC_SetUSBClockSource>:
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ffe3 	bl	80051de <LL_RCC_SetCLK48ClockSource>
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <LL_RCC_SetADCClockSource>:
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005234:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_SetRTCClockSource>:
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <LL_RCC_GetRTCClockSource>:
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800527c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <LL_RCC_ForceBackupDomainReset>:
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80052aa:	bf00      	nop
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_RCC_PLLSAI1_Enable>:
{
 80052d6:	b480      	push	{r7}
 80052d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052e8:	6013      	str	r3, [r2, #0]
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_RCC_PLLSAI1_Disable>:
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005306:	6013      	str	r3, [r2, #0]
}
 8005308:	bf00      	nop
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <LL_RCC_PLLSAI1_IsReady>:
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005324:	d101      	bne.n	800532a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b088      	sub	sp, #32
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800533e:	2300      	movs	r3, #0
 8005340:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005342:	2300      	movs	r3, #0
 8005344:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d034      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800535a:	d021      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800535c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005360:	d81b      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005366:	d01d      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005368:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800536c:	d815      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005376:	d110      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005388:	e00d      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f947 	bl	8005622 <RCCEx_PLLSAI1_ConfigNP>
 8005394:	4603      	mov	r3, r0
 8005396:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005398:	e005      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	77fb      	strb	r3, [r7, #31]
        break;
 800539e:	e002      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80053a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a6:	7ffb      	ldrb	r3, [r7, #31]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fee8 	bl	8005186 <LL_RCC_SetSAIClockSource>
 80053b6:	e001      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7ffb      	ldrb	r3, [r7, #31]
 80053ba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d046      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80053c8:	f7ff ff56 	bl	8005278 <LL_RCC_GetRTCClockSource>
 80053cc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d03c      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053d8:	f7fe fc68 	bl	8003cac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff ff30 	bl	800524c <LL_RCC_SetRTCClockSource>
 80053ec:	e02e      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80053f8:	f7ff ff4b 	bl	8005292 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80053fc:	f7ff ff5a 	bl	80052b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800540e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005418:	f7ff fdf0 	bl	8004ffc <LL_RCC_LSE_IsEnabled>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d114      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005422:	f7fc fbbd 	bl	8001ba0 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005428:	e00b      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542a:	f7fc fbb9 	bl	8001ba0 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005438:	4293      	cmp	r3, r2
 800543a:	d902      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	77fb      	strb	r3, [r7, #31]
              break;
 8005440:	e004      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005442:	f7ff fded 	bl	8005020 <LL_RCC_LSE_IsReady>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d1ee      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800544c:	7ffb      	ldrb	r3, [r7, #31]
 800544e:	77bb      	strb	r3, [r7, #30]
 8005450:	e001      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005452:	7ffb      	ldrb	r3, [r7, #31]
 8005454:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fe2a 	bl	80050c0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fe35 	bl	80050ec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fe5d 	bl	8005152 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fe52 	bl	8005152 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fe2a 	bl	8005118 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fe1f 	bl	8005118 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d022      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fe8d 	bl	800520a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054f8:	d107      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005508:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005512:	d10b      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f8dd 	bl	80056d8 <RCCEx_PLLSAI1_ConfigNQ>
 800551e:	4603      	mov	r3, r0
 8005520:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005522:	7ffb      	ldrb	r3, [r7, #31]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02b      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005540:	d008      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800554a:	d003      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fe2a 	bl	80051b2 <LL_RCC_SetRNGClockSource>
 800555e:	e00a      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	2000      	movs	r0, #0
 800556c:	f7ff fe21 	bl	80051b2 <LL_RCC_SetRNGClockSource>
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fe34 	bl	80051de <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800557e:	d107      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800558a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800558e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005598:	2b00      	cmp	r3, #0
 800559a:	d022      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fe3d 	bl	8005220 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ae:	d107      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055be:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f8dd 	bl	800578e <RCCEx_PLLSAI1_ConfigNR>
 80055d4:	4603      	mov	r3, r0
 80055d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80055d8:	7ffb      	ldrb	r3, [r7, #31]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80055de:	7ffb      	ldrb	r3, [r7, #31]
 80055e0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fd26 	bl	8005044 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fd45 	bl	8005098 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fd2c 	bl	8005070 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005618:	7fbb      	ldrb	r3, [r7, #30]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800562e:	f7ff fe61 	bl	80052f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005632:	f7fc fab5 	bl	8001ba0 <HAL_GetTick>
 8005636:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005638:	e009      	b.n	800564e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800563a:	f7fc fab1 	bl	8001ba0 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d902      	bls.n	800564e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e004      	b.n	8005658 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800564e:	f7ff fe60 	bl	8005312 <LL_RCC_PLLSAI1_IsReady>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d137      	bne.n	80056ce <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005672:	4313      	orrs	r3, r2
 8005674:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005688:	4313      	orrs	r3, r2
 800568a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800568c:	f7ff fe23 	bl	80052d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005690:	f7fc fa86 	bl	8001ba0 <HAL_GetTick>
 8005694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005696:	e009      	b.n	80056ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005698:	f7fc fa82 	bl	8001ba0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d902      	bls.n	80056ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	73fb      	strb	r3, [r7, #15]
        break;
 80056aa:	e004      	b.n	80056b6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056ac:	f7ff fe31 	bl	8005312 <LL_RCC_PLLSAI1_IsReady>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d1f0      	bne.n	8005698 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056ca:	4313      	orrs	r3, r2
 80056cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056e4:	f7ff fe06 	bl	80052f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056e8:	f7fc fa5a 	bl	8001ba0 <HAL_GetTick>
 80056ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056ee:	e009      	b.n	8005704 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056f0:	f7fc fa56 	bl	8001ba0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d902      	bls.n	8005704 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	73fb      	strb	r3, [r7, #15]
      break;
 8005702:	e004      	b.n	800570e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005704:	f7ff fe05 	bl	8005312 <LL_RCC_PLLSAI1_IsReady>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d137      	bne.n	8005784 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005728:	4313      	orrs	r3, r2
 800572a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800573e:	4313      	orrs	r3, r2
 8005740:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005742:	f7ff fdc8 	bl	80052d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005746:	f7fc fa2b 	bl	8001ba0 <HAL_GetTick>
 800574a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800574c:	e009      	b.n	8005762 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800574e:	f7fc fa27 	bl	8001ba0 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d902      	bls.n	8005762 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	73fb      	strb	r3, [r7, #15]
        break;
 8005760:	e004      	b.n	800576c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005762:	f7ff fdd6 	bl	8005312 <LL_RCC_PLLSAI1_IsReady>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d1f0      	bne.n	800574e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800579a:	f7ff fdab 	bl	80052f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800579e:	f7fc f9ff 	bl	8001ba0 <HAL_GetTick>
 80057a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057a4:	e009      	b.n	80057ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057a6:	f7fc f9fb 	bl	8001ba0 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d902      	bls.n	80057ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	73fb      	strb	r3, [r7, #15]
      break;
 80057b8:	e004      	b.n	80057c4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057ba:	f7ff fdaa 	bl	8005312 <LL_RCC_PLLSAI1_IsReady>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d137      	bne.n	800583a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057f4:	4313      	orrs	r3, r2
 80057f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057f8:	f7ff fd6d 	bl	80052d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fc f9d0 	bl	8001ba0 <HAL_GetTick>
 8005800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005802:	e009      	b.n	8005818 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005804:	f7fc f9cc 	bl	8001ba0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	73fb      	strb	r3, [r7, #15]
        break;
 8005816:	e004      	b.n	8005822 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005818:	f7ff fd7b 	bl	8005312 <LL_RCC_PLLSAI1_IsReady>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d1f0      	bne.n	8005804 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005836:	4313      	orrs	r3, r2
 8005838:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e09f      	b.n	8005996 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fb fc2e 	bl	80010cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005878:	4b49      	ldr	r3, [pc, #292]	@ (80059a0 <HAL_RTC_Init+0x15c>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d07e      	beq.n	8005982 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	22ca      	movs	r2, #202	@ 0xca
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2253      	movs	r2, #83	@ 0x53
 8005892:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f8ab 	bl	80059f0 <RTC_EnterInitMode>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	22ff      	movs	r2, #255	@ 0xff
 80058a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2204      	movs	r2, #4
 80058ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e067      	b.n	8005986 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80058c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6899      	ldr	r1, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68d2      	ldr	r2, [r2, #12]
 80058f0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6919      	ldr	r1, [r3, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	041a      	lsls	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005914:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0203 	bic.w	r2, r2, #3
 8005924:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d113      	bne.n	8005974 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f829 	bl	80059a4 <HAL_RTC_WaitForSynchro>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	22ff      	movs	r2, #255	@ 0xff
 800595e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2204      	movs	r2, #4
 8005964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e010      	b.n	8005996 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	22ff      	movs	r2, #255	@ 0xff
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	73fb      	strb	r3, [r7, #15]
 8005980:	e001      	b.n	8005986 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40002800 	.word	0x40002800

080059a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80059bc:	f7fc f8f0 	bl	8001ba0 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059c2:	e009      	b.n	80059d8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059c4:	f7fc f8ec 	bl	8001ba0 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059d2:	d901      	bls.n	80059d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e007      	b.n	80059e8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0ee      	beq.n	80059c4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d119      	bne.n	8005a3a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a10:	f7fc f8c6 	bl	8001ba0 <HAL_GetTick>
 8005a14:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a16:	e009      	b.n	8005a2c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a18:	f7fc f8c2 	bl	8001ba0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a26:	d901      	bls.n	8005a2c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e007      	b.n	8005a3c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0ee      	beq.n	8005a18 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e089      	b.n	8005b72 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	22ca      	movs	r2, #202	@ 0xca
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2253      	movs	r2, #83	@ 0x53
 8005a7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8005a8c:	f7fc f888 	bl	8001ba0 <HAL_GetTick>
 8005a90:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005a92:	e015      	b.n	8005ac0 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a94:	f7fc f884 	bl	8001ba0 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005aa2:	d90d      	bls.n	8005ac0 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	22ff      	movs	r2, #255	@ 0xff
 8005aaa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2203      	movs	r2, #3
 8005ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e058      	b.n	8005b72 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e2      	bne.n	8005a94 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005adc:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005ade:	f7fc f85f 	bl	8001ba0 <HAL_GetTick>
 8005ae2:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ae4:	e015      	b.n	8005b12 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ae6:	f7fc f85b 	bl	8001ba0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005af4:	d90d      	bls.n	8005b12 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ff      	movs	r2, #255	@ 0xff
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2203      	movs	r2, #3
 8005b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e02f      	b.n	8005b72 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0e2      	beq.n	8005ae6 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0207 	bic.w	r2, r2, #7
 8005b2e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6899      	ldr	r1, [r3, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b56:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ff      	movs	r2, #255	@ 0xff
 8005b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e049      	b.n	8005c20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fb fac1 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f000 fc5f 	bl	800647c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d001      	beq.n	8005c40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e02e      	b.n	8005c9e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <HAL_TIM_Base_Start+0x84>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_Base_Start+0x34>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d115      	bne.n	8005c88 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <HAL_TIM_Base_Start+0x88>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d015      	beq.n	8005c9a <HAL_TIM_Base_Start+0x72>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c74:	d011      	beq.n	8005c9a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c86:	e008      	b.n	8005c9a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	00010007 	.word	0x00010007

08005cb4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10f      	bne.n	8005cec <HAL_TIM_Base_Stop+0x38>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_Base_Stop+0x38>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d001      	beq.n	8005d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e036      	b.n	8005d8a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <HAL_TIM_Base_Start_IT+0x94>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0x44>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d46:	d115      	bne.n	8005d74 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <HAL_TIM_Base_Start_IT+0x98>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d015      	beq.n	8005d86 <HAL_TIM_Base_Start_IT+0x82>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d60:	d011      	beq.n	8005d86 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	e008      	b.n	8005d86 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e049      	b.n	8005e46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb f9de 	bl	8001188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f000 fb4c 	bl	800647c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d020      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01b      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f06f 0202 	mvn.w	r2, #2
 8005e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fad0 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8005e9e:	e005      	b.n	8005eac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fac2 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fad3 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d020      	beq.n	8005efe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01b      	beq.n	8005efe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0204 	mvn.w	r2, #4
 8005ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 faaa 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8005eea:	e005      	b.n	8005ef8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa9c 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 faad 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01b      	beq.n	8005f4a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f06f 0208 	mvn.w	r2, #8
 8005f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa84 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8005f36:	e005      	b.n	8005f44 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa76 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa87 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f003 0310 	and.w	r3, r3, #16
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d020      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01b      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f06f 0210 	mvn.w	r2, #16
 8005f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2208      	movs	r2, #8
 8005f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa5e 	bl	800643e <HAL_TIM_IC_CaptureCallback>
 8005f82:	e005      	b.n	8005f90 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa50 	bl	800642a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa61 	bl	8006452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0201 	mvn.w	r2, #1
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa2e 	bl	8006416 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fe3e 	bl	8006c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fe36 	bl	8006c78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa1b 	bl	8006466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0220 	mvn.w	r2, #32
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fdfe 	bl	8006c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006076:	2302      	movs	r3, #2
 8006078:	e0ff      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b14      	cmp	r3, #20
 8006086:	f200 80f0 	bhi.w	800626a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060e5 	.word	0x080060e5
 8006094:	0800626b 	.word	0x0800626b
 8006098:	0800626b 	.word	0x0800626b
 800609c:	0800626b 	.word	0x0800626b
 80060a0:	08006125 	.word	0x08006125
 80060a4:	0800626b 	.word	0x0800626b
 80060a8:	0800626b 	.word	0x0800626b
 80060ac:	0800626b 	.word	0x0800626b
 80060b0:	08006167 	.word	0x08006167
 80060b4:	0800626b 	.word	0x0800626b
 80060b8:	0800626b 	.word	0x0800626b
 80060bc:	0800626b 	.word	0x0800626b
 80060c0:	080061a7 	.word	0x080061a7
 80060c4:	0800626b 	.word	0x0800626b
 80060c8:	0800626b 	.word	0x0800626b
 80060cc:	0800626b 	.word	0x0800626b
 80060d0:	080061e9 	.word	0x080061e9
 80060d4:	0800626b 	.word	0x0800626b
 80060d8:	0800626b 	.word	0x0800626b
 80060dc:	0800626b 	.word	0x0800626b
 80060e0:	08006229 	.word	0x08006229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa36 	bl	800655c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	619a      	str	r2, [r3, #24]
      break;
 8006122:	e0a5      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fa92 	bl	8006654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	021a      	lsls	r2, r3, #8
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
      break;
 8006164:	e084      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 faeb 	bl	8006748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	61da      	str	r2, [r3, #28]
      break;
 80061a4:	e064      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fb43 	bl	8006838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	021a      	lsls	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	61da      	str	r2, [r3, #28]
      break;
 80061e6:	e043      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb80 	bl	80068f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006226:	e023      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fbb8 	bl	80069a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006242:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006268:	e002      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
      break;
 800626e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop

08006284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_ConfigClockSource+0x1c>
 800629c:	2302      	movs	r3, #2
 800629e:	e0b6      	b.n	800640e <HAL_TIM_ConfigClockSource+0x18a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80062be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062dc:	d03e      	beq.n	800635c <HAL_TIM_ConfigClockSource+0xd8>
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e2:	f200 8087 	bhi.w	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 80062e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ea:	f000 8086 	beq.w	80063fa <HAL_TIM_ConfigClockSource+0x176>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f2:	d87f      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 80062f4:	2b70      	cmp	r3, #112	@ 0x70
 80062f6:	d01a      	beq.n	800632e <HAL_TIM_ConfigClockSource+0xaa>
 80062f8:	2b70      	cmp	r3, #112	@ 0x70
 80062fa:	d87b      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 80062fc:	2b60      	cmp	r3, #96	@ 0x60
 80062fe:	d050      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x11e>
 8006300:	2b60      	cmp	r3, #96	@ 0x60
 8006302:	d877      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 8006304:	2b50      	cmp	r3, #80	@ 0x50
 8006306:	d03c      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0xfe>
 8006308:	2b50      	cmp	r3, #80	@ 0x50
 800630a:	d873      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d058      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0x13e>
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	d86f      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 8006314:	2b30      	cmp	r3, #48	@ 0x30
 8006316:	d064      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006318:	2b30      	cmp	r3, #48	@ 0x30
 800631a:	d86b      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 800631c:	2b20      	cmp	r3, #32
 800631e:	d060      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d867      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d05c      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x15e>
 8006328:	2b10      	cmp	r3, #16
 800632a:	d05a      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0x15e>
 800632c:	e062      	b.n	80063f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800633e:	f000 fc07 	bl	8006b50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	609a      	str	r2, [r3, #8]
      break;
 800635a:	e04f      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800636c:	f000 fbf0 	bl	8006b50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800637e:	609a      	str	r2, [r3, #8]
      break;
 8006380:	e03c      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800638e:	461a      	mov	r2, r3
 8006390:	f000 fb62 	bl	8006a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2150      	movs	r1, #80	@ 0x50
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fbbb 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80063a0:	e02c      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ae:	461a      	mov	r2, r3
 80063b0:	f000 fb81 	bl	8006ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2160      	movs	r1, #96	@ 0x60
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fbab 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80063c0:	e01c      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	461a      	mov	r2, r3
 80063d0:	f000 fb42 	bl	8006a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2140      	movs	r1, #64	@ 0x40
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fb9b 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80063e0:	e00c      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f000 fb92 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80063f2:	e003      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
      break;
 80063f8:	e000      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a30      	ldr	r2, [pc, #192]	@ (8006550 <TIM_Base_SetConfig+0xd4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_Base_SetConfig+0x20>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800649a:	d108      	bne.n	80064ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a27      	ldr	r2, [pc, #156]	@ (8006550 <TIM_Base_SetConfig+0xd4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00b      	beq.n	80064ce <TIM_Base_SetConfig+0x52>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064bc:	d007      	beq.n	80064ce <TIM_Base_SetConfig+0x52>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a24      	ldr	r2, [pc, #144]	@ (8006554 <TIM_Base_SetConfig+0xd8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_Base_SetConfig+0x52>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a23      	ldr	r2, [pc, #140]	@ (8006558 <TIM_Base_SetConfig+0xdc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d108      	bne.n	80064e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a12      	ldr	r2, [pc, #72]	@ (8006550 <TIM_Base_SetConfig+0xd4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_Base_SetConfig+0xa0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a11      	ldr	r2, [pc, #68]	@ (8006554 <TIM_Base_SetConfig+0xd8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_Base_SetConfig+0xa0>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a10      	ldr	r2, [pc, #64]	@ (8006558 <TIM_Base_SetConfig+0xdc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d103      	bne.n	8006524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b01      	cmp	r3, #1
 8006534:	d105      	bne.n	8006542 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f023 0201 	bic.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	611a      	str	r2, [r3, #16]
  }
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f023 0201 	bic.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0303 	bic.w	r3, r3, #3
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0302 	bic.w	r3, r3, #2
 80065a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a24      	ldr	r2, [pc, #144]	@ (8006648 <TIM_OC1_SetConfig+0xec>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <TIM_OC1_SetConfig+0x70>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a23      	ldr	r2, [pc, #140]	@ (800664c <TIM_OC1_SetConfig+0xf0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC1_SetConfig+0x70>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a22      	ldr	r2, [pc, #136]	@ (8006650 <TIM_OC1_SetConfig+0xf4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10c      	bne.n	80065e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0308 	bic.w	r3, r3, #8
 80065d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 0304 	bic.w	r3, r3, #4
 80065e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a17      	ldr	r2, [pc, #92]	@ (8006648 <TIM_OC1_SetConfig+0xec>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_OC1_SetConfig+0xa2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <TIM_OC1_SetConfig+0xf4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_OC1_SetConfig+0xa2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a14      	ldr	r2, [pc, #80]	@ (800664c <TIM_OC1_SetConfig+0xf0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d111      	bne.n	8006622 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800660c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	621a      	str	r2, [r3, #32]
}
 800663c:	bf00      	nop
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40012c00 	.word	0x40012c00
 800664c:	40014800 	.word	0x40014800
 8006650:	40014400 	.word	0x40014400

08006654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0320 	bic.w	r3, r3, #32
 80066a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a22      	ldr	r2, [pc, #136]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d10d      	bne.n	80066d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a19      	ldr	r2, [pc, #100]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_OC2_SetConfig+0x98>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <TIM_OC2_SetConfig+0xec>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC2_SetConfig+0x98>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a17      	ldr	r2, [pc, #92]	@ (8006744 <TIM_OC2_SetConfig+0xf0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d113      	bne.n	8006714 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800

08006748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0303 	bic.w	r3, r3, #3
 8006782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a21      	ldr	r2, [pc, #132]	@ (800682c <TIM_OC3_SetConfig+0xe4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10d      	bne.n	80067c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a18      	ldr	r2, [pc, #96]	@ (800682c <TIM_OC3_SetConfig+0xe4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d007      	beq.n	80067de <TIM_OC3_SetConfig+0x96>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <TIM_OC3_SetConfig+0xe8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_OC3_SetConfig+0x96>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <TIM_OC3_SetConfig+0xec>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d113      	bne.n	8006806 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	621a      	str	r2, [r3, #32]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	031b      	lsls	r3, r3, #12
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <TIM_OC4_SetConfig+0xb0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_OC4_SetConfig+0x74>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a13      	ldr	r2, [pc, #76]	@ (80068ec <TIM_OC4_SetConfig+0xb4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC4_SetConfig+0x74>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a12      	ldr	r2, [pc, #72]	@ (80068f0 <TIM_OC4_SetConfig+0xb8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d109      	bne.n	80068c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	019b      	lsls	r3, r3, #6
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800

080068f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a13      	ldr	r2, [pc, #76]	@ (8006998 <TIM_OC5_SetConfig+0xa4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_OC5_SetConfig+0x6a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a12      	ldr	r2, [pc, #72]	@ (800699c <TIM_OC5_SetConfig+0xa8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_OC5_SetConfig+0x6a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a11      	ldr	r2, [pc, #68]	@ (80069a0 <TIM_OC5_SetConfig+0xac>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d109      	bne.n	8006972 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	621a      	str	r2, [r3, #32]
}
 800698c:	bf00      	nop
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800

080069a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	051b      	lsls	r3, r3, #20
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a14      	ldr	r2, [pc, #80]	@ (8006a4c <TIM_OC6_SetConfig+0xa8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC6_SetConfig+0x6c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a13      	ldr	r2, [pc, #76]	@ (8006a50 <TIM_OC6_SetConfig+0xac>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC6_SetConfig+0x6c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a12      	ldr	r2, [pc, #72]	@ (8006a54 <TIM_OC6_SetConfig+0xb0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d109      	bne.n	8006a24 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40014800 	.word	0x40014800

08006a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 030a 	bic.w	r3, r3, #10
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f023 0210 	bic.w	r2, r3, #16
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006af2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f043 0307 	orr.w	r3, r3, #7
 8006b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	021a      	lsls	r2, r3, #8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	431a      	orrs	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	609a      	str	r2, [r3, #8]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e04a      	b.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a12      	ldr	r2, [pc, #72]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c10:	d10c      	bne.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40012c00 	.word	0x40012c00

08006c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_GetUSARTClockSource>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4013      	ands	r3, r2
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_GetLPUARTClockSource>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4013      	ands	r3, r2
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e042      	b.n	8006d64 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fa fa83 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	@ 0x24
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fe40 	bl	800799c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc15 	bl	800754c <UART_SetConfig>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e01b      	b.n	8006d64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 febf 	bl	8007ae0 <UART_CheckIdleState>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d17b      	bne.n	8006e7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_UART_Transmit+0x26>
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e074      	b.n	8006e80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2221      	movs	r2, #33	@ 0x21
 8006da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da6:	f7fa fefb 	bl	8001ba0 <HAL_GetTick>
 8006daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc4:	d108      	bne.n	8006dd8 <HAL_UART_Transmit+0x6c>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	e003      	b.n	8006de0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006de0:	e030      	b.n	8006e44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2200      	movs	r2, #0
 8006dea:	2180      	movs	r1, #128	@ 0x80
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 ff21 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e03d      	b.n	8006e80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e007      	b.n	8006e32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1c8      	bne.n	8006de2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2200      	movs	r2, #0
 8006e58:	2140      	movs	r1, #64	@ 0x40
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 feea 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e006      	b.n	8006e80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006eae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006eb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d11b      	bne.n	8006efc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d015      	beq.n	8006efc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d105      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8300 	beq.w	80074f2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
      }
      return;
 8006efa:	e2fa      	b.n	80074f2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8123 	beq.w	800714c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007140 <HAL_UART_IRQHandler+0x2b8>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f16:	4b8b      	ldr	r3, [pc, #556]	@ (8007144 <HAL_UART_IRQHandler+0x2bc>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8116 	beq.w	800714c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d011      	beq.n	8006f50 <HAL_UART_IRQHandler+0xc8>
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f46:	f043 0201 	orr.w	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d011      	beq.n	8006f80 <HAL_UART_IRQHandler+0xf8>
 8006f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f76:	f043 0204 	orr.w	r2, r3, #4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d011      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x128>
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa6:	f043 0202 	orr.w	r2, r3, #2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d017      	beq.n	8006fec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8007140 <HAL_UART_IRQHandler+0x2b8>)
 8006fce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00b      	beq.n	8006fec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe2:	f043 0208 	orr.w	r2, r3, #8
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d012      	beq.n	800701e <HAL_UART_IRQHandler+0x196>
 8006ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00c      	beq.n	800701e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800700c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007014:	f043 0220 	orr.w	r2, r3, #32
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8266 	beq.w	80074f6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d013      	beq.n	800705e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d007      	beq.n	800705e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007064:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	d005      	beq.n	8007082 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800707a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800707e:	2b00      	cmp	r3, #0
 8007080:	d054      	beq.n	800712c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fe43 	bl	8007d0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007092:	2b40      	cmp	r3, #64	@ 0x40
 8007094:	d146      	bne.n	8007124 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1d9      	bne.n	8007096 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d017      	beq.n	800711c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_UART_IRQHandler+0x2c0>)
 80070f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fc f88f 	bl	8003220 <HAL_DMA_Abort_IT>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d019      	beq.n	800713c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007116:	4610      	mov	r0, r2
 8007118:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711a:	e00f      	b.n	800713c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9ff 	bl	8007520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007122:	e00b      	b.n	800713c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9fb 	bl	8007520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712a:	e007      	b.n	800713c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9f7 	bl	8007520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800713a:	e1dc      	b.n	80074f6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	bf00      	nop
    return;
 800713e:	e1da      	b.n	80074f6 <HAL_UART_IRQHandler+0x66e>
 8007140:	10000001 	.word	0x10000001
 8007144:	04000120 	.word	0x04000120
 8007148:	08007ddb 	.word	0x08007ddb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007150:	2b01      	cmp	r3, #1
 8007152:	f040 8170 	bne.w	8007436 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8169 	beq.w	8007436 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8162 	beq.w	8007436 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2210      	movs	r2, #16
 8007178:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	f040 80d8 	bne.w	800733a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80af 	beq.w	8007300 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ac:	429a      	cmp	r2, r3
 80071ae:	f080 80a7 	bcs.w	8007300 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 8087 	bne.w	80072de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007206:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1da      	bne.n	80071d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800722a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3308      	adds	r3, #8
 800723a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800723e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007242:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007246:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e1      	bne.n	800721a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3308      	adds	r3, #8
 800725c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800726c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800727a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800727c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007280:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e3      	bne.n	8007256 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ac:	f023 0310 	bic.w	r3, r3, #16
 80072b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e4      	bne.n	800729c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fb ff42 	bl	8003162 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f91b 	bl	8007534 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80072fe:	e0fc      	b.n	80074fa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800730a:	429a      	cmp	r2, r3
 800730c:	f040 80f5 	bne.w	80074fa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b20      	cmp	r3, #32
 8007320:	f040 80eb 	bne.w	80074fa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8fe 	bl	8007534 <HAL_UARTEx_RxEventCallback>
      return;
 8007338:	e0df      	b.n	80074fa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007346:	b29b      	uxth	r3, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80d1 	beq.w	80074fe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800735c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80cc 	beq.w	80074fe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800737a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007388:	647b      	str	r3, [r7, #68]	@ 0x44
 800738a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800738e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e4      	bne.n	8007366 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3308      	adds	r3, #8
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	623b      	str	r3, [r7, #32]
   return(result);
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80073c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e1      	bne.n	800739c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f023 0310 	bic.w	r3, r3, #16
 8007400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800740e:	61fb      	str	r3, [r7, #28]
 8007410:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	69b9      	ldr	r1, [r7, #24]
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	617b      	str	r3, [r7, #20]
   return(result);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e4      	bne.n	80073ec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f880 	bl	8007534 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007434:	e063      	b.n	80074fe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00e      	beq.n	8007460 <HAL_UART_IRQHandler+0x5d8>
 8007442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d008      	beq.n	8007460 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fcff 	bl	8007e5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800745e:	e051      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d014      	beq.n	8007496 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800747c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007488:	2b00      	cmp	r3, #0
 800748a:	d03a      	beq.n	8007502 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
    }
    return;
 8007494:	e035      	b.n	8007502 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <HAL_UART_IRQHandler+0x62e>
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fca9 	bl	8007e06 <UART_EndTransmit_IT>
    return;
 80074b4:	e026      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d009      	beq.n	80074d6 <HAL_UART_IRQHandler+0x64e>
 80074c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fcd8 	bl	8007e84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074d4:	e016      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d010      	beq.n	8007504 <HAL_UART_IRQHandler+0x67c>
 80074e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da0c      	bge.n	8007504 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fcc0 	bl	8007e70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074f0:	e008      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
      return;
 80074f2:	bf00      	nop
 80074f4:	e006      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
    return;
 80074f6:	bf00      	nop
 80074f8:	e004      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
      return;
 80074fa:	bf00      	nop
 80074fc:	e002      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
      return;
 80074fe:	bf00      	nop
 8007500:	e000      	b.n	8007504 <HAL_UART_IRQHandler+0x67c>
    return;
 8007502:	bf00      	nop
  }
}
 8007504:	37e8      	adds	r7, #232	@ 0xe8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop

0800750c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800754c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007550:	b08c      	sub	sp, #48	@ 0x30
 8007552:	af00      	add	r7, sp, #0
 8007554:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	431a      	orrs	r2, r3
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	431a      	orrs	r2, r3
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	4313      	orrs	r3, r2
 8007572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4baf      	ldr	r3, [pc, #700]	@ (8007838 <UART_SetConfig+0x2ec>)
 800757c:	4013      	ands	r3, r2
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007584:	430b      	orrs	r3, r1
 8007586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	68da      	ldr	r2, [r3, #12]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4aa4      	ldr	r2, [pc, #656]	@ (800783c <UART_SetConfig+0x2f0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b4:	4313      	orrs	r3, r2
 80075b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80075c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	f023 010f 	bic.w	r1, r3, #15
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a95      	ldr	r2, [pc, #596]	@ (8007840 <UART_SetConfig+0x2f4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d125      	bne.n	800763c <UART_SetConfig+0xf0>
 80075f0:	2003      	movs	r0, #3
 80075f2:	f7ff fb4b 	bl	8006c8c <LL_RCC_GetUSARTClockSource>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d81b      	bhi.n	8007634 <UART_SetConfig+0xe8>
 80075fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <UART_SetConfig+0xb8>)
 80075fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007602:	bf00      	nop
 8007604:	08007615 	.word	0x08007615
 8007608:	08007625 	.word	0x08007625
 800760c:	0800761d 	.word	0x0800761d
 8007610:	0800762d 	.word	0x0800762d
 8007614:	2301      	movs	r3, #1
 8007616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800761a:	e042      	b.n	80076a2 <UART_SetConfig+0x156>
 800761c:	2302      	movs	r3, #2
 800761e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007622:	e03e      	b.n	80076a2 <UART_SetConfig+0x156>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800762a:	e03a      	b.n	80076a2 <UART_SetConfig+0x156>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007632:	e036      	b.n	80076a2 <UART_SetConfig+0x156>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763a:	e032      	b.n	80076a2 <UART_SetConfig+0x156>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a7e      	ldr	r2, [pc, #504]	@ (800783c <UART_SetConfig+0x2f0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d12a      	bne.n	800769c <UART_SetConfig+0x150>
 8007646:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800764a:	f7ff fb2f 	bl	8006cac <LL_RCC_GetLPUARTClockSource>
 800764e:	4603      	mov	r3, r0
 8007650:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007654:	d01a      	beq.n	800768c <UART_SetConfig+0x140>
 8007656:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800765a:	d81b      	bhi.n	8007694 <UART_SetConfig+0x148>
 800765c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007660:	d00c      	beq.n	800767c <UART_SetConfig+0x130>
 8007662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007666:	d815      	bhi.n	8007694 <UART_SetConfig+0x148>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <UART_SetConfig+0x128>
 800766c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007670:	d008      	beq.n	8007684 <UART_SetConfig+0x138>
 8007672:	e00f      	b.n	8007694 <UART_SetConfig+0x148>
 8007674:	2300      	movs	r3, #0
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767a:	e012      	b.n	80076a2 <UART_SetConfig+0x156>
 800767c:	2302      	movs	r3, #2
 800767e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007682:	e00e      	b.n	80076a2 <UART_SetConfig+0x156>
 8007684:	2304      	movs	r3, #4
 8007686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768a:	e00a      	b.n	80076a2 <UART_SetConfig+0x156>
 800768c:	2308      	movs	r3, #8
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007692:	e006      	b.n	80076a2 <UART_SetConfig+0x156>
 8007694:	2310      	movs	r3, #16
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800769a:	e002      	b.n	80076a2 <UART_SetConfig+0x156>
 800769c:	2310      	movs	r3, #16
 800769e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a65      	ldr	r2, [pc, #404]	@ (800783c <UART_SetConfig+0x2f0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	f040 8097 	bne.w	80077dc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d823      	bhi.n	80076fe <UART_SetConfig+0x1b2>
 80076b6:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <UART_SetConfig+0x170>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076ff 	.word	0x080076ff
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	080076ff 	.word	0x080076ff
 80076cc:	080076ef 	.word	0x080076ef
 80076d0:	080076ff 	.word	0x080076ff
 80076d4:	080076ff 	.word	0x080076ff
 80076d8:	080076ff 	.word	0x080076ff
 80076dc:	080076f7 	.word	0x080076f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e0:	f7fd fbac 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 80076e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076e6:	e010      	b.n	800770a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e8:	4b56      	ldr	r3, [pc, #344]	@ (8007844 <UART_SetConfig+0x2f8>)
 80076ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076ec:	e00d      	b.n	800770a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ee:	f7fd fb25 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 80076f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076f4:	e009      	b.n	800770a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076fc:	e005      	b.n	800770a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 812b 	beq.w	8007968 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	4a4c      	ldr	r2, [pc, #304]	@ (8007848 <UART_SetConfig+0x2fc>)
 8007718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771c:	461a      	mov	r2, r3
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	fbb3 f3f2 	udiv	r3, r3, r2
 8007724:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4413      	add	r3, r2
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	429a      	cmp	r2, r3
 8007734:	d305      	bcc.n	8007742 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	429a      	cmp	r2, r3
 8007740:	d903      	bls.n	800774a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007748:	e10e      	b.n	8007968 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	2200      	movs	r2, #0
 800774e:	60bb      	str	r3, [r7, #8]
 8007750:	60fa      	str	r2, [r7, #12]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007756:	4a3c      	ldr	r2, [pc, #240]	@ (8007848 <UART_SetConfig+0x2fc>)
 8007758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800775c:	b29b      	uxth	r3, r3
 800775e:	2200      	movs	r2, #0
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800776c:	f7f8 fd58 	bl	8000220 <__aeabi_uldivmod>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	020b      	lsls	r3, r1, #8
 8007782:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007786:	0202      	lsls	r2, r0, #8
 8007788:	6979      	ldr	r1, [r7, #20]
 800778a:	6849      	ldr	r1, [r1, #4]
 800778c:	0849      	lsrs	r1, r1, #1
 800778e:	2000      	movs	r0, #0
 8007790:	460c      	mov	r4, r1
 8007792:	4605      	mov	r5, r0
 8007794:	eb12 0804 	adds.w	r8, r2, r4
 8007798:	eb43 0905 	adc.w	r9, r3, r5
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	469a      	mov	sl, r3
 80077a4:	4693      	mov	fp, r2
 80077a6:	4652      	mov	r2, sl
 80077a8:	465b      	mov	r3, fp
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f8 fd37 	bl	8000220 <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4613      	mov	r3, r2
 80077b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077c0:	d308      	bcc.n	80077d4 <UART_SetConfig+0x288>
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077c8:	d204      	bcs.n	80077d4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a3a      	ldr	r2, [r7, #32]
 80077d0:	60da      	str	r2, [r3, #12]
 80077d2:	e0c9      	b.n	8007968 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077da:	e0c5      	b.n	8007968 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e4:	d16d      	bne.n	80078c2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80077e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b07      	cmp	r3, #7
 80077ee:	d82d      	bhi.n	800784c <UART_SetConfig+0x300>
 80077f0:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x2ac>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007819 	.word	0x08007819
 80077fc:	08007821 	.word	0x08007821
 8007800:	0800784d 	.word	0x0800784d
 8007804:	08007827 	.word	0x08007827
 8007808:	0800784d 	.word	0x0800784d
 800780c:	0800784d 	.word	0x0800784d
 8007810:	0800784d 	.word	0x0800784d
 8007814:	0800782f 	.word	0x0800782f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007818:	f7fd fb26 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 800781c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800781e:	e01b      	b.n	8007858 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007820:	4b08      	ldr	r3, [pc, #32]	@ (8007844 <UART_SetConfig+0x2f8>)
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007824:	e018      	b.n	8007858 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007826:	f7fd fa89 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 800782a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800782c:	e014      	b.n	8007858 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007834:	e010      	b.n	8007858 <UART_SetConfig+0x30c>
 8007836:	bf00      	nop
 8007838:	cfff69f3 	.word	0xcfff69f3
 800783c:	40008000 	.word	0x40008000
 8007840:	40013800 	.word	0x40013800
 8007844:	00f42400 	.word	0x00f42400
 8007848:	08009acc 	.word	0x08009acc
      default:
        pclk = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8084 	beq.w	8007968 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	4a4b      	ldr	r2, [pc, #300]	@ (8007994 <UART_SetConfig+0x448>)
 8007866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786a:	461a      	mov	r2, r3
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007872:	005a      	lsls	r2, r3, #1
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	441a      	add	r2, r3
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	fbb2 f3f3 	udiv	r3, r2, r3
 8007884:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	2b0f      	cmp	r3, #15
 800788a:	d916      	bls.n	80078ba <UART_SetConfig+0x36e>
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007892:	d212      	bcs.n	80078ba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f023 030f 	bic.w	r3, r3, #15
 800789c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	8bfb      	ldrh	r3, [r7, #30]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	8bfa      	ldrh	r2, [r7, #30]
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	e056      	b.n	8007968 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078c0:	e052      	b.n	8007968 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2b07      	cmp	r3, #7
 80078ca:	d822      	bhi.n	8007912 <UART_SetConfig+0x3c6>
 80078cc:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <UART_SetConfig+0x388>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078f5 	.word	0x080078f5
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	08007913 	.word	0x08007913
 80078e0:	08007903 	.word	0x08007903
 80078e4:	08007913 	.word	0x08007913
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007913 	.word	0x08007913
 80078f0:	0800790b 	.word	0x0800790b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078f4:	f7fd fab8 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 80078f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078fa:	e010      	b.n	800791e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078fc:	4b26      	ldr	r3, [pc, #152]	@ (8007998 <UART_SetConfig+0x44c>)
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007900:	e00d      	b.n	800791e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007902:	f7fd fa1b 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8007906:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007908:	e009      	b.n	800791e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800790a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007910:	e005      	b.n	800791e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800791c:	bf00      	nop
    }

    if (pclk != 0U)
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d021      	beq.n	8007968 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007928:	4a1a      	ldr	r2, [pc, #104]	@ (8007994 <UART_SetConfig+0x448>)
 800792a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800792e:	461a      	mov	r2, r3
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	fbb3 f2f2 	udiv	r2, r3, r2
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	085b      	lsrs	r3, r3, #1
 800793c:	441a      	add	r2, r3
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	d909      	bls.n	8007962 <UART_SetConfig+0x416>
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007954:	d205      	bcs.n	8007962 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	b29a      	uxth	r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60da      	str	r2, [r3, #12]
 8007960:	e002      	b.n	8007968 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2201      	movs	r2, #1
 800796c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2201      	movs	r2, #1
 8007974:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2200      	movs	r2, #0
 8007982:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007984:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007988:	4618      	mov	r0, r3
 800798a:	3730      	adds	r7, #48	@ 0x30
 800798c:	46bd      	mov	sp, r7
 800798e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007992:	bf00      	nop
 8007994:	08009acc 	.word	0x08009acc
 8007998:	00f42400 	.word	0x00f42400

0800799c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01a      	beq.n	8007ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a9a:	d10a      	bne.n	8007ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	605a      	str	r2, [r3, #4]
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b098      	sub	sp, #96	@ 0x60
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af0:	f7fa f856 	bl	8001ba0 <HAL_GetTick>
 8007af4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d12f      	bne.n	8007b64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f88e 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d022      	beq.n	8007b64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e6      	bne.n	8007b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e063      	b.n	8007c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0304 	and.w	r3, r3, #4
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d149      	bne.n	8007c06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f857 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d03c      	beq.n	8007c06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	623b      	str	r3, [r7, #32]
   return(result);
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e6      	bne.n	8007b8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bde:	61fa      	str	r2, [r7, #28]
 8007be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	69b9      	ldr	r1, [r7, #24]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	617b      	str	r3, [r7, #20]
   return(result);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e5      	bne.n	8007bbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e012      	b.n	8007c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3758      	adds	r7, #88	@ 0x58
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c44:	e04f      	b.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d04b      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7f9 ffa7 	bl	8001ba0 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e04e      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d037      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b80      	cmp	r3, #128	@ 0x80
 8007c7a:	d034      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b40      	cmp	r3, #64	@ 0x40
 8007c80:	d031      	beq.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d110      	bne.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2208      	movs	r2, #8
 8007c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f838 	bl	8007d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e029      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc0:	d111      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f81e 	bl	8007d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e00f      	b.n	8007d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69da      	ldr	r2, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	bf0c      	ite	eq
 8007cf6:	2301      	moveq	r3, #1
 8007cf8:	2300      	movne	r3, #0
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	79fb      	ldrb	r3, [r7, #7]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d0a0      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b095      	sub	sp, #84	@ 0x54
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d5e:	f023 0301 	bic.w	r3, r3, #1
 8007d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e3      	bne.n	8007d48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d118      	bne.n	8007dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f023 0310 	bic.w	r3, r3, #16
 8007d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6979      	ldr	r1, [r7, #20]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	613b      	str	r3, [r7, #16]
   return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e6      	bne.n	8007d88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007dce:	bf00      	nop
 8007dd0:	3754      	adds	r7, #84	@ 0x54
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fb91 	bl	8007520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b088      	sub	sp, #32
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e6      	bne.n	8007e0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fb5c 	bl	800750c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e54:	bf00      	nop
 8007e56:	3720      	adds	r7, #32
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d101      	bne.n	8007eae <HAL_UARTEx_DisableFifoMode+0x16>
 8007eaa:	2302      	movs	r3, #2
 8007eac:	e027      	b.n	8007efe <HAL_UARTEx_DisableFifoMode+0x66>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2224      	movs	r2, #36	@ 0x24
 8007eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0201 	bic.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007edc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e02d      	b.n	8007f7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	@ 0x24
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f850 	bl	8008004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d101      	bne.n	8007f9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e02d      	b.n	8007ffa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2224      	movs	r2, #36	@ 0x24
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f812 	bl	8008004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008010:	2b00      	cmp	r3, #0
 8008012:	d108      	bne.n	8008026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008024:	e031      	b.n	800808a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008026:	2308      	movs	r3, #8
 8008028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800802a:	2308      	movs	r3, #8
 800802c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	0e5b      	lsrs	r3, r3, #25
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	0f5b      	lsrs	r3, r3, #29
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	7b3a      	ldrb	r2, [r7, #12]
 8008052:	4911      	ldr	r1, [pc, #68]	@ (8008098 <UARTEx_SetNbDataToProcess+0x94>)
 8008054:	5c8a      	ldrb	r2, [r1, r2]
 8008056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800805a:	7b3a      	ldrb	r2, [r7, #12]
 800805c:	490f      	ldr	r1, [pc, #60]	@ (800809c <UARTEx_SetNbDataToProcess+0x98>)
 800805e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008060:	fb93 f3f2 	sdiv	r3, r3, r2
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	7b7a      	ldrb	r2, [r7, #13]
 8008070:	4909      	ldr	r1, [pc, #36]	@ (8008098 <UARTEx_SetNbDataToProcess+0x94>)
 8008072:	5c8a      	ldrb	r2, [r1, r2]
 8008074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008078:	7b7a      	ldrb	r2, [r7, #13]
 800807a:	4908      	ldr	r1, [pc, #32]	@ (800809c <UARTEx_SetNbDataToProcess+0x98>)
 800807c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800807e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	08009ae4 	.word	0x08009ae4
 800809c:	08009aec 	.word	0x08009aec

080080a0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80080aa:	4b0f      	ldr	r3, [pc, #60]	@ (80080e8 <OTP_Read+0x48>)
 80080ac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80080ae:	e002      	b.n	80080b6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3b08      	subs	r3, #8
 80080b4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3307      	adds	r3, #7
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	79fa      	ldrb	r2, [r7, #7]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d003      	beq.n	80080ca <OTP_Read+0x2a>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a09      	ldr	r2, [pc, #36]	@ (80080ec <OTP_Read+0x4c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d1f2      	bne.n	80080b0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3307      	adds	r3, #7
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	79fa      	ldrb	r2, [r7, #7]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d001      	beq.n	80080da <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80080da:	68fb      	ldr	r3, [r7, #12]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	1fff73f8 	.word	0x1fff73f8
 80080ec:	1fff7000 	.word	0x1fff7000

080080f0 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f8:	f3ef 8310 	mrs	r3, PRIMASK
 80080fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80080fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008102:	b672      	cpsid	i
}
 8008104:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d102      	bne.n	8008116 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
 8008114:	e001      	b.n	800811a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f383 8810 	msr	PRIMASK, r3
}
 8008124:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800813e:	f3ef 8310 	mrs	r3, PRIMASK
 8008142:	60fb      	str	r3, [r7, #12]
  return(result);
 8008144:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008148:	b672      	cpsid	i
}
 800814a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f383 8810 	msr	PRIMASK, r3
}
 8008172:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008174:	bf00      	nop
 8008176:	371c      	adds	r7, #28
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008188:	f3ef 8310 	mrs	r3, PRIMASK
 800818c:	60fb      	str	r3, [r7, #12]
  return(result);
 800818e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008192:	b672      	cpsid	i
}
 8008194:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6812      	ldr	r2, [r2, #0]
 800819e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6852      	ldr	r2, [r2, #4]
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f383 8810 	msr	PRIMASK, r3
}
 80081b4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081cc:	f3ef 8310 	mrs	r3, PRIMASK
 80081d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80081d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80081d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80081d6:	b672      	cpsid	i
}
 80081d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff ffca 	bl	8008180 <LST_remove_node>
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f383 8810 	msr	PRIMASK, r3
}
 80081f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80081f8:	bf00      	nop
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008206:	e01c      	b.n	8008242 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008208:	1d3b      	adds	r3, r7, #4
 800820a:	4619      	mov	r1, r3
 800820c:	4812      	ldr	r0, [pc, #72]	@ (8008258 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800820e:	f7ff ffd8 	bl	80081c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7a5b      	ldrb	r3, [r3, #9]
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d003      	beq.n	8008222 <HW_IPCC_BLE_RxEvtNot+0x22>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7a5b      	ldrb	r3, [r3, #9]
 800821e:	2b0e      	cmp	r3, #14
 8008220:	d105      	bne.n	800822e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4619      	mov	r1, r3
 8008226:	2002      	movs	r0, #2
 8008228:	f000 f8d2 	bl	80083d0 <OutputDbgTrace>
 800822c:	e004      	b.n	8008238 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4619      	mov	r1, r3
 8008232:	2003      	movs	r0, #3
 8008234:	f000 f8cc 	bl	80083d0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008238:	4b08      	ldr	r3, [pc, #32]	@ (800825c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	4610      	mov	r0, r2
 8008240:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008242:	4805      	ldr	r0, [pc, #20]	@ (8008258 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008244:	f7ff ff54 	bl	80080f0 <LST_is_empty>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0dc      	beq.n	8008208 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800824e:	bf00      	nop
}
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200300c8 	.word	0x200300c8
 800825c:	200003b8 	.word	0x200003b8

08008260 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008264:	4b02      	ldr	r3, [pc, #8]	@ (8008270 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4798      	blx	r3

  return;
 800826a:	bf00      	nop
}
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200003bc 	.word	0x200003bc

08008274 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008278:	4b07      	ldr	r3, [pc, #28]	@ (8008298 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4619      	mov	r1, r3
 8008280:	2005      	movs	r0, #5
 8008282:	f000 f8a5 	bl	80083d0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008286:	4b05      	ldr	r3, [pc, #20]	@ (800829c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a03      	ldr	r2, [pc, #12]	@ (8008298 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800828c:	68d2      	ldr	r2, [r2, #12]
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3

  return;
 8008294:	bf00      	nop
}
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20030000 	.word	0x20030000
 800829c:	200003c0 	.word	0x200003c0

080082a0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80082a6:	e00e      	b.n	80082c6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	480b      	ldr	r0, [pc, #44]	@ (80082dc <HW_IPCC_SYS_EvtNot+0x3c>)
 80082ae:	f7ff ff88 	bl	80081c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4619      	mov	r1, r3
 80082b6:	2006      	movs	r0, #6
 80082b8:	f000 f88a 	bl	80083d0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80082bc:	4b08      	ldr	r3, [pc, #32]	@ (80082e0 <HW_IPCC_SYS_EvtNot+0x40>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4610      	mov	r0, r2
 80082c4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80082c6:	4805      	ldr	r0, [pc, #20]	@ (80082dc <HW_IPCC_SYS_EvtNot+0x3c>)
 80082c8:	f7ff ff12 	bl	80080f0 <LST_is_empty>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0ea      	beq.n	80082a8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80082d2:	bf00      	nop
}
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200300d0 	.word	0x200300d0
 80082e0:	200003c4 	.word	0x200003c4

080082e4 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:
  return;
}

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 80082e8:	4b03      	ldr	r3, [pc, #12]	@ (80082f8 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 f8c4 	bl	800847c <TL_ZIGBEE_CmdEvtReceived>

  return;
 80082f4:	bf00      	nop
}
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20030000 	.word	0x20030000

080082fc <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8008300:	4b03      	ldr	r3, [pc, #12]	@ (8008310 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f000 f8c2 	bl	8008490 <TL_ZIGBEE_NotReceived>

  return;
 800830c:	bf00      	nop
}
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20030000 	.word	0x20030000

08008314 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:
  return;
}

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8008318:	4b03      	ldr	r3, [pc, #12]	@ (8008328 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f8de 	bl	80084e0 <TL_ZIGBEE_M0RequestReceived>

  return;
 8008324:	bf00      	nop
}
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20030000 	.word	0x20030000

0800832c <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4807      	ldr	r0, [pc, #28]	@ (8008354 <TL_MM_EvtDone+0x28>)
 8008338:	f7ff fefc 	bl	8008134 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	2000      	movs	r0, #0
 8008340:	f000 f846 	bl	80083d0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008344:	4804      	ldr	r0, [pc, #16]	@ (8008358 <TL_MM_EvtDone+0x2c>)
 8008346:	f000 fa51 	bl	80087ec <HW_IPCC_MM_SendFreeBuf>

  return;
 800834a:	bf00      	nop
}
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	200003b0 	.word	0x200003b0
 8008358:	0800835d 	.word	0x0800835d

0800835c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008362:	e00c      	b.n	800837e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008364:	1d3b      	adds	r3, r7, #4
 8008366:	4619      	mov	r1, r3
 8008368:	480a      	ldr	r0, [pc, #40]	@ (8008394 <SendFreeBuf+0x38>)
 800836a:	f7ff ff2a 	bl	80081c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800836e:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <SendFreeBuf+0x3c>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fedb 	bl	8008134 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800837e:	4805      	ldr	r0, [pc, #20]	@ (8008394 <SendFreeBuf+0x38>)
 8008380:	f7ff feb6 	bl	80080f0 <LST_is_empty>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0ec      	beq.n	8008364 <SendFreeBuf+0x8>
  }

  return;
 800838a:	bf00      	nop
}
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200003b0 	.word	0x200003b0
 8008398:	20030000 	.word	0x20030000

0800839c <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80083a2:	e008      	b.n	80083b6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80083a4:	1d3b      	adds	r3, r7, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4808      	ldr	r0, [pc, #32]	@ (80083cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80083aa:	f7ff ff0a 	bl	80081c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7f8 f929 	bl	8000608 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80083b6:	4805      	ldr	r0, [pc, #20]	@ (80083cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80083b8:	f7ff fe9a 	bl	80080f0 <LST_is_empty>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80083c2:	bf00      	nop
}
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	200300c0 	.word	0x200300c0

080083d0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b06      	cmp	r3, #6
 80083e0:	d845      	bhi.n	800846e <OutputDbgTrace+0x9e>
 80083e2:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <OutputDbgTrace+0x18>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	08008405 	.word	0x08008405
 80083ec:	08008429 	.word	0x08008429
 80083f0:	0800842f 	.word	0x0800842f
 80083f4:	08008443 	.word	0x08008443
 80083f8:	0800844f 	.word	0x0800844f
 80083fc:	08008455 	.word	0x08008455
 8008400:	08008463 	.word	0x08008463
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	7a5b      	ldrb	r3, [r3, #9]
 800840c:	2bff      	cmp	r3, #255	@ 0xff
 800840e:	d005      	beq.n	800841c <OutputDbgTrace+0x4c>
 8008410:	2bff      	cmp	r3, #255	@ 0xff
 8008412:	dc05      	bgt.n	8008420 <OutputDbgTrace+0x50>
 8008414:	2b0e      	cmp	r3, #14
 8008416:	d005      	beq.n	8008424 <OutputDbgTrace+0x54>
 8008418:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800841a:	e001      	b.n	8008420 <OutputDbgTrace+0x50>
          break;
 800841c:	bf00      	nop
 800841e:	e027      	b.n	8008470 <OutputDbgTrace+0xa0>
          break;
 8008420:	bf00      	nop
 8008422:	e025      	b.n	8008470 <OutputDbgTrace+0xa0>
          break;
 8008424:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008426:	e023      	b.n	8008470 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800842c:	e020      	b.n	8008470 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	7a5b      	ldrb	r3, [r3, #9]
 8008436:	2b0e      	cmp	r3, #14
 8008438:	d001      	beq.n	800843e <OutputDbgTrace+0x6e>
 800843a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800843c:	e000      	b.n	8008440 <OutputDbgTrace+0x70>
          break;
 800843e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008440:	e016      	b.n	8008470 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	7a5b      	ldrb	r3, [r3, #9]
 800844a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800844c:	e010      	b.n	8008470 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008452:	e00d      	b.n	8008470 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	7a5b      	ldrb	r3, [r3, #9]
 800845c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800845e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008460:	e006      	b.n	8008470 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	7a5b      	ldrb	r3, [r3, #9]
 800846a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800846c:	e000      	b.n	8008470 <OutputDbgTrace+0xa0>

    default:
      break;
 800846e:	bf00      	nop
  }

  return;
 8008470:	bf00      	nop
}
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8008484:	f000 f814 	bl	80084b0 <Receive_Ack_From_M0>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8008498:	4a04      	ldr	r2, [pc, #16]	@ (80084ac <TL_ZIGBEE_NotReceived+0x1c>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800849e:	f000 f80f 	bl	80084c0 <Receive_Notification_From_M0>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200003c8 	.word	0x200003c8

080084b0 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 80084b4:	2002      	movs	r0, #2
 80084b6:	f000 fa07 	bl	80088c8 <UTIL_SEQ_SetEvt>
}
 80084ba:	bf00      	nop
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 80084c4:	4b05      	ldr	r3, [pc, #20]	@ (80084dc <Receive_Notification_From_M0+0x1c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	4a04      	ldr	r2, [pc, #16]	@ (80084dc <Receive_Notification_From_M0+0x1c>)
 80084cc:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80084ce:	2100      	movs	r1, #0
 80084d0:	2001      	movs	r0, #1
 80084d2:	f000 f9cd 	bl	8008870 <UTIL_SEQ_SetTask>
}
 80084d6:	bf00      	nop
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200003d0 	.word	0x200003d0

080084e0 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 80084e8:	4a07      	ldr	r2, [pc, #28]	@ (8008508 <TL_ZIGBEE_M0RequestReceived+0x28>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 80084ee:	4b07      	ldr	r3, [pc, #28]	@ (800850c <TL_ZIGBEE_M0RequestReceived+0x2c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a05      	ldr	r2, [pc, #20]	@ (800850c <TL_ZIGBEE_M0RequestReceived+0x2c>)
 80084f6:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80084f8:	2100      	movs	r1, #0
 80084fa:	2002      	movs	r0, #2
 80084fc:	f000 f9b8 	bl	8008870 <UTIL_SEQ_SetTask>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	200003cc 	.word	0x200003cc
 800850c:	200003d4 	.word	0x200003d4

08008510 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	43db      	mvns	r3, r3
 8008524:	401a      	ands	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	041b      	lsls	r3, r3, #16
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	605a      	str	r2, [r3, #4]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	609a      	str	r2, [r3, #8]
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	041a      	lsls	r2, r3, #16
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	609a      	str	r2, [r3, #8]
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	4013      	ands	r3, r2
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d101      	bne.n	80085d2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e000      	b.n	80085d4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69da      	ldr	r2, [r3, #28]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	4013      	ands	r3, r2
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d101      	bne.n	80085fc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
	...

0800860c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008610:	2102      	movs	r1, #2
 8008612:	4828      	ldr	r0, [pc, #160]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008614:	f7ff ffe4 	bl	80085e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d008      	beq.n	8008630 <HW_IPCC_Rx_Handler+0x24>
 800861e:	4b25      	ldr	r3, [pc, #148]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800862a:	f000 f8af 	bl	800878c <HW_IPCC_SYS_EvtHandler>
 800862e:	e03e      	b.n	80086ae <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 8008630:	2104      	movs	r1, #4
 8008632:	4820      	ldr	r0, [pc, #128]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008634:	f7ff ffd4 	bl	80085e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <HW_IPCC_Rx_Handler+0x44>
 800863e:	4b1d      	ldr	r3, [pc, #116]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800864a:	f000 f8b7 	bl	80087bc <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800864e:	e02e      	b.n	80086ae <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 8008650:	2110      	movs	r1, #16
 8008652:	4818      	ldr	r0, [pc, #96]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008654:	f7ff ffc4 	bl	80085e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d008      	beq.n	8008670 <HW_IPCC_Rx_Handler+0x64>
 800865e:	4b15      	ldr	r3, [pc, #84]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800866a:	f000 f8b3 	bl	80087d4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800866e:	e01e      	b.n	80086ae <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008670:	2101      	movs	r1, #1
 8008672:	4810      	ldr	r0, [pc, #64]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008674:	f7ff ffb4 	bl	80085e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d008      	beq.n	8008690 <HW_IPCC_Rx_Handler+0x84>
 800867e:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800868a:	f000 f85b 	bl	8008744 <HW_IPCC_BLE_EvtHandler>
 800868e:	e00e      	b.n	80086ae <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008690:	2108      	movs	r1, #8
 8008692:	4808      	ldr	r0, [pc, #32]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 8008694:	f7ff ffa4 	bl	80085e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <HW_IPCC_Rx_Handler+0xa4>
 800869e:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <HW_IPCC_Rx_Handler+0xa8>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f003 0308 	and.w	r3, r3, #8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d102      	bne.n	80086b0 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 80086aa:	f000 f8d5 	bl	8008858 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
}
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	58000c00 	.word	0x58000c00

080086b8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80086bc:	2102      	movs	r1, #2
 80086be:	4820      	ldr	r0, [pc, #128]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 80086c0:	f7ff ff79 	bl	80085b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d107      	bne.n	80086da <HW_IPCC_Tx_Handler+0x22>
 80086ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80086d6:	f000 f84d 	bl	8008774 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 80086da:	2104      	movs	r1, #4
 80086dc:	4818      	ldr	r0, [pc, #96]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 80086de:	f7ff ff6a 	bl	80085b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d108      	bne.n	80086fa <HW_IPCC_Tx_Handler+0x42>
 80086e8:	4b15      	ldr	r3, [pc, #84]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 80086f4:	f000 f856 	bl	80087a4 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 80086f8:	e01e      	b.n	8008738 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80086fa:	2108      	movs	r1, #8
 80086fc:	4810      	ldr	r0, [pc, #64]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 80086fe:	f7ff ff5a 	bl	80085b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <HW_IPCC_Tx_Handler+0x62>
 8008708:	4b0d      	ldr	r3, [pc, #52]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008714:	f000 f88c 	bl	8008830 <HW_IPCC_MM_FreeBufHandler>
 8008718:	e00e      	b.n	8008738 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800871a:	2120      	movs	r1, #32
 800871c:	4808      	ldr	r0, [pc, #32]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 800871e:	f7ff ff4a 	bl	80085b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d108      	bne.n	800873a <HW_IPCC_Tx_Handler+0x82>
 8008728:	4b05      	ldr	r3, [pc, #20]	@ (8008740 <HW_IPCC_Tx_Handler+0x88>)
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008734:	f000 f812 	bl	800875c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008738:	bf00      	nop
 800873a:	bf00      	nop
}
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	58000c00 	.word	0x58000c00

08008744 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008748:	f7ff fd5a 	bl	8008200 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800874c:	2101      	movs	r1, #1
 800874e:	4802      	ldr	r0, [pc, #8]	@ (8008758 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008750:	f7ff ff14 	bl	800857c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008754:	bf00      	nop
}
 8008756:	bd80      	pop	{r7, pc}
 8008758:	58000c00 	.word	0x58000c00

0800875c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008760:	2120      	movs	r1, #32
 8008762:	4803      	ldr	r0, [pc, #12]	@ (8008770 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008764:	f7ff fee7 	bl	8008536 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008768:	f7ff fd7a 	bl	8008260 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800876c:	bf00      	nop
}
 800876e:	bd80      	pop	{r7, pc}
 8008770:	58000c00 	.word	0x58000c00

08008774 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008778:	2102      	movs	r1, #2
 800877a:	4803      	ldr	r0, [pc, #12]	@ (8008788 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800877c:	f7ff fedb 	bl	8008536 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008780:	f7ff fd78 	bl	8008274 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008784:	bf00      	nop
}
 8008786:	bd80      	pop	{r7, pc}
 8008788:	58000c00 	.word	0x58000c00

0800878c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008790:	f7ff fd86 	bl	80082a0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008794:	2102      	movs	r1, #2
 8008796:	4802      	ldr	r0, [pc, #8]	@ (80087a0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008798:	f7ff fef0 	bl	800857c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800879c:	bf00      	nop
}
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58000c00 	.word	0x58000c00

080087a4 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

  return;
}

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 80087a8:	2104      	movs	r1, #4
 80087aa:	4803      	ldr	r0, [pc, #12]	@ (80087b8 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 80087ac:	f7ff fec3 	bl	8008536 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 80087b0:	f7ff fd98 	bl	80082e4 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 80087b4:	bf00      	nop
}
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	58000c00 	.word	0x58000c00

080087bc <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 80087c0:	2104      	movs	r1, #4
 80087c2:	4803      	ldr	r0, [pc, #12]	@ (80087d0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 80087c4:	f7ff fec9 	bl	800855a <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 80087c8:	f7ff fd98 	bl	80082fc <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 80087cc:	bf00      	nop
}
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	58000c00 	.word	0x58000c00

080087d4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80087d8:	2110      	movs	r1, #16
 80087da:	4803      	ldr	r0, [pc, #12]	@ (80087e8 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 80087dc:	f7ff febd 	bl	800855a <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 80087e0:	f7ff fd98 	bl	8008314 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 80087e4:	bf00      	nop
}
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	58000c00 	.word	0x58000c00

080087ec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80087f4:	2108      	movs	r1, #8
 80087f6:	480c      	ldr	r0, [pc, #48]	@ (8008828 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80087f8:	f7ff fedd 	bl	80085b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008802:	4a0a      	ldr	r2, [pc, #40]	@ (800882c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008808:	2108      	movs	r1, #8
 800880a:	4807      	ldr	r0, [pc, #28]	@ (8008828 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800880c:	f7ff fe80 	bl	8008510 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008810:	e006      	b.n	8008820 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008816:	2108      	movs	r1, #8
 8008818:	4803      	ldr	r0, [pc, #12]	@ (8008828 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800881a:	f7ff febd 	bl	8008598 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800881e:	bf00      	nop
}
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	58000c00 	.word	0x58000c00
 800882c:	200003d8 	.word	0x200003d8

08008830 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008834:	2108      	movs	r1, #8
 8008836:	4806      	ldr	r0, [pc, #24]	@ (8008850 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008838:	f7ff fe7d 	bl	8008536 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800883c:	4b05      	ldr	r3, [pc, #20]	@ (8008854 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008842:	2108      	movs	r1, #8
 8008844:	4802      	ldr	r0, [pc, #8]	@ (8008850 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008846:	f7ff fea7 	bl	8008598 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800884a:	bf00      	nop
}
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	58000c00 	.word	0x58000c00
 8008854:	200003d8 	.word	0x200003d8

08008858 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800885c:	f7ff fd9e 	bl	800839c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008860:	2108      	movs	r1, #8
 8008862:	4802      	ldr	r0, [pc, #8]	@ (800886c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008864:	f7ff fe8a 	bl	800857c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008868:	bf00      	nop
}
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58000c00 	.word	0x58000c00

08008870 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800887a:	f3ef 8310 	mrs	r3, PRIMASK
 800887e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008880:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008882:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008884:	b672      	cpsid	i
}
 8008886:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008888:	4b0d      	ldr	r3, [pc, #52]	@ (80088c0 <UTIL_SEQ_SetTask+0x50>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4313      	orrs	r3, r2
 8008890:	4a0b      	ldr	r2, [pc, #44]	@ (80088c0 <UTIL_SEQ_SetTask+0x50>)
 8008892:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008894:	4a0b      	ldr	r2, [pc, #44]	@ (80088c4 <UTIL_SEQ_SetTask+0x54>)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	431a      	orrs	r2, r3
 80088a0:	4908      	ldr	r1, [pc, #32]	@ (80088c4 <UTIL_SEQ_SetTask+0x54>)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f383 8810 	msr	PRIMASK, r3
}
 80088b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088b4:	bf00      	nop
}
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	200003dc 	.word	0x200003dc
 80088c4:	200003e4 	.word	0x200003e4

080088c8 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d0:	f3ef 8310 	mrs	r3, PRIMASK
 80088d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80088d6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80088d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088da:	b672      	cpsid	i
}
 80088dc:	bf00      	nop

  EvtSet |= EvtId_bm;
 80088de:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <UTIL_SEQ_SetEvt+0x3c>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	4a07      	ldr	r2, [pc, #28]	@ (8008904 <UTIL_SEQ_SetEvt+0x3c>)
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f383 8810 	msr	PRIMASK, r3
}
 80088f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088f6:	bf00      	nop
}
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	200003e0 	.word	0x200003e0

08008908 <malloc>:
 8008908:	4b02      	ldr	r3, [pc, #8]	@ (8008914 <malloc+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f000 b825 	b.w	800895c <_malloc_r>
 8008912:	bf00      	nop
 8008914:	20000020 	.word	0x20000020

08008918 <sbrk_aligned>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4e0f      	ldr	r6, [pc, #60]	@ (8008958 <sbrk_aligned+0x40>)
 800891c:	460c      	mov	r4, r1
 800891e:	6831      	ldr	r1, [r6, #0]
 8008920:	4605      	mov	r5, r0
 8008922:	b911      	cbnz	r1, 800892a <sbrk_aligned+0x12>
 8008924:	f000 fba0 	bl	8009068 <_sbrk_r>
 8008928:	6030      	str	r0, [r6, #0]
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f000 fb9b 	bl	8009068 <_sbrk_r>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d103      	bne.n	800893e <sbrk_aligned+0x26>
 8008936:	f04f 34ff 	mov.w	r4, #4294967295
 800893a:	4620      	mov	r0, r4
 800893c:	bd70      	pop	{r4, r5, r6, pc}
 800893e:	1cc4      	adds	r4, r0, #3
 8008940:	f024 0403 	bic.w	r4, r4, #3
 8008944:	42a0      	cmp	r0, r4
 8008946:	d0f8      	beq.n	800893a <sbrk_aligned+0x22>
 8008948:	1a21      	subs	r1, r4, r0
 800894a:	4628      	mov	r0, r5
 800894c:	f000 fb8c 	bl	8009068 <_sbrk_r>
 8008950:	3001      	adds	r0, #1
 8008952:	d1f2      	bne.n	800893a <sbrk_aligned+0x22>
 8008954:	e7ef      	b.n	8008936 <sbrk_aligned+0x1e>
 8008956:	bf00      	nop
 8008958:	200003f4 	.word	0x200003f4

0800895c <_malloc_r>:
 800895c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008960:	1ccd      	adds	r5, r1, #3
 8008962:	f025 0503 	bic.w	r5, r5, #3
 8008966:	3508      	adds	r5, #8
 8008968:	2d0c      	cmp	r5, #12
 800896a:	bf38      	it	cc
 800896c:	250c      	movcc	r5, #12
 800896e:	2d00      	cmp	r5, #0
 8008970:	4606      	mov	r6, r0
 8008972:	db01      	blt.n	8008978 <_malloc_r+0x1c>
 8008974:	42a9      	cmp	r1, r5
 8008976:	d904      	bls.n	8008982 <_malloc_r+0x26>
 8008978:	230c      	movs	r3, #12
 800897a:	6033      	str	r3, [r6, #0]
 800897c:	2000      	movs	r0, #0
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a58 <_malloc_r+0xfc>
 8008986:	f000 f869 	bl	8008a5c <__malloc_lock>
 800898a:	f8d8 3000 	ldr.w	r3, [r8]
 800898e:	461c      	mov	r4, r3
 8008990:	bb44      	cbnz	r4, 80089e4 <_malloc_r+0x88>
 8008992:	4629      	mov	r1, r5
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff ffbf 	bl	8008918 <sbrk_aligned>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	4604      	mov	r4, r0
 800899e:	d158      	bne.n	8008a52 <_malloc_r+0xf6>
 80089a0:	f8d8 4000 	ldr.w	r4, [r8]
 80089a4:	4627      	mov	r7, r4
 80089a6:	2f00      	cmp	r7, #0
 80089a8:	d143      	bne.n	8008a32 <_malloc_r+0xd6>
 80089aa:	2c00      	cmp	r4, #0
 80089ac:	d04b      	beq.n	8008a46 <_malloc_r+0xea>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	4639      	mov	r1, r7
 80089b2:	4630      	mov	r0, r6
 80089b4:	eb04 0903 	add.w	r9, r4, r3
 80089b8:	f000 fb56 	bl	8009068 <_sbrk_r>
 80089bc:	4581      	cmp	r9, r0
 80089be:	d142      	bne.n	8008a46 <_malloc_r+0xea>
 80089c0:	6821      	ldr	r1, [r4, #0]
 80089c2:	1a6d      	subs	r5, r5, r1
 80089c4:	4629      	mov	r1, r5
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ffa6 	bl	8008918 <sbrk_aligned>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d03a      	beq.n	8008a46 <_malloc_r+0xea>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	442b      	add	r3, r5
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	f8d8 3000 	ldr.w	r3, [r8]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	bb62      	cbnz	r2, 8008a38 <_malloc_r+0xdc>
 80089de:	f8c8 7000 	str.w	r7, [r8]
 80089e2:	e00f      	b.n	8008a04 <_malloc_r+0xa8>
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	1b52      	subs	r2, r2, r5
 80089e8:	d420      	bmi.n	8008a2c <_malloc_r+0xd0>
 80089ea:	2a0b      	cmp	r2, #11
 80089ec:	d917      	bls.n	8008a1e <_malloc_r+0xc2>
 80089ee:	1961      	adds	r1, r4, r5
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	6025      	str	r5, [r4, #0]
 80089f4:	bf18      	it	ne
 80089f6:	6059      	strne	r1, [r3, #4]
 80089f8:	6863      	ldr	r3, [r4, #4]
 80089fa:	bf08      	it	eq
 80089fc:	f8c8 1000 	streq.w	r1, [r8]
 8008a00:	5162      	str	r2, [r4, r5]
 8008a02:	604b      	str	r3, [r1, #4]
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 f82f 	bl	8008a68 <__malloc_unlock>
 8008a0a:	f104 000b 	add.w	r0, r4, #11
 8008a0e:	1d23      	adds	r3, r4, #4
 8008a10:	f020 0007 	bic.w	r0, r0, #7
 8008a14:	1ac2      	subs	r2, r0, r3
 8008a16:	bf1c      	itt	ne
 8008a18:	1a1b      	subne	r3, r3, r0
 8008a1a:	50a3      	strne	r3, [r4, r2]
 8008a1c:	e7af      	b.n	800897e <_malloc_r+0x22>
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	bf0c      	ite	eq
 8008a24:	f8c8 2000 	streq.w	r2, [r8]
 8008a28:	605a      	strne	r2, [r3, #4]
 8008a2a:	e7eb      	b.n	8008a04 <_malloc_r+0xa8>
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	6864      	ldr	r4, [r4, #4]
 8008a30:	e7ae      	b.n	8008990 <_malloc_r+0x34>
 8008a32:	463c      	mov	r4, r7
 8008a34:	687f      	ldr	r7, [r7, #4]
 8008a36:	e7b6      	b.n	80089a6 <_malloc_r+0x4a>
 8008a38:	461a      	mov	r2, r3
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	d1fb      	bne.n	8008a38 <_malloc_r+0xdc>
 8008a40:	2300      	movs	r3, #0
 8008a42:	6053      	str	r3, [r2, #4]
 8008a44:	e7de      	b.n	8008a04 <_malloc_r+0xa8>
 8008a46:	230c      	movs	r3, #12
 8008a48:	6033      	str	r3, [r6, #0]
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f000 f80c 	bl	8008a68 <__malloc_unlock>
 8008a50:	e794      	b.n	800897c <_malloc_r+0x20>
 8008a52:	6005      	str	r5, [r0, #0]
 8008a54:	e7d6      	b.n	8008a04 <_malloc_r+0xa8>
 8008a56:	bf00      	nop
 8008a58:	200003f8 	.word	0x200003f8

08008a5c <__malloc_lock>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	@ (8008a64 <__malloc_lock+0x8>)
 8008a5e:	f000 bb50 	b.w	8009102 <__retarget_lock_acquire_recursive>
 8008a62:	bf00      	nop
 8008a64:	2000053c 	.word	0x2000053c

08008a68 <__malloc_unlock>:
 8008a68:	4801      	ldr	r0, [pc, #4]	@ (8008a70 <__malloc_unlock+0x8>)
 8008a6a:	f000 bb4b 	b.w	8009104 <__retarget_lock_release_recursive>
 8008a6e:	bf00      	nop
 8008a70:	2000053c 	.word	0x2000053c

08008a74 <std>:
 8008a74:	2300      	movs	r3, #0
 8008a76:	b510      	push	{r4, lr}
 8008a78:	4604      	mov	r4, r0
 8008a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a82:	6083      	str	r3, [r0, #8]
 8008a84:	8181      	strh	r1, [r0, #12]
 8008a86:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a88:	81c2      	strh	r2, [r0, #14]
 8008a8a:	6183      	str	r3, [r0, #24]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	2208      	movs	r2, #8
 8008a90:	305c      	adds	r0, #92	@ 0x5c
 8008a92:	f000 faad 	bl	8008ff0 <memset>
 8008a96:	4b0d      	ldr	r3, [pc, #52]	@ (8008acc <std+0x58>)
 8008a98:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad0 <std+0x5c>)
 8008a9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <std+0x60>)
 8008aa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <std+0x64>)
 8008aa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <std+0x68>)
 8008aa8:	6224      	str	r4, [r4, #32]
 8008aaa:	429c      	cmp	r4, r3
 8008aac:	d006      	beq.n	8008abc <std+0x48>
 8008aae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ab2:	4294      	cmp	r4, r2
 8008ab4:	d002      	beq.n	8008abc <std+0x48>
 8008ab6:	33d0      	adds	r3, #208	@ 0xd0
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d105      	bne.n	8008ac8 <std+0x54>
 8008abc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac4:	f000 bb1c 	b.w	8009100 <__retarget_lock_init_recursive>
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	bf00      	nop
 8008acc:	08008e41 	.word	0x08008e41
 8008ad0:	08008e63 	.word	0x08008e63
 8008ad4:	08008e9b 	.word	0x08008e9b
 8008ad8:	08008ebf 	.word	0x08008ebf
 8008adc:	200003fc 	.word	0x200003fc

08008ae0 <stdio_exit_handler>:
 8008ae0:	4a02      	ldr	r2, [pc, #8]	@ (8008aec <stdio_exit_handler+0xc>)
 8008ae2:	4903      	ldr	r1, [pc, #12]	@ (8008af0 <stdio_exit_handler+0x10>)
 8008ae4:	4803      	ldr	r0, [pc, #12]	@ (8008af4 <stdio_exit_handler+0x14>)
 8008ae6:	f000 b869 	b.w	8008bbc <_fwalk_sglue>
 8008aea:	bf00      	nop
 8008aec:	20000014 	.word	0x20000014
 8008af0:	08009845 	.word	0x08009845
 8008af4:	20000024 	.word	0x20000024

08008af8 <cleanup_stdio>:
 8008af8:	6841      	ldr	r1, [r0, #4]
 8008afa:	4b0c      	ldr	r3, [pc, #48]	@ (8008b2c <cleanup_stdio+0x34>)
 8008afc:	4299      	cmp	r1, r3
 8008afe:	b510      	push	{r4, lr}
 8008b00:	4604      	mov	r4, r0
 8008b02:	d001      	beq.n	8008b08 <cleanup_stdio+0x10>
 8008b04:	f000 fe9e 	bl	8009844 <_fflush_r>
 8008b08:	68a1      	ldr	r1, [r4, #8]
 8008b0a:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <cleanup_stdio+0x38>)
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d002      	beq.n	8008b16 <cleanup_stdio+0x1e>
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fe97 	bl	8009844 <_fflush_r>
 8008b16:	68e1      	ldr	r1, [r4, #12]
 8008b18:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <cleanup_stdio+0x3c>)
 8008b1a:	4299      	cmp	r1, r3
 8008b1c:	d004      	beq.n	8008b28 <cleanup_stdio+0x30>
 8008b1e:	4620      	mov	r0, r4
 8008b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b24:	f000 be8e 	b.w	8009844 <_fflush_r>
 8008b28:	bd10      	pop	{r4, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200003fc 	.word	0x200003fc
 8008b30:	20000464 	.word	0x20000464
 8008b34:	200004cc 	.word	0x200004cc

08008b38 <global_stdio_init.part.0>:
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b68 <global_stdio_init.part.0+0x30>)
 8008b3c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b6c <global_stdio_init.part.0+0x34>)
 8008b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <global_stdio_init.part.0+0x38>)
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	4620      	mov	r0, r4
 8008b44:	2200      	movs	r2, #0
 8008b46:	2104      	movs	r1, #4
 8008b48:	f7ff ff94 	bl	8008a74 <std>
 8008b4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b50:	2201      	movs	r2, #1
 8008b52:	2109      	movs	r1, #9
 8008b54:	f7ff ff8e 	bl	8008a74 <std>
 8008b58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b5c:	2202      	movs	r2, #2
 8008b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b62:	2112      	movs	r1, #18
 8008b64:	f7ff bf86 	b.w	8008a74 <std>
 8008b68:	20000534 	.word	0x20000534
 8008b6c:	200003fc 	.word	0x200003fc
 8008b70:	08008ae1 	.word	0x08008ae1

08008b74 <__sfp_lock_acquire>:
 8008b74:	4801      	ldr	r0, [pc, #4]	@ (8008b7c <__sfp_lock_acquire+0x8>)
 8008b76:	f000 bac4 	b.w	8009102 <__retarget_lock_acquire_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	2000053d 	.word	0x2000053d

08008b80 <__sfp_lock_release>:
 8008b80:	4801      	ldr	r0, [pc, #4]	@ (8008b88 <__sfp_lock_release+0x8>)
 8008b82:	f000 babf 	b.w	8009104 <__retarget_lock_release_recursive>
 8008b86:	bf00      	nop
 8008b88:	2000053d 	.word	0x2000053d

08008b8c <__sinit>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4604      	mov	r4, r0
 8008b90:	f7ff fff0 	bl	8008b74 <__sfp_lock_acquire>
 8008b94:	6a23      	ldr	r3, [r4, #32]
 8008b96:	b11b      	cbz	r3, 8008ba0 <__sinit+0x14>
 8008b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9c:	f7ff bff0 	b.w	8008b80 <__sfp_lock_release>
 8008ba0:	4b04      	ldr	r3, [pc, #16]	@ (8008bb4 <__sinit+0x28>)
 8008ba2:	6223      	str	r3, [r4, #32]
 8008ba4:	4b04      	ldr	r3, [pc, #16]	@ (8008bb8 <__sinit+0x2c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f5      	bne.n	8008b98 <__sinit+0xc>
 8008bac:	f7ff ffc4 	bl	8008b38 <global_stdio_init.part.0>
 8008bb0:	e7f2      	b.n	8008b98 <__sinit+0xc>
 8008bb2:	bf00      	nop
 8008bb4:	08008af9 	.word	0x08008af9
 8008bb8:	20000534 	.word	0x20000534

08008bbc <_fwalk_sglue>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	4688      	mov	r8, r1
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8008bd0:	d505      	bpl.n	8008bde <_fwalk_sglue+0x22>
 8008bd2:	6824      	ldr	r4, [r4, #0]
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	d1f7      	bne.n	8008bc8 <_fwalk_sglue+0xc>
 8008bd8:	4630      	mov	r0, r6
 8008bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d907      	bls.n	8008bf4 <_fwalk_sglue+0x38>
 8008be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008be8:	3301      	adds	r3, #1
 8008bea:	d003      	beq.n	8008bf4 <_fwalk_sglue+0x38>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4638      	mov	r0, r7
 8008bf0:	47c0      	blx	r8
 8008bf2:	4306      	orrs	r6, r0
 8008bf4:	3568      	adds	r5, #104	@ 0x68
 8008bf6:	e7e9      	b.n	8008bcc <_fwalk_sglue+0x10>

08008bf8 <iprintf>:
 8008bf8:	b40f      	push	{r0, r1, r2, r3}
 8008bfa:	b507      	push	{r0, r1, r2, lr}
 8008bfc:	4906      	ldr	r1, [pc, #24]	@ (8008c18 <iprintf+0x20>)
 8008bfe:	ab04      	add	r3, sp, #16
 8008c00:	6808      	ldr	r0, [r1, #0]
 8008c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c06:	6881      	ldr	r1, [r0, #8]
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f000 faf1 	bl	80091f0 <_vfiprintf_r>
 8008c0e:	b003      	add	sp, #12
 8008c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c14:	b004      	add	sp, #16
 8008c16:	4770      	bx	lr
 8008c18:	20000020 	.word	0x20000020

08008c1c <_puts_r>:
 8008c1c:	6a03      	ldr	r3, [r0, #32]
 8008c1e:	b570      	push	{r4, r5, r6, lr}
 8008c20:	6884      	ldr	r4, [r0, #8]
 8008c22:	4605      	mov	r5, r0
 8008c24:	460e      	mov	r6, r1
 8008c26:	b90b      	cbnz	r3, 8008c2c <_puts_r+0x10>
 8008c28:	f7ff ffb0 	bl	8008b8c <__sinit>
 8008c2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c2e:	07db      	lsls	r3, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_puts_r+0x22>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	0598      	lsls	r0, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_puts_r+0x22>
 8008c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c3a:	f000 fa62 	bl	8009102 <__retarget_lock_acquire_recursive>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d502      	bpl.n	8008c4a <_puts_r+0x2e>
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d135      	bne.n	8008cb6 <_puts_r+0x9a>
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f000 f979 	bl	8008f44 <__swsetup_r>
 8008c52:	b380      	cbz	r0, 8008cb6 <_puts_r+0x9a>
 8008c54:	f04f 35ff 	mov.w	r5, #4294967295
 8008c58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c5a:	07da      	lsls	r2, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_puts_r+0x4e>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	059b      	lsls	r3, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_puts_r+0x4e>
 8008c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c66:	f000 fa4d 	bl	8009104 <__retarget_lock_release_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da04      	bge.n	8008c7c <_puts_r+0x60>
 8008c72:	69a2      	ldr	r2, [r4, #24]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	dc17      	bgt.n	8008ca8 <_puts_r+0x8c>
 8008c78:	290a      	cmp	r1, #10
 8008c7a:	d015      	beq.n	8008ca8 <_puts_r+0x8c>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	6022      	str	r2, [r4, #0]
 8008c82:	7019      	strb	r1, [r3, #0]
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d1ed      	bne.n	8008c6e <_puts_r+0x52>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da11      	bge.n	8008cba <_puts_r+0x9e>
 8008c96:	4622      	mov	r2, r4
 8008c98:	210a      	movs	r1, #10
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 f913 	bl	8008ec6 <__swbuf_r>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d0d7      	beq.n	8008c54 <_puts_r+0x38>
 8008ca4:	250a      	movs	r5, #10
 8008ca6:	e7d7      	b.n	8008c58 <_puts_r+0x3c>
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4628      	mov	r0, r5
 8008cac:	f000 f90b 	bl	8008ec6 <__swbuf_r>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d1e7      	bne.n	8008c84 <_puts_r+0x68>
 8008cb4:	e7ce      	b.n	8008c54 <_puts_r+0x38>
 8008cb6:	3e01      	subs	r6, #1
 8008cb8:	e7e4      	b.n	8008c84 <_puts_r+0x68>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	6022      	str	r2, [r4, #0]
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	e7ee      	b.n	8008ca4 <_puts_r+0x88>
	...

08008cc8 <puts>:
 8008cc8:	4b02      	ldr	r3, [pc, #8]	@ (8008cd4 <puts+0xc>)
 8008cca:	4601      	mov	r1, r0
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f7ff bfa5 	b.w	8008c1c <_puts_r>
 8008cd2:	bf00      	nop
 8008cd4:	20000020 	.word	0x20000020

08008cd8 <setvbuf>:
 8008cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cdc:	461d      	mov	r5, r3
 8008cde:	4b57      	ldr	r3, [pc, #348]	@ (8008e3c <setvbuf+0x164>)
 8008ce0:	681f      	ldr	r7, [r3, #0]
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	460e      	mov	r6, r1
 8008ce6:	4690      	mov	r8, r2
 8008ce8:	b127      	cbz	r7, 8008cf4 <setvbuf+0x1c>
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	b913      	cbnz	r3, 8008cf4 <setvbuf+0x1c>
 8008cee:	4638      	mov	r0, r7
 8008cf0:	f7ff ff4c 	bl	8008b8c <__sinit>
 8008cf4:	f1b8 0f02 	cmp.w	r8, #2
 8008cf8:	d006      	beq.n	8008d08 <setvbuf+0x30>
 8008cfa:	f1b8 0f01 	cmp.w	r8, #1
 8008cfe:	f200 809a 	bhi.w	8008e36 <setvbuf+0x15e>
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	f2c0 8097 	blt.w	8008e36 <setvbuf+0x15e>
 8008d08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d0a:	07d9      	lsls	r1, r3, #31
 8008d0c:	d405      	bmi.n	8008d1a <setvbuf+0x42>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	059a      	lsls	r2, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <setvbuf+0x42>
 8008d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d16:	f000 f9f4 	bl	8009102 <__retarget_lock_acquire_recursive>
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f000 fd91 	bl	8009844 <_fflush_r>
 8008d22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d24:	b141      	cbz	r1, 8008d38 <setvbuf+0x60>
 8008d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d2a:	4299      	cmp	r1, r3
 8008d2c:	d002      	beq.n	8008d34 <setvbuf+0x5c>
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f000 f9ea 	bl	8009108 <_free_r>
 8008d34:	2300      	movs	r3, #0
 8008d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61a3      	str	r3, [r4, #24]
 8008d3c:	6063      	str	r3, [r4, #4]
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	061b      	lsls	r3, r3, #24
 8008d42:	d503      	bpl.n	8008d4c <setvbuf+0x74>
 8008d44:	6921      	ldr	r1, [r4, #16]
 8008d46:	4638      	mov	r0, r7
 8008d48:	f000 f9de 	bl	8009108 <_free_r>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	f1b8 0f02 	cmp.w	r8, #2
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	d061      	beq.n	8008e22 <setvbuf+0x14a>
 8008d5e:	ab01      	add	r3, sp, #4
 8008d60:	466a      	mov	r2, sp
 8008d62:	4621      	mov	r1, r4
 8008d64:	4638      	mov	r0, r7
 8008d66:	f000 fd95 	bl	8009894 <__swhatbuf_r>
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	4318      	orrs	r0, r3
 8008d6e:	81a0      	strh	r0, [r4, #12]
 8008d70:	bb2d      	cbnz	r5, 8008dbe <setvbuf+0xe6>
 8008d72:	9d00      	ldr	r5, [sp, #0]
 8008d74:	4628      	mov	r0, r5
 8008d76:	f7ff fdc7 	bl	8008908 <malloc>
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d152      	bne.n	8008e26 <setvbuf+0x14e>
 8008d80:	f8dd 9000 	ldr.w	r9, [sp]
 8008d84:	45a9      	cmp	r9, r5
 8008d86:	d140      	bne.n	8008e0a <setvbuf+0x132>
 8008d88:	f04f 35ff 	mov.w	r5, #4294967295
 8008d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d90:	f043 0202 	orr.w	r2, r3, #2
 8008d94:	81a2      	strh	r2, [r4, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	60a2      	str	r2, [r4, #8]
 8008d9a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	6122      	str	r2, [r4, #16]
 8008da2:	2201      	movs	r2, #1
 8008da4:	6162      	str	r2, [r4, #20]
 8008da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008da8:	07d6      	lsls	r6, r2, #31
 8008daa:	d404      	bmi.n	8008db6 <setvbuf+0xde>
 8008dac:	0598      	lsls	r0, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <setvbuf+0xde>
 8008db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008db2:	f000 f9a7 	bl	8009104 <__retarget_lock_release_recursive>
 8008db6:	4628      	mov	r0, r5
 8008db8:	b003      	add	sp, #12
 8008dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	d0d8      	beq.n	8008d74 <setvbuf+0x9c>
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	b913      	cbnz	r3, 8008dcc <setvbuf+0xf4>
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff fee0 	bl	8008b8c <__sinit>
 8008dcc:	f1b8 0f01 	cmp.w	r8, #1
 8008dd0:	bf08      	it	eq
 8008dd2:	89a3      	ldrheq	r3, [r4, #12]
 8008dd4:	6026      	str	r6, [r4, #0]
 8008dd6:	bf04      	itt	eq
 8008dd8:	f043 0301 	orreq.w	r3, r3, #1
 8008ddc:	81a3      	strheq	r3, [r4, #12]
 8008dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de2:	f013 0208 	ands.w	r2, r3, #8
 8008de6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008dea:	d01e      	beq.n	8008e2a <setvbuf+0x152>
 8008dec:	07d9      	lsls	r1, r3, #31
 8008dee:	bf41      	itttt	mi
 8008df0:	2200      	movmi	r2, #0
 8008df2:	426d      	negmi	r5, r5
 8008df4:	60a2      	strmi	r2, [r4, #8]
 8008df6:	61a5      	strmi	r5, [r4, #24]
 8008df8:	bf58      	it	pl
 8008dfa:	60a5      	strpl	r5, [r4, #8]
 8008dfc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008dfe:	07d2      	lsls	r2, r2, #31
 8008e00:	d401      	bmi.n	8008e06 <setvbuf+0x12e>
 8008e02:	059b      	lsls	r3, r3, #22
 8008e04:	d513      	bpl.n	8008e2e <setvbuf+0x156>
 8008e06:	2500      	movs	r5, #0
 8008e08:	e7d5      	b.n	8008db6 <setvbuf+0xde>
 8008e0a:	4648      	mov	r0, r9
 8008e0c:	f7ff fd7c 	bl	8008908 <malloc>
 8008e10:	4606      	mov	r6, r0
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d0b8      	beq.n	8008d88 <setvbuf+0xb0>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	464d      	mov	r5, r9
 8008e20:	e7cf      	b.n	8008dc2 <setvbuf+0xea>
 8008e22:	2500      	movs	r5, #0
 8008e24:	e7b2      	b.n	8008d8c <setvbuf+0xb4>
 8008e26:	46a9      	mov	r9, r5
 8008e28:	e7f5      	b.n	8008e16 <setvbuf+0x13e>
 8008e2a:	60a2      	str	r2, [r4, #8]
 8008e2c:	e7e6      	b.n	8008dfc <setvbuf+0x124>
 8008e2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e30:	f000 f968 	bl	8009104 <__retarget_lock_release_recursive>
 8008e34:	e7e7      	b.n	8008e06 <setvbuf+0x12e>
 8008e36:	f04f 35ff 	mov.w	r5, #4294967295
 8008e3a:	e7bc      	b.n	8008db6 <setvbuf+0xde>
 8008e3c:	20000020 	.word	0x20000020

08008e40 <__sread>:
 8008e40:	b510      	push	{r4, lr}
 8008e42:	460c      	mov	r4, r1
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	f000 f8fc 	bl	8009044 <_read_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	bfab      	itete	ge
 8008e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e52:	89a3      	ldrhlt	r3, [r4, #12]
 8008e54:	181b      	addge	r3, r3, r0
 8008e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e5a:	bfac      	ite	ge
 8008e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e5e:	81a3      	strhlt	r3, [r4, #12]
 8008e60:	bd10      	pop	{r4, pc}

08008e62 <__swrite>:
 8008e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	461f      	mov	r7, r3
 8008e68:	898b      	ldrh	r3, [r1, #12]
 8008e6a:	05db      	lsls	r3, r3, #23
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4616      	mov	r6, r2
 8008e72:	d505      	bpl.n	8008e80 <__swrite+0x1e>
 8008e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e78:	2302      	movs	r3, #2
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f000 f8d0 	bl	8009020 <_lseek_r>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	463b      	mov	r3, r7
 8008e90:	4628      	mov	r0, r5
 8008e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	f000 b8f7 	b.w	8009088 <_write_r>

08008e9a <__sseek>:
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea2:	f000 f8bd 	bl	8009020 <_lseek_r>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	bf15      	itete	ne
 8008eac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008eae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008eb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008eb6:	81a3      	strheq	r3, [r4, #12]
 8008eb8:	bf18      	it	ne
 8008eba:	81a3      	strhne	r3, [r4, #12]
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <__sclose>:
 8008ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec2:	f000 b89d 	b.w	8009000 <_close_r>

08008ec6 <__swbuf_r>:
 8008ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec8:	460e      	mov	r6, r1
 8008eca:	4614      	mov	r4, r2
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b118      	cbz	r0, 8008ed8 <__swbuf_r+0x12>
 8008ed0:	6a03      	ldr	r3, [r0, #32]
 8008ed2:	b90b      	cbnz	r3, 8008ed8 <__swbuf_r+0x12>
 8008ed4:	f7ff fe5a 	bl	8008b8c <__sinit>
 8008ed8:	69a3      	ldr	r3, [r4, #24]
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	071a      	lsls	r2, r3, #28
 8008ee0:	d501      	bpl.n	8008ee6 <__swbuf_r+0x20>
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	b943      	cbnz	r3, 8008ef8 <__swbuf_r+0x32>
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 f82b 	bl	8008f44 <__swsetup_r>
 8008eee:	b118      	cbz	r0, 8008ef8 <__swbuf_r+0x32>
 8008ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	1a98      	subs	r0, r3, r2
 8008efe:	6963      	ldr	r3, [r4, #20]
 8008f00:	b2f6      	uxtb	r6, r6
 8008f02:	4283      	cmp	r3, r0
 8008f04:	4637      	mov	r7, r6
 8008f06:	dc05      	bgt.n	8008f14 <__swbuf_r+0x4e>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 fc9a 	bl	8009844 <_fflush_r>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d1ed      	bne.n	8008ef0 <__swbuf_r+0x2a>
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	60a3      	str	r3, [r4, #8]
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	6022      	str	r2, [r4, #0]
 8008f20:	701e      	strb	r6, [r3, #0]
 8008f22:	6962      	ldr	r2, [r4, #20]
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d004      	beq.n	8008f34 <__swbuf_r+0x6e>
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	07db      	lsls	r3, r3, #31
 8008f2e:	d5e1      	bpl.n	8008ef4 <__swbuf_r+0x2e>
 8008f30:	2e0a      	cmp	r6, #10
 8008f32:	d1df      	bne.n	8008ef4 <__swbuf_r+0x2e>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 fc84 	bl	8009844 <_fflush_r>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d0d9      	beq.n	8008ef4 <__swbuf_r+0x2e>
 8008f40:	e7d6      	b.n	8008ef0 <__swbuf_r+0x2a>
	...

08008f44 <__swsetup_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4b29      	ldr	r3, [pc, #164]	@ (8008fec <__swsetup_r+0xa8>)
 8008f48:	4605      	mov	r5, r0
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	b118      	cbz	r0, 8008f58 <__swsetup_r+0x14>
 8008f50:	6a03      	ldr	r3, [r0, #32]
 8008f52:	b90b      	cbnz	r3, 8008f58 <__swsetup_r+0x14>
 8008f54:	f7ff fe1a 	bl	8008b8c <__sinit>
 8008f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f5c:	0719      	lsls	r1, r3, #28
 8008f5e:	d422      	bmi.n	8008fa6 <__swsetup_r+0x62>
 8008f60:	06da      	lsls	r2, r3, #27
 8008f62:	d407      	bmi.n	8008f74 <__swsetup_r+0x30>
 8008f64:	2209      	movs	r2, #9
 8008f66:	602a      	str	r2, [r5, #0]
 8008f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f72:	e033      	b.n	8008fdc <__swsetup_r+0x98>
 8008f74:	0758      	lsls	r0, r3, #29
 8008f76:	d512      	bpl.n	8008f9e <__swsetup_r+0x5a>
 8008f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f7a:	b141      	cbz	r1, 8008f8e <__swsetup_r+0x4a>
 8008f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d002      	beq.n	8008f8a <__swsetup_r+0x46>
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 f8bf 	bl	8009108 <_free_r>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	b94b      	cbnz	r3, 8008fbe <__swsetup_r+0x7a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb4:	d003      	beq.n	8008fbe <__swsetup_r+0x7a>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 fc91 	bl	80098e0 <__smakebuf_r>
 8008fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc2:	f013 0201 	ands.w	r2, r3, #1
 8008fc6:	d00a      	beq.n	8008fde <__swsetup_r+0x9a>
 8008fc8:	2200      	movs	r2, #0
 8008fca:	60a2      	str	r2, [r4, #8]
 8008fcc:	6962      	ldr	r2, [r4, #20]
 8008fce:	4252      	negs	r2, r2
 8008fd0:	61a2      	str	r2, [r4, #24]
 8008fd2:	6922      	ldr	r2, [r4, #16]
 8008fd4:	b942      	cbnz	r2, 8008fe8 <__swsetup_r+0xa4>
 8008fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fda:	d1c5      	bne.n	8008f68 <__swsetup_r+0x24>
 8008fdc:	bd38      	pop	{r3, r4, r5, pc}
 8008fde:	0799      	lsls	r1, r3, #30
 8008fe0:	bf58      	it	pl
 8008fe2:	6962      	ldrpl	r2, [r4, #20]
 8008fe4:	60a2      	str	r2, [r4, #8]
 8008fe6:	e7f4      	b.n	8008fd2 <__swsetup_r+0x8e>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e7f7      	b.n	8008fdc <__swsetup_r+0x98>
 8008fec:	20000020 	.word	0x20000020

08008ff0 <memset>:
 8008ff0:	4402      	add	r2, r0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d100      	bne.n	8008ffa <memset+0xa>
 8008ff8:	4770      	bx	lr
 8008ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8008ffe:	e7f9      	b.n	8008ff4 <memset+0x4>

08009000 <_close_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d06      	ldr	r5, [pc, #24]	@ (800901c <_close_r+0x1c>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7f8 f9e3 	bl	80013d6 <_close>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d102      	bne.n	800901a <_close_r+0x1a>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	b103      	cbz	r3, 800901a <_close_r+0x1a>
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	20000538 	.word	0x20000538

08009020 <_lseek_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	@ (8009040 <_lseek_r+0x20>)
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	2200      	movs	r2, #0
 800902c:	602a      	str	r2, [r5, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f7f8 f9f8 	bl	8001424 <_lseek>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_lseek_r+0x1e>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_lseek_r+0x1e>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	20000538 	.word	0x20000538

08009044 <_read_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d07      	ldr	r5, [pc, #28]	@ (8009064 <_read_r+0x20>)
 8009048:	4604      	mov	r4, r0
 800904a:	4608      	mov	r0, r1
 800904c:	4611      	mov	r1, r2
 800904e:	2200      	movs	r2, #0
 8009050:	602a      	str	r2, [r5, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f7f8 f986 	bl	8001364 <_read>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_read_r+0x1e>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_read_r+0x1e>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20000538 	.word	0x20000538

08009068 <_sbrk_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d06      	ldr	r5, [pc, #24]	@ (8009084 <_sbrk_r+0x1c>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7f8 f9e4 	bl	8001440 <_sbrk>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_sbrk_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_sbrk_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	20000538 	.word	0x20000538

08009088 <_write_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d07      	ldr	r5, [pc, #28]	@ (80090a8 <_write_r+0x20>)
 800908c:	4604      	mov	r4, r0
 800908e:	4608      	mov	r0, r1
 8009090:	4611      	mov	r1, r2
 8009092:	2200      	movs	r2, #0
 8009094:	602a      	str	r2, [r5, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	f7f8 f981 	bl	800139e <_write>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_write_r+0x1e>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_write_r+0x1e>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	20000538 	.word	0x20000538

080090ac <__errno>:
 80090ac:	4b01      	ldr	r3, [pc, #4]	@ (80090b4 <__errno+0x8>)
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20000020 	.word	0x20000020

080090b8 <__libc_init_array>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	4d0d      	ldr	r5, [pc, #52]	@ (80090f0 <__libc_init_array+0x38>)
 80090bc:	4c0d      	ldr	r4, [pc, #52]	@ (80090f4 <__libc_init_array+0x3c>)
 80090be:	1b64      	subs	r4, r4, r5
 80090c0:	10a4      	asrs	r4, r4, #2
 80090c2:	2600      	movs	r6, #0
 80090c4:	42a6      	cmp	r6, r4
 80090c6:	d109      	bne.n	80090dc <__libc_init_array+0x24>
 80090c8:	4d0b      	ldr	r5, [pc, #44]	@ (80090f8 <__libc_init_array+0x40>)
 80090ca:	4c0c      	ldr	r4, [pc, #48]	@ (80090fc <__libc_init_array+0x44>)
 80090cc:	f000 fc66 	bl	800999c <_init>
 80090d0:	1b64      	subs	r4, r4, r5
 80090d2:	10a4      	asrs	r4, r4, #2
 80090d4:	2600      	movs	r6, #0
 80090d6:	42a6      	cmp	r6, r4
 80090d8:	d105      	bne.n	80090e6 <__libc_init_array+0x2e>
 80090da:	bd70      	pop	{r4, r5, r6, pc}
 80090dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e0:	4798      	blx	r3
 80090e2:	3601      	adds	r6, #1
 80090e4:	e7ee      	b.n	80090c4 <__libc_init_array+0xc>
 80090e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ea:	4798      	blx	r3
 80090ec:	3601      	adds	r6, #1
 80090ee:	e7f2      	b.n	80090d6 <__libc_init_array+0x1e>
 80090f0:	08009b30 	.word	0x08009b30
 80090f4:	08009b30 	.word	0x08009b30
 80090f8:	08009b30 	.word	0x08009b30
 80090fc:	08009b34 	.word	0x08009b34

08009100 <__retarget_lock_init_recursive>:
 8009100:	4770      	bx	lr

08009102 <__retarget_lock_acquire_recursive>:
 8009102:	4770      	bx	lr

08009104 <__retarget_lock_release_recursive>:
 8009104:	4770      	bx	lr
	...

08009108 <_free_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4605      	mov	r5, r0
 800910c:	2900      	cmp	r1, #0
 800910e:	d041      	beq.n	8009194 <_free_r+0x8c>
 8009110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009114:	1f0c      	subs	r4, r1, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfb8      	it	lt
 800911a:	18e4      	addlt	r4, r4, r3
 800911c:	f7ff fc9e 	bl	8008a5c <__malloc_lock>
 8009120:	4a1d      	ldr	r2, [pc, #116]	@ (8009198 <_free_r+0x90>)
 8009122:	6813      	ldr	r3, [r2, #0]
 8009124:	b933      	cbnz	r3, 8009134 <_free_r+0x2c>
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	6014      	str	r4, [r2, #0]
 800912a:	4628      	mov	r0, r5
 800912c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009130:	f7ff bc9a 	b.w	8008a68 <__malloc_unlock>
 8009134:	42a3      	cmp	r3, r4
 8009136:	d908      	bls.n	800914a <_free_r+0x42>
 8009138:	6820      	ldr	r0, [r4, #0]
 800913a:	1821      	adds	r1, r4, r0
 800913c:	428b      	cmp	r3, r1
 800913e:	bf01      	itttt	eq
 8009140:	6819      	ldreq	r1, [r3, #0]
 8009142:	685b      	ldreq	r3, [r3, #4]
 8009144:	1809      	addeq	r1, r1, r0
 8009146:	6021      	streq	r1, [r4, #0]
 8009148:	e7ed      	b.n	8009126 <_free_r+0x1e>
 800914a:	461a      	mov	r2, r3
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	b10b      	cbz	r3, 8009154 <_free_r+0x4c>
 8009150:	42a3      	cmp	r3, r4
 8009152:	d9fa      	bls.n	800914a <_free_r+0x42>
 8009154:	6811      	ldr	r1, [r2, #0]
 8009156:	1850      	adds	r0, r2, r1
 8009158:	42a0      	cmp	r0, r4
 800915a:	d10b      	bne.n	8009174 <_free_r+0x6c>
 800915c:	6820      	ldr	r0, [r4, #0]
 800915e:	4401      	add	r1, r0
 8009160:	1850      	adds	r0, r2, r1
 8009162:	4283      	cmp	r3, r0
 8009164:	6011      	str	r1, [r2, #0]
 8009166:	d1e0      	bne.n	800912a <_free_r+0x22>
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	6053      	str	r3, [r2, #4]
 800916e:	4408      	add	r0, r1
 8009170:	6010      	str	r0, [r2, #0]
 8009172:	e7da      	b.n	800912a <_free_r+0x22>
 8009174:	d902      	bls.n	800917c <_free_r+0x74>
 8009176:	230c      	movs	r3, #12
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	e7d6      	b.n	800912a <_free_r+0x22>
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	1821      	adds	r1, r4, r0
 8009180:	428b      	cmp	r3, r1
 8009182:	bf04      	itt	eq
 8009184:	6819      	ldreq	r1, [r3, #0]
 8009186:	685b      	ldreq	r3, [r3, #4]
 8009188:	6063      	str	r3, [r4, #4]
 800918a:	bf04      	itt	eq
 800918c:	1809      	addeq	r1, r1, r0
 800918e:	6021      	streq	r1, [r4, #0]
 8009190:	6054      	str	r4, [r2, #4]
 8009192:	e7ca      	b.n	800912a <_free_r+0x22>
 8009194:	bd38      	pop	{r3, r4, r5, pc}
 8009196:	bf00      	nop
 8009198:	200003f8 	.word	0x200003f8

0800919c <__sfputc_r>:
 800919c:	6893      	ldr	r3, [r2, #8]
 800919e:	3b01      	subs	r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	b410      	push	{r4}
 80091a4:	6093      	str	r3, [r2, #8]
 80091a6:	da08      	bge.n	80091ba <__sfputc_r+0x1e>
 80091a8:	6994      	ldr	r4, [r2, #24]
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	db01      	blt.n	80091b2 <__sfputc_r+0x16>
 80091ae:	290a      	cmp	r1, #10
 80091b0:	d103      	bne.n	80091ba <__sfputc_r+0x1e>
 80091b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b6:	f7ff be86 	b.w	8008ec6 <__swbuf_r>
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	1c58      	adds	r0, r3, #1
 80091be:	6010      	str	r0, [r2, #0]
 80091c0:	7019      	strb	r1, [r3, #0]
 80091c2:	4608      	mov	r0, r1
 80091c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <__sfputs_r>:
 80091ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091cc:	4606      	mov	r6, r0
 80091ce:	460f      	mov	r7, r1
 80091d0:	4614      	mov	r4, r2
 80091d2:	18d5      	adds	r5, r2, r3
 80091d4:	42ac      	cmp	r4, r5
 80091d6:	d101      	bne.n	80091dc <__sfputs_r+0x12>
 80091d8:	2000      	movs	r0, #0
 80091da:	e007      	b.n	80091ec <__sfputs_r+0x22>
 80091dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e0:	463a      	mov	r2, r7
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff ffda 	bl	800919c <__sfputc_r>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d1f3      	bne.n	80091d4 <__sfputs_r+0xa>
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091f0 <_vfiprintf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	460d      	mov	r5, r1
 80091f6:	b09d      	sub	sp, #116	@ 0x74
 80091f8:	4614      	mov	r4, r2
 80091fa:	4698      	mov	r8, r3
 80091fc:	4606      	mov	r6, r0
 80091fe:	b118      	cbz	r0, 8009208 <_vfiprintf_r+0x18>
 8009200:	6a03      	ldr	r3, [r0, #32]
 8009202:	b90b      	cbnz	r3, 8009208 <_vfiprintf_r+0x18>
 8009204:	f7ff fcc2 	bl	8008b8c <__sinit>
 8009208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800920a:	07d9      	lsls	r1, r3, #31
 800920c:	d405      	bmi.n	800921a <_vfiprintf_r+0x2a>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	059a      	lsls	r2, r3, #22
 8009212:	d402      	bmi.n	800921a <_vfiprintf_r+0x2a>
 8009214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009216:	f7ff ff74 	bl	8009102 <__retarget_lock_acquire_recursive>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	071b      	lsls	r3, r3, #28
 800921e:	d501      	bpl.n	8009224 <_vfiprintf_r+0x34>
 8009220:	692b      	ldr	r3, [r5, #16]
 8009222:	b99b      	cbnz	r3, 800924c <_vfiprintf_r+0x5c>
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff fe8c 	bl	8008f44 <__swsetup_r>
 800922c:	b170      	cbz	r0, 800924c <_vfiprintf_r+0x5c>
 800922e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009230:	07dc      	lsls	r4, r3, #31
 8009232:	d504      	bpl.n	800923e <_vfiprintf_r+0x4e>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	b01d      	add	sp, #116	@ 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	0598      	lsls	r0, r3, #22
 8009242:	d4f7      	bmi.n	8009234 <_vfiprintf_r+0x44>
 8009244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009246:	f7ff ff5d 	bl	8009104 <__retarget_lock_release_recursive>
 800924a:	e7f3      	b.n	8009234 <_vfiprintf_r+0x44>
 800924c:	2300      	movs	r3, #0
 800924e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009250:	2320      	movs	r3, #32
 8009252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009256:	f8cd 800c 	str.w	r8, [sp, #12]
 800925a:	2330      	movs	r3, #48	@ 0x30
 800925c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800940c <_vfiprintf_r+0x21c>
 8009260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009264:	f04f 0901 	mov.w	r9, #1
 8009268:	4623      	mov	r3, r4
 800926a:	469a      	mov	sl, r3
 800926c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009270:	b10a      	cbz	r2, 8009276 <_vfiprintf_r+0x86>
 8009272:	2a25      	cmp	r2, #37	@ 0x25
 8009274:	d1f9      	bne.n	800926a <_vfiprintf_r+0x7a>
 8009276:	ebba 0b04 	subs.w	fp, sl, r4
 800927a:	d00b      	beq.n	8009294 <_vfiprintf_r+0xa4>
 800927c:	465b      	mov	r3, fp
 800927e:	4622      	mov	r2, r4
 8009280:	4629      	mov	r1, r5
 8009282:	4630      	mov	r0, r6
 8009284:	f7ff ffa1 	bl	80091ca <__sfputs_r>
 8009288:	3001      	adds	r0, #1
 800928a:	f000 80a7 	beq.w	80093dc <_vfiprintf_r+0x1ec>
 800928e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009290:	445a      	add	r2, fp
 8009292:	9209      	str	r2, [sp, #36]	@ 0x24
 8009294:	f89a 3000 	ldrb.w	r3, [sl]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 809f 	beq.w	80093dc <_vfiprintf_r+0x1ec>
 800929e:	2300      	movs	r3, #0
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a8:	f10a 0a01 	add.w	sl, sl, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80092b6:	4654      	mov	r4, sl
 80092b8:	2205      	movs	r2, #5
 80092ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092be:	4853      	ldr	r0, [pc, #332]	@ (800940c <_vfiprintf_r+0x21c>)
 80092c0:	f7f6 ff5e 	bl	8000180 <memchr>
 80092c4:	9a04      	ldr	r2, [sp, #16]
 80092c6:	b9d8      	cbnz	r0, 8009300 <_vfiprintf_r+0x110>
 80092c8:	06d1      	lsls	r1, r2, #27
 80092ca:	bf44      	itt	mi
 80092cc:	2320      	movmi	r3, #32
 80092ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d2:	0713      	lsls	r3, r2, #28
 80092d4:	bf44      	itt	mi
 80092d6:	232b      	movmi	r3, #43	@ 0x2b
 80092d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092dc:	f89a 3000 	ldrb.w	r3, [sl]
 80092e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e2:	d015      	beq.n	8009310 <_vfiprintf_r+0x120>
 80092e4:	9a07      	ldr	r2, [sp, #28]
 80092e6:	4654      	mov	r4, sl
 80092e8:	2000      	movs	r0, #0
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4621      	mov	r1, r4
 80092f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f4:	3b30      	subs	r3, #48	@ 0x30
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d94b      	bls.n	8009392 <_vfiprintf_r+0x1a2>
 80092fa:	b1b0      	cbz	r0, 800932a <_vfiprintf_r+0x13a>
 80092fc:	9207      	str	r2, [sp, #28]
 80092fe:	e014      	b.n	800932a <_vfiprintf_r+0x13a>
 8009300:	eba0 0308 	sub.w	r3, r0, r8
 8009304:	fa09 f303 	lsl.w	r3, r9, r3
 8009308:	4313      	orrs	r3, r2
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	46a2      	mov	sl, r4
 800930e:	e7d2      	b.n	80092b6 <_vfiprintf_r+0xc6>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	1d19      	adds	r1, r3, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	9103      	str	r1, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfbb      	ittet	lt
 800931c:	425b      	neglt	r3, r3
 800931e:	f042 0202 	orrlt.w	r2, r2, #2
 8009322:	9307      	strge	r3, [sp, #28]
 8009324:	9307      	strlt	r3, [sp, #28]
 8009326:	bfb8      	it	lt
 8009328:	9204      	strlt	r2, [sp, #16]
 800932a:	7823      	ldrb	r3, [r4, #0]
 800932c:	2b2e      	cmp	r3, #46	@ 0x2e
 800932e:	d10a      	bne.n	8009346 <_vfiprintf_r+0x156>
 8009330:	7863      	ldrb	r3, [r4, #1]
 8009332:	2b2a      	cmp	r3, #42	@ 0x2a
 8009334:	d132      	bne.n	800939c <_vfiprintf_r+0x1ac>
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	1d1a      	adds	r2, r3, #4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	9203      	str	r2, [sp, #12]
 800933e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009342:	3402      	adds	r4, #2
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800941c <_vfiprintf_r+0x22c>
 800934a:	7821      	ldrb	r1, [r4, #0]
 800934c:	2203      	movs	r2, #3
 800934e:	4650      	mov	r0, sl
 8009350:	f7f6 ff16 	bl	8000180 <memchr>
 8009354:	b138      	cbz	r0, 8009366 <_vfiprintf_r+0x176>
 8009356:	9b04      	ldr	r3, [sp, #16]
 8009358:	eba0 000a 	sub.w	r0, r0, sl
 800935c:	2240      	movs	r2, #64	@ 0x40
 800935e:	4082      	lsls	r2, r0
 8009360:	4313      	orrs	r3, r2
 8009362:	3401      	adds	r4, #1
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936a:	4829      	ldr	r0, [pc, #164]	@ (8009410 <_vfiprintf_r+0x220>)
 800936c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009370:	2206      	movs	r2, #6
 8009372:	f7f6 ff05 	bl	8000180 <memchr>
 8009376:	2800      	cmp	r0, #0
 8009378:	d03f      	beq.n	80093fa <_vfiprintf_r+0x20a>
 800937a:	4b26      	ldr	r3, [pc, #152]	@ (8009414 <_vfiprintf_r+0x224>)
 800937c:	bb1b      	cbnz	r3, 80093c6 <_vfiprintf_r+0x1d6>
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	3307      	adds	r3, #7
 8009382:	f023 0307 	bic.w	r3, r3, #7
 8009386:	3308      	adds	r3, #8
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938c:	443b      	add	r3, r7
 800938e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009390:	e76a      	b.n	8009268 <_vfiprintf_r+0x78>
 8009392:	fb0c 3202 	mla	r2, ip, r2, r3
 8009396:	460c      	mov	r4, r1
 8009398:	2001      	movs	r0, #1
 800939a:	e7a8      	b.n	80092ee <_vfiprintf_r+0xfe>
 800939c:	2300      	movs	r3, #0
 800939e:	3401      	adds	r4, #1
 80093a0:	9305      	str	r3, [sp, #20]
 80093a2:	4619      	mov	r1, r3
 80093a4:	f04f 0c0a 	mov.w	ip, #10
 80093a8:	4620      	mov	r0, r4
 80093aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ae:	3a30      	subs	r2, #48	@ 0x30
 80093b0:	2a09      	cmp	r2, #9
 80093b2:	d903      	bls.n	80093bc <_vfiprintf_r+0x1cc>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0c6      	beq.n	8009346 <_vfiprintf_r+0x156>
 80093b8:	9105      	str	r1, [sp, #20]
 80093ba:	e7c4      	b.n	8009346 <_vfiprintf_r+0x156>
 80093bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c0:	4604      	mov	r4, r0
 80093c2:	2301      	movs	r3, #1
 80093c4:	e7f0      	b.n	80093a8 <_vfiprintf_r+0x1b8>
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <_vfiprintf_r+0x228>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4630      	mov	r0, r6
 80093d2:	f3af 8000 	nop.w
 80093d6:	4607      	mov	r7, r0
 80093d8:	1c78      	adds	r0, r7, #1
 80093da:	d1d6      	bne.n	800938a <_vfiprintf_r+0x19a>
 80093dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093de:	07d9      	lsls	r1, r3, #31
 80093e0:	d405      	bmi.n	80093ee <_vfiprintf_r+0x1fe>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	059a      	lsls	r2, r3, #22
 80093e6:	d402      	bmi.n	80093ee <_vfiprintf_r+0x1fe>
 80093e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ea:	f7ff fe8b 	bl	8009104 <__retarget_lock_release_recursive>
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	065b      	lsls	r3, r3, #25
 80093f2:	f53f af1f 	bmi.w	8009234 <_vfiprintf_r+0x44>
 80093f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093f8:	e71e      	b.n	8009238 <_vfiprintf_r+0x48>
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	462a      	mov	r2, r5
 8009400:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <_vfiprintf_r+0x228>)
 8009402:	a904      	add	r1, sp, #16
 8009404:	4630      	mov	r0, r6
 8009406:	f000 f879 	bl	80094fc <_printf_i>
 800940a:	e7e4      	b.n	80093d6 <_vfiprintf_r+0x1e6>
 800940c:	08009af4 	.word	0x08009af4
 8009410:	08009afe 	.word	0x08009afe
 8009414:	00000000 	.word	0x00000000
 8009418:	080091cb 	.word	0x080091cb
 800941c:	08009afa 	.word	0x08009afa

08009420 <_printf_common>:
 8009420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	4616      	mov	r6, r2
 8009426:	4698      	mov	r8, r3
 8009428:	688a      	ldr	r2, [r1, #8]
 800942a:	690b      	ldr	r3, [r1, #16]
 800942c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009430:	4293      	cmp	r3, r2
 8009432:	bfb8      	it	lt
 8009434:	4613      	movlt	r3, r2
 8009436:	6033      	str	r3, [r6, #0]
 8009438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800943c:	4607      	mov	r7, r0
 800943e:	460c      	mov	r4, r1
 8009440:	b10a      	cbz	r2, 8009446 <_printf_common+0x26>
 8009442:	3301      	adds	r3, #1
 8009444:	6033      	str	r3, [r6, #0]
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	0699      	lsls	r1, r3, #26
 800944a:	bf42      	ittt	mi
 800944c:	6833      	ldrmi	r3, [r6, #0]
 800944e:	3302      	addmi	r3, #2
 8009450:	6033      	strmi	r3, [r6, #0]
 8009452:	6825      	ldr	r5, [r4, #0]
 8009454:	f015 0506 	ands.w	r5, r5, #6
 8009458:	d106      	bne.n	8009468 <_printf_common+0x48>
 800945a:	f104 0a19 	add.w	sl, r4, #25
 800945e:	68e3      	ldr	r3, [r4, #12]
 8009460:	6832      	ldr	r2, [r6, #0]
 8009462:	1a9b      	subs	r3, r3, r2
 8009464:	42ab      	cmp	r3, r5
 8009466:	dc26      	bgt.n	80094b6 <_printf_common+0x96>
 8009468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	3b00      	subs	r3, #0
 8009470:	bf18      	it	ne
 8009472:	2301      	movne	r3, #1
 8009474:	0692      	lsls	r2, r2, #26
 8009476:	d42b      	bmi.n	80094d0 <_printf_common+0xb0>
 8009478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800947c:	4641      	mov	r1, r8
 800947e:	4638      	mov	r0, r7
 8009480:	47c8      	blx	r9
 8009482:	3001      	adds	r0, #1
 8009484:	d01e      	beq.n	80094c4 <_printf_common+0xa4>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	6922      	ldr	r2, [r4, #16]
 800948a:	f003 0306 	and.w	r3, r3, #6
 800948e:	2b04      	cmp	r3, #4
 8009490:	bf02      	ittt	eq
 8009492:	68e5      	ldreq	r5, [r4, #12]
 8009494:	6833      	ldreq	r3, [r6, #0]
 8009496:	1aed      	subeq	r5, r5, r3
 8009498:	68a3      	ldr	r3, [r4, #8]
 800949a:	bf0c      	ite	eq
 800949c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a0:	2500      	movne	r5, #0
 80094a2:	4293      	cmp	r3, r2
 80094a4:	bfc4      	itt	gt
 80094a6:	1a9b      	subgt	r3, r3, r2
 80094a8:	18ed      	addgt	r5, r5, r3
 80094aa:	2600      	movs	r6, #0
 80094ac:	341a      	adds	r4, #26
 80094ae:	42b5      	cmp	r5, r6
 80094b0:	d11a      	bne.n	80094e8 <_printf_common+0xc8>
 80094b2:	2000      	movs	r0, #0
 80094b4:	e008      	b.n	80094c8 <_printf_common+0xa8>
 80094b6:	2301      	movs	r3, #1
 80094b8:	4652      	mov	r2, sl
 80094ba:	4641      	mov	r1, r8
 80094bc:	4638      	mov	r0, r7
 80094be:	47c8      	blx	r9
 80094c0:	3001      	adds	r0, #1
 80094c2:	d103      	bne.n	80094cc <_printf_common+0xac>
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094cc:	3501      	adds	r5, #1
 80094ce:	e7c6      	b.n	800945e <_printf_common+0x3e>
 80094d0:	18e1      	adds	r1, r4, r3
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	2030      	movs	r0, #48	@ 0x30
 80094d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094da:	4422      	add	r2, r4
 80094dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094e4:	3302      	adds	r3, #2
 80094e6:	e7c7      	b.n	8009478 <_printf_common+0x58>
 80094e8:	2301      	movs	r3, #1
 80094ea:	4622      	mov	r2, r4
 80094ec:	4641      	mov	r1, r8
 80094ee:	4638      	mov	r0, r7
 80094f0:	47c8      	blx	r9
 80094f2:	3001      	adds	r0, #1
 80094f4:	d0e6      	beq.n	80094c4 <_printf_common+0xa4>
 80094f6:	3601      	adds	r6, #1
 80094f8:	e7d9      	b.n	80094ae <_printf_common+0x8e>
	...

080094fc <_printf_i>:
 80094fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	7e0f      	ldrb	r7, [r1, #24]
 8009502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009504:	2f78      	cmp	r7, #120	@ 0x78
 8009506:	4691      	mov	r9, r2
 8009508:	4680      	mov	r8, r0
 800950a:	460c      	mov	r4, r1
 800950c:	469a      	mov	sl, r3
 800950e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009512:	d807      	bhi.n	8009524 <_printf_i+0x28>
 8009514:	2f62      	cmp	r7, #98	@ 0x62
 8009516:	d80a      	bhi.n	800952e <_printf_i+0x32>
 8009518:	2f00      	cmp	r7, #0
 800951a:	f000 80d2 	beq.w	80096c2 <_printf_i+0x1c6>
 800951e:	2f58      	cmp	r7, #88	@ 0x58
 8009520:	f000 80b9 	beq.w	8009696 <_printf_i+0x19a>
 8009524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800952c:	e03a      	b.n	80095a4 <_printf_i+0xa8>
 800952e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009532:	2b15      	cmp	r3, #21
 8009534:	d8f6      	bhi.n	8009524 <_printf_i+0x28>
 8009536:	a101      	add	r1, pc, #4	@ (adr r1, 800953c <_printf_i+0x40>)
 8009538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800953c:	08009595 	.word	0x08009595
 8009540:	080095a9 	.word	0x080095a9
 8009544:	08009525 	.word	0x08009525
 8009548:	08009525 	.word	0x08009525
 800954c:	08009525 	.word	0x08009525
 8009550:	08009525 	.word	0x08009525
 8009554:	080095a9 	.word	0x080095a9
 8009558:	08009525 	.word	0x08009525
 800955c:	08009525 	.word	0x08009525
 8009560:	08009525 	.word	0x08009525
 8009564:	08009525 	.word	0x08009525
 8009568:	080096a9 	.word	0x080096a9
 800956c:	080095d3 	.word	0x080095d3
 8009570:	08009663 	.word	0x08009663
 8009574:	08009525 	.word	0x08009525
 8009578:	08009525 	.word	0x08009525
 800957c:	080096cb 	.word	0x080096cb
 8009580:	08009525 	.word	0x08009525
 8009584:	080095d3 	.word	0x080095d3
 8009588:	08009525 	.word	0x08009525
 800958c:	08009525 	.word	0x08009525
 8009590:	0800966b 	.word	0x0800966b
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	1d1a      	adds	r2, r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6032      	str	r2, [r6, #0]
 800959c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095a4:	2301      	movs	r3, #1
 80095a6:	e09d      	b.n	80096e4 <_printf_i+0x1e8>
 80095a8:	6833      	ldr	r3, [r6, #0]
 80095aa:	6820      	ldr	r0, [r4, #0]
 80095ac:	1d19      	adds	r1, r3, #4
 80095ae:	6031      	str	r1, [r6, #0]
 80095b0:	0606      	lsls	r6, r0, #24
 80095b2:	d501      	bpl.n	80095b8 <_printf_i+0xbc>
 80095b4:	681d      	ldr	r5, [r3, #0]
 80095b6:	e003      	b.n	80095c0 <_printf_i+0xc4>
 80095b8:	0645      	lsls	r5, r0, #25
 80095ba:	d5fb      	bpl.n	80095b4 <_printf_i+0xb8>
 80095bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	da03      	bge.n	80095cc <_printf_i+0xd0>
 80095c4:	232d      	movs	r3, #45	@ 0x2d
 80095c6:	426d      	negs	r5, r5
 80095c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095cc:	4859      	ldr	r0, [pc, #356]	@ (8009734 <_printf_i+0x238>)
 80095ce:	230a      	movs	r3, #10
 80095d0:	e011      	b.n	80095f6 <_printf_i+0xfa>
 80095d2:	6821      	ldr	r1, [r4, #0]
 80095d4:	6833      	ldr	r3, [r6, #0]
 80095d6:	0608      	lsls	r0, r1, #24
 80095d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80095dc:	d402      	bmi.n	80095e4 <_printf_i+0xe8>
 80095de:	0649      	lsls	r1, r1, #25
 80095e0:	bf48      	it	mi
 80095e2:	b2ad      	uxthmi	r5, r5
 80095e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80095e6:	4853      	ldr	r0, [pc, #332]	@ (8009734 <_printf_i+0x238>)
 80095e8:	6033      	str	r3, [r6, #0]
 80095ea:	bf14      	ite	ne
 80095ec:	230a      	movne	r3, #10
 80095ee:	2308      	moveq	r3, #8
 80095f0:	2100      	movs	r1, #0
 80095f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095f6:	6866      	ldr	r6, [r4, #4]
 80095f8:	60a6      	str	r6, [r4, #8]
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	bfa2      	ittt	ge
 80095fe:	6821      	ldrge	r1, [r4, #0]
 8009600:	f021 0104 	bicge.w	r1, r1, #4
 8009604:	6021      	strge	r1, [r4, #0]
 8009606:	b90d      	cbnz	r5, 800960c <_printf_i+0x110>
 8009608:	2e00      	cmp	r6, #0
 800960a:	d04b      	beq.n	80096a4 <_printf_i+0x1a8>
 800960c:	4616      	mov	r6, r2
 800960e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009612:	fb03 5711 	mls	r7, r3, r1, r5
 8009616:	5dc7      	ldrb	r7, [r0, r7]
 8009618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800961c:	462f      	mov	r7, r5
 800961e:	42bb      	cmp	r3, r7
 8009620:	460d      	mov	r5, r1
 8009622:	d9f4      	bls.n	800960e <_printf_i+0x112>
 8009624:	2b08      	cmp	r3, #8
 8009626:	d10b      	bne.n	8009640 <_printf_i+0x144>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	07df      	lsls	r7, r3, #31
 800962c:	d508      	bpl.n	8009640 <_printf_i+0x144>
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	6861      	ldr	r1, [r4, #4]
 8009632:	4299      	cmp	r1, r3
 8009634:	bfde      	ittt	le
 8009636:	2330      	movle	r3, #48	@ 0x30
 8009638:	f806 3c01 	strble.w	r3, [r6, #-1]
 800963c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009640:	1b92      	subs	r2, r2, r6
 8009642:	6122      	str	r2, [r4, #16]
 8009644:	f8cd a000 	str.w	sl, [sp]
 8009648:	464b      	mov	r3, r9
 800964a:	aa03      	add	r2, sp, #12
 800964c:	4621      	mov	r1, r4
 800964e:	4640      	mov	r0, r8
 8009650:	f7ff fee6 	bl	8009420 <_printf_common>
 8009654:	3001      	adds	r0, #1
 8009656:	d14a      	bne.n	80096ee <_printf_i+0x1f2>
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	b004      	add	sp, #16
 800965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	f043 0320 	orr.w	r3, r3, #32
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	4833      	ldr	r0, [pc, #204]	@ (8009738 <_printf_i+0x23c>)
 800966c:	2778      	movs	r7, #120	@ 0x78
 800966e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	6831      	ldr	r1, [r6, #0]
 8009676:	061f      	lsls	r7, r3, #24
 8009678:	f851 5b04 	ldr.w	r5, [r1], #4
 800967c:	d402      	bmi.n	8009684 <_printf_i+0x188>
 800967e:	065f      	lsls	r7, r3, #25
 8009680:	bf48      	it	mi
 8009682:	b2ad      	uxthmi	r5, r5
 8009684:	6031      	str	r1, [r6, #0]
 8009686:	07d9      	lsls	r1, r3, #31
 8009688:	bf44      	itt	mi
 800968a:	f043 0320 	orrmi.w	r3, r3, #32
 800968e:	6023      	strmi	r3, [r4, #0]
 8009690:	b11d      	cbz	r5, 800969a <_printf_i+0x19e>
 8009692:	2310      	movs	r3, #16
 8009694:	e7ac      	b.n	80095f0 <_printf_i+0xf4>
 8009696:	4827      	ldr	r0, [pc, #156]	@ (8009734 <_printf_i+0x238>)
 8009698:	e7e9      	b.n	800966e <_printf_i+0x172>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	f023 0320 	bic.w	r3, r3, #32
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	e7f6      	b.n	8009692 <_printf_i+0x196>
 80096a4:	4616      	mov	r6, r2
 80096a6:	e7bd      	b.n	8009624 <_printf_i+0x128>
 80096a8:	6833      	ldr	r3, [r6, #0]
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	6961      	ldr	r1, [r4, #20]
 80096ae:	1d18      	adds	r0, r3, #4
 80096b0:	6030      	str	r0, [r6, #0]
 80096b2:	062e      	lsls	r6, r5, #24
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	d501      	bpl.n	80096bc <_printf_i+0x1c0>
 80096b8:	6019      	str	r1, [r3, #0]
 80096ba:	e002      	b.n	80096c2 <_printf_i+0x1c6>
 80096bc:	0668      	lsls	r0, r5, #25
 80096be:	d5fb      	bpl.n	80096b8 <_printf_i+0x1bc>
 80096c0:	8019      	strh	r1, [r3, #0]
 80096c2:	2300      	movs	r3, #0
 80096c4:	6123      	str	r3, [r4, #16]
 80096c6:	4616      	mov	r6, r2
 80096c8:	e7bc      	b.n	8009644 <_printf_i+0x148>
 80096ca:	6833      	ldr	r3, [r6, #0]
 80096cc:	1d1a      	adds	r2, r3, #4
 80096ce:	6032      	str	r2, [r6, #0]
 80096d0:	681e      	ldr	r6, [r3, #0]
 80096d2:	6862      	ldr	r2, [r4, #4]
 80096d4:	2100      	movs	r1, #0
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7f6 fd52 	bl	8000180 <memchr>
 80096dc:	b108      	cbz	r0, 80096e2 <_printf_i+0x1e6>
 80096de:	1b80      	subs	r0, r0, r6
 80096e0:	6060      	str	r0, [r4, #4]
 80096e2:	6863      	ldr	r3, [r4, #4]
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	2300      	movs	r3, #0
 80096e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ec:	e7aa      	b.n	8009644 <_printf_i+0x148>
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	4632      	mov	r2, r6
 80096f2:	4649      	mov	r1, r9
 80096f4:	4640      	mov	r0, r8
 80096f6:	47d0      	blx	sl
 80096f8:	3001      	adds	r0, #1
 80096fa:	d0ad      	beq.n	8009658 <_printf_i+0x15c>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	079b      	lsls	r3, r3, #30
 8009700:	d413      	bmi.n	800972a <_printf_i+0x22e>
 8009702:	68e0      	ldr	r0, [r4, #12]
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	4298      	cmp	r0, r3
 8009708:	bfb8      	it	lt
 800970a:	4618      	movlt	r0, r3
 800970c:	e7a6      	b.n	800965c <_printf_i+0x160>
 800970e:	2301      	movs	r3, #1
 8009710:	4632      	mov	r2, r6
 8009712:	4649      	mov	r1, r9
 8009714:	4640      	mov	r0, r8
 8009716:	47d0      	blx	sl
 8009718:	3001      	adds	r0, #1
 800971a:	d09d      	beq.n	8009658 <_printf_i+0x15c>
 800971c:	3501      	adds	r5, #1
 800971e:	68e3      	ldr	r3, [r4, #12]
 8009720:	9903      	ldr	r1, [sp, #12]
 8009722:	1a5b      	subs	r3, r3, r1
 8009724:	42ab      	cmp	r3, r5
 8009726:	dcf2      	bgt.n	800970e <_printf_i+0x212>
 8009728:	e7eb      	b.n	8009702 <_printf_i+0x206>
 800972a:	2500      	movs	r5, #0
 800972c:	f104 0619 	add.w	r6, r4, #25
 8009730:	e7f5      	b.n	800971e <_printf_i+0x222>
 8009732:	bf00      	nop
 8009734:	08009b05 	.word	0x08009b05
 8009738:	08009b16 	.word	0x08009b16

0800973c <__sflush_r>:
 800973c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	0716      	lsls	r6, r2, #28
 8009746:	4605      	mov	r5, r0
 8009748:	460c      	mov	r4, r1
 800974a:	d454      	bmi.n	80097f6 <__sflush_r+0xba>
 800974c:	684b      	ldr	r3, [r1, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	dc02      	bgt.n	8009758 <__sflush_r+0x1c>
 8009752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd48      	ble.n	80097ea <__sflush_r+0xae>
 8009758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800975a:	2e00      	cmp	r6, #0
 800975c:	d045      	beq.n	80097ea <__sflush_r+0xae>
 800975e:	2300      	movs	r3, #0
 8009760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009764:	682f      	ldr	r7, [r5, #0]
 8009766:	6a21      	ldr	r1, [r4, #32]
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	d030      	beq.n	80097ce <__sflush_r+0x92>
 800976c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	0759      	lsls	r1, r3, #29
 8009772:	d505      	bpl.n	8009780 <__sflush_r+0x44>
 8009774:	6863      	ldr	r3, [r4, #4]
 8009776:	1ad2      	subs	r2, r2, r3
 8009778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800977a:	b10b      	cbz	r3, 8009780 <__sflush_r+0x44>
 800977c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	2300      	movs	r3, #0
 8009782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009784:	6a21      	ldr	r1, [r4, #32]
 8009786:	4628      	mov	r0, r5
 8009788:	47b0      	blx	r6
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	d106      	bne.n	800979e <__sflush_r+0x62>
 8009790:	6829      	ldr	r1, [r5, #0]
 8009792:	291d      	cmp	r1, #29
 8009794:	d82b      	bhi.n	80097ee <__sflush_r+0xb2>
 8009796:	4a2a      	ldr	r2, [pc, #168]	@ (8009840 <__sflush_r+0x104>)
 8009798:	410a      	asrs	r2, r1
 800979a:	07d6      	lsls	r6, r2, #31
 800979c:	d427      	bmi.n	80097ee <__sflush_r+0xb2>
 800979e:	2200      	movs	r2, #0
 80097a0:	6062      	str	r2, [r4, #4]
 80097a2:	04d9      	lsls	r1, r3, #19
 80097a4:	6922      	ldr	r2, [r4, #16]
 80097a6:	6022      	str	r2, [r4, #0]
 80097a8:	d504      	bpl.n	80097b4 <__sflush_r+0x78>
 80097aa:	1c42      	adds	r2, r0, #1
 80097ac:	d101      	bne.n	80097b2 <__sflush_r+0x76>
 80097ae:	682b      	ldr	r3, [r5, #0]
 80097b0:	b903      	cbnz	r3, 80097b4 <__sflush_r+0x78>
 80097b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80097b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097b6:	602f      	str	r7, [r5, #0]
 80097b8:	b1b9      	cbz	r1, 80097ea <__sflush_r+0xae>
 80097ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097be:	4299      	cmp	r1, r3
 80097c0:	d002      	beq.n	80097c8 <__sflush_r+0x8c>
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7ff fca0 	bl	8009108 <_free_r>
 80097c8:	2300      	movs	r3, #0
 80097ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80097cc:	e00d      	b.n	80097ea <__sflush_r+0xae>
 80097ce:	2301      	movs	r3, #1
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b0      	blx	r6
 80097d4:	4602      	mov	r2, r0
 80097d6:	1c50      	adds	r0, r2, #1
 80097d8:	d1c9      	bne.n	800976e <__sflush_r+0x32>
 80097da:	682b      	ldr	r3, [r5, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0c6      	beq.n	800976e <__sflush_r+0x32>
 80097e0:	2b1d      	cmp	r3, #29
 80097e2:	d001      	beq.n	80097e8 <__sflush_r+0xac>
 80097e4:	2b16      	cmp	r3, #22
 80097e6:	d11e      	bne.n	8009826 <__sflush_r+0xea>
 80097e8:	602f      	str	r7, [r5, #0]
 80097ea:	2000      	movs	r0, #0
 80097ec:	e022      	b.n	8009834 <__sflush_r+0xf8>
 80097ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f2:	b21b      	sxth	r3, r3
 80097f4:	e01b      	b.n	800982e <__sflush_r+0xf2>
 80097f6:	690f      	ldr	r7, [r1, #16]
 80097f8:	2f00      	cmp	r7, #0
 80097fa:	d0f6      	beq.n	80097ea <__sflush_r+0xae>
 80097fc:	0793      	lsls	r3, r2, #30
 80097fe:	680e      	ldr	r6, [r1, #0]
 8009800:	bf08      	it	eq
 8009802:	694b      	ldreq	r3, [r1, #20]
 8009804:	600f      	str	r7, [r1, #0]
 8009806:	bf18      	it	ne
 8009808:	2300      	movne	r3, #0
 800980a:	eba6 0807 	sub.w	r8, r6, r7
 800980e:	608b      	str	r3, [r1, #8]
 8009810:	f1b8 0f00 	cmp.w	r8, #0
 8009814:	dde9      	ble.n	80097ea <__sflush_r+0xae>
 8009816:	6a21      	ldr	r1, [r4, #32]
 8009818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800981a:	4643      	mov	r3, r8
 800981c:	463a      	mov	r2, r7
 800981e:	4628      	mov	r0, r5
 8009820:	47b0      	blx	r6
 8009822:	2800      	cmp	r0, #0
 8009824:	dc08      	bgt.n	8009838 <__sflush_r+0xfc>
 8009826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800982a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	4407      	add	r7, r0
 800983a:	eba8 0800 	sub.w	r8, r8, r0
 800983e:	e7e7      	b.n	8009810 <__sflush_r+0xd4>
 8009840:	dfbffffe 	.word	0xdfbffffe

08009844 <_fflush_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	690b      	ldr	r3, [r1, #16]
 8009848:	4605      	mov	r5, r0
 800984a:	460c      	mov	r4, r1
 800984c:	b913      	cbnz	r3, 8009854 <_fflush_r+0x10>
 800984e:	2500      	movs	r5, #0
 8009850:	4628      	mov	r0, r5
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	b118      	cbz	r0, 800985e <_fflush_r+0x1a>
 8009856:	6a03      	ldr	r3, [r0, #32]
 8009858:	b90b      	cbnz	r3, 800985e <_fflush_r+0x1a>
 800985a:	f7ff f997 	bl	8008b8c <__sinit>
 800985e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f3      	beq.n	800984e <_fflush_r+0xa>
 8009866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009868:	07d0      	lsls	r0, r2, #31
 800986a:	d404      	bmi.n	8009876 <_fflush_r+0x32>
 800986c:	0599      	lsls	r1, r3, #22
 800986e:	d402      	bmi.n	8009876 <_fflush_r+0x32>
 8009870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009872:	f7ff fc46 	bl	8009102 <__retarget_lock_acquire_recursive>
 8009876:	4628      	mov	r0, r5
 8009878:	4621      	mov	r1, r4
 800987a:	f7ff ff5f 	bl	800973c <__sflush_r>
 800987e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009880:	07da      	lsls	r2, r3, #31
 8009882:	4605      	mov	r5, r0
 8009884:	d4e4      	bmi.n	8009850 <_fflush_r+0xc>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	059b      	lsls	r3, r3, #22
 800988a:	d4e1      	bmi.n	8009850 <_fflush_r+0xc>
 800988c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800988e:	f7ff fc39 	bl	8009104 <__retarget_lock_release_recursive>
 8009892:	e7dd      	b.n	8009850 <_fflush_r+0xc>

08009894 <__swhatbuf_r>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	460c      	mov	r4, r1
 8009898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989c:	2900      	cmp	r1, #0
 800989e:	b096      	sub	sp, #88	@ 0x58
 80098a0:	4615      	mov	r5, r2
 80098a2:	461e      	mov	r6, r3
 80098a4:	da0d      	bge.n	80098c2 <__swhatbuf_r+0x2e>
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098ac:	f04f 0100 	mov.w	r1, #0
 80098b0:	bf14      	ite	ne
 80098b2:	2340      	movne	r3, #64	@ 0x40
 80098b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098b8:	2000      	movs	r0, #0
 80098ba:	6031      	str	r1, [r6, #0]
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	b016      	add	sp, #88	@ 0x58
 80098c0:	bd70      	pop	{r4, r5, r6, pc}
 80098c2:	466a      	mov	r2, sp
 80098c4:	f000 f848 	bl	8009958 <_fstat_r>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	dbec      	blt.n	80098a6 <__swhatbuf_r+0x12>
 80098cc:	9901      	ldr	r1, [sp, #4]
 80098ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098d6:	4259      	negs	r1, r3
 80098d8:	4159      	adcs	r1, r3
 80098da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098de:	e7eb      	b.n	80098b8 <__swhatbuf_r+0x24>

080098e0 <__smakebuf_r>:
 80098e0:	898b      	ldrh	r3, [r1, #12]
 80098e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098e4:	079d      	lsls	r5, r3, #30
 80098e6:	4606      	mov	r6, r0
 80098e8:	460c      	mov	r4, r1
 80098ea:	d507      	bpl.n	80098fc <__smakebuf_r+0x1c>
 80098ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	6123      	str	r3, [r4, #16]
 80098f4:	2301      	movs	r3, #1
 80098f6:	6163      	str	r3, [r4, #20]
 80098f8:	b003      	add	sp, #12
 80098fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fc:	ab01      	add	r3, sp, #4
 80098fe:	466a      	mov	r2, sp
 8009900:	f7ff ffc8 	bl	8009894 <__swhatbuf_r>
 8009904:	9f00      	ldr	r7, [sp, #0]
 8009906:	4605      	mov	r5, r0
 8009908:	4639      	mov	r1, r7
 800990a:	4630      	mov	r0, r6
 800990c:	f7ff f826 	bl	800895c <_malloc_r>
 8009910:	b948      	cbnz	r0, 8009926 <__smakebuf_r+0x46>
 8009912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009916:	059a      	lsls	r2, r3, #22
 8009918:	d4ee      	bmi.n	80098f8 <__smakebuf_r+0x18>
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	f043 0302 	orr.w	r3, r3, #2
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	e7e2      	b.n	80098ec <__smakebuf_r+0xc>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	6020      	str	r0, [r4, #0]
 800992a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	9b01      	ldr	r3, [sp, #4]
 8009932:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009936:	b15b      	cbz	r3, 8009950 <__smakebuf_r+0x70>
 8009938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f81d 	bl	800997c <_isatty_r>
 8009942:	b128      	cbz	r0, 8009950 <__smakebuf_r+0x70>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f023 0303 	bic.w	r3, r3, #3
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	431d      	orrs	r5, r3
 8009954:	81a5      	strh	r5, [r4, #12]
 8009956:	e7cf      	b.n	80098f8 <__smakebuf_r+0x18>

08009958 <_fstat_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	@ (8009978 <_fstat_r+0x20>)
 800995c:	2300      	movs	r3, #0
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	4611      	mov	r1, r2
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	f7f7 fd42 	bl	80013ee <_fstat>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	d102      	bne.n	8009974 <_fstat_r+0x1c>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	b103      	cbz	r3, 8009974 <_fstat_r+0x1c>
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	bd38      	pop	{r3, r4, r5, pc}
 8009976:	bf00      	nop
 8009978:	20000538 	.word	0x20000538

0800997c <_isatty_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_isatty_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f7 fd41 	bl	800140e <_isatty>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_isatty_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_isatty_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20000538 	.word	0x20000538

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
