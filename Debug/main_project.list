
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c74  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001160  08018db8  08018db8  00019db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019f18  08019f18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019f20  08019f20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019f24  08019f24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f0  20000008  08019f28  0001b008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200000f8  0801a018  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000920  20000110  0801a029  0001b110  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20000a30  0801a029  0001ba30  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  0001cb5a  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  0001d000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  0001d000  2**2
                  ALLOC
 13 .MB_MEM2      00000a76  200300e4  0801a029  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .debug_info   00052f58  00000000  00000000  0001cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000087be  00000000  00000000  0006fae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 0000420c  00000000  00000000  000782a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000269f  00000000  00000000  0007c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f952  00000000  00000000  0007eb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046cd7  00000000  00000000  000ae4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011bb0b  00000000  00000000  000f517c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00008cbb  00000000  00000000  00210c87  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  00000396  00000000  00000000  00219942  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000044  00000000  00000000  00219cd8  2**2
                  CONTENTS, READONLY
 24 .debug_frame  0000fc88  00000000  00000000  00219d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000063  00000000  00000000  002299a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00003203  00000000  00000000  00229a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000945  00000000  00000000  0022cc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00008035  00000000  00000000  0022d54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 00001a87  00000000  00000000  00235584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000048  00000000  00000000  0023700b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000110 	.word	0x20000110
 800015c:	00000000 	.word	0x00000000
 8000160:	08018d9c 	.word	0x08018d9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000114 	.word	0x20000114
 800017c:	08018d9c 	.word	0x08018d9c

08000180 <ZbZclAttrAddSorted>:
 8000180:	b430      	push	{r4, r5}
 8000182:	0002      	movs	r2, r0
 8000184:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000186:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 800018a:	42a0      	cmp	r0, r4
 800018c:	d001      	beq.n	8000192 <??ZbZclAttrAddSorted_0>
 800018e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000190:	e000      	b.n	8000194 <??ZbZclAttrAddSorted_1>

08000192 <??ZbZclAttrAddSorted_0>:
 8000192:	2000      	movs	r0, #0

08000194 <??ZbZclAttrAddSorted_1>:
 8000194:	2800      	cmp	r0, #0
 8000196:	d017      	beq.n	80001c8 <??ZbZclAttrAddSorted_2>
 8000198:	0003      	movs	r3, r0
 800019a:	688c      	ldr	r4, [r1, #8]
 800019c:	8824      	ldrh	r4, [r4, #0]
 800019e:	689d      	ldr	r5, [r3, #8]
 80001a0:	882d      	ldrh	r5, [r5, #0]
 80001a2:	42ac      	cmp	r4, r5
 80001a4:	d207      	bcs.n	80001b6 <??ZbZclAttrAddSorted_3>
 80001a6:	600b      	str	r3, [r1, #0]
 80001a8:	685c      	ldr	r4, [r3, #4]
 80001aa:	604c      	str	r4, [r1, #4]
 80001ac:	680c      	ldr	r4, [r1, #0]
 80001ae:	6061      	str	r1, [r4, #4]
 80001b0:	684c      	ldr	r4, [r1, #4]
 80001b2:	6021      	str	r1, [r4, #0]
 80001b4:	e011      	b.n	80001da <??ZbZclAttrAddSorted_4>

080001b6 <??ZbZclAttrAddSorted_3>:
 80001b6:	6804      	ldr	r4, [r0, #0]
 80001b8:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 80001bc:	42ac      	cmp	r4, r5
 80001be:	d001      	beq.n	80001c4 <??ZbZclAttrAddSorted_5>
 80001c0:	6800      	ldr	r0, [r0, #0]
 80001c2:	e7e7      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c4 <??ZbZclAttrAddSorted_5>:
 80001c4:	2000      	movs	r0, #0
 80001c6:	e7e5      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c8 <??ZbZclAttrAddSorted_2>:
 80001c8:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80001cc:	600c      	str	r4, [r1, #0]
 80001ce:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80001d0:	604c      	str	r4, [r1, #4]
 80001d2:	680c      	ldr	r4, [r1, #0]
 80001d4:	6061      	str	r1, [r4, #4]
 80001d6:	684c      	ldr	r4, [r1, #4]
 80001d8:	6021      	str	r1, [r4, #0]

080001da <??ZbZclAttrAddSorted_4>:
 80001da:	bc30      	pop	{r4, r5}
 80001dc:	4770      	bx	lr

080001de <ZbZclAttrFind>:
 80001de:	b430      	push	{r4, r5}
 80001e0:	0003      	movs	r3, r0
 80001e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80001e4:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 80001e8:	4290      	cmp	r0, r2
 80001ea:	d001      	beq.n	80001f0 <??ZbZclAttrFind_0>
 80001ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001ee:	e000      	b.n	80001f2 <??ZbZclAttrFind_1>

080001f0 <??ZbZclAttrFind_0>:
 80001f0:	2200      	movs	r2, #0

080001f2 <??ZbZclAttrFind_1>:
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d012      	beq.n	800021c <??ZbZclAttrFind_2>
 80001f6:	0014      	movs	r4, r2
 80001f8:	68a0      	ldr	r0, [r4, #8]
 80001fa:	8800      	ldrh	r0, [r0, #0]
 80001fc:	000d      	movs	r5, r1
 80001fe:	b2ad      	uxth	r5, r5
 8000200:	42a8      	cmp	r0, r5
 8000202:	d005      	beq.n	8000210 <??ZbZclAttrFind_3>
 8000204:	6810      	ldr	r0, [r2, #0]
 8000206:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 800020a:	42a8      	cmp	r0, r5
 800020c:	d004      	beq.n	8000218 <??ZbZclAttrFind_4>
 800020e:	e001      	b.n	8000214 <??ZbZclAttrFind_5>

08000210 <??ZbZclAttrFind_3>:
 8000210:	0020      	movs	r0, r4
 8000212:	e004      	b.n	800021e <??ZbZclAttrFind_6>

08000214 <??ZbZclAttrFind_5>:
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	e7ec      	b.n	80001f2 <??ZbZclAttrFind_1>

08000218 <??ZbZclAttrFind_4>:
 8000218:	2200      	movs	r2, #0
 800021a:	e7ea      	b.n	80001f2 <??ZbZclAttrFind_1>

0800021c <??ZbZclAttrFind_2>:
 800021c:	2000      	movs	r0, #0

0800021e <??ZbZclAttrFind_6>:
 800021e:	bc30      	pop	{r4, r5}
 8000220:	4770      	bx	lr

08000222 <ZbZclAttrHandleDiscover>:
 8000222:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000226:	b09f      	sub	sp, #124	@ 0x7c
 8000228:	0004      	movs	r4, r0
 800022a:	000d      	movs	r5, r1
 800022c:	0016      	movs	r6, r2
 800022e:	2708      	movs	r7, #8
 8000230:	f05f 0800 	movs.w	r8, #0
 8000234:	f10d 0908 	add.w	r9, sp, #8
 8000238:	4642      	mov	r2, r8
 800023a:	0039      	movs	r1, r7
 800023c:	4648      	mov	r0, r9
 800023e:	f007 fd6b 	bl	8007d18 <__aeabi_memset>
 8000242:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000244:	2803      	cmp	r0, #3
 8000246:	d206      	bcs.n	8000256 <??ZbZclAttrHandleDiscover_0>
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	002a      	movs	r2, r5
 800024c:	0031      	movs	r1, r6
 800024e:	0020      	movs	r0, r4
 8000250:	f013 f866 	bl	8013320 <ZbZclSendDefaultResponse>
 8000254:	e070      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000256 <??ZbZclAttrHandleDiscover_0>:
 8000256:	f05f 0800 	movs.w	r8, #0
 800025a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800025c:	4641      	mov	r1, r8
 800025e:	b2c9      	uxtb	r1, r1
 8000260:	4408      	add	r0, r1
 8000262:	f006 ff2e 	bl	80070c2 <pletoh16>
 8000266:	0007      	movs	r7, r0
 8000268:	f118 0802 	adds.w	r8, r8, #2
 800026c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800026e:	4641      	mov	r1, r8
 8000270:	b2c9      	uxtb	r1, r1
 8000272:	5c40      	ldrb	r0, [r0, r1]
 8000274:	f88d 0004 	strb.w	r0, [sp, #4]
 8000278:	f118 0801 	adds.w	r8, r8, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f88d 0008 	strb.w	r0, [sp, #8]
 8000282:	7868      	ldrb	r0, [r5, #1]
 8000284:	f88d 0009 	strb.w	r0, [sp, #9]
 8000288:	78a8      	ldrb	r0, [r5, #2]
 800028a:	2800      	cmp	r0, #0
 800028c:	d101      	bne.n	8000292 <??ZbZclAttrHandleDiscover_2>
 800028e:	2001      	movs	r0, #1
 8000290:	e000      	b.n	8000294 <??ZbZclAttrHandleDiscover_3>

08000292 <??ZbZclAttrHandleDiscover_2>:
 8000292:	2000      	movs	r0, #0

08000294 <??ZbZclAttrHandleDiscover_3>:
 8000294:	f88d 000a 	strb.w	r0, [sp, #10]
 8000298:	2001      	movs	r0, #1
 800029a:	f88d 000b 	strb.w	r0, [sp, #11]
 800029e:	88a8      	ldrh	r0, [r5, #4]
 80002a0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80002a4:	79a8      	ldrb	r0, [r5, #6]
 80002a6:	f88d 000e 	strb.w	r0, [sp, #14]
 80002aa:	200d      	movs	r0, #13
 80002ac:	f88d 000f 	strb.w	r0, [sp, #15]
 80002b0:	2239      	movs	r2, #57	@ 0x39
 80002b2:	a910      	add	r1, sp, #64	@ 0x40
 80002b4:	a802      	add	r0, sp, #8
 80002b6:	f006 f969 	bl	800658c <ZbZclAppendHeader>
 80002ba:	4682      	mov	sl, r0
 80002bc:	f1ba 0f00 	cmp.w	sl, #0
 80002c0:	d506      	bpl.n	80002d0 <??ZbZclAttrHandleDiscover_4>
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	002a      	movs	r2, r5
 80002c6:	0031      	movs	r1, r6
 80002c8:	0020      	movs	r0, r4
 80002ca:	f013 f829 	bl	8013320 <ZbZclSendDefaultResponse>
 80002ce:	e033      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

080002d0 <??ZbZclAttrHandleDiscover_4>:
 80002d0:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 80002d4:	9000      	str	r0, [sp, #0]
 80002d6:	a810      	add	r0, sp, #64	@ 0x40
 80002d8:	eb00 030a 	add.w	r3, r0, sl
 80002dc:	aa01      	add	r2, sp, #4
 80002de:	0039      	movs	r1, r7
 80002e0:	b289      	uxth	r1, r1
 80002e2:	0020      	movs	r0, r4
 80002e4:	f000 f82b 	bl	800033e <ZbZclAttrDiscoverGetList>
 80002e8:	4681      	mov	r9, r0
 80002ea:	eb19 090a 	adds.w	r9, r9, sl
 80002ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d104      	bne.n	8000300 <??ZbZclAttrHandleDiscover_5>
 80002f6:	0030      	movs	r0, r6
 80002f8:	f012 fbec 	bl	8012ad4 <ZbApsAddrIsBcast>
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d11b      	bne.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000300 <??ZbZclAttrHandleDiscover_5>:
 8000300:	0032      	movs	r2, r6
 8000302:	a904      	add	r1, sp, #16
 8000304:	0020      	movs	r0, r4
 8000306:	f003 fd18 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 800030a:	a804      	add	r0, sp, #16
 800030c:	f116 0110 	adds.w	r1, r6, #16
 8000310:	2210      	movs	r2, #16
 8000312:	f016 ff98 	bl	8017246 <__aeabi_memcpy>
 8000316:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800031a:	f003 fca6 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 800031e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000322:	a810      	add	r0, sp, #64	@ 0x40
 8000324:	900a      	str	r0, [sp, #40]	@ 0x28
 8000326:	4648      	mov	r0, r9
 8000328:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800032c:	2300      	movs	r3, #0
 800032e:	2200      	movs	r2, #0
 8000330:	a904      	add	r1, sp, #16
 8000332:	68a0      	ldr	r0, [r4, #8]
 8000334:	f012 fb54 	bl	80129e0 <ZbApsdeDataReqCallback>

08000338 <??ZbZclAttrHandleDiscover_1>:
 8000338:	b020      	add	sp, #128	@ 0x80
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800033e <ZbZclAttrDiscoverGetList>:
 800033e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000342:	0005      	movs	r5, r0
 8000344:	0016      	movs	r6, r2
 8000346:	001f      	movs	r7, r3
 8000348:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800034c:	f05f 0a00 	movs.w	sl, #0
 8000350:	f05f 0b00 	movs.w	fp, #0
 8000354:	2000      	movs	r0, #0
 8000356:	f807 000b 	strb.w	r0, [r7, fp]
 800035a:	f11b 0b01 	adds.w	fp, fp, #1
 800035e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8000360:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8000364:	4288      	cmp	r0, r1
 8000366:	d001      	beq.n	800036c <??ZbZclAttrDiscoverGetList_0>
 8000368:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800036a:	e000      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

0800036c <??ZbZclAttrDiscoverGetList_0>:
 800036c:	2400      	movs	r4, #0

0800036e <??ZbZclAttrDiscoverGetList_1>:
 800036e:	2c00      	cmp	r4, #0
 8000370:	d030      	beq.n	80003d4 <??ZbZclAttrDiscoverGetList_2>
 8000372:	46a1      	mov	r9, r4
 8000374:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000378:	8800      	ldrh	r0, [r0, #0]
 800037a:	f8bd 1000 	ldrh.w	r1, [sp]
 800037e:	4288      	cmp	r0, r1
 8000380:	d31f      	bcc.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

08000382 <??ZbZclAttrDiscoverGetList_4>:
 8000382:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000386:	8880      	ldrh	r0, [r0, #4]
 8000388:	0400      	lsls	r0, r0, #16
 800038a:	d41a      	bmi.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

0800038c <??ZbZclAttrDiscoverGetList_5>:
 800038c:	4650      	mov	r0, sl
 800038e:	7831      	ldrb	r1, [r6, #0]
 8000390:	b2c0      	uxtb	r0, r0
 8000392:	4288      	cmp	r0, r1
 8000394:	d21e      	bcs.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

08000396 <??ZbZclAttrDiscoverGetList_6>:
 8000396:	f11b 0003 	adds.w	r0, fp, #3
 800039a:	4580      	cmp	r8, r0
 800039c:	d31a      	bcc.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

0800039e <??ZbZclAttrDiscoverGetList_7>:
 800039e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003a2:	8801      	ldrh	r1, [r0, #0]
 80003a4:	eb07 000b 	add.w	r0, r7, fp
 80003a8:	f006 fed7 	bl	800715a <putle16>
 80003ac:	f11b 0b02 	adds.w	fp, fp, #2
 80003b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003b4:	7880      	ldrb	r0, [r0, #2]
 80003b6:	f807 000b 	strb.w	r0, [r7, fp]
 80003ba:	f11b 0b01 	adds.w	fp, fp, #1
 80003be:	f11a 0a01 	adds.w	sl, sl, #1

080003c2 <??ZbZclAttrDiscoverGetList_3>:
 80003c2:	6820      	ldr	r0, [r4, #0]
 80003c4:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80003c8:	4288      	cmp	r0, r1
 80003ca:	d001      	beq.n	80003d0 <??ZbZclAttrDiscoverGetList_8>
 80003cc:	6824      	ldr	r4, [r4, #0]
 80003ce:	e7ce      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d0 <??ZbZclAttrDiscoverGetList_8>:
 80003d0:	2400      	movs	r4, #0
 80003d2:	e7cc      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d4 <??ZbZclAttrDiscoverGetList_2>:
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d101      	bne.n	80003dc <??ZbZclAttrDiscoverGetList_9>
 80003d8:	2001      	movs	r0, #1
 80003da:	7038      	strb	r0, [r7, #0]

080003dc <??ZbZclAttrDiscoverGetList_9>:
 80003dc:	f886 a000 	strb.w	sl, [r6]
 80003e0:	4658      	mov	r0, fp
 80003e2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003e6 <ZbZclAttrRead>:
 80003e6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	4680      	mov	r8, r0
 80003ee:	0014      	movs	r4, r2
 80003f0:	001d      	movs	r5, r3
 80003f2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80003f4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80003f8:	4640      	mov	r0, r8
 80003fa:	f7ff fef0 	bl	80001de <ZbZclAttrFind>
 80003fe:	0007      	movs	r7, r0
 8000400:	2f00      	cmp	r7, #0
 8000402:	d101      	bne.n	8000408 <??ZbZclAttrRead_0>
 8000404:	2086      	movs	r0, #134	@ 0x86
 8000406:	e03c      	b.n	8000482 <??ZbZclAttrRead_1>

08000408 <??ZbZclAttrRead_0>:
 8000408:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800040c:	2800      	cmp	r0, #0
 800040e:	d005      	beq.n	800041c <??ZbZclAttrRead_2>
 8000410:	68b8      	ldr	r0, [r7, #8]
 8000412:	7900      	ldrb	r0, [r0, #4]
 8000414:	0780      	lsls	r0, r0, #30
 8000416:	d401      	bmi.n	800041c <??ZbZclAttrRead_2>
 8000418:	208c      	movs	r0, #140	@ 0x8c
 800041a:	e032      	b.n	8000482 <??ZbZclAttrRead_1>

0800041c <??ZbZclAttrRead_2>:
 800041c:	2c00      	cmp	r4, #0
 800041e:	d002      	beq.n	8000426 <??ZbZclAttrRead_3>
 8000420:	68b8      	ldr	r0, [r7, #8]
 8000422:	7880      	ldrb	r0, [r0, #2]
 8000424:	7020      	strb	r0, [r4, #0]

08000426 <??ZbZclAttrRead_3>:
 8000426:	2d00      	cmp	r5, #0
 8000428:	d001      	beq.n	800042e <??ZbZclAttrRead_4>
 800042a:	2e00      	cmp	r6, #0
 800042c:	d105      	bne.n	800043a <??ZbZclAttrRead_5>

0800042e <??ZbZclAttrRead_4>:
 800042e:	2c00      	cmp	r4, #0
 8000430:	d001      	beq.n	8000436 <??ZbZclAttrRead_6>
 8000432:	2000      	movs	r0, #0
 8000434:	e025      	b.n	8000482 <??ZbZclAttrRead_1>

08000436 <??ZbZclAttrRead_6>:
 8000436:	2089      	movs	r0, #137	@ 0x89
 8000438:	e023      	b.n	8000482 <??ZbZclAttrRead_1>

0800043a <??ZbZclAttrRead_5>:
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	7900      	ldrb	r0, [r0, #4]
 800043e:	06c0      	lsls	r0, r0, #27
 8000440:	d519      	bpl.n	8000476 <??ZbZclAttrRead_7>
 8000442:	f05f 0920 	movs.w	r9, #32
 8000446:	f05f 0a00 	movs.w	sl, #0
 800044a:	46eb      	mov	fp, sp
 800044c:	4652      	mov	r2, sl
 800044e:	4649      	mov	r1, r9
 8000450:	4658      	mov	r0, fp
 8000452:	f007 fc61 	bl	8007d18 <__aeabi_memset>
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	2000      	movs	r0, #0
 800045c:	f88d 0004 	strb.w	r0, [sp, #4]
 8000460:	9502      	str	r5, [sp, #8]
 8000462:	9603      	str	r6, [sp, #12]
 8000464:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000468:	9007      	str	r0, [sp, #28]
 800046a:	466a      	mov	r2, sp
 800046c:	0039      	movs	r1, r7
 800046e:	4640      	mov	r0, r8
 8000470:	f001 fce6 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000474:	e005      	b.n	8000482 <??ZbZclAttrRead_1>

08000476 <??ZbZclAttrRead_7>:
 8000476:	0033      	movs	r3, r6
 8000478:	002a      	movs	r2, r5
 800047a:	0039      	movs	r1, r7
 800047c:	4640      	mov	r0, r8
 800047e:	f000 f803 	bl	8000488 <ZbZclAttrDefaultRead>

08000482 <??ZbZclAttrRead_1>:
 8000482:	b009      	add	sp, #36	@ 0x24
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000488 <ZbZclAttrDefaultRead>:
 8000488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800048c:	0005      	movs	r5, r0
 800048e:	000e      	movs	r6, r1
 8000490:	0017      	movs	r7, r2
 8000492:	001c      	movs	r4, r3
 8000494:	f05f 0800 	movs.w	r8, #0
 8000498:	f05f 0900 	movs.w	r9, #0
 800049c:	68b0      	ldr	r0, [r6, #8]
 800049e:	7880      	ldrb	r0, [r0, #2]
 80004a0:	2808      	cmp	r0, #8
 80004a2:	d065      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004a4:	2809      	cmp	r0, #9
 80004a6:	d06b      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004a8:	280a      	cmp	r0, #10
 80004aa:	d071      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004ac:	280b      	cmp	r0, #11
 80004ae:	d077      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004b0:	280c      	cmp	r0, #12
 80004b2:	d07d      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004b4:	280d      	cmp	r0, #13
 80004b6:	f000 8083 	beq.w	80005c0 <??ZbZclAttrDefaultRead_5>
 80004ba:	280e      	cmp	r0, #14
 80004bc:	f000 8088 	beq.w	80005d0 <??ZbZclAttrDefaultRead_6>
 80004c0:	280f      	cmp	r0, #15
 80004c2:	f000 808d 	beq.w	80005e0 <??ZbZclAttrDefaultRead_7>
 80004c6:	2810      	cmp	r0, #16
 80004c8:	d052      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ca:	2818      	cmp	r0, #24
 80004cc:	d050      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ce:	2819      	cmp	r0, #25
 80004d0:	d056      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004d2:	281a      	cmp	r0, #26
 80004d4:	d05c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004d6:	281b      	cmp	r0, #27
 80004d8:	d062      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004da:	281c      	cmp	r0, #28
 80004dc:	d068      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004de:	281d      	cmp	r0, #29
 80004e0:	d06e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 80004e2:	281e      	cmp	r0, #30
 80004e4:	d074      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 80004e6:	281f      	cmp	r0, #31
 80004e8:	d07a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 80004ea:	2820      	cmp	r0, #32
 80004ec:	d040      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ee:	2821      	cmp	r0, #33	@ 0x21
 80004f0:	d046      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004f2:	2822      	cmp	r0, #34	@ 0x22
 80004f4:	d04c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004f6:	2823      	cmp	r0, #35	@ 0x23
 80004f8:	d052      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004fa:	2824      	cmp	r0, #36	@ 0x24
 80004fc:	d058      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004fe:	2825      	cmp	r0, #37	@ 0x25
 8000500:	d05e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000502:	2826      	cmp	r0, #38	@ 0x26
 8000504:	d064      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000506:	2827      	cmp	r0, #39	@ 0x27
 8000508:	d06a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800050a:	2828      	cmp	r0, #40	@ 0x28
 800050c:	d030      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800050e:	2829      	cmp	r0, #41	@ 0x29
 8000510:	d036      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000512:	282a      	cmp	r0, #42	@ 0x2a
 8000514:	d03c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 8000516:	282b      	cmp	r0, #43	@ 0x2b
 8000518:	d042      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800051a:	282c      	cmp	r0, #44	@ 0x2c
 800051c:	d048      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 800051e:	282d      	cmp	r0, #45	@ 0x2d
 8000520:	d04e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000522:	282e      	cmp	r0, #46	@ 0x2e
 8000524:	d054      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000526:	282f      	cmp	r0, #47	@ 0x2f
 8000528:	d05a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800052a:	2830      	cmp	r0, #48	@ 0x30
 800052c:	d020      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800052e:	2831      	cmp	r0, #49	@ 0x31
 8000530:	d026      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000532:	2838      	cmp	r0, #56	@ 0x38
 8000534:	d024      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000536:	2839      	cmp	r0, #57	@ 0x39
 8000538:	d032      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800053a:	283a      	cmp	r0, #58	@ 0x3a
 800053c:	d050      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800053e:	2841      	cmp	r0, #65	@ 0x41
 8000540:	d05e      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000542:	2842      	cmp	r0, #66	@ 0x42
 8000544:	d05c      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000546:	2843      	cmp	r0, #67	@ 0x43
 8000548:	d071      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054a:	2844      	cmp	r0, #68	@ 0x44
 800054c:	d06f      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054e:	28e0      	cmp	r0, #224	@ 0xe0
 8000550:	d026      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000552:	28e1      	cmp	r0, #225	@ 0xe1
 8000554:	d024      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000556:	28e2      	cmp	r0, #226	@ 0xe2
 8000558:	d022      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800055a:	28e8      	cmp	r0, #232	@ 0xe8
 800055c:	d010      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 800055e:	28e9      	cmp	r0, #233	@ 0xe9
 8000560:	d00e      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000562:	28ea      	cmp	r0, #234	@ 0xea
 8000564:	d01c      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000566:	28f0      	cmp	r0, #240	@ 0xf0
 8000568:	d03a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800056a:	28f1      	cmp	r0, #241	@ 0xf1
 800056c:	d040      	beq.n	80005f0 <??ZbZclAttrDefaultRead_10>
 800056e:	e078      	b.n	8000662 <??ZbZclAttrDefaultRead_11>

08000570 <??ZbZclAttrDefaultRead_0>:
 8000570:	2c00      	cmp	r4, #0
 8000572:	d102      	bne.n	800057a <??ZbZclAttrDefaultRead_12>
 8000574:	2089      	movs	r0, #137	@ 0x89
 8000576:	4681      	mov	r9, r0
 8000578:	e075      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800057a <??ZbZclAttrDefaultRead_12>:
 800057a:	2001      	movs	r0, #1
 800057c:	4680      	mov	r8, r0
 800057e:	e072      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000580 <??ZbZclAttrDefaultRead_1>:
 8000580:	2c02      	cmp	r4, #2
 8000582:	d202      	bcs.n	800058a <??ZbZclAttrDefaultRead_14>
 8000584:	2089      	movs	r0, #137	@ 0x89
 8000586:	4681      	mov	r9, r0
 8000588:	e06d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800058a <??ZbZclAttrDefaultRead_14>:
 800058a:	2002      	movs	r0, #2
 800058c:	4680      	mov	r8, r0
 800058e:	e06a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000590 <??ZbZclAttrDefaultRead_2>:
 8000590:	2c03      	cmp	r4, #3
 8000592:	d202      	bcs.n	800059a <??ZbZclAttrDefaultRead_15>
 8000594:	2089      	movs	r0, #137	@ 0x89
 8000596:	4681      	mov	r9, r0
 8000598:	e065      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800059a <??ZbZclAttrDefaultRead_15>:
 800059a:	2003      	movs	r0, #3
 800059c:	4680      	mov	r8, r0
 800059e:	e062      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005a0 <??ZbZclAttrDefaultRead_3>:
 80005a0:	2c04      	cmp	r4, #4
 80005a2:	d202      	bcs.n	80005aa <??ZbZclAttrDefaultRead_16>
 80005a4:	2089      	movs	r0, #137	@ 0x89
 80005a6:	4681      	mov	r9, r0
 80005a8:	e05d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005aa <??ZbZclAttrDefaultRead_16>:
 80005aa:	2004      	movs	r0, #4
 80005ac:	4680      	mov	r8, r0
 80005ae:	e05a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005b0 <??ZbZclAttrDefaultRead_4>:
 80005b0:	2c05      	cmp	r4, #5
 80005b2:	d202      	bcs.n	80005ba <??ZbZclAttrDefaultRead_17>
 80005b4:	2089      	movs	r0, #137	@ 0x89
 80005b6:	4681      	mov	r9, r0
 80005b8:	e055      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ba <??ZbZclAttrDefaultRead_17>:
 80005ba:	2005      	movs	r0, #5
 80005bc:	4680      	mov	r8, r0
 80005be:	e052      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005c0 <??ZbZclAttrDefaultRead_5>:
 80005c0:	2c06      	cmp	r4, #6
 80005c2:	d202      	bcs.n	80005ca <??ZbZclAttrDefaultRead_18>
 80005c4:	2089      	movs	r0, #137	@ 0x89
 80005c6:	4681      	mov	r9, r0
 80005c8:	e04d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ca <??ZbZclAttrDefaultRead_18>:
 80005ca:	2006      	movs	r0, #6
 80005cc:	4680      	mov	r8, r0
 80005ce:	e04a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005d0 <??ZbZclAttrDefaultRead_6>:
 80005d0:	2c07      	cmp	r4, #7
 80005d2:	d202      	bcs.n	80005da <??ZbZclAttrDefaultRead_19>
 80005d4:	2089      	movs	r0, #137	@ 0x89
 80005d6:	4681      	mov	r9, r0
 80005d8:	e045      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005da <??ZbZclAttrDefaultRead_19>:
 80005da:	2007      	movs	r0, #7
 80005dc:	4680      	mov	r8, r0
 80005de:	e042      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005e0 <??ZbZclAttrDefaultRead_7>:
 80005e0:	2c08      	cmp	r4, #8
 80005e2:	d202      	bcs.n	80005ea <??ZbZclAttrDefaultRead_20>
 80005e4:	2089      	movs	r0, #137	@ 0x89
 80005e6:	4681      	mov	r9, r0
 80005e8:	e03d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ea <??ZbZclAttrDefaultRead_20>:
 80005ea:	2008      	movs	r0, #8
 80005ec:	4680      	mov	r8, r0
 80005ee:	e03a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005f0 <??ZbZclAttrDefaultRead_10>:
 80005f0:	2c10      	cmp	r4, #16
 80005f2:	d202      	bcs.n	80005fa <??ZbZclAttrDefaultRead_21>
 80005f4:	2089      	movs	r0, #137	@ 0x89
 80005f6:	4681      	mov	r9, r0
 80005f8:	e035      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005fa <??ZbZclAttrDefaultRead_21>:
 80005fa:	2010      	movs	r0, #16
 80005fc:	4680      	mov	r8, r0
 80005fe:	e032      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000600 <??ZbZclAttrDefaultRead_8>:
 8000600:	2c00      	cmp	r4, #0
 8000602:	d102      	bne.n	800060a <??ZbZclAttrDefaultRead_22>
 8000604:	2089      	movs	r0, #137	@ 0x89
 8000606:	4681      	mov	r9, r0
 8000608:	e02d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800060a <??ZbZclAttrDefaultRead_22>:
 800060a:	68f0      	ldr	r0, [r6, #12]
 800060c:	7800      	ldrb	r0, [r0, #0]
 800060e:	0001      	movs	r1, r0
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	29ff      	cmp	r1, #255	@ 0xff
 8000614:	d101      	bne.n	800061a <??ZbZclAttrDefaultRead_23>
 8000616:	2100      	movs	r1, #0
 8000618:	0008      	movs	r0, r1

0800061a <??ZbZclAttrDefaultRead_23>:
 800061a:	0001      	movs	r1, r0
 800061c:	b2c9      	uxtb	r1, r1
 800061e:	1c49      	adds	r1, r1, #1
 8000620:	4688      	mov	r8, r1
 8000622:	4544      	cmp	r4, r8
 8000624:	d202      	bcs.n	800062c <??ZbZclAttrDefaultRead_24>
 8000626:	2189      	movs	r1, #137	@ 0x89
 8000628:	4689      	mov	r9, r1
 800062a:	e01c      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062c <??ZbZclAttrDefaultRead_24>:
 800062c:	e01b      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062e <??ZbZclAttrDefaultRead_9>:
 800062e:	2c00      	cmp	r4, #0
 8000630:	d102      	bne.n	8000638 <??ZbZclAttrDefaultRead_25>
 8000632:	2089      	movs	r0, #137	@ 0x89
 8000634:	4681      	mov	r9, r0
 8000636:	e016      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000638 <??ZbZclAttrDefaultRead_25>:
 8000638:	68f0      	ldr	r0, [r6, #12]
 800063a:	f006 fd42 	bl	80070c2 <pletoh16>
 800063e:	0001      	movs	r1, r0
 8000640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000644:	b289      	uxth	r1, r1
 8000646:	4291      	cmp	r1, r2
 8000648:	d101      	bne.n	800064e <??ZbZclAttrDefaultRead_26>
 800064a:	2100      	movs	r1, #0
 800064c:	0008      	movs	r0, r1

0800064e <??ZbZclAttrDefaultRead_26>:
 800064e:	0001      	movs	r1, r0
 8000650:	b289      	uxth	r1, r1
 8000652:	1c89      	adds	r1, r1, #2
 8000654:	4688      	mov	r8, r1
 8000656:	4544      	cmp	r4, r8
 8000658:	d202      	bcs.n	8000660 <??ZbZclAttrDefaultRead_27>
 800065a:	2189      	movs	r1, #137	@ 0x89
 800065c:	4689      	mov	r9, r1
 800065e:	e002      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000660 <??ZbZclAttrDefaultRead_27>:
 8000660:	e001      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000662 <??ZbZclAttrDefaultRead_11>:
 8000662:	2086      	movs	r0, #134	@ 0x86
 8000664:	4681      	mov	r9, r0

08000666 <??ZbZclAttrDefaultRead_13>:
 8000666:	4648      	mov	r0, r9
 8000668:	b2c0      	uxtb	r0, r0
 800066a:	2800      	cmp	r0, #0
 800066c:	d109      	bne.n	8000682 <??ZbZclAttrDefaultRead_28>
 800066e:	f8cd 8000 	str.w	r8, [sp]
 8000672:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8000676:	46bb      	mov	fp, r7
 8000678:	9a00      	ldr	r2, [sp, #0]
 800067a:	4651      	mov	r1, sl
 800067c:	4658      	mov	r0, fp
 800067e:	f016 fde2 	bl	8017246 <__aeabi_memcpy>

08000682 <??ZbZclAttrDefaultRead_28>:
 8000682:	4648      	mov	r0, r9
 8000684:	b2c0      	uxtb	r0, r0
 8000686:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800068a <ZbZclAttrWrite>:
 800068a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	4680      	mov	r8, r0
 8000692:	4699      	mov	r9, r3
 8000694:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8000698:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800069a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 800069e:	4640      	mov	r0, r8
 80006a0:	f7ff fd9d 	bl	80001de <ZbZclAttrFind>
 80006a4:	0006      	movs	r6, r0
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d101      	bne.n	80006ae <??ZbZclAttrWrite_0>
 80006aa:	2086      	movs	r0, #134	@ 0x86
 80006ac:	e0a2      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006ae <??ZbZclAttrWrite_0>:
 80006ae:	68b0      	ldr	r0, [r6, #8]
 80006b0:	7900      	ldrb	r0, [r0, #4]
 80006b2:	f010 0001 	ands.w	r0, r0, #1
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d105      	bne.n	80006c8 <??ZbZclAttrWrite_2>
 80006bc:	0038      	movs	r0, r7
 80006be:	b280      	uxth	r0, r0
 80006c0:	0780      	lsls	r0, r0, #30
 80006c2:	d401      	bmi.n	80006c8 <??ZbZclAttrWrite_2>
 80006c4:	2088      	movs	r0, #136	@ 0x88
 80006c6:	e095      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006c8 <??ZbZclAttrWrite_2>:
 80006c8:	2300      	movs	r3, #0
 80006ca:	4652      	mov	r2, sl
 80006cc:	4649      	mov	r1, r9
 80006ce:	68b0      	ldr	r0, [r6, #8]
 80006d0:	7880      	ldrb	r0, [r0, #2]
 80006d2:	f000 fcb0 	bl	8001036 <ZbZclAttrParseLength>
 80006d6:	9005      	str	r0, [sp, #20]
 80006d8:	9805      	ldr	r0, [sp, #20]
 80006da:	2800      	cmp	r0, #0
 80006dc:	d501      	bpl.n	80006e2 <??ZbZclAttrWrite_3>
 80006de:	2087      	movs	r0, #135	@ 0x87
 80006e0:	e088      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006e2 <??ZbZclAttrWrite_3>:
 80006e2:	68b0      	ldr	r0, [r6, #8]
 80006e4:	7880      	ldrb	r0, [r0, #2]
 80006e6:	f000 ff83 	bl	80015f0 <ZbZclAttrIsInteger>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d026      	beq.n	800073c <??ZbZclAttrWrite_4>
 80006ee:	aa04      	add	r2, sp, #16
 80006f0:	4649      	mov	r1, r9
 80006f2:	68b0      	ldr	r0, [r6, #8]
 80006f4:	7880      	ldrb	r0, [r0, #2]
 80006f6:	f000 fe4d 	bl	8001394 <ZbZclParseInteger>
 80006fa:	0004      	movs	r4, r0
 80006fc:	000d      	movs	r5, r1
 80006fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000702:	2800      	cmp	r0, #0
 8000704:	d002      	beq.n	800070c <??ZbZclAttrWrite_5>
 8000706:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800070a:	e073      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800070c <??ZbZclAttrWrite_5>:
 800070c:	68b0      	ldr	r0, [r6, #8]
 800070e:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8000712:	f008 f8e1 	bl	80088d8 <__aeabi_d2lz>
 8000716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800071a:	68b0      	ldr	r0, [r6, #8]
 800071c:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8000720:	f008 f8da 	bl	80088d8 <__aeabi_d2lz>
 8000724:	e9cd 0100 	strd	r0, r1, [sp]
 8000728:	68b0      	ldr	r0, [r6, #8]
 800072a:	7882      	ldrb	r2, [r0, #2]
 800072c:	0020      	movs	r0, r4
 800072e:	0029      	movs	r1, r5
 8000730:	f000 ff74 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8000734:	2800      	cmp	r0, #0
 8000736:	d101      	bne.n	800073c <??ZbZclAttrWrite_4>
 8000738:	2087      	movs	r0, #135	@ 0x87
 800073a:	e05b      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800073c <??ZbZclAttrWrite_4>:
 800073c:	68b0      	ldr	r0, [r6, #8]
 800073e:	7900      	ldrb	r0, [r0, #4]
 8000740:	0680      	lsls	r0, r0, #26
 8000742:	d522      	bpl.n	800078a <??ZbZclAttrWrite_6>
 8000744:	2420      	movs	r4, #32
 8000746:	2500      	movs	r5, #0
 8000748:	f10d 0b18 	add.w	fp, sp, #24
 800074c:	002a      	movs	r2, r5
 800074e:	0021      	movs	r1, r4
 8000750:	4658      	mov	r0, fp
 8000752:	f007 fae1 	bl	8007d18 <__aeabi_memset>
 8000756:	68b0      	ldr	r0, [r6, #8]
 8000758:	9006      	str	r0, [sp, #24]
 800075a:	2001      	movs	r0, #1
 800075c:	f88d 001c 	strb.w	r0, [sp, #28]
 8000760:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8000762:	900c      	str	r0, [sp, #48]	@ 0x30
 8000764:	f8cd 9020 	str.w	r9, [sp, #32]
 8000768:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800076c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8000770:	68f0      	ldr	r0, [r6, #12]
 8000772:	900b      	str	r0, [sp, #44]	@ 0x2c
 8000774:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000778:	900d      	str	r0, [sp, #52]	@ 0x34
 800077a:	aa06      	add	r2, sp, #24
 800077c:	0031      	movs	r1, r6
 800077e:	4640      	mov	r0, r8
 8000780:	f001 fb5e 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000784:	f88d 0010 	strb.w	r0, [sp, #16]
 8000788:	e028      	b.n	80007dc <??ZbZclAttrWrite_7>

0800078a <??ZbZclAttrWrite_6>:
 800078a:	003b      	movs	r3, r7
 800078c:	b29b      	uxth	r3, r3
 800078e:	464a      	mov	r2, r9
 8000790:	0031      	movs	r1, r6
 8000792:	4640      	mov	r0, r8
 8000794:	f000 f85e 	bl	8000854 <ZbZclAttrDefaultWrite>
 8000798:	f88d 0010 	strb.w	r0, [sp, #16]
 800079c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d11b      	bne.n	80007dc <??ZbZclAttrWrite_7>
 80007a4:	68b0      	ldr	r0, [r6, #8]
 80007a6:	7900      	ldrb	r0, [r0, #4]
 80007a8:	0640      	lsls	r0, r0, #25
 80007aa:	d517      	bpl.n	80007dc <??ZbZclAttrWrite_7>
 80007ac:	2420      	movs	r4, #32
 80007ae:	2500      	movs	r5, #0
 80007b0:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 80007b4:	002a      	movs	r2, r5
 80007b6:	0021      	movs	r1, r4
 80007b8:	4658      	mov	r0, fp
 80007ba:	f007 faad 	bl	8007d18 <__aeabi_memset>
 80007be:	68b0      	ldr	r0, [r6, #8]
 80007c0:	900e      	str	r0, [sp, #56]	@ 0x38
 80007c2:	2002      	movs	r0, #2
 80007c4:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80007c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80007ca:	9014      	str	r0, [sp, #80]	@ 0x50
 80007cc:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80007d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80007d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80007d4:	0031      	movs	r1, r6
 80007d6:	4640      	mov	r0, r8
 80007d8:	f001 fb32 	bl	8001e40 <ZbZclAttrCallbackExec>

080007dc <??ZbZclAttrWrite_7>:
 80007dc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d002      	beq.n	80007ea <??ZbZclAttrWrite_8>
 80007e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e8:	e004      	b.n	80007f4 <??ZbZclAttrWrite_1>

080007ea <??ZbZclAttrWrite_8>:
 80007ea:	0031      	movs	r1, r6
 80007ec:	4640      	mov	r0, r8
 80007ee:	f000 f804 	bl	80007fa <ZbZclAttrPostWrite>
 80007f2:	2000      	movs	r0, #0

080007f4 <??ZbZclAttrWrite_1>:
 80007f4:	b019      	add	sp, #100	@ 0x64
 80007f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007fa <ZbZclAttrPostWrite>:
 80007fa:	b538      	push	{r3, r4, r5, lr}
 80007fc:	0005      	movs	r5, r0
 80007fe:	000c      	movs	r4, r1
 8000800:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8000802:	2800      	cmp	r0, #0
 8000804:	d004      	beq.n	8000810 <??ZbZclAttrPostWrite_0>
 8000806:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800080a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800080c:	f012 fba6 	bl	8012f5c <ZbTimerReset>

08000810 <??ZbZclAttrPostWrite_0>:
 8000810:	2c00      	cmp	r4, #0
 8000812:	d005      	beq.n	8000820 <??ZbZclAttrPostWrite_1>
 8000814:	2200      	movs	r2, #0
 8000816:	68a0      	ldr	r0, [r4, #8]
 8000818:	8801      	ldrh	r1, [r0, #0]
 800081a:	0028      	movs	r0, r5
 800081c:	f001 ffcb 	bl	80027b6 <zcl_attr_reporting_check>

08000820 <??ZbZclAttrPostWrite_1>:
 8000820:	bd31      	pop	{r0, r4, r5, pc}

08000822 <ZbZclAttrPersist>:
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	0005      	movs	r5, r0
 8000826:	000e      	movs	r6, r1
 8000828:	0031      	movs	r1, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	0028      	movs	r0, r5
 800082e:	f7ff fcd6 	bl	80001de <ZbZclAttrFind>
 8000832:	0004      	movs	r4, r0
 8000834:	2c00      	cmp	r4, #0
 8000836:	d101      	bne.n	800083c <??ZbZclAttrPersist_0>
 8000838:	2000      	movs	r0, #0
 800083a:	e00a      	b.n	8000852 <??ZbZclAttrPersist_1>

0800083c <??ZbZclAttrPersist_0>:
 800083c:	68a0      	ldr	r0, [r4, #8]
 800083e:	7900      	ldrb	r0, [r0, #4]
 8000840:	0740      	lsls	r0, r0, #29
 8000842:	d401      	bmi.n	8000848 <??ZbZclAttrPersist_2>
 8000844:	2000      	movs	r0, #0
 8000846:	e004      	b.n	8000852 <??ZbZclAttrPersist_1>

08000848 <??ZbZclAttrPersist_2>:
 8000848:	0021      	movs	r1, r4
 800084a:	0028      	movs	r0, r5
 800084c:	f7ff ffd5 	bl	80007fa <ZbZclAttrPostWrite>
 8000850:	2001      	movs	r0, #1

08000852 <??ZbZclAttrPersist_1>:
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <ZbZclAttrDefaultWrite>:
 8000854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	0006      	movs	r6, r0
 800085a:	000f      	movs	r7, r1
 800085c:	0014      	movs	r4, r2
 800085e:	4698      	mov	r8, r3
 8000860:	2500      	movs	r5, #0
 8000862:	f05f 0900 	movs.w	r9, #0
 8000866:	2c00      	cmp	r4, #0
 8000868:	d101      	bne.n	800086e <??ZbZclAttrDefaultWrite_0>
 800086a:	2001      	movs	r0, #1
 800086c:	e0d6      	b.n	8000a1c <??ZbZclAttrDefaultWrite_1>

0800086e <??ZbZclAttrDefaultWrite_0>:
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	7880      	ldrb	r0, [r0, #2]
 8000872:	2808      	cmp	r0, #8
 8000874:	d062      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000876:	2809      	cmp	r0, #9
 8000878:	d063      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800087a:	280a      	cmp	r0, #10
 800087c:	d064      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 800087e:	280b      	cmp	r0, #11
 8000880:	d065      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000882:	280c      	cmp	r0, #12
 8000884:	d066      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 8000886:	280d      	cmp	r0, #13
 8000888:	d067      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 800088a:	280e      	cmp	r0, #14
 800088c:	d068      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 800088e:	280f      	cmp	r0, #15
 8000890:	d069      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000892:	2810      	cmp	r0, #16
 8000894:	d052      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000896:	2818      	cmp	r0, #24
 8000898:	d050      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 800089a:	2819      	cmp	r0, #25
 800089c:	d051      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800089e:	281a      	cmp	r0, #26
 80008a0:	d052      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008a2:	281b      	cmp	r0, #27
 80008a4:	d053      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008a6:	281c      	cmp	r0, #28
 80008a8:	d054      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008aa:	281d      	cmp	r0, #29
 80008ac:	d055      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ae:	281e      	cmp	r0, #30
 80008b0:	d056      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008b2:	281f      	cmp	r0, #31
 80008b4:	d057      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008b6:	2820      	cmp	r0, #32
 80008b8:	d040      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008ba:	2821      	cmp	r0, #33	@ 0x21
 80008bc:	d041      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008be:	2822      	cmp	r0, #34	@ 0x22
 80008c0:	d042      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008c2:	2823      	cmp	r0, #35	@ 0x23
 80008c4:	d043      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008c6:	2824      	cmp	r0, #36	@ 0x24
 80008c8:	d044      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ca:	2825      	cmp	r0, #37	@ 0x25
 80008cc:	d045      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ce:	2826      	cmp	r0, #38	@ 0x26
 80008d0:	d046      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008d2:	2827      	cmp	r0, #39	@ 0x27
 80008d4:	d047      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008d6:	2828      	cmp	r0, #40	@ 0x28
 80008d8:	d030      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008da:	2829      	cmp	r0, #41	@ 0x29
 80008dc:	d031      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008de:	282a      	cmp	r0, #42	@ 0x2a
 80008e0:	d032      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008e2:	282b      	cmp	r0, #43	@ 0x2b
 80008e4:	d033      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008e6:	282c      	cmp	r0, #44	@ 0x2c
 80008e8:	d034      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ea:	282d      	cmp	r0, #45	@ 0x2d
 80008ec:	d035      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ee:	282e      	cmp	r0, #46	@ 0x2e
 80008f0:	d036      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008f2:	282f      	cmp	r0, #47	@ 0x2f
 80008f4:	d037      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008f6:	2830      	cmp	r0, #48	@ 0x30
 80008f8:	d020      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008fa:	2831      	cmp	r0, #49	@ 0x31
 80008fc:	d021      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008fe:	2838      	cmp	r0, #56	@ 0x38
 8000900:	d01f      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 8000902:	2839      	cmp	r0, #57	@ 0x39
 8000904:	d023      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000906:	283a      	cmp	r0, #58	@ 0x3a
 8000908:	d02d      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 800090a:	2841      	cmp	r0, #65	@ 0x41
 800090c:	d031      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 800090e:	2842      	cmp	r0, #66	@ 0x42
 8000910:	d02f      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 8000912:	2843      	cmp	r0, #67	@ 0x43
 8000914:	d049      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 8000916:	2844      	cmp	r0, #68	@ 0x44
 8000918:	d047      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 800091a:	28e0      	cmp	r0, #224	@ 0xe0
 800091c:	d017      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 800091e:	28e1      	cmp	r0, #225	@ 0xe1
 8000920:	d015      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000922:	28e2      	cmp	r0, #226	@ 0xe2
 8000924:	d013      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000926:	28e8      	cmp	r0, #232	@ 0xe8
 8000928:	d00b      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092a:	28e9      	cmp	r0, #233	@ 0xe9
 800092c:	d009      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092e:	28ea      	cmp	r0, #234	@ 0xea
 8000930:	d00d      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000932:	28f0      	cmp	r0, #240	@ 0xf0
 8000934:	d017      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000936:	28f1      	cmp	r0, #241	@ 0xf1
 8000938:	d018      	beq.n	800096c <??ZbZclAttrDefaultWrite_12>
 800093a:	e058      	b.n	80009ee <??ZbZclAttrDefaultWrite_13>

0800093c <??ZbZclAttrDefaultWrite_2>:
 800093c:	2001      	movs	r0, #1
 800093e:	0005      	movs	r5, r0
 8000940:	e057      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000942 <??ZbZclAttrDefaultWrite_3>:
 8000942:	2002      	movs	r0, #2
 8000944:	0005      	movs	r5, r0
 8000946:	e054      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000948 <??ZbZclAttrDefaultWrite_4>:
 8000948:	2003      	movs	r0, #3
 800094a:	0005      	movs	r5, r0
 800094c:	e051      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800094e <??ZbZclAttrDefaultWrite_5>:
 800094e:	2004      	movs	r0, #4
 8000950:	0005      	movs	r5, r0
 8000952:	e04e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000954 <??ZbZclAttrDefaultWrite_6>:
 8000954:	2005      	movs	r0, #5
 8000956:	0005      	movs	r5, r0
 8000958:	e04b      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800095a <??ZbZclAttrDefaultWrite_7>:
 800095a:	2006      	movs	r0, #6
 800095c:	0005      	movs	r5, r0
 800095e:	e048      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000960 <??ZbZclAttrDefaultWrite_8>:
 8000960:	2007      	movs	r0, #7
 8000962:	0005      	movs	r5, r0
 8000964:	e045      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000966 <??ZbZclAttrDefaultWrite_9>:
 8000966:	2008      	movs	r0, #8
 8000968:	0005      	movs	r5, r0
 800096a:	e042      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800096c <??ZbZclAttrDefaultWrite_12>:
 800096c:	2010      	movs	r0, #16
 800096e:	0005      	movs	r5, r0
 8000970:	e03f      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000972 <??ZbZclAttrDefaultWrite_10>:
 8000972:	6938      	ldr	r0, [r7, #16]
 8000974:	2800      	cmp	r0, #0
 8000976:	d102      	bne.n	800097e <??ZbZclAttrDefaultWrite_15>
 8000978:	2089      	movs	r0, #137	@ 0x89
 800097a:	4681      	mov	r9, r0
 800097c:	e039      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800097e <??ZbZclAttrDefaultWrite_15>:
 800097e:	7820      	ldrb	r0, [r4, #0]
 8000980:	0001      	movs	r1, r0
 8000982:	b2c9      	uxtb	r1, r1
 8000984:	29ff      	cmp	r1, #255	@ 0xff
 8000986:	d105      	bne.n	8000994 <??ZbZclAttrDefaultWrite_16>
 8000988:	21ff      	movs	r1, #255	@ 0xff
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	7011      	strb	r1, [r2, #0]
 800098e:	2100      	movs	r1, #0
 8000990:	000d      	movs	r5, r1
 8000992:	e02e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000994 <??ZbZclAttrDefaultWrite_16>:
 8000994:	0001      	movs	r1, r0
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	1c49      	adds	r1, r1, #1
 800099a:	000d      	movs	r5, r1
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	42a9      	cmp	r1, r5
 80009a0:	d202      	bcs.n	80009a8 <??ZbZclAttrDefaultWrite_17>
 80009a2:	2189      	movs	r1, #137	@ 0x89
 80009a4:	4689      	mov	r9, r1
 80009a6:	e024      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009a8 <??ZbZclAttrDefaultWrite_17>:
 80009a8:	e023      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009aa <??ZbZclAttrDefaultWrite_11>:
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d202      	bcs.n	80009b6 <??ZbZclAttrDefaultWrite_18>
 80009b0:	2089      	movs	r0, #137	@ 0x89
 80009b2:	4681      	mov	r9, r0
 80009b4:	e01d      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009b6 <??ZbZclAttrDefaultWrite_18>:
 80009b6:	0020      	movs	r0, r4
 80009b8:	f006 fb83 	bl	80070c2 <pletoh16>
 80009bc:	4682      	mov	sl, r0
 80009be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009c2:	4650      	mov	r0, sl
 80009c4:	000a      	movs	r2, r1
 80009c6:	b280      	uxth	r0, r0
 80009c8:	4290      	cmp	r0, r2
 80009ca:	d105      	bne.n	80009d8 <??ZbZclAttrDefaultWrite_19>
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f006 fbc4 	bl	800715a <putle16>
 80009d2:	2000      	movs	r0, #0
 80009d4:	0005      	movs	r5, r0
 80009d6:	e00c      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009d8 <??ZbZclAttrDefaultWrite_19>:
 80009d8:	4650      	mov	r0, sl
 80009da:	b280      	uxth	r0, r0
 80009dc:	1c80      	adds	r0, r0, #2
 80009de:	0005      	movs	r5, r0
 80009e0:	6938      	ldr	r0, [r7, #16]
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d202      	bcs.n	80009ec <??ZbZclAttrDefaultWrite_20>
 80009e6:	2089      	movs	r0, #137	@ 0x89
 80009e8:	4681      	mov	r9, r0
 80009ea:	e002      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ec <??ZbZclAttrDefaultWrite_20>:
 80009ec:	e001      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ee <??ZbZclAttrDefaultWrite_13>:
 80009ee:	2086      	movs	r0, #134	@ 0x86
 80009f0:	4681      	mov	r9, r0

080009f2 <??ZbZclAttrDefaultWrite_14>:
 80009f2:	4648      	mov	r0, r9
 80009f4:	b2c0      	uxtb	r0, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d10e      	bne.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 80009fa:	4640      	mov	r0, r8
 80009fc:	b280      	uxth	r0, r0
 80009fe:	07c0      	lsls	r0, r0, #31
 8000a00:	d40a      	bmi.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d008      	beq.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a06:	9500      	str	r5, [sp, #0]
 8000a08:	46a2      	mov	sl, r4
 8000a0a:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	4651      	mov	r1, sl
 8000a12:	4658      	mov	r0, fp
 8000a14:	f016 fc17 	bl	8017246 <__aeabi_memcpy>

08000a18 <??ZbZclAttrDefaultWrite_21>:
 8000a18:	4648      	mov	r0, r9
 8000a1a:	b2c0      	uxtb	r0, r0

08000a1c <??ZbZclAttrDefaultWrite_1>:
 8000a1c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a20 <ZbZclAttrDefaultValue>:
 8000a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	0004      	movs	r4, r0
 8000a26:	4688      	mov	r8, r1
 8000a28:	0015      	movs	r5, r2
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	f05f 37ff 	movs.w	r7, #4294967295
 8000a30:	0020      	movs	r0, r4
 8000a32:	b2c0      	uxtb	r0, r0
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f000 80a1 	beq.w	8000b7c <??ZbZclAttrDefaultValue_0>
 8000a3a:	2808      	cmp	r0, #8
 8000a3c:	f000 80e7 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000a40:	2809      	cmp	r0, #9
 8000a42:	f000 80da 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000a46:	280a      	cmp	r0, #10
 8000a48:	f000 80cd 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000a4c:	280b      	cmp	r0, #11
 8000a4e:	f000 80c0 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000a52:	280c      	cmp	r0, #12
 8000a54:	f000 80b3 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000a58:	280d      	cmp	r0, #13
 8000a5a:	f000 80a6 	beq.w	8000baa <??ZbZclAttrDefaultValue_6>
 8000a5e:	280e      	cmp	r0, #14
 8000a60:	f000 8099 	beq.w	8000b96 <??ZbZclAttrDefaultValue_7>
 8000a64:	280f      	cmp	r0, #15
 8000a66:	f000 808c 	beq.w	8000b82 <??ZbZclAttrDefaultValue_8>
 8000a6a:	2810      	cmp	r0, #16
 8000a6c:	f000 80db 	beq.w	8000c26 <??ZbZclAttrDefaultValue_9>
 8000a70:	2818      	cmp	r0, #24
 8000a72:	f000 8126 	beq.w	8000cc2 <??ZbZclAttrDefaultValue_10>
 8000a76:	2819      	cmp	r0, #25
 8000a78:	f000 8119 	beq.w	8000cae <??ZbZclAttrDefaultValue_11>
 8000a7c:	281a      	cmp	r0, #26
 8000a7e:	f000 810c 	beq.w	8000c9a <??ZbZclAttrDefaultValue_12>
 8000a82:	281b      	cmp	r0, #27
 8000a84:	f000 80ff 	beq.w	8000c86 <??ZbZclAttrDefaultValue_13>
 8000a88:	281c      	cmp	r0, #28
 8000a8a:	f000 80f2 	beq.w	8000c72 <??ZbZclAttrDefaultValue_14>
 8000a8e:	281d      	cmp	r0, #29
 8000a90:	f000 80e5 	beq.w	8000c5e <??ZbZclAttrDefaultValue_15>
 8000a94:	281e      	cmp	r0, #30
 8000a96:	f000 80d8 	beq.w	8000c4a <??ZbZclAttrDefaultValue_16>
 8000a9a:	281f      	cmp	r0, #31
 8000a9c:	f000 80cb 	beq.w	8000c36 <??ZbZclAttrDefaultValue_17>
 8000aa0:	2820      	cmp	r0, #32
 8000aa2:	f000 80b4 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000aa6:	2821      	cmp	r0, #33	@ 0x21
 8000aa8:	f000 80a7 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000aac:	2822      	cmp	r0, #34	@ 0x22
 8000aae:	f000 809a 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000ab2:	2823      	cmp	r0, #35	@ 0x23
 8000ab4:	f000 808d 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000ab8:	2824      	cmp	r0, #36	@ 0x24
 8000aba:	f000 8080 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000abe:	2825      	cmp	r0, #37	@ 0x25
 8000ac0:	d073      	beq.n	8000baa <??ZbZclAttrDefaultValue_6>
 8000ac2:	2826      	cmp	r0, #38	@ 0x26
 8000ac4:	d067      	beq.n	8000b96 <??ZbZclAttrDefaultValue_7>
 8000ac6:	2827      	cmp	r0, #39	@ 0x27
 8000ac8:	d05b      	beq.n	8000b82 <??ZbZclAttrDefaultValue_8>
 8000aca:	2828      	cmp	r0, #40	@ 0x28
 8000acc:	f000 814b 	beq.w	8000d66 <??ZbZclAttrDefaultValue_18>
 8000ad0:	2829      	cmp	r0, #41	@ 0x29
 8000ad2:	f000 813e 	beq.w	8000d52 <??ZbZclAttrDefaultValue_19>
 8000ad6:	282a      	cmp	r0, #42	@ 0x2a
 8000ad8:	f000 8131 	beq.w	8000d3e <??ZbZclAttrDefaultValue_20>
 8000adc:	282b      	cmp	r0, #43	@ 0x2b
 8000ade:	f000 8124 	beq.w	8000d2a <??ZbZclAttrDefaultValue_21>
 8000ae2:	282c      	cmp	r0, #44	@ 0x2c
 8000ae4:	f000 8117 	beq.w	8000d16 <??ZbZclAttrDefaultValue_22>
 8000ae8:	282d      	cmp	r0, #45	@ 0x2d
 8000aea:	f000 810a 	beq.w	8000d02 <??ZbZclAttrDefaultValue_23>
 8000aee:	282e      	cmp	r0, #46	@ 0x2e
 8000af0:	f000 80fd 	beq.w	8000cee <??ZbZclAttrDefaultValue_24>
 8000af4:	282f      	cmp	r0, #47	@ 0x2f
 8000af6:	f000 80f0 	beq.w	8000cda <??ZbZclAttrDefaultValue_25>
 8000afa:	2830      	cmp	r0, #48	@ 0x30
 8000afc:	f000 8087 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000b00:	2831      	cmp	r0, #49	@ 0x31
 8000b02:	d07a      	beq.n	8000bfa <??ZbZclAttrDefaultValue_2>
 8000b04:	2838      	cmp	r0, #56	@ 0x38
 8000b06:	f000 813a 	beq.w	8000d7e <??ZbZclAttrDefaultValue_26>
 8000b0a:	2839      	cmp	r0, #57	@ 0x39
 8000b0c:	f000 8142 	beq.w	8000d94 <??ZbZclAttrDefaultValue_27>
 8000b10:	283a      	cmp	r0, #58	@ 0x3a
 8000b12:	f000 8149 	beq.w	8000da8 <??ZbZclAttrDefaultValue_28>
 8000b16:	2841      	cmp	r0, #65	@ 0x41
 8000b18:	f000 8152 	beq.w	8000dc0 <??ZbZclAttrDefaultValue_29>
 8000b1c:	2842      	cmp	r0, #66	@ 0x42
 8000b1e:	f000 8159 	beq.w	8000dd4 <??ZbZclAttrDefaultValue_30>
 8000b22:	2843      	cmp	r0, #67	@ 0x43
 8000b24:	f000 8160 	beq.w	8000de8 <??ZbZclAttrDefaultValue_31>
 8000b28:	2844      	cmp	r0, #68	@ 0x44
 8000b2a:	f000 8168 	beq.w	8000dfe <??ZbZclAttrDefaultValue_32>
 8000b2e:	2848      	cmp	r0, #72	@ 0x48
 8000b30:	f000 818b 	beq.w	8000e4a <??ZbZclAttrDefaultValue_33>
 8000b34:	284c      	cmp	r0, #76	@ 0x4c
 8000b36:	f000 8192 	beq.w	8000e5e <??ZbZclAttrDefaultValue_34>
 8000b3a:	2850      	cmp	r0, #80	@ 0x50
 8000b3c:	f000 8199 	beq.w	8000e72 <??ZbZclAttrDefaultValue_35>
 8000b40:	2851      	cmp	r0, #81	@ 0x51
 8000b42:	f000 81a0 	beq.w	8000e86 <??ZbZclAttrDefaultValue_36>
 8000b46:	28e0      	cmp	r0, #224	@ 0xe0
 8000b48:	f000 81a7 	beq.w	8000e9a <??ZbZclAttrDefaultValue_37>
 8000b4c:	28e1      	cmp	r0, #225	@ 0xe1
 8000b4e:	f000 81ae 	beq.w	8000eae <??ZbZclAttrDefaultValue_38>
 8000b52:	28e2      	cmp	r0, #226	@ 0xe2
 8000b54:	f000 81b5 	beq.w	8000ec2 <??ZbZclAttrDefaultValue_39>
 8000b58:	28e8      	cmp	r0, #232	@ 0xe8
 8000b5a:	f000 81bc 	beq.w	8000ed6 <??ZbZclAttrDefaultValue_40>
 8000b5e:	28e9      	cmp	r0, #233	@ 0xe9
 8000b60:	f000 81c3 	beq.w	8000eea <??ZbZclAttrDefaultValue_41>
 8000b64:	28ea      	cmp	r0, #234	@ 0xea
 8000b66:	f000 81ca 	beq.w	8000efe <??ZbZclAttrDefaultValue_42>
 8000b6a:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6c:	f000 8152 	beq.w	8000e14 <??ZbZclAttrDefaultValue_43>
 8000b70:	28f1      	cmp	r0, #241	@ 0xf1
 8000b72:	f000 815b 	beq.w	8000e2c <??ZbZclAttrDefaultValue_44>
 8000b76:	28ff      	cmp	r0, #255	@ 0xff
 8000b78:	f040 81cb 	bne.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b7c <??ZbZclAttrDefaultValue_0>:
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	0007      	movs	r7, r0
 8000b80:	e1c7      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000b82 <??ZbZclAttrDefaultValue_8>:
 8000b82:	1c70      	adds	r0, r6, #1
 8000b84:	4285      	cmp	r5, r0
 8000b86:	f0c0 81c4 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b8a <??ZbZclAttrDefaultValue_47>:
 8000b8a:	20ff      	movs	r0, #255	@ 0xff
 8000b8c:	f888 0000 	strb.w	r0, [r8]
 8000b90:	f118 0801 	adds.w	r8, r8, #1
 8000b94:	1c76      	adds	r6, r6, #1

08000b96 <??ZbZclAttrDefaultValue_7>:
 8000b96:	1c70      	adds	r0, r6, #1
 8000b98:	4285      	cmp	r5, r0
 8000b9a:	f0c0 81ba 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b9e <??ZbZclAttrDefaultValue_48>:
 8000b9e:	20ff      	movs	r0, #255	@ 0xff
 8000ba0:	f888 0000 	strb.w	r0, [r8]
 8000ba4:	f118 0801 	adds.w	r8, r8, #1
 8000ba8:	1c76      	adds	r6, r6, #1

08000baa <??ZbZclAttrDefaultValue_6>:
 8000baa:	1c70      	adds	r0, r6, #1
 8000bac:	4285      	cmp	r5, r0
 8000bae:	f0c0 81b0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bb2 <??ZbZclAttrDefaultValue_49>:
 8000bb2:	20ff      	movs	r0, #255	@ 0xff
 8000bb4:	f888 0000 	strb.w	r0, [r8]
 8000bb8:	f118 0801 	adds.w	r8, r8, #1
 8000bbc:	1c76      	adds	r6, r6, #1

08000bbe <??ZbZclAttrDefaultValue_5>:
 8000bbe:	1c70      	adds	r0, r6, #1
 8000bc0:	4285      	cmp	r5, r0
 8000bc2:	f0c0 81a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bc6 <??ZbZclAttrDefaultValue_50>:
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	f888 0000 	strb.w	r0, [r8]
 8000bcc:	f118 0801 	adds.w	r8, r8, #1
 8000bd0:	1c76      	adds	r6, r6, #1

08000bd2 <??ZbZclAttrDefaultValue_4>:
 8000bd2:	1c70      	adds	r0, r6, #1
 8000bd4:	4285      	cmp	r5, r0
 8000bd6:	f0c0 819c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bda <??ZbZclAttrDefaultValue_51>:
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	f888 0000 	strb.w	r0, [r8]
 8000be0:	f118 0801 	adds.w	r8, r8, #1
 8000be4:	1c76      	adds	r6, r6, #1

08000be6 <??ZbZclAttrDefaultValue_3>:
 8000be6:	1c70      	adds	r0, r6, #1
 8000be8:	4285      	cmp	r5, r0
 8000bea:	f0c0 8192 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bee <??ZbZclAttrDefaultValue_52>:
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	f888 0000 	strb.w	r0, [r8]
 8000bf4:	f118 0801 	adds.w	r8, r8, #1
 8000bf8:	1c76      	adds	r6, r6, #1

08000bfa <??ZbZclAttrDefaultValue_2>:
 8000bfa:	1c70      	adds	r0, r6, #1
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	f0c0 8188 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c02 <??ZbZclAttrDefaultValue_53>:
 8000c02:	20ff      	movs	r0, #255	@ 0xff
 8000c04:	f888 0000 	strb.w	r0, [r8]
 8000c08:	f118 0801 	adds.w	r8, r8, #1
 8000c0c:	1c76      	adds	r6, r6, #1

08000c0e <??ZbZclAttrDefaultValue_1>:
 8000c0e:	1c70      	adds	r0, r6, #1
 8000c10:	4285      	cmp	r5, r0
 8000c12:	f0c0 817e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c16 <??ZbZclAttrDefaultValue_54>:
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	f888 0000 	strb.w	r0, [r8]
 8000c1c:	f118 0801 	adds.w	r8, r8, #1
 8000c20:	1c76      	adds	r6, r6, #1
 8000c22:	0037      	movs	r7, r6
 8000c24:	e175      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c26 <??ZbZclAttrDefaultValue_9>:
 8000c26:	2000      	movs	r0, #0
 8000c28:	f888 0000 	strb.w	r0, [r8]
 8000c2c:	f118 0801 	adds.w	r8, r8, #1
 8000c30:	2001      	movs	r0, #1
 8000c32:	0007      	movs	r7, r0
 8000c34:	e16d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c36 <??ZbZclAttrDefaultValue_17>:
 8000c36:	1c70      	adds	r0, r6, #1
 8000c38:	4285      	cmp	r5, r0
 8000c3a:	f0c0 816a 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c3e <??ZbZclAttrDefaultValue_55>:
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f888 0000 	strb.w	r0, [r8]
 8000c44:	f118 0801 	adds.w	r8, r8, #1
 8000c48:	1c76      	adds	r6, r6, #1

08000c4a <??ZbZclAttrDefaultValue_16>:
 8000c4a:	1c70      	adds	r0, r6, #1
 8000c4c:	4285      	cmp	r5, r0
 8000c4e:	f0c0 8160 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c52 <??ZbZclAttrDefaultValue_56>:
 8000c52:	2000      	movs	r0, #0
 8000c54:	f888 0000 	strb.w	r0, [r8]
 8000c58:	f118 0801 	adds.w	r8, r8, #1
 8000c5c:	1c76      	adds	r6, r6, #1

08000c5e <??ZbZclAttrDefaultValue_15>:
 8000c5e:	1c70      	adds	r0, r6, #1
 8000c60:	4285      	cmp	r5, r0
 8000c62:	f0c0 8156 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c66 <??ZbZclAttrDefaultValue_57>:
 8000c66:	2000      	movs	r0, #0
 8000c68:	f888 0000 	strb.w	r0, [r8]
 8000c6c:	f118 0801 	adds.w	r8, r8, #1
 8000c70:	1c76      	adds	r6, r6, #1

08000c72 <??ZbZclAttrDefaultValue_14>:
 8000c72:	1c70      	adds	r0, r6, #1
 8000c74:	4285      	cmp	r5, r0
 8000c76:	f0c0 814c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c7a <??ZbZclAttrDefaultValue_58>:
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f888 0000 	strb.w	r0, [r8]
 8000c80:	f118 0801 	adds.w	r8, r8, #1
 8000c84:	1c76      	adds	r6, r6, #1

08000c86 <??ZbZclAttrDefaultValue_13>:
 8000c86:	1c70      	adds	r0, r6, #1
 8000c88:	4285      	cmp	r5, r0
 8000c8a:	f0c0 8142 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c8e <??ZbZclAttrDefaultValue_59>:
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f888 0000 	strb.w	r0, [r8]
 8000c94:	f118 0801 	adds.w	r8, r8, #1
 8000c98:	1c76      	adds	r6, r6, #1

08000c9a <??ZbZclAttrDefaultValue_12>:
 8000c9a:	1c70      	adds	r0, r6, #1
 8000c9c:	4285      	cmp	r5, r0
 8000c9e:	f0c0 8138 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ca2 <??ZbZclAttrDefaultValue_60>:
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f888 0000 	strb.w	r0, [r8]
 8000ca8:	f118 0801 	adds.w	r8, r8, #1
 8000cac:	1c76      	adds	r6, r6, #1

08000cae <??ZbZclAttrDefaultValue_11>:
 8000cae:	1c70      	adds	r0, r6, #1
 8000cb0:	4285      	cmp	r5, r0
 8000cb2:	f0c0 812e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cb6 <??ZbZclAttrDefaultValue_61>:
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f888 0000 	strb.w	r0, [r8]
 8000cbc:	f118 0801 	adds.w	r8, r8, #1
 8000cc0:	1c76      	adds	r6, r6, #1

08000cc2 <??ZbZclAttrDefaultValue_10>:
 8000cc2:	1c70      	adds	r0, r6, #1
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	f0c0 8124 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cca <??ZbZclAttrDefaultValue_62>:
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f888 0000 	strb.w	r0, [r8]
 8000cd0:	f118 0801 	adds.w	r8, r8, #1
 8000cd4:	1c76      	adds	r6, r6, #1
 8000cd6:	0037      	movs	r7, r6
 8000cd8:	e11b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000cda <??ZbZclAttrDefaultValue_25>:
 8000cda:	1c70      	adds	r0, r6, #1
 8000cdc:	4285      	cmp	r5, r0
 8000cde:	f0c0 8118 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ce2 <??ZbZclAttrDefaultValue_63>:
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f888 0000 	strb.w	r0, [r8]
 8000ce8:	f118 0801 	adds.w	r8, r8, #1
 8000cec:	1c76      	adds	r6, r6, #1

08000cee <??ZbZclAttrDefaultValue_24>:
 8000cee:	1c70      	adds	r0, r6, #1
 8000cf0:	4285      	cmp	r5, r0
 8000cf2:	f0c0 810e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cf6 <??ZbZclAttrDefaultValue_64>:
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f888 0000 	strb.w	r0, [r8]
 8000cfc:	f118 0801 	adds.w	r8, r8, #1
 8000d00:	1c76      	adds	r6, r6, #1

08000d02 <??ZbZclAttrDefaultValue_23>:
 8000d02:	1c70      	adds	r0, r6, #1
 8000d04:	4285      	cmp	r5, r0
 8000d06:	f0c0 8104 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d0a <??ZbZclAttrDefaultValue_65>:
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f888 0000 	strb.w	r0, [r8]
 8000d10:	f118 0801 	adds.w	r8, r8, #1
 8000d14:	1c76      	adds	r6, r6, #1

08000d16 <??ZbZclAttrDefaultValue_22>:
 8000d16:	1c70      	adds	r0, r6, #1
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	f0c0 80fa 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d1e <??ZbZclAttrDefaultValue_66>:
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f888 0000 	strb.w	r0, [r8]
 8000d24:	f118 0801 	adds.w	r8, r8, #1
 8000d28:	1c76      	adds	r6, r6, #1

08000d2a <??ZbZclAttrDefaultValue_21>:
 8000d2a:	1c70      	adds	r0, r6, #1
 8000d2c:	4285      	cmp	r5, r0
 8000d2e:	f0c0 80f0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d32 <??ZbZclAttrDefaultValue_67>:
 8000d32:	2000      	movs	r0, #0
 8000d34:	f888 0000 	strb.w	r0, [r8]
 8000d38:	f118 0801 	adds.w	r8, r8, #1
 8000d3c:	1c76      	adds	r6, r6, #1

08000d3e <??ZbZclAttrDefaultValue_20>:
 8000d3e:	1c70      	adds	r0, r6, #1
 8000d40:	4285      	cmp	r5, r0
 8000d42:	f0c0 80e6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d46 <??ZbZclAttrDefaultValue_68>:
 8000d46:	2000      	movs	r0, #0
 8000d48:	f888 0000 	strb.w	r0, [r8]
 8000d4c:	f118 0801 	adds.w	r8, r8, #1
 8000d50:	1c76      	adds	r6, r6, #1

08000d52 <??ZbZclAttrDefaultValue_19>:
 8000d52:	1c70      	adds	r0, r6, #1
 8000d54:	4285      	cmp	r5, r0
 8000d56:	f0c0 80dc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d5a <??ZbZclAttrDefaultValue_69>:
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f888 0000 	strb.w	r0, [r8]
 8000d60:	f118 0801 	adds.w	r8, r8, #1
 8000d64:	1c76      	adds	r6, r6, #1

08000d66 <??ZbZclAttrDefaultValue_18>:
 8000d66:	1c70      	adds	r0, r6, #1
 8000d68:	4285      	cmp	r5, r0
 8000d6a:	f0c0 80d2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d6e <??ZbZclAttrDefaultValue_70>:
 8000d6e:	2080      	movs	r0, #128	@ 0x80
 8000d70:	f888 0000 	strb.w	r0, [r8]
 8000d74:	f118 0801 	adds.w	r8, r8, #1
 8000d78:	1c76      	adds	r6, r6, #1
 8000d7a:	0037      	movs	r7, r6
 8000d7c:	e0c9      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d7e <??ZbZclAttrDefaultValue_26>:
 8000d7e:	2d02      	cmp	r5, #2
 8000d80:	f0c0 80c7 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d84 <??ZbZclAttrDefaultValue_71>:
 8000d84:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f006 f9e6 	bl	800715a <putle16>
 8000d8e:	2002      	movs	r0, #2
 8000d90:	0007      	movs	r7, r0
 8000d92:	e0be      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d94 <??ZbZclAttrDefaultValue_27>:
 8000d94:	2d04      	cmp	r5, #4
 8000d96:	f0c0 80bc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d9a <??ZbZclAttrDefaultValue_72>:
 8000d9a:	495f      	ldr	r1, [pc, #380]	@ (8000f18 <??DataTable1>)
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	f006 f9ee 	bl	800717e <putle32>
 8000da2:	2004      	movs	r0, #4
 8000da4:	0007      	movs	r7, r0
 8000da6:	e0b4      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000da8 <??ZbZclAttrDefaultValue_28>:
 8000da8:	2d08      	cmp	r5, #8
 8000daa:	f0c0 80b2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dae <??ZbZclAttrDefaultValue_73>:
 8000dae:	f07f 0201 	mvns.w	r2, #1
 8000db2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f1c <??DataTable1_1>)
 8000db4:	4640      	mov	r0, r8
 8000db6:	f006 fa15 	bl	80071e4 <putle64>
 8000dba:	2008      	movs	r0, #8
 8000dbc:	0007      	movs	r7, r0
 8000dbe:	e0a8      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc0 <??ZbZclAttrDefaultValue_29>:
 8000dc0:	2d02      	cmp	r5, #2
 8000dc2:	f0c0 80a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc6 <??ZbZclAttrDefaultValue_74>:
 8000dc6:	21ff      	movs	r1, #255	@ 0xff
 8000dc8:	4640      	mov	r0, r8
 8000dca:	f006 f9c6 	bl	800715a <putle16>
 8000dce:	2002      	movs	r0, #2
 8000dd0:	0007      	movs	r7, r0
 8000dd2:	e09e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dd4 <??ZbZclAttrDefaultValue_30>:
 8000dd4:	2d02      	cmp	r5, #2
 8000dd6:	f0c0 809c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dda <??ZbZclAttrDefaultValue_75>:
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4640      	mov	r0, r8
 8000dde:	f006 f9bc 	bl	800715a <putle16>
 8000de2:	2002      	movs	r0, #2
 8000de4:	0007      	movs	r7, r0
 8000de6:	e094      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000de8 <??ZbZclAttrDefaultValue_31>:
 8000de8:	2d04      	cmp	r5, #4
 8000dea:	f0c0 8092 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dee <??ZbZclAttrDefaultValue_76>:
 8000dee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000df2:	4640      	mov	r0, r8
 8000df4:	f006 f9c3 	bl	800717e <putle32>
 8000df8:	2004      	movs	r0, #4
 8000dfa:	0007      	movs	r7, r0
 8000dfc:	e089      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dfe <??ZbZclAttrDefaultValue_32>:
 8000dfe:	2d04      	cmp	r5, #4
 8000e00:	f0c0 8087 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000e04 <??ZbZclAttrDefaultValue_77>:
 8000e04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f006 f9b8 	bl	800717e <putle32>
 8000e0e:	2004      	movs	r0, #4
 8000e10:	0007      	movs	r7, r0
 8000e12:	e07e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e14 <??ZbZclAttrDefaultValue_43>:
 8000e14:	2d08      	cmp	r5, #8
 8000e16:	d37c      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e18 <??ZbZclAttrDefaultValue_78>:
 8000e18:	f05f 32ff 	movs.w	r2, #4294967295
 8000e1c:	f05f 33ff 	movs.w	r3, #4294967295
 8000e20:	4640      	mov	r0, r8
 8000e22:	f006 f9df 	bl	80071e4 <putle64>
 8000e26:	2008      	movs	r0, #8
 8000e28:	0007      	movs	r7, r0
 8000e2a:	e072      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e2c <??ZbZclAttrDefaultValue_44>:
 8000e2c:	2d10      	cmp	r5, #16
 8000e2e:	d370      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e30 <??ZbZclAttrDefaultValue_79>:
 8000e30:	f05f 0910 	movs.w	r9, #16
 8000e34:	f05f 0a00 	movs.w	sl, #0
 8000e38:	46c3      	mov	fp, r8
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4658      	mov	r0, fp
 8000e40:	f006 ff6a 	bl	8007d18 <__aeabi_memset>
 8000e44:	2010      	movs	r0, #16
 8000e46:	0007      	movs	r7, r0
 8000e48:	e063      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4a <??ZbZclAttrDefaultValue_33>:
 8000e4a:	2d02      	cmp	r5, #2
 8000e4c:	d361      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4e <??ZbZclAttrDefaultValue_80>:
 8000e4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e52:	4640      	mov	r0, r8
 8000e54:	f006 f981 	bl	800715a <putle16>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	0007      	movs	r7, r0
 8000e5c:	e059      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e5e <??ZbZclAttrDefaultValue_34>:
 8000e5e:	2d02      	cmp	r5, #2
 8000e60:	d357      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e62 <??ZbZclAttrDefaultValue_81>:
 8000e62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e66:	4640      	mov	r0, r8
 8000e68:	f006 f977 	bl	800715a <putle16>
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	0007      	movs	r7, r0
 8000e70:	e04f      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e72 <??ZbZclAttrDefaultValue_35>:
 8000e72:	2d02      	cmp	r5, #2
 8000e74:	d34d      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e76 <??ZbZclAttrDefaultValue_82>:
 8000e76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	f006 f96d 	bl	800715a <putle16>
 8000e80:	2002      	movs	r0, #2
 8000e82:	0007      	movs	r7, r0
 8000e84:	e045      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e86 <??ZbZclAttrDefaultValue_36>:
 8000e86:	2d02      	cmp	r5, #2
 8000e88:	d343      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e8a <??ZbZclAttrDefaultValue_83>:
 8000e8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f006 f963 	bl	800715a <putle16>
 8000e94:	2002      	movs	r0, #2
 8000e96:	0007      	movs	r7, r0
 8000e98:	e03b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9a <??ZbZclAttrDefaultValue_37>:
 8000e9a:	2d04      	cmp	r5, #4
 8000e9c:	d339      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9e <??ZbZclAttrDefaultValue_84>:
 8000e9e:	f05f 31ff 	movs.w	r1, #4294967295
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	f006 f96b 	bl	800717e <putle32>
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	0007      	movs	r7, r0
 8000eac:	e031      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eae <??ZbZclAttrDefaultValue_38>:
 8000eae:	2d04      	cmp	r5, #4
 8000eb0:	d32f      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eb2 <??ZbZclAttrDefaultValue_85>:
 8000eb2:	f05f 31ff 	movs.w	r1, #4294967295
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	f006 f961 	bl	800717e <putle32>
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	0007      	movs	r7, r0
 8000ec0:	e027      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec2 <??ZbZclAttrDefaultValue_39>:
 8000ec2:	2d04      	cmp	r5, #4
 8000ec4:	d325      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec6 <??ZbZclAttrDefaultValue_86>:
 8000ec6:	f05f 31ff 	movs.w	r1, #4294967295
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f006 f957 	bl	800717e <putle32>
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	0007      	movs	r7, r0
 8000ed4:	e01d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ed6 <??ZbZclAttrDefaultValue_40>:
 8000ed6:	2d02      	cmp	r5, #2
 8000ed8:	d31b      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eda <??ZbZclAttrDefaultValue_87>:
 8000eda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f006 f93b 	bl	800715a <putle16>
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	0007      	movs	r7, r0
 8000ee8:	e013      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eea <??ZbZclAttrDefaultValue_41>:
 8000eea:	2d02      	cmp	r5, #2
 8000eec:	d311      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eee <??ZbZclAttrDefaultValue_88>:
 8000eee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	f006 f931 	bl	800715a <putle16>
 8000ef8:	2002      	movs	r0, #2
 8000efa:	0007      	movs	r7, r0
 8000efc:	e009      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000efe <??ZbZclAttrDefaultValue_42>:
 8000efe:	2d04      	cmp	r5, #4
 8000f00:	d307      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f02 <??ZbZclAttrDefaultValue_89>:
 8000f02:	f05f 31ff 	movs.w	r1, #4294967295
 8000f06:	4640      	mov	r0, r8
 8000f08:	f006 f939 	bl	800717e <putle32>
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	0007      	movs	r7, r0
 8000f10:	e7ff      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f12 <??ZbZclAttrDefaultValue_45>:
 8000f12:	0038      	movs	r0, r7
 8000f14:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f18 <??DataTable1>:
 8000f18:	fffe 00ff                                   ....

08000f1c <??DataTable1_1>:
 8000f1c:	ffff 001f                                   ....

08000f20 <ZbZclAttrTypeLength>:
 8000f20:	0001      	movs	r1, r0
 8000f22:	0008      	movs	r0, r1
 8000f24:	b2c0      	uxtb	r0, r0
 8000f26:	2800      	cmp	r0, #0
 8000f28:	f000 8081 	beq.w	800102e <??ZbZclAttrTypeLength_0>
 8000f2c:	2808      	cmp	r0, #8
 8000f2e:	d06c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f30:	2809      	cmp	r0, #9
 8000f32:	d06c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	d06c      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f38:	280b      	cmp	r0, #11
 8000f3a:	d06c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f3c:	280c      	cmp	r0, #12
 8000f3e:	d06c      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f40:	280d      	cmp	r0, #13
 8000f42:	d06c      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f44:	280e      	cmp	r0, #14
 8000f46:	d06c      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f48:	280f      	cmp	r0, #15
 8000f4a:	d06c      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f4c:	2810      	cmp	r0, #16
 8000f4e:	d05c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f50:	2818      	cmp	r0, #24
 8000f52:	d05a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f54:	2819      	cmp	r0, #25
 8000f56:	d05a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f58:	281a      	cmp	r0, #26
 8000f5a:	d05a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f5c:	281b      	cmp	r0, #27
 8000f5e:	d05a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f60:	281c      	cmp	r0, #28
 8000f62:	d05a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f64:	281d      	cmp	r0, #29
 8000f66:	d05a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f68:	281e      	cmp	r0, #30
 8000f6a:	d05a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f6c:	281f      	cmp	r0, #31
 8000f6e:	d05a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f70:	2820      	cmp	r0, #32
 8000f72:	d04a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f74:	2821      	cmp	r0, #33	@ 0x21
 8000f76:	d04a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f78:	2822      	cmp	r0, #34	@ 0x22
 8000f7a:	d04a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f7c:	2823      	cmp	r0, #35	@ 0x23
 8000f7e:	d04a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f80:	2824      	cmp	r0, #36	@ 0x24
 8000f82:	d04a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f84:	2825      	cmp	r0, #37	@ 0x25
 8000f86:	d04a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f88:	2826      	cmp	r0, #38	@ 0x26
 8000f8a:	d04a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f8c:	2827      	cmp	r0, #39	@ 0x27
 8000f8e:	d04a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f90:	2828      	cmp	r0, #40	@ 0x28
 8000f92:	d03a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f94:	2829      	cmp	r0, #41	@ 0x29
 8000f96:	d03a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f98:	282a      	cmp	r0, #42	@ 0x2a
 8000f9a:	d03a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f9c:	282b      	cmp	r0, #43	@ 0x2b
 8000f9e:	d03a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fa0:	282c      	cmp	r0, #44	@ 0x2c
 8000fa2:	d03a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000fa4:	282d      	cmp	r0, #45	@ 0x2d
 8000fa6:	d03a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000fa8:	282e      	cmp	r0, #46	@ 0x2e
 8000faa:	d03a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000fac:	282f      	cmp	r0, #47	@ 0x2f
 8000fae:	d03a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fb0:	2830      	cmp	r0, #48	@ 0x30
 8000fb2:	d02a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000fb4:	2831      	cmp	r0, #49	@ 0x31
 8000fb6:	d02a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fb8:	2838      	cmp	r0, #56	@ 0x38
 8000fba:	d028      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fbc:	2839      	cmp	r0, #57	@ 0x39
 8000fbe:	d02a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fc0:	283a      	cmp	r0, #58	@ 0x3a
 8000fc2:	d030      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fc4:	2841      	cmp	r0, #65	@ 0x41
 8000fc6:	d032      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fc8:	2842      	cmp	r0, #66	@ 0x42
 8000fca:	d030      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fcc:	2843      	cmp	r0, #67	@ 0x43
 8000fce:	d02e      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd0:	2844      	cmp	r0, #68	@ 0x44
 8000fd2:	d02c      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd4:	2848      	cmp	r0, #72	@ 0x48
 8000fd6:	d02a      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd8:	284c      	cmp	r0, #76	@ 0x4c
 8000fda:	d028      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fdc:	2850      	cmp	r0, #80	@ 0x50
 8000fde:	d026      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe0:	2851      	cmp	r0, #81	@ 0x51
 8000fe2:	d024      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe4:	28e0      	cmp	r0, #224	@ 0xe0
 8000fe6:	d016      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fe8:	28e1      	cmp	r0, #225	@ 0xe1
 8000fea:	d014      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fec:	28e2      	cmp	r0, #226	@ 0xe2
 8000fee:	d012      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ff0:	28e8      	cmp	r0, #232	@ 0xe8
 8000ff2:	d00c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff4:	28e9      	cmp	r0, #233	@ 0xe9
 8000ff6:	d00a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff8:	28ea      	cmp	r0, #234	@ 0xea
 8000ffa:	d00c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ffc:	28f0      	cmp	r0, #240	@ 0xf0
 8000ffe:	d012      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8001000:	28f1      	cmp	r0, #241	@ 0xf1
 8001002:	d012      	beq.n	800102a <??ZbZclAttrTypeLength_9>
 8001004:	28ff      	cmp	r0, #255	@ 0xff
 8001006:	d012      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8001008:	e013      	b.n	8001032 <??ZbZclAttrTypeLength_10>

0800100a <??ZbZclAttrTypeLength_1>:
 800100a:	2001      	movs	r0, #1
 800100c:	e012      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800100e <??ZbZclAttrTypeLength_2>:
 800100e:	2002      	movs	r0, #2
 8001010:	e010      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001012 <??ZbZclAttrTypeLength_3>:
 8001012:	2003      	movs	r0, #3
 8001014:	e00e      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001016 <??ZbZclAttrTypeLength_4>:
 8001016:	2004      	movs	r0, #4
 8001018:	e00c      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101a <??ZbZclAttrTypeLength_5>:
 800101a:	2005      	movs	r0, #5
 800101c:	e00a      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101e <??ZbZclAttrTypeLength_6>:
 800101e:	2006      	movs	r0, #6
 8001020:	e008      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001022 <??ZbZclAttrTypeLength_7>:
 8001022:	2007      	movs	r0, #7
 8001024:	e006      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001026 <??ZbZclAttrTypeLength_8>:
 8001026:	2008      	movs	r0, #8
 8001028:	e004      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102a <??ZbZclAttrTypeLength_9>:
 800102a:	2010      	movs	r0, #16
 800102c:	e002      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102e <??ZbZclAttrTypeLength_0>:
 800102e:	2000      	movs	r0, #0
 8001030:	e000      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001032 <??ZbZclAttrTypeLength_10>:
 8001032:	2000      	movs	r0, #0

08001034 <??ZbZclAttrTypeLength_11>:
 8001034:	4770      	bx	lr

08001036 <ZbZclAttrParseLength>:
 8001036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103a:	0006      	movs	r6, r0
 800103c:	000c      	movs	r4, r1
 800103e:	0015      	movs	r5, r2
 8001040:	001f      	movs	r7, r3
 8001042:	0038      	movs	r0, r7
 8001044:	b2c0      	uxtb	r0, r0
 8001046:	280f      	cmp	r0, #15
 8001048:	d302      	bcc.n	8001050 <??ZbZclAttrParseLength_0>
 800104a:	f05f 30ff 	movs.w	r0, #4294967295
 800104e:	e0a1      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001050 <??ZbZclAttrParseLength_0>:
 8001050:	0030      	movs	r0, r6
 8001052:	b2c0      	uxtb	r0, r0
 8001054:	f7ff ff64 	bl	8000f20 <ZbZclAttrTypeLength>
 8001058:	0001      	movs	r1, r0
 800105a:	2901      	cmp	r1, #1
 800105c:	db06      	blt.n	800106c <??ZbZclAttrParseLength_2>
 800105e:	428d      	cmp	r5, r1
 8001060:	d202      	bcs.n	8001068 <??ZbZclAttrParseLength_3>
 8001062:	f05f 30ff 	movs.w	r0, #4294967295
 8001066:	e095      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001068 <??ZbZclAttrParseLength_3>:
 8001068:	0008      	movs	r0, r1
 800106a:	e093      	b.n	8001194 <??ZbZclAttrParseLength_1>

0800106c <??ZbZclAttrParseLength_2>:
 800106c:	2c00      	cmp	r4, #0
 800106e:	d101      	bne.n	8001074 <??ZbZclAttrParseLength_4>
 8001070:	0028      	movs	r0, r5
 8001072:	e08f      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001074 <??ZbZclAttrParseLength_4>:
 8001074:	f05f 39ff 	movs.w	r9, #4294967295
 8001078:	0030      	movs	r0, r6
 800107a:	b2c0      	uxtb	r0, r0
 800107c:	3841      	subs	r0, #65	@ 0x41
 800107e:	2801      	cmp	r0, #1
 8001080:	d90a      	bls.n	8001098 <??ZbZclAttrParseLength_5>
 8001082:	1e80      	subs	r0, r0, #2
 8001084:	2801      	cmp	r0, #1
 8001086:	d914      	bls.n	80010b2 <??ZbZclAttrParseLength_6>
 8001088:	1f40      	subs	r0, r0, #5
 800108a:	d027      	beq.n	80010dc <??ZbZclAttrParseLength_7>
 800108c:	1f00      	subs	r0, r0, #4
 800108e:	d04b      	beq.n	8001128 <??ZbZclAttrParseLength_8>
 8001090:	1f00      	subs	r0, r0, #4
 8001092:	2801      	cmp	r0, #1
 8001094:	d922      	bls.n	80010dc <??ZbZclAttrParseLength_7>
 8001096:	e074      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001098 <??ZbZclAttrParseLength_5>:
 8001098:	2d00      	cmp	r5, #0
 800109a:	d072      	beq.n	8001182 <??ZbZclAttrParseLength_10>

0800109c <??ZbZclAttrParseLength_11>:
 800109c:	7820      	ldrb	r0, [r4, #0]
 800109e:	28ff      	cmp	r0, #255	@ 0xff
 80010a0:	d102      	bne.n	80010a8 <??ZbZclAttrParseLength_12>
 80010a2:	f05f 0901 	movs.w	r9, #1
 80010a6:	e003      	b.n	80010b0 <??ZbZclAttrParseLength_13>

080010a8 <??ZbZclAttrParseLength_12>:
 80010a8:	f894 9000 	ldrb.w	r9, [r4]
 80010ac:	f119 0901 	adds.w	r9, r9, #1

080010b0 <??ZbZclAttrParseLength_13>:
 80010b0:	e067      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010b2 <??ZbZclAttrParseLength_6>:
 80010b2:	2d02      	cmp	r5, #2
 80010b4:	d365      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010b6 <??ZbZclAttrParseLength_14>:
 80010b6:	0020      	movs	r0, r4
 80010b8:	f006 f803 	bl	80070c2 <pletoh16>
 80010bc:	4680      	mov	r8, r0
 80010be:	4640      	mov	r0, r8
 80010c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010c4:	b280      	uxth	r0, r0
 80010c6:	4288      	cmp	r0, r1
 80010c8:	d102      	bne.n	80010d0 <??ZbZclAttrParseLength_15>
 80010ca:	f05f 0902 	movs.w	r9, #2
 80010ce:	e004      	b.n	80010da <??ZbZclAttrParseLength_16>

080010d0 <??ZbZclAttrParseLength_15>:
 80010d0:	46c1      	mov	r9, r8
 80010d2:	fa1f f989 	uxth.w	r9, r9
 80010d6:	f119 0902 	adds.w	r9, r9, #2

080010da <??ZbZclAttrParseLength_16>:
 80010da:	e052      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010dc <??ZbZclAttrParseLength_7>:
 80010dc:	2d03      	cmp	r5, #3
 80010de:	d350      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010e0 <??ZbZclAttrParseLength_17>:
 80010e0:	7820      	ldrb	r0, [r4, #0]
 80010e2:	4683      	mov	fp, r0
 80010e4:	1c60      	adds	r0, r4, #1
 80010e6:	f005 ffec 	bl	80070c2 <pletoh16>
 80010ea:	4680      	mov	r8, r0
 80010ec:	2003      	movs	r0, #3
 80010ee:	4681      	mov	r9, r0

080010f0 <??ZbZclAttrParseLength_18>:
 80010f0:	4640      	mov	r0, r8
 80010f2:	b280      	uxth	r0, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d016      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 80010f8:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80010fc:	4640      	mov	r0, r8
 80010fe:	b280      	uxth	r0, r0
 8001100:	4550      	cmp	r0, sl
 8001102:	d010      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	ebb5 0209 	subs.w	r2, r5, r9
 800110c:	eb04 0109 	add.w	r1, r4, r9
 8001110:	4658      	mov	r0, fp
 8001112:	b2c0      	uxtb	r0, r0
 8001114:	f7ff ff8f 	bl	8001036 <ZbZclAttrParseLength>
 8001118:	2800      	cmp	r0, #0
 800111a:	d43b      	bmi.n	8001194 <??ZbZclAttrParseLength_1>

0800111c <??ZbZclAttrParseLength_20>:
 800111c:	eb10 0909 	adds.w	r9, r0, r9
 8001120:	eb1a 0808 	adds.w	r8, sl, r8
 8001124:	e7e4      	b.n	80010f0 <??ZbZclAttrParseLength_18>

08001126 <??ZbZclAttrParseLength_19>:
 8001126:	e02c      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001128 <??ZbZclAttrParseLength_8>:
 8001128:	2d02      	cmp	r5, #2
 800112a:	d32a      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

0800112c <??ZbZclAttrParseLength_21>:
 800112c:	0020      	movs	r0, r4
 800112e:	f005 ffc8 	bl	80070c2 <pletoh16>
 8001132:	4680      	mov	r8, r0
 8001134:	2002      	movs	r0, #2
 8001136:	4681      	mov	r9, r0

08001138 <??ZbZclAttrParseLength_22>:
 8001138:	4640      	mov	r0, r8
 800113a:	b280      	uxth	r0, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d01f      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 8001140:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8001144:	4640      	mov	r0, r8
 8001146:	b280      	uxth	r0, r0
 8001148:	4550      	cmp	r0, sl
 800114a:	d019      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 800114c:	f119 0001 	adds.w	r0, r9, #1
 8001150:	4285      	cmp	r5, r0
 8001152:	d315      	bcc.n	8001180 <??ZbZclAttrParseLength_23>

08001154 <??ZbZclAttrParseLength_24>:
 8001154:	f814 0009 	ldrb.w	r0, [r4, r9]
 8001158:	4683      	mov	fp, r0
 800115a:	f119 0901 	adds.w	r9, r9, #1
 800115e:	1c7b      	adds	r3, r7, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	ebb5 0209 	subs.w	r2, r5, r9
 8001166:	eb04 0109 	add.w	r1, r4, r9
 800116a:	4658      	mov	r0, fp
 800116c:	b2c0      	uxtb	r0, r0
 800116e:	f7ff ff62 	bl	8001036 <ZbZclAttrParseLength>
 8001172:	2800      	cmp	r0, #0
 8001174:	d404      	bmi.n	8001180 <??ZbZclAttrParseLength_23>

08001176 <??ZbZclAttrParseLength_25>:
 8001176:	eb10 0909 	adds.w	r9, r0, r9
 800117a:	eb1a 0808 	adds.w	r8, sl, r8
 800117e:	e7db      	b.n	8001138 <??ZbZclAttrParseLength_22>

08001180 <??ZbZclAttrParseLength_23>:
 8001180:	e7ff      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001182 <??ZbZclAttrParseLength_10>:
 8001182:	f1b9 0f00 	cmp.w	r9, #0
 8001186:	d401      	bmi.n	800118c <??ZbZclAttrParseLength_26>
 8001188:	454d      	cmp	r5, r9
 800118a:	d202      	bcs.n	8001192 <??ZbZclAttrParseLength_27>

0800118c <??ZbZclAttrParseLength_26>:
 800118c:	f05f 30ff 	movs.w	r0, #4294967295
 8001190:	e000      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001192 <??ZbZclAttrParseLength_27>:
 8001192:	4648      	mov	r0, r9

08001194 <??ZbZclAttrParseLength_1>:
 8001194:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001198 <ZbZclAttrIsAnalog>:
 8001198:	0001      	movs	r1, r0
 800119a:	0008      	movs	r0, r1
 800119c:	b2c0      	uxtb	r0, r0
 800119e:	2820      	cmp	r0, #32
 80011a0:	db05      	blt.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011a2:	0008      	movs	r0, r1
 80011a4:	b2c0      	uxtb	r0, r0
 80011a6:	2828      	cmp	r0, #40	@ 0x28
 80011a8:	da01      	bge.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011aa:	2001      	movs	r0, #1
 80011ac:	e026      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011ae <??ZbZclAttrIsAnalog_0>:
 80011ae:	0008      	movs	r0, r1
 80011b0:	b2c0      	uxtb	r0, r0
 80011b2:	2828      	cmp	r0, #40	@ 0x28
 80011b4:	db05      	blt.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011b6:	0008      	movs	r0, r1
 80011b8:	b2c0      	uxtb	r0, r0
 80011ba:	2830      	cmp	r0, #48	@ 0x30
 80011bc:	da01      	bge.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011be:	2001      	movs	r0, #1
 80011c0:	e01c      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011c2 <??ZbZclAttrIsAnalog_2>:
 80011c2:	0008      	movs	r0, r1
 80011c4:	b2c0      	uxtb	r0, r0
 80011c6:	2838      	cmp	r0, #56	@ 0x38
 80011c8:	d007      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011ca:	0008      	movs	r0, r1
 80011cc:	b2c0      	uxtb	r0, r0
 80011ce:	2839      	cmp	r0, #57	@ 0x39
 80011d0:	d003      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011d2:	0008      	movs	r0, r1
 80011d4:	b2c0      	uxtb	r0, r0
 80011d6:	283a      	cmp	r0, #58	@ 0x3a
 80011d8:	d101      	bne.n	80011de <??ZbZclAttrIsAnalog_4>

080011da <??ZbZclAttrIsAnalog_3>:
 80011da:	2001      	movs	r0, #1
 80011dc:	e00e      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011de <??ZbZclAttrIsAnalog_4>:
 80011de:	0008      	movs	r0, r1
 80011e0:	b2c0      	uxtb	r0, r0
 80011e2:	28e0      	cmp	r0, #224	@ 0xe0
 80011e4:	d007      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011e6:	0008      	movs	r0, r1
 80011e8:	b2c0      	uxtb	r0, r0
 80011ea:	28e1      	cmp	r0, #225	@ 0xe1
 80011ec:	d003      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011ee:	0008      	movs	r0, r1
 80011f0:	b2c0      	uxtb	r0, r0
 80011f2:	28e2      	cmp	r0, #226	@ 0xe2
 80011f4:	d101      	bne.n	80011fa <??ZbZclAttrIsAnalog_6>

080011f6 <??ZbZclAttrIsAnalog_5>:
 80011f6:	2001      	movs	r0, #1
 80011f8:	e000      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011fa <??ZbZclAttrIsAnalog_6>:
 80011fa:	2000      	movs	r0, #0

080011fc <??ZbZclAttrIsAnalog_1>:
 80011fc:	4770      	bx	lr
	...

08001200 <ZbZclAppendInteger>:
 8001200:	b4f0      	push	{r4, r5, r6, r7}
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1
 8001206:	9904      	ldr	r1, [sp, #16]
 8001208:	2700      	movs	r7, #0
 800120a:	2600      	movs	r6, #0
 800120c:	0010      	movs	r0, r2
 800120e:	b2c0      	uxtb	r0, r0
 8001210:	2808      	cmp	r0, #8
 8001212:	f000 80b2 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001216:	2809      	cmp	r0, #9
 8001218:	f000 80a4 	beq.w	8001364 <??ZbZclAppendInteger_1>
 800121c:	280a      	cmp	r0, #10
 800121e:	f000 8096 	beq.w	800134e <??ZbZclAppendInteger_2>
 8001222:	280b      	cmp	r0, #11
 8001224:	f000 8088 	beq.w	8001338 <??ZbZclAppendInteger_3>
 8001228:	280c      	cmp	r0, #12
 800122a:	d07a      	beq.n	8001322 <??ZbZclAppendInteger_4>
 800122c:	280d      	cmp	r0, #13
 800122e:	d06d      	beq.n	800130c <??ZbZclAppendInteger_5>
 8001230:	280e      	cmp	r0, #14
 8001232:	d060      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001234:	280f      	cmp	r0, #15
 8001236:	d053      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001238:	2810      	cmp	r0, #16
 800123a:	d042      	beq.n	80012c2 <??ZbZclAppendInteger_8>
 800123c:	2818      	cmp	r0, #24
 800123e:	f000 809c 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001242:	2819      	cmp	r0, #25
 8001244:	f000 808e 	beq.w	8001364 <??ZbZclAppendInteger_1>
 8001248:	281a      	cmp	r0, #26
 800124a:	f000 8080 	beq.w	800134e <??ZbZclAppendInteger_2>
 800124e:	281b      	cmp	r0, #27
 8001250:	d072      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001252:	281c      	cmp	r0, #28
 8001254:	d065      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001256:	281d      	cmp	r0, #29
 8001258:	d058      	beq.n	800130c <??ZbZclAppendInteger_5>
 800125a:	281e      	cmp	r0, #30
 800125c:	d04b      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 800125e:	281f      	cmp	r0, #31
 8001260:	d03e      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001262:	2820      	cmp	r0, #32
 8001264:	f000 8089 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001268:	2821      	cmp	r0, #33	@ 0x21
 800126a:	d07b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800126c:	2822      	cmp	r0, #34	@ 0x22
 800126e:	d06e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001270:	2823      	cmp	r0, #35	@ 0x23
 8001272:	d061      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001274:	2824      	cmp	r0, #36	@ 0x24
 8001276:	d054      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001278:	2825      	cmp	r0, #37	@ 0x25
 800127a:	d047      	beq.n	800130c <??ZbZclAppendInteger_5>
 800127c:	2826      	cmp	r0, #38	@ 0x26
 800127e:	d03a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001280:	2827      	cmp	r0, #39	@ 0x27
 8001282:	d02d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001284:	2828      	cmp	r0, #40	@ 0x28
 8001286:	d078      	beq.n	800137a <??ZbZclAppendInteger_0>
 8001288:	2829      	cmp	r0, #41	@ 0x29
 800128a:	d06b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800128c:	282a      	cmp	r0, #42	@ 0x2a
 800128e:	d05e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001290:	282b      	cmp	r0, #43	@ 0x2b
 8001292:	d051      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001294:	282c      	cmp	r0, #44	@ 0x2c
 8001296:	d044      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001298:	282d      	cmp	r0, #45	@ 0x2d
 800129a:	d037      	beq.n	800130c <??ZbZclAppendInteger_5>
 800129c:	282e      	cmp	r0, #46	@ 0x2e
 800129e:	d02a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 80012a0:	282f      	cmp	r0, #47	@ 0x2f
 80012a2:	d01d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012a4:	2830      	cmp	r0, #48	@ 0x30
 80012a6:	d068      	beq.n	800137a <??ZbZclAppendInteger_0>
 80012a8:	2831      	cmp	r0, #49	@ 0x31
 80012aa:	d05b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012ac:	28e2      	cmp	r0, #226	@ 0xe2
 80012ae:	d043      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012b0:	28e8      	cmp	r0, #232	@ 0xe8
 80012b2:	d057      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b4:	28e9      	cmp	r0, #233	@ 0xe9
 80012b6:	d055      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b8:	28ea      	cmp	r0, #234	@ 0xea
 80012ba:	d03d      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012bc:	28f0      	cmp	r0, #240	@ 0xf0
 80012be:	d00f      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012c0:	e064      	b.n	800138c <??ZbZclAppendInteger_9>

080012c2 <??ZbZclAppendInteger_8>:
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d102      	bne.n	80012cc <??ZbZclAppendInteger_10>
 80012c6:	f05f 30ff 	movs.w	r0, #4294967295
 80012ca:	e061      	b.n	8001390 <??ZbZclAppendInteger_11>

080012cc <??ZbZclAppendInteger_10>:
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d101      	bne.n	80012d4 <??ZbZclAppendInteger_12>
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d001      	beq.n	80012d8 <??ZbZclAppendInteger_13>

080012d4 <??ZbZclAppendInteger_12>:
 80012d4:	2001      	movs	r0, #1
 80012d6:	e000      	b.n	80012da <??ZbZclAppendInteger_14>

080012d8 <??ZbZclAppendInteger_13>:
 80012d8:	2000      	movs	r0, #0

080012da <??ZbZclAppendInteger_14>:
 80012da:	7018      	strb	r0, [r3, #0]
 80012dc:	2001      	movs	r0, #1
 80012de:	e057      	b.n	8001390 <??ZbZclAppendInteger_11>

080012e0 <??ZbZclAppendInteger_7>:
 80012e0:	428f      	cmp	r7, r1
 80012e2:	d302      	bcc.n	80012ea <??ZbZclAppendInteger_15>
 80012e4:	f05f 30ff 	movs.w	r0, #4294967295
 80012e8:	e052      	b.n	8001390 <??ZbZclAppendInteger_11>

080012ea <??ZbZclAppendInteger_15>:
 80012ea:	55dc      	strb	r4, [r3, r7]
 80012ec:	1c7f      	adds	r7, r7, #1
 80012ee:	0a24      	lsrs	r4, r4, #8
 80012f0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80012f4:	0a2d      	lsrs	r5, r5, #8

080012f6 <??ZbZclAppendInteger_6>:
 80012f6:	428f      	cmp	r7, r1
 80012f8:	d302      	bcc.n	8001300 <??ZbZclAppendInteger_16>
 80012fa:	f05f 30ff 	movs.w	r0, #4294967295
 80012fe:	e047      	b.n	8001390 <??ZbZclAppendInteger_11>

08001300 <??ZbZclAppendInteger_16>:
 8001300:	55dc      	strb	r4, [r3, r7]
 8001302:	1c7f      	adds	r7, r7, #1
 8001304:	0a24      	lsrs	r4, r4, #8
 8001306:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800130a:	0a2d      	lsrs	r5, r5, #8

0800130c <??ZbZclAppendInteger_5>:
 800130c:	428f      	cmp	r7, r1
 800130e:	d302      	bcc.n	8001316 <??ZbZclAppendInteger_17>
 8001310:	f05f 30ff 	movs.w	r0, #4294967295
 8001314:	e03c      	b.n	8001390 <??ZbZclAppendInteger_11>

08001316 <??ZbZclAppendInteger_17>:
 8001316:	55dc      	strb	r4, [r3, r7]
 8001318:	1c7f      	adds	r7, r7, #1
 800131a:	0a24      	lsrs	r4, r4, #8
 800131c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001320:	0a2d      	lsrs	r5, r5, #8

08001322 <??ZbZclAppendInteger_4>:
 8001322:	428f      	cmp	r7, r1
 8001324:	d302      	bcc.n	800132c <??ZbZclAppendInteger_18>
 8001326:	f05f 30ff 	movs.w	r0, #4294967295
 800132a:	e031      	b.n	8001390 <??ZbZclAppendInteger_11>

0800132c <??ZbZclAppendInteger_18>:
 800132c:	55dc      	strb	r4, [r3, r7]
 800132e:	1c7f      	adds	r7, r7, #1
 8001330:	0a24      	lsrs	r4, r4, #8
 8001332:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001336:	0a2d      	lsrs	r5, r5, #8

08001338 <??ZbZclAppendInteger_3>:
 8001338:	428f      	cmp	r7, r1
 800133a:	d302      	bcc.n	8001342 <??ZbZclAppendInteger_19>
 800133c:	f05f 30ff 	movs.w	r0, #4294967295
 8001340:	e026      	b.n	8001390 <??ZbZclAppendInteger_11>

08001342 <??ZbZclAppendInteger_19>:
 8001342:	55dc      	strb	r4, [r3, r7]
 8001344:	1c7f      	adds	r7, r7, #1
 8001346:	0a24      	lsrs	r4, r4, #8
 8001348:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800134c:	0a2d      	lsrs	r5, r5, #8

0800134e <??ZbZclAppendInteger_2>:
 800134e:	428f      	cmp	r7, r1
 8001350:	d302      	bcc.n	8001358 <??ZbZclAppendInteger_20>
 8001352:	f05f 30ff 	movs.w	r0, #4294967295
 8001356:	e01b      	b.n	8001390 <??ZbZclAppendInteger_11>

08001358 <??ZbZclAppendInteger_20>:
 8001358:	55dc      	strb	r4, [r3, r7]
 800135a:	1c7f      	adds	r7, r7, #1
 800135c:	0a24      	lsrs	r4, r4, #8
 800135e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001362:	0a2d      	lsrs	r5, r5, #8

08001364 <??ZbZclAppendInteger_1>:
 8001364:	428f      	cmp	r7, r1
 8001366:	d302      	bcc.n	800136e <??ZbZclAppendInteger_21>
 8001368:	f05f 30ff 	movs.w	r0, #4294967295
 800136c:	e010      	b.n	8001390 <??ZbZclAppendInteger_11>

0800136e <??ZbZclAppendInteger_21>:
 800136e:	55dc      	strb	r4, [r3, r7]
 8001370:	1c7f      	adds	r7, r7, #1
 8001372:	0a24      	lsrs	r4, r4, #8
 8001374:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001378:	0a2d      	lsrs	r5, r5, #8

0800137a <??ZbZclAppendInteger_0>:
 800137a:	428f      	cmp	r7, r1
 800137c:	d302      	bcc.n	8001384 <??ZbZclAppendInteger_22>
 800137e:	f05f 30ff 	movs.w	r0, #4294967295
 8001382:	e005      	b.n	8001390 <??ZbZclAppendInteger_11>

08001384 <??ZbZclAppendInteger_22>:
 8001384:	55dc      	strb	r4, [r3, r7]
 8001386:	1c7f      	adds	r7, r7, #1
 8001388:	0038      	movs	r0, r7
 800138a:	e001      	b.n	8001390 <??ZbZclAppendInteger_11>

0800138c <??ZbZclAppendInteger_9>:
 800138c:	f05f 30ff 	movs.w	r0, #4294967295

08001390 <??ZbZclAppendInteger_11>:
 8001390:	bcf0      	pop	{r4, r5, r6, r7}
 8001392:	4770      	bx	lr

08001394 <ZbZclParseInteger>:
 8001394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001398:	4683      	mov	fp, r0
 800139a:	000e      	movs	r6, r1
 800139c:	4692      	mov	sl, r2
 800139e:	2700      	movs	r7, #0
 80013a0:	2400      	movs	r4, #0
 80013a2:	2500      	movs	r5, #0
 80013a4:	f05f 0800 	movs.w	r8, #0
 80013a8:	f05f 0900 	movs.w	r9, #0
 80013ac:	4658      	mov	r0, fp
 80013ae:	b2c0      	uxtb	r0, r0
 80013b0:	f000 f91e 	bl	80015f0 <ZbZclAttrIsInteger>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d105      	bne.n	80013c4 <??ZbZclParseInteger_0>
 80013b8:	208d      	movs	r0, #141	@ 0x8d
 80013ba:	f88a 0000 	strb.w	r0, [sl]
 80013be:	2000      	movs	r0, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	e113      	b.n	80015ec <??ZbZclParseInteger_1>

080013c4 <??ZbZclParseInteger_0>:
 80013c4:	2000      	movs	r0, #0
 80013c6:	f88a 0000 	strb.w	r0, [sl]
 80013ca:	4658      	mov	r0, fp
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	2808      	cmp	r0, #8
 80013d0:	f000 8097 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013d4:	2809      	cmp	r0, #9
 80013d6:	f000 808a 	beq.w	80014ee <??ZbZclParseInteger_3>
 80013da:	280a      	cmp	r0, #10
 80013dc:	d07d      	beq.n	80014da <??ZbZclParseInteger_4>
 80013de:	280b      	cmp	r0, #11
 80013e0:	d071      	beq.n	80014c6 <??ZbZclParseInteger_5>
 80013e2:	280c      	cmp	r0, #12
 80013e4:	d065      	beq.n	80014b2 <??ZbZclParseInteger_6>
 80013e6:	280d      	cmp	r0, #13
 80013e8:	d059      	beq.n	800149e <??ZbZclParseInteger_7>
 80013ea:	280e      	cmp	r0, #14
 80013ec:	d04d      	beq.n	800148a <??ZbZclParseInteger_8>
 80013ee:	280f      	cmp	r0, #15
 80013f0:	d046      	beq.n	8001480 <??ZbZclParseInteger_9>
 80013f2:	2810      	cmp	r0, #16
 80013f4:	f000 8085 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013f8:	2818      	cmp	r0, #24
 80013fa:	f000 8082 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013fe:	2819      	cmp	r0, #25
 8001400:	d075      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001402:	281a      	cmp	r0, #26
 8001404:	d069      	beq.n	80014da <??ZbZclParseInteger_4>
 8001406:	281b      	cmp	r0, #27
 8001408:	d05d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800140a:	281c      	cmp	r0, #28
 800140c:	d051      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800140e:	281d      	cmp	r0, #29
 8001410:	d045      	beq.n	800149e <??ZbZclParseInteger_7>
 8001412:	281e      	cmp	r0, #30
 8001414:	d039      	beq.n	800148a <??ZbZclParseInteger_8>
 8001416:	281f      	cmp	r0, #31
 8001418:	d032      	beq.n	8001480 <??ZbZclParseInteger_9>
 800141a:	2820      	cmp	r0, #32
 800141c:	d071      	beq.n	8001502 <??ZbZclParseInteger_2>
 800141e:	2821      	cmp	r0, #33	@ 0x21
 8001420:	d065      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001422:	2822      	cmp	r0, #34	@ 0x22
 8001424:	d059      	beq.n	80014da <??ZbZclParseInteger_4>
 8001426:	2823      	cmp	r0, #35	@ 0x23
 8001428:	d04d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800142a:	2824      	cmp	r0, #36	@ 0x24
 800142c:	d041      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800142e:	2825      	cmp	r0, #37	@ 0x25
 8001430:	d035      	beq.n	800149e <??ZbZclParseInteger_7>
 8001432:	2826      	cmp	r0, #38	@ 0x26
 8001434:	d029      	beq.n	800148a <??ZbZclParseInteger_8>
 8001436:	2827      	cmp	r0, #39	@ 0x27
 8001438:	d022      	beq.n	8001480 <??ZbZclParseInteger_9>
 800143a:	2828      	cmp	r0, #40	@ 0x28
 800143c:	f000 80ac 	beq.w	8001598 <??ZbZclParseInteger_10>
 8001440:	2829      	cmp	r0, #41	@ 0x29
 8001442:	f000 809f 	beq.w	8001584 <??ZbZclParseInteger_11>
 8001446:	282a      	cmp	r0, #42	@ 0x2a
 8001448:	f000 8092 	beq.w	8001570 <??ZbZclParseInteger_12>
 800144c:	282b      	cmp	r0, #43	@ 0x2b
 800144e:	f000 8085 	beq.w	800155c <??ZbZclParseInteger_13>
 8001452:	282c      	cmp	r0, #44	@ 0x2c
 8001454:	d078      	beq.n	8001548 <??ZbZclParseInteger_14>
 8001456:	282d      	cmp	r0, #45	@ 0x2d
 8001458:	d06c      	beq.n	8001534 <??ZbZclParseInteger_15>
 800145a:	282e      	cmp	r0, #46	@ 0x2e
 800145c:	d060      	beq.n	8001520 <??ZbZclParseInteger_16>
 800145e:	282f      	cmp	r0, #47	@ 0x2f
 8001460:	d059      	beq.n	8001516 <??ZbZclParseInteger_17>
 8001462:	2830      	cmp	r0, #48	@ 0x30
 8001464:	d04d      	beq.n	8001502 <??ZbZclParseInteger_2>
 8001466:	2831      	cmp	r0, #49	@ 0x31
 8001468:	d041      	beq.n	80014ee <??ZbZclParseInteger_3>
 800146a:	28e2      	cmp	r0, #226	@ 0xe2
 800146c:	d02b      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800146e:	28e8      	cmp	r0, #232	@ 0xe8
 8001470:	d03d      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001472:	28e9      	cmp	r0, #233	@ 0xe9
 8001474:	d03b      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001476:	28ea      	cmp	r0, #234	@ 0xea
 8001478:	d025      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800147a:	28f0      	cmp	r0, #240	@ 0xf0
 800147c:	f040 80b1 	bne.w	80015e2 <??ZbZclParseInteger_18>

08001480 <??ZbZclParseInteger_9>:
 8001480:	5df0      	ldrb	r0, [r6, r7]
 8001482:	2100      	movs	r1, #0
 8001484:	4304      	orrs	r4, r0
 8001486:	430d      	orrs	r5, r1
 8001488:	1c7f      	adds	r7, r7, #1

0800148a <??ZbZclParseInteger_8>:
 800148a:	5df0      	ldrb	r0, [r6, r7]
 800148c:	2100      	movs	r1, #0
 800148e:	003a      	movs	r2, r7
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	f006 fce4 	bl	8007e60 <__aeabi_llsl>
 8001498:	4304      	orrs	r4, r0
 800149a:	430d      	orrs	r5, r1
 800149c:	1c7f      	adds	r7, r7, #1

0800149e <??ZbZclParseInteger_7>:
 800149e:	5df0      	ldrb	r0, [r6, r7]
 80014a0:	2100      	movs	r1, #0
 80014a2:	003a      	movs	r2, r7
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	00d2      	lsls	r2, r2, #3
 80014a8:	f006 fcda 	bl	8007e60 <__aeabi_llsl>
 80014ac:	4304      	orrs	r4, r0
 80014ae:	430d      	orrs	r5, r1
 80014b0:	1c7f      	adds	r7, r7, #1

080014b2 <??ZbZclParseInteger_6>:
 80014b2:	5df0      	ldrb	r0, [r6, r7]
 80014b4:	2100      	movs	r1, #0
 80014b6:	003a      	movs	r2, r7
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	00d2      	lsls	r2, r2, #3
 80014bc:	f006 fcd0 	bl	8007e60 <__aeabi_llsl>
 80014c0:	4304      	orrs	r4, r0
 80014c2:	430d      	orrs	r5, r1
 80014c4:	1c7f      	adds	r7, r7, #1

080014c6 <??ZbZclParseInteger_5>:
 80014c6:	5df0      	ldrb	r0, [r6, r7]
 80014c8:	2100      	movs	r1, #0
 80014ca:	003a      	movs	r2, r7
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	f006 fcc6 	bl	8007e60 <__aeabi_llsl>
 80014d4:	4304      	orrs	r4, r0
 80014d6:	430d      	orrs	r5, r1
 80014d8:	1c7f      	adds	r7, r7, #1

080014da <??ZbZclParseInteger_4>:
 80014da:	5df0      	ldrb	r0, [r6, r7]
 80014dc:	2100      	movs	r1, #0
 80014de:	003a      	movs	r2, r7
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	00d2      	lsls	r2, r2, #3
 80014e4:	f006 fcbc 	bl	8007e60 <__aeabi_llsl>
 80014e8:	4304      	orrs	r4, r0
 80014ea:	430d      	orrs	r5, r1
 80014ec:	1c7f      	adds	r7, r7, #1

080014ee <??ZbZclParseInteger_3>:
 80014ee:	5df0      	ldrb	r0, [r6, r7]
 80014f0:	2100      	movs	r1, #0
 80014f2:	003a      	movs	r2, r7
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	f006 fcb2 	bl	8007e60 <__aeabi_llsl>
 80014fc:	4304      	orrs	r4, r0
 80014fe:	430d      	orrs	r5, r1
 8001500:	1c7f      	adds	r7, r7, #1

08001502 <??ZbZclParseInteger_2>:
 8001502:	5df0      	ldrb	r0, [r6, r7]
 8001504:	2100      	movs	r1, #0
 8001506:	003a      	movs	r2, r7
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	f006 fca8 	bl	8007e60 <__aeabi_llsl>
 8001510:	4320      	orrs	r0, r4
 8001512:	4329      	orrs	r1, r5
 8001514:	e06a      	b.n	80015ec <??ZbZclParseInteger_1>

08001516 <??ZbZclParseInteger_17>:
 8001516:	5df0      	ldrb	r0, [r6, r7]
 8001518:	2100      	movs	r1, #0
 800151a:	4304      	orrs	r4, r0
 800151c:	430d      	orrs	r5, r1
 800151e:	1c7f      	adds	r7, r7, #1

08001520 <??ZbZclParseInteger_16>:
 8001520:	5df0      	ldrb	r0, [r6, r7]
 8001522:	2100      	movs	r1, #0
 8001524:	003a      	movs	r2, r7
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	f006 fc99 	bl	8007e60 <__aeabi_llsl>
 800152e:	4304      	orrs	r4, r0
 8001530:	430d      	orrs	r5, r1
 8001532:	1c7f      	adds	r7, r7, #1

08001534 <??ZbZclParseInteger_15>:
 8001534:	5df0      	ldrb	r0, [r6, r7]
 8001536:	2100      	movs	r1, #0
 8001538:	003a      	movs	r2, r7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	f006 fc8f 	bl	8007e60 <__aeabi_llsl>
 8001542:	4304      	orrs	r4, r0
 8001544:	430d      	orrs	r5, r1
 8001546:	1c7f      	adds	r7, r7, #1

08001548 <??ZbZclParseInteger_14>:
 8001548:	5df0      	ldrb	r0, [r6, r7]
 800154a:	2100      	movs	r1, #0
 800154c:	003a      	movs	r2, r7
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	f006 fc85 	bl	8007e60 <__aeabi_llsl>
 8001556:	4304      	orrs	r4, r0
 8001558:	430d      	orrs	r5, r1
 800155a:	1c7f      	adds	r7, r7, #1

0800155c <??ZbZclParseInteger_13>:
 800155c:	5df0      	ldrb	r0, [r6, r7]
 800155e:	2100      	movs	r1, #0
 8001560:	003a      	movs	r2, r7
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	f006 fc7b 	bl	8007e60 <__aeabi_llsl>
 800156a:	4304      	orrs	r4, r0
 800156c:	430d      	orrs	r5, r1
 800156e:	1c7f      	adds	r7, r7, #1

08001570 <??ZbZclParseInteger_12>:
 8001570:	5df0      	ldrb	r0, [r6, r7]
 8001572:	2100      	movs	r1, #0
 8001574:	003a      	movs	r2, r7
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	f006 fc71 	bl	8007e60 <__aeabi_llsl>
 800157e:	4304      	orrs	r4, r0
 8001580:	430d      	orrs	r5, r1
 8001582:	1c7f      	adds	r7, r7, #1

08001584 <??ZbZclParseInteger_11>:
 8001584:	5df0      	ldrb	r0, [r6, r7]
 8001586:	2100      	movs	r1, #0
 8001588:	003a      	movs	r2, r7
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	f006 fc67 	bl	8007e60 <__aeabi_llsl>
 8001592:	4304      	orrs	r4, r0
 8001594:	430d      	orrs	r5, r1
 8001596:	1c7f      	adds	r7, r7, #1

08001598 <??ZbZclParseInteger_10>:
 8001598:	5df0      	ldrb	r0, [r6, r7]
 800159a:	2100      	movs	r1, #0
 800159c:	003a      	movs	r2, r7
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	f006 fc5d 	bl	8007e60 <__aeabi_llsl>
 80015a6:	4320      	orrs	r0, r4
 80015a8:	4329      	orrs	r1, r5
 80015aa:	003a      	movs	r2, r7
 80015ac:	1c57      	adds	r7, r2, #1
 80015ae:	5cb2      	ldrb	r2, [r6, r2]
 80015b0:	0612      	lsls	r2, r2, #24
 80015b2:	d515      	bpl.n	80015e0 <??ZbZclParseInteger_19>
 80015b4:	2f08      	cmp	r7, #8
 80015b6:	d213      	bcs.n	80015e0 <??ZbZclParseInteger_19>
 80015b8:	0004      	movs	r4, r0
 80015ba:	000d      	movs	r5, r1
 80015bc:	2001      	movs	r0, #1
 80015be:	2100      	movs	r1, #0
 80015c0:	f1d7 0208 	rsbs	r2, r7, #8
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	f006 fc4a 	bl	8007e60 <__aeabi_llsl>
 80015cc:	1e40      	subs	r0, r0, #1
 80015ce:	f171 0100 	sbcs.w	r1, r1, #0
 80015d2:	003a      	movs	r2, r7
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	00d2      	lsls	r2, r2, #3
 80015d8:	f006 fc42 	bl	8007e60 <__aeabi_llsl>
 80015dc:	4320      	orrs	r0, r4
 80015de:	4329      	orrs	r1, r5

080015e0 <??ZbZclParseInteger_19>:
 80015e0:	e004      	b.n	80015ec <??ZbZclParseInteger_1>

080015e2 <??ZbZclParseInteger_18>:
 80015e2:	208d      	movs	r0, #141	@ 0x8d
 80015e4:	f88a 0000 	strb.w	r0, [sl]
 80015e8:	2000      	movs	r0, #0
 80015ea:	2100      	movs	r1, #0

080015ec <??ZbZclParseInteger_1>:
 80015ec:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015f0 <ZbZclAttrIsInteger>:
 80015f0:	0001      	movs	r1, r0
 80015f2:	2200      	movs	r2, #0
 80015f4:	0008      	movs	r0, r1
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	3808      	subs	r0, #8
 80015fa:	2808      	cmp	r0, #8
 80015fc:	d909      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 80015fe:	3810      	subs	r0, #16
 8001600:	2819      	cmp	r0, #25
 8001602:	d906      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 8001604:	38ca      	subs	r0, #202	@ 0xca
 8001606:	d004      	beq.n	8001612 <??ZbZclAttrIsInteger_0>
 8001608:	1f80      	subs	r0, r0, #6
 800160a:	2802      	cmp	r0, #2
 800160c:	d901      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 800160e:	3808      	subs	r0, #8
 8001610:	d101      	bne.n	8001616 <??ZbZclAttrIsInteger_1>

08001612 <??ZbZclAttrIsInteger_0>:
 8001612:	2001      	movs	r0, #1
 8001614:	e000      	b.n	8001618 <??ZbZclAttrIsInteger_2>

08001616 <??ZbZclAttrIsInteger_1>:
 8001616:	2000      	movs	r0, #0

08001618 <??ZbZclAttrIsInteger_2>:
 8001618:	b2c0      	uxtb	r0, r0
 800161a:	4770      	bx	lr

0800161c <ZbZclAttrIntegerRangeCheck>:
 800161c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001620:	0004      	movs	r4, r0
 8001622:	000d      	movs	r5, r1
 8001624:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001628:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800162c:	0010      	movs	r0, r2
 800162e:	b2c0      	uxtb	r0, r0
 8001630:	2810      	cmp	r0, #16
 8001632:	d045      	beq.n	80016c0 <??ZbZclAttrIntegerRangeCheck_0>
 8001634:	2818      	cmp	r0, #24
 8001636:	d051      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001638:	2819      	cmp	r0, #25
 800163a:	d060      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 800163c:	281a      	cmp	r0, #26
 800163e:	d072      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 8001640:	281b      	cmp	r0, #27
 8001642:	f000 8086 	beq.w	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 8001646:	281c      	cmp	r0, #28
 8001648:	f000 8098 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 800164c:	281d      	cmp	r0, #29
 800164e:	f000 80a7 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 8001652:	281e      	cmp	r0, #30
 8001654:	f000 80b9 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001658:	281f      	cmp	r0, #31
 800165a:	f000 80cd 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 800165e:	2820      	cmp	r0, #32
 8001660:	d03c      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001662:	2821      	cmp	r0, #33	@ 0x21
 8001664:	d04b      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 8001666:	2822      	cmp	r0, #34	@ 0x22
 8001668:	d05d      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 800166a:	2823      	cmp	r0, #35	@ 0x23
 800166c:	d071      	beq.n	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 800166e:	2824      	cmp	r0, #36	@ 0x24
 8001670:	f000 8084 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 8001674:	2825      	cmp	r0, #37	@ 0x25
 8001676:	f000 8093 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 800167a:	2826      	cmp	r0, #38	@ 0x26
 800167c:	f000 80a5 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001680:	2827      	cmp	r0, #39	@ 0x27
 8001682:	f000 80b9 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 8001686:	2828      	cmp	r0, #40	@ 0x28
 8001688:	f000 80c1 	beq.w	800180e <??ZbZclAttrIntegerRangeCheck_9>
 800168c:	2829      	cmp	r0, #41	@ 0x29
 800168e:	f000 80d9 	beq.w	8001844 <??ZbZclAttrIntegerRangeCheck_10>
 8001692:	282a      	cmp	r0, #42	@ 0x2a
 8001694:	f000 80f0 	beq.w	8001878 <??ZbZclAttrIntegerRangeCheck_11>
 8001698:	282b      	cmp	r0, #43	@ 0x2b
 800169a:	f000 8107 	beq.w	80018ac <??ZbZclAttrIntegerRangeCheck_12>
 800169e:	282c      	cmp	r0, #44	@ 0x2c
 80016a0:	f000 8120 	beq.w	80018e4 <??ZbZclAttrIntegerRangeCheck_13>
 80016a4:	282d      	cmp	r0, #45	@ 0x2d
 80016a6:	f000 8136 	beq.w	8001916 <??ZbZclAttrIntegerRangeCheck_14>
 80016aa:	282e      	cmp	r0, #46	@ 0x2e
 80016ac:	f000 814b 	beq.w	8001946 <??ZbZclAttrIntegerRangeCheck_15>
 80016b0:	282f      	cmp	r0, #47	@ 0x2f
 80016b2:	f000 8160 	beq.w	8001976 <??ZbZclAttrIntegerRangeCheck_16>
 80016b6:	2830      	cmp	r0, #48	@ 0x30
 80016b8:	d010      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 80016ba:	2831      	cmp	r0, #49	@ 0x31
 80016bc:	d01f      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 80016be:	e164      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016c0 <??ZbZclAttrIntegerRangeCheck_0>:
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d103      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c4:	2cff      	cmp	r4, #255	@ 0xff
 80016c6:	d101      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c8:	2001      	movs	r0, #1
 80016ca:	e176      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016cc <??ZbZclAttrIntegerRangeCheck_18>:
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	db04      	blt.n	80016da <??ZbZclAttrIntegerRangeCheck_20>
 80016d0:	dc01      	bgt.n	80016d6 <??ZbZclAttrIntegerRangeCheck_21>
 80016d2:	2c02      	cmp	r4, #2
 80016d4:	d301      	bcc.n	80016da <??ZbZclAttrIntegerRangeCheck_20>

080016d6 <??ZbZclAttrIntegerRangeCheck_21>:
 80016d6:	2000      	movs	r0, #0
 80016d8:	e16f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016da <??ZbZclAttrIntegerRangeCheck_20>:
 80016da:	e156      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016dc <??ZbZclAttrIntegerRangeCheck_1>:
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d103      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e0:	2cff      	cmp	r4, #255	@ 0xff
 80016e2:	d101      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e4:	2001      	movs	r0, #1
 80016e6:	e168      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016e8 <??ZbZclAttrIntegerRangeCheck_23>:
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	d405      	bmi.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	db05      	blt.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>
 80016f0:	dc02      	bgt.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016f2:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80016f6:	d301      	bcc.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>

080016f8 <??ZbZclAttrIntegerRangeCheck_24>:
 80016f8:	2000      	movs	r0, #0
 80016fa:	e15e      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016fc <??ZbZclAttrIntegerRangeCheck_25>:
 80016fc:	e145      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016fe <??ZbZclAttrIntegerRangeCheck_2>:
 80016fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001702:	2100      	movs	r1, #0
 8001704:	428d      	cmp	r5, r1
 8001706:	d103      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 8001708:	4284      	cmp	r4, r0
 800170a:	d101      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 800170c:	2001      	movs	r0, #1
 800170e:	e154      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001710 <??ZbZclAttrIntegerRangeCheck_27>:
 8001710:	2d00      	cmp	r5, #0
 8001712:	d405      	bmi.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 8001714:	2d00      	cmp	r5, #0
 8001716:	db05      	blt.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>
 8001718:	dc02      	bgt.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 800171a:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800171e:	d301      	bcc.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>

08001720 <??ZbZclAttrIntegerRangeCheck_28>:
 8001720:	2000      	movs	r0, #0
 8001722:	e14a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001724 <??ZbZclAttrIntegerRangeCheck_29>:
 8001724:	e131      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001726 <??ZbZclAttrIntegerRangeCheck_3>:
 8001726:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 800172a:	2100      	movs	r1, #0
 800172c:	428d      	cmp	r5, r1
 800172e:	d103      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001730:	4284      	cmp	r4, r0
 8001732:	d101      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001734:	2001      	movs	r0, #1
 8001736:	e140      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001738 <??ZbZclAttrIntegerRangeCheck_31>:
 8001738:	2d00      	cmp	r5, #0
 800173a:	d407      	bmi.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 800173c:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8001740:	2100      	movs	r1, #0
 8001742:	428d      	cmp	r5, r1
 8001744:	db04      	blt.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>
 8001746:	dc01      	bgt.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 8001748:	4284      	cmp	r4, r0
 800174a:	d301      	bcc.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>

0800174c <??ZbZclAttrIntegerRangeCheck_32>:
 800174c:	2000      	movs	r0, #0
 800174e:	e134      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001750 <??ZbZclAttrIntegerRangeCheck_33>:
 8001750:	e11b      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001752 <??ZbZclAttrIntegerRangeCheck_4>:
 8001752:	f05f 30ff 	movs.w	r0, #4294967295
 8001756:	2100      	movs	r1, #0
 8001758:	428d      	cmp	r5, r1
 800175a:	d103      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 800175c:	4284      	cmp	r4, r0
 800175e:	d101      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 8001760:	2001      	movs	r0, #1
 8001762:	e12a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001764 <??ZbZclAttrIntegerRangeCheck_35>:
 8001764:	2d00      	cmp	r5, #0
 8001766:	d406      	bmi.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001768:	2000      	movs	r0, #0
 800176a:	2101      	movs	r1, #1
 800176c:	428d      	cmp	r5, r1
 800176e:	db04      	blt.n	800177a <??ZbZclAttrIntegerRangeCheck_37>
 8001770:	dc01      	bgt.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001772:	4284      	cmp	r4, r0
 8001774:	d301      	bcc.n	800177a <??ZbZclAttrIntegerRangeCheck_37>

08001776 <??ZbZclAttrIntegerRangeCheck_36>:
 8001776:	2000      	movs	r0, #0
 8001778:	e11f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800177a <??ZbZclAttrIntegerRangeCheck_37>:
 800177a:	e106      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800177c <??ZbZclAttrIntegerRangeCheck_5>:
 800177c:	2dff      	cmp	r5, #255	@ 0xff
 800177e:	d104      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001780:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001784:	d101      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001786:	2001      	movs	r0, #1
 8001788:	e117      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800178a <??ZbZclAttrIntegerRangeCheck_39>:
 800178a:	2d00      	cmp	r5, #0
 800178c:	d405      	bmi.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 800178e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001792:	db04      	blt.n	800179e <??ZbZclAttrIntegerRangeCheck_41>
 8001794:	dc01      	bgt.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 8001796:	2c00      	cmp	r4, #0
 8001798:	d301      	bcc.n	800179e <??ZbZclAttrIntegerRangeCheck_41>

0800179a <??ZbZclAttrIntegerRangeCheck_40>:
 800179a:	2000      	movs	r0, #0
 800179c:	e10d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800179e <??ZbZclAttrIntegerRangeCheck_41>:
 800179e:	e0f4      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017a0 <??ZbZclAttrIntegerRangeCheck_6>:
 80017a0:	f05f 30ff 	movs.w	r0, #4294967295
 80017a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017a8:	428d      	cmp	r5, r1
 80017aa:	d103      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017ac:	4284      	cmp	r4, r0
 80017ae:	d101      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017b0:	2001      	movs	r0, #1
 80017b2:	e102      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017b4 <??ZbZclAttrIntegerRangeCheck_43>:
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d405      	bmi.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017b8:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80017bc:	db04      	blt.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>
 80017be:	dc01      	bgt.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d301      	bcc.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>

080017c4 <??ZbZclAttrIntegerRangeCheck_44>:
 80017c4:	2000      	movs	r0, #0
 80017c6:	e0f8      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017c8 <??ZbZclAttrIntegerRangeCheck_45>:
 80017c8:	e0df      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017ca <??ZbZclAttrIntegerRangeCheck_7>:
 80017ca:	f05f 30ff 	movs.w	r0, #4294967295
 80017ce:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 80017d2:	428d      	cmp	r5, r1
 80017d4:	d103      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017d6:	4284      	cmp	r4, r0
 80017d8:	d101      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017da:	2001      	movs	r0, #1
 80017dc:	e0ed      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017de <??ZbZclAttrIntegerRangeCheck_47>:
 80017de:	2d00      	cmp	r5, #0
 80017e0:	d407      	bmi.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017e2:	2000      	movs	r0, #0
 80017e4:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 80017e8:	428d      	cmp	r5, r1
 80017ea:	db04      	blt.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>
 80017ec:	dc01      	bgt.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017ee:	4284      	cmp	r4, r0
 80017f0:	d301      	bcc.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>

080017f2 <??ZbZclAttrIntegerRangeCheck_48>:
 80017f2:	2000      	movs	r0, #0
 80017f4:	e0e1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017f6 <??ZbZclAttrIntegerRangeCheck_49>:
 80017f6:	e0c8      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017f8 <??ZbZclAttrIntegerRangeCheck_8>:
 80017f8:	f05f 30ff 	movs.w	r0, #4294967295
 80017fc:	f05f 31ff 	movs.w	r1, #4294967295
 8001800:	428d      	cmp	r5, r1
 8001802:	d103      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001804:	4284      	cmp	r4, r0
 8001806:	d101      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001808:	2001      	movs	r0, #1
 800180a:	e0d6      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800180c <??ZbZclAttrIntegerRangeCheck_51>:
 800180c:	e0bd      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800180e <??ZbZclAttrIntegerRangeCheck_9>:
 800180e:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001812:	f05f 31ff 	movs.w	r1, #4294967295
 8001816:	428d      	cmp	r5, r1
 8001818:	d103      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181a:	4284      	cmp	r4, r0
 800181c:	d101      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181e:	2001      	movs	r0, #1
 8001820:	e0cb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001822 <??ZbZclAttrIntegerRangeCheck_52>:
 8001822:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001826:	f05f 31ff 	movs.w	r1, #4294967295
 800182a:	428d      	cmp	r5, r1
 800182c:	db07      	blt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800182e:	dc01      	bgt.n	8001834 <??ZbZclAttrIntegerRangeCheck_54>
 8001830:	4284      	cmp	r4, r0
 8001832:	d304      	bcc.n	800183e <??ZbZclAttrIntegerRangeCheck_53>

08001834 <??ZbZclAttrIntegerRangeCheck_54>:
 8001834:	2d00      	cmp	r5, #0
 8001836:	db04      	blt.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>
 8001838:	dc01      	bgt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800183a:	2c80      	cmp	r4, #128	@ 0x80
 800183c:	d301      	bcc.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>

0800183e <??ZbZclAttrIntegerRangeCheck_53>:
 800183e:	2000      	movs	r0, #0
 8001840:	e0bb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001842 <??ZbZclAttrIntegerRangeCheck_55>:
 8001842:	e0a2      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001844 <??ZbZclAttrIntegerRangeCheck_10>:
 8001844:	485e      	ldr	r0, [pc, #376]	@ (80019c0 <??DataTable1>)
 8001846:	f05f 31ff 	movs.w	r1, #4294967295
 800184a:	428d      	cmp	r5, r1
 800184c:	d103      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 800184e:	4284      	cmp	r4, r0
 8001850:	d101      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 8001852:	2001      	movs	r0, #1
 8001854:	e0b1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001856 <??ZbZclAttrIntegerRangeCheck_57>:
 8001856:	485a      	ldr	r0, [pc, #360]	@ (80019c0 <??DataTable1>)
 8001858:	f05f 31ff 	movs.w	r1, #4294967295
 800185c:	428d      	cmp	r5, r1
 800185e:	db08      	blt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 8001860:	dc01      	bgt.n	8001866 <??ZbZclAttrIntegerRangeCheck_59>
 8001862:	4284      	cmp	r4, r0
 8001864:	d305      	bcc.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>

08001866 <??ZbZclAttrIntegerRangeCheck_59>:
 8001866:	2d00      	cmp	r5, #0
 8001868:	db05      	blt.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>
 800186a:	dc02      	bgt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 800186c:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8001870:	d301      	bcc.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>

08001872 <??ZbZclAttrIntegerRangeCheck_58>:
 8001872:	2000      	movs	r0, #0
 8001874:	e0a1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001876 <??ZbZclAttrIntegerRangeCheck_60>:
 8001876:	e088      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001878 <??ZbZclAttrIntegerRangeCheck_11>:
 8001878:	4852      	ldr	r0, [pc, #328]	@ (80019c4 <??DataTable1_1>)
 800187a:	f05f 31ff 	movs.w	r1, #4294967295
 800187e:	428d      	cmp	r5, r1
 8001880:	d103      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001882:	4284      	cmp	r4, r0
 8001884:	d101      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001886:	2001      	movs	r0, #1
 8001888:	e097      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800188a <??ZbZclAttrIntegerRangeCheck_62>:
 800188a:	484e      	ldr	r0, [pc, #312]	@ (80019c4 <??DataTable1_1>)
 800188c:	f05f 31ff 	movs.w	r1, #4294967295
 8001890:	428d      	cmp	r5, r1
 8001892:	db08      	blt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 8001894:	dc01      	bgt.n	800189a <??ZbZclAttrIntegerRangeCheck_64>
 8001896:	4284      	cmp	r4, r0
 8001898:	d305      	bcc.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>

0800189a <??ZbZclAttrIntegerRangeCheck_64>:
 800189a:	2d00      	cmp	r5, #0
 800189c:	db05      	blt.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>
 800189e:	dc02      	bgt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 80018a0:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80018a4:	d301      	bcc.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>

080018a6 <??ZbZclAttrIntegerRangeCheck_63>:
 80018a6:	2000      	movs	r0, #0
 80018a8:	e087      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018aa <??ZbZclAttrIntegerRangeCheck_65>:
 80018aa:	e06e      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018ac <??ZbZclAttrIntegerRangeCheck_12>:
 80018ac:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018b0:	f05f 31ff 	movs.w	r1, #4294967295
 80018b4:	428d      	cmp	r5, r1
 80018b6:	d103      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018b8:	4284      	cmp	r4, r0
 80018ba:	d101      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018bc:	2001      	movs	r0, #1
 80018be:	e07c      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018c0 <??ZbZclAttrIntegerRangeCheck_67>:
 80018c0:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018c4:	f05f 31ff 	movs.w	r1, #4294967295
 80018c8:	428d      	cmp	r5, r1
 80018ca:	db08      	blt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018cc:	dc01      	bgt.n	80018d2 <??ZbZclAttrIntegerRangeCheck_69>
 80018ce:	4284      	cmp	r4, r0
 80018d0:	d305      	bcc.n	80018de <??ZbZclAttrIntegerRangeCheck_68>

080018d2 <??ZbZclAttrIntegerRangeCheck_69>:
 80018d2:	2d00      	cmp	r5, #0
 80018d4:	db05      	blt.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>
 80018d6:	dc02      	bgt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018d8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 80018dc:	d301      	bcc.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>

080018de <??ZbZclAttrIntegerRangeCheck_68>:
 80018de:	2000      	movs	r0, #0
 80018e0:	e06b      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018e2 <??ZbZclAttrIntegerRangeCheck_70>:
 80018e2:	e052      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018e4 <??ZbZclAttrIntegerRangeCheck_13>:
 80018e4:	2000      	movs	r0, #0
 80018e6:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018ea:	428d      	cmp	r5, r1
 80018ec:	d103      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d101      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018f2:	2001      	movs	r0, #1
 80018f4:	e061      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018f6 <??ZbZclAttrIntegerRangeCheck_72>:
 80018f6:	2000      	movs	r0, #0
 80018f8:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018fc:	428d      	cmp	r5, r1
 80018fe:	db07      	blt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 8001900:	dc01      	bgt.n	8001906 <??ZbZclAttrIntegerRangeCheck_74>
 8001902:	4284      	cmp	r4, r0
 8001904:	d304      	bcc.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>

08001906 <??ZbZclAttrIntegerRangeCheck_74>:
 8001906:	2d80      	cmp	r5, #128	@ 0x80
 8001908:	db04      	blt.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>
 800190a:	dc01      	bgt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d301      	bcc.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>

08001910 <??ZbZclAttrIntegerRangeCheck_73>:
 8001910:	2000      	movs	r0, #0
 8001912:	e052      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001914 <??ZbZclAttrIntegerRangeCheck_75>:
 8001914:	e039      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001916 <??ZbZclAttrIntegerRangeCheck_14>:
 8001916:	2000      	movs	r0, #0
 8001918:	4929      	ldr	r1, [pc, #164]	@ (80019c0 <??DataTable1>)
 800191a:	428d      	cmp	r5, r1
 800191c:	d103      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 800191e:	4284      	cmp	r4, r0
 8001920:	d101      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 8001922:	2001      	movs	r0, #1
 8001924:	e049      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001926 <??ZbZclAttrIntegerRangeCheck_77>:
 8001926:	2000      	movs	r0, #0
 8001928:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <??DataTable1>)
 800192a:	428d      	cmp	r5, r1
 800192c:	db08      	blt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800192e:	dc01      	bgt.n	8001934 <??ZbZclAttrIntegerRangeCheck_79>
 8001930:	4284      	cmp	r4, r0
 8001932:	d305      	bcc.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>

08001934 <??ZbZclAttrIntegerRangeCheck_79>:
 8001934:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8001938:	db04      	blt.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>
 800193a:	dc01      	bgt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d301      	bcc.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>

08001940 <??ZbZclAttrIntegerRangeCheck_78>:
 8001940:	2000      	movs	r0, #0
 8001942:	e03a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001944 <??ZbZclAttrIntegerRangeCheck_80>:
 8001944:	e021      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001946 <??ZbZclAttrIntegerRangeCheck_15>:
 8001946:	2000      	movs	r0, #0
 8001948:	491e      	ldr	r1, [pc, #120]	@ (80019c4 <??DataTable1_1>)
 800194a:	428d      	cmp	r5, r1
 800194c:	d103      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 800194e:	4284      	cmp	r4, r0
 8001950:	d101      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 8001952:	2001      	movs	r0, #1
 8001954:	e031      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001956 <??ZbZclAttrIntegerRangeCheck_82>:
 8001956:	2000      	movs	r0, #0
 8001958:	491a      	ldr	r1, [pc, #104]	@ (80019c4 <??DataTable1_1>)
 800195a:	428d      	cmp	r5, r1
 800195c:	db08      	blt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800195e:	dc01      	bgt.n	8001964 <??ZbZclAttrIntegerRangeCheck_84>
 8001960:	4284      	cmp	r4, r0
 8001962:	d305      	bcc.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>

08001964 <??ZbZclAttrIntegerRangeCheck_84>:
 8001964:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8001968:	db04      	blt.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>
 800196a:	dc01      	bgt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800196c:	2c00      	cmp	r4, #0
 800196e:	d301      	bcc.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>

08001970 <??ZbZclAttrIntegerRangeCheck_83>:
 8001970:	2000      	movs	r0, #0
 8001972:	e022      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001974 <??ZbZclAttrIntegerRangeCheck_85>:
 8001974:	e009      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001976 <??ZbZclAttrIntegerRangeCheck_16>:
 8001976:	2000      	movs	r0, #0
 8001978:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 800197c:	428d      	cmp	r5, r1
 800197e:	d103      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001980:	4284      	cmp	r4, r0
 8001982:	d101      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001984:	2001      	movs	r0, #1
 8001986:	e018      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001988 <??ZbZclAttrIntegerRangeCheck_87>:
 8001988:	e7ff      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800198a <??ZbZclAttrIntegerRangeCheck_17>:
 800198a:	ea56 0008 	orrs.w	r0, r6, r8
 800198e:	ea57 0109 	orrs.w	r1, r7, r9
 8001992:	2900      	cmp	r1, #0
 8001994:	d103      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 8001996:	2800      	cmp	r0, #0
 8001998:	d101      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 800199a:	2001      	movs	r0, #1
 800199c:	e00d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800199e <??ZbZclAttrIntegerRangeCheck_88>:
 800199e:	42bd      	cmp	r5, r7
 80019a0:	db09      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019a2:	dc01      	bgt.n	80019a8 <??ZbZclAttrIntegerRangeCheck_90>
 80019a4:	42b4      	cmp	r4, r6
 80019a6:	d306      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019a8 <??ZbZclAttrIntegerRangeCheck_90>:
 80019a8:	45a9      	cmp	r9, r5
 80019aa:	db04      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019ac:	dc01      	bgt.n	80019b2 <??ZbZclAttrIntegerRangeCheck_91>
 80019ae:	45a0      	cmp	r8, r4
 80019b0:	d301      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019b2 <??ZbZclAttrIntegerRangeCheck_91>:
 80019b2:	2001      	movs	r0, #1
 80019b4:	e000      	b.n	80019b8 <??ZbZclAttrIntegerRangeCheck_92>

080019b6 <??ZbZclAttrIntegerRangeCheck_89>:
 80019b6:	2000      	movs	r0, #0

080019b8 <??ZbZclAttrIntegerRangeCheck_92>:
 80019b8:	b2c0      	uxtb	r0, r0

080019ba <??ZbZclAttrIntegerRangeCheck_19>:
 80019ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80019be:	4770      	bx	lr

080019c0 <??DataTable1>:
 80019c0:	8000 ffff                                   ....

080019c4 <??DataTable1_1>:
 80019c4:	0000 ff80                                   ....

080019c8 <ZbZclAttrIntegerRead>:
 80019c8:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019cc:	b085      	sub	sp, #20
 80019ce:	0006      	movs	r6, r0
 80019d0:	000f      	movs	r7, r1
 80019d2:	0015      	movs	r5, r2
 80019d4:	001c      	movs	r4, r3
 80019d6:	2000      	movs	r0, #0
 80019d8:	f88d 0009 	strb.w	r0, [sp, #9]
 80019dc:	f05f 0808 	movs.w	r8, #8
 80019e0:	f05f 0900 	movs.w	r9, #0
 80019e4:	f10d 0a0c 	add.w	sl, sp, #12
 80019e8:	464a      	mov	r2, r9
 80019ea:	4641      	mov	r1, r8
 80019ec:	4650      	mov	r0, sl
 80019ee:	f006 f993 	bl	8007d18 <__aeabi_memset>
 80019f2:	2000      	movs	r0, #0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	2008      	movs	r0, #8
 80019f8:	9000      	str	r0, [sp, #0]
 80019fa:	ab03      	add	r3, sp, #12
 80019fc:	f10d 0209 	add.w	r2, sp, #9
 8001a00:	0039      	movs	r1, r7
 8001a02:	b289      	uxth	r1, r1
 8001a04:	0030      	movs	r0, r6
 8001a06:	f7fe fcee 	bl	80003e6 <ZbZclAttrRead>
 8001a0a:	f88d 0008 	strb.w	r0, [sp, #8]
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	d002      	beq.n	8001a18 <??ZbZclAttrIntegerRead_0>
 8001a12:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a16:	7020      	strb	r0, [r4, #0]

08001a18 <??ZbZclAttrIntegerRead_0>:
 8001a18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d002      	beq.n	8001a26 <??ZbZclAttrIntegerRead_1>
 8001a20:	2000      	movs	r0, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	e01a      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a26 <??ZbZclAttrIntegerRead_1>:
 8001a26:	aa02      	add	r2, sp, #8
 8001a28:	a903      	add	r1, sp, #12
 8001a2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a2e:	f7ff fcb1 	bl	8001394 <ZbZclParseInteger>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d002      	beq.n	8001a40 <??ZbZclAttrIntegerRead_3>
 8001a3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a3e:	7020      	strb	r0, [r4, #0]

08001a40 <??ZbZclAttrIntegerRead_3>:
 8001a40:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d002      	beq.n	8001a4e <??ZbZclAttrIntegerRead_4>
 8001a48:	2000      	movs	r0, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	e006      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a4e <??ZbZclAttrIntegerRead_4>:
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	d002      	beq.n	8001a58 <??ZbZclAttrIntegerRead_5>
 8001a52:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a56:	7028      	strb	r0, [r5, #0]

08001a58 <??ZbZclAttrIntegerRead_5>:
 8001a58:	0010      	movs	r0, r2
 8001a5a:	0019      	movs	r1, r3

08001a5c <??ZbZclAttrIntegerRead_2>:
 8001a5c:	b006      	add	sp, #24
 8001a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a62 <ZbZclAttrIntegerWrite>:
 8001a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	4680      	mov	r8, r0
 8001a6a:	4689      	mov	r9, r1
 8001a6c:	0014      	movs	r4, r2
 8001a6e:	001d      	movs	r5, r3
 8001a70:	f1b8 0f00 	cmp.w	r8, #0
 8001a74:	d101      	bne.n	8001a7a <??ZbZclAttrIntegerWrite_0>
 8001a76:	2087      	movs	r0, #135	@ 0x87
 8001a78:	e042      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a7a <??ZbZclAttrIntegerWrite_0>:
 8001a7a:	ab04      	add	r3, sp, #16
 8001a7c:	f10d 0211 	add.w	r2, sp, #17
 8001a80:	4649      	mov	r1, r9
 8001a82:	b289      	uxth	r1, r1
 8001a84:	4640      	mov	r0, r8
 8001a86:	f7ff ff9f 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001a8a:	0006      	movs	r6, r0
 8001a8c:	000f      	movs	r7, r1
 8001a8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d002      	beq.n	8001a9c <??ZbZclAttrIntegerWrite_2>
 8001a96:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a9a:	e031      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a9c <??ZbZclAttrIntegerWrite_2>:
 8001a9c:	42af      	cmp	r7, r5
 8001a9e:	d103      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa0:	42a6      	cmp	r6, r4
 8001aa2:	d101      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e02b      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001aa8 <??ZbZclAttrIntegerWrite_3>:
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8001ab8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001abc:	0020      	movs	r0, r4
 8001abe:	0029      	movs	r1, r5
 8001ac0:	f7ff fdac 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d101      	bne.n	8001acc <??ZbZclAttrIntegerWrite_4>
 8001ac8:	2087      	movs	r0, #135	@ 0x87
 8001aca:	e019      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001acc <??ZbZclAttrIntegerWrite_4>:
 8001acc:	0022      	movs	r2, r4
 8001ace:	002b      	movs	r3, r5
 8001ad0:	a805      	add	r0, sp, #20
 8001ad2:	f005 fb87 	bl	80071e4 <putle64>
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	9001      	str	r0, [sp, #4]
 8001ada:	2008      	movs	r0, #8
 8001adc:	9000      	str	r0, [sp, #0]
 8001ade:	ab05      	add	r3, sp, #20
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	f7fe fdcf 	bl	800068a <ZbZclAttrWrite>
 8001aec:	f88d 0010 	strb.w	r0, [sp, #16]
 8001af0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d002      	beq.n	8001afe <??ZbZclAttrIntegerWrite_5>
 8001af8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001afc:	e000      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001afe <??ZbZclAttrIntegerWrite_5>:
 8001afe:	2000      	movs	r0, #0

08001b00 <??ZbZclAttrIntegerWrite_1>:
 8001b00:	b007      	add	sp, #28
 8001b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001b06 <ZbZclAttrIntegerIncrement>:
 8001b06:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	468b      	mov	fp, r1
 8001b0e:	0016      	movs	r6, r2
 8001b10:	001f      	movs	r7, r3
 8001b12:	f05f 0a00 	movs.w	sl, #0
 8001b16:	466b      	mov	r3, sp
 8001b18:	f10d 0201 	add.w	r2, sp, #1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	b289      	uxth	r1, r1
 8001b20:	9804      	ldr	r0, [sp, #16]
 8001b22:	f7ff ff51 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001b26:	0002      	movs	r2, r0
 8001b28:	000b      	movs	r3, r1
 8001b2a:	f89d 0000 	ldrb.w	r0, [sp]
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d002      	beq.n	8001b38 <??ZbZclAttrIntegerIncrement_0>
 8001b32:	f89d 0000 	ldrb.w	r0, [sp]
 8001b36:	e03e      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001b38 <??ZbZclAttrIntegerIncrement_0>:
 8001b38:	eb12 0806 	adds.w	r8, r2, r6
 8001b3c:	eb53 0907 	adcs.w	r9, r3, r7
 8001b40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b44:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001b48:	f7ff f9ea 	bl	8000f20 <ZbZclAttrTypeLength>
 8001b4c:	9001      	str	r0, [sp, #4]
 8001b4e:	9801      	ldr	r0, [sp, #4]
 8001b50:	2801      	cmp	r0, #1
 8001b52:	d017      	beq.n	8001b84 <??ZbZclAttrIntegerIncrement_2>
 8001b54:	2802      	cmp	r0, #2
 8001b56:	d00b      	beq.n	8001b70 <??ZbZclAttrIntegerIncrement_3>
 8001b58:	2804      	cmp	r0, #4
 8001b5a:	d002      	beq.n	8001b62 <??ZbZclAttrIntegerIncrement_4>
 8001b5c:	2808      	cmp	r0, #8
 8001b5e:	d118      	bne.n	8001b92 <??ZbZclAttrIntegerIncrement_5>

08001b60 <??ZbZclAttrIntegerIncrement_6>:
 8001b60:	e019      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b62 <??ZbZclAttrIntegerIncrement_4>:
 8001b62:	f038 0000 	bics.w	r0, r8, #0
 8001b66:	f039 31ff 	bics.w	r1, r9, #4294967295
 8001b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b6e:	e012      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b70 <??ZbZclAttrIntegerIncrement_3>:
 8001b70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b74:	2100      	movs	r1, #0
 8001b76:	ea18 0000 	ands.w	r0, r8, r0
 8001b7a:	ea19 0101 	ands.w	r1, r9, r1
 8001b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b82:	e008      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b84 <??ZbZclAttrIntegerIncrement_2>:
 8001b84:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8001b88:	f019 0100 	ands.w	r1, r9, #0
 8001b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b90:	e001      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b92 <??ZbZclAttrIntegerIncrement_5>:
 8001b92:	2001      	movs	r0, #1
 8001b94:	4682      	mov	sl, r0

08001b96 <??ZbZclAttrIntegerIncrement_7>:
 8001b96:	4650      	mov	r0, sl
 8001b98:	b2c0      	uxtb	r0, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <??ZbZclAttrIntegerIncrement_8>
 8001b9e:	2086      	movs	r0, #134	@ 0x86
 8001ba0:	e009      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001ba2 <??ZbZclAttrIntegerIncrement_8>:
 8001ba2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8001ba6:	0022      	movs	r2, r4
 8001ba8:	002b      	movs	r3, r5
 8001baa:	4659      	mov	r1, fp
 8001bac:	b289      	uxth	r1, r1
 8001bae:	9804      	ldr	r0, [sp, #16]
 8001bb0:	f7ff ff57 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8001bb4:	2000      	movs	r0, #0

08001bb6 <??ZbZclAttrIntegerIncrement_1>:
 8001bb6:	b005      	add	sp, #20
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bbc <ZbZclAttrEuiRead>:
 8001bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	0005      	movs	r5, r0
 8001bc4:	000e      	movs	r6, r1
 8001bc6:	0014      	movs	r4, r2
 8001bc8:	f05f 0808 	movs.w	r8, #8
 8001bcc:	f05f 0900 	movs.w	r9, #0
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	0038      	movs	r0, r7
 8001bd8:	f006 f89e 	bl	8007d18 <__aeabi_memset>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	9001      	str	r0, [sp, #4]
 8001be0:	2008      	movs	r0, #8
 8001be2:	9000      	str	r0, [sp, #0]
 8001be4:	ab02      	add	r3, sp, #8
 8001be6:	2200      	movs	r2, #0
 8001be8:	0031      	movs	r1, r6
 8001bea:	b289      	uxth	r1, r1
 8001bec:	0028      	movs	r0, r5
 8001bee:	f7fe fbfa 	bl	80003e6 <ZbZclAttrRead>
 8001bf2:	0007      	movs	r7, r0
 8001bf4:	2c00      	cmp	r4, #0
 8001bf6:	d000      	beq.n	8001bfa <??ZbZclAttrEuiRead_0>
 8001bf8:	7027      	strb	r7, [r4, #0]

08001bfa <??ZbZclAttrEuiRead_0>:
 8001bfa:	0038      	movs	r0, r7
 8001bfc:	b2c0      	uxtb	r0, r0
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d002      	beq.n	8001c08 <??ZbZclAttrEuiRead_1>
 8001c02:	2000      	movs	r0, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	e002      	b.n	8001c0e <??ZbZclAttrEuiRead_2>

08001c08 <??ZbZclAttrEuiRead_1>:
 8001c08:	a802      	add	r0, sp, #8
 8001c0a:	f005 fa98 	bl	800713e <pletoh64>

08001c0e <??ZbZclAttrEuiRead_2>:
 8001c0e:	b005      	add	sp, #20
 8001c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c14 <ZbZclAttrEuiWrite>:
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	4680      	mov	r8, r0
 8001c1c:	4689      	mov	r9, r1
 8001c1e:	0014      	movs	r4, r2
 8001c20:	001d      	movs	r5, r3
 8001c22:	f1b8 0f00 	cmp.w	r8, #0
 8001c26:	d101      	bne.n	8001c2c <??ZbZclAttrEuiWrite_0>
 8001c28:	2087      	movs	r0, #135	@ 0x87
 8001c2a:	e02e      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c2c <??ZbZclAttrEuiWrite_0>:
 8001c2c:	aa02      	add	r2, sp, #8
 8001c2e:	4649      	mov	r1, r9
 8001c30:	b289      	uxth	r1, r1
 8001c32:	4640      	mov	r0, r8
 8001c34:	f7ff ffc2 	bl	8001bbc <ZbZclAttrEuiRead>
 8001c38:	0006      	movs	r6, r0
 8001c3a:	000f      	movs	r7, r1
 8001c3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d002      	beq.n	8001c4a <??ZbZclAttrEuiWrite_2>
 8001c44:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c48:	e01f      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c4a <??ZbZclAttrEuiWrite_2>:
 8001c4a:	42af      	cmp	r7, r5
 8001c4c:	d103      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d101      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c52:	2000      	movs	r0, #0
 8001c54:	e019      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c56 <??ZbZclAttrEuiWrite_3>:
 8001c56:	0022      	movs	r2, r4
 8001c58:	002b      	movs	r3, r5
 8001c5a:	a803      	add	r0, sp, #12
 8001c5c:	f005 fac2 	bl	80071e4 <putle64>
 8001c60:	2002      	movs	r0, #2
 8001c62:	9001      	str	r0, [sp, #4]
 8001c64:	2008      	movs	r0, #8
 8001c66:	9000      	str	r0, [sp, #0]
 8001c68:	ab03      	add	r3, sp, #12
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7fe fd0a 	bl	800068a <ZbZclAttrWrite>
 8001c76:	f88d 0008 	strb.w	r0, [sp, #8]
 8001c7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d002      	beq.n	8001c88 <??ZbZclAttrEuiWrite_4>
 8001c82:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c86:	e000      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c88 <??ZbZclAttrEuiWrite_4>:
 8001c88:	2000      	movs	r0, #0

08001c8a <??ZbZclAttrEuiWrite_1>:
 8001c8a:	b005      	add	sp, #20
 8001c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c90 <ZbZclAttrAppendList>:
 8001c90:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b089      	sub	sp, #36	@ 0x24
 8001c96:	0007      	movs	r7, r0
 8001c98:	000e      	movs	r6, r1
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	9008      	str	r0, [sp, #32]
 8001c9e:	2e00      	cmp	r6, #0
 8001ca0:	d002      	beq.n	8001ca8 <??ZbZclAttrAppendList_0>
 8001ca2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d101      	bne.n	8001cac <??ZbZclAttrAppendList_1>

08001ca8 <??ZbZclAttrAppendList_0>:
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e0c6      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cac <??ZbZclAttrAppendList_1>:
 8001cac:	f05f 0800 	movs.w	r8, #0

08001cb0 <??ZbZclAttrAppendList_3>:
 8001cb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001cb2:	4580      	cmp	r8, r0
 8001cb4:	f080 80bd 	bcs.w	8001e32 <??ZbZclAttrAppendList_4>
 8001cb8:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8001cbc:	fb09 f008 	mul.w	r0, r9, r8
 8001cc0:	4430      	add	r0, r6
 8001cc2:	7900      	ldrb	r0, [r0, #4]
 8001cc4:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8001cc8:	d007      	beq.n	8001cda <??ZbZclAttrAppendList_5>
 8001cca:	fb09 f008 	mul.w	r0, r9, r8
 8001cce:	4430      	add	r0, r6
 8001cd0:	68c0      	ldr	r0, [r0, #12]
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d101      	bne.n	8001cda <??ZbZclAttrAppendList_5>
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e0af      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cda <??ZbZclAttrAppendList_5>:
 8001cda:	fb09 f008 	mul.w	r0, r9, r8
 8001cde:	5a31      	ldrh	r1, [r6, r0]
 8001ce0:	0038      	movs	r0, r7
 8001ce2:	f7fe fa7c 	bl	80001de <ZbZclAttrFind>
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d003      	beq.n	8001cf4 <??ZbZclAttrAppendList_6>
 8001cec:	0029      	movs	r1, r5
 8001cee:	0038      	movs	r0, r7
 8001cf0:	f000 f8b6 	bl	8001e60 <ZbZclAttrFreeAttr>

08001cf4 <??ZbZclAttrAppendList_6>:
 8001cf4:	2418      	movs	r4, #24
 8001cf6:	f05f 0a00 	movs.w	sl, #0
 8001cfa:	f10d 0b04 	add.w	fp, sp, #4
 8001cfe:	4652      	mov	r2, sl
 8001d00:	0021      	movs	r1, r4
 8001d02:	4658      	mov	r0, fp
 8001d04:	f006 f808 	bl	8007d18 <__aeabi_memset>
 8001d08:	a801      	add	r0, sp, #4
 8001d0a:	9001      	str	r0, [sp, #4]
 8001d0c:	a801      	add	r0, sp, #4
 8001d0e:	9002      	str	r0, [sp, #8]
 8001d10:	fb09 f008 	mul.w	r0, r9, r8
 8001d14:	4430      	add	r0, r6
 8001d16:	9003      	str	r0, [sp, #12]
 8001d18:	fb09 f008 	mul.w	r0, r9, r8
 8001d1c:	4430      	add	r0, r6
 8001d1e:	7900      	ldrb	r0, [r0, #4]
 8001d20:	0780      	lsls	r0, r0, #30
 8001d22:	d50b      	bpl.n	8001d3c <??ZbZclAttrAppendList_7>
 8001d24:	fb09 f008 	mul.w	r0, r9, r8
 8001d28:	4430      	add	r0, r6
 8001d2a:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001d2c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8001d30:	fb09 f008 	mul.w	r0, r9, r8
 8001d34:	4430      	add	r0, r6
 8001d36:	8c00      	ldrh	r0, [r0, #32]
 8001d38:	f8ad 0018 	strh.w	r0, [sp, #24]

08001d3c <??ZbZclAttrAppendList_7>:
 8001d3c:	fb09 f008 	mul.w	r0, r9, r8
 8001d40:	4430      	add	r0, r6
 8001d42:	7900      	ldrb	r0, [r0, #4]
 8001d44:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8001d48:	2830      	cmp	r0, #48	@ 0x30
 8001d4a:	d108      	bne.n	8001d5e <??ZbZclAttrAppendList_8>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	9000      	str	r0, [sp, #0]
 8001d50:	fb09 f908 	mul.w	r9, r9, r8
 8001d54:	eb06 0009 	add.w	r0, r6, r9
 8001d58:	6880      	ldr	r0, [r0, #8]
 8001d5a:	9005      	str	r0, [sp, #20]
 8001d5c:	e034      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001d5e <??ZbZclAttrAppendList_8>:
 8001d5e:	fb09 f008 	mul.w	r0, r9, r8
 8001d62:	4430      	add	r0, r6
 8001d64:	6880      	ldr	r0, [r0, #8]
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d01f      	beq.n	8001daa <??ZbZclAttrAppendList_10>
 8001d6a:	fb09 f908 	mul.w	r9, r9, r8
 8001d6e:	eb06 0009 	add.w	r0, r6, r9
 8001d72:	6880      	ldr	r0, [r0, #8]
 8001d74:	9005      	str	r0, [sp, #20]
 8001d76:	9803      	ldr	r0, [sp, #12]
 8001d78:	7880      	ldrb	r0, [r0, #2]
 8001d7a:	2841      	cmp	r0, #65	@ 0x41
 8001d7c:	d003      	beq.n	8001d86 <??ZbZclAttrAppendList_11>
 8001d7e:	9803      	ldr	r0, [sp, #12]
 8001d80:	7880      	ldrb	r0, [r0, #2]
 8001d82:	2842      	cmp	r0, #66	@ 0x42
 8001d84:	d103      	bne.n	8001d8e <??ZbZclAttrAppendList_12>

08001d86 <??ZbZclAttrAppendList_11>:
 8001d86:	9805      	ldr	r0, [sp, #20]
 8001d88:	1c40      	adds	r0, r0, #1
 8001d8a:	9005      	str	r0, [sp, #20]
 8001d8c:	e00a      	b.n	8001da4 <??ZbZclAttrAppendList_13>

08001d8e <??ZbZclAttrAppendList_12>:
 8001d8e:	9803      	ldr	r0, [sp, #12]
 8001d90:	7880      	ldrb	r0, [r0, #2]
 8001d92:	2843      	cmp	r0, #67	@ 0x43
 8001d94:	d003      	beq.n	8001d9e <??ZbZclAttrAppendList_14>
 8001d96:	9803      	ldr	r0, [sp, #12]
 8001d98:	7880      	ldrb	r0, [r0, #2]
 8001d9a:	2844      	cmp	r0, #68	@ 0x44
 8001d9c:	d102      	bne.n	8001da4 <??ZbZclAttrAppendList_13>

08001d9e <??ZbZclAttrAppendList_14>:
 8001d9e:	9805      	ldr	r0, [sp, #20]
 8001da0:	1c80      	adds	r0, r0, #2
 8001da2:	9005      	str	r0, [sp, #20]

08001da4 <??ZbZclAttrAppendList_13>:
 8001da4:	9805      	ldr	r0, [sp, #20]
 8001da6:	9000      	str	r0, [sp, #0]
 8001da8:	e00e      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001daa <??ZbZclAttrAppendList_10>:
 8001daa:	fb09 f908 	mul.w	r9, r9, r8
 8001dae:	eb06 0009 	add.w	r0, r6, r9
 8001db2:	7880      	ldrb	r0, [r0, #2]
 8001db4:	f7ff f8b4 	bl	8000f20 <ZbZclAttrTypeLength>
 8001db8:	9005      	str	r0, [sp, #20]
 8001dba:	9805      	ldr	r0, [sp, #20]
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d101      	bne.n	8001dc4 <??ZbZclAttrAppendList_15>
 8001dc0:	208d      	movs	r0, #141	@ 0x8d
 8001dc2:	e03a      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001dc4 <??ZbZclAttrAppendList_15>:
 8001dc4:	9805      	ldr	r0, [sp, #20]
 8001dc6:	9000      	str	r0, [sp, #0]

08001dc8 <??ZbZclAttrAppendList_9>:
 8001dc8:	2300      	movs	r3, #0
 8001dca:	a236      	add	r2, pc, #216	@ (adr r2, 8001ea4 <??DataTable1>)
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	3118      	adds	r1, #24
 8001dd0:	9808      	ldr	r0, [sp, #32]
 8001dd2:	f011 fc2d 	bl	8013630 <zb_heap_alloc>
 8001dd6:	0004      	movs	r4, r0
 8001dd8:	2c00      	cmp	r4, #0
 8001dda:	d101      	bne.n	8001de0 <??ZbZclAttrAppendList_16>
 8001ddc:	2089      	movs	r0, #137	@ 0x89
 8001dde:	e02c      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001de0 <??ZbZclAttrAppendList_16>:
 8001de0:	2518      	movs	r5, #24
 8001de2:	f10d 0904 	add.w	r9, sp, #4
 8001de6:	46a2      	mov	sl, r4
 8001de8:	002a      	movs	r2, r5
 8001dea:	4649      	mov	r1, r9
 8001dec:	4650      	mov	r0, sl
 8001dee:	f015 fa2a 	bl	8017246 <__aeabi_memcpy>
 8001df2:	9800      	ldr	r0, [sp, #0]
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d00c      	beq.n	8001e12 <??ZbZclAttrAppendList_17>
 8001df8:	f114 0018 	adds.w	r0, r4, #24
 8001dfc:	60e0      	str	r0, [r4, #12]
 8001dfe:	9800      	ldr	r0, [sp, #0]
 8001e00:	9007      	str	r0, [sp, #28]
 8001e02:	2500      	movs	r5, #0
 8001e04:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8001e08:	002a      	movs	r2, r5
 8001e0a:	9907      	ldr	r1, [sp, #28]
 8001e0c:	4648      	mov	r0, r9
 8001e0e:	f005 ff83 	bl	8007d18 <__aeabi_memset>

08001e12 <??ZbZclAttrAppendList_17>:
 8001e12:	0021      	movs	r1, r4
 8001e14:	0038      	movs	r0, r7
 8001e16:	f7fe f9b3 	bl	8000180 <ZbZclAttrAddSorted>
 8001e1a:	68e0      	ldr	r0, [r4, #12]
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d005      	beq.n	8001e2c <??ZbZclAttrAppendList_18>
 8001e20:	6922      	ldr	r2, [r4, #16]
 8001e22:	68e1      	ldr	r1, [r4, #12]
 8001e24:	68a0      	ldr	r0, [r4, #8]
 8001e26:	7880      	ldrb	r0, [r0, #2]
 8001e28:	f7fe fdfa 	bl	8000a20 <ZbZclAttrDefaultValue>

08001e2c <??ZbZclAttrAppendList_18>:
 8001e2c:	f118 0801 	adds.w	r8, r8, #1
 8001e30:	e73e      	b.n	8001cb0 <??ZbZclAttrAppendList_3>

08001e32 <??ZbZclAttrAppendList_4>:
 8001e32:	0038      	movs	r0, r7
 8001e34:	f000 ff3a 	bl	8002cac <zcl_reporting_create_default_reports>
 8001e38:	2000      	movs	r0, #0

08001e3a <??ZbZclAttrAppendList_2>:
 8001e3a:	b00b      	add	sp, #44	@ 0x2c
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e40 <ZbZclAttrCallbackExec>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	000d      	movs	r5, r1
 8001e46:	0016      	movs	r6, r2
 8001e48:	68a8      	ldr	r0, [r5, #8]
 8001e4a:	68c0      	ldr	r0, [r0, #12]
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d005      	beq.n	8001e5c <??ZbZclAttrCallbackExec_0>
 8001e50:	0031      	movs	r1, r6
 8001e52:	0020      	movs	r0, r4
 8001e54:	68aa      	ldr	r2, [r5, #8]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	4790      	blx	r2
 8001e5a:	e000      	b.n	8001e5e <??ZbZclAttrCallbackExec_1>

08001e5c <??ZbZclAttrCallbackExec_0>:
 8001e5c:	2001      	movs	r0, #1

08001e5e <??ZbZclAttrCallbackExec_1>:
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}

08001e60 <ZbZclAttrFreeAttr>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	0004      	movs	r4, r0
 8001e64:	000d      	movs	r5, r1
 8001e66:	68a8      	ldr	r0, [r5, #8]
 8001e68:	7900      	ldrb	r0, [r0, #4]
 8001e6a:	0780      	lsls	r0, r0, #30
 8001e6c:	d50b      	bpl.n	8001e86 <??ZbZclAttrFreeAttr_0>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	68a8      	ldr	r0, [r5, #8]
 8001e72:	8801      	ldrh	r1, [r0, #0]
 8001e74:	0020      	movs	r0, r4
 8001e76:	f000 fdfd 	bl	8002a74 <zcl_cluster_attr_report_delete>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	68a8      	ldr	r0, [r5, #8]
 8001e7e:	8801      	ldrh	r1, [r0, #0]
 8001e80:	0020      	movs	r0, r4
 8001e82:	f000 fdf7 	bl	8002a74 <zcl_cluster_attr_report_delete>

08001e86 <??ZbZclAttrFreeAttr_0>:
 8001e86:	6868      	ldr	r0, [r5, #4]
 8001e88:	6829      	ldr	r1, [r5, #0]
 8001e8a:	6048      	str	r0, [r1, #4]
 8001e8c:	6828      	ldr	r0, [r5, #0]
 8001e8e:	6869      	ldr	r1, [r5, #4]
 8001e90:	6008      	str	r0, [r1, #0]
 8001e92:	602d      	str	r5, [r5, #0]
 8001e94:	606d      	str	r5, [r5, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	a202      	add	r2, pc, #8	@ (adr r2, 8001ea4 <??DataTable1>)
 8001e9a:	0029      	movs	r1, r5
 8001e9c:	68a0      	ldr	r0, [r4, #8]
 8001e9e:	f011 fbd6 	bl	801364e <zb_heap_free>
 8001ea2:	bd31      	pop	{r0, r4, r5, pc}

08001ea4 <??DataTable1>:
 8001ea4:	0000 0000                                   ....

08001ea8 <ZbZclAttrFreeList>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	0005      	movs	r5, r0

08001eac <??ZbZclAttrFreeList_0>:
 8001eac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001eae:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001eb2:	4288      	cmp	r0, r1
 8001eb4:	d001      	beq.n	8001eba <??ZbZclAttrFreeList_1>
 8001eb6:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8001eb8:	e000      	b.n	8001ebc <??ZbZclAttrFreeList_2>

08001eba <??ZbZclAttrFreeList_1>:
 8001eba:	2400      	movs	r4, #0

08001ebc <??ZbZclAttrFreeList_2>:
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	d005      	beq.n	8001ecc <??ZbZclAttrFreeList_3>

08001ec0 <??ZbZclAttrFreeList_4>:
 8001ec0:	0026      	movs	r6, r4
 8001ec2:	0031      	movs	r1, r6
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	f7ff ffcb 	bl	8001e60 <ZbZclAttrFreeAttr>
 8001eca:	e7ef      	b.n	8001eac <??ZbZclAttrFreeList_0>

08001ecc <??ZbZclAttrFreeList_3>:
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ed0 <zcl_reporting_send_conf>:
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	7e02      	ldrb	r2, [r0, #24]
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d004      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ed8:	7e02      	ldrb	r2, [r0, #24]
 8001eda:	2aa4      	cmp	r2, #164	@ 0xa4
 8001edc:	d001      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ede:	7e02      	ldrb	r2, [r0, #24]
 8001ee0:	2aa3      	cmp	r2, #163	@ 0xa3

08001ee2 <??zcl_reporting_send_conf_0>:
 8001ee2:	4770      	bx	lr

08001ee4 <report_command_timer>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	0004      	movs	r4, r0
 8001ee8:	000d      	movs	r5, r1
 8001eea:	002e      	movs	r6, r5
 8001eec:	f116 0108 	adds.w	r1, r6, #8
 8001ef0:	6830      	ldr	r0, [r6, #0]
 8001ef2:	f000 f852 	bl	8001f9a <zcl_reporting_send_report>
 8001ef6:	6870      	ldr	r0, [r6, #4]
 8001ef8:	f010 fffc 	bl	8012ef4 <ZbTimerFree>
 8001efc:	2300      	movs	r3, #0
 8001efe:	a2cf      	add	r2, pc, #828	@ (adr r2, 800223c <??DataTable4>)
 8001f00:	0031      	movs	r1, r6
 8001f02:	6830      	ldr	r0, [r6, #0]
 8001f04:	6880      	ldr	r0, [r0, #8]
 8001f06:	f011 fba2 	bl	801364e <zb_heap_free>
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}

08001f0c <zcl_reporting_queue_report>:
 8001f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	0006      	movs	r6, r0
 8001f12:	000f      	movs	r7, r1
 8001f14:	0014      	movs	r4, r2
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d104      	bne.n	8001f24 <??zcl_reporting_queue_report_0>
 8001f1a:	0039      	movs	r1, r7
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	f000 f83c 	bl	8001f9a <zcl_reporting_send_report>
 8001f22:	e037      	b.n	8001f94 <??zcl_reporting_queue_report_1>

08001f24 <??zcl_reporting_queue_report_0>:
 8001f24:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	2198      	movs	r1, #152	@ 0x98
 8001f2e:	68b0      	ldr	r0, [r6, #8]
 8001f30:	f011 fb7e 	bl	8013630 <zb_heap_alloc>
 8001f34:	0005      	movs	r5, r0
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d101      	bne.n	8001f3e <??zcl_reporting_queue_report_2>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e02b      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f3e <??zcl_reporting_queue_report_2>:
 8001f3e:	f05f 0998 	movs.w	r9, #152	@ 0x98
 8001f42:	f05f 0a00 	movs.w	sl, #0
 8001f46:	46ab      	mov	fp, r5
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	4658      	mov	r0, fp
 8001f4e:	f005 fee3 	bl	8007d18 <__aeabi_memset>
 8001f52:	002a      	movs	r2, r5
 8001f54:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8002bf0 <??DataTable9>
 8001f58:	68b0      	ldr	r0, [r6, #8]
 8001f5a:	f010 ff79 	bl	8012e50 <ZbTimerAlloc>
 8001f5e:	6068      	str	r0, [r5, #4]
 8001f60:	6868      	ldr	r0, [r5, #4]
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d107      	bne.n	8001f76 <??zcl_reporting_queue_report_4>
 8001f66:	2300      	movs	r3, #0
 8001f68:	4642      	mov	r2, r8
 8001f6a:	0029      	movs	r1, r5
 8001f6c:	68b0      	ldr	r0, [r6, #8]
 8001f6e:	f011 fb6e 	bl	801364e <zb_heap_free>
 8001f72:	2000      	movs	r0, #0
 8001f74:	e00f      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f76 <??zcl_reporting_queue_report_4>:
 8001f76:	602e      	str	r6, [r5, #0]
 8001f78:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8001f7c:	46b9      	mov	r9, r7
 8001f7e:	f115 0a08 	adds.w	sl, r5, #8
 8001f82:	4642      	mov	r2, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	4650      	mov	r0, sl
 8001f88:	f015 f95d 	bl	8017246 <__aeabi_memcpy>
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	6868      	ldr	r0, [r5, #4]
 8001f90:	f010 ffe4 	bl	8012f5c <ZbTimerReset>

08001f94 <??zcl_reporting_queue_report_1>:
 8001f94:	2001      	movs	r0, #1

08001f96 <??zcl_reporting_queue_report_3>:
 8001f96:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f9a <zcl_reporting_send_report>:
 8001f9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9e:	b0cc      	sub	sp, #304	@ 0x130
 8001fa0:	0005      	movs	r5, r0
 8001fa2:	000e      	movs	r6, r1
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f88d 0004 	strb.w	r0, [sp, #4]
 8001fac:	8a28      	ldrh	r0, [r5, #16]
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <??zcl_reporting_send_report_0>
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e000      	b.n	8001fb8 <??zcl_reporting_send_report_1>

08001fb6 <??zcl_reporting_send_report_0>:
 8001fb6:	2000      	movs	r0, #0

08001fb8 <??zcl_reporting_send_report_1>:
 8001fb8:	f88d 0005 	strb.w	r0, [sp, #5]
 8001fbc:	8a28      	ldrh	r0, [r5, #16]
 8001fbe:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001fc2:	7f28      	ldrb	r0, [r5, #28]
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d103      	bne.n	8001fd0 <??zcl_reporting_send_report_2>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f88d 0006 	strb.w	r0, [sp, #6]
 8001fce:	e002      	b.n	8001fd6 <??zcl_reporting_send_report_3>

08001fd0 <??zcl_reporting_send_report_2>:
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f88d 0006 	strb.w	r0, [sp, #6]

08001fd6 <??zcl_reporting_send_report_3>:
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f88d 0007 	strb.w	r0, [sp, #7]
 8001fdc:	f011 f91c 	bl	8013218 <ZbZclGetNextSeqnum>
 8001fe0:	f88d 000a 	strb.w	r0, [sp, #10]
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f88d 000b 	strb.w	r0, [sp, #11]
 8001fea:	2205      	movs	r2, #5
 8001fec:	a903      	add	r1, sp, #12
 8001fee:	a801      	add	r0, sp, #4
 8001ff0:	f004 facc 	bl	800658c <ZbZclAppendHeader>
 8001ff4:	0007      	movs	r7, r0
 8001ff6:	2f01      	cmp	r7, #1
 8001ff8:	f2c0 8093 	blt.w	8002122 <??zcl_reporting_send_report_4>

08001ffc <??zcl_reporting_send_report_5>:
 8001ffc:	a91a      	add	r1, sp, #104	@ 0x68
 8001ffe:	a803      	add	r0, sp, #12
 8002000:	0022      	movs	r2, r4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8002008:	0038      	movs	r0, r7
 800200a:	b2c0      	uxtb	r0, r0
 800200c:	aa1a      	add	r2, sp, #104	@ 0x68
 800200e:	0023      	movs	r3, r4
 8002010:	b2db      	uxtb	r3, r3
 8002012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002016:	6050      	str	r0, [r2, #4]
 8002018:	1c64      	adds	r4, r4, #1
 800201a:	2000      	movs	r0, #0
 800201c:	4680      	mov	r8, r0

0800201e <??zcl_reporting_send_report_6>:
 800201e:	f1b8 0f0c 	cmp.w	r8, #12
 8002022:	d22e      	bcs.n	8002082 <??zcl_reporting_send_report_7>
 8002024:	220c      	movs	r2, #12
 8002026:	fb02 f008 	mul.w	r0, r2, r8
 800202a:	4430      	add	r0, r6
 800202c:	7a00      	ldrb	r0, [r0, #8]
 800202e:	2800      	cmp	r0, #0
 8002030:	d027      	beq.n	8002082 <??zcl_reporting_send_report_7>

08002032 <??zcl_reporting_send_report_8>:
 8002032:	fb02 f008 	mul.w	r0, r2, r8
 8002036:	4430      	add	r0, r6
 8002038:	3009      	adds	r0, #9
 800203a:	0023      	movs	r3, r4
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002042:	2003      	movs	r0, #3
 8002044:	ab1a      	add	r3, sp, #104	@ 0x68
 8002046:	46a4      	mov	ip, r4
 8002048:	fa5f fc8c 	uxtb.w	ip, ip
 800204c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002050:	6058      	str	r0, [r3, #4]
 8002052:	1c64      	adds	r4, r4, #1
 8002054:	fb02 f008 	mul.w	r0, r2, r8
 8002058:	4430      	add	r0, r6
 800205a:	6840      	ldr	r0, [r0, #4]
 800205c:	0023      	movs	r3, r4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002064:	fb02 f208 	mul.w	r2, r2, r8
 8002068:	eb06 0002 	add.w	r0, r6, r2
 800206c:	7a00      	ldrb	r0, [r0, #8]
 800206e:	aa1a      	add	r2, sp, #104	@ 0x68
 8002070:	0023      	movs	r3, r4
 8002072:	b2db      	uxtb	r3, r3
 8002074:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002078:	6050      	str	r0, [r2, #4]
 800207a:	1c64      	adds	r4, r4, #1
 800207c:	f118 0801 	adds.w	r8, r8, #1
 8002080:	e7cd      	b.n	800201e <??zcl_reporting_send_report_6>

08002082 <??zcl_reporting_send_report_7>:
 8002082:	2200      	movs	r2, #0
 8002084:	a906      	add	r1, sp, #24
 8002086:	0028      	movs	r0, r5
 8002088:	f001 fe57 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 800208c:	a806      	add	r0, sp, #24
 800208e:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8002bf8 <??DataTable9_2>
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	f015 f8d6 	bl	8017246 <__aeabi_memcpy>
 800209a:	2001      	movs	r0, #1
 800209c:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020a0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020a4:	f050 0004 	orrs.w	r0, r0, #4
 80020a8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020ac:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020b0:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 80020b4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020b8:	7ca8      	ldrb	r0, [r5, #18]
 80020ba:	28ab      	cmp	r0, #171	@ 0xab
 80020bc:	d005      	beq.n	80020ca <??zcl_reporting_send_report_9>
 80020be:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020c2:	f050 0002 	orrs.w	r0, r0, #2
 80020c6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

080020ca <??zcl_reporting_send_report_9>:
 80020ca:	2001      	movs	r0, #1
 80020cc:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80020d0:	2000      	movs	r0, #0
 80020d2:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 80020d6:	a81a      	add	r0, sp, #104	@ 0x68
 80020d8:	900c      	str	r0, [sp, #48]	@ 0x30
 80020da:	0020      	movs	r0, r4
 80020dc:	b2c0      	uxtb	r0, r0
 80020de:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80020e2:	68ab      	ldr	r3, [r5, #8]
 80020e4:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8002bfc <??DataTable9_3>
 80020e8:	a906      	add	r1, sp, #24
 80020ea:	68a8      	ldr	r0, [r5, #8]
 80020ec:	f010 fc78 	bl	80129e0 <ZbApsdeDataReqCallback>
 80020f0:	f88d 0000 	strb.w	r0, [sp]
 80020f4:	f89d 0000 	ldrb.w	r0, [sp]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d012      	beq.n	8002122 <??zcl_reporting_send_report_4>
 80020fc:	f05f 0920 	movs.w	r9, #32
 8002100:	f05f 0a00 	movs.w	sl, #0
 8002104:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8002108:	4652      	mov	r2, sl
 800210a:	4649      	mov	r1, r9
 800210c:	4658      	mov	r0, fp
 800210e:	f005 fe03 	bl	8007d18 <__aeabi_memset>
 8002112:	f89d 0000 	ldrb.w	r0, [sp]
 8002116:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 800211a:	68a9      	ldr	r1, [r5, #8]
 800211c:	a812      	add	r0, sp, #72	@ 0x48
 800211e:	f7ff fed7 	bl	8001ed0 <zcl_reporting_send_conf>

08002122 <??zcl_reporting_send_report_4>:
 8002122:	f05f 0900 	movs.w	r9, #0

08002126 <??zcl_reporting_send_report_10>:
 8002126:	f1b9 0f0c 	cmp.w	r9, #12
 800212a:	d21e      	bcs.n	800216a <??zcl_reporting_send_report_11>
 800212c:	f05f 080c 	movs.w	r8, #12
 8002130:	fb08 f009 	mul.w	r0, r8, r9
 8002134:	4430      	add	r0, r6
 8002136:	6840      	ldr	r0, [r0, #4]
 8002138:	2800      	cmp	r0, #0
 800213a:	d016      	beq.n	800216a <??zcl_reporting_send_report_11>

0800213c <??zcl_reporting_send_report_12>:
 800213c:	2300      	movs	r3, #0
 800213e:	a23f      	add	r2, pc, #252	@ (adr r2, 800223c <??DataTable4>)
 8002140:	fb08 f009 	mul.w	r0, r8, r9
 8002144:	4430      	add	r0, r6
 8002146:	6841      	ldr	r1, [r0, #4]
 8002148:	68a8      	ldr	r0, [r5, #8]
 800214a:	f011 fa80 	bl	801364e <zb_heap_free>
 800214e:	2000      	movs	r0, #0
 8002150:	fb08 f109 	mul.w	r1, r8, r9
 8002154:	4431      	add	r1, r6
 8002156:	6048      	str	r0, [r1, #4]
 8002158:	2000      	movs	r0, #0
 800215a:	fb08 f809 	mul.w	r8, r8, r9
 800215e:	eb06 0108 	add.w	r1, r6, r8
 8002162:	7208      	strb	r0, [r1, #8]
 8002164:	f119 0901 	adds.w	r9, r9, #1
 8002168:	e7dd      	b.n	8002126 <??zcl_reporting_send_report_10>

0800216a <??zcl_reporting_send_report_11>:
 800216a:	b04d      	add	sp, #308	@ 0x134
 800216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002170 <zcl_report_check_time>:
 8002170:	4281      	cmp	r1, r0
 8002172:	d201      	bcs.n	8002178 <??zcl_report_check_time_0>
 8002174:	0008      	movs	r0, r1
 8002176:	e7ff      	b.n	8002178 <??zcl_report_check_time_0>

08002178 <??zcl_report_check_time_0>:
 8002178:	4770      	bx	lr

0800217a <zcl_report_kick>:
 800217a:	b538      	push	{r3, r4, r5, lr}
 800217c:	0004      	movs	r4, r0
 800217e:	000d      	movs	r5, r1
 8002180:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002182:	2800      	cmp	r0, #0
 8002184:	d101      	bne.n	800218a <??zcl_report_kick_0>
 8002186:	2000      	movs	r0, #0
 8002188:	e00d      	b.n	80021a6 <??zcl_report_kick_1>

0800218a <??zcl_report_kick_0>:
 800218a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800218e:	2800      	cmp	r0, #0
 8002190:	d001      	beq.n	8002196 <??zcl_report_kick_2>
 8002192:	2001      	movs	r0, #1
 8002194:	e007      	b.n	80021a6 <??zcl_report_kick_1>

08002196 <??zcl_report_kick_2>:
 8002196:	2001      	movs	r0, #1
 8002198:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 800219c:	0029      	movs	r1, r5
 800219e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80021a0:	f010 fedc 	bl	8012f5c <ZbTimerReset>
 80021a4:	2001      	movs	r0, #1

080021a6 <??zcl_report_kick_1>:
 80021a6:	bd32      	pop	{r1, r4, r5, pc}

080021a8 <ZbZclAttrReportKick>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	0004      	movs	r4, r0
 80021ac:	000d      	movs	r5, r1
 80021ae:	0016      	movs	r6, r2
 80021b0:	001f      	movs	r7, r3
 80021b2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d001      	beq.n	80021bc <??ZbZclAttrReportKick_0>
 80021b8:	2001      	movs	r0, #1
 80021ba:	e010      	b.n	80021de <??ZbZclAttrReportKick_1>

080021bc <??ZbZclAttrReportKick_0>:
 80021bc:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80021c0:	6426      	str	r6, [r4, #64]	@ 0x40
 80021c2:	6467      	str	r7, [r4, #68]	@ 0x44
 80021c4:	2100      	movs	r1, #0
 80021c6:	0020      	movs	r0, r4
 80021c8:	f7ff ffd7 	bl	800217a <zcl_report_kick>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d105      	bne.n	80021dc <??ZbZclAttrReportKick_2>
 80021d0:	2000      	movs	r0, #0
 80021d2:	6420      	str	r0, [r4, #64]	@ 0x40
 80021d4:	2000      	movs	r0, #0
 80021d6:	6460      	str	r0, [r4, #68]	@ 0x44
 80021d8:	2001      	movs	r0, #1
 80021da:	e000      	b.n	80021de <??ZbZclAttrReportKick_1>

080021dc <??ZbZclAttrReportKick_2>:
 80021dc:	2000      	movs	r0, #0

080021de <??ZbZclAttrReportKick_1>:
 80021de:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080021e0 <zcl_report_append_attr>:
 80021e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e4:	0004      	movs	r4, r0
 80021e6:	000d      	movs	r5, r1
 80021e8:	0016      	movs	r6, r2
 80021ea:	001f      	movs	r7, r3
 80021ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80021f0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80021f4:	2300      	movs	r3, #0
 80021f6:	a211      	add	r2, pc, #68	@ (adr r2, 800223c <??DataTable4>)
 80021f8:	4649      	mov	r1, r9
 80021fa:	0020      	movs	r0, r4
 80021fc:	f011 fa18 	bl	8013630 <zb_heap_alloc>
 8002200:	6068      	str	r0, [r5, #4]
 8002202:	6868      	ldr	r0, [r5, #4]
 8002204:	2800      	cmp	r0, #0
 8002206:	d101      	bne.n	800220c <??zcl_report_append_attr_0>
 8002208:	2000      	movs	r0, #0
 800220a:	e014      	b.n	8002236 <??zcl_report_append_attr_1>

0800220c <??zcl_report_append_attr_0>:
 800220c:	f8cd 9000 	str.w	r9, [sp]
 8002210:	46c2      	mov	sl, r8
 8002212:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8002216:	9a00      	ldr	r2, [sp, #0]
 8002218:	4651      	mov	r1, sl
 800221a:	4658      	mov	r0, fp
 800221c:	f015 f813 	bl	8017246 <__aeabi_memcpy>
 8002220:	f885 9008 	strb.w	r9, [r5, #8]
 8002224:	802e      	strh	r6, [r5, #0]
 8002226:	0031      	movs	r1, r6
 8002228:	b289      	uxth	r1, r1
 800222a:	f115 0009 	adds.w	r0, r5, #9
 800222e:	f004 ff94 	bl	800715a <putle16>
 8002232:	72ef      	strb	r7, [r5, #11]
 8002234:	2001      	movs	r0, #1

08002236 <??zcl_report_append_attr_1>:
 8002236:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800223c <??DataTable4>:
 800223c:	0000 0000                                   ....

08002240 <zcl_cluster_report_check_timeout>:
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	0006      	movs	r6, r0
 8002246:	000f      	movs	r7, r1
 8002248:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800224a:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800224e:	4288      	cmp	r0, r1
 8002250:	d001      	beq.n	8002256 <??zcl_cluster_report_check_timeout_0>
 8002252:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002254:	e000      	b.n	8002258 <??zcl_cluster_report_check_timeout_1>

08002256 <??zcl_cluster_report_check_timeout_0>:
 8002256:	2000      	movs	r0, #0

08002258 <??zcl_cluster_report_check_timeout_1>:
 8002258:	2800      	cmp	r0, #0
 800225a:	d101      	bne.n	8002260 <??zcl_cluster_report_check_timeout_2>
 800225c:	2000      	movs	r0, #0
 800225e:	e042      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

08002260 <??zcl_cluster_report_check_timeout_2>:
 8002260:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002262:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8002266:	4288      	cmp	r0, r1
 8002268:	d001      	beq.n	800226e <??zcl_cluster_report_check_timeout_4>
 800226a:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800226c:	e000      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

0800226e <??zcl_cluster_report_check_timeout_4>:
 800226e:	2500      	movs	r5, #0

08002270 <??zcl_cluster_report_check_timeout_5>:
 8002270:	2d00      	cmp	r5, #0
 8002272:	d037      	beq.n	80022e4 <??zcl_cluster_report_check_timeout_6>
 8002274:	46a8      	mov	r8, r5
 8002276:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 800227a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800227e:	4288      	cmp	r0, r1
 8002280:	d027      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

08002282 <??zcl_cluster_report_check_timeout_8>:
 8002282:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8002286:	2800      	cmp	r0, #0
 8002288:	d00e      	beq.n	80022a8 <??zcl_cluster_report_check_timeout_9>
 800228a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800228e:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8002292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002296:	fb00 1909 	mla	r9, r0, r9, r1
 800229a:	4649      	mov	r1, r9
 800229c:	0038      	movs	r0, r7
 800229e:	f010 fe8d 	bl	8012fbc <ZbTimeoutRemaining>
 80022a2:	0004      	movs	r4, r0
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d114      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022a8 <??zcl_cluster_report_check_timeout_9>:
 80022a8:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d010      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022b0 <??zcl_cluster_report_check_timeout_10>:
 80022b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80022b4:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 80022b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022bc:	fb00 1909 	mla	r9, r0, r9, r1
 80022c0:	4649      	mov	r1, r9
 80022c2:	0038      	movs	r0, r7
 80022c4:	f010 fe7a 	bl	8012fbc <ZbTimeoutRemaining>
 80022c8:	0004      	movs	r4, r0
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	d101      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022ce <??zcl_cluster_report_check_timeout_11>:
 80022ce:	2001      	movs	r0, #1
 80022d0:	e009      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

080022d2 <??zcl_cluster_report_check_timeout_7>:
 80022d2:	6828      	ldr	r0, [r5, #0]
 80022d4:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80022d8:	4288      	cmp	r0, r1
 80022da:	d001      	beq.n	80022e0 <??zcl_cluster_report_check_timeout_12>
 80022dc:	682d      	ldr	r5, [r5, #0]
 80022de:	e7c7      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e0 <??zcl_cluster_report_check_timeout_12>:
 80022e0:	2500      	movs	r5, #0
 80022e2:	e7c5      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e4 <??zcl_cluster_report_check_timeout_6>:
 80022e4:	2000      	movs	r0, #0

080022e6 <??zcl_cluster_report_check_timeout_3>:
 80022e6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080022ec <zcl_cluster_reports_timer>:
 80022ec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b081      	sub	sp, #4
 80022f2:	ed2d 8b04 	vpush	{d8-d9}
 80022f6:	b0b0      	sub	sp, #192	@ 0xc0
 80022f8:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80022fa:	9003      	str	r0, [sp, #12]
 80022fc:	2000      	movs	r0, #0
 80022fe:	9005      	str	r0, [sp, #20]
 8002300:	2000      	movs	r0, #0
 8002302:	9007      	str	r0, [sp, #28]
 8002304:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8002c00 <??DataTable9_4>
 8002308:	9006      	str	r0, [sp, #24]
 800230a:	2000      	movs	r0, #0
 800230c:	f88d 0010 	strb.w	r0, [sp, #16]
 8002310:	f05f 0b00 	movs.w	fp, #0
 8002314:	9803      	ldr	r0, [sp, #12]
 8002316:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800231a:	f88d 000b 	strb.w	r0, [sp, #11]
 800231e:	2000      	movs	r0, #0
 8002320:	f88d 000a 	strb.w	r0, [sp, #10]
 8002324:	2000      	movs	r0, #0
 8002326:	9903      	ldr	r1, [sp, #12]
 8002328:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 800232c:	2000      	movs	r0, #0
 800232e:	9903      	ldr	r1, [sp, #12]
 8002330:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8002334:	9803      	ldr	r0, [sp, #12]
 8002336:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002338:	9903      	ldr	r1, [sp, #12]
 800233a:	3130      	adds	r1, #48	@ 0x30
 800233c:	4288      	cmp	r0, r1
 800233e:	d002      	beq.n	8002346 <??zcl_cluster_reports_timer_1>
 8002340:	9803      	ldr	r0, [sp, #12]
 8002342:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002344:	e000      	b.n	8002348 <??zcl_cluster_reports_timer_2>

08002346 <??zcl_cluster_reports_timer_1>:
 8002346:	2000      	movs	r0, #0

08002348 <??zcl_cluster_reports_timer_2>:
 8002348:	2800      	cmp	r0, #0
 800234a:	f000 81f7 	beq.w	800273c <??zcl_cluster_reports_timer_3>

0800234e <??zcl_cluster_reports_timer_4>:
 800234e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002350:	f010 feb9 	bl	80130c6 <ZbZclUptime>
 8002354:	9009      	str	r0, [sp, #36]	@ 0x24
 8002356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002358:	9803      	ldr	r0, [sp, #12]
 800235a:	f7ff ff71 	bl	8002240 <zcl_cluster_report_check_timeout>
 800235e:	2800      	cmp	r0, #0
 8002360:	d004      	beq.n	800236c <??zcl_cluster_reports_timer_5>
 8002362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002364:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 8002368:	900b      	str	r0, [sp, #44]	@ 0x2c
 800236a:	e001      	b.n	8002370 <??zcl_cluster_reports_timer_6>

0800236c <??zcl_cluster_reports_timer_5>:
 800236c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800236e:	900b      	str	r0, [sp, #44]	@ 0x2c

08002370 <??zcl_cluster_reports_timer_6>:
 8002370:	2490      	movs	r4, #144	@ 0x90
 8002372:	2500      	movs	r5, #0
 8002374:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8002378:	002a      	movs	r2, r5
 800237a:	0021      	movs	r1, r4
 800237c:	4640      	mov	r0, r8
 800237e:	f005 fccb 	bl	8007d18 <__aeabi_memset>
 8002382:	2000      	movs	r0, #0
 8002384:	4682      	mov	sl, r0
 8002386:	2000      	movs	r0, #0
 8002388:	f88d 0008 	strb.w	r0, [sp, #8]
 800238c:	9803      	ldr	r0, [sp, #12]
 800238e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002390:	9903      	ldr	r1, [sp, #12]
 8002392:	3130      	adds	r1, #48	@ 0x30
 8002394:	4288      	cmp	r0, r1
 8002396:	d002      	beq.n	800239e <??zcl_cluster_reports_timer_7>
 8002398:	9803      	ldr	r0, [sp, #12]
 800239a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800239c:	e000      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800239e <??zcl_cluster_reports_timer_7>:
 800239e:	2600      	movs	r6, #0

080023a0 <??zcl_cluster_reports_timer_8>:
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	f000 817b 	beq.w	800269c <??zcl_cluster_reports_timer_9>
 80023a6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023aa:	f88d 0009 	strb.w	r0, [sp, #9]
 80023ae:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8002c00 <??DataTable9_4>
 80023b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80023b4:	0037      	movs	r7, r6
 80023b6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80023b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023bc:	4288      	cmp	r0, r1
 80023be:	f000 8164 	beq.w	800268a <??zcl_cluster_reports_timer_10>

080023c2 <??zcl_cluster_reports_timer_11>:
 80023c2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d116      	bne.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ca:	8c38      	ldrh	r0, [r7, #32]
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d013      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	8c3c      	ldrh	r4, [r7, #32]
 80023d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023d8:	fb00 1404 	mla	r4, r0, r4, r1
 80023dc:	0021      	movs	r1, r4
 80023de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80023e0:	f010 fdec 	bl	8012fbc <ZbTimeoutRemaining>
 80023e4:	9008      	str	r0, [sp, #32]
 80023e6:	9808      	ldr	r0, [sp, #32]
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d005      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ec:	9908      	ldr	r1, [sp, #32]
 80023ee:	9806      	ldr	r0, [sp, #24]
 80023f0:	f7ff febe 	bl	8002170 <zcl_report_check_time>
 80023f4:	9006      	str	r0, [sp, #24]
 80023f6:	e148      	b.n	800268a <??zcl_cluster_reports_timer_10>

080023f8 <??zcl_cluster_reports_timer_12>:
 80023f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d115      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002400:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002402:	2800      	cmp	r0, #0
 8002404:	d012      	beq.n	800242c <??zcl_cluster_reports_timer_13>
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800240a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800240e:	fb00 1404 	mla	r4, r0, r4, r1
 8002412:	0021      	movs	r1, r4
 8002414:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002416:	f010 fdd1 	bl	8012fbc <ZbTimeoutRemaining>
 800241a:	900a      	str	r0, [sp, #40]	@ 0x28
 800241c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800241e:	2800      	cmp	r0, #0
 8002420:	d104      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002422:	2001      	movs	r0, #1
 8002424:	f88d 0009 	strb.w	r0, [sp, #9]
 8002428:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800242a:	6138      	str	r0, [r7, #16]

0800242c <??zcl_cluster_reports_timer_13>:
 800242c:	9803      	ldr	r0, [sp, #12]
 800242e:	8982      	ldrh	r2, [r0, #12]
 8002430:	9803      	ldr	r0, [sp, #12]
 8002432:	7b81      	ldrb	r1, [r0, #14]
 8002434:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002436:	f010 fc08 	bl	8012c4a <ZbApsBindSrcExists>
 800243a:	2800      	cmp	r0, #0
 800243c:	d105      	bne.n	800244a <??zcl_cluster_reports_timer_14>
 800243e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002440:	9806      	ldr	r0, [sp, #24]
 8002442:	f7ff fe95 	bl	8002170 <zcl_report_check_time>
 8002446:	9006      	str	r0, [sp, #24]
 8002448:	e11f      	b.n	800268a <??zcl_cluster_reports_timer_10>

0800244a <??zcl_cluster_reports_timer_14>:
 800244a:	9805      	ldr	r0, [sp, #20]
 800244c:	2800      	cmp	r0, #0
 800244e:	d10b      	bne.n	8002468 <??zcl_cluster_reports_timer_15>
 8002450:	2300      	movs	r3, #0
 8002452:	a28a      	add	r2, pc, #552	@ (adr r2, 800267c <??zcl_cluster_reports_timer_0>)
 8002454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002458:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800245a:	f011 f8e9 	bl	8013630 <zb_heap_alloc>
 800245e:	9005      	str	r0, [sp, #20]
 8002460:	9805      	ldr	r0, [sp, #20]
 8002462:	2800      	cmp	r0, #0
 8002464:	f000 816a 	beq.w	800273c <??zcl_cluster_reports_timer_3>

08002468 <??zcl_cluster_reports_timer_15>:
 8002468:	2000      	movs	r0, #0
 800246a:	9001      	str	r0, [sp, #4]
 800246c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	9b05      	ldr	r3, [sp, #20]
 8002474:	f10d 0211 	add.w	r2, sp, #17
 8002478:	89b9      	ldrh	r1, [r7, #12]
 800247a:	9803      	ldr	r0, [sp, #12]
 800247c:	f7fd ffb3 	bl	80003e6 <ZbZclAttrRead>
 8002480:	2800      	cmp	r0, #0
 8002482:	d003      	beq.n	800248c <??zcl_cluster_reports_timer_16>
 8002484:	0038      	movs	r0, r7
 8002486:	f000 fb0a 	bl	8002a9e <zcl_reporting_disable>
 800248a:	e094      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

0800248c <??zcl_cluster_reports_timer_16>:
 800248c:	2300      	movs	r3, #0
 800248e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002492:	9905      	ldr	r1, [sp, #20]
 8002494:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8002498:	f7fe fdcd 	bl	8001036 <ZbZclAttrParseLength>
 800249c:	9007      	str	r0, [sp, #28]
 800249e:	9807      	ldr	r0, [sp, #28]
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d503      	bpl.n	80024ac <??zcl_cluster_reports_timer_18>
 80024a4:	0038      	movs	r0, r7
 80024a6:	f000 fafa 	bl	8002a9e <zcl_reporting_disable>
 80024aa:	e084      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024ac <??zcl_cluster_reports_timer_18>:
 80024ac:	9807      	ldr	r0, [sp, #28]
 80024ae:	2800      	cmp	r0, #0
 80024b0:	f000 8081 	beq.w	80025b6 <??zcl_cluster_reports_timer_17>

080024b4 <??zcl_cluster_reports_timer_19>:
 80024b4:	7bb8      	ldrb	r0, [r7, #14]
 80024b6:	2838      	cmp	r0, #56	@ 0x38
 80024b8:	db37      	blt.n	800252a <??zcl_cluster_reports_timer_20>
 80024ba:	7bb8      	ldrb	r0, [r7, #14]
 80024bc:	283b      	cmp	r0, #59	@ 0x3b
 80024be:	da34      	bge.n	800252a <??zcl_cluster_reports_timer_20>
 80024c0:	f10d 0201 	add.w	r2, sp, #1
 80024c4:	9905      	ldr	r1, [sp, #20]
 80024c6:	7bb8      	ldrb	r0, [r7, #14]
 80024c8:	f004 ffdb 	bl	8007482 <ZbZclParseFloat>
 80024cc:	eeb0 8a40 	vmov.f32	s16, s0
 80024d0:	eef0 8a60 	vmov.f32	s17, s1
 80024d4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80024d8:	2800      	cmp	r0, #0
 80024da:	d003      	beq.n	80024e4 <??zcl_cluster_reports_timer_21>
 80024dc:	0038      	movs	r0, r7
 80024de:	f000 fade 	bl	8002a9e <zcl_reporting_disable>
 80024e2:	e068      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024e4 <??zcl_cluster_reports_timer_21>:
 80024e4:	ec51 0b18 	vmov	r0, r1, d8
 80024e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ec:	f005 fcc8 	bl	8007e80 <__aeabi_dsub>
 80024f0:	ec41 0b19 	vmov	d9, r0, r1
 80024f4:	ec51 0b19 	vmov	r0, r1, d9
 80024f8:	2200      	movs	r2, #0
 80024fa:	2300      	movs	r3, #0
 80024fc:	f006 f8d8 	bl	80086b0 <__aeabi_cdcmpeq>
 8002500:	d205      	bcs.n	800250e <??zcl_cluster_reports_timer_22>
 8002502:	ec51 0b19 	vmov	r0, r1, d9
 8002506:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800250a:	ec41 0b19 	vmov	d9, r0, r1

0800250e <??zcl_cluster_reports_timer_22>:
 800250e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002512:	2800      	cmp	r0, #0
 8002514:	d106      	bne.n	8002524 <??zcl_cluster_reports_timer_23>
 8002516:	ec51 0b19 	vmov	r0, r1, d9
 800251a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800251e:	f006 f8c7 	bl	80086b0 <__aeabi_cdcmpeq>
 8002522:	d348      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002524 <??zcl_cluster_reports_timer_23>:
 8002524:	ed87 8b06 	vstr	d8, [r7, #24]
 8002528:	e040      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800252a <??zcl_cluster_reports_timer_20>:
 800252a:	7bb8      	ldrb	r0, [r7, #14]
 800252c:	f7fe fe34 	bl	8001198 <ZbZclAttrIsAnalog>
 8002530:	2800      	cmp	r0, #0
 8002532:	d02b      	beq.n	800258c <??zcl_cluster_reports_timer_25>
 8002534:	466a      	mov	r2, sp
 8002536:	9905      	ldr	r1, [sp, #20]
 8002538:	7bb8      	ldrb	r0, [r7, #14]
 800253a:	f7fe ff2b 	bl	8001394 <ZbZclParseInteger>
 800253e:	0004      	movs	r4, r0
 8002540:	000d      	movs	r5, r1
 8002542:	f89d 0000 	ldrb.w	r0, [sp]
 8002546:	2800      	cmp	r0, #0
 8002548:	d003      	beq.n	8002552 <??zcl_cluster_reports_timer_26>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 faa7 	bl	8002a9e <zcl_reporting_disable>
 8002550:	e031      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

08002552 <??zcl_cluster_reports_timer_26>:
 8002552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002556:	ebb4 0800 	subs.w	r8, r4, r0
 800255a:	eb75 0901 	sbcs.w	r9, r5, r1
 800255e:	f1b9 0f00 	cmp.w	r9, #0
 8002562:	d503      	bpl.n	800256c <??zcl_cluster_reports_timer_27>
 8002564:	f1d8 0800 	rsbs	r8, r8, #0
 8002568:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

0800256c <??zcl_cluster_reports_timer_27>:
 800256c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002570:	2800      	cmp	r0, #0
 8002572:	d108      	bne.n	8002586 <??zcl_cluster_reports_timer_28>
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f005 fe0c 	bl	8008194 <__aeabi_l2d>
 800257c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002580:	f006 f896 	bl	80086b0 <__aeabi_cdcmpeq>
 8002584:	d317      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002586 <??zcl_cluster_reports_timer_28>:
 8002586:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800258a:	e00f      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800258c <??zcl_cluster_reports_timer_25>:
 800258c:	9a07      	ldr	r2, [sp, #28]
 800258e:	9905      	ldr	r1, [sp, #20]
 8002590:	2000      	movs	r0, #0
 8002592:	f011 f86b 	bl	801366c <WpanCrc>
 8002596:	0001      	movs	r1, r0
 8002598:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800259c:	2800      	cmp	r0, #0
 800259e:	d104      	bne.n	80025aa <??zcl_cluster_reports_timer_29>
 80025a0:	8b38      	ldrh	r0, [r7, #24]
 80025a2:	000a      	movs	r2, r1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	4290      	cmp	r0, r2
 80025a8:	d005      	beq.n	80025b6 <??zcl_cluster_reports_timer_17>

080025aa <??zcl_cluster_reports_timer_29>:
 80025aa:	8339      	strh	r1, [r7, #24]

080025ac <??zcl_cluster_reports_timer_24>:
 80025ac:	2001      	movs	r0, #1
 80025ae:	f88d 0009 	strb.w	r0, [sp, #9]
 80025b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80025b4:	6138      	str	r0, [r7, #16]

080025b6 <??zcl_cluster_reports_timer_17>:
 80025b6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d060      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025be:	9807      	ldr	r0, [sp, #28]
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d05d      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025c4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80025c8:	1c40      	adds	r0, r0, #1
 80025ca:	f88d 0010 	strb.w	r0, [sp, #16]
 80025ce:	4650      	mov	r0, sl
 80025d0:	b2c0      	uxtb	r0, r0
 80025d2:	280c      	cmp	r0, #12
 80025d4:	d007      	beq.n	80025e6 <??zcl_cluster_reports_timer_31>
 80025d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80025da:	9907      	ldr	r1, [sp, #28]
 80025dc:	fa51 f080 	uxtab	r0, r1, r0
 80025e0:	1cc0      	adds	r0, r0, #3
 80025e2:	2837      	cmp	r0, #55	@ 0x37
 80025e4:	d314      	bcc.n	8002610 <??zcl_cluster_reports_timer_32>

080025e6 <??zcl_cluster_reports_timer_31>:
 80025e6:	465a      	mov	r2, fp
 80025e8:	a90c      	add	r1, sp, #48	@ 0x30
 80025ea:	9803      	ldr	r0, [sp, #12]
 80025ec:	f7ff fc8e 	bl	8001f0c <zcl_reporting_queue_report>
 80025f0:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80025f4:	2490      	movs	r4, #144	@ 0x90
 80025f6:	2500      	movs	r5, #0
 80025f8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80025fc:	002a      	movs	r2, r5
 80025fe:	0021      	movs	r1, r4
 8002600:	4640      	mov	r0, r8
 8002602:	f005 fb89 	bl	8007d18 <__aeabi_memset>
 8002606:	2000      	movs	r0, #0
 8002608:	4682      	mov	sl, r0
 800260a:	2000      	movs	r0, #0
 800260c:	f88d 0008 	strb.w	r0, [sp, #8]

08002610 <??zcl_cluster_reports_timer_32>:
 8002610:	9807      	ldr	r0, [sp, #28]
 8002612:	9001      	str	r0, [sp, #4]
 8002614:	9805      	ldr	r0, [sp, #20]
 8002616:	9000      	str	r0, [sp, #0]
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	89ba      	ldrh	r2, [r7, #12]
 800261c:	a90c      	add	r1, sp, #48	@ 0x30
 800261e:	4654      	mov	r4, sl
 8002620:	b2e4      	uxtb	r4, r4
 8002622:	200c      	movs	r0, #12
 8002624:	4344      	muls	r4, r0
 8002626:	4421      	add	r1, r4
 8002628:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800262a:	f7ff fdd9 	bl	80021e0 <zcl_report_append_attr>
 800262e:	2800      	cmp	r0, #0
 8002630:	d02b      	beq.n	800268a <??zcl_cluster_reports_timer_10>

08002632 <??zcl_cluster_reports_timer_33>:
 8002632:	f11a 0a01 	adds.w	sl, sl, #1
 8002636:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800263a:	9807      	ldr	r0, [sp, #28]
 800263c:	1841      	adds	r1, r0, r1
 800263e:	1cc9      	adds	r1, r1, #3
 8002640:	f88d 1008 	strb.w	r1, [sp, #8]
 8002644:	8c38      	ldrh	r0, [r7, #32]
 8002646:	2800      	cmp	r0, #0
 8002648:	d005      	beq.n	8002656 <??zcl_cluster_reports_timer_34>
 800264a:	8c39      	ldrh	r1, [r7, #32]
 800264c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002650:	4341      	muls	r1, r0
 8002652:	9108      	str	r1, [sp, #32]
 8002654:	e00b      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002656 <??zcl_cluster_reports_timer_34>:
 8002656:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002658:	2800      	cmp	r0, #0
 800265a:	d005      	beq.n	8002668 <??zcl_cluster_reports_timer_36>
 800265c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800265e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002662:	4341      	muls	r1, r0
 8002664:	9108      	str	r1, [sp, #32]
 8002666:	e002      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002668 <??zcl_cluster_reports_timer_36>:
 8002668:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8002c00 <??DataTable9_4>
 800266c:	9008      	str	r0, [sp, #32]

0800266e <??zcl_cluster_reports_timer_35>:
 800266e:	9908      	ldr	r1, [sp, #32]
 8002670:	9806      	ldr	r0, [sp, #24]
 8002672:	f7ff fd7d 	bl	8002170 <zcl_report_check_time>
 8002676:	9006      	str	r0, [sp, #24]
 8002678:	e007      	b.n	800268a <??zcl_cluster_reports_timer_10>
 800267a:	bf00      	nop

0800267c <??zcl_cluster_reports_timer_0>:
 800267c:	0000 0000                                   ....

08002680 <??zcl_cluster_reports_timer_30>:
 8002680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002682:	9806      	ldr	r0, [sp, #24]
 8002684:	f7ff fd74 	bl	8002170 <zcl_report_check_time>
 8002688:	9006      	str	r0, [sp, #24]

0800268a <??zcl_cluster_reports_timer_10>:
 800268a:	6830      	ldr	r0, [r6, #0]
 800268c:	9903      	ldr	r1, [sp, #12]
 800268e:	3130      	adds	r1, #48	@ 0x30
 8002690:	4288      	cmp	r0, r1
 8002692:	d001      	beq.n	8002698 <??zcl_cluster_reports_timer_37>
 8002694:	6836      	ldr	r6, [r6, #0]
 8002696:	e683      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

08002698 <??zcl_cluster_reports_timer_37>:
 8002698:	2600      	movs	r6, #0
 800269a:	e681      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800269c <??zcl_cluster_reports_timer_9>:
 800269c:	9805      	ldr	r0, [sp, #20]
 800269e:	2800      	cmp	r0, #0
 80026a0:	d04c      	beq.n	800273c <??zcl_cluster_reports_timer_3>
 80026a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d042      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 80026aa:	2001      	movs	r0, #1
 80026ac:	9007      	str	r0, [sp, #28]
 80026ae:	2001      	movs	r0, #1
 80026b0:	9905      	ldr	r1, [sp, #20]
 80026b2:	7008      	strb	r0, [r1, #0]
 80026b4:	4650      	mov	r0, sl
 80026b6:	b2c0      	uxtb	r0, r0
 80026b8:	280c      	cmp	r0, #12
 80026ba:	d007      	beq.n	80026cc <??zcl_cluster_reports_timer_39>
 80026bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80026c0:	9907      	ldr	r1, [sp, #28]
 80026c2:	fa51 f080 	uxtab	r0, r1, r0
 80026c6:	1cc0      	adds	r0, r0, #3
 80026c8:	2837      	cmp	r0, #55	@ 0x37
 80026ca:	d314      	bcc.n	80026f6 <??zcl_cluster_reports_timer_40>

080026cc <??zcl_cluster_reports_timer_39>:
 80026cc:	465a      	mov	r2, fp
 80026ce:	a90c      	add	r1, sp, #48	@ 0x30
 80026d0:	9803      	ldr	r0, [sp, #12]
 80026d2:	f7ff fc1b 	bl	8001f0c <zcl_reporting_queue_report>
 80026d6:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80026da:	2490      	movs	r4, #144	@ 0x90
 80026dc:	2500      	movs	r5, #0
 80026de:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80026e2:	002a      	movs	r2, r5
 80026e4:	0021      	movs	r1, r4
 80026e6:	4640      	mov	r0, r8
 80026e8:	f005 fb16 	bl	8007d18 <__aeabi_memset>
 80026ec:	2000      	movs	r0, #0
 80026ee:	4682      	mov	sl, r0
 80026f0:	2000      	movs	r0, #0
 80026f2:	f88d 0008 	strb.w	r0, [sp, #8]

080026f6 <??zcl_cluster_reports_timer_40>:
 80026f6:	9807      	ldr	r0, [sp, #28]
 80026f8:	9001      	str	r0, [sp, #4]
 80026fa:	9805      	ldr	r0, [sp, #20]
 80026fc:	9000      	str	r0, [sp, #0]
 80026fe:	2330      	movs	r3, #48	@ 0x30
 8002700:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002704:	a90c      	add	r1, sp, #48	@ 0x30
 8002706:	4654      	mov	r4, sl
 8002708:	b2e4      	uxtb	r4, r4
 800270a:	200c      	movs	r0, #12
 800270c:	4344      	muls	r4, r0
 800270e:	4421      	add	r1, r4
 8002710:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002712:	f7ff fd65 	bl	80021e0 <zcl_report_append_attr>
 8002716:	2800      	cmp	r0, #0
 8002718:	d001      	beq.n	800271e <??zcl_cluster_reports_timer_41>
 800271a:	f11a 0a01 	adds.w	sl, sl, #1

0800271e <??zcl_cluster_reports_timer_41>:
 800271e:	4650      	mov	r0, sl
 8002720:	b2c0      	uxtb	r0, r0
 8002722:	2800      	cmp	r0, #0
 8002724:	d004      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 8002726:	465a      	mov	r2, fp
 8002728:	a90c      	add	r1, sp, #48	@ 0x30
 800272a:	9803      	ldr	r0, [sp, #12]
 800272c:	f7ff fbee 	bl	8001f0c <zcl_reporting_queue_report>

08002730 <??zcl_cluster_reports_timer_38>:
 8002730:	2300      	movs	r3, #0
 8002732:	a2ba      	add	r2, pc, #744	@ (adr r2, 8002a1c <??DataTable7>)
 8002734:	9905      	ldr	r1, [sp, #20]
 8002736:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002738:	f010 ff89 	bl	801364e <zb_heap_free>

0800273c <??zcl_cluster_reports_timer_3>:
 800273c:	9806      	ldr	r0, [sp, #24]
 800273e:	28c8      	cmp	r0, #200	@ 0xc8
 8002740:	d201      	bcs.n	8002746 <??zcl_cluster_reports_timer_42>
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	9006      	str	r0, [sp, #24]

08002746 <??zcl_cluster_reports_timer_42>:
 8002746:	9803      	ldr	r0, [sp, #12]
 8002748:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800274a:	2800      	cmp	r0, #0
 800274c:	d00c      	beq.n	8002768 <??zcl_cluster_reports_timer_43>
 800274e:	9803      	ldr	r0, [sp, #12]
 8002750:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002752:	9906      	ldr	r1, [sp, #24]
 8002754:	9803      	ldr	r0, [sp, #12]
 8002756:	9b03      	ldr	r3, [sp, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4798      	blx	r3
 800275c:	2000      	movs	r0, #0
 800275e:	9903      	ldr	r1, [sp, #12]
 8002760:	6408      	str	r0, [r1, #64]	@ 0x40
 8002762:	2000      	movs	r0, #0
 8002764:	9903      	ldr	r1, [sp, #12]
 8002766:	6448      	str	r0, [r1, #68]	@ 0x44

08002768 <??zcl_cluster_reports_timer_43>:
 8002768:	2301      	movs	r3, #1
 800276a:	f10d 020a 	add.w	r2, sp, #10
 800276e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002772:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002774:	f010 fc92 	bl	801309c <ZbNwkGet>
 8002778:	2800      	cmp	r0, #0
 800277a:	d002      	beq.n	8002782 <??zcl_cluster_reports_timer_44>
 800277c:	2000      	movs	r0, #0
 800277e:	f88d 000a 	strb.w	r0, [sp, #10]

08002782 <??zcl_cluster_reports_timer_44>:
 8002782:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002786:	2800      	cmp	r0, #0
 8002788:	d110      	bne.n	80027ac <??zcl_cluster_reports_timer_45>
 800278a:	9803      	ldr	r0, [sp, #12]
 800278c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800278e:	9903      	ldr	r1, [sp, #12]
 8002790:	3130      	adds	r1, #48	@ 0x30
 8002792:	4288      	cmp	r0, r1
 8002794:	d002      	beq.n	800279c <??zcl_cluster_reports_timer_46>
 8002796:	9803      	ldr	r0, [sp, #12]
 8002798:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800279a:	e000      	b.n	800279e <??zcl_cluster_reports_timer_47>

0800279c <??zcl_cluster_reports_timer_46>:
 800279c:	2000      	movs	r0, #0

0800279e <??zcl_cluster_reports_timer_47>:
 800279e:	2800      	cmp	r0, #0
 80027a0:	d004      	beq.n	80027ac <??zcl_cluster_reports_timer_45>
 80027a2:	9906      	ldr	r1, [sp, #24]
 80027a4:	9803      	ldr	r0, [sp, #12]
 80027a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80027a8:	f010 fbd8 	bl	8012f5c <ZbTimerReset>

080027ac <??zcl_cluster_reports_timer_45>:
 80027ac:	b030      	add	sp, #192	@ 0xc0
 80027ae:	ecbd 8b04 	vpop	{d8-d9}
 80027b2:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027b6 <zcl_attr_reporting_check>:
 80027b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b8:	0005      	movs	r5, r0
 80027ba:	000e      	movs	r6, r1
 80027bc:	0017      	movs	r7, r2
 80027be:	2000      	movs	r0, #0
 80027c0:	f88d 0000 	strb.w	r0, [sp]
 80027c4:	2301      	movs	r3, #1
 80027c6:	466a      	mov	r2, sp
 80027c8:	f240 410c 	movw	r1, #1036	@ 0x40c
 80027cc:	68a8      	ldr	r0, [r5, #8]
 80027ce:	f010 fc65 	bl	801309c <ZbNwkGet>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d002      	beq.n	80027dc <??zcl_attr_reporting_check_0>
 80027d6:	2000      	movs	r0, #0
 80027d8:	f88d 0000 	strb.w	r0, [sp]

080027dc <??zcl_attr_reporting_check_0>:
 80027dc:	f89d 0000 	ldrb.w	r0, [sp]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d10d      	bne.n	8002800 <??zcl_attr_reporting_check_1>
 80027e4:	003a      	movs	r2, r7
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	0031      	movs	r1, r6
 80027ea:	b289      	uxth	r1, r1
 80027ec:	0028      	movs	r0, r5
 80027ee:	f000 f81a 	bl	8002826 <zcl_reporting_find>
 80027f2:	0004      	movs	r4, r0
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	d003      	beq.n	8002800 <??zcl_attr_reporting_check_1>
 80027f8:	21c8      	movs	r1, #200	@ 0xc8
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7ff fcbd 	bl	800217a <zcl_report_kick>

08002800 <??zcl_attr_reporting_check_1>:
 8002800:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002802 <ZbZclReportCleanup>:
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	0005      	movs	r5, r0

08002806 <??ZbZclReportCleanup_0>:
 8002806:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002808:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 800280c:	4288      	cmp	r0, r1
 800280e:	d001      	beq.n	8002814 <??ZbZclReportCleanup_1>
 8002810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8002812:	e000      	b.n	8002816 <??ZbZclReportCleanup_2>

08002814 <??ZbZclReportCleanup_1>:
 8002814:	2400      	movs	r4, #0

08002816 <??ZbZclReportCleanup_2>:
 8002816:	2c00      	cmp	r4, #0
 8002818:	d004      	beq.n	8002824 <??ZbZclReportCleanup_3>

0800281a <??ZbZclReportCleanup_4>:
 800281a:	0026      	movs	r6, r4
 800281c:	0030      	movs	r0, r6
 800281e:	f000 f8ff 	bl	8002a20 <zcl_reporting_delete>
 8002822:	e7f0      	b.n	8002806 <??ZbZclReportCleanup_0>

08002824 <??ZbZclReportCleanup_3>:
 8002824:	bd70      	pop	{r4, r5, r6, pc}

08002826 <zcl_reporting_find>:
 8002826:	b470      	push	{r4, r5, r6}
 8002828:	0004      	movs	r4, r0
 800282a:	000b      	movs	r3, r1
 800282c:	0010      	movs	r0, r2
 800282e:	b2c0      	uxtb	r0, r0
 8002830:	2801      	cmp	r0, #1
 8002832:	d101      	bne.n	8002838 <??zcl_reporting_find_0>
 8002834:	2000      	movs	r0, #0
 8002836:	e01c      	b.n	8002872 <??zcl_reporting_find_1>

08002838 <??zcl_reporting_find_0>:
 8002838:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800283a:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 800283e:	4288      	cmp	r0, r1
 8002840:	d001      	beq.n	8002846 <??zcl_reporting_find_2>
 8002842:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002844:	e000      	b.n	8002848 <??zcl_reporting_find_3>

08002846 <??zcl_reporting_find_2>:
 8002846:	2100      	movs	r1, #0

08002848 <??zcl_reporting_find_3>:
 8002848:	2900      	cmp	r1, #0
 800284a:	d011      	beq.n	8002870 <??zcl_reporting_find_4>
 800284c:	000d      	movs	r5, r1
 800284e:	89a8      	ldrh	r0, [r5, #12]
 8002850:	001e      	movs	r6, r3
 8002852:	b2b6      	uxth	r6, r6
 8002854:	42b0      	cmp	r0, r6
 8002856:	d005      	beq.n	8002864 <??zcl_reporting_find_5>
 8002858:	6808      	ldr	r0, [r1, #0]
 800285a:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 800285e:	42b0      	cmp	r0, r6
 8002860:	d004      	beq.n	800286c <??zcl_reporting_find_6>
 8002862:	e001      	b.n	8002868 <??zcl_reporting_find_7>

08002864 <??zcl_reporting_find_5>:
 8002864:	0028      	movs	r0, r5
 8002866:	e004      	b.n	8002872 <??zcl_reporting_find_1>

08002868 <??zcl_reporting_find_7>:
 8002868:	6809      	ldr	r1, [r1, #0]
 800286a:	e7ed      	b.n	8002848 <??zcl_reporting_find_3>

0800286c <??zcl_reporting_find_6>:
 800286c:	2100      	movs	r1, #0
 800286e:	e7eb      	b.n	8002848 <??zcl_reporting_find_3>

08002870 <??zcl_reporting_find_4>:
 8002870:	2000      	movs	r0, #0

08002872 <??zcl_reporting_find_1>:
 8002872:	bc70      	pop	{r4, r5, r6}
 8002874:	4770      	bx	lr

08002876 <zcl_reporting_stack_event>:
 8002876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	0006      	movs	r6, r0
 800287c:	000f      	movs	r7, r1
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	46ca      	mov	sl, r9
 8002884:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 8002888:	d001      	beq.n	800288e <??zcl_reporting_stack_event_0>
 800288a:	2000      	movs	r0, #0
 800288c:	e01b      	b.n	80028c6 <??zcl_reporting_stack_event_1>

0800288e <??zcl_reporting_stack_event_0>:
 800288e:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8002892:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8002896:	4288      	cmp	r0, r1
 8002898:	d002      	beq.n	80028a0 <??zcl_reporting_stack_event_2>
 800289a:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 800289e:	e000      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028a0 <??zcl_reporting_stack_event_2>:
 80028a0:	2400      	movs	r4, #0

080028a2 <??zcl_reporting_stack_event_3>:
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d00e      	beq.n	80028c4 <??zcl_reporting_stack_event_4>
 80028a6:	0025      	movs	r5, r4
 80028a8:	2201      	movs	r2, #1
 80028aa:	0029      	movs	r1, r5
 80028ac:	0030      	movs	r0, r6
 80028ae:	f000 f947 	bl	8002b40 <zcl_reporting_reset_defaults>
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80028b8:	4288      	cmp	r0, r1
 80028ba:	d001      	beq.n	80028c0 <??zcl_reporting_stack_event_5>
 80028bc:	6824      	ldr	r4, [r4, #0]
 80028be:	e7f0      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c0 <??zcl_reporting_stack_event_5>:
 80028c0:	2400      	movs	r4, #0
 80028c2:	e7ee      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c4 <??zcl_reporting_stack_event_4>:
 80028c4:	2000      	movs	r0, #0

080028c6 <??zcl_reporting_stack_event_1>:
 80028c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028ca <zcl_reporting_save_curr_val>:
 80028ca:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80028ce:	0005      	movs	r5, r0
 80028d0:	000e      	movs	r6, r1
 80028d2:	68af      	ldr	r7, [r5, #8]
 80028d4:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 80028d8:	2300      	movs	r3, #0
 80028da:	464a      	mov	r2, r9
 80028dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028e0:	0038      	movs	r0, r7
 80028e2:	f010 fea5 	bl	8013630 <zb_heap_alloc>
 80028e6:	0004      	movs	r4, r0
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d101      	bne.n	80028f0 <??zcl_reporting_save_curr_val_0>
 80028ec:	2089      	movs	r0, #137	@ 0x89
 80028ee:	e05d      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

080028f0 <??zcl_reporting_save_curr_val_0>:
 80028f0:	2001      	movs	r0, #1
 80028f2:	9001      	str	r0, [sp, #4]
 80028f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	0023      	movs	r3, r4
 80028fc:	f10d 0209 	add.w	r2, sp, #9
 8002900:	89b1      	ldrh	r1, [r6, #12]
 8002902:	0028      	movs	r0, r5
 8002904:	f7fd fd6f 	bl	80003e6 <ZbZclAttrRead>
 8002908:	f88d 0008 	strb.w	r0, [sp, #8]
 800290c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002910:	2800      	cmp	r0, #0
 8002912:	d002      	beq.n	800291a <??zcl_reporting_save_curr_val_2>
 8002914:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002918:	e048      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800291a <??zcl_reporting_save_curr_val_2>:
 800291a:	7bb0      	ldrb	r0, [r6, #14]
 800291c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002920:	4288      	cmp	r0, r1
 8002922:	d001      	beq.n	8002928 <??zcl_reporting_save_curr_val_3>
 8002924:	208d      	movs	r0, #141	@ 0x8d
 8002926:	e041      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002928 <??zcl_reporting_save_curr_val_3>:
 8002928:	2300      	movs	r3, #0
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	0021      	movs	r1, r4
 8002930:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002934:	f7fe fb7f 	bl	8001036 <ZbZclAttrParseLength>
 8002938:	4680      	mov	r8, r0
 800293a:	f1b8 0f00 	cmp.w	r8, #0
 800293e:	d501      	bpl.n	8002944 <??zcl_reporting_save_curr_val_4>
 8002940:	2089      	movs	r0, #137	@ 0x89
 8002942:	e033      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002944 <??zcl_reporting_save_curr_val_4>:
 8002944:	7bb0      	ldrb	r0, [r6, #14]
 8002946:	f7fe fc27 	bl	8001198 <ZbZclAttrIsAnalog>
 800294a:	2800      	cmp	r0, #0
 800294c:	d106      	bne.n	800295c <??zcl_reporting_save_curr_val_5>
 800294e:	4642      	mov	r2, r8
 8002950:	0021      	movs	r1, r4
 8002952:	2000      	movs	r0, #0
 8002954:	f010 fe8a 	bl	801366c <WpanCrc>
 8002958:	8330      	strh	r0, [r6, #24]
 800295a:	e020      	b.n	800299e <??zcl_reporting_save_curr_val_6>

0800295c <??zcl_reporting_save_curr_val_5>:
 800295c:	7bb0      	ldrb	r0, [r6, #14]
 800295e:	f005 f8b5 	bl	8007acc <ZbZclAttrIsFloat>
 8002962:	2800      	cmp	r0, #0
 8002964:	d00d      	beq.n	8002982 <??zcl_reporting_save_curr_val_7>
 8002966:	aa02      	add	r2, sp, #8
 8002968:	0021      	movs	r1, r4
 800296a:	7bb0      	ldrb	r0, [r6, #14]
 800296c:	f004 fd89 	bl	8007482 <ZbZclParseFloat>
 8002970:	ed86 0b06 	vstr	d0, [r6, #24]
 8002974:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002978:	2800      	cmp	r0, #0
 800297a:	d010      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 800297c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002980:	e014      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002982 <??zcl_reporting_save_curr_val_7>:
 8002982:	aa02      	add	r2, sp, #8
 8002984:	0021      	movs	r1, r4
 8002986:	7bb0      	ldrb	r0, [r6, #14]
 8002988:	f7fe fd04 	bl	8001394 <ZbZclParseInteger>
 800298c:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8002990:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002994:	2800      	cmp	r0, #0
 8002996:	d002      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 8002998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800299c:	e006      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800299e <??zcl_reporting_save_curr_val_6>:
 800299e:	2300      	movs	r3, #0
 80029a0:	464a      	mov	r2, r9
 80029a2:	0021      	movs	r1, r4
 80029a4:	0038      	movs	r0, r7
 80029a6:	f010 fe52 	bl	801364e <zb_heap_free>
 80029aa:	2000      	movs	r0, #0

080029ac <??zcl_reporting_save_curr_val_1>:
 80029ac:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

080029b0 <zcl_reporting_create_new>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	0006      	movs	r6, r0
 80029b6:	000f      	movs	r7, r1
 80029b8:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	89b9      	ldrh	r1, [r7, #12]
 80029c0:	0030      	movs	r0, r6
 80029c2:	f7ff ff30 	bl	8002826 <zcl_reporting_find>
 80029c6:	0005      	movs	r5, r0
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	d001      	beq.n	80029d0 <??zcl_reporting_create_new_0>
 80029cc:	0028      	movs	r0, r5
 80029ce:	e023      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029d0 <??zcl_reporting_create_new_0>:
 80029d0:	2300      	movs	r3, #0
 80029d2:	a212      	add	r2, pc, #72	@ (adr r2, 8002a1c <??DataTable7>)
 80029d4:	2138      	movs	r1, #56	@ 0x38
 80029d6:	4640      	mov	r0, r8
 80029d8:	f010 fe2a 	bl	8013630 <zb_heap_alloc>
 80029dc:	0004      	movs	r4, r0
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d101      	bne.n	80029e6 <??zcl_reporting_create_new_2>
 80029e2:	2000      	movs	r0, #0
 80029e4:	e018      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029e6 <??zcl_reporting_create_new_2>:
 80029e6:	2538      	movs	r5, #56	@ 0x38
 80029e8:	46b9      	mov	r9, r7
 80029ea:	46a2      	mov	sl, r4
 80029ec:	002a      	movs	r2, r5
 80029ee:	4649      	mov	r1, r9
 80029f0:	4650      	mov	r0, sl
 80029f2:	f014 fc28 	bl	8017246 <__aeabi_memcpy>
 80029f6:	6024      	str	r4, [r4, #0]
 80029f8:	6064      	str	r4, [r4, #4]
 80029fa:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 80029fe:	6020      	str	r0, [r4, #0]
 8002a00:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	6044      	str	r4, [r0, #4]
 8002a08:	6860      	ldr	r0, [r4, #4]
 8002a0a:	6004      	str	r4, [r0, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	0021      	movs	r1, r4
 8002a10:	4640      	mov	r0, r8
 8002a12:	f000 f895 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002a16:	0020      	movs	r0, r4

08002a18 <??zcl_reporting_create_new_1>:
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a1c <??DataTable7>:
 8002a1c:	0000 0000                                   ....

08002a20 <zcl_reporting_delete>:
 8002a20:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002a22:	0004      	movs	r4, r0
 8002a24:	68a5      	ldr	r5, [r4, #8]
 8002a26:	68ae      	ldr	r6, [r5, #8]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f88d 0000 	strb.w	r0, [sp]
 8002a2e:	6860      	ldr	r0, [r4, #4]
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	6048      	str	r0, [r1, #4]
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	6008      	str	r0, [r1, #0]
 8002a3a:	6024      	str	r4, [r4, #0]
 8002a3c:	6064      	str	r4, [r4, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	a26c      	add	r2, pc, #432	@ (adr r2, 8002bf4 <??DataTable9_1>)
 8002a42:	0021      	movs	r1, r4
 8002a44:	0030      	movs	r0, r6
 8002a46:	f010 fe02 	bl	801364e <zb_heap_free>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	466a      	mov	r2, sp
 8002a4e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002a52:	0030      	movs	r0, r6
 8002a54:	f010 fb22 	bl	801309c <ZbNwkGet>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d002      	beq.n	8002a62 <??zcl_reporting_delete_0>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f88d 0000 	strb.w	r0, [sp]

08002a62 <??zcl_reporting_delete_0>:
 8002a62:	f89d 0000 	ldrb.w	r0, [sp]
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d103      	bne.n	8002a72 <??zcl_reporting_delete_1>
 8002a6a:	21c8      	movs	r1, #200	@ 0xc8
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	f7ff fb84 	bl	800217a <zcl_report_kick>

08002a72 <??zcl_reporting_delete_1>:
 8002a72:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002a74 <zcl_cluster_attr_report_delete>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	0005      	movs	r5, r0
 8002a78:	000e      	movs	r6, r1
 8002a7a:	0017      	movs	r7, r2
 8002a7c:	003a      	movs	r2, r7
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	0031      	movs	r1, r6
 8002a82:	b289      	uxth	r1, r1
 8002a84:	0028      	movs	r0, r5
 8002a86:	f7ff fece 	bl	8002826 <zcl_reporting_find>
 8002a8a:	0004      	movs	r4, r0
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	d101      	bne.n	8002a94 <??zcl_cluster_attr_report_delete_0>
 8002a90:	2000      	movs	r0, #0
 8002a92:	e003      	b.n	8002a9c <??zcl_cluster_attr_report_delete_1>

08002a94 <??zcl_cluster_attr_report_delete_0>:
 8002a94:	0020      	movs	r0, r4
 8002a96:	f7ff ffc3 	bl	8002a20 <zcl_reporting_delete>
 8002a9a:	2001      	movs	r0, #1

08002a9c <??zcl_cluster_attr_report_delete_1>:
 8002a9c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002a9e <zcl_reporting_disable>:
 8002a9e:	b538      	push	{r3, r4, r5, lr}
 8002aa0:	0004      	movs	r4, r0
 8002aa2:	68a0      	ldr	r0, [r4, #8]
 8002aa4:	6885      	ldr	r5, [r0, #8]
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f88d 0000 	strb.w	r0, [sp]
 8002aac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ab0:	8460      	strh	r0, [r4, #34]	@ 0x22
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	8420      	strh	r0, [r4, #32]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	466a      	mov	r2, sp
 8002aba:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002abe:	0028      	movs	r0, r5
 8002ac0:	f010 faec 	bl	801309c <ZbNwkGet>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d002      	beq.n	8002ace <??zcl_reporting_disable_0>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f88d 0000 	strb.w	r0, [sp]

08002ace <??zcl_reporting_disable_0>:
 8002ace:	f89d 0000 	ldrb.w	r0, [sp]
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d103      	bne.n	8002ade <??zcl_reporting_disable_1>
 8002ad6:	21c8      	movs	r1, #200	@ 0xc8
 8002ad8:	68a0      	ldr	r0, [r4, #8]
 8002ada:	f7ff fb4e 	bl	800217a <zcl_report_kick>

08002ade <??zcl_reporting_disable_1>:
 8002ade:	bd31      	pop	{r0, r4, r5, pc}

08002ae0 <zcl_reporting_check_default_intvl>:
 8002ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae4:	880a      	ldrh	r2, [r1, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00e      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002aea:	880a      	ldrh	r2, [r1, #0]
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d00b      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002af0:	880a      	ldrh	r2, [r1, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d102      	bne.n	8002afc <??zcl_reporting_check_default_intvl_1>
 8002af6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002afa:	800a      	strh	r2, [r1, #0]

08002afc <??zcl_reporting_check_default_intvl_1>:
 8002afc:	880a      	ldrh	r2, [r1, #0]
 8002afe:	8803      	ldrh	r3, [r0, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d201      	bcs.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002b04:	2200      	movs	r2, #0
 8002b06:	8002      	strh	r2, [r0, #0]

08002b08 <??zcl_reporting_check_default_intvl_0>:
 8002b08:	4770      	bx	lr

08002b0a <zcl_reporting_config_attr_defaults>:
 8002b0a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b0c:	0004      	movs	r4, r0
 8002b0e:	000d      	movs	r5, r1
 8002b10:	0016      	movs	r6, r2
 8002b12:	8aa8      	ldrh	r0, [r5, #20]
 8002b14:	f8ad 0002 	strh.w	r0, [sp, #2]
 8002b18:	8ae8      	ldrh	r0, [r5, #22]
 8002b1a:	f8ad 0000 	strh.w	r0, [sp]
 8002b1e:	4669      	mov	r1, sp
 8002b20:	f10d 0002 	add.w	r0, sp, #2
 8002b24:	f7ff ffdc 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 8002b28:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8002b2c:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002b2e:	f8bd 0000 	ldrh.w	r0, [sp]
 8002b32:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002b34:	2200      	movs	r2, #0
 8002b36:	0031      	movs	r1, r6
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f000 f801 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002b3e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002b40 <zcl_reporting_reset_defaults>:
 8002b40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b42:	0004      	movs	r4, r0
 8002b44:	000d      	movs	r5, r1
 8002b46:	0016      	movs	r6, r2
 8002b48:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8002b4a:	8428      	strh	r0, [r5, #32]
 8002b4c:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8002b4e:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b50:	8c28      	ldrh	r0, [r5, #32]
 8002b52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b56:	4288      	cmp	r0, r1
 8002b58:	d106      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b5a:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d103      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b60:	203d      	movs	r0, #61	@ 0x3d
 8002b62:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b64:	2000      	movs	r0, #0
 8002b66:	8428      	strh	r0, [r5, #32]

08002b68 <??zcl_reporting_reset_defaults_0>:
 8002b68:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8002b6c:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8002b70:	0020      	movs	r0, r4
 8002b72:	f010 faa8 	bl	80130c6 <ZbZclUptime>
 8002b76:	6128      	str	r0, [r5, #16]
 8002b78:	0030      	movs	r0, r6
 8002b7a:	b2c0      	uxtb	r0, r0
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d013      	beq.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002b80:	2301      	movs	r3, #1
 8002b82:	466a      	mov	r2, sp
 8002b84:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002b88:	0020      	movs	r0, r4
 8002b8a:	f010 fa87 	bl	801309c <ZbNwkGet>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d002      	beq.n	8002b98 <??zcl_reporting_reset_defaults_2>
 8002b92:	2000      	movs	r0, #0
 8002b94:	f88d 0000 	strb.w	r0, [sp]

08002b98 <??zcl_reporting_reset_defaults_2>:
 8002b98:	f89d 0000 	ldrb.w	r0, [sp]
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d103      	bne.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002ba0:	21c8      	movs	r1, #200	@ 0xc8
 8002ba2:	68a8      	ldr	r0, [r5, #8]
 8002ba4:	f7ff fae9 	bl	800217a <zcl_report_kick>

08002ba8 <??zcl_reporting_reset_defaults_1>:
 8002ba8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002baa <zcl_reporting_epsilon_default>:
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	0004      	movs	r4, r0
 8002bae:	000d      	movs	r5, r1
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	b2c0      	uxtb	r0, r0
 8002bb4:	2838      	cmp	r0, #56	@ 0x38
 8002bb6:	db09      	blt.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bb8:	0028      	movs	r0, r5
 8002bba:	b2c0      	uxtb	r0, r0
 8002bbc:	283b      	cmp	r0, #59	@ 0x3b
 8002bbe:	da05      	bge.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8003794 <??DataTable11>
 8002bc6:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002bca:	e00f      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002bcc <??zcl_reporting_epsilon_default_0>:
 8002bcc:	0028      	movs	r0, r5
 8002bce:	b2c0      	uxtb	r0, r0
 8002bd0:	f7fe fae2 	bl	8001198 <ZbZclAttrIsAnalog>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d005      	beq.n	8002be4 <??zcl_reporting_epsilon_default_2>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8003794 <??DataTable11>
 8002bde:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002be2:	e003      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002be4 <??zcl_reporting_epsilon_default_2>:
 8002be4:	2000      	movs	r0, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002bec <??zcl_reporting_epsilon_default_1>:
 8002bec:	bd31      	pop	{r0, r4, r5, pc}
	...

08002bf0 <??DataTable9>:
 8002bf0:	1ee5 0800                                   ....

08002bf4 <??DataTable9_1>:
 8002bf4:	0000 0000                                   ....

08002bf8 <??DataTable9_2>:
 8002bf8:	0014 2000                                   ... 

08002bfc <??DataTable9_3>:
 8002bfc:	1ed1 0800                                   ....

08002c00 <??DataTable9_4>:
 8002c00:	ee80 0036                                   ..6.

08002c04 <zcl_reporting_epsilon_check>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	0004      	movs	r4, r0
 8002c08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c0c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8002c0e:	4281      	cmp	r1, r0
 8002c10:	d101      	bne.n	8002c16 <??zcl_reporting_epsilon_check_0>
 8002c12:	2001      	movs	r0, #1
 8002c14:	e049      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c16 <??zcl_reporting_epsilon_check_0>:
 8002c16:	8c21      	ldrh	r1, [r4, #32]
 8002c18:	4281      	cmp	r1, r0
 8002c1a:	d104      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c1c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d101      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c22:	2001      	movs	r0, #1
 8002c24:	e041      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c26 <??zcl_reporting_epsilon_check_2>:
 8002c26:	7ba0      	ldrb	r0, [r4, #14]
 8002c28:	2838      	cmp	r0, #56	@ 0x38
 8002c2a:	db1d      	blt.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c2c:	7ba0      	ldrb	r0, [r4, #14]
 8002c2e:	283b      	cmp	r0, #59	@ 0x3b
 8002c30:	da1a      	bge.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c32:	8c20      	ldrh	r0, [r4, #32]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d108      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c38:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f005 fd36 	bl	80086b0 <__aeabi_cdcmpeq>
 8002c44:	d101      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c46:	2000      	movs	r0, #0
 8002c48:	e02f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c4a <??zcl_reporting_epsilon_check_4>:
 8002c4a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2300      	movs	r3, #0
 8002c52:	f005 fd2d 	bl	80086b0 <__aeabi_cdcmpeq>
 8002c56:	d205      	bcs.n	8002c64 <??zcl_reporting_epsilon_check_5>
 8002c58:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c5c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002c60:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002c64 <??zcl_reporting_epsilon_check_5>:
 8002c64:	2001      	movs	r0, #1
 8002c66:	e020      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c68 <??zcl_reporting_epsilon_check_3>:
 8002c68:	7ba0      	ldrb	r0, [r4, #14]
 8002c6a:	f7fe fa95 	bl	8001198 <ZbZclAttrIsAnalog>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d01a      	beq.n	8002ca8 <??zcl_reporting_epsilon_check_6>
 8002c72:	8c20      	ldrh	r0, [r4, #32]
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d108      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c78:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f005 fd16 	bl	80086b0 <__aeabi_cdcmpeq>
 8002c84:	d101      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c86:	2000      	movs	r0, #0
 8002c88:	e00f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c8a <??zcl_reporting_epsilon_check_7>:
 8002c8a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f005 fd0d 	bl	80086b0 <__aeabi_cdcmpeq>
 8002c96:	d205      	bcs.n	8002ca4 <??zcl_reporting_epsilon_check_8>
 8002c98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c9c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002ca0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002ca4 <??zcl_reporting_epsilon_check_8>:
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002ca8 <??zcl_reporting_epsilon_check_6>:
 8002ca8:	2001      	movs	r0, #1

08002caa <??zcl_reporting_epsilon_check_1>:
 8002caa:	bd10      	pop	{r4, pc}

08002cac <zcl_reporting_create_default_reports>:
 8002cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb0:	b090      	sub	sp, #64	@ 0x40
 8002cb2:	0005      	movs	r5, r0
 8002cb4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002cb6:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002cba:	4288      	cmp	r0, r1
 8002cbc:	d001      	beq.n	8002cc2 <??zcl_reporting_create_default_reports_0>
 8002cbe:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8002cc0:	e000      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002cc2 <??zcl_reporting_create_default_reports_0>:
 8002cc2:	2400      	movs	r4, #0

08002cc4 <??zcl_reporting_create_default_reports_1>:
 8002cc4:	2c00      	cmp	r4, #0
 8002cc6:	d054      	beq.n	8002d72 <??zcl_reporting_create_default_reports_2>
 8002cc8:	0026      	movs	r6, r4
 8002cca:	68b0      	ldr	r0, [r6, #8]
 8002ccc:	7900      	ldrb	r0, [r0, #4]
 8002cce:	0780      	lsls	r0, r0, #30
 8002cd0:	d546      	bpl.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002cd2 <??zcl_reporting_create_default_reports_4>:
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	68b0      	ldr	r0, [r6, #8]
 8002cd6:	8801      	ldrh	r1, [r0, #0]
 8002cd8:	0028      	movs	r0, r5
 8002cda:	f7ff fda4 	bl	8002826 <zcl_reporting_find>
 8002cde:	9001      	str	r0, [sp, #4]
 8002ce0:	9801      	ldr	r0, [sp, #4]
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d13c      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002ce6 <??zcl_reporting_create_default_reports_5>:
 8002ce6:	2738      	movs	r7, #56	@ 0x38
 8002ce8:	f05f 0800 	movs.w	r8, #0
 8002cec:	f10d 0908 	add.w	r9, sp, #8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	0039      	movs	r1, r7
 8002cf4:	4648      	mov	r0, r9
 8002cf6:	f005 f80f 	bl	8007d18 <__aeabi_memset>
 8002cfa:	68b0      	ldr	r0, [r6, #8]
 8002cfc:	8800      	ldrh	r0, [r0, #0]
 8002cfe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8002d02:	9504      	str	r5, [sp, #16]
 8002d04:	68b0      	ldr	r0, [r6, #8]
 8002d06:	7880      	ldrb	r0, [r0, #2]
 8002d08:	f88d 0016 	strb.w	r0, [sp, #22]
 8002d0c:	68b0      	ldr	r0, [r6, #8]
 8002d0e:	7881      	ldrb	r1, [r0, #2]
 8002d10:	a802      	add	r0, sp, #8
 8002d12:	f7ff ff4a 	bl	8002baa <zcl_reporting_epsilon_default>
 8002d16:	f05f 0908 	movs.w	r9, #8
 8002d1a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8002d1e:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8002d22:	464a      	mov	r2, r9
 8002d24:	4651      	mov	r1, sl
 8002d26:	4658      	mov	r0, fp
 8002d28:	f014 fa8d 	bl	8017246 <__aeabi_memcpy>
 8002d2c:	aa02      	add	r2, sp, #8
 8002d2e:	0031      	movs	r1, r6
 8002d30:	68a8      	ldr	r0, [r5, #8]
 8002d32:	f7ff feea 	bl	8002b0a <zcl_reporting_config_attr_defaults>
 8002d36:	a902      	add	r1, sp, #8
 8002d38:	0028      	movs	r0, r5
 8002d3a:	f7ff fdc6 	bl	80028ca <zcl_reporting_save_curr_val>
 8002d3e:	f88d 0000 	strb.w	r0, [sp]
 8002d42:	f89d 0000 	ldrb.w	r0, [sp]
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d002      	beq.n	8002d50 <??zcl_reporting_create_default_reports_6>
 8002d4a:	f89d 0000 	ldrb.w	r0, [sp]
 8002d4e:	e011      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d50 <??zcl_reporting_create_default_reports_6>:
 8002d50:	a902      	add	r1, sp, #8
 8002d52:	0028      	movs	r0, r5
 8002d54:	f7ff fe2c 	bl	80029b0 <zcl_reporting_create_new>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d101      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>
 8002d5c:	2089      	movs	r0, #137	@ 0x89
 8002d5e:	e009      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d60 <??zcl_reporting_create_default_reports_3>:
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002d66:	4288      	cmp	r0, r1
 8002d68:	d001      	beq.n	8002d6e <??zcl_reporting_create_default_reports_8>
 8002d6a:	6824      	ldr	r4, [r4, #0]
 8002d6c:	e7aa      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d6e <??zcl_reporting_create_default_reports_8>:
 8002d6e:	2400      	movs	r4, #0
 8002d70:	e7a8      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d72 <??zcl_reporting_create_default_reports_2>:
 8002d72:	2000      	movs	r0, #0

08002d74 <??zcl_reporting_create_default_reports_7>:
 8002d74:	b011      	add	sp, #68	@ 0x44
 8002d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d7a <ZbZclHandleConfigReport>:
 8002d7a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7e:	b0c8      	sub	sp, #288	@ 0x120
 8002d80:	0004      	movs	r4, r0
 8002d82:	0015      	movs	r5, r2
 8002d84:	68a0      	ldr	r0, [r4, #8]
 8002d86:	9001      	str	r0, [sp, #4]
 8002d88:	2700      	movs	r7, #0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f88d 0003 	strb.w	r0, [sp, #3]
 8002d90:	2600      	movs	r6, #0
 8002d92:	2000      	movs	r0, #0
 8002d94:	f88d 0002 	strb.w	r0, [sp, #2]
 8002d98:	f05f 0808 	movs.w	r8, #8
 8002d9c:	f05f 0900 	movs.w	r9, #0
 8002da0:	f10d 0a0c 	add.w	sl, sp, #12
 8002da4:	464a      	mov	r2, r9
 8002da6:	4641      	mov	r1, r8
 8002da8:	4650      	mov	r0, sl
 8002daa:	f004 ffb5 	bl	8007d18 <__aeabi_memset>
 8002dae:	2000      	movs	r0, #0
 8002db0:	f88d 000c 	strb.w	r0, [sp, #12]
 8002db4:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002db6:	7840      	ldrb	r0, [r0, #1]
 8002db8:	f88d 000d 	strb.w	r0, [sp, #13]
 8002dbc:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dbe:	7880      	ldrb	r0, [r0, #2]
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d003      	beq.n	8002dcc <??ZbZclHandleConfigReport_0>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f88d 000e 	strb.w	r0, [sp, #14]
 8002dca:	e002      	b.n	8002dd2 <??ZbZclHandleConfigReport_1>

08002dcc <??ZbZclHandleConfigReport_0>:
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f88d 000e 	strb.w	r0, [sp, #14]

08002dd2 <??ZbZclHandleConfigReport_1>:
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f88d 000f 	strb.w	r0, [sp, #15]
 8002dd8:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dda:	8880      	ldrh	r0, [r0, #4]
 8002ddc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8002de0:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002de2:	7980      	ldrb	r0, [r0, #6]
 8002de4:	f88d 0012 	strb.w	r0, [sp, #18]
 8002de8:	2007      	movs	r0, #7
 8002dea:	f88d 0013 	strb.w	r0, [sp, #19]
 8002dee:	2205      	movs	r2, #5
 8002df0:	a916      	add	r1, sp, #88	@ 0x58
 8002df2:	a803      	add	r0, sp, #12
 8002df4:	f003 fbca 	bl	800658c <ZbZclAppendHeader>
 8002df8:	9005      	str	r0, [sp, #20]
 8002dfa:	9805      	ldr	r0, [sp, #20]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d506      	bpl.n	8002e0e <??ZbZclHandleConfigReport_2>
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e04:	0029      	movs	r1, r5
 8002e06:	0020      	movs	r0, r4
 8002e08:	f010 fa8a 	bl	8013320 <ZbZclSendDefaultResponse>
 8002e0c:	e236      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e0e <??ZbZclHandleConfigReport_2>:
 8002e0e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e10:	4286      	cmp	r6, r0
 8002e12:	f080 81b4 	bcs.w	800317e <??ZbZclHandleConfigReport_4>
 8002e16:	f05f 0900 	movs.w	r9, #0
 8002e1a:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8002e1e:	f05f 0a00 	movs.w	sl, #0
 8002e22:	f10d 0b18 	add.w	fp, sp, #24
 8002e26:	4652      	mov	r2, sl
 8002e28:	4641      	mov	r1, r8
 8002e2a:	4658      	mov	r0, fp
 8002e2c:	f004 ff74 	bl	8007d18 <__aeabi_memset>
 8002e30:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e32:	1cf1      	adds	r1, r6, #3
 8002e34:	4288      	cmp	r0, r1
 8002e36:	d206      	bcs.n	8002e46 <??ZbZclHandleConfigReport_5>
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e3c:	0029      	movs	r1, r5
 8002e3e:	0020      	movs	r0, r4
 8002e40:	f010 fa6e 	bl	8013320 <ZbZclSendDefaultResponse>
 8002e44:	e21a      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e46 <??ZbZclHandleConfigReport_5>:
 8002e46:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e48:	5d80      	ldrb	r0, [r0, r6]
 8002e4a:	f88d 0001 	strb.w	r0, [sp, #1]
 8002e4e:	1c76      	adds	r6, r6, #1
 8002e50:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e52:	4430      	add	r0, r6
 8002e54:	f004 f935 	bl	80070c2 <pletoh16>
 8002e58:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8002e5c:	1cb6      	adds	r6, r6, #2
 8002e5e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8159 	bne.w	800311a <??ZbZclHandleConfigReport_6>
 8002e68:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e6a:	1cb1      	adds	r1, r6, #2
 8002e6c:	4288      	cmp	r0, r1
 8002e6e:	d206      	bcs.n	8002e7e <??ZbZclHandleConfigReport_7>
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e74:	0029      	movs	r1, r5
 8002e76:	0020      	movs	r0, r4
 8002e78:	f010 fa52 	bl	8013320 <ZbZclSendDefaultResponse>
 8002e7c:	e1fe      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e7e <??ZbZclHandleConfigReport_7>:
 8002e7e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e80:	1c71      	adds	r1, r6, #1
 8002e82:	4288      	cmp	r0, r1
 8002e84:	f0c0 808f 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e88 <??ZbZclHandleConfigReport_9>:
 8002e88:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e8a:	5d80      	ldrb	r0, [r0, r6]
 8002e8c:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8002e90:	1c76      	adds	r6, r6, #1
 8002e92:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e94:	1cb1      	adds	r1, r6, #2
 8002e96:	4288      	cmp	r0, r1
 8002e98:	f0c0 8085 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e9c <??ZbZclHandleConfigReport_10>:
 8002e9c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e9e:	4430      	add	r0, r6
 8002ea0:	f004 f90f 	bl	80070c2 <pletoh16>
 8002ea4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8002ea8:	1cb6      	adds	r6, r6, #2
 8002eaa:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002eac:	1cb1      	adds	r1, r6, #2
 8002eae:	4288      	cmp	r0, r1
 8002eb0:	d379      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002eb2 <??ZbZclHandleConfigReport_11>:
 8002eb2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002eb4:	4430      	add	r0, r6
 8002eb6:	f004 f904 	bl	80070c2 <pletoh16>
 8002eba:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8002ebe:	1cb6      	adds	r6, r6, #2
 8002ec0:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002ec2:	1c71      	adds	r1, r6, #1
 8002ec4:	4288      	cmp	r0, r1
 8002ec6:	d36e      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002ec8 <??ZbZclHandleConfigReport_12>:
 8002ec8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ecc:	2848      	cmp	r0, #72	@ 0x48
 8002ece:	d00b      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ed4:	284c      	cmp	r0, #76	@ 0x4c
 8002ed6:	d007      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002edc:	2850      	cmp	r0, #80	@ 0x50
 8002ede:	d003      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ee0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ee4:	2851      	cmp	r0, #81	@ 0x51
 8002ee6:	d103      	bne.n	8002ef0 <??ZbZclHandleConfigReport_14>

08002ee8 <??ZbZclHandleConfigReport_13>:
 8002ee8:	208c      	movs	r0, #140	@ 0x8c
 8002eea:	f88d 0000 	strb.w	r0, [sp]
 8002eee:	e12e      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002ef0 <??ZbZclHandleConfigReport_14>:
 8002ef0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ef4:	2838      	cmp	r0, #56	@ 0x38
 8002ef6:	db29      	blt.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002ef8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002efc:	283b      	cmp	r0, #59	@ 0x3b
 8002efe:	da25      	bge.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002f00:	2300      	movs	r3, #0
 8002f02:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f04:	1b92      	subs	r2, r2, r6
 8002f06:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f08:	eb00 0106 	add.w	r1, r0, r6
 8002f0c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f10:	f7fe f891 	bl	8001036 <ZbZclAttrParseLength>
 8002f14:	9002      	str	r0, [sp, #8]
 8002f16:	9802      	ldr	r0, [sp, #8]
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d503      	bpl.n	8002f24 <??ZbZclHandleConfigReport_17>
 8002f1c:	2085      	movs	r0, #133	@ 0x85
 8002f1e:	f88d 0000 	strb.w	r0, [sp]
 8002f22:	e114      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f24 <??ZbZclHandleConfigReport_17>:
 8002f24:	466a      	mov	r2, sp
 8002f26:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f28:	eb00 0106 	add.w	r1, r0, r6
 8002f2c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f30:	f004 faa7 	bl	8007482 <ZbZclParseFloat>
 8002f34:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8002f38:	f89d 0000 	ldrb.w	r0, [sp]
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f040 8106 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f42 <??ZbZclHandleConfigReport_18>:
 8002f42:	9802      	ldr	r0, [sp, #8]
 8002f44:	1986      	adds	r6, r0, r6
 8002f46:	2001      	movs	r0, #1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	e02c      	b.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002f4c <??ZbZclHandleConfigReport_16>:
 8002f4c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f50:	f7fe f922 	bl	8001198 <ZbZclAttrIsAnalog>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d026      	beq.n	8002fa6 <??ZbZclHandleConfigReport_19>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f5c:	1b92      	subs	r2, r2, r6
 8002f5e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f60:	eb00 0106 	add.w	r1, r0, r6
 8002f64:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f68:	f7fe f865 	bl	8001036 <ZbZclAttrParseLength>
 8002f6c:	9002      	str	r0, [sp, #8]
 8002f6e:	9802      	ldr	r0, [sp, #8]
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d503      	bpl.n	8002f7c <??ZbZclHandleConfigReport_20>
 8002f74:	2085      	movs	r0, #133	@ 0x85
 8002f76:	f88d 0000 	strb.w	r0, [sp]
 8002f7a:	e0e8      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f7c <??ZbZclHandleConfigReport_20>:
 8002f7c:	466a      	mov	r2, sp
 8002f7e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f80:	eb00 0106 	add.w	r1, r0, r6
 8002f84:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f88:	f7fe fa04 	bl	8001394 <ZbZclParseInteger>
 8002f8c:	f005 f902 	bl	8008194 <__aeabi_l2d>
 8002f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002f94:	f89d 0000 	ldrb.w	r0, [sp]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f040 80d8 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f9e <??ZbZclHandleConfigReport_21>:
 8002f9e:	9802      	ldr	r0, [sp, #8]
 8002fa0:	1986      	adds	r6, r0, r6
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	4681      	mov	r9, r0

08002fa6 <??ZbZclHandleConfigReport_19>:
 8002fa6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7fd f917 	bl	80001de <ZbZclAttrFind>
 8002fb0:	4682      	mov	sl, r0
 8002fb2:	f1ba 0f00 	cmp.w	sl, #0
 8002fb6:	d103      	bne.n	8002fc0 <??ZbZclHandleConfigReport_22>
 8002fb8:	2086      	movs	r0, #134	@ 0x86
 8002fba:	f88d 0000 	strb.w	r0, [sp]
 8002fbe:	e0c6      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fc0 <??ZbZclHandleConfigReport_22>:
 8002fc0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fc4:	8880      	ldrh	r0, [r0, #4]
 8002fc6:	0400      	lsls	r0, r0, #16
 8002fc8:	d503      	bpl.n	8002fd2 <??ZbZclHandleConfigReport_23>
 8002fca:	2086      	movs	r0, #134	@ 0x86
 8002fcc:	f88d 0000 	strb.w	r0, [sp]
 8002fd0:	e0bd      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fd2 <??ZbZclHandleConfigReport_23>:
 8002fd2:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fd6:	7900      	ldrb	r0, [r0, #4]
 8002fd8:	0780      	lsls	r0, r0, #30
 8002fda:	d403      	bmi.n	8002fe4 <??ZbZclHandleConfigReport_24>
 8002fdc:	208c      	movs	r0, #140	@ 0x8c
 8002fde:	f88d 0000 	strb.w	r0, [sp]
 8002fe2:	e0b4      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fe4 <??ZbZclHandleConfigReport_24>:
 8002fe4:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8002fe8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8002fec:	4558      	cmp	r0, fp
 8002fee:	d101      	bne.n	8002ff4 <??ZbZclHandleConfigReport_25>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4681      	mov	r9, r0

08002ff4 <??ZbZclHandleConfigReport_25>:
 8002ff4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ff8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	f7ff fc12 	bl	8002826 <zcl_reporting_find>
 8003002:	4680      	mov	r8, r0
 8003004:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003008:	4558      	cmp	r0, fp
 800300a:	d11b      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 800300c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003010:	2800      	cmp	r0, #0
 8003012:	d117      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 8003014:	2000      	movs	r0, #0
 8003016:	4681      	mov	r9, r0
 8003018:	f1b8 0f00 	cmp.w	r8, #0
 800301c:	d00d      	beq.n	800303a <??ZbZclHandleConfigReport_27>
 800301e:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 8003022:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003026:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 800302a:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 800302e:	2200      	movs	r2, #0
 8003030:	a906      	add	r1, sp, #24
 8003032:	9801      	ldr	r0, [sp, #4]
 8003034:	f7ff fd84 	bl	8002b40 <zcl_reporting_reset_defaults>
 8003038:	e004      	b.n	8003044 <??ZbZclHandleConfigReport_26>

0800303a <??ZbZclHandleConfigReport_27>:
 800303a:	aa06      	add	r2, sp, #24
 800303c:	4651      	mov	r1, sl
 800303e:	9801      	ldr	r0, [sp, #4]
 8003040:	f7ff fd63 	bl	8002b0a <zcl_reporting_config_attr_defaults>

08003044 <??ZbZclHandleConfigReport_26>:
 8003044:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003048:	f8da 1008 	ldr.w	r1, [sl, #8]
 800304c:	7889      	ldrb	r1, [r1, #2]
 800304e:	4288      	cmp	r0, r1
 8003050:	d003      	beq.n	800305a <??ZbZclHandleConfigReport_28>
 8003052:	208d      	movs	r0, #141	@ 0x8d
 8003054:	f88d 0000 	strb.w	r0, [sp]
 8003058:	e079      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800305a <??ZbZclHandleConfigReport_28>:
 800305a:	f1b8 0f00 	cmp.w	r8, #0
 800305e:	d021      	beq.n	80030a4 <??ZbZclHandleConfigReport_29>
 8003060:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003064:	f8a8 0020 	strh.w	r0, [r8, #32]
 8003068:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 800306c:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8003070:	4648      	mov	r0, r9
 8003072:	b2c0      	uxtb	r0, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	d00c      	beq.n	8003092 <??ZbZclHandleConfigReport_30>
 8003078:	a806      	add	r0, sp, #24
 800307a:	f7ff fdc3 	bl	8002c04 <zcl_reporting_epsilon_check>
 800307e:	2800      	cmp	r0, #0
 8003080:	d103      	bne.n	800308a <??ZbZclHandleConfigReport_31>
 8003082:	2085      	movs	r0, #133	@ 0x85
 8003084:	f88d 0000 	strb.w	r0, [sp]
 8003088:	e061      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800308a <??ZbZclHandleConfigReport_31>:
 800308a:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 800308e:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

08003092 <??ZbZclHandleConfigReport_30>:
 8003092:	9801      	ldr	r0, [sp, #4]
 8003094:	f010 f817 	bl	80130c6 <ZbZclUptime>
 8003098:	f8c8 0010 	str.w	r0, [r8, #16]
 800309c:	2001      	movs	r0, #1
 800309e:	f88d 0002 	strb.w	r0, [sp, #2]
 80030a2:	e6b4      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

080030a4 <??ZbZclHandleConfigReport_29>:
 80030a4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80030a8:	4558      	cmp	r0, fp
 80030aa:	f43f aeb0 	beq.w	8002e0e <??ZbZclHandleConfigReport_2>

080030ae <??ZbZclHandleConfigReport_32>:
 80030ae:	9408      	str	r4, [sp, #32]
 80030b0:	4648      	mov	r0, r9
 80030b2:	b2c0      	uxtb	r0, r0
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d008      	beq.n	80030ca <??ZbZclHandleConfigReport_33>
 80030b8:	a806      	add	r0, sp, #24
 80030ba:	f7ff fda3 	bl	8002c04 <zcl_reporting_epsilon_check>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d108      	bne.n	80030d4 <??ZbZclHandleConfigReport_34>
 80030c2:	2085      	movs	r0, #133	@ 0x85
 80030c4:	f88d 0000 	strb.w	r0, [sp]
 80030c8:	e041      	b.n	800314e <??ZbZclHandleConfigReport_15>

080030ca <??ZbZclHandleConfigReport_33>:
 80030ca:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 80030ce:	a806      	add	r0, sp, #24
 80030d0:	f7ff fd6b 	bl	8002baa <zcl_reporting_epsilon_default>

080030d4 <??ZbZclHandleConfigReport_34>:
 80030d4:	2008      	movs	r0, #8
 80030d6:	9015      	str	r0, [sp, #84]	@ 0x54
 80030d8:	a810      	add	r0, sp, #64	@ 0x40
 80030da:	9014      	str	r0, [sp, #80]	@ 0x50
 80030dc:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80030e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80030e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80030e4:	4658      	mov	r0, fp
 80030e6:	f014 f8ae 	bl	8017246 <__aeabi_memcpy>
 80030ea:	a906      	add	r1, sp, #24
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7ff fbec 	bl	80028ca <zcl_reporting_save_curr_val>
 80030f2:	f88d 0000 	strb.w	r0, [sp]
 80030f6:	f89d 0000 	ldrb.w	r0, [sp]
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d127      	bne.n	800314e <??ZbZclHandleConfigReport_15>

080030fe <??ZbZclHandleConfigReport_35>:
 80030fe:	a906      	add	r1, sp, #24
 8003100:	0020      	movs	r0, r4
 8003102:	f7ff fc55 	bl	80029b0 <zcl_reporting_create_new>
 8003106:	2800      	cmp	r0, #0
 8003108:	d103      	bne.n	8003112 <??ZbZclHandleConfigReport_36>
 800310a:	2189      	movs	r1, #137	@ 0x89
 800310c:	f88d 1000 	strb.w	r1, [sp]
 8003110:	e01d      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003112 <??ZbZclHandleConfigReport_36>:
 8003112:	2101      	movs	r1, #1
 8003114:	f88d 1002 	strb.w	r1, [sp, #2]
 8003118:	e679      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800311a <??ZbZclHandleConfigReport_6>:
 800311a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800311e:	2801      	cmp	r0, #1
 8003120:	d10e      	bne.n	8003140 <??ZbZclHandleConfigReport_37>
 8003122:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003124:	1cb1      	adds	r1, r6, #2
 8003126:	4288      	cmp	r0, r1
 8003128:	d206      	bcs.n	8003138 <??ZbZclHandleConfigReport_38>
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800312e:	0029      	movs	r1, r5
 8003130:	0020      	movs	r0, r4
 8003132:	f010 f8f5 	bl	8013320 <ZbZclSendDefaultResponse>
 8003136:	e0a1      	b.n	800327c <??ZbZclHandleConfigReport_3>

08003138 <??ZbZclHandleConfigReport_38>:
 8003138:	208c      	movs	r0, #140	@ 0x8c
 800313a:	f88d 0000 	strb.w	r0, [sp]
 800313e:	e006      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003140 <??ZbZclHandleConfigReport_37>:
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003144:	0029      	movs	r1, r5
 8003146:	0020      	movs	r0, r4
 8003148:	f010 f8ea 	bl	8013320 <ZbZclSendDefaultResponse>
 800314c:	e096      	b.n	800327c <??ZbZclHandleConfigReport_3>

0800314e <??ZbZclHandleConfigReport_15>:
 800314e:	f89d 0000 	ldrb.w	r0, [sp]
 8003152:	f88d 0003 	strb.w	r0, [sp, #3]
 8003156:	1d38      	adds	r0, r7, #4
 8003158:	2837      	cmp	r0, #55	@ 0x37
 800315a:	d210      	bcs.n	800317e <??ZbZclHandleConfigReport_4>

0800315c <??ZbZclHandleConfigReport_39>:
 800315c:	a83a      	add	r0, sp, #232	@ 0xe8
 800315e:	f89d 1000 	ldrb.w	r1, [sp]
 8003162:	55c1      	strb	r1, [r0, r7]
 8003164:	1c7f      	adds	r7, r7, #1
 8003166:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800316a:	55c1      	strb	r1, [r0, r7]
 800316c:	1c7f      	adds	r7, r7, #1
 800316e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003172:	a83a      	add	r0, sp, #232	@ 0xe8
 8003174:	4438      	add	r0, r7
 8003176:	f003 fff0 	bl	800715a <putle16>
 800317a:	1cbf      	adds	r7, r7, #2
 800317c:	e647      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800317e <??ZbZclHandleConfigReport_4>:
 800317e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003182:	2800      	cmp	r0, #0
 8003184:	d105      	bne.n	8003192 <??ZbZclHandleConfigReport_40>
 8003186:	2000      	movs	r0, #0
 8003188:	2100      	movs	r1, #0
 800318a:	aa3a      	add	r2, sp, #232	@ 0xe8
 800318c:	5411      	strb	r1, [r2, r0]
 800318e:	1c40      	adds	r0, r0, #1
 8003190:	0007      	movs	r7, r0

08003192 <??ZbZclHandleConfigReport_40>:
 8003192:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003196:	2800      	cmp	r0, #0
 8003198:	d127      	bne.n	80031ea <??ZbZclHandleConfigReport_41>
 800319a:	f05f 0920 	movs.w	r9, #32
 800319e:	f05f 0800 	movs.w	r8, #0
 80031a2:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80031a6:	4642      	mov	r2, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	4650      	mov	r0, sl
 80031ac:	f004 fdb4 	bl	8007d18 <__aeabi_memset>
 80031b0:	9801      	ldr	r0, [sp, #4]
 80031b2:	f00f faff 	bl	80127b4 <ZbExtendedAddress>
 80031b6:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80031ba:	8868      	ldrh	r0, [r5, #2]
 80031bc:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 80031c0:	89a0      	ldrh	r0, [r4, #12]
 80031c2:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 80031c6:	2003      	movs	r0, #3
 80031c8:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80031cc:	8a68      	ldrh	r0, [r5, #18]
 80031ce:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 80031d2:	8ae8      	ldrh	r0, [r5, #22]
 80031d4:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 80031d8:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80031dc:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 80031e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80031e2:	a918      	add	r1, sp, #96	@ 0x60
 80031e4:	9801      	ldr	r0, [sp, #4]
 80031e6:	f00f fd00 	bl	8012bea <ZbApsmeBindReq>

080031ea <??ZbZclHandleConfigReport_41>:
 80031ea:	2200      	movs	r2, #0
 80031ec:	a924      	add	r1, sp, #144	@ 0x90
 80031ee:	0020      	movs	r0, r4
 80031f0:	f000 fda3 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 80031f4:	a824      	add	r0, sp, #144	@ 0x90
 80031f6:	f115 0110 	adds.w	r1, r5, #16
 80031fa:	2210      	movs	r2, #16
 80031fc:	f014 f823 	bl	8017246 <__aeabi_memcpy>
 8003200:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003204:	f000 fd31 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8003208:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 800320c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8003210:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8003214:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8003218:	2001      	movs	r0, #1
 800321a:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 800321e:	2000      	movs	r0, #0
 8003220:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 8003224:	a816      	add	r0, sp, #88	@ 0x58
 8003226:	9020      	str	r0, [sp, #128]	@ 0x80
 8003228:	a820      	add	r0, sp, #128	@ 0x80
 800322a:	9905      	ldr	r1, [sp, #20]
 800322c:	6041      	str	r1, [r0, #4]
 800322e:	a93a      	add	r1, sp, #232	@ 0xe8
 8003230:	6081      	str	r1, [r0, #8]
 8003232:	60c7      	str	r7, [r0, #12]
 8003234:	a820      	add	r0, sp, #128	@ 0x80
 8003236:	902a      	str	r0, [sp, #168]	@ 0xa8
 8003238:	2002      	movs	r0, #2
 800323a:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 800323e:	2300      	movs	r3, #0
 8003240:	2200      	movs	r2, #0
 8003242:	a924      	add	r1, sp, #144	@ 0x90
 8003244:	9801      	ldr	r0, [sp, #4]
 8003246:	f00f fbcb 	bl	80129e0 <ZbApsdeDataReqCallback>
 800324a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800324e:	2800      	cmp	r0, #0
 8003250:	d014      	beq.n	800327c <??ZbZclHandleConfigReport_3>
 8003252:	2301      	movs	r3, #1
 8003254:	f10d 0201 	add.w	r2, sp, #1
 8003258:	f240 410c 	movw	r1, #1036	@ 0x40c
 800325c:	9801      	ldr	r0, [sp, #4]
 800325e:	f00f ff1d 	bl	801309c <ZbNwkGet>
 8003262:	2800      	cmp	r0, #0
 8003264:	d002      	beq.n	800326c <??ZbZclHandleConfigReport_43>
 8003266:	2000      	movs	r0, #0
 8003268:	f88d 0001 	strb.w	r0, [sp, #1]

0800326c <??ZbZclHandleConfigReport_43>:
 800326c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003270:	2800      	cmp	r0, #0
 8003272:	d103      	bne.n	800327c <??ZbZclHandleConfigReport_3>
 8003274:	21c8      	movs	r1, #200	@ 0xc8
 8003276:	0020      	movs	r0, r4
 8003278:	f7fe ff7f 	bl	800217a <zcl_report_kick>

0800327c <??ZbZclHandleConfigReport_3>:
 800327c:	b049      	add	sp, #292	@ 0x124
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003282 <ZbZclHandleReadReport>:
 8003282:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	b09a      	sub	sp, #104	@ 0x68
 8003288:	4680      	mov	r8, r0
 800328a:	4691      	mov	r9, r2
 800328c:	f05f 0a00 	movs.w	sl, #0
 8003290:	2300      	movs	r3, #0
 8003292:	a28d      	add	r2, pc, #564	@ (adr r2, 80034c8 <??DataTable10>)
 8003294:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8003298:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800329c:	f010 f9c8 	bl	8013630 <zb_heap_alloc>
 80032a0:	0007      	movs	r7, r0
 80032a2:	2f00      	cmp	r7, #0
 80032a4:	d106      	bne.n	80032b4 <??ZbZclHandleReadReport_0>
 80032a6:	2389      	movs	r3, #137	@ 0x89
 80032a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80032aa:	4649      	mov	r1, r9
 80032ac:	4640      	mov	r0, r8
 80032ae:	f010 f837 	bl	8013320 <ZbZclSendDefaultResponse>
 80032b2:	e105      	b.n	80034c0 <??ZbZclHandleReadReport_1>

080032b4 <??ZbZclHandleReadReport_0>:
 80032b4:	2408      	movs	r4, #8
 80032b6:	2500      	movs	r5, #0
 80032b8:	ae01      	add	r6, sp, #4
 80032ba:	002a      	movs	r2, r5
 80032bc:	0021      	movs	r1, r4
 80032be:	0030      	movs	r0, r6
 80032c0:	f004 fd2a 	bl	8007d18 <__aeabi_memset>
 80032c4:	2000      	movs	r0, #0
 80032c6:	f88d 0004 	strb.w	r0, [sp, #4]
 80032ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032cc:	7840      	ldrb	r0, [r0, #1]
 80032ce:	f88d 0005 	strb.w	r0, [sp, #5]
 80032d2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032d4:	7880      	ldrb	r0, [r0, #2]
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d103      	bne.n	80032e2 <??ZbZclHandleReadReport_2>
 80032da:	2001      	movs	r0, #1
 80032dc:	f88d 0006 	strb.w	r0, [sp, #6]
 80032e0:	e002      	b.n	80032e8 <??ZbZclHandleReadReport_3>

080032e2 <??ZbZclHandleReadReport_2>:
 80032e2:	2000      	movs	r0, #0
 80032e4:	f88d 0006 	strb.w	r0, [sp, #6]

080032e8 <??ZbZclHandleReadReport_3>:
 80032e8:	2001      	movs	r0, #1
 80032ea:	f88d 0007 	strb.w	r0, [sp, #7]
 80032ee:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f0:	8880      	ldrh	r0, [r0, #4]
 80032f2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80032f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f8:	7980      	ldrb	r0, [r0, #6]
 80032fa:	f88d 000a 	strb.w	r0, [sp, #10]
 80032fe:	2009      	movs	r0, #9
 8003300:	f88d 000b 	strb.w	r0, [sp, #11]
 8003304:	2205      	movs	r2, #5
 8003306:	0039      	movs	r1, r7
 8003308:	a801      	add	r0, sp, #4
 800330a:	f003 f93f 	bl	800658c <ZbZclAppendHeader>
 800330e:	0004      	movs	r4, r0
 8003310:	2c00      	cmp	r4, #0
 8003312:	d506      	bpl.n	8003322 <??ZbZclHandleReadReport_4>
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003318:	4649      	mov	r1, r9
 800331a:	4640      	mov	r0, r8
 800331c:	f010 f800 	bl	8013320 <ZbZclSendDefaultResponse>
 8003320:	e0ce      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003322 <??ZbZclHandleReadReport_4>:
 8003322:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003326:	4582      	cmp	sl, r0
 8003328:	f080 80a1 	bcs.w	800346e <??ZbZclHandleReadReport_5>
 800332c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003330:	f11a 0103 	adds.w	r1, sl, #3
 8003334:	4288      	cmp	r0, r1
 8003336:	d206      	bcs.n	8003346 <??ZbZclHandleReadReport_6>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800333c:	4649      	mov	r1, r9
 800333e:	4640      	mov	r0, r8
 8003340:	f00f ffee 	bl	8013320 <ZbZclSendDefaultResponse>
 8003344:	e0bc      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003346 <??ZbZclHandleReadReport_6>:
 8003346:	4650      	mov	r0, sl
 8003348:	f110 0a01 	adds.w	sl, r0, #1
 800334c:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 8003350:	5c08      	ldrb	r0, [r1, r0]
 8003352:	2800      	cmp	r0, #0
 8003354:	d003      	beq.n	800335e <??ZbZclHandleReadReport_7>
 8003356:	2001      	movs	r0, #1
 8003358:	f88d 0000 	strb.w	r0, [sp]
 800335c:	e002      	b.n	8003364 <??ZbZclHandleReadReport_8>

0800335e <??ZbZclHandleReadReport_7>:
 800335e:	2000      	movs	r0, #0
 8003360:	f88d 0000 	strb.w	r0, [sp]

08003364 <??ZbZclHandleReadReport_8>:
 8003364:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8003368:	4450      	add	r0, sl
 800336a:	f003 feaa 	bl	80070c2 <pletoh16>
 800336e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003372:	f11a 0a02 	adds.w	sl, sl, #2
 8003376:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800337a:	4640      	mov	r0, r8
 800337c:	f7fc ff2f 	bl	80001de <ZbZclAttrFind>
 8003380:	0006      	movs	r6, r0
 8003382:	2e00      	cmp	r6, #0
 8003384:	d102      	bne.n	800338c <??ZbZclHandleReadReport_9>
 8003386:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 800338a:	e05c      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800338c <??ZbZclHandleReadReport_9>:
 800338c:	68b0      	ldr	r0, [r6, #8]
 800338e:	7900      	ldrb	r0, [r0, #4]
 8003390:	0780      	lsls	r0, r0, #30
 8003392:	d402      	bmi.n	800339a <??ZbZclHandleReadReport_11>
 8003394:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 8003398:	e055      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800339a <??ZbZclHandleReadReport_11>:
 800339a:	f89d 2000 	ldrb.w	r2, [sp]
 800339e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80033a2:	4640      	mov	r0, r8
 80033a4:	f7ff fa3f 	bl	8002826 <zcl_reporting_find>
 80033a8:	0005      	movs	r5, r0
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	d102      	bne.n	80033b4 <??ZbZclHandleReadReport_12>
 80033ae:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033b2:	e048      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033b4 <??ZbZclHandleReadReport_12>:
 80033b4:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80033b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033ba:	4288      	cmp	r0, r1
 80033bc:	d102      	bne.n	80033c4 <??ZbZclHandleReadReport_13>
 80033be:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033c2:	e040      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033c4 <??ZbZclHandleReadReport_13>:
 80033c4:	2020      	movs	r0, #32
 80033c6:	9005      	str	r0, [sp, #20]
 80033c8:	2000      	movs	r0, #0
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	f10d 0b18 	add.w	fp, sp, #24
 80033d0:	9a04      	ldr	r2, [sp, #16]
 80033d2:	9905      	ldr	r1, [sp, #20]
 80033d4:	4658      	mov	r0, fp
 80033d6:	f004 fc9f 	bl	8007d18 <__aeabi_memset>
 80033da:	f89d 0000 	ldrb.w	r0, [sp]
 80033de:	2800      	cmp	r0, #0
 80033e0:	d003      	beq.n	80033ea <??ZbZclHandleReadReport_14>
 80033e2:	2001      	movs	r0, #1
 80033e4:	f88d 0018 	strb.w	r0, [sp, #24]
 80033e8:	e002      	b.n	80033f0 <??ZbZclHandleReadReport_15>

080033ea <??ZbZclHandleReadReport_14>:
 80033ea:	2000      	movs	r0, #0
 80033ec:	f88d 0018 	strb.w	r0, [sp, #24]

080033f0 <??ZbZclHandleReadReport_15>:
 80033f0:	89a8      	ldrh	r0, [r5, #12]
 80033f2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80033f6:	7ba8      	ldrb	r0, [r5, #14]
 80033f8:	f88d 001c 	strb.w	r0, [sp, #28]
 80033fc:	8c28      	ldrh	r0, [r5, #32]
 80033fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003402:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003404:	f8ad 0020 	strh.w	r0, [sp, #32]
 8003408:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 800340c:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8003410:	2000      	movs	r0, #0
 8003412:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8003416:	2000      	movs	r0, #0
 8003418:	5538      	strb	r0, [r7, r4]
 800341a:	1c64      	adds	r4, r4, #1
 800341c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8003420:	0020      	movs	r0, r4
 8003422:	b280      	uxth	r0, r0
 8003424:	1a12      	subs	r2, r2, r0
 8003426:	eb07 0104 	add.w	r1, r7, r4
 800342a:	a806      	add	r0, sp, #24
 800342c:	f000 f896 	bl	800355c <zcl_append_report_config_record>
 8003430:	9003      	str	r0, [sp, #12]
 8003432:	9803      	ldr	r0, [sp, #12]
 8003434:	2800      	cmp	r0, #0
 8003436:	d503      	bpl.n	8003440 <??ZbZclHandleReadReport_16>
 8003438:	1e64      	subs	r4, r4, #1
 800343a:	f05f 0b01 	movs.w	fp, #1
 800343e:	e002      	b.n	8003446 <??ZbZclHandleReadReport_10>

08003440 <??ZbZclHandleReadReport_16>:
 8003440:	9803      	ldr	r0, [sp, #12]
 8003442:	1904      	adds	r4, r0, r4
 8003444:	e76d      	b.n	8003322 <??ZbZclHandleReadReport_4>

08003446 <??ZbZclHandleReadReport_10>:
 8003446:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800344a:	1ce1      	adds	r1, r4, #3
 800344c:	4288      	cmp	r0, r1
 800344e:	d30e      	bcc.n	800346e <??ZbZclHandleReadReport_5>

08003450 <??ZbZclHandleReadReport_17>:
 8003450:	f807 b004 	strb.w	fp, [r7, r4]
 8003454:	1c64      	adds	r4, r4, #1
 8003456:	f89d 0000 	ldrb.w	r0, [sp]
 800345a:	5538      	strb	r0, [r7, r4]
 800345c:	1c64      	adds	r4, r4, #1
 800345e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8003462:	eb07 0004 	add.w	r0, r7, r4
 8003466:	f003 fe78 	bl	800715a <putle16>
 800346a:	1ca4      	adds	r4, r4, #2
 800346c:	e759      	b.n	8003322 <??ZbZclHandleReadReport_4>

0800346e <??ZbZclHandleReadReport_5>:
 800346e:	464a      	mov	r2, r9
 8003470:	a90e      	add	r1, sp, #56	@ 0x38
 8003472:	4640      	mov	r0, r8
 8003474:	f000 fc61 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8003478:	a80e      	add	r0, sp, #56	@ 0x38
 800347a:	f119 0110 	adds.w	r1, r9, #16
 800347e:	2210      	movs	r2, #16
 8003480:	f013 fee1 	bl	8017246 <__aeabi_memcpy>
 8003484:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 8003488:	f000 fbef 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 800348c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8003490:	2001      	movs	r0, #1
 8003492:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8003496:	2000      	movs	r0, #0
 8003498:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 800349c:	9714      	str	r7, [sp, #80]	@ 0x50
 800349e:	0020      	movs	r0, r4
 80034a0:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	a90e      	add	r1, sp, #56	@ 0x38
 80034aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034ae:	f00f fa97 	bl	80129e0 <ZbApsdeDataReqCallback>
 80034b2:	2300      	movs	r3, #0
 80034b4:	a204      	add	r2, pc, #16	@ (adr r2, 80034c8 <??DataTable10>)
 80034b6:	0039      	movs	r1, r7
 80034b8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034bc:	f010 f8c7 	bl	801364e <zb_heap_free>

080034c0 <??ZbZclHandleReadReport_1>:
 80034c0:	b01b      	add	sp, #108	@ 0x6c
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080034c8 <??DataTable10>:
 80034c8:	0000 0000                                   ....

080034cc <ZbZclHandleReportAttr>:
 80034cc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	0004      	movs	r4, r0
 80034d2:	000d      	movs	r5, r1
 80034d4:	0016      	movs	r6, r2
 80034d6:	f05f 0a00 	movs.w	sl, #0
 80034da:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80034dc:	2800      	cmp	r0, #0
 80034de:	d03b      	beq.n	8003558 <??ZbZclHandleReportAttr_0>

080034e0 <??ZbZclHandleReportAttr_1>:
 80034e0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80034e2:	4651      	mov	r1, sl
 80034e4:	b289      	uxth	r1, r1
 80034e6:	1cc9      	adds	r1, r1, #3
 80034e8:	4288      	cmp	r0, r1
 80034ea:	d335      	bcc.n	8003558 <??ZbZclHandleReportAttr_0>

080034ec <??ZbZclHandleReportAttr_3>:
 80034ec:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034ee:	4651      	mov	r1, sl
 80034f0:	b289      	uxth	r1, r1
 80034f2:	4408      	add	r0, r1
 80034f4:	f003 fde5 	bl	80070c2 <pletoh16>
 80034f8:	0007      	movs	r7, r0
 80034fa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034fc:	4651      	mov	r1, sl
 80034fe:	b289      	uxth	r1, r1
 8003500:	4408      	add	r0, r1
 8003502:	7880      	ldrb	r0, [r0, #2]
 8003504:	4680      	mov	r8, r0
 8003506:	f11a 0a03 	adds.w	sl, sl, #3
 800350a:	2300      	movs	r3, #0
 800350c:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800350e:	4650      	mov	r0, sl
 8003510:	b280      	uxth	r0, r0
 8003512:	1a12      	subs	r2, r2, r0
 8003514:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003516:	4651      	mov	r1, sl
 8003518:	b289      	uxth	r1, r1
 800351a:	4401      	add	r1, r0
 800351c:	4640      	mov	r0, r8
 800351e:	b2c0      	uxtb	r0, r0
 8003520:	f7fd fd89 	bl	8001036 <ZbZclAttrParseLength>
 8003524:	4681      	mov	r9, r0
 8003526:	f1b9 0f00 	cmp.w	r9, #0
 800352a:	d415      	bmi.n	8003558 <??ZbZclHandleReportAttr_0>

0800352c <??ZbZclHandleReportAttr_4>:
 800352c:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800352e:	ebb0 000a 	subs.w	r0, r0, sl
 8003532:	b280      	uxth	r0, r0
 8003534:	9001      	str	r0, [sp, #4]
 8003536:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003538:	4651      	mov	r1, sl
 800353a:	b289      	uxth	r1, r1
 800353c:	4408      	add	r0, r1
 800353e:	9000      	str	r0, [sp, #0]
 8003540:	4643      	mov	r3, r8
 8003542:	b2db      	uxtb	r3, r3
 8003544:	003a      	movs	r2, r7
 8003546:	b292      	uxth	r2, r2
 8003548:	0031      	movs	r1, r6
 800354a:	0020      	movs	r0, r4
 800354c:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 8003550:	47e0      	blx	ip
 8003552:	eb19 0a0a 	adds.w	sl, r9, sl
 8003556:	e7c3      	b.n	80034e0 <??ZbZclHandleReportAttr_1>

08003558 <??ZbZclHandleReportAttr_0>:
 8003558:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800355c <zcl_append_report_config_record>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	0005      	movs	r5, r0
 8003562:	000e      	movs	r6, r1
 8003564:	4690      	mov	r8, r2
 8003566:	2700      	movs	r7, #0
 8003568:	7828      	ldrb	r0, [r5, #0]
 800356a:	2800      	cmp	r0, #0
 800356c:	d003      	beq.n	8003576 <??zcl_append_report_config_record_0>
 800356e:	2801      	cmp	r0, #1
 8003570:	f000 80f4 	beq.w	800375c <??zcl_append_report_config_record_1>
 8003574:	e108      	b.n	8003788 <??zcl_append_report_config_record_2>

08003576 <??zcl_append_report_config_record_0>:
 8003576:	7928      	ldrb	r0, [r5, #4]
 8003578:	f004 faa8 	bl	8007acc <ZbZclAttrIsFloat>
 800357c:	2800      	cmp	r0, #0
 800357e:	d002      	beq.n	8003586 <??zcl_append_report_config_record_3>
 8003580:	2001      	movs	r0, #1
 8003582:	4681      	mov	r9, r0
 8003584:	e009      	b.n	800359a <??zcl_append_report_config_record_4>

08003586 <??zcl_append_report_config_record_3>:
 8003586:	7928      	ldrb	r0, [r5, #4]
 8003588:	f7fd fe06 	bl	8001198 <ZbZclAttrIsAnalog>
 800358c:	2800      	cmp	r0, #0
 800358e:	d002      	beq.n	8003596 <??zcl_append_report_config_record_5>
 8003590:	2001      	movs	r0, #1
 8003592:	4681      	mov	r9, r0
 8003594:	e001      	b.n	800359a <??zcl_append_report_config_record_4>

08003596 <??zcl_append_report_config_record_5>:
 8003596:	2000      	movs	r0, #0
 8003598:	4681      	mov	r9, r0

0800359a <??zcl_append_report_config_record_4>:
 800359a:	f1b8 0f08 	cmp.w	r8, #8
 800359e:	d202      	bcs.n	80035a6 <??zcl_append_report_config_record_6>
 80035a0:	f05f 30ff 	movs.w	r0, #4294967295
 80035a4:	e0f3      	b.n	800378e <??zcl_append_report_config_record_7>

080035a6 <??zcl_append_report_config_record_6>:
 80035a6:	7828      	ldrb	r0, [r5, #0]
 80035a8:	55f0      	strb	r0, [r6, r7]
 80035aa:	1c7f      	adds	r7, r7, #1
 80035ac:	8869      	ldrh	r1, [r5, #2]
 80035ae:	eb06 0007 	add.w	r0, r6, r7
 80035b2:	f003 fdd2 	bl	800715a <putle16>
 80035b6:	1cbf      	adds	r7, r7, #2
 80035b8:	7928      	ldrb	r0, [r5, #4]
 80035ba:	55f0      	strb	r0, [r6, r7]
 80035bc:	1c7f      	adds	r7, r7, #1
 80035be:	88e9      	ldrh	r1, [r5, #6]
 80035c0:	eb06 0007 	add.w	r0, r6, r7
 80035c4:	f003 fdc9 	bl	800715a <putle16>
 80035c8:	1cbf      	adds	r7, r7, #2
 80035ca:	8929      	ldrh	r1, [r5, #8]
 80035cc:	eb06 0007 	add.w	r0, r6, r7
 80035d0:	f003 fdc3 	bl	800715a <putle16>
 80035d4:	1cbf      	adds	r7, r7, #2
 80035d6:	4648      	mov	r0, r9
 80035d8:	b2c0      	uxtb	r0, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	f000 80bd 	beq.w	800375a <??zcl_append_report_config_record_8>
 80035e0:	7928      	ldrb	r0, [r5, #4]
 80035e2:	f7fd fc9d 	bl	8000f20 <ZbZclAttrTypeLength>
 80035e6:	0004      	movs	r4, r0
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d101      	bne.n	80035f0 <??zcl_append_report_config_record_9>
 80035ec:	2001      	movs	r0, #1
 80035ee:	e0ce      	b.n	800378e <??zcl_append_report_config_record_7>

080035f0 <??zcl_append_report_config_record_9>:
 80035f0:	2c01      	cmp	r4, #1
 80035f2:	d00e      	beq.n	8003612 <??zcl_append_report_config_record_10>
 80035f4:	f0c0 80af 	bcc.w	8003756 <??zcl_append_report_config_record_11>
 80035f8:	2c03      	cmp	r4, #3
 80035fa:	d02f      	beq.n	800365c <??zcl_append_report_config_record_12>
 80035fc:	d319      	bcc.n	8003632 <??zcl_append_report_config_record_13>
 80035fe:	2c05      	cmp	r4, #5
 8003600:	d054      	beq.n	80036ac <??zcl_append_report_config_record_14>
 8003602:	d33f      	bcc.n	8003684 <??zcl_append_report_config_record_15>
 8003604:	2c07      	cmp	r4, #7
 8003606:	d07c      	beq.n	8003702 <??zcl_append_report_config_record_16>
 8003608:	d365      	bcc.n	80036d6 <??zcl_append_report_config_record_17>
 800360a:	2c08      	cmp	r4, #8
 800360c:	f000 808e 	beq.w	800372c <??zcl_append_report_config_record_18>
 8003610:	e0a1      	b.n	8003756 <??zcl_append_report_config_record_11>

08003612 <??zcl_append_report_config_record_10>:
 8003612:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003616:	2201      	movs	r2, #1
 8003618:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <??DataTable11_1>)
 800361a:	f005 f841 	bl	80086a0 <__aeabi_cdrcmple>
 800361e:	d801      	bhi.n	8003624 <??zcl_append_report_config_record_19>
 8003620:	2001      	movs	r0, #1
 8003622:	e0b4      	b.n	800378e <??zcl_append_report_config_record_7>

08003624 <??zcl_append_report_config_record_19>:
 8003624:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003628:	f005 f892 	bl	8008750 <__aeabi_d2iz>
 800362c:	55f0      	strb	r0, [r6, r7]
 800362e:	1c7f      	adds	r7, r7, #1
 8003630:	e093      	b.n	800375a <??zcl_append_report_config_record_8>

08003632 <??zcl_append_report_config_record_13>:
 8003632:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003636:	2201      	movs	r2, #1
 8003638:	4b58      	ldr	r3, [pc, #352]	@ (800379c <??DataTable11_2>)
 800363a:	f005 f831 	bl	80086a0 <__aeabi_cdrcmple>
 800363e:	d801      	bhi.n	8003644 <??zcl_append_report_config_record_20>
 8003640:	2001      	movs	r0, #1
 8003642:	e0a4      	b.n	800378e <??zcl_append_report_config_record_7>

08003644 <??zcl_append_report_config_record_20>:
 8003644:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003648:	f005 f882 	bl	8008750 <__aeabi_d2iz>
 800364c:	0001      	movs	r1, r0
 800364e:	b289      	uxth	r1, r1
 8003650:	eb06 0007 	add.w	r0, r6, r7
 8003654:	f003 fd81 	bl	800715a <putle16>
 8003658:	1cbf      	adds	r7, r7, #2
 800365a:	e07e      	b.n	800375a <??zcl_append_report_config_record_8>

0800365c <??zcl_append_report_config_record_12>:
 800365c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003660:	4a4f      	ldr	r2, [pc, #316]	@ (80037a0 <??DataTable11_3>)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <??DataTable11_4>)
 8003664:	f005 f81c 	bl	80086a0 <__aeabi_cdrcmple>
 8003668:	d801      	bhi.n	800366e <??zcl_append_report_config_record_21>
 800366a:	2001      	movs	r0, #1
 800366c:	e08f      	b.n	800378e <??zcl_append_report_config_record_7>

0800366e <??zcl_append_report_config_record_21>:
 800366e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003672:	f005 f895 	bl	80087a0 <__aeabi_d2uiz>
 8003676:	0001      	movs	r1, r0
 8003678:	eb06 0007 	add.w	r0, r6, r7
 800367c:	f003 fd73 	bl	8007166 <putle24>
 8003680:	1cff      	adds	r7, r7, #3
 8003682:	e06a      	b.n	800375a <??zcl_append_report_config_record_8>

08003684 <??zcl_append_report_config_record_15>:
 8003684:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003688:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <??DataTable11_5>)
 800368a:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <??DataTable11_6>)
 800368c:	f005 f808 	bl	80086a0 <__aeabi_cdrcmple>
 8003690:	d801      	bhi.n	8003696 <??zcl_append_report_config_record_22>
 8003692:	2001      	movs	r0, #1
 8003694:	e07b      	b.n	800378e <??zcl_append_report_config_record_7>

08003696 <??zcl_append_report_config_record_22>:
 8003696:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800369a:	f005 f881 	bl	80087a0 <__aeabi_d2uiz>
 800369e:	0001      	movs	r1, r0
 80036a0:	eb06 0007 	add.w	r0, r6, r7
 80036a4:	f003 fd6b 	bl	800717e <putle32>
 80036a8:	1d3f      	adds	r7, r7, #4
 80036aa:	e056      	b.n	800375a <??zcl_append_report_config_record_8>

080036ac <??zcl_append_report_config_record_14>:
 80036ac:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <??DataTable11_7>)
 80036b2:	4b40      	ldr	r3, [pc, #256]	@ (80037b4 <??DataTable11_8>)
 80036b4:	f004 fff4 	bl	80086a0 <__aeabi_cdrcmple>
 80036b8:	d801      	bhi.n	80036be <??zcl_append_report_config_record_23>
 80036ba:	2001      	movs	r0, #1
 80036bc:	e067      	b.n	800378e <??zcl_append_report_config_record_7>

080036be <??zcl_append_report_config_record_23>:
 80036be:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036c2:	f005 f941 	bl	8008948 <__aeabi_d2ulz>
 80036c6:	0002      	movs	r2, r0
 80036c8:	000b      	movs	r3, r1
 80036ca:	eb06 0007 	add.w	r0, r6, r7
 80036ce:	f003 fd61 	bl	8007194 <putle40>
 80036d2:	1d7f      	adds	r7, r7, #5
 80036d4:	e041      	b.n	800375a <??zcl_append_report_config_record_8>

080036d6 <??zcl_append_report_config_record_17>:
 80036d6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036da:	f07f 021e 	mvns.w	r2, #30
 80036de:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <??DataTable11_9>)
 80036e0:	f004 ffde 	bl	80086a0 <__aeabi_cdrcmple>
 80036e4:	d801      	bhi.n	80036ea <??zcl_append_report_config_record_24>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e051      	b.n	800378e <??zcl_append_report_config_record_7>

080036ea <??zcl_append_report_config_record_24>:
 80036ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036ee:	f005 f92b 	bl	8008948 <__aeabi_d2ulz>
 80036f2:	0002      	movs	r2, r0
 80036f4:	000b      	movs	r3, r1
 80036f6:	eb06 0007 	add.w	r0, r6, r7
 80036fa:	f003 fd55 	bl	80071a8 <putle48>
 80036fe:	1dbf      	adds	r7, r7, #6
 8003700:	e02b      	b.n	800375a <??zcl_append_report_config_record_8>

08003702 <??zcl_append_report_config_record_16>:
 8003702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003706:	2201      	movs	r2, #1
 8003708:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <??DataTable11_10>)
 800370a:	f004 ffc9 	bl	80086a0 <__aeabi_cdrcmple>
 800370e:	d801      	bhi.n	8003714 <??zcl_append_report_config_record_25>
 8003710:	2001      	movs	r0, #1
 8003712:	e03c      	b.n	800378e <??zcl_append_report_config_record_7>

08003714 <??zcl_append_report_config_record_25>:
 8003714:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003718:	f005 f916 	bl	8008948 <__aeabi_d2ulz>
 800371c:	0002      	movs	r2, r0
 800371e:	000b      	movs	r3, r1
 8003720:	eb06 0007 	add.w	r0, r6, r7
 8003724:	f003 fd4f 	bl	80071c6 <putle56>
 8003728:	1dff      	adds	r7, r7, #7
 800372a:	e016      	b.n	800375a <??zcl_append_report_config_record_8>

0800372c <??zcl_append_report_config_record_18>:
 800372c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003730:	2201      	movs	r2, #1
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <??DataTable11_11>)
 8003734:	f004 ffb4 	bl	80086a0 <__aeabi_cdrcmple>
 8003738:	d801      	bhi.n	800373e <??zcl_append_report_config_record_26>
 800373a:	2001      	movs	r0, #1
 800373c:	e027      	b.n	800378e <??zcl_append_report_config_record_7>

0800373e <??zcl_append_report_config_record_26>:
 800373e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003742:	f005 f901 	bl	8008948 <__aeabi_d2ulz>
 8003746:	0002      	movs	r2, r0
 8003748:	000b      	movs	r3, r1
 800374a:	eb06 0007 	add.w	r0, r6, r7
 800374e:	f003 fd49 	bl	80071e4 <putle64>
 8003752:	3708      	adds	r7, #8
 8003754:	e001      	b.n	800375a <??zcl_append_report_config_record_8>

08003756 <??zcl_append_report_config_record_11>:
 8003756:	2001      	movs	r0, #1
 8003758:	e019      	b.n	800378e <??zcl_append_report_config_record_7>

0800375a <??zcl_append_report_config_record_8>:
 800375a:	e017      	b.n	800378c <??zcl_append_report_config_record_27>

0800375c <??zcl_append_report_config_record_1>:
 800375c:	f1b8 0f08 	cmp.w	r8, #8
 8003760:	d202      	bcs.n	8003768 <??zcl_append_report_config_record_28>
 8003762:	f05f 30ff 	movs.w	r0, #4294967295
 8003766:	e012      	b.n	800378e <??zcl_append_report_config_record_7>

08003768 <??zcl_append_report_config_record_28>:
 8003768:	7828      	ldrb	r0, [r5, #0]
 800376a:	55f0      	strb	r0, [r6, r7]
 800376c:	1c7f      	adds	r7, r7, #1
 800376e:	8869      	ldrh	r1, [r5, #2]
 8003770:	eb06 0007 	add.w	r0, r6, r7
 8003774:	f003 fcf1 	bl	800715a <putle16>
 8003778:	1cbf      	adds	r7, r7, #2
 800377a:	8b29      	ldrh	r1, [r5, #24]
 800377c:	eb06 0007 	add.w	r0, r6, r7
 8003780:	f003 fceb 	bl	800715a <putle16>
 8003784:	1cbf      	adds	r7, r7, #2
 8003786:	e001      	b.n	800378c <??zcl_append_report_config_record_27>

08003788 <??zcl_append_report_config_record_2>:
 8003788:	2001      	movs	r0, #1
 800378a:	e000      	b.n	800378e <??zcl_append_report_config_record_7>

0800378c <??zcl_append_report_config_record_27>:
 800378c:	0038      	movs	r0, r7

0800378e <??zcl_append_report_config_record_7>:
 800378e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08003794 <??DataTable11>:
 8003794:	0000 3ff0                                   ...?

08003798 <??DataTable11_1>:
 8003798:	e000 406f                                   ..o@

0800379c <??DataTable11_2>:
 800379c:	ffe0 40ef                                   ...@

080037a0 <??DataTable11_3>:
 80037a0:	0001 e000                                   ....

080037a4 <??DataTable11_4>:
 80037a4:	ffff 416f                                   ..oA

080037a8 <??DataTable11_5>:
 80037a8:	0001 ffe0                                   ....

080037ac <??DataTable11_6>:
 80037ac:	ffff 41ef                                   ...A

080037b0 <??DataTable11_7>:
 80037b0:	e001 ffff                                   ....

080037b4 <??DataTable11_8>:
 80037b4:	ffff 426f                                   ..oB

080037b8 <??DataTable11_9>:
 80037b8:	ffff 42ef                                   ...B

080037bc <??DataTable11_10>:
 80037bc:	0000 4370                                   ..pC

080037c0 <??DataTable11_11>:
 80037c0:	0000 43f0                                   ...C

080037c4 <ZbZclAttrReportConfigReq>:
 80037c4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	b09b      	sub	sp, #108	@ 0x6c
 80037ca:	0004      	movs	r4, r0
 80037cc:	000d      	movs	r5, r1
 80037ce:	001e      	movs	r6, r3
 80037d0:	2700      	movs	r7, #0
 80037d2:	7c28      	ldrb	r0, [r5, #16]
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d002      	beq.n	80037de <??ZbZclAttrReportConfigReq_0>
 80037d8:	7c28      	ldrb	r0, [r5, #16]
 80037da:	2807      	cmp	r0, #7
 80037dc:	d301      	bcc.n	80037e2 <??ZbZclAttrReportConfigReq_1>

080037de <??ZbZclAttrReportConfigReq_0>:
 80037de:	2001      	movs	r0, #1
 80037e0:	e059      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

080037e2 <??ZbZclAttrReportConfigReq_1>:
 80037e2:	f05f 0800 	movs.w	r8, #0

080037e6 <??ZbZclAttrReportConfigReq_3>:
 80037e6:	7c28      	ldrb	r0, [r5, #16]
 80037e8:	4580      	cmp	r8, r0
 80037ea:	d215      	bcs.n	8003818 <??ZbZclAttrReportConfigReq_4>
 80037ec:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80037f0:	4428      	add	r0, r5
 80037f2:	f110 0918 	adds.w	r9, r0, #24
 80037f6:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 80037fa:	a80c      	add	r0, sp, #48	@ 0x30
 80037fc:	eb00 0107 	add.w	r1, r0, r7
 8003800:	4648      	mov	r0, r9
 8003802:	f7ff feab 	bl	800355c <zcl_append_report_config_record>
 8003806:	0001      	movs	r1, r0
 8003808:	2901      	cmp	r1, #1
 800380a:	da01      	bge.n	8003810 <??ZbZclAttrReportConfigReq_5>
 800380c:	2001      	movs	r0, #1
 800380e:	e042      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

08003810 <??ZbZclAttrReportConfigReq_5>:
 8003810:	19cf      	adds	r7, r1, r7
 8003812:	f118 0801 	adds.w	r8, r8, #1
 8003816:	e7e6      	b.n	80037e6 <??ZbZclAttrReportConfigReq_3>

08003818 <??ZbZclAttrReportConfigReq_4>:
 8003818:	f05f 0930 	movs.w	r9, #48	@ 0x30
 800381c:	f05f 0a00 	movs.w	sl, #0
 8003820:	46eb      	mov	fp, sp
 8003822:	4652      	mov	r2, sl
 8003824:	4649      	mov	r1, r9
 8003826:	4658      	mov	r0, fp
 8003828:	f004 fa76 	bl	8007d18 <__aeabi_memset>
 800382c:	2000      	movs	r0, #0
 800382e:	f88d 001a 	strb.w	r0, [sp, #26]
 8003832:	8a20      	ldrh	r0, [r4, #16]
 8003834:	2800      	cmp	r0, #0
 8003836:	d001      	beq.n	800383c <??ZbZclAttrReportConfigReq_6>
 8003838:	2001      	movs	r0, #1
 800383a:	e000      	b.n	800383e <??ZbZclAttrReportConfigReq_7>

0800383c <??ZbZclAttrReportConfigReq_6>:
 800383c:	2000      	movs	r0, #0

0800383e <??ZbZclAttrReportConfigReq_7>:
 800383e:	f88d 001b 	strb.w	r0, [sp, #27]
 8003842:	8a20      	ldrh	r0, [r4, #16]
 8003844:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003848:	2006      	movs	r0, #6
 800384a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800384e:	f00f fce3 	bl	8013218 <ZbZclGetNextSeqnum>
 8003852:	f88d 0020 	strb.w	r0, [sp, #32]
 8003856:	4668      	mov	r0, sp
 8003858:	0029      	movs	r1, r5
 800385a:	2210      	movs	r2, #16
 800385c:	f013 fcf3 	bl	8017246 <__aeabi_memcpy>
 8003860:	8aa0      	ldrh	r0, [r4, #20]
 8003862:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003866:	89a0      	ldrh	r0, [r4, #12]
 8003868:	f8ad 0012 	strh.w	r0, [sp, #18]
 800386c:	7ba0      	ldrb	r0, [r4, #14]
 800386e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003872:	8ae0      	ldrh	r0, [r4, #22]
 8003874:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003878:	7e20      	ldrb	r0, [r4, #24]
 800387a:	f88d 0018 	strb.w	r0, [sp, #24]
 800387e:	7e60      	ldrb	r0, [r4, #25]
 8003880:	f88d 0019 	strb.w	r0, [sp, #25]
 8003884:	a80c      	add	r0, sp, #48	@ 0x30
 8003886:	9009      	str	r0, [sp, #36]	@ 0x24
 8003888:	970a      	str	r7, [sp, #40]	@ 0x28
 800388a:	0033      	movs	r3, r6
 800388c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800388e:	4669      	mov	r1, sp
 8003890:	68a0      	ldr	r0, [r4, #8]
 8003892:	f00f fcec 	bl	801326e <ZbZclCommandReq>

08003896 <??ZbZclAttrReportConfigReq_2>:
 8003896:	b01d      	add	sp, #116	@ 0x74
 8003898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800389c <ZbZclAttrReportReadReq>:
 800389c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b09b      	sub	sp, #108	@ 0x6c
 80038a2:	0005      	movs	r5, r0
 80038a4:	000e      	movs	r6, r1
 80038a6:	001f      	movs	r7, r3
 80038a8:	2400      	movs	r4, #0
 80038aa:	7c30      	ldrb	r0, [r6, #16]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d002      	beq.n	80038b6 <??ZbZclAttrReportReadReq_0>
 80038b0:	7c30      	ldrb	r0, [r6, #16]
 80038b2:	2807      	cmp	r0, #7
 80038b4:	d301      	bcc.n	80038ba <??ZbZclAttrReportReadReq_1>

080038b6 <??ZbZclAttrReportReadReq_0>:
 80038b6:	2001      	movs	r0, #1
 80038b8:	e050      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ba <??ZbZclAttrReportReadReq_1>:
 80038ba:	f05f 0800 	movs.w	r8, #0

080038be <??ZbZclAttrReportReadReq_3>:
 80038be:	7c30      	ldrb	r0, [r6, #16]
 80038c0:	4580      	cmp	r8, r0
 80038c2:	d217      	bcs.n	80038f4 <??ZbZclAttrReportReadReq_4>
 80038c4:	1ce0      	adds	r0, r4, #3
 80038c6:	283a      	cmp	r0, #58	@ 0x3a
 80038c8:	d301      	bcc.n	80038ce <??ZbZclAttrReportReadReq_5>
 80038ca:	2001      	movs	r0, #1
 80038cc:	e046      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ce <??ZbZclAttrReportReadReq_5>:
 80038ce:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038d2:	4430      	add	r0, r6
 80038d4:	7e00      	ldrb	r0, [r0, #24]
 80038d6:	a90c      	add	r1, sp, #48	@ 0x30
 80038d8:	5508      	strb	r0, [r1, r4]
 80038da:	1c64      	adds	r4, r4, #1
 80038dc:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038e0:	4430      	add	r0, r6
 80038e2:	8b41      	ldrh	r1, [r0, #26]
 80038e4:	a80c      	add	r0, sp, #48	@ 0x30
 80038e6:	4420      	add	r0, r4
 80038e8:	f003 fc37 	bl	800715a <putle16>
 80038ec:	1ca4      	adds	r4, r4, #2
 80038ee:	f118 0801 	adds.w	r8, r8, #1
 80038f2:	e7e4      	b.n	80038be <??ZbZclAttrReportReadReq_3>

080038f4 <??ZbZclAttrReportReadReq_4>:
 80038f4:	f05f 0930 	movs.w	r9, #48	@ 0x30
 80038f8:	f05f 0a00 	movs.w	sl, #0
 80038fc:	46eb      	mov	fp, sp
 80038fe:	4652      	mov	r2, sl
 8003900:	4649      	mov	r1, r9
 8003902:	4658      	mov	r0, fp
 8003904:	f004 fa08 	bl	8007d18 <__aeabi_memset>
 8003908:	2000      	movs	r0, #0
 800390a:	f88d 001a 	strb.w	r0, [sp, #26]
 800390e:	2008      	movs	r0, #8
 8003910:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8003914:	f00f fc80 	bl	8013218 <ZbZclGetNextSeqnum>
 8003918:	f88d 0020 	strb.w	r0, [sp, #32]
 800391c:	4668      	mov	r0, sp
 800391e:	0031      	movs	r1, r6
 8003920:	2210      	movs	r2, #16
 8003922:	f013 fc90 	bl	8017246 <__aeabi_memcpy>
 8003926:	8aa8      	ldrh	r0, [r5, #20]
 8003928:	f8ad 0010 	strh.w	r0, [sp, #16]
 800392c:	89a8      	ldrh	r0, [r5, #12]
 800392e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8003932:	7ba8      	ldrb	r0, [r5, #14]
 8003934:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003938:	8ae8      	ldrh	r0, [r5, #22]
 800393a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800393e:	7e28      	ldrb	r0, [r5, #24]
 8003940:	f88d 0018 	strb.w	r0, [sp, #24]
 8003944:	7e68      	ldrb	r0, [r5, #25]
 8003946:	f88d 0019 	strb.w	r0, [sp, #25]
 800394a:	a80c      	add	r0, sp, #48	@ 0x30
 800394c:	9009      	str	r0, [sp, #36]	@ 0x24
 800394e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003950:	003b      	movs	r3, r7
 8003952:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003954:	4669      	mov	r1, sp
 8003956:	68a8      	ldr	r0, [r5, #8]
 8003958:	f00f fc89 	bl	801326e <ZbZclCommandReq>

0800395c <??ZbZclAttrReportReadReq_2>:
 800395c:	b01d      	add	sp, #116	@ 0x74
 800395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003962 <ZbZclAttrReportConfigDefault>:
 8003962:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003966:	0007      	movs	r7, r0
 8003968:	4688      	mov	r8, r1
 800396a:	4691      	mov	r9, r2
 800396c:	469a      	mov	sl, r3
 800396e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003970:	4641      	mov	r1, r8
 8003972:	b289      	uxth	r1, r1
 8003974:	0038      	movs	r0, r7
 8003976:	f7fc fc32 	bl	80001de <ZbZclAttrFind>
 800397a:	0005      	movs	r5, r0
 800397c:	2d00      	cmp	r5, #0
 800397e:	d101      	bne.n	8003984 <??ZbZclAttrReportConfigDefault_0>
 8003980:	2086      	movs	r0, #134	@ 0x86
 8003982:	e02b      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003984 <??ZbZclAttrReportConfigDefault_0>:
 8003984:	68a8      	ldr	r0, [r5, #8]
 8003986:	7900      	ldrb	r0, [r0, #4]
 8003988:	0780      	lsls	r0, r0, #30
 800398a:	d401      	bmi.n	8003990 <??ZbZclAttrReportConfigDefault_2>
 800398c:	208c      	movs	r0, #140	@ 0x8c
 800398e:	e025      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003990 <??ZbZclAttrReportConfigDefault_2>:
 8003990:	2200      	movs	r2, #0
 8003992:	4641      	mov	r1, r8
 8003994:	b289      	uxth	r1, r1
 8003996:	0038      	movs	r0, r7
 8003998:	f7fe ff45 	bl	8002826 <zcl_reporting_find>
 800399c:	0006      	movs	r6, r0
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d101      	bne.n	80039a6 <??ZbZclAttrReportConfigDefault_3>
 80039a2:	208b      	movs	r0, #139	@ 0x8b
 80039a4:	e01a      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

080039a6 <??ZbZclAttrReportConfigDefault_3>:
 80039a6:	f8ad 9002 	strh.w	r9, [sp, #2]
 80039aa:	f8ad a000 	strh.w	sl, [sp]
 80039ae:	4669      	mov	r1, sp
 80039b0:	f10d 0002 	add.w	r0, sp, #2
 80039b4:	f7ff f894 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 80039b8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80039bc:	84b0      	strh	r0, [r6, #36]	@ 0x24
 80039be:	f8bd 0000 	ldrh.w	r0, [sp]
 80039c2:	84f0      	strh	r0, [r6, #38]	@ 0x26
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d003      	beq.n	80039d0 <??ZbZclAttrReportConfigDefault_4>
 80039c8:	ed94 0b00 	vldr	d0, [r4]
 80039cc:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

080039d0 <??ZbZclAttrReportConfigDefault_4>:
 80039d0:	2201      	movs	r2, #1
 80039d2:	0031      	movs	r1, r6
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f7ff f8b3 	bl	8002b40 <zcl_reporting_reset_defaults>
 80039da:	2000      	movs	r0, #0

080039dc <??ZbZclAttrReportConfigDefault_1>:
 80039dc:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080039e0 <ZbZclClusterReportCallbackAttach>:
 80039e0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80039e2:	4770      	bx	lr

080039e4 <ZbZclBasicClientAlloc>:
 80039e4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80039e6:	0005      	movs	r5, r0
 80039e8:	000e      	movs	r6, r1
 80039ea:	2001      	movs	r0, #1
 80039ec:	9000      	str	r0, [sp, #0]
 80039ee:	0033      	movs	r3, r6
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2200      	movs	r2, #0
 80039f4:	216c      	movs	r1, #108	@ 0x6c
 80039f6:	0028      	movs	r0, r5
 80039f8:	f000 f9cf 	bl	8003d9a <ZbZclClusterAlloc>
 80039fc:	0004      	movs	r4, r0
 80039fe:	2c00      	cmp	r4, #0
 8003a00:	d101      	bne.n	8003a06 <??ZbZclBasicClientAlloc_0>
 8003a02:	2000      	movs	r0, #0
 8003a04:	e006      	b.n	8003a14 <??ZbZclBasicClientAlloc_1>

08003a06 <??ZbZclBasicClientAlloc_0>:
 8003a06:	f20f 0011 	addw	r0, pc, #17
 8003a0a:	65a0      	str	r0, [r4, #88]	@ 0x58
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f000 fa54 	bl	8003eba <ZbZclClusterAttach>
 8003a12:	0020      	movs	r0, r4

08003a14 <??ZbZclBasicClientAlloc_1>:
 8003a14:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08003a18 <zcl_basic_client_handle_command>:
 8003a18:	0003      	movs	r3, r0
 8003a1a:	7888      	ldrb	r0, [r1, #2]
 8003a1c:	2801      	cmp	r0, #1
 8003a1e:	d001      	beq.n	8003a24 <??zcl_basic_client_handle_command_0>
 8003a20:	2081      	movs	r0, #129	@ 0x81
 8003a22:	e000      	b.n	8003a26 <??zcl_basic_client_handle_command_1>

08003a24 <??zcl_basic_client_handle_command_0>:
 8003a24:	2081      	movs	r0, #129	@ 0x81

08003a26 <??zcl_basic_client_handle_command_1>:
 8003a26:	4770      	bx	lr

08003a28 <zcl_basic_client_reset_rsp_cb>:
 8003a28:	000a      	movs	r2, r1
 8003a2a:	4770      	bx	lr

08003a2c <ZbZclBasicClientResetReq>:
 8003a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a30:	b088      	sub	sp, #32
 8003a32:	0004      	movs	r4, r0
 8003a34:	000d      	movs	r5, r1
 8003a36:	2620      	movs	r6, #32
 8003a38:	2700      	movs	r7, #0
 8003a3a:	46e8      	mov	r8, sp
 8003a3c:	003a      	movs	r2, r7
 8003a3e:	0031      	movs	r1, r6
 8003a40:	4640      	mov	r0, r8
 8003a42:	f004 f969 	bl	8007d18 <__aeabi_memset>
 8003a46:	4668      	mov	r0, sp
 8003a48:	0029      	movs	r1, r5
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	f013 fbfb 	bl	8017246 <__aeabi_memcpy>
 8003a50:	2000      	movs	r0, #0
 8003a52:	f88d 0010 	strb.w	r0, [sp, #16]
 8003a56:	2000      	movs	r0, #0
 8003a58:	f88d 0011 	strb.w	r0, [sp, #17]
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	9005      	str	r0, [sp, #20]
 8003a60:	2000      	movs	r0, #0
 8003a62:	9006      	str	r0, [sp, #24]
 8003a64:	0023      	movs	r3, r4
 8003a66:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <??DataTable1>)
 8003a68:	4669      	mov	r1, sp
 8003a6a:	0020      	movs	r0, r4
 8003a6c:	f00f fc90 	bl	8013390 <ZbZclClusterCommandReq>
 8003a70:	b008      	add	sp, #32
 8003a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a78 <??DataTable1>:
 8003a78:	3a29 0800                                   ):..

08003a7c <ZbZclClusterGetEndpoint>:
 8003a7c:	7b80      	ldrb	r0, [r0, #14]
 8003a7e:	4770      	bx	lr

08003a80 <ZbZclClusterSetCallbackArg>:
 8003a80:	6541      	str	r1, [r0, #84]	@ 0x54
 8003a82:	4770      	bx	lr

08003a84 <ZbZclClusterSetMfrCode>:
 8003a84:	8201      	strh	r1, [r0, #16]
 8003a86:	4770      	bx	lr

08003a88 <ZbZclClusterGetClusterId>:
 8003a88:	8980      	ldrh	r0, [r0, #12]
 8003a8a:	4770      	bx	lr

08003a8c <ZbZclClusterSetProfileId>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	0004      	movs	r4, r0
 8003a90:	000d      	movs	r5, r1
 8003a92:	82a5      	strh	r5, [r4, #20]
 8003a94:	7ba0      	ldrb	r0, [r4, #14]
 8003a96:	28ff      	cmp	r0, #255	@ 0xff
 8003a98:	d008      	beq.n	8003aac <??ZbZclClusterSetProfileId_0>
 8003a9a:	0020      	movs	r0, r4
 8003a9c:	f00f fd70 	bl	8013580 <ZbZclClusterUnbind>
 8003aa0:	7f23      	ldrb	r3, [r4, #28]
 8003aa2:	8aa2      	ldrh	r2, [r4, #20]
 8003aa4:	7ba1      	ldrb	r1, [r4, #14]
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	f00f fd27 	bl	80134fa <ZbZclClusterBind>

08003aac <??ZbZclClusterSetProfileId_0>:
 8003aac:	bd31      	pop	{r0, r4, r5, pc}

08003aae <ZbZclClusterGetProfileId>:
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	0004      	movs	r4, r0
 8003ab2:	7ba1      	ldrb	r1, [r4, #14]
 8003ab4:	68a0      	ldr	r0, [r4, #8]
 8003ab6:	f00e ffda 	bl	8012a6e <ZbApsEndpointProfile>
 8003aba:	0001      	movs	r1, r0
 8003abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ac0:	b289      	uxth	r1, r1
 8003ac2:	4291      	cmp	r1, r2
 8003ac4:	d101      	bne.n	8003aca <??ZbZclClusterGetProfileId_0>
 8003ac6:	8aa1      	ldrh	r1, [r4, #20]
 8003ac8:	0008      	movs	r0, r1

08003aca <??ZbZclClusterGetProfileId_0>:
 8003aca:	b280      	uxth	r0, r0
 8003acc:	bd10      	pop	{r4, pc}

08003ace <ZbZclClusterSetMinSecurity>:
 8003ace:	b430      	push	{r4, r5}
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	7d9a      	ldrb	r2, [r3, #22]
 8003ad6:	f012 0203 	ands.w	r2, r2, #3
 8003ada:	2a01      	cmp	r2, #1
 8003adc:	d101      	bne.n	8003ae2 <??ZbZclClusterSetMinSecurity_0>
 8003ade:	2401      	movs	r4, #1
 8003ae0:	e000      	b.n	8003ae4 <??ZbZclClusterSetMinSecurity_1>

08003ae2 <??ZbZclClusterSetMinSecurity_0>:
 8003ae2:	2400      	movs	r4, #0

08003ae4 <??ZbZclClusterSetMinSecurity_1>:
 8003ae4:	000a      	movs	r2, r1
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	2aab      	cmp	r2, #171	@ 0xab
 8003aea:	d01d      	beq.n	8003b28 <??ZbZclClusterSetMinSecurity_2>
 8003aec:	2aac      	cmp	r2, #172	@ 0xac
 8003aee:	d00f      	beq.n	8003b10 <??ZbZclClusterSetMinSecurity_3>
 8003af0:	2aaf      	cmp	r2, #175	@ 0xaf
 8003af2:	d123      	bne.n	8003b3c <??ZbZclClusterSetMinSecurity_4>

08003af4 <??ZbZclClusterSetMinSecurity_5>:
 8003af4:	8add      	ldrh	r5, [r3, #22]
 8003af6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003afa:	4015      	ands	r5, r2
 8003afc:	82dd      	strh	r5, [r3, #22]
 8003afe:	8add      	ldrh	r5, [r3, #22]
 8003b00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b04:	4015      	ands	r5, r2
 8003b06:	82dd      	strh	r5, [r3, #22]
 8003b08:	0022      	movs	r2, r4
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	2a00      	cmp	r2, #0

08003b0e <??ZbZclClusterSetMinSecurity_6>:
 8003b0e:	e017      	b.n	8003b40 <??ZbZclClusterSetMinSecurity_7>

08003b10 <??ZbZclClusterSetMinSecurity_3>:
 8003b10:	8ada      	ldrh	r2, [r3, #22]
 8003b12:	f052 0202 	orrs.w	r2, r2, #2
 8003b16:	82da      	strh	r2, [r3, #22]
 8003b18:	8ada      	ldrh	r2, [r3, #22]
 8003b1a:	f052 0201 	orrs.w	r2, r2, #1
 8003b1e:	82da      	strh	r2, [r3, #22]
 8003b20:	0022      	movs	r2, r4
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	2a00      	cmp	r2, #0

08003b26 <??ZbZclClusterSetMinSecurity_8>:
 8003b26:	e00b      	b.n	8003b40 <??ZbZclClusterSetMinSecurity_7>

08003b28 <??ZbZclClusterSetMinSecurity_2>:
 8003b28:	8add      	ldrh	r5, [r3, #22]
 8003b2a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003b2e:	4015      	ands	r5, r2
 8003b30:	82dd      	strh	r5, [r3, #22]
 8003b32:	8ada      	ldrh	r2, [r3, #22]
 8003b34:	f052 0201 	orrs.w	r2, r2, #1
 8003b38:	82da      	strh	r2, [r3, #22]
 8003b3a:	e001      	b.n	8003b40 <??ZbZclClusterSetMinSecurity_7>

08003b3c <??ZbZclClusterSetMinSecurity_4>:
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	0010      	movs	r0, r2

08003b40 <??ZbZclClusterSetMinSecurity_7>:
 8003b40:	0002      	movs	r2, r0
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d000      	beq.n	8003b4a <??ZbZclClusterSetMinSecurity_9>
 8003b48:	7499      	strb	r1, [r3, #18]

08003b4a <??ZbZclClusterSetMinSecurity_9>:
 8003b4a:	b2c0      	uxtb	r0, r0
 8003b4c:	bc30      	pop	{r4, r5}
 8003b4e:	4770      	bx	lr

08003b50 <ZbZclClusterCheckMinSecurity>:
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	0004      	movs	r4, r0
 8003b56:	000d      	movs	r5, r1
 8003b58:	0016      	movs	r6, r2
 8003b5a:	2700      	movs	r7, #0
 8003b5c:	7ca0      	ldrb	r0, [r4, #18]
 8003b5e:	28af      	cmp	r0, #175	@ 0xaf
 8003b60:	d102      	bne.n	8003b68 <??ZbZclClusterCheckMinSecurity_0>
 8003b62:	2001      	movs	r0, #1
 8003b64:	0007      	movs	r7, r0
 8003b66:	e073      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003b68 <??ZbZclClusterCheckMinSecurity_0>:
 8003b68:	7ca0      	ldrb	r0, [r4, #18]
 8003b6a:	28ac      	cmp	r0, #172	@ 0xac
 8003b6c:	d10a      	bne.n	8003b84 <??ZbZclClusterCheckMinSecurity_2>
 8003b6e:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b72:	28ac      	cmp	r0, #172	@ 0xac
 8003b74:	d003      	beq.n	8003b7e <??ZbZclClusterCheckMinSecurity_3>
 8003b76:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b7a:	28ab      	cmp	r0, #171	@ 0xab
 8003b7c:	d101      	bne.n	8003b82 <??ZbZclClusterCheckMinSecurity_4>

08003b7e <??ZbZclClusterCheckMinSecurity_3>:
 8003b7e:	2001      	movs	r0, #1
 8003b80:	0007      	movs	r7, r0

08003b82 <??ZbZclClusterCheckMinSecurity_4>:
 8003b82:	e065      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003b84 <??ZbZclClusterCheckMinSecurity_2>:
 8003b84:	7ca0      	ldrb	r0, [r4, #18]
 8003b86:	28ab      	cmp	r0, #171	@ 0xab
 8003b88:	d162      	bne.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>
 8003b8a:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b8e:	28ab      	cmp	r0, #171	@ 0xab
 8003b90:	d102      	bne.n	8003b98 <??ZbZclClusterCheckMinSecurity_6>
 8003b92:	2001      	movs	r0, #1
 8003b94:	0007      	movs	r7, r0
 8003b96:	e05b      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003b98 <??ZbZclClusterCheckMinSecurity_6>:
 8003b98:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b9c:	28ac      	cmp	r0, #172	@ 0xac
 8003b9e:	d157      	bne.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003ba0 <??ZbZclClusterCheckMinSecurity_7>:
 8003ba0:	89a0      	ldrh	r0, [r4, #12]
 8003ba2:	2819      	cmp	r0, #25
 8003ba4:	d114      	bne.n	8003bd0 <??ZbZclClusterCheckMinSecurity_8>
 8003ba6:	7f20      	ldrb	r0, [r4, #28]
 8003ba8:	2801      	cmp	r0, #1
 8003baa:	d111      	bne.n	8003bd0 <??ZbZclClusterCheckMinSecurity_8>
 8003bac:	0028      	movs	r0, r5
 8003bae:	f00e ff91 	bl	8012ad4 <ZbApsAddrIsBcast>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d00b      	beq.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bb6:	7830      	ldrb	r0, [r6, #0]
 8003bb8:	2801      	cmp	r0, #1
 8003bba:	d108      	bne.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bbc:	78b0      	ldrb	r0, [r6, #2]
 8003bbe:	2801      	cmp	r0, #1
 8003bc0:	d105      	bne.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bc2:	79f0      	ldrb	r0, [r6, #7]
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d102      	bne.n	8003bce <??ZbZclClusterCheckMinSecurity_9>
 8003bc8:	2001      	movs	r0, #1
 8003bca:	0007      	movs	r7, r0
 8003bcc:	e040      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003bce <??ZbZclClusterCheckMinSecurity_9>:
 8003bce:	e03f      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003bd0 <??ZbZclClusterCheckMinSecurity_8>:
 8003bd0:	f240 7802 	movw	r8, #1794	@ 0x702
 8003bd4:	89a0      	ldrh	r0, [r4, #12]
 8003bd6:	4540      	cmp	r0, r8
 8003bd8:	d11a      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bda:	7f20      	ldrb	r0, [r4, #28]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d117      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003be0:	7830      	ldrb	r0, [r6, #0]
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d114      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003be6:	79f0      	ldrb	r0, [r6, #7]
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d111      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bec:	78b0      	ldrb	r0, [r6, #2]
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d10e      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bf2:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003bf4:	2802      	cmp	r0, #2
 8003bf6:	d30b      	bcc.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003bf8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003bfa:	f003 fa62 	bl	80070c2 <pletoh16>
 8003bfe:	0001      	movs	r1, r0
 8003c00:	f240 3206 	movw	r2, #774	@ 0x306
 8003c04:	b289      	uxth	r1, r1
 8003c06:	4291      	cmp	r1, r2
 8003c08:	d102      	bne.n	8003c10 <??ZbZclClusterCheckMinSecurity_10>
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	000f      	movs	r7, r1
 8003c0e:	e01f      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c10 <??ZbZclClusterCheckMinSecurity_10>:
 8003c10:	89a0      	ldrh	r0, [r4, #12]
 8003c12:	4540      	cmp	r0, r8
 8003c14:	d11b      	bne.n	8003c4e <??ZbZclClusterCheckMinSecurity_11>
 8003c16:	7f20      	ldrb	r0, [r4, #28]
 8003c18:	2801      	cmp	r0, #1
 8003c1a:	d118      	bne.n	8003c4e <??ZbZclClusterCheckMinSecurity_11>
 8003c1c:	7830      	ldrb	r0, [r6, #0]
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d114      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c22:	79f0      	ldrb	r0, [r6, #7]
 8003c24:	2801      	cmp	r0, #1
 8003c26:	d111      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c28:	78b0      	ldrb	r0, [r6, #2]
 8003c2a:	2801      	cmp	r0, #1
 8003c2c:	d10e      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c2e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003c30:	2802      	cmp	r0, #2
 8003c32:	d30b      	bcc.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c34:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003c36:	f003 fa44 	bl	80070c2 <pletoh16>
 8003c3a:	0001      	movs	r1, r0
 8003c3c:	f240 3206 	movw	r2, #774	@ 0x306
 8003c40:	b289      	uxth	r1, r1
 8003c42:	4291      	cmp	r1, r2
 8003c44:	d102      	bne.n	8003c4c <??ZbZclClusterCheckMinSecurity_12>
 8003c46:	2101      	movs	r1, #1
 8003c48:	000f      	movs	r7, r1
 8003c4a:	e001      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c4c <??ZbZclClusterCheckMinSecurity_12>:
 8003c4c:	e000      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c4e <??ZbZclClusterCheckMinSecurity_11>:
 8003c4e:	e7ff      	b.n	8003c50 <??ZbZclClusterCheckMinSecurity_1>

08003c50 <??ZbZclClusterCheckMinSecurity_1>:
 8003c50:	0038      	movs	r0, r7
 8003c52:	b2c0      	uxtb	r0, r0
 8003c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c58 <ZbZclClusterSetTxOptions>:
 8003c58:	05ca      	lsls	r2, r1, #23
 8003c5a:	d400      	bmi.n	8003c5e <??ZbZclClusterSetTxOptions_0>

08003c5c <??ZbZclClusterSetTxOptions_1>:
 8003c5c:	82c1      	strh	r1, [r0, #22]

08003c5e <??ZbZclClusterSetTxOptions_0>:
 8003c5e:	4770      	bx	lr

08003c60 <ZbZclClusterGetTxOptions>:
 8003c60:	8ac0      	ldrh	r0, [r0, #22]
 8003c62:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 8003c66:	4008      	ands	r0, r1
 8003c68:	4770      	bx	lr

08003c6a <ZbZclTxOptsFromSecurityStatus>:
 8003c6a:	0001      	movs	r1, r0
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f050 0004 	orrs.w	r0, r0, #4
 8003c72:	f050 0008 	orrs.w	r0, r0, #8
 8003c76:	000a      	movs	r2, r1
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	2aab      	cmp	r2, #171	@ 0xab
 8003c7c:	d102      	bne.n	8003c84 <??ZbZclTxOptsFromSecurityStatus_0>
 8003c7e:	f050 0001 	orrs.w	r0, r0, #1
 8003c82:	e007      	b.n	8003c94 <??ZbZclTxOptsFromSecurityStatus_1>

08003c84 <??ZbZclTxOptsFromSecurityStatus_0>:
 8003c84:	000a      	movs	r2, r1
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	2aac      	cmp	r2, #172	@ 0xac
 8003c8a:	d103      	bne.n	8003c94 <??ZbZclTxOptsFromSecurityStatus_1>
 8003c8c:	f050 0001 	orrs.w	r0, r0, #1
 8003c90:	f050 0002 	orrs.w	r0, r0, #2

08003c94 <??ZbZclTxOptsFromSecurityStatus_1>:
 8003c94:	b280      	uxth	r0, r0
 8003c96:	4770      	bx	lr

08003c98 <ZbZclClusterGetDirection>:
 8003c98:	7f00      	ldrb	r0, [r0, #28]
 8003c9a:	4770      	bx	lr

08003c9c <ZbZclClusterGetDirectionStr>:
 8003c9c:	0001      	movs	r1, r0
 8003c9e:	7f08      	ldrb	r0, [r1, #28]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d003      	beq.n	8003cac <??ZbZclClusterGetDirectionStr_0>
 8003ca4:	2802      	cmp	r0, #2
 8003ca6:	d005      	beq.n	8003cb4 <??ZbZclClusterGetDirectionStr_1>
 8003ca8:	d302      	bcc.n	8003cb0 <??ZbZclClusterGetDirectionStr_2>
 8003caa:	e005      	b.n	8003cb8 <??ZbZclClusterGetDirectionStr_3>

08003cac <??ZbZclClusterGetDirectionStr_0>:
 8003cac:	4803      	ldr	r0, [pc, #12]	@ (8003cbc <??DataTable1>)
 8003cae:	e004      	b.n	8003cba <??ZbZclClusterGetDirectionStr_4>

08003cb0 <??ZbZclClusterGetDirectionStr_2>:
 8003cb0:	4803      	ldr	r0, [pc, #12]	@ (8003cc0 <??DataTable1_1>)
 8003cb2:	e002      	b.n	8003cba <??ZbZclClusterGetDirectionStr_4>

08003cb4 <??ZbZclClusterGetDirectionStr_1>:
 8003cb4:	4803      	ldr	r0, [pc, #12]	@ (8003cc4 <??DataTable1_2>)
 8003cb6:	e000      	b.n	8003cba <??ZbZclClusterGetDirectionStr_4>

08003cb8 <??ZbZclClusterGetDirectionStr_3>:
 8003cb8:	4803      	ldr	r0, [pc, #12]	@ (8003cc8 <??DataTable1_3>)

08003cba <??ZbZclClusterGetDirectionStr_4>:
 8003cba:	4770      	bx	lr

08003cbc <??DataTable1>:
 8003cbc:	9528 0801                                   (...

08003cc0 <??DataTable1_1>:
 8003cc0:	9530 0801                                   0...

08003cc4 <??DataTable1_2>:
 8003cc4:	9538 0801                                   8...

08003cc8 <??DataTable1_3>:
 8003cc8:	9540 0801                                   @...

08003ccc <ZbZclClusterSetDiscoverRoute>:
 8003ccc:	7601      	strb	r1, [r0, #24]
 8003cce:	4770      	bx	lr

08003cd0 <ZbZclClusterSetRadius>:
 8003cd0:	7641      	strb	r1, [r0, #25]
 8003cd2:	4770      	bx	lr

08003cd4 <ZbZclClusterGetRadius>:
 8003cd4:	7e40      	ldrb	r0, [r0, #25]
 8003cd6:	4770      	bx	lr

08003cd8 <ZbZclClusterSetMaxAsduLength>:
 8003cd8:	b410      	push	{r4}
 8003cda:	0002      	movs	r2, r0
 8003cdc:	000b      	movs	r3, r1
 8003cde:	0018      	movs	r0, r3
 8003ce0:	b280      	uxth	r0, r0
 8003ce2:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 8003ce6:	42a0      	cmp	r0, r4
 8003ce8:	d301      	bcc.n	8003cee <??ZbZclClusterSetMaxAsduLength_0>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e007      	b.n	8003cfe <??ZbZclClusterSetMaxAsduLength_1>

08003cee <??ZbZclClusterSetMaxAsduLength_0>:
 8003cee:	0018      	movs	r0, r3
 8003cf0:	b280      	uxth	r0, r0
 8003cf2:	2839      	cmp	r0, #57	@ 0x39
 8003cf4:	d201      	bcs.n	8003cfa <??ZbZclClusterSetMaxAsduLength_2>
 8003cf6:	2039      	movs	r0, #57	@ 0x39
 8003cf8:	0003      	movs	r3, r0

08003cfa <??ZbZclClusterSetMaxAsduLength_2>:
 8003cfa:	8353      	strh	r3, [r2, #26]
 8003cfc:	2001      	movs	r0, #1

08003cfe <??ZbZclClusterSetMaxAsduLength_1>:
 8003cfe:	bc10      	pop	{r4}
 8003d00:	4770      	bx	lr

08003d02 <ZbZclClusterGetMaxAsduLength>:
 8003d02:	8b40      	ldrh	r0, [r0, #26]
 8003d04:	4770      	bx	lr

08003d06 <ZbZclClusterInitCommandReq>:
 8003d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	000d      	movs	r5, r1
 8003d0e:	2630      	movs	r6, #48	@ 0x30
 8003d10:	2700      	movs	r7, #0
 8003d12:	46a8      	mov	r8, r5
 8003d14:	003a      	movs	r2, r7
 8003d16:	0031      	movs	r1, r6
 8003d18:	4640      	mov	r0, r8
 8003d1a:	f003 fffd 	bl	8007d18 <__aeabi_memset>
 8003d1e:	8aa0      	ldrh	r0, [r4, #20]
 8003d20:	8228      	strh	r0, [r5, #16]
 8003d22:	89a0      	ldrh	r0, [r4, #12]
 8003d24:	8268      	strh	r0, [r5, #18]
 8003d26:	7ba0      	ldrb	r0, [r4, #14]
 8003d28:	82a8      	strh	r0, [r5, #20]
 8003d2a:	8ae0      	ldrh	r0, [r4, #22]
 8003d2c:	82e8      	strh	r0, [r5, #22]
 8003d2e:	7e20      	ldrb	r0, [r4, #24]
 8003d30:	7628      	strb	r0, [r5, #24]
 8003d32:	7e60      	ldrb	r0, [r4, #25]
 8003d34:	7668      	strb	r0, [r5, #25]
 8003d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d3a <ZbZclClusterInitApsdeReq>:
 8003d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3e:	0005      	movs	r5, r0
 8003d40:	000e      	movs	r6, r1
 8003d42:	0014      	movs	r4, r2
 8003d44:	2730      	movs	r7, #48	@ 0x30
 8003d46:	f05f 0800 	movs.w	r8, #0
 8003d4a:	46b1      	mov	r9, r6
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	0039      	movs	r1, r7
 8003d50:	4648      	mov	r0, r9
 8003d52:	f003 ffe1 	bl	8007d18 <__aeabi_memset>
 8003d56:	8aa8      	ldrh	r0, [r5, #20]
 8003d58:	8230      	strh	r0, [r6, #16]
 8003d5a:	89a8      	ldrh	r0, [r5, #12]
 8003d5c:	8270      	strh	r0, [r6, #18]
 8003d5e:	7ba8      	ldrb	r0, [r5, #14]
 8003d60:	82b0      	strh	r0, [r6, #20]
 8003d62:	8ae8      	ldrh	r0, [r5, #22]
 8003d64:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003d66:	7e28      	ldrb	r0, [r5, #24]
 8003d68:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8003d6c:	7e68      	ldrb	r0, [r5, #25]
 8003d6e:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8003d72:	2c00      	cmp	r4, #0
 8003d74:	d00b      	beq.n	8003d8e <??ZbZclClusterInitApsdeReq_0>
 8003d76:	8ab0      	ldrh	r0, [r6, #20]
 8003d78:	28ff      	cmp	r0, #255	@ 0xff
 8003d7a:	d101      	bne.n	8003d80 <??ZbZclClusterInitApsdeReq_1>
 8003d7c:	8860      	ldrh	r0, [r4, #2]
 8003d7e:	82b0      	strh	r0, [r6, #20]

08003d80 <??ZbZclClusterInitApsdeReq_1>:
 8003d80:	8c20      	ldrh	r0, [r4, #32]
 8003d82:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003d86:	4288      	cmp	r0, r1
 8003d88:	d001      	beq.n	8003d8e <??ZbZclClusterInitApsdeReq_0>
 8003d8a:	8c20      	ldrh	r0, [r4, #32]
 8003d8c:	8230      	strh	r0, [r6, #16]

08003d8e <??ZbZclClusterInitApsdeReq_0>:
 8003d8e:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08003d94 <zcl_cluster_command_dummy>:
 8003d94:	0003      	movs	r3, r0
 8003d96:	20ff      	movs	r0, #255	@ 0xff
 8003d98:	4770      	bx	lr

08003d9a <ZbZclClusterAlloc>:
 8003d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9e:	0006      	movs	r6, r0
 8003da0:	000f      	movs	r7, r1
 8003da2:	4698      	mov	r8, r3
 8003da4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003da6:	2f6c      	cmp	r7, #108	@ 0x6c
 8003da8:	d201      	bcs.n	8003dae <??ZbZclClusterAlloc_0>
 8003daa:	2000      	movs	r0, #0
 8003dac:	e083      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003dae <??ZbZclClusterAlloc_0>:
 8003dae:	f20f 2914 	addw	r9, pc, #532	@ 0x214
 8003db2:	2300      	movs	r3, #0
 8003db4:	464a      	mov	r2, r9
 8003db6:	0039      	movs	r1, r7
 8003db8:	0030      	movs	r0, r6
 8003dba:	f00f fc39 	bl	8013630 <zb_heap_alloc>
 8003dbe:	0004      	movs	r4, r0
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d101      	bne.n	8003dc8 <??ZbZclClusterAlloc_2>
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	e076      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003dc8 <??ZbZclClusterAlloc_2>:
 8003dc8:	9701      	str	r7, [sp, #4]
 8003dca:	f05f 0a00 	movs.w	sl, #0
 8003dce:	46a3      	mov	fp, r4
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	9901      	ldr	r1, [sp, #4]
 8003dd4:	4658      	mov	r0, fp
 8003dd6:	f003 ff9f 	bl	8007d18 <__aeabi_memset>
 8003dda:	6024      	str	r4, [r4, #0]
 8003ddc:	6064      	str	r4, [r4, #4]
 8003dde:	60a6      	str	r6, [r4, #8]
 8003de0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8003de4:	81a0      	strh	r0, [r4, #12]
 8003de6:	f884 800e 	strb.w	r8, [r4, #14]
 8003dea:	2000      	movs	r0, #0
 8003dec:	8220      	strh	r0, [r4, #16]
 8003dee:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8003df2:	82a0      	strh	r0, [r4, #20]
 8003df4:	200f      	movs	r0, #15
 8003df6:	82e0      	strh	r0, [r4, #22]
 8003df8:	2001      	movs	r0, #1
 8003dfa:	7620      	strb	r0, [r4, #24]
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	7660      	strb	r0, [r4, #25]
 8003e00:	2039      	movs	r0, #57	@ 0x39
 8003e02:	8360      	strh	r0, [r4, #26]
 8003e04:	7725      	strb	r5, [r4, #28]
 8003e06:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8003e0a:	6260      	str	r0, [r4, #36]	@ 0x24
 8003e0c:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8003e10:	62a0      	str	r0, [r4, #40]	@ 0x28
 8003e12:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8003e16:	6320      	str	r0, [r4, #48]	@ 0x30
 8003e18:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8003e1c:	6360      	str	r0, [r4, #52]	@ 0x34
 8003e1e:	9400      	str	r4, [sp, #0]
 8003e20:	f8df 33d4 	ldr.w	r3, [pc, #980]	@ 80041f8 <??DataTable5_1>
 8003e24:	2281      	movs	r2, #129	@ 0x81
 8003e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e2a:	0030      	movs	r0, r6
 8003e2c:	f00e ff54 	bl	8012cd8 <ZbMsgFilterRegister>
 8003e30:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003e32:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d104      	bne.n	8003e42 <??ZbZclClusterAlloc_3>
 8003e38:	0020      	movs	r0, r4
 8003e3a:	f000 f870 	bl	8003f1e <ZbZclClusterFree>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e039      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003e42 <??ZbZclClusterAlloc_3>:
 8003e42:	0022      	movs	r2, r4
 8003e44:	f8df 13b4 	ldr.w	r1, [pc, #948]	@ 80041fc <??DataTable5_2>
 8003e48:	0030      	movs	r0, r6
 8003e4a:	f00f f801 	bl	8012e50 <ZbTimerAlloc>
 8003e4e:	63a0      	str	r0, [r4, #56]	@ 0x38
 8003e50:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d104      	bne.n	8003e60 <??ZbZclClusterAlloc_4>
 8003e56:	0020      	movs	r0, r4
 8003e58:	f000 f861 	bl	8003f1e <ZbZclClusterFree>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e02a      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003e60 <??ZbZclClusterAlloc_4>:
 8003e60:	0022      	movs	r2, r4
 8003e62:	f20f 1125 	addw	r1, pc, #293	@ 0x125
 8003e66:	0030      	movs	r0, r6
 8003e68:	f00e fff2 	bl	8012e50 <ZbTimerAlloc>
 8003e6c:	6520      	str	r0, [r4, #80]	@ 0x50
 8003e6e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d104      	bne.n	8003e7e <??ZbZclClusterAlloc_5>
 8003e74:	0020      	movs	r0, r4
 8003e76:	f000 f852 	bl	8003f1e <ZbZclClusterFree>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e01b      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003e7e <??ZbZclClusterAlloc_5>:
 8003e7e:	21ac      	movs	r1, #172	@ 0xac
 8003e80:	0020      	movs	r0, r4
 8003e82:	f7ff fe24 	bl	8003ace <ZbZclClusterSetMinSecurity>
 8003e86:	2201      	movs	r2, #1
 8003e88:	f8df 1374 	ldr.w	r1, [pc, #884]	@ 8004200 <??DataTable5_3>
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fd feff 	bl	8001c90 <ZbZclAttrAppendList>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d007      	beq.n	8003ea6 <??ZbZclClusterAlloc_6>
 8003e96:	2300      	movs	r3, #0
 8003e98:	464a      	mov	r2, r9
 8003e9a:	0021      	movs	r1, r4
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	f00f fbd6 	bl	801364e <zb_heap_free>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e007      	b.n	8003eb6 <??ZbZclClusterAlloc_1>

08003ea6 <??ZbZclClusterAlloc_6>:
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8003eae:	0020      	movs	r0, r4
 8003eb0:	f7fd fdd7 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8003eb4:	0020      	movs	r0, r4

08003eb6 <??ZbZclClusterAlloc_1>:
 8003eb6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003eba <ZbZclClusterAttach>:
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	0004      	movs	r4, r0
 8003ebe:	7ba0      	ldrb	r0, [r4, #14]
 8003ec0:	28ff      	cmp	r0, #255	@ 0xff
 8003ec2:	d104      	bne.n	8003ece <??ZbZclClusterAttach_0>
 8003ec4:	89a0      	ldrh	r0, [r4, #12]
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d001      	beq.n	8003ece <??ZbZclClusterAttach_0>
 8003eca:	89a0      	ldrh	r0, [r4, #12]
 8003ecc:	280a      	cmp	r0, #10

08003ece <??ZbZclClusterAttach_0>:
 8003ece:	7ba0      	ldrb	r0, [r4, #14]
 8003ed0:	28ff      	cmp	r0, #255	@ 0xff
 8003ed2:	d00b      	beq.n	8003eec <??ZbZclClusterAttach_1>
 8003ed4:	7f23      	ldrb	r3, [r4, #28]
 8003ed6:	8aa2      	ldrh	r2, [r4, #20]
 8003ed8:	7ba1      	ldrb	r1, [r4, #14]
 8003eda:	0020      	movs	r0, r4
 8003edc:	f00f fb0d 	bl	80134fa <ZbZclClusterBind>
 8003ee0:	0001      	movs	r1, r0
 8003ee2:	b2c9      	uxtb	r1, r1
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d001      	beq.n	8003eec <??ZbZclClusterAttach_1>
 8003ee8:	b2c0      	uxtb	r0, r0
 8003eea:	e005      	b.n	8003ef8 <??ZbZclClusterAttach_2>

08003eec <??ZbZclClusterAttach_1>:
 8003eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d101      	bne.n	8003ef6 <??ZbZclClusterAttach_3>
 8003ef2:	48c4      	ldr	r0, [pc, #784]	@ (8004204 <??DataTable5_4>)
 8003ef4:	65a0      	str	r0, [r4, #88]	@ 0x58

08003ef6 <??ZbZclClusterAttach_3>:
 8003ef6:	2000      	movs	r0, #0

08003ef8 <??ZbZclClusterAttach_2>:
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <ZbZclClusterDetach>:
 8003efa:	b510      	push	{r4, lr}
 8003efc:	0004      	movs	r4, r0
 8003efe:	68a0      	ldr	r0, [r4, #8]
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d00b      	beq.n	8003f1c <??ZbZclClusterDetach_0>

08003f04 <??ZbZclClusterDetach_1>:
 8003f04:	0020      	movs	r0, r4
 8003f06:	f00f fb3b 	bl	8013580 <ZbZclClusterUnbind>
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f00f fb64 	bl	80135d8 <ZbZclClusterRemoveAlarmResetHandler>
 8003f10:	7ba0      	ldrb	r0, [r4, #14]
 8003f12:	28ff      	cmp	r0, #255	@ 0xff
 8003f14:	d002      	beq.n	8003f1c <??ZbZclClusterDetach_0>
 8003f16:	0020      	movs	r0, r4
 8003f18:	f00f faba 	bl	8013490 <ZbZclClusterEndpointRemove>

08003f1c <??ZbZclClusterDetach_0>:
 8003f1c:	bd10      	pop	{r4, pc}

08003f1e <ZbZclClusterFree>:
 8003f1e:	b538      	push	{r3, r4, r5, lr}
 8003f20:	0005      	movs	r5, r0
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	2c00      	cmp	r4, #0
 8003f26:	d02d      	beq.n	8003f84 <??ZbZclClusterFree_0>

08003f28 <??ZbZclClusterFree_1>:
 8003f28:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d004      	beq.n	8003f38 <??ZbZclClusterFree_2>
 8003f2e:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8003f30:	f00e ffe0 	bl	8012ef4 <ZbTimerFree>
 8003f34:	2000      	movs	r0, #0
 8003f36:	6528      	str	r0, [r5, #80]	@ 0x50

08003f38 <??ZbZclClusterFree_2>:
 8003f38:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d004      	beq.n	8003f48 <??ZbZclClusterFree_3>
 8003f3e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8003f40:	f00e ffd8 	bl	8012ef4 <ZbTimerFree>
 8003f44:	2000      	movs	r0, #0
 8003f46:	63a8      	str	r0, [r5, #56]	@ 0x38

08003f48 <??ZbZclClusterFree_3>:
 8003f48:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d005      	beq.n	8003f5a <??ZbZclClusterFree_4>
 8003f4e:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8003f50:	0020      	movs	r0, r4
 8003f52:	f00e ff25 	bl	8012da0 <ZbMsgFilterRemove>
 8003f56:	2000      	movs	r0, #0
 8003f58:	62e8      	str	r0, [r5, #44]	@ 0x2c

08003f5a <??ZbZclClusterFree_4>:
 8003f5a:	0028      	movs	r0, r5
 8003f5c:	f7fe fc51 	bl	8002802 <ZbZclReportCleanup>
 8003f60:	0028      	movs	r0, r5
 8003f62:	f7ff ffca 	bl	8003efa <ZbZclClusterDetach>
 8003f66:	0028      	movs	r0, r5
 8003f68:	f7fd ff9e 	bl	8001ea8 <ZbZclAttrFreeList>
 8003f6c:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d002      	beq.n	8003f78 <??ZbZclClusterFree_5>
 8003f72:	0028      	movs	r0, r5
 8003f74:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8003f76:	4788      	blx	r1

08003f78 <??ZbZclClusterFree_5>:
 8003f78:	2300      	movs	r3, #0
 8003f7a:	a212      	add	r2, pc, #72	@ (adr r2, 8003fc4 <??DataTable4>)
 8003f7c:	0029      	movs	r1, r5
 8003f7e:	0020      	movs	r0, r4
 8003f80:	f00f fb65 	bl	801364e <zb_heap_free>

08003f84 <??ZbZclClusterFree_0>:
 8003f84:	bd31      	pop	{r0, r4, r5, pc}
	...

08003f88 <zcl_cluster_persist_timer>:
 8003f88:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8003f8a:	0005      	movs	r5, r0
 8003f8c:	000e      	movs	r6, r1
 8003f8e:	0037      	movs	r7, r6
 8003f90:	a902      	add	r1, sp, #8
 8003f92:	0038      	movs	r0, r7
 8003f94:	f000 f818 	bl	8003fc8 <zcl_persist_read_attrs>
 8003f98:	0004      	movs	r4, r0
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	d010      	beq.n	8003fc0 <??zcl_cluster_persist_timer_0>
 8003f9e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8003fa2:	9001      	str	r0, [sp, #4]
 8003fa4:	9400      	str	r4, [sp, #0]
 8003fa6:	7bbb      	ldrb	r3, [r7, #14]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	7f3a      	ldrb	r2, [r7, #28]
 8003fac:	89b9      	ldrh	r1, [r7, #12]
 8003fae:	68b8      	ldr	r0, [r7, #8]
 8003fb0:	f000 f92a 	bl	8004208 <zcl_persist_send_cache>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	a203      	add	r2, pc, #12	@ (adr r2, 8003fc4 <??DataTable4>)
 8003fb8:	0021      	movs	r1, r4
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f00f fb47 	bl	801364e <zb_heap_free>

08003fc0 <??zcl_cluster_persist_timer_0>:
 8003fc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08003fc4 <??DataTable4>:
 8003fc4:	0000 0000                                   ....

08003fc8 <zcl_persist_read_attrs>:
 8003fc8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b08c      	sub	sp, #48	@ 0x30
 8003fce:	0007      	movs	r7, r0
 8003fd0:	f05f 0b00 	movs.w	fp, #0
 8003fd4:	f05f 0900 	movs.w	r9, #0
 8003fd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fda:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8003fde:	4288      	cmp	r0, r1
 8003fe0:	d001      	beq.n	8003fe6 <??zcl_persist_read_attrs_0>
 8003fe2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8003fe4:	e000      	b.n	8003fe8 <??zcl_persist_read_attrs_1>

08003fe6 <??zcl_persist_read_attrs_0>:
 8003fe6:	2400      	movs	r4, #0

08003fe8 <??zcl_persist_read_attrs_1>:
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	d01e      	beq.n	800402a <??zcl_persist_read_attrs_2>
 8003fec:	46a0      	mov	r8, r4
 8003fee:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003ff2:	7900      	ldrb	r0, [r0, #4]
 8003ff4:	0740      	lsls	r0, r0, #29
 8003ff6:	d50f      	bpl.n	8004018 <??zcl_persist_read_attrs_3>

08003ff8 <??zcl_persist_read_attrs_4>:
 8003ff8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d004      	beq.n	800400a <??zcl_persist_read_attrs_5>
 8004000:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004004:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004008:	d300      	bcc.n	800400c <??zcl_persist_read_attrs_6>

0800400a <??zcl_persist_read_attrs_5>:
 800400a:	e005      	b.n	8004018 <??zcl_persist_read_attrs_3>

0800400c <??zcl_persist_read_attrs_6>:
 800400c:	f119 0904 	adds.w	r9, r9, #4
 8004010:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004014:	eb10 0909 	adds.w	r9, r0, r9

08004018 <??zcl_persist_read_attrs_3>:
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 800401e:	4288      	cmp	r0, r1
 8004020:	d001      	beq.n	8004026 <??zcl_persist_read_attrs_7>
 8004022:	6824      	ldr	r4, [r4, #0]
 8004024:	e7e0      	b.n	8003fe8 <??zcl_persist_read_attrs_1>

08004026 <??zcl_persist_read_attrs_7>:
 8004026:	2400      	movs	r4, #0
 8004028:	e7de      	b.n	8003fe8 <??zcl_persist_read_attrs_1>

0800402a <??zcl_persist_read_attrs_2>:
 800402a:	4648      	mov	r0, r9
 800402c:	b280      	uxth	r0, r0
 800402e:	2800      	cmp	r0, #0
 8004030:	d101      	bne.n	8004036 <??zcl_persist_read_attrs_8>
 8004032:	2000      	movs	r0, #0
 8004034:	e0db      	b.n	80041ee <??zcl_persist_read_attrs_9>

08004036 <??zcl_persist_read_attrs_8>:
 8004036:	2300      	movs	r3, #0
 8004038:	a26e      	add	r2, pc, #440	@ (adr r2, 80041f4 <??DataTable5>)
 800403a:	4649      	mov	r1, r9
 800403c:	b289      	uxth	r1, r1
 800403e:	68b8      	ldr	r0, [r7, #8]
 8004040:	f00f faf6 	bl	8013630 <zb_heap_alloc>
 8004044:	0005      	movs	r5, r0
 8004046:	2d00      	cmp	r5, #0
 8004048:	d101      	bne.n	800404e <??zcl_persist_read_attrs_10>
 800404a:	2000      	movs	r0, #0
 800404c:	e0cf      	b.n	80041ee <??zcl_persist_read_attrs_9>

0800404e <??zcl_persist_read_attrs_10>:
 800404e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004050:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004054:	4288      	cmp	r0, r1
 8004056:	d001      	beq.n	800405c <??zcl_persist_read_attrs_11>
 8004058:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800405a:	e000      	b.n	800405e <??zcl_persist_read_attrs_12>

0800405c <??zcl_persist_read_attrs_11>:
 800405c:	2400      	movs	r4, #0

0800405e <??zcl_persist_read_attrs_12>:
 800405e:	2c00      	cmp	r4, #0
 8004060:	f000 80c1 	beq.w	80041e6 <??zcl_persist_read_attrs_13>
 8004064:	46a0      	mov	r8, r4
 8004066:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800406a:	7900      	ldrb	r0, [r0, #4]
 800406c:	0740      	lsls	r0, r0, #29
 800406e:	f140 80b1 	bpl.w	80041d4 <??zcl_persist_read_attrs_14>

08004072 <??zcl_persist_read_attrs_15>:
 8004072:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004076:	7900      	ldrb	r0, [r0, #4]
 8004078:	06c0      	lsls	r0, r0, #27
 800407a:	d566      	bpl.n	800414a <??zcl_persist_read_attrs_16>
 800407c:	4658      	mov	r0, fp
 800407e:	b280      	uxth	r0, r0
 8004080:	4428      	add	r0, r5
 8004082:	1d00      	adds	r0, r0, #4
 8004084:	9001      	str	r0, [sp, #4]
 8004086:	4649      	mov	r1, r9
 8004088:	b289      	uxth	r1, r1
 800408a:	4658      	mov	r0, fp
 800408c:	b280      	uxth	r0, r0
 800408e:	1a09      	subs	r1, r1, r0
 8004090:	1f08      	subs	r0, r1, #4
 8004092:	f8ad 0000 	strh.w	r0, [sp]
 8004096:	2020      	movs	r0, #32
 8004098:	9003      	str	r0, [sp, #12]
 800409a:	2000      	movs	r0, #0
 800409c:	9002      	str	r0, [sp, #8]
 800409e:	f10d 0a10 	add.w	sl, sp, #16
 80040a2:	9a02      	ldr	r2, [sp, #8]
 80040a4:	9903      	ldr	r1, [sp, #12]
 80040a6:	4650      	mov	r0, sl
 80040a8:	f003 fe36 	bl	8007d18 <__aeabi_memset>
 80040ac:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80040b0:	9004      	str	r0, [sp, #16]
 80040b2:	2000      	movs	r0, #0
 80040b4:	f88d 0014 	strb.w	r0, [sp, #20]
 80040b8:	9801      	ldr	r0, [sp, #4]
 80040ba:	9006      	str	r0, [sp, #24]
 80040bc:	f8bd 0000 	ldrh.w	r0, [sp]
 80040c0:	9007      	str	r0, [sp, #28]
 80040c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80040c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80040c6:	aa04      	add	r2, sp, #16
 80040c8:	4641      	mov	r1, r8
 80040ca:	0038      	movs	r0, r7
 80040cc:	f7fd feb8 	bl	8001e40 <ZbZclAttrCallbackExec>
 80040d0:	4682      	mov	sl, r0
 80040d2:	4650      	mov	r0, sl
 80040d4:	b2c0      	uxtb	r0, r0
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d17c      	bne.n	80041d4 <??zcl_persist_read_attrs_14>

080040da <??zcl_persist_read_attrs_17>:
 80040da:	2300      	movs	r3, #0
 80040dc:	f8bd 2000 	ldrh.w	r2, [sp]
 80040e0:	9901      	ldr	r1, [sp, #4]
 80040e2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80040e6:	7880      	ldrb	r0, [r0, #2]
 80040e8:	f7fc ffa5 	bl	8001036 <ZbZclAttrParseLength>
 80040ec:	0006      	movs	r6, r0
 80040ee:	2e01      	cmp	r6, #1
 80040f0:	db02      	blt.n	80040f8 <??zcl_persist_read_attrs_18>
 80040f2:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 80040f6:	db00      	blt.n	80040fa <??zcl_persist_read_attrs_19>

080040f8 <??zcl_persist_read_attrs_18>:
 80040f8:	e06c      	b.n	80041d4 <??zcl_persist_read_attrs_14>

080040fa <??zcl_persist_read_attrs_19>:
 80040fa:	4648      	mov	r0, r9
 80040fc:	b280      	uxth	r0, r0
 80040fe:	4659      	mov	r1, fp
 8004100:	b289      	uxth	r1, r1
 8004102:	fa11 f186 	uxtah	r1, r1, r6
 8004106:	1d09      	adds	r1, r1, #4
 8004108:	4288      	cmp	r0, r1
 800410a:	d207      	bcs.n	800411c <??zcl_persist_read_attrs_20>
 800410c:	2300      	movs	r3, #0
 800410e:	a239      	add	r2, pc, #228	@ (adr r2, 80041f4 <??DataTable5>)
 8004110:	0029      	movs	r1, r5
 8004112:	68b8      	ldr	r0, [r7, #8]
 8004114:	f00f fa9b 	bl	801364e <zb_heap_free>
 8004118:	2000      	movs	r0, #0
 800411a:	e068      	b.n	80041ee <??zcl_persist_read_attrs_9>

0800411c <??zcl_persist_read_attrs_20>:
 800411c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004120:	8801      	ldrh	r1, [r0, #0]
 8004122:	4658      	mov	r0, fp
 8004124:	b280      	uxth	r0, r0
 8004126:	4428      	add	r0, r5
 8004128:	f003 f817 	bl	800715a <putle16>
 800412c:	f11b 0b02 	adds.w	fp, fp, #2
 8004130:	0030      	movs	r0, r6
 8004132:	0001      	movs	r1, r0
 8004134:	b289      	uxth	r1, r1
 8004136:	4658      	mov	r0, fp
 8004138:	b280      	uxth	r0, r0
 800413a:	4428      	add	r0, r5
 800413c:	f003 f80d 	bl	800715a <putle16>
 8004140:	f11b 0b02 	adds.w	fp, fp, #2
 8004144:	eb16 0b0b 	adds.w	fp, r6, fp
 8004148:	e044      	b.n	80041d4 <??zcl_persist_read_attrs_14>

0800414a <??zcl_persist_read_attrs_16>:
 800414a:	2300      	movs	r3, #0
 800414c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004150:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004154:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004158:	7880      	ldrb	r0, [r0, #2]
 800415a:	f7fc ff6c 	bl	8001036 <ZbZclAttrParseLength>
 800415e:	0006      	movs	r6, r0
 8004160:	2e01      	cmp	r6, #1
 8004162:	db02      	blt.n	800416a <??zcl_persist_read_attrs_21>
 8004164:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8004168:	db00      	blt.n	800416c <??zcl_persist_read_attrs_22>

0800416a <??zcl_persist_read_attrs_21>:
 800416a:	e033      	b.n	80041d4 <??zcl_persist_read_attrs_14>

0800416c <??zcl_persist_read_attrs_22>:
 800416c:	4648      	mov	r0, r9
 800416e:	b280      	uxth	r0, r0
 8004170:	4659      	mov	r1, fp
 8004172:	b289      	uxth	r1, r1
 8004174:	fa11 f186 	uxtah	r1, r1, r6
 8004178:	1d09      	adds	r1, r1, #4
 800417a:	4288      	cmp	r0, r1
 800417c:	d207      	bcs.n	800418e <??zcl_persist_read_attrs_23>
 800417e:	2300      	movs	r3, #0
 8004180:	a21c      	add	r2, pc, #112	@ (adr r2, 80041f4 <??DataTable5>)
 8004182:	0029      	movs	r1, r5
 8004184:	68b8      	ldr	r0, [r7, #8]
 8004186:	f00f fa62 	bl	801364e <zb_heap_free>
 800418a:	2000      	movs	r0, #0
 800418c:	e02f      	b.n	80041ee <??zcl_persist_read_attrs_9>

0800418e <??zcl_persist_read_attrs_23>:
 800418e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004192:	8801      	ldrh	r1, [r0, #0]
 8004194:	4658      	mov	r0, fp
 8004196:	b280      	uxth	r0, r0
 8004198:	4428      	add	r0, r5
 800419a:	f002 ffde 	bl	800715a <putle16>
 800419e:	f11b 0b02 	adds.w	fp, fp, #2
 80041a2:	0030      	movs	r0, r6
 80041a4:	0001      	movs	r1, r0
 80041a6:	b289      	uxth	r1, r1
 80041a8:	4658      	mov	r0, fp
 80041aa:	b280      	uxth	r0, r0
 80041ac:	4428      	add	r0, r5
 80041ae:	f002 ffd4 	bl	800715a <putle16>
 80041b2:	f11b 0b02 	adds.w	fp, fp, #2
 80041b6:	9601      	str	r6, [sp, #4]
 80041b8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80041bc:	9000      	str	r0, [sp, #0]
 80041be:	4658      	mov	r0, fp
 80041c0:	b280      	uxth	r0, r0
 80041c2:	eb05 0a00 	add.w	sl, r5, r0
 80041c6:	9a01      	ldr	r2, [sp, #4]
 80041c8:	9900      	ldr	r1, [sp, #0]
 80041ca:	4650      	mov	r0, sl
 80041cc:	f013 f83b 	bl	8017246 <__aeabi_memcpy>
 80041d0:	eb16 0b0b 	adds.w	fp, r6, fp

080041d4 <??zcl_persist_read_attrs_14>:
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 80041da:	4288      	cmp	r0, r1
 80041dc:	d001      	beq.n	80041e2 <??zcl_persist_read_attrs_24>
 80041de:	6824      	ldr	r4, [r4, #0]
 80041e0:	e73d      	b.n	800405e <??zcl_persist_read_attrs_12>

080041e2 <??zcl_persist_read_attrs_24>:
 80041e2:	2400      	movs	r4, #0
 80041e4:	e73b      	b.n	800405e <??zcl_persist_read_attrs_12>

080041e6 <??zcl_persist_read_attrs_13>:
 80041e6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80041e8:	f8a0 b000 	strh.w	fp, [r0]
 80041ec:	0028      	movs	r0, r5

080041ee <??zcl_persist_read_attrs_9>:
 80041ee:	b00d      	add	sp, #52	@ 0x34
 80041f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080041f4 <??DataTable5>:
 80041f4:	0000 0000                                   ....

080041f8 <??DataTable5_1>:
 80041f8:	2877 0800                                   w(..

080041fc <??DataTable5_2>:
 80041fc:	22ed 0800                                   ."..

08004200 <??DataTable5_3>:
 8004200:	9548 0801                                   H...

08004204 <??DataTable5_4>:
 8004204:	3d95 0800                                   .=..

08004208 <zcl_persist_send_cache>:
 8004208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	b098      	sub	sp, #96	@ 0x60
 800420e:	0005      	movs	r5, r0
 8004210:	001e      	movs	r6, r3
 8004212:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8004214:	f05f 0900 	movs.w	r9, #0
 8004218:	0030      	movs	r0, r6
 800421a:	b280      	uxth	r0, r0
 800421c:	28ff      	cmp	r0, #255	@ 0xff
 800421e:	d101      	bne.n	8004224 <??zcl_persist_send_cache_0>
 8004220:	2085      	movs	r0, #133	@ 0x85
 8004222:	e0a1      	b.n	8004368 <??zcl_persist_send_cache_1>

08004224 <??zcl_persist_send_cache_0>:
 8004224:	0020      	movs	r0, r4
 8004226:	b280      	uxth	r0, r0
 8004228:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 800422c:	4288      	cmp	r0, r1
 800422e:	d301      	bcc.n	8004234 <??zcl_persist_send_cache_2>
 8004230:	2089      	movs	r0, #137	@ 0x89
 8004232:	e099      	b.n	8004368 <??zcl_persist_send_cache_1>

08004234 <??zcl_persist_send_cache_2>:
 8004234:	f05f 0a08 	movs.w	sl, #8
 8004238:	f05f 0b00 	movs.w	fp, #0
 800423c:	466f      	mov	r7, sp
 800423e:	465a      	mov	r2, fp
 8004240:	4651      	mov	r1, sl
 8004242:	0038      	movs	r0, r7
 8004244:	f003 fd68 	bl	8007d18 <__aeabi_memset>
 8004248:	2001      	movs	r0, #1
 800424a:	f88d 0000 	strb.w	r0, [sp]
 800424e:	2001      	movs	r0, #1
 8004250:	f88d 0001 	strb.w	r0, [sp, #1]
 8004254:	2000      	movs	r0, #0
 8004256:	f88d 0002 	strb.w	r0, [sp, #2]
 800425a:	2001      	movs	r0, #1
 800425c:	f88d 0003 	strb.w	r0, [sp, #3]
 8004260:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 8004264:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004268:	f00e ffd6 	bl	8013218 <ZbZclGetNextSeqnum>
 800426c:	f88d 0006 	strb.w	r0, [sp, #6]
 8004270:	2000      	movs	r0, #0
 8004272:	f88d 0007 	strb.w	r0, [sp, #7]
 8004276:	2205      	movs	r2, #5
 8004278:	a904      	add	r1, sp, #16
 800427a:	4668      	mov	r0, sp
 800427c:	f002 f986 	bl	800658c <ZbZclAppendHeader>
 8004280:	0007      	movs	r7, r0
 8004282:	2f00      	cmp	r7, #0
 8004284:	d501      	bpl.n	800428a <??zcl_persist_send_cache_3>
 8004286:	2085      	movs	r0, #133	@ 0x85
 8004288:	e06e      	b.n	8004368 <??zcl_persist_send_cache_1>

0800428a <??zcl_persist_send_cache_3>:
 800428a:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 800428e:	a804      	add	r0, sp, #16
 8004290:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004294:	a812      	add	r0, sp, #72	@ 0x48
 8004296:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 800429a:	6047      	str	r7, [r0, #4]
 800429c:	f119 0901 	adds.w	r9, r9, #1
 80042a0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80042a4:	a802      	add	r0, sp, #8
 80042a6:	f002 ff58 	bl	800715a <putle16>
 80042aa:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 80042ae:	f88d 000a 	strb.w	r0, [sp, #10]
 80042b2:	a802      	add	r0, sp, #8
 80042b4:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80042b8:	2003      	movs	r0, #3
 80042ba:	a912      	add	r1, sp, #72	@ 0x48
 80042bc:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80042c0:	6048      	str	r0, [r1, #4]
 80042c2:	f119 0901 	adds.w	r9, r9, #1
 80042c6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80042c8:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80042cc:	0020      	movs	r0, r4
 80042ce:	b280      	uxth	r0, r0
 80042d0:	a912      	add	r1, sp, #72	@ 0x48
 80042d2:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80042d6:	6048      	str	r0, [r1, #4]
 80042d8:	f119 0901 	adds.w	r9, r9, #1
 80042dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80042e0:	f05f 0a30 	movs.w	sl, #48	@ 0x30
 80042e4:	f05f 0900 	movs.w	r9, #0
 80042e8:	f10d 0b18 	add.w	fp, sp, #24
 80042ec:	464a      	mov	r2, r9
 80042ee:	4651      	mov	r1, sl
 80042f0:	4658      	mov	r0, fp
 80042f2:	f003 fd11 	bl	8007d18 <__aeabi_memset>
 80042f6:	2003      	movs	r0, #3
 80042f8:	f88d 0018 	strb.w	r0, [sp, #24]
 80042fc:	0028      	movs	r0, r5
 80042fe:	f00e fa59 	bl	80127b4 <ZbExtendedAddress>
 8004302:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004306:	20ff      	movs	r0, #255	@ 0xff
 8004308:	f8ad 001a 	strh.w	r0, [sp, #26]
 800430c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004310:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 8004314:	f8ad 802a 	strh.w	r8, [sp, #42]	@ 0x2a
 8004318:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800431c:	a812      	add	r0, sp, #72	@ 0x48
 800431e:	900c      	str	r0, [sp, #48]	@ 0x30
 8004320:	9803      	ldr	r0, [sp, #12]
 8004322:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8004326:	2000      	movs	r0, #0
 8004328:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 800432c:	2000      	movs	r0, #0
 800432e:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 8004332:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004336:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800433a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 800433e:	f050 0008 	orrs.w	r0, r0, #8
 8004342:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004346:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 800434a:	f050 0004 	orrs.w	r0, r0, #4
 800434e:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004352:	2300      	movs	r3, #0
 8004354:	2200      	movs	r2, #0
 8004356:	a906      	add	r1, sp, #24
 8004358:	0028      	movs	r0, r5
 800435a:	f00e fb41 	bl	80129e0 <ZbApsdeDataReqCallback>
 800435e:	2800      	cmp	r0, #0
 8004360:	d001      	beq.n	8004366 <??zcl_persist_send_cache_4>
 8004362:	2001      	movs	r0, #1
 8004364:	e000      	b.n	8004368 <??zcl_persist_send_cache_1>

08004366 <??zcl_persist_send_cache_4>:
 8004366:	2000      	movs	r0, #0

08004368 <??zcl_persist_send_cache_1>:
 8004368:	b01b      	add	sp, #108	@ 0x6c
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004370 <zcl_attr_cb>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	0004      	movs	r4, r0
 8004376:	000d      	movs	r5, r1
 8004378:	7928      	ldrb	r0, [r5, #4]
 800437a:	2801      	cmp	r0, #1
 800437c:	d10f      	bne.n	800439e <??zcl_attr_cb_0>
 800437e:	69e8      	ldr	r0, [r5, #28]
 8004380:	9003      	str	r0, [sp, #12]
 8004382:	8a28      	ldrh	r0, [r5, #16]
 8004384:	9002      	str	r0, [sp, #8]
 8004386:	6968      	ldr	r0, [r5, #20]
 8004388:	9001      	str	r0, [sp, #4]
 800438a:	68e8      	ldr	r0, [r5, #12]
 800438c:	9000      	str	r0, [sp, #0]
 800438e:	68ab      	ldr	r3, [r5, #8]
 8004390:	6828      	ldr	r0, [r5, #0]
 8004392:	8802      	ldrh	r2, [r0, #0]
 8004394:	69a9      	ldr	r1, [r5, #24]
 8004396:	0020      	movs	r0, r4
 8004398:	f001 fb71 	bl	8005a7e <zcl_attr_write_cb>
 800439c:	e000      	b.n	80043a0 <??zcl_attr_cb_1>

0800439e <??zcl_attr_cb_0>:
 800439e:	2001      	movs	r0, #1

080043a0 <??zcl_attr_cb_1>:
 80043a0:	b005      	add	sp, #20
 80043a2:	bd30      	pop	{r4, r5, pc}

080043a4 <ZbZclColorServerAlloc>:
 80043a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	4688      	mov	r8, r1
 80043ac:	0014      	movs	r4, r2
 80043ae:	001d      	movs	r5, r3
 80043b0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80043b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	d101      	bne.n	80043be <??ZbZclColorServerAlloc_0>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e167      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043be <??ZbZclColorServerAlloc_0>:
 80043be:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80043c2:	0780      	lsls	r0, r0, #30
 80043c4:	d505      	bpl.n	80043d2 <??ZbZclColorServerAlloc_2>
 80043c6:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80043ca:	07c0      	lsls	r0, r0, #31
 80043cc:	d401      	bmi.n	80043d2 <??ZbZclColorServerAlloc_2>
 80043ce:	2000      	movs	r0, #0
 80043d0:	e15d      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043d2 <??ZbZclColorServerAlloc_2>:
 80043d2:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80043d6:	0700      	lsls	r0, r0, #28
 80043d8:	d401      	bmi.n	80043de <??ZbZclColorServerAlloc_3>
 80043da:	2000      	movs	r0, #0
 80043dc:	e157      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043de <??ZbZclColorServerAlloc_3>:
 80043de:	2c00      	cmp	r4, #0
 80043e0:	d016      	beq.n	8004410 <??ZbZclColorServerAlloc_4>
 80043e2:	0020      	movs	r0, r4
 80043e4:	f7ff fb50 	bl	8003a88 <ZbZclClusterGetClusterId>
 80043e8:	2806      	cmp	r0, #6
 80043ea:	d001      	beq.n	80043f0 <??ZbZclColorServerAlloc_5>
 80043ec:	2000      	movs	r0, #0
 80043ee:	e14e      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043f0 <??ZbZclColorServerAlloc_5>:
 80043f0:	0020      	movs	r0, r4
 80043f2:	f7ff fc51 	bl	8003c98 <ZbZclClusterGetDirection>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d001      	beq.n	80043fe <??ZbZclColorServerAlloc_6>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e147      	b.n	800468e <??ZbZclColorServerAlloc_1>

080043fe <??ZbZclColorServerAlloc_6>:
 80043fe:	0020      	movs	r0, r4
 8004400:	f7ff fb3c 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8004404:	4641      	mov	r1, r8
 8004406:	b2c9      	uxtb	r1, r1
 8004408:	4288      	cmp	r0, r1
 800440a:	d001      	beq.n	8004410 <??ZbZclColorServerAlloc_4>
 800440c:	2000      	movs	r0, #0
 800440e:	e13e      	b.n	800468e <??ZbZclColorServerAlloc_1>

08004410 <??ZbZclColorServerAlloc_4>:
 8004410:	2000      	movs	r0, #0
 8004412:	9000      	str	r0, [sp, #0]
 8004414:	4643      	mov	r3, r8
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800441c:	21c0      	movs	r1, #192	@ 0xc0
 800441e:	9802      	ldr	r0, [sp, #8]
 8004420:	f7ff fcbb 	bl	8003d9a <ZbZclClusterAlloc>
 8004424:	0007      	movs	r7, r0
 8004426:	2f00      	cmp	r7, #0
 8004428:	d101      	bne.n	800442e <??ZbZclColorServerAlloc_7>
 800442a:	2000      	movs	r0, #0
 800442c:	e12f      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800442e <??ZbZclColorServerAlloc_7>:
 800442e:	2202      	movs	r2, #2
 8004430:	2300      	movs	r3, #0
 8004432:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8004436:	0038      	movs	r0, r7
 8004438:	f7fd fb13 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800443c:	f20f 206d 	addw	r0, pc, #621	@ 0x26d
 8004440:	6638      	str	r0, [r7, #96]	@ 0x60
 8004442:	f20f 4055 	addw	r0, pc, #1109	@ 0x455
 8004446:	6678      	str	r0, [r7, #100]	@ 0x64
 8004448:	f20f 7039 	addw	r0, pc, #1849	@ 0x739
 800444c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800444e:	f05f 0950 	movs.w	r9, #80	@ 0x50
 8004452:	9600      	str	r6, [sp, #0]
 8004454:	f117 0b70 	adds.w	fp, r7, #112	@ 0x70
 8004458:	464a      	mov	r2, r9
 800445a:	9900      	ldr	r1, [sp, #0]
 800445c:	4658      	mov	r0, fp
 800445e:	f012 fef2 	bl	8017246 <__aeabi_memcpy>
 8004462:	66fc      	str	r4, [r7, #108]	@ 0x6c
 8004464:	2205      	movs	r2, #5
 8004466:	498b      	ldr	r1, [pc, #556]	@ (8004694 <??DataTable1>)
 8004468:	0038      	movs	r0, r7
 800446a:	f7fd fc11 	bl	8001c90 <ZbZclAttrAppendList>
 800446e:	2800      	cmp	r0, #0
 8004470:	d004      	beq.n	800447c <??ZbZclColorServerAlloc_8>
 8004472:	0038      	movs	r0, r7
 8004474:	f7ff fd53 	bl	8003f1e <ZbZclClusterFree>
 8004478:	2000      	movs	r0, #0
 800447a:	e108      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800447c <??ZbZclColorServerAlloc_8>:
 800447c:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004480:	07c0      	lsls	r0, r0, #31
 8004482:	d50b      	bpl.n	800449c <??ZbZclColorServerAlloc_9>
 8004484:	2202      	movs	r2, #2
 8004486:	4984      	ldr	r1, [pc, #528]	@ (8004698 <??DataTable1_1>)
 8004488:	0038      	movs	r0, r7
 800448a:	f7fd fc01 	bl	8001c90 <ZbZclAttrAppendList>
 800448e:	2800      	cmp	r0, #0
 8004490:	d004      	beq.n	800449c <??ZbZclColorServerAlloc_9>
 8004492:	0038      	movs	r0, r7
 8004494:	f7ff fd43 	bl	8003f1e <ZbZclClusterFree>
 8004498:	2000      	movs	r0, #0
 800449a:	e0f8      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800449c <??ZbZclColorServerAlloc_9>:
 800449c:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80044a0:	0780      	lsls	r0, r0, #30
 80044a2:	d50b      	bpl.n	80044bc <??ZbZclColorServerAlloc_10>
 80044a4:	2201      	movs	r2, #1
 80044a6:	497d      	ldr	r1, [pc, #500]	@ (800469c <??DataTable1_2>)
 80044a8:	0038      	movs	r0, r7
 80044aa:	f7fd fbf1 	bl	8001c90 <ZbZclAttrAppendList>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d004      	beq.n	80044bc <??ZbZclColorServerAlloc_10>
 80044b2:	0038      	movs	r0, r7
 80044b4:	f7ff fd33 	bl	8003f1e <ZbZclClusterFree>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e0e8      	b.n	800468e <??ZbZclColorServerAlloc_1>

080044bc <??ZbZclColorServerAlloc_10>:
 80044bc:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80044c0:	0700      	lsls	r0, r0, #28
 80044c2:	d50b      	bpl.n	80044dc <??ZbZclColorServerAlloc_11>
 80044c4:	2202      	movs	r2, #2
 80044c6:	4976      	ldr	r1, [pc, #472]	@ (80046a0 <??DataTable1_3>)
 80044c8:	0038      	movs	r0, r7
 80044ca:	f7fd fbe1 	bl	8001c90 <ZbZclAttrAppendList>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d004      	beq.n	80044dc <??ZbZclColorServerAlloc_11>
 80044d2:	0038      	movs	r0, r7
 80044d4:	f7ff fd23 	bl	8003f1e <ZbZclClusterFree>
 80044d8:	2000      	movs	r0, #0
 80044da:	e0d8      	b.n	800468e <??ZbZclColorServerAlloc_1>

080044dc <??ZbZclColorServerAlloc_11>:
 80044dc:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80044e0:	06c0      	lsls	r0, r0, #27
 80044e2:	d50b      	bpl.n	80044fc <??ZbZclColorServerAlloc_12>
 80044e4:	2205      	movs	r2, #5
 80044e6:	496f      	ldr	r1, [pc, #444]	@ (80046a4 <??DataTable1_4>)
 80044e8:	0038      	movs	r0, r7
 80044ea:	f7fd fbd1 	bl	8001c90 <ZbZclAttrAppendList>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d004      	beq.n	80044fc <??ZbZclColorServerAlloc_12>
 80044f2:	0038      	movs	r0, r7
 80044f4:	f7ff fd13 	bl	8003f1e <ZbZclClusterFree>
 80044f8:	2000      	movs	r0, #0
 80044fa:	e0c8      	b.n	800468e <??ZbZclColorServerAlloc_1>

080044fc <??ZbZclColorServerAlloc_12>:
 80044fc:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004500:	0740      	lsls	r0, r0, #29
 8004502:	d50b      	bpl.n	800451c <??ZbZclColorServerAlloc_13>
 8004504:	2205      	movs	r2, #5
 8004506:	4968      	ldr	r1, [pc, #416]	@ (80046a8 <??DataTable1_5>)
 8004508:	0038      	movs	r0, r7
 800450a:	f7fd fbc1 	bl	8001c90 <ZbZclAttrAppendList>
 800450e:	2800      	cmp	r0, #0
 8004510:	d004      	beq.n	800451c <??ZbZclColorServerAlloc_13>
 8004512:	0038      	movs	r0, r7
 8004514:	f7ff fd03 	bl	8003f1e <ZbZclClusterFree>
 8004518:	2000      	movs	r0, #0
 800451a:	e0b8      	b.n	800468e <??ZbZclColorServerAlloc_1>

0800451c <??ZbZclColorServerAlloc_13>:
 800451c:	2d00      	cmp	r5, #0
 800451e:	d00b      	beq.n	8004538 <??ZbZclColorServerAlloc_14>
 8004520:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004522:	0029      	movs	r1, r5
 8004524:	0038      	movs	r0, r7
 8004526:	f7fd fbb3 	bl	8001c90 <ZbZclAttrAppendList>
 800452a:	2800      	cmp	r0, #0
 800452c:	d004      	beq.n	8004538 <??ZbZclColorServerAlloc_14>
 800452e:	0038      	movs	r0, r7
 8004530:	f7ff fcf5 	bl	8003f1e <ZbZclClusterFree>
 8004534:	2000      	movs	r0, #0
 8004536:	e0aa      	b.n	800468e <??ZbZclColorServerAlloc_1>

08004538 <??ZbZclColorServerAlloc_14>:
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	210f      	movs	r1, #15
 800453e:	0038      	movs	r0, r7
 8004540:	f7fd fa8f 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004544:	2201      	movs	r2, #1
 8004546:	2300      	movs	r3, #0
 8004548:	2108      	movs	r1, #8
 800454a:	0038      	movs	r0, r7
 800454c:	f7fd fa89 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004550:	f244 090a 	movw	r9, #16394	@ 0x400a
 8004554:	2200      	movs	r2, #0
 8004556:	2300      	movs	r3, #0
 8004558:	4649      	mov	r1, r9
 800455a:	0038      	movs	r0, r7
 800455c:	f7fd fa81 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004560:	2201      	movs	r2, #1
 8004562:	2300      	movs	r3, #0
 8004564:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004568:	0038      	movs	r0, r7
 800456a:	f7fd fa7a 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800456e:	2200      	movs	r2, #0
 8004570:	2300      	movs	r3, #0
 8004572:	2110      	movs	r1, #16
 8004574:	0038      	movs	r0, r7
 8004576:	f7fd fa74 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800457a:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 800457e:	07c0      	lsls	r0, r0, #31
 8004580:	d50b      	bpl.n	800459a <??ZbZclColorServerAlloc_15>
 8004582:	2200      	movs	r2, #0
 8004584:	2300      	movs	r3, #0
 8004586:	2100      	movs	r1, #0
 8004588:	0038      	movs	r0, r7
 800458a:	f7fd fa6a 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800458e:	2200      	movs	r2, #0
 8004590:	2300      	movs	r3, #0
 8004592:	2101      	movs	r1, #1
 8004594:	0038      	movs	r0, r7
 8004596:	f7fd fa64 	bl	8001a62 <ZbZclAttrIntegerWrite>

0800459a <??ZbZclColorServerAlloc_15>:
 800459a:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 800459e:	0700      	lsls	r0, r0, #28
 80045a0:	d50d      	bpl.n	80045be <??ZbZclColorServerAlloc_16>
 80045a2:	f246 126b 	movw	r2, #24939	@ 0x616b
 80045a6:	2300      	movs	r3, #0
 80045a8:	2103      	movs	r1, #3
 80045aa:	0038      	movs	r0, r7
 80045ac:	f7fd fa59 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045b0:	f246 027d 	movw	r2, #24701	@ 0x607d
 80045b4:	2300      	movs	r3, #0
 80045b6:	2104      	movs	r1, #4
 80045b8:	0038      	movs	r0, r7
 80045ba:	f7fd fa52 	bl	8001a62 <ZbZclAttrIntegerWrite>

080045be <??ZbZclColorServerAlloc_16>:
 80045be:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 80045c2:	06c0      	lsls	r0, r0, #27
 80045c4:	d523      	bpl.n	800460e <??ZbZclColorServerAlloc_17>
 80045c6:	22fa      	movs	r2, #250	@ 0xfa
 80045c8:	2300      	movs	r3, #0
 80045ca:	2107      	movs	r1, #7
 80045cc:	0038      	movs	r0, r7
 80045ce:	f7fd fa48 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	f244 010b 	movw	r1, #16395	@ 0x400b
 80045da:	0038      	movs	r0, r7
 80045dc:	f7fd fa41 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045e0:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80045e4:	2300      	movs	r3, #0
 80045e6:	f244 010c 	movw	r1, #16396	@ 0x400c
 80045ea:	0038      	movs	r0, r7
 80045ec:	f7fd fa39 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045f0:	2200      	movs	r2, #0
 80045f2:	2300      	movs	r3, #0
 80045f4:	f244 010d 	movw	r1, #16397	@ 0x400d
 80045f8:	0038      	movs	r0, r7
 80045fa:	f7fd fa32 	bl	8001a62 <ZbZclAttrIntegerWrite>
 80045fe:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8004602:	2300      	movs	r3, #0
 8004604:	f244 0110 	movw	r1, #16400	@ 0x4010
 8004608:	0038      	movs	r0, r7
 800460a:	f7fd fa2a 	bl	8001a62 <ZbZclAttrIntegerWrite>

0800460e <??ZbZclColorServerAlloc_17>:
 800460e:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004612:	0740      	lsls	r0, r0, #29
 8004614:	d523      	bpl.n	800465e <??ZbZclColorServerAlloc_18>
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800461e:	0038      	movs	r0, r7
 8004620:	f7fd fa1f 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004624:	2219      	movs	r2, #25
 8004626:	2300      	movs	r3, #0
 8004628:	f244 0104 	movw	r1, #16388	@ 0x4004
 800462c:	0038      	movs	r0, r7
 800462e:	f7fd fa18 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004632:	f44f 520c 	mov.w	r2, #8960	@ 0x2300
 8004636:	2300      	movs	r3, #0
 8004638:	f244 0105 	movw	r1, #16389	@ 0x4005
 800463c:	0038      	movs	r0, r7
 800463e:	f7fd fa10 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004642:	2200      	movs	r2, #0
 8004644:	2300      	movs	r3, #0
 8004646:	f244 0103 	movw	r1, #16387	@ 0x4003
 800464a:	0038      	movs	r0, r7
 800464c:	f7fd fa09 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004650:	2200      	movs	r2, #0
 8004652:	2300      	movs	r3, #0
 8004654:	f244 0106 	movw	r1, #16390	@ 0x4006
 8004658:	0038      	movs	r0, r7
 800465a:	f7fd fa02 	bl	8001a62 <ZbZclAttrIntegerWrite>

0800465e <??ZbZclColorServerAlloc_18>:
 800465e:	f896 004c 	ldrb.w	r0, [r6, #76]	@ 0x4c
 8004662:	0780      	lsls	r0, r0, #30
 8004664:	d506      	bpl.n	8004674 <??ZbZclColorServerAlloc_19>
 8004666:	2200      	movs	r2, #0
 8004668:	2300      	movs	r3, #0
 800466a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800466e:	0038      	movs	r0, r7
 8004670:	f7fd f9f7 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004674 <??ZbZclColorServerAlloc_19>:
 8004674:	f8c7 a054 	str.w	sl, [r7, #84]	@ 0x54
 8004678:	f896 204c 	ldrb.w	r2, [r6, #76]	@ 0x4c
 800467c:	2300      	movs	r3, #0
 800467e:	4649      	mov	r1, r9
 8004680:	0038      	movs	r0, r7
 8004682:	f7fd f9ee 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004686:	0038      	movs	r0, r7
 8004688:	f7ff fc17 	bl	8003eba <ZbZclClusterAttach>
 800468c:	0038      	movs	r0, r7

0800468e <??ZbZclColorServerAlloc_1>:
 800468e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004694 <??DataTable1>:
 8004694:	9570 0801                                   p...

08004698 <??DataTable1_1>:
 8004698:	9638 0801                                   8...

0800469c <??DataTable1_2>:
 800469c:	9688 0801                                   ....

080046a0 <??DataTable1_3>:
 80046a0:	96b0 0801                                   ....

080046a4 <??DataTable1_4>:
 80046a4:	9700 0801                                   ....

080046a8 <??DataTable1_5>:
 80046a8:	97c8 0801                                   ....

080046ac <zcl_color_server_get_scene_data>:
 80046ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80046b0:	0004      	movs	r4, r0
 80046b2:	000d      	movs	r5, r1
 80046b4:	0016      	movs	r6, r2
 80046b6:	0027      	movs	r7, r4
 80046b8:	f05f 0803 	movs.w	r8, #3
 80046bc:	2000      	movs	r0, #0
 80046be:	9001      	str	r0, [sp, #4]
 80046c0:	2002      	movs	r0, #2
 80046c2:	9000      	str	r0, [sp, #0]
 80046c4:	f10d 030a 	add.w	r3, sp, #10
 80046c8:	2200      	movs	r2, #0
 80046ca:	2103      	movs	r1, #3
 80046cc:	0020      	movs	r0, r4
 80046ce:	f7fb fe8a 	bl	80003e6 <ZbZclAttrRead>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d001      	beq.n	80046da <??zcl_color_server_get_scene_data_0>
 80046d6:	2000      	movs	r0, #0
 80046d8:	e0db      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

080046da <??zcl_color_server_get_scene_data_0>:
 80046da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80046de:	4640      	mov	r0, r8
 80046e0:	b2c0      	uxtb	r0, r0
 80046e2:	4428      	add	r0, r5
 80046e4:	f002 fd39 	bl	800715a <putle16>
 80046e8:	f118 0802 	adds.w	r8, r8, #2
 80046ec:	2000      	movs	r0, #0
 80046ee:	9001      	str	r0, [sp, #4]
 80046f0:	2002      	movs	r0, #2
 80046f2:	9000      	str	r0, [sp, #0]
 80046f4:	f10d 030a 	add.w	r3, sp, #10
 80046f8:	2200      	movs	r2, #0
 80046fa:	2104      	movs	r1, #4
 80046fc:	0020      	movs	r0, r4
 80046fe:	f7fb fe72 	bl	80003e6 <ZbZclAttrRead>
 8004702:	2800      	cmp	r0, #0
 8004704:	d001      	beq.n	800470a <??zcl_color_server_get_scene_data_2>
 8004706:	2000      	movs	r0, #0
 8004708:	e0c3      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

0800470a <??zcl_color_server_get_scene_data_2>:
 800470a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800470e:	4640      	mov	r0, r8
 8004710:	b2c0      	uxtb	r0, r0
 8004712:	4428      	add	r0, r5
 8004714:	f002 fd21 	bl	800715a <putle16>
 8004718:	f118 0802 	adds.w	r8, r8, #2
 800471c:	f897 00bc 	ldrb.w	r0, [r7, #188]	@ 0xbc
 8004720:	0780      	lsls	r0, r0, #30
 8004722:	d50f      	bpl.n	8004744 <??zcl_color_server_get_scene_data_3>
 8004724:	2000      	movs	r0, #0
 8004726:	9001      	str	r0, [sp, #4]
 8004728:	2002      	movs	r0, #2
 800472a:	9000      	str	r0, [sp, #0]
 800472c:	f10d 030a 	add.w	r3, sp, #10
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004736:	0020      	movs	r0, r4
 8004738:	f7fb fe55 	bl	80003e6 <ZbZclAttrRead>
 800473c:	2800      	cmp	r0, #0
 800473e:	d004      	beq.n	800474a <??zcl_color_server_get_scene_data_4>
 8004740:	2000      	movs	r0, #0
 8004742:	e0a6      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004744 <??zcl_color_server_get_scene_data_3>:
 8004744:	2000      	movs	r0, #0
 8004746:	f8ad 000a 	strh.w	r0, [sp, #10]

0800474a <??zcl_color_server_get_scene_data_4>:
 800474a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800474e:	4640      	mov	r0, r8
 8004750:	b2c0      	uxtb	r0, r0
 8004752:	4428      	add	r0, r5
 8004754:	f002 fd01 	bl	800715a <putle16>
 8004758:	f118 0802 	adds.w	r8, r8, #2
 800475c:	2000      	movs	r0, #0
 800475e:	9001      	str	r0, [sp, #4]
 8004760:	2001      	movs	r0, #1
 8004762:	9000      	str	r0, [sp, #0]
 8004764:	ab02      	add	r3, sp, #8
 8004766:	2200      	movs	r2, #0
 8004768:	2101      	movs	r1, #1
 800476a:	0020      	movs	r0, r4
 800476c:	f7fb fe3b 	bl	80003e6 <ZbZclAttrRead>
 8004770:	2800      	cmp	r0, #0
 8004772:	d001      	beq.n	8004778 <??zcl_color_server_get_scene_data_5>
 8004774:	2000      	movs	r0, #0
 8004776:	e08c      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004778 <??zcl_color_server_get_scene_data_5>:
 8004778:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800477c:	4641      	mov	r1, r8
 800477e:	b2c9      	uxtb	r1, r1
 8004780:	5468      	strb	r0, [r5, r1]
 8004782:	f118 0801 	adds.w	r8, r8, #1
 8004786:	f897 00bc 	ldrb.w	r0, [r7, #188]	@ 0xbc
 800478a:	0740      	lsls	r0, r0, #29
 800478c:	d545      	bpl.n	800481a <??zcl_color_server_get_scene_data_6>
 800478e:	2000      	movs	r0, #0
 8004790:	9001      	str	r0, [sp, #4]
 8004792:	2001      	movs	r0, #1
 8004794:	9000      	str	r0, [sp, #0]
 8004796:	ab02      	add	r3, sp, #8
 8004798:	2200      	movs	r2, #0
 800479a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800479e:	0020      	movs	r0, r4
 80047a0:	f7fb fe21 	bl	80003e6 <ZbZclAttrRead>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d001      	beq.n	80047ac <??zcl_color_server_get_scene_data_7>
 80047a8:	2000      	movs	r0, #0
 80047aa:	e072      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

080047ac <??zcl_color_server_get_scene_data_7>:
 80047ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80047b0:	4641      	mov	r1, r8
 80047b2:	b2c9      	uxtb	r1, r1
 80047b4:	5468      	strb	r0, [r5, r1]
 80047b6:	f118 0801 	adds.w	r8, r8, #1
 80047ba:	2000      	movs	r0, #0
 80047bc:	9001      	str	r0, [sp, #4]
 80047be:	2001      	movs	r0, #1
 80047c0:	9000      	str	r0, [sp, #0]
 80047c2:	ab02      	add	r3, sp, #8
 80047c4:	2200      	movs	r2, #0
 80047c6:	f244 0103 	movw	r1, #16387	@ 0x4003
 80047ca:	0020      	movs	r0, r4
 80047cc:	f7fb fe0b 	bl	80003e6 <ZbZclAttrRead>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d001      	beq.n	80047d8 <??zcl_color_server_get_scene_data_8>
 80047d4:	2000      	movs	r0, #0
 80047d6:	e05c      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

080047d8 <??zcl_color_server_get_scene_data_8>:
 80047d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80047dc:	4641      	mov	r1, r8
 80047de:	b2c9      	uxtb	r1, r1
 80047e0:	5468      	strb	r0, [r5, r1]
 80047e2:	f118 0801 	adds.w	r8, r8, #1
 80047e6:	2000      	movs	r0, #0
 80047e8:	9001      	str	r0, [sp, #4]
 80047ea:	2002      	movs	r0, #2
 80047ec:	9000      	str	r0, [sp, #0]
 80047ee:	f10d 030a 	add.w	r3, sp, #10
 80047f2:	2200      	movs	r2, #0
 80047f4:	f244 0104 	movw	r1, #16388	@ 0x4004
 80047f8:	0020      	movs	r0, r4
 80047fa:	f7fb fdf4 	bl	80003e6 <ZbZclAttrRead>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d001      	beq.n	8004806 <??zcl_color_server_get_scene_data_9>
 8004802:	2000      	movs	r0, #0
 8004804:	e045      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004806 <??zcl_color_server_get_scene_data_9>:
 8004806:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800480a:	4640      	mov	r0, r8
 800480c:	b2c0      	uxtb	r0, r0
 800480e:	4428      	add	r0, r5
 8004810:	f002 fca3 	bl	800715a <putle16>
 8004814:	f118 0802 	adds.w	r8, r8, #2
 8004818:	e013      	b.n	8004842 <??zcl_color_server_get_scene_data_10>

0800481a <??zcl_color_server_get_scene_data_6>:
 800481a:	2000      	movs	r0, #0
 800481c:	4641      	mov	r1, r8
 800481e:	b2c9      	uxtb	r1, r1
 8004820:	5468      	strb	r0, [r5, r1]
 8004822:	f118 0801 	adds.w	r8, r8, #1
 8004826:	2000      	movs	r0, #0
 8004828:	4641      	mov	r1, r8
 800482a:	b2c9      	uxtb	r1, r1
 800482c:	5468      	strb	r0, [r5, r1]
 800482e:	f118 0801 	adds.w	r8, r8, #1
 8004832:	2100      	movs	r1, #0
 8004834:	4640      	mov	r0, r8
 8004836:	b2c0      	uxtb	r0, r0
 8004838:	4428      	add	r0, r5
 800483a:	f002 fc8e 	bl	800715a <putle16>
 800483e:	f118 0802 	adds.w	r8, r8, #2

08004842 <??zcl_color_server_get_scene_data_10>:
 8004842:	f897 00bc 	ldrb.w	r0, [r7, #188]	@ 0xbc
 8004846:	06c0      	lsls	r0, r0, #27
 8004848:	d50e      	bpl.n	8004868 <??zcl_color_server_get_scene_data_11>
 800484a:	2000      	movs	r0, #0
 800484c:	9001      	str	r0, [sp, #4]
 800484e:	2002      	movs	r0, #2
 8004850:	9000      	str	r0, [sp, #0]
 8004852:	f10d 030a 	add.w	r3, sp, #10
 8004856:	2200      	movs	r2, #0
 8004858:	2107      	movs	r1, #7
 800485a:	0020      	movs	r0, r4
 800485c:	f7fb fdc3 	bl	80003e6 <ZbZclAttrRead>
 8004860:	2800      	cmp	r0, #0
 8004862:	d004      	beq.n	800486e <??zcl_color_server_get_scene_data_12>
 8004864:	2000      	movs	r0, #0
 8004866:	e014      	b.n	8004892 <??zcl_color_server_get_scene_data_1>

08004868 <??zcl_color_server_get_scene_data_11>:
 8004868:	2000      	movs	r0, #0
 800486a:	f8ad 000a 	strh.w	r0, [sp, #10]

0800486e <??zcl_color_server_get_scene_data_12>:
 800486e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8004872:	4640      	mov	r0, r8
 8004874:	b2c0      	uxtb	r0, r0
 8004876:	4428      	add	r0, r5
 8004878:	f002 fc6f 	bl	800715a <putle16>
 800487c:	f118 0802 	adds.w	r8, r8, #2
 8004880:	89a1      	ldrh	r1, [r4, #12]
 8004882:	0028      	movs	r0, r5
 8004884:	f002 fc69 	bl	800715a <putle16>
 8004888:	f1b8 0003 	subs.w	r0, r8, #3
 800488c:	70a8      	strb	r0, [r5, #2]
 800488e:	4640      	mov	r0, r8
 8004890:	b2c0      	uxtb	r0, r0

08004892 <??zcl_color_server_get_scene_data_1>:
 8004892:	b004      	add	sp, #16
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004898 <zcl_color_server_set_scene_data>:
 8004898:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	b08c      	sub	sp, #48	@ 0x30
 800489e:	4680      	mov	r8, r0
 80048a0:	000c      	movs	r4, r1
 80048a2:	001d      	movs	r5, r3
 80048a4:	4646      	mov	r6, r8
 80048a6:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 80048aa:	280d      	cmp	r0, #13
 80048ac:	d001      	beq.n	80048b2 <??zcl_color_server_set_scene_data_0>
 80048ae:	2087      	movs	r0, #135	@ 0x87
 80048b0:	e10b      	b.n	8004aca <??zcl_color_server_set_scene_data_1>

080048b2 <??zcl_color_server_set_scene_data_0>:
 80048b2:	0020      	movs	r0, r4
 80048b4:	f002 fc05 	bl	80070c2 <pletoh16>
 80048b8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80048bc:	1ca0      	adds	r0, r4, #2
 80048be:	f002 fc00 	bl	80070c2 <pletoh16>
 80048c2:	f8ad 001c 	strh.w	r0, [sp, #28]
 80048c6:	1d20      	adds	r0, r4, #4
 80048c8:	f002 fbfb 	bl	80070c2 <pletoh16>
 80048cc:	0007      	movs	r7, r0
 80048ce:	79a0      	ldrb	r0, [r4, #6]
 80048d0:	f88d 000a 	strb.w	r0, [sp, #10]
 80048d4:	79e0      	ldrb	r0, [r4, #7]
 80048d6:	f88d 0009 	strb.w	r0, [sp, #9]
 80048da:	7a20      	ldrb	r0, [r4, #8]
 80048dc:	f88d 0008 	strb.w	r0, [sp, #8]
 80048e0:	f114 0009 	adds.w	r0, r4, #9
 80048e4:	f002 fbed 	bl	80070c2 <pletoh16>
 80048e8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80048ec:	f114 000b 	adds.w	r0, r4, #11
 80048f0:	f002 fbe7 	bl	80070c2 <pletoh16>
 80048f4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80048f8:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 80048fc:	0700      	lsls	r0, r0, #28
 80048fe:	d535      	bpl.n	800496c <??zcl_color_server_set_scene_data_2>
 8004900:	f8d6 008c 	ldr.w	r0, [r6, #140]	@ 0x8c
 8004904:	2800      	cmp	r0, #0
 8004906:	d01d      	beq.n	8004944 <??zcl_color_server_set_scene_data_3>
 8004908:	f05f 0908 	movs.w	r9, #8
 800490c:	f05f 0a00 	movs.w	sl, #0
 8004910:	f10d 0b20 	add.w	fp, sp, #32
 8004914:	4652      	mov	r2, sl
 8004916:	4649      	mov	r1, r9
 8004918:	4658      	mov	r0, fp
 800491a:	f003 f9fd 	bl	8007d18 <__aeabi_memset>
 800491e:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8004922:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004926:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800492a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800492e:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
 8004932:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8004936:	2200      	movs	r2, #0
 8004938:	a908      	add	r1, sp, #32
 800493a:	4640      	mov	r0, r8
 800493c:	f8d6 c08c 	ldr.w	ip, [r6, #140]	@ 0x8c
 8004940:	47e0      	blx	ip
 8004942:	e013      	b.n	800496c <??zcl_color_server_set_scene_data_2>

08004944 <??zcl_color_server_set_scene_data_3>:
 8004944:	2002      	movs	r0, #2
 8004946:	9001      	str	r0, [sp, #4]
 8004948:	2002      	movs	r0, #2
 800494a:	9000      	str	r0, [sp, #0]
 800494c:	0023      	movs	r3, r4
 800494e:	2203      	movs	r2, #3
 8004950:	2100      	movs	r1, #0
 8004952:	4640      	mov	r0, r8
 8004954:	f7fb fe99 	bl	800068a <ZbZclAttrWrite>
 8004958:	2002      	movs	r0, #2
 800495a:	9001      	str	r0, [sp, #4]
 800495c:	2002      	movs	r0, #2
 800495e:	9000      	str	r0, [sp, #0]
 8004960:	1ca3      	adds	r3, r4, #2
 8004962:	2204      	movs	r2, #4
 8004964:	2100      	movs	r1, #0
 8004966:	4640      	mov	r0, r8
 8004968:	f7fb fe8f 	bl	800068a <ZbZclAttrWrite>

0800496c <??zcl_color_server_set_scene_data_2>:
 800496c:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 8004970:	0780      	lsls	r0, r0, #30
 8004972:	d526      	bpl.n	80049c2 <??zcl_color_server_set_scene_data_4>
 8004974:	f8d6 00a8 	ldr.w	r0, [r6, #168]	@ 0xa8
 8004978:	2800      	cmp	r0, #0
 800497a:	d01a      	beq.n	80049b2 <??zcl_color_server_set_scene_data_5>
 800497c:	f05f 0908 	movs.w	r9, #8
 8004980:	f05f 0a00 	movs.w	sl, #0
 8004984:	46eb      	mov	fp, sp
 8004986:	4652      	mov	r2, sl
 8004988:	4649      	mov	r1, r9
 800498a:	4658      	mov	r0, fp
 800498c:	f003 f9c4 	bl	8007d18 <__aeabi_memset>
 8004990:	f8ad 7000 	strh.w	r7, [sp]
 8004994:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004998:	f88d 0002 	strb.w	r0, [sp, #2]
 800499c:	f8ad 5004 	strh.w	r5, [sp, #4]
 80049a0:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 80049a4:	2200      	movs	r2, #0
 80049a6:	4669      	mov	r1, sp
 80049a8:	4640      	mov	r0, r8
 80049aa:	f8d6 c0a8 	ldr.w	ip, [r6, #168]	@ 0xa8
 80049ae:	47e0      	blx	ip
 80049b0:	e007      	b.n	80049c2 <??zcl_color_server_set_scene_data_4>

080049b2 <??zcl_color_server_set_scene_data_5>:
 80049b2:	003a      	movs	r2, r7
 80049b4:	b292      	uxth	r2, r2
 80049b6:	2300      	movs	r3, #0
 80049b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80049bc:	4640      	mov	r0, r8
 80049be:	f7fd f850 	bl	8001a62 <ZbZclAttrIntegerWrite>

080049c2 <??zcl_color_server_set_scene_data_4>:
 80049c2:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 80049c6:	0740      	lsls	r0, r0, #29
 80049c8:	d555      	bpl.n	8004a76 <??zcl_color_server_set_scene_data_6>
 80049ca:	f8d6 00ac 	ldr.w	r0, [r6, #172]	@ 0xac
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d039      	beq.n	8004a46 <??zcl_color_server_set_scene_data_7>
 80049d2:	f05f 090a 	movs.w	r9, #10
 80049d6:	f05f 0a00 	movs.w	sl, #0
 80049da:	f10d 0b10 	add.w	fp, sp, #16
 80049de:	4652      	mov	r2, sl
 80049e0:	4649      	mov	r1, r9
 80049e2:	4658      	mov	r0, fp
 80049e4:	f003 f998 	bl	8007d18 <__aeabi_memset>
 80049e8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80049ec:	f050 0001 	orrs.w	r0, r0, #1
 80049f0:	f88d 0010 	strb.w	r0, [sp, #16]
 80049f4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80049f8:	f050 0002 	orrs.w	r0, r0, #2
 80049fc:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a00:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8004a04:	f050 0004 	orrs.w	r0, r0, #4
 8004a08:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a0c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8004a10:	f050 0008 	orrs.w	r0, r0, #8
 8004a14:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a18:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004a1c:	f88d 0011 	strb.w	r0, [sp, #17]
 8004a20:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004a24:	f88d 0012 	strb.w	r0, [sp, #18]
 8004a28:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8004a2c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004a30:	f8ad 7016 	strh.w	r7, [sp, #22]
 8004a34:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8004a38:	2200      	movs	r2, #0
 8004a3a:	a904      	add	r1, sp, #16
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	f8d6 c0ac 	ldr.w	ip, [r6, #172]	@ 0xac
 8004a42:	47e0      	blx	ip
 8004a44:	e017      	b.n	8004a76 <??zcl_color_server_set_scene_data_6>

08004a46 <??zcl_color_server_set_scene_data_7>:
 8004a46:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f244 0102 	movw	r1, #16386	@ 0x4002
 8004a50:	4640      	mov	r0, r8
 8004a52:	f7fd f806 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004a56:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f244 0103 	movw	r1, #16387	@ 0x4003
 8004a60:	4640      	mov	r0, r8
 8004a62:	f7fc fffe 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004a66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f244 0104 	movw	r1, #16388	@ 0x4004
 8004a70:	4640      	mov	r0, r8
 8004a72:	f7fc fff6 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004a76 <??zcl_color_server_set_scene_data_6>:
 8004a76:	f896 00bc 	ldrb.w	r0, [r6, #188]	@ 0xbc
 8004a7a:	06c0      	lsls	r0, r0, #27
 8004a7c:	d524      	bpl.n	8004ac8 <??zcl_color_server_set_scene_data_8>
 8004a7e:	f8d6 0098 	ldr.w	r0, [r6, #152]	@ 0x98
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d019      	beq.n	8004aba <??zcl_color_server_set_scene_data_9>
 8004a86:	f05f 0906 	movs.w	r9, #6
 8004a8a:	f05f 0a00 	movs.w	sl, #0
 8004a8e:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 8004a92:	4652      	mov	r2, sl
 8004a94:	4649      	mov	r1, r9
 8004a96:	4658      	mov	r0, fp
 8004a98:	f003 f93e 	bl	8007d18 <__aeabi_memset>
 8004a9c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8004aa0:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 8004aa4:	f8ad 502a 	strh.w	r5, [sp, #42]	@ 0x2a
 8004aa8:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8004aac:	2200      	movs	r2, #0
 8004aae:	a90a      	add	r1, sp, #40	@ 0x28
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	f8d6 c098 	ldr.w	ip, [r6, #152]	@ 0x98
 8004ab6:	47e0      	blx	ip
 8004ab8:	e006      	b.n	8004ac8 <??zcl_color_server_set_scene_data_8>

08004aba <??zcl_color_server_set_scene_data_9>:
 8004aba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2107      	movs	r1, #7
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	f7fc ffcd 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004ac8 <??zcl_color_server_set_scene_data_8>:
 8004ac8:	2000      	movs	r0, #0

08004aca <??zcl_color_server_set_scene_data_1>:
 8004aca:	b00d      	add	sp, #52	@ 0x34
 8004acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ad0 <zcl_color_options_cmd_allow>:
 8004ad0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	0005      	movs	r5, r0
 8004ad6:	000e      	movs	r6, r1
 8004ad8:	0017      	movs	r7, r2
 8004ada:	46a8      	mov	r8, r5
 8004adc:	2000      	movs	r0, #0
 8004ade:	9001      	str	r0, [sp, #4]
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	9000      	str	r0, [sp, #0]
 8004ae4:	ab02      	add	r3, sp, #8
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	210f      	movs	r1, #15
 8004aea:	0028      	movs	r0, r5
 8004aec:	f7fb fc7b 	bl	80003e6 <ZbZclAttrRead>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d001      	beq.n	8004af8 <??zcl_color_options_cmd_allow_0>
 8004af4:	2000      	movs	r0, #0
 8004af6:	e042      	b.n	8004b7e <??zcl_color_options_cmd_allow_1>

08004af8 <??zcl_color_options_cmd_allow_0>:
 8004af8:	f05f 0900 	movs.w	r9, #0

08004afc <??zcl_color_options_cmd_allow_2>:
 8004afc:	4648      	mov	r0, r9
 8004afe:	b2c0      	uxtb	r0, r0
 8004b00:	2808      	cmp	r0, #8
 8004b02:	da1d      	bge.n	8004b40 <??zcl_color_options_cmd_allow_3>
 8004b04:	2001      	movs	r0, #1
 8004b06:	fa10 f009 	lsls.w	r0, r0, r9
 8004b0a:	0004      	movs	r4, r0
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	b2c0      	uxtb	r0, r0
 8004b10:	0021      	movs	r1, r4
 8004b12:	b2c9      	uxtb	r1, r1
 8004b14:	4208      	tst	r0, r1
 8004b16:	d010      	beq.n	8004b3a <??zcl_color_options_cmd_allow_4>

08004b18 <??zcl_color_options_cmd_allow_5>:
 8004b18:	0038      	movs	r0, r7
 8004b1a:	b2c0      	uxtb	r0, r0
 8004b1c:	0021      	movs	r1, r4
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	4208      	tst	r0, r1
 8004b22:	d105      	bne.n	8004b30 <??zcl_color_options_cmd_allow_6>
 8004b24:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b28:	43a0      	bics	r0, r4
 8004b2a:	f88d 0008 	strb.w	r0, [sp, #8]
 8004b2e:	e004      	b.n	8004b3a <??zcl_color_options_cmd_allow_4>

08004b30 <??zcl_color_options_cmd_allow_6>:
 8004b30:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b34:	4320      	orrs	r0, r4
 8004b36:	f88d 0008 	strb.w	r0, [sp, #8]

08004b3a <??zcl_color_options_cmd_allow_4>:
 8004b3a:	f119 0901 	adds.w	r9, r9, #1
 8004b3e:	e7dd      	b.n	8004afc <??zcl_color_options_cmd_allow_2>

08004b40 <??zcl_color_options_cmd_allow_3>:
 8004b40:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b44:	07c0      	lsls	r0, r0, #31
 8004b46:	d419      	bmi.n	8004b7c <??zcl_color_options_cmd_allow_7>
 8004b48:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d015      	beq.n	8004b7c <??zcl_color_options_cmd_allow_7>
 8004b50:	2000      	movs	r0, #0
 8004b52:	9001      	str	r0, [sp, #4]
 8004b54:	2001      	movs	r0, #1
 8004b56:	9000      	str	r0, [sp, #0]
 8004b58:	f10d 0309 	add.w	r3, sp, #9
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 8004b64:	f7fb fc3f 	bl	80003e6 <ZbZclAttrRead>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d001      	beq.n	8004b70 <??zcl_color_options_cmd_allow_8>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e006      	b.n	8004b7e <??zcl_color_options_cmd_allow_1>

08004b70 <??zcl_color_options_cmd_allow_8>:
 8004b70:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d101      	bne.n	8004b7c <??zcl_color_options_cmd_allow_7>
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e000      	b.n	8004b7e <??zcl_color_options_cmd_allow_1>

08004b7c <??zcl_color_options_cmd_allow_7>:
 8004b7c:	2001      	movs	r0, #1

08004b7e <??zcl_color_options_cmd_allow_1>:
 8004b7e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	...

08004b84 <zcl_color_server_handle_command>:
 8004b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b88:	b0b4      	sub	sp, #208	@ 0xd0
 8004b8a:	0004      	movs	r4, r0
 8004b8c:	000d      	movs	r5, r1
 8004b8e:	0016      	movs	r6, r2
 8004b90:	0027      	movs	r7, r4
 8004b92:	f8b6 8028 	ldrh.w	r8, [r6, #40]	@ 0x28
 8004b96:	f05f 0918 	movs.w	r9, #24
 8004b9a:	f05f 0a00 	movs.w	sl, #0
 8004b9e:	f10d 0bb8 	add.w	fp, sp, #184	@ 0xb8
 8004ba2:	4652      	mov	r2, sl
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	4658      	mov	r0, fp
 8004ba8:	f003 f8b6 	bl	8007d18 <__aeabi_memset>
 8004bac:	a82e      	add	r0, sp, #184	@ 0xb8
 8004bae:	f116 0110 	adds.w	r1, r6, #16
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	f012 fb47 	bl	8017246 <__aeabi_memcpy>
 8004bb8:	79a8      	ldrb	r0, [r5, #6]
 8004bba:	f88d 00c8 	strb.w	r0, [sp, #200]	@ 0xc8
 8004bbe:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8004bc2:	f7ff f852 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8004bc6:	f8ad 00ca 	strh.w	r0, [sp, #202]	@ 0xca
 8004bca:	78a8      	ldrb	r0, [r5, #2]
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d002      	beq.n	8004bd6 <??zcl_color_server_handle_command_0>
 8004bd0:	2081      	movs	r0, #129	@ 0x81
 8004bd2:	f000 bf51 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004bd6 <??zcl_color_server_handle_command_0>:
 8004bd6:	79e8      	ldrb	r0, [r5, #7]
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d037      	beq.n	8004c4c <??zcl_color_server_handle_command_2>
 8004bdc:	2801      	cmp	r0, #1
 8004bde:	f000 8093 	beq.w	8004d08 <??zcl_color_server_handle_command_3>
 8004be2:	2802      	cmp	r0, #2
 8004be4:	f000 80f9 	beq.w	8004dda <??zcl_color_server_handle_command_4>
 8004be8:	2803      	cmp	r0, #3
 8004bea:	f000 8156 	beq.w	8004e9a <??zcl_color_server_handle_command_5>
 8004bee:	2804      	cmp	r0, #4
 8004bf0:	f000 81af 	beq.w	8004f52 <??zcl_color_server_handle_command_6>
 8004bf4:	2805      	cmp	r0, #5
 8004bf6:	f000 8214 	beq.w	8005022 <??zcl_color_server_handle_command_7>
 8004bfa:	2806      	cmp	r0, #6
 8004bfc:	f000 8272 	beq.w	80050e4 <??zcl_color_server_handle_command_8>
 8004c00:	2807      	cmp	r0, #7
 8004c02:	f000 82d0 	beq.w	80051a6 <??zcl_color_server_handle_command_9>
 8004c06:	2808      	cmp	r0, #8
 8004c08:	f000 8331 	beq.w	800526e <??zcl_color_server_handle_command_10>
 8004c0c:	2809      	cmp	r0, #9
 8004c0e:	f000 8390 	beq.w	8005332 <??zcl_color_server_handle_command_11>
 8004c12:	280a      	cmp	r0, #10
 8004c14:	f000 83ed 	beq.w	80053f2 <??zcl_color_server_handle_command_12>
 8004c18:	2840      	cmp	r0, #64	@ 0x40
 8004c1a:	f000 8448 	beq.w	80054ae <??zcl_color_server_handle_command_13>
 8004c1e:	2841      	cmp	r0, #65	@ 0x41
 8004c20:	f000 84a5 	beq.w	800556e <??zcl_color_server_handle_command_14>
 8004c24:	2842      	cmp	r0, #66	@ 0x42
 8004c26:	f000 850c 	beq.w	8005642 <??zcl_color_server_handle_command_15>
 8004c2a:	2843      	cmp	r0, #67	@ 0x43
 8004c2c:	f000 856a 	beq.w	8005704 <??zcl_color_server_handle_command_16>
 8004c30:	2844      	cmp	r0, #68	@ 0x44
 8004c32:	f000 85c8 	beq.w	80057c6 <??zcl_color_server_handle_command_17>
 8004c36:	2847      	cmp	r0, #71	@ 0x47
 8004c38:	f000 8612 	beq.w	8005860 <??zcl_color_server_handle_command_18>
 8004c3c:	284b      	cmp	r0, #75	@ 0x4b
 8004c3e:	f000 863e 	beq.w	80058be <??zcl_color_server_handle_command_19>
 8004c42:	284c      	cmp	r0, #76	@ 0x4c
 8004c44:	f000 86ae 	beq.w	80059a4 <??zcl_color_server_handle_command_20>
 8004c48:	f000 bf15 	b.w	8005a76 <??zcl_color_server_handle_command_21>

08004c4c <??zcl_color_server_handle_command_2>:
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f88d 0014 	strb.w	r0, [sp, #20]
 8004c52:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004c54:	2804      	cmp	r0, #4
 8004c56:	da02      	bge.n	8004c5e <??zcl_color_server_handle_command_22>
 8004c58:	2080      	movs	r0, #128	@ 0x80
 8004c5a:	f000 bf0d 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004c5e <??zcl_color_server_handle_command_22>:
 8004c5e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d102      	bne.n	8004c6a <??zcl_color_server_handle_command_23>
 8004c64:	2081      	movs	r0, #129	@ 0x81
 8004c66:	f000 bf07 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004c6a <??zcl_color_server_handle_command_23>:
 8004c6a:	f05f 0906 	movs.w	r9, #6
 8004c6e:	f05f 0a00 	movs.w	sl, #0
 8004c72:	f10d 0b80 	add.w	fp, sp, #128	@ 0x80
 8004c76:	4652      	mov	r2, sl
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4658      	mov	r0, fp
 8004c7c:	f003 f84c 	bl	8007d18 <__aeabi_memset>
 8004c80:	4640      	mov	r0, r8
 8004c82:	b280      	uxth	r0, r0
 8004c84:	2806      	cmp	r0, #6
 8004c86:	db07      	blt.n	8004c98 <??zcl_color_server_handle_command_24>
 8004c88:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004c8a:	7900      	ldrb	r0, [r0, #4]
 8004c8c:	f88d 0084 	strb.w	r0, [sp, #132]	@ 0x84
 8004c90:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004c92:	7940      	ldrb	r0, [r0, #5]
 8004c94:	f88d 0085 	strb.w	r0, [sp, #133]	@ 0x85

08004c98 <??zcl_color_server_handle_command_24>:
 8004c98:	f89d 2085 	ldrb.w	r2, [sp, #133]	@ 0x85
 8004c9c:	f89d 1084 	ldrb.w	r1, [sp, #132]	@ 0x84
 8004ca0:	0020      	movs	r0, r4
 8004ca2:	f7ff ff15 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d102      	bne.n	8004cb0 <??zcl_color_server_handle_command_25>
 8004caa:	2070      	movs	r0, #112	@ 0x70
 8004cac:	f000 bee4 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004cb0 <??zcl_color_server_handle_command_25>:
 8004cb0:	2002      	movs	r0, #2
 8004cb2:	9001      	str	r0, [sp, #4]
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	9000      	str	r0, [sp, #0]
 8004cb8:	ab05      	add	r3, sp, #20
 8004cba:	2208      	movs	r2, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	f7fb fce3 	bl	800068a <ZbZclAttrWrite>
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	9001      	str	r0, [sp, #4]
 8004cc8:	2001      	movs	r0, #1
 8004cca:	9000      	str	r0, [sp, #0]
 8004ccc:	ab05      	add	r3, sp, #20
 8004cce:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	0020      	movs	r0, r4
 8004cd6:	f7fb fcd8 	bl	800068a <ZbZclAttrWrite>
 8004cda:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004cdc:	7800      	ldrb	r0, [r0, #0]
 8004cde:	f88d 0080 	strb.w	r0, [sp, #128]	@ 0x80
 8004ce2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004ce4:	7840      	ldrb	r0, [r0, #1]
 8004ce6:	f88d 0081 	strb.w	r0, [sp, #129]	@ 0x81
 8004cea:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004cec:	1c80      	adds	r0, r0, #2
 8004cee:	f002 f9e8 	bl	80070c2 <pletoh16>
 8004cf2:	f8ad 0082 	strh.w	r0, [sp, #130]	@ 0x82
 8004cf6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004cf8:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004cfa:	a920      	add	r1, sp, #128	@ 0x80
 8004cfc:	0020      	movs	r0, r4
 8004cfe:	f8d7 c070 	ldr.w	ip, [r7, #112]	@ 0x70
 8004d02:	47e0      	blx	ip
 8004d04:	f000 beb8 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d08 <??zcl_color_server_handle_command_3>:
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f88d 0013 	strb.w	r0, [sp, #19]
 8004d0e:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004d10:	2802      	cmp	r0, #2
 8004d12:	da02      	bge.n	8004d1a <??zcl_color_server_handle_command_26>
 8004d14:	2080      	movs	r0, #128	@ 0x80
 8004d16:	f000 beaf 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d1a <??zcl_color_server_handle_command_26>:
 8004d1a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d102      	bne.n	8004d26 <??zcl_color_server_handle_command_27>
 8004d20:	2081      	movs	r0, #129	@ 0x81
 8004d22:	f000 bea9 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d26 <??zcl_color_server_handle_command_27>:
 8004d26:	f05f 0904 	movs.w	r9, #4
 8004d2a:	f05f 0a00 	movs.w	sl, #0
 8004d2e:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8004d32:	4652      	mov	r2, sl
 8004d34:	4649      	mov	r1, r9
 8004d36:	4658      	mov	r0, fp
 8004d38:	f002 ffee 	bl	8007d18 <__aeabi_memset>
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	b280      	uxth	r0, r0
 8004d40:	2804      	cmp	r0, #4
 8004d42:	db07      	blt.n	8004d54 <??zcl_color_server_handle_command_28>
 8004d44:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d46:	7880      	ldrb	r0, [r0, #2]
 8004d48:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8004d4c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d4e:	78c0      	ldrb	r0, [r0, #3]
 8004d50:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27

08004d54 <??zcl_color_server_handle_command_28>:
 8004d54:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 8004d58:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 8004d5c:	0020      	movs	r0, r4
 8004d5e:	f7ff feb7 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d102      	bne.n	8004d6c <??zcl_color_server_handle_command_29>
 8004d66:	2070      	movs	r0, #112	@ 0x70
 8004d68:	f000 be86 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d6c <??zcl_color_server_handle_command_29>:
 8004d6c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d6e:	7800      	ldrb	r0, [r0, #0]
 8004d70:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
 8004d74:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004d76:	7840      	ldrb	r0, [r0, #1]
 8004d78:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8004d7c:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004d80:	2801      	cmp	r0, #1
 8004d82:	d003      	beq.n	8004d8c <??zcl_color_server_handle_command_30>
 8004d84:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004d88:	2803      	cmp	r0, #3
 8004d8a:	d106      	bne.n	8004d9a <??zcl_color_server_handle_command_31>

08004d8c <??zcl_color_server_handle_command_30>:
 8004d8c:	f89d 0025 	ldrb.w	r0, [sp, #37]	@ 0x25
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d102      	bne.n	8004d9a <??zcl_color_server_handle_command_31>
 8004d94:	2085      	movs	r0, #133	@ 0x85
 8004d96:	f000 be6f 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004d9a <??zcl_color_server_handle_command_31>:
 8004d9a:	2002      	movs	r0, #2
 8004d9c:	9001      	str	r0, [sp, #4]
 8004d9e:	2001      	movs	r0, #1
 8004da0:	9000      	str	r0, [sp, #0]
 8004da2:	f10d 0313 	add.w	r3, sp, #19
 8004da6:	2208      	movs	r2, #8
 8004da8:	2100      	movs	r1, #0
 8004daa:	0020      	movs	r0, r4
 8004dac:	f7fb fc6d 	bl	800068a <ZbZclAttrWrite>
 8004db0:	2002      	movs	r0, #2
 8004db2:	9001      	str	r0, [sp, #4]
 8004db4:	2001      	movs	r0, #1
 8004db6:	9000      	str	r0, [sp, #0]
 8004db8:	f10d 0313 	add.w	r3, sp, #19
 8004dbc:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	f7fb fc61 	bl	800068a <ZbZclAttrWrite>
 8004dc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004dca:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004dcc:	a909      	add	r1, sp, #36	@ 0x24
 8004dce:	0020      	movs	r0, r4
 8004dd0:	f8d7 c074 	ldr.w	ip, [r7, #116]	@ 0x74
 8004dd4:	47e0      	blx	ip
 8004dd6:	f000 be4f 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004dda <??zcl_color_server_handle_command_4>:
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f88d 0012 	strb.w	r0, [sp, #18]
 8004de0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004de2:	2804      	cmp	r0, #4
 8004de4:	da02      	bge.n	8004dec <??zcl_color_server_handle_command_32>
 8004de6:	2080      	movs	r0, #128	@ 0x80
 8004de8:	f000 be46 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004dec <??zcl_color_server_handle_command_32>:
 8004dec:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d102      	bne.n	8004df8 <??zcl_color_server_handle_command_33>
 8004df2:	2081      	movs	r0, #129	@ 0x81
 8004df4:	f000 be40 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004df8 <??zcl_color_server_handle_command_33>:
 8004df8:	f05f 0905 	movs.w	r9, #5
 8004dfc:	f05f 0a00 	movs.w	sl, #0
 8004e00:	f10d 0b78 	add.w	fp, sp, #120	@ 0x78
 8004e04:	4652      	mov	r2, sl
 8004e06:	4649      	mov	r1, r9
 8004e08:	4658      	mov	r0, fp
 8004e0a:	f002 ff85 	bl	8007d18 <__aeabi_memset>
 8004e0e:	4640      	mov	r0, r8
 8004e10:	b280      	uxth	r0, r0
 8004e12:	2806      	cmp	r0, #6
 8004e14:	db07      	blt.n	8004e26 <??zcl_color_server_handle_command_34>
 8004e16:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e18:	7900      	ldrb	r0, [r0, #4]
 8004e1a:	f88d 007b 	strb.w	r0, [sp, #123]	@ 0x7b
 8004e1e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e20:	7940      	ldrb	r0, [r0, #5]
 8004e22:	f88d 007c 	strb.w	r0, [sp, #124]	@ 0x7c

08004e26 <??zcl_color_server_handle_command_34>:
 8004e26:	f89d 207c 	ldrb.w	r2, [sp, #124]	@ 0x7c
 8004e2a:	f89d 107b 	ldrb.w	r1, [sp, #123]	@ 0x7b
 8004e2e:	0020      	movs	r0, r4
 8004e30:	f7ff fe4e 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d102      	bne.n	8004e3e <??zcl_color_server_handle_command_35>
 8004e38:	2070      	movs	r0, #112	@ 0x70
 8004e3a:	f000 be1d 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004e3e <??zcl_color_server_handle_command_35>:
 8004e3e:	2002      	movs	r0, #2
 8004e40:	9001      	str	r0, [sp, #4]
 8004e42:	2001      	movs	r0, #1
 8004e44:	9000      	str	r0, [sp, #0]
 8004e46:	f10d 0312 	add.w	r3, sp, #18
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f7fb fc1b 	bl	800068a <ZbZclAttrWrite>
 8004e54:	2002      	movs	r0, #2
 8004e56:	9001      	str	r0, [sp, #4]
 8004e58:	2001      	movs	r0, #1
 8004e5a:	9000      	str	r0, [sp, #0]
 8004e5c:	f10d 0312 	add.w	r3, sp, #18
 8004e60:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004e64:	2100      	movs	r1, #0
 8004e66:	0020      	movs	r0, r4
 8004e68:	f7fb fc0f 	bl	800068a <ZbZclAttrWrite>
 8004e6c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e6e:	7800      	ldrb	r0, [r0, #0]
 8004e70:	f88d 0078 	strb.w	r0, [sp, #120]	@ 0x78
 8004e74:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e76:	7840      	ldrb	r0, [r0, #1]
 8004e78:	f88d 0079 	strb.w	r0, [sp, #121]	@ 0x79
 8004e7c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004e7e:	1c80      	adds	r0, r0, #2
 8004e80:	f002 f91f 	bl	80070c2 <pletoh16>
 8004e84:	f88d 007a 	strb.w	r0, [sp, #122]	@ 0x7a
 8004e88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004e8a:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004e8c:	a91e      	add	r1, sp, #120	@ 0x78
 8004e8e:	0020      	movs	r0, r4
 8004e90:	f8d7 c078 	ldr.w	ip, [r7, #120]	@ 0x78
 8004e94:	47e0      	blx	ip
 8004e96:	f000 bdef 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004e9a <??zcl_color_server_handle_command_5>:
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f88d 0011 	strb.w	r0, [sp, #17]
 8004ea0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004ea2:	2803      	cmp	r0, #3
 8004ea4:	da02      	bge.n	8004eac <??zcl_color_server_handle_command_36>
 8004ea6:	2080      	movs	r0, #128	@ 0x80
 8004ea8:	f000 bde6 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004eac <??zcl_color_server_handle_command_36>:
 8004eac:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d102      	bne.n	8004eb8 <??zcl_color_server_handle_command_37>
 8004eb2:	2081      	movs	r0, #129	@ 0x81
 8004eb4:	f000 bde0 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004eb8 <??zcl_color_server_handle_command_37>:
 8004eb8:	f05f 0906 	movs.w	r9, #6
 8004ebc:	f05f 0a00 	movs.w	sl, #0
 8004ec0:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 8004ec4:	4652      	mov	r2, sl
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f002 ff25 	bl	8007d18 <__aeabi_memset>
 8004ece:	4640      	mov	r0, r8
 8004ed0:	b280      	uxth	r0, r0
 8004ed2:	2805      	cmp	r0, #5
 8004ed4:	db07      	blt.n	8004ee6 <??zcl_color_server_handle_command_38>
 8004ed6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004ed8:	78c0      	ldrb	r0, [r0, #3]
 8004eda:	f88d 0098 	strb.w	r0, [sp, #152]	@ 0x98
 8004ede:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004ee0:	7900      	ldrb	r0, [r0, #4]
 8004ee2:	f88d 0099 	strb.w	r0, [sp, #153]	@ 0x99

08004ee6 <??zcl_color_server_handle_command_38>:
 8004ee6:	f89d 2099 	ldrb.w	r2, [sp, #153]	@ 0x99
 8004eea:	f89d 1098 	ldrb.w	r1, [sp, #152]	@ 0x98
 8004eee:	0020      	movs	r0, r4
 8004ef0:	f7ff fdee 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d102      	bne.n	8004efe <??zcl_color_server_handle_command_39>
 8004ef8:	2070      	movs	r0, #112	@ 0x70
 8004efa:	f000 bdbd 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004efe <??zcl_color_server_handle_command_39>:
 8004efe:	2002      	movs	r0, #2
 8004f00:	9001      	str	r0, [sp, #4]
 8004f02:	2001      	movs	r0, #1
 8004f04:	9000      	str	r0, [sp, #0]
 8004f06:	f10d 0311 	add.w	r3, sp, #17
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	0020      	movs	r0, r4
 8004f10:	f7fb fbbb 	bl	800068a <ZbZclAttrWrite>
 8004f14:	2002      	movs	r0, #2
 8004f16:	9001      	str	r0, [sp, #4]
 8004f18:	2001      	movs	r0, #1
 8004f1a:	9000      	str	r0, [sp, #0]
 8004f1c:	f10d 0311 	add.w	r3, sp, #17
 8004f20:	f244 0201 	movw	r2, #16385	@ 0x4001
 8004f24:	2100      	movs	r1, #0
 8004f26:	0020      	movs	r0, r4
 8004f28:	f7fb fbaf 	bl	800068a <ZbZclAttrWrite>
 8004f2c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f2e:	7800      	ldrb	r0, [r0, #0]
 8004f30:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
 8004f34:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f36:	1c40      	adds	r0, r0, #1
 8004f38:	f002 f8c3 	bl	80070c2 <pletoh16>
 8004f3c:	f8ad 0096 	strh.w	r0, [sp, #150]	@ 0x96
 8004f40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f42:	aa2e      	add	r2, sp, #184	@ 0xb8
 8004f44:	a925      	add	r1, sp, #148	@ 0x94
 8004f46:	0020      	movs	r0, r4
 8004f48:	f8d7 c07c 	ldr.w	ip, [r7, #124]	@ 0x7c
 8004f4c:	47e0      	blx	ip
 8004f4e:	f000 bd93 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004f52 <??zcl_color_server_handle_command_6>:
 8004f52:	2000      	movs	r0, #0
 8004f54:	f88d 0010 	strb.w	r0, [sp, #16]
 8004f58:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004f5a:	2802      	cmp	r0, #2
 8004f5c:	da02      	bge.n	8004f64 <??zcl_color_server_handle_command_40>
 8004f5e:	2080      	movs	r0, #128	@ 0x80
 8004f60:	f000 bd8a 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004f64 <??zcl_color_server_handle_command_40>:
 8004f64:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d102      	bne.n	8004f72 <??zcl_color_server_handle_command_41>
 8004f6c:	2081      	movs	r0, #129	@ 0x81
 8004f6e:	f000 bd83 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004f72 <??zcl_color_server_handle_command_41>:
 8004f72:	f05f 0904 	movs.w	r9, #4
 8004f76:	f05f 0a00 	movs.w	sl, #0
 8004f7a:	f10d 0b20 	add.w	fp, sp, #32
 8004f7e:	4652      	mov	r2, sl
 8004f80:	4649      	mov	r1, r9
 8004f82:	4658      	mov	r0, fp
 8004f84:	f002 fec8 	bl	8007d18 <__aeabi_memset>
 8004f88:	4640      	mov	r0, r8
 8004f8a:	b280      	uxth	r0, r0
 8004f8c:	2804      	cmp	r0, #4
 8004f8e:	db07      	blt.n	8004fa0 <??zcl_color_server_handle_command_42>
 8004f90:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f92:	7880      	ldrb	r0, [r0, #2]
 8004f94:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8004f98:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004f9a:	78c0      	ldrb	r0, [r0, #3]
 8004f9c:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23

08004fa0 <??zcl_color_server_handle_command_42>:
 8004fa0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004fa2:	7800      	ldrb	r0, [r0, #0]
 8004fa4:	f88d 0020 	strb.w	r0, [sp, #32]
 8004fa8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004faa:	7840      	ldrb	r0, [r0, #1]
 8004fac:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004fb0:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8004fb4:	2801      	cmp	r0, #1
 8004fb6:	d003      	beq.n	8004fc0 <??zcl_color_server_handle_command_43>
 8004fb8:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8004fbc:	2803      	cmp	r0, #3
 8004fbe:	d106      	bne.n	8004fce <??zcl_color_server_handle_command_44>

08004fc0 <??zcl_color_server_handle_command_43>:
 8004fc0:	f89d 0021 	ldrb.w	r0, [sp, #33]	@ 0x21
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d102      	bne.n	8004fce <??zcl_color_server_handle_command_44>
 8004fc8:	2085      	movs	r0, #133	@ 0x85
 8004fca:	f000 bd55 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004fce <??zcl_color_server_handle_command_44>:
 8004fce:	f89d 2023 	ldrb.w	r2, [sp, #35]	@ 0x23
 8004fd2:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
 8004fd6:	0020      	movs	r0, r4
 8004fd8:	f7ff fd7a 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d102      	bne.n	8004fe6 <??zcl_color_server_handle_command_45>
 8004fe0:	2070      	movs	r0, #112	@ 0x70
 8004fe2:	f000 bd49 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08004fe6 <??zcl_color_server_handle_command_45>:
 8004fe6:	2002      	movs	r0, #2
 8004fe8:	9001      	str	r0, [sp, #4]
 8004fea:	2001      	movs	r0, #1
 8004fec:	9000      	str	r0, [sp, #0]
 8004fee:	ab04      	add	r3, sp, #16
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	0020      	movs	r0, r4
 8004ff6:	f7fb fb48 	bl	800068a <ZbZclAttrWrite>
 8004ffa:	2002      	movs	r0, #2
 8004ffc:	9001      	str	r0, [sp, #4]
 8004ffe:	2001      	movs	r0, #1
 8005000:	9000      	str	r0, [sp, #0]
 8005002:	ab04      	add	r3, sp, #16
 8005004:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005008:	2100      	movs	r1, #0
 800500a:	0020      	movs	r0, r4
 800500c:	f7fb fb3d 	bl	800068a <ZbZclAttrWrite>
 8005010:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005012:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005014:	a908      	add	r1, sp, #32
 8005016:	0020      	movs	r0, r4
 8005018:	f8d7 c080 	ldr.w	ip, [r7, #128]	@ 0x80
 800501c:	47e0      	blx	ip
 800501e:	f000 bd2b 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005022 <??zcl_color_server_handle_command_7>:
 8005022:	2000      	movs	r0, #0
 8005024:	f88d 000f 	strb.w	r0, [sp, #15]
 8005028:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800502a:	2804      	cmp	r0, #4
 800502c:	da02      	bge.n	8005034 <??zcl_color_server_handle_command_46>
 800502e:	2080      	movs	r0, #128	@ 0x80
 8005030:	f000 bd22 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005034 <??zcl_color_server_handle_command_46>:
 8005034:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8005038:	2800      	cmp	r0, #0
 800503a:	d102      	bne.n	8005042 <??zcl_color_server_handle_command_47>
 800503c:	2081      	movs	r0, #129	@ 0x81
 800503e:	f000 bd1b 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005042 <??zcl_color_server_handle_command_47>:
 8005042:	f05f 0905 	movs.w	r9, #5
 8005046:	f05f 0a00 	movs.w	sl, #0
 800504a:	f10d 0b70 	add.w	fp, sp, #112	@ 0x70
 800504e:	4652      	mov	r2, sl
 8005050:	4649      	mov	r1, r9
 8005052:	4658      	mov	r0, fp
 8005054:	f002 fe60 	bl	8007d18 <__aeabi_memset>
 8005058:	4640      	mov	r0, r8
 800505a:	b280      	uxth	r0, r0
 800505c:	2806      	cmp	r0, #6
 800505e:	db07      	blt.n	8005070 <??zcl_color_server_handle_command_48>
 8005060:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005062:	7900      	ldrb	r0, [r0, #4]
 8005064:	f88d 0073 	strb.w	r0, [sp, #115]	@ 0x73
 8005068:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800506a:	7940      	ldrb	r0, [r0, #5]
 800506c:	f88d 0074 	strb.w	r0, [sp, #116]	@ 0x74

08005070 <??zcl_color_server_handle_command_48>:
 8005070:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8005074:	f89d 1073 	ldrb.w	r1, [sp, #115]	@ 0x73
 8005078:	0020      	movs	r0, r4
 800507a:	f7ff fd29 	bl	8004ad0 <zcl_color_options_cmd_allow>
 800507e:	2800      	cmp	r0, #0
 8005080:	d102      	bne.n	8005088 <??zcl_color_server_handle_command_49>
 8005082:	2070      	movs	r0, #112	@ 0x70
 8005084:	f000 bcf8 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005088 <??zcl_color_server_handle_command_49>:
 8005088:	2002      	movs	r0, #2
 800508a:	9001      	str	r0, [sp, #4]
 800508c:	2001      	movs	r0, #1
 800508e:	9000      	str	r0, [sp, #0]
 8005090:	f10d 030f 	add.w	r3, sp, #15
 8005094:	2208      	movs	r2, #8
 8005096:	2100      	movs	r1, #0
 8005098:	0020      	movs	r0, r4
 800509a:	f7fb faf6 	bl	800068a <ZbZclAttrWrite>
 800509e:	2002      	movs	r0, #2
 80050a0:	9001      	str	r0, [sp, #4]
 80050a2:	2001      	movs	r0, #1
 80050a4:	9000      	str	r0, [sp, #0]
 80050a6:	f10d 030f 	add.w	r3, sp, #15
 80050aa:	f244 0201 	movw	r2, #16385	@ 0x4001
 80050ae:	2100      	movs	r1, #0
 80050b0:	0020      	movs	r0, r4
 80050b2:	f7fb faea 	bl	800068a <ZbZclAttrWrite>
 80050b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80050b8:	7800      	ldrb	r0, [r0, #0]
 80050ba:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80050be:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80050c0:	7840      	ldrb	r0, [r0, #1]
 80050c2:	f88d 0071 	strb.w	r0, [sp, #113]	@ 0x71
 80050c6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80050c8:	1c80      	adds	r0, r0, #2
 80050ca:	f001 fffa 	bl	80070c2 <pletoh16>
 80050ce:	f88d 0072 	strb.w	r0, [sp, #114]	@ 0x72
 80050d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80050d4:	aa2e      	add	r2, sp, #184	@ 0xb8
 80050d6:	a91c      	add	r1, sp, #112	@ 0x70
 80050d8:	0020      	movs	r0, r4
 80050da:	f8d7 c084 	ldr.w	ip, [r7, #132]	@ 0x84
 80050de:	47e0      	blx	ip
 80050e0:	f000 bcca 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080050e4 <??zcl_color_server_handle_command_8>:
 80050e4:	2000      	movs	r0, #0
 80050e6:	f88d 000e 	strb.w	r0, [sp, #14]
 80050ea:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80050ec:	2804      	cmp	r0, #4
 80050ee:	da02      	bge.n	80050f6 <??zcl_color_server_handle_command_50>
 80050f0:	2080      	movs	r0, #128	@ 0x80
 80050f2:	f000 bcc1 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080050f6 <??zcl_color_server_handle_command_50>:
 80050f6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d102      	bne.n	8005104 <??zcl_color_server_handle_command_51>
 80050fe:	2081      	movs	r0, #129	@ 0x81
 8005100:	f000 bcba 	b.w	8005a78 <??zcl_color_server_handle_command_1>

08005104 <??zcl_color_server_handle_command_51>:
 8005104:	f05f 0906 	movs.w	r9, #6
 8005108:	f05f 0a00 	movs.w	sl, #0
 800510c:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 8005110:	4652      	mov	r2, sl
 8005112:	4649      	mov	r1, r9
 8005114:	4658      	mov	r0, fp
 8005116:	f002 fdff 	bl	8007d18 <__aeabi_memset>
 800511a:	4640      	mov	r0, r8
 800511c:	b280      	uxth	r0, r0
 800511e:	2806      	cmp	r0, #6
 8005120:	db07      	blt.n	8005132 <??zcl_color_server_handle_command_52>
 8005122:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005124:	7900      	ldrb	r0, [r0, #4]
 8005126:	f88d 006c 	strb.w	r0, [sp, #108]	@ 0x6c
 800512a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800512c:	7940      	ldrb	r0, [r0, #5]
 800512e:	f88d 006d 	strb.w	r0, [sp, #109]	@ 0x6d

08005132 <??zcl_color_server_handle_command_52>:
 8005132:	f89d 206d 	ldrb.w	r2, [sp, #109]	@ 0x6d
 8005136:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 800513a:	0020      	movs	r0, r4
 800513c:	f7ff fcc8 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005140:	2800      	cmp	r0, #0
 8005142:	d102      	bne.n	800514a <??zcl_color_server_handle_command_53>
 8005144:	2070      	movs	r0, #112	@ 0x70
 8005146:	f000 bc97 	b.w	8005a78 <??zcl_color_server_handle_command_1>

0800514a <??zcl_color_server_handle_command_53>:
 800514a:	2002      	movs	r0, #2
 800514c:	9001      	str	r0, [sp, #4]
 800514e:	2001      	movs	r0, #1
 8005150:	9000      	str	r0, [sp, #0]
 8005152:	f10d 030e 	add.w	r3, sp, #14
 8005156:	2208      	movs	r2, #8
 8005158:	2100      	movs	r1, #0
 800515a:	0020      	movs	r0, r4
 800515c:	f7fb fa95 	bl	800068a <ZbZclAttrWrite>
 8005160:	2002      	movs	r0, #2
 8005162:	9001      	str	r0, [sp, #4]
 8005164:	2001      	movs	r0, #1
 8005166:	9000      	str	r0, [sp, #0]
 8005168:	f10d 030e 	add.w	r3, sp, #14
 800516c:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005170:	2100      	movs	r1, #0
 8005172:	0020      	movs	r0, r4
 8005174:	f7fb fa89 	bl	800068a <ZbZclAttrWrite>
 8005178:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800517a:	7800      	ldrb	r0, [r0, #0]
 800517c:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 8005180:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005182:	7840      	ldrb	r0, [r0, #1]
 8005184:	f88d 0069 	strb.w	r0, [sp, #105]	@ 0x69
 8005188:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800518a:	1c80      	adds	r0, r0, #2
 800518c:	f001 ff99 	bl	80070c2 <pletoh16>
 8005190:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 8005194:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005196:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005198:	a91a      	add	r1, sp, #104	@ 0x68
 800519a:	0020      	movs	r0, r4
 800519c:	f8d7 c088 	ldr.w	ip, [r7, #136]	@ 0x88
 80051a0:	47e0      	blx	ip
 80051a2:	f000 bc69 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080051a6 <??zcl_color_server_handle_command_9>:
 80051a6:	2001      	movs	r0, #1
 80051a8:	f88d 000d 	strb.w	r0, [sp, #13]
 80051ac:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80051ae:	2806      	cmp	r0, #6
 80051b0:	da02      	bge.n	80051b8 <??zcl_color_server_handle_command_54>
 80051b2:	2080      	movs	r0, #128	@ 0x80
 80051b4:	f000 bc60 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080051b8 <??zcl_color_server_handle_command_54>:
 80051b8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80051bc:	2800      	cmp	r0, #0
 80051be:	d102      	bne.n	80051c6 <??zcl_color_server_handle_command_55>
 80051c0:	2081      	movs	r0, #129	@ 0x81
 80051c2:	f000 bc59 	b.w	8005a78 <??zcl_color_server_handle_command_1>

080051c6 <??zcl_color_server_handle_command_55>:
 80051c6:	f05f 0908 	movs.w	r9, #8
 80051ca:	f05f 0a00 	movs.w	sl, #0
 80051ce:	f10d 0b60 	add.w	fp, sp, #96	@ 0x60
 80051d2:	4652      	mov	r2, sl
 80051d4:	4649      	mov	r1, r9
 80051d6:	4658      	mov	r0, fp
 80051d8:	f002 fd9e 	bl	8007d18 <__aeabi_memset>
 80051dc:	4640      	mov	r0, r8
 80051de:	b280      	uxth	r0, r0
 80051e0:	2808      	cmp	r0, #8
 80051e2:	db07      	blt.n	80051f4 <??zcl_color_server_handle_command_56>
 80051e4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80051e6:	7980      	ldrb	r0, [r0, #6]
 80051e8:	f88d 0066 	strb.w	r0, [sp, #102]	@ 0x66
 80051ec:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80051ee:	79c0      	ldrb	r0, [r0, #7]
 80051f0:	f88d 0067 	strb.w	r0, [sp, #103]	@ 0x67

080051f4 <??zcl_color_server_handle_command_56>:
 80051f4:	f89d 2067 	ldrb.w	r2, [sp, #103]	@ 0x67
 80051f8:	f89d 1066 	ldrb.w	r1, [sp, #102]	@ 0x66
 80051fc:	0020      	movs	r0, r4
 80051fe:	f7ff fc67 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005202:	2800      	cmp	r0, #0
 8005204:	d102      	bne.n	800520c <??zcl_color_server_handle_command_57>
 8005206:	2070      	movs	r0, #112	@ 0x70
 8005208:	f000 bc36 	b.w	8005a78 <??zcl_color_server_handle_command_1>

0800520c <??zcl_color_server_handle_command_57>:
 800520c:	2002      	movs	r0, #2
 800520e:	9001      	str	r0, [sp, #4]
 8005210:	2001      	movs	r0, #1
 8005212:	9000      	str	r0, [sp, #0]
 8005214:	f10d 030d 	add.w	r3, sp, #13
 8005218:	2208      	movs	r2, #8
 800521a:	2100      	movs	r1, #0
 800521c:	0020      	movs	r0, r4
 800521e:	f7fb fa34 	bl	800068a <ZbZclAttrWrite>
 8005222:	2002      	movs	r0, #2
 8005224:	9001      	str	r0, [sp, #4]
 8005226:	2001      	movs	r0, #1
 8005228:	9000      	str	r0, [sp, #0]
 800522a:	f10d 030d 	add.w	r3, sp, #13
 800522e:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005232:	2100      	movs	r1, #0
 8005234:	0020      	movs	r0, r4
 8005236:	f7fb fa28 	bl	800068a <ZbZclAttrWrite>
 800523a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800523c:	f001 ff41 	bl	80070c2 <pletoh16>
 8005240:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
 8005244:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005246:	1c80      	adds	r0, r0, #2
 8005248:	f001 ff3b 	bl	80070c2 <pletoh16>
 800524c:	f8ad 0062 	strh.w	r0, [sp, #98]	@ 0x62
 8005250:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005252:	1d00      	adds	r0, r0, #4
 8005254:	f001 ff35 	bl	80070c2 <pletoh16>
 8005258:	f8ad 0064 	strh.w	r0, [sp, #100]	@ 0x64
 800525c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800525e:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005260:	a918      	add	r1, sp, #96	@ 0x60
 8005262:	0020      	movs	r0, r4
 8005264:	f8d7 c08c 	ldr.w	ip, [r7, #140]	@ 0x8c
 8005268:	47e0      	blx	ip
 800526a:	f000 bc05 	b.w	8005a78 <??zcl_color_server_handle_command_1>

0800526e <??zcl_color_server_handle_command_10>:
 800526e:	2001      	movs	r0, #1
 8005270:	f88d 000c 	strb.w	r0, [sp, #12]
 8005274:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005276:	2804      	cmp	r0, #4
 8005278:	da01      	bge.n	800527e <??zcl_color_server_handle_command_58>
 800527a:	2080      	movs	r0, #128	@ 0x80
 800527c:	e3fc      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800527e <??zcl_color_server_handle_command_58>:
 800527e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8005282:	2800      	cmp	r0, #0
 8005284:	d101      	bne.n	800528a <??zcl_color_server_handle_command_59>
 8005286:	2081      	movs	r0, #129	@ 0x81
 8005288:	e3f6      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800528a <??zcl_color_server_handle_command_59>:
 800528a:	f05f 0906 	movs.w	r9, #6
 800528e:	f05f 0a00 	movs.w	sl, #0
 8005292:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8005296:	4652      	mov	r2, sl
 8005298:	4649      	mov	r1, r9
 800529a:	4658      	mov	r0, fp
 800529c:	f002 fd3c 	bl	8007d18 <__aeabi_memset>
 80052a0:	4640      	mov	r0, r8
 80052a2:	b280      	uxth	r0, r0
 80052a4:	2806      	cmp	r0, #6
 80052a6:	db07      	blt.n	80052b8 <??zcl_color_server_handle_command_60>
 80052a8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052aa:	7900      	ldrb	r0, [r0, #4]
 80052ac:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80052b0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052b2:	7940      	ldrb	r0, [r0, #5]
 80052b4:	f88d 003d 	strb.w	r0, [sp, #61]	@ 0x3d

080052b8 <??zcl_color_server_handle_command_60>:
 80052b8:	f89d 203d 	ldrb.w	r2, [sp, #61]	@ 0x3d
 80052bc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80052c0:	0020      	movs	r0, r4
 80052c2:	f7ff fc05 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d101      	bne.n	80052ce <??zcl_color_server_handle_command_61>
 80052ca:	2070      	movs	r0, #112	@ 0x70
 80052cc:	e3d4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080052ce <??zcl_color_server_handle_command_61>:
 80052ce:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052d0:	f001 fef7 	bl	80070c2 <pletoh16>
 80052d4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80052d8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80052da:	1c80      	adds	r0, r0, #2
 80052dc:	f001 fef1 	bl	80070c2 <pletoh16>
 80052e0:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80052e4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d105      	bne.n	80052f8 <??zcl_color_server_handle_command_62>
 80052ec:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d101      	bne.n	80052f8 <??zcl_color_server_handle_command_62>
 80052f4:	2000      	movs	r0, #0
 80052f6:	e3bf      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080052f8 <??zcl_color_server_handle_command_62>:
 80052f8:	2002      	movs	r0, #2
 80052fa:	9001      	str	r0, [sp, #4]
 80052fc:	2001      	movs	r0, #1
 80052fe:	9000      	str	r0, [sp, #0]
 8005300:	ab03      	add	r3, sp, #12
 8005302:	2208      	movs	r2, #8
 8005304:	2100      	movs	r1, #0
 8005306:	0020      	movs	r0, r4
 8005308:	f7fb f9bf 	bl	800068a <ZbZclAttrWrite>
 800530c:	2002      	movs	r0, #2
 800530e:	9001      	str	r0, [sp, #4]
 8005310:	2001      	movs	r0, #1
 8005312:	9000      	str	r0, [sp, #0]
 8005314:	ab03      	add	r3, sp, #12
 8005316:	f244 0201 	movw	r2, #16385	@ 0x4001
 800531a:	2100      	movs	r1, #0
 800531c:	0020      	movs	r0, r4
 800531e:	f7fb f9b4 	bl	800068a <ZbZclAttrWrite>
 8005322:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005324:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005326:	a90e      	add	r1, sp, #56	@ 0x38
 8005328:	0020      	movs	r0, r4
 800532a:	f8d7 c090 	ldr.w	ip, [r7, #144]	@ 0x90
 800532e:	47e0      	blx	ip
 8005330:	e3a2      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005332 <??zcl_color_server_handle_command_11>:
 8005332:	2001      	movs	r0, #1
 8005334:	f88d 000b 	strb.w	r0, [sp, #11]
 8005338:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800533a:	2806      	cmp	r0, #6
 800533c:	da01      	bge.n	8005342 <??zcl_color_server_handle_command_63>
 800533e:	2080      	movs	r0, #128	@ 0x80
 8005340:	e39a      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005342 <??zcl_color_server_handle_command_63>:
 8005342:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8005346:	2800      	cmp	r0, #0
 8005348:	d101      	bne.n	800534e <??zcl_color_server_handle_command_64>
 800534a:	2081      	movs	r0, #129	@ 0x81
 800534c:	e394      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800534e <??zcl_color_server_handle_command_64>:
 800534e:	f05f 0908 	movs.w	r9, #8
 8005352:	f05f 0a00 	movs.w	sl, #0
 8005356:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 800535a:	4652      	mov	r2, sl
 800535c:	4649      	mov	r1, r9
 800535e:	4658      	mov	r0, fp
 8005360:	f002 fcda 	bl	8007d18 <__aeabi_memset>
 8005364:	4640      	mov	r0, r8
 8005366:	b280      	uxth	r0, r0
 8005368:	2808      	cmp	r0, #8
 800536a:	db07      	blt.n	800537c <??zcl_color_server_handle_command_65>
 800536c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800536e:	7980      	ldrb	r0, [r0, #6]
 8005370:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8005374:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005376:	79c0      	ldrb	r0, [r0, #7]
 8005378:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f

0800537c <??zcl_color_server_handle_command_65>:
 800537c:	f89d 205f 	ldrb.w	r2, [sp, #95]	@ 0x5f
 8005380:	f89d 105e 	ldrb.w	r1, [sp, #94]	@ 0x5e
 8005384:	0020      	movs	r0, r4
 8005386:	f7ff fba3 	bl	8004ad0 <zcl_color_options_cmd_allow>
 800538a:	2800      	cmp	r0, #0
 800538c:	d101      	bne.n	8005392 <??zcl_color_server_handle_command_66>
 800538e:	2070      	movs	r0, #112	@ 0x70
 8005390:	e372      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005392 <??zcl_color_server_handle_command_66>:
 8005392:	2002      	movs	r0, #2
 8005394:	9001      	str	r0, [sp, #4]
 8005396:	2001      	movs	r0, #1
 8005398:	9000      	str	r0, [sp, #0]
 800539a:	f10d 030b 	add.w	r3, sp, #11
 800539e:	2208      	movs	r2, #8
 80053a0:	2100      	movs	r1, #0
 80053a2:	0020      	movs	r0, r4
 80053a4:	f7fb f971 	bl	800068a <ZbZclAttrWrite>
 80053a8:	2002      	movs	r0, #2
 80053aa:	9001      	str	r0, [sp, #4]
 80053ac:	2001      	movs	r0, #1
 80053ae:	9000      	str	r0, [sp, #0]
 80053b0:	f10d 030b 	add.w	r3, sp, #11
 80053b4:	f244 0201 	movw	r2, #16385	@ 0x4001
 80053b8:	2100      	movs	r1, #0
 80053ba:	0020      	movs	r0, r4
 80053bc:	f7fb f965 	bl	800068a <ZbZclAttrWrite>
 80053c0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80053c2:	f001 fe7e 	bl	80070c2 <pletoh16>
 80053c6:	f8ad 0058 	strh.w	r0, [sp, #88]	@ 0x58
 80053ca:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80053cc:	1c80      	adds	r0, r0, #2
 80053ce:	f001 fe78 	bl	80070c2 <pletoh16>
 80053d2:	f8ad 005a 	strh.w	r0, [sp, #90]	@ 0x5a
 80053d6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80053d8:	1d00      	adds	r0, r0, #4
 80053da:	f001 fe72 	bl	80070c2 <pletoh16>
 80053de:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80053e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80053e4:	aa2e      	add	r2, sp, #184	@ 0xb8
 80053e6:	a916      	add	r1, sp, #88	@ 0x58
 80053e8:	0020      	movs	r0, r4
 80053ea:	f8d7 c094 	ldr.w	ip, [r7, #148]	@ 0x94
 80053ee:	47e0      	blx	ip
 80053f0:	e342      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080053f2 <??zcl_color_server_handle_command_12>:
 80053f2:	2002      	movs	r0, #2
 80053f4:	f88d 000a 	strb.w	r0, [sp, #10]
 80053f8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d101      	bne.n	8005404 <??zcl_color_server_handle_command_67>
 8005400:	2081      	movs	r0, #129	@ 0x81
 8005402:	e339      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005404 <??zcl_color_server_handle_command_67>:
 8005404:	f05f 0906 	movs.w	r9, #6
 8005408:	f05f 0a00 	movs.w	sl, #0
 800540c:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
 8005410:	4652      	mov	r2, sl
 8005412:	4649      	mov	r1, r9
 8005414:	4658      	mov	r0, fp
 8005416:	f002 fc7f 	bl	8007d18 <__aeabi_memset>
 800541a:	4640      	mov	r0, r8
 800541c:	b280      	uxth	r0, r0
 800541e:	2806      	cmp	r0, #6
 8005420:	db07      	blt.n	8005432 <??zcl_color_server_handle_command_68>
 8005422:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005424:	7900      	ldrb	r0, [r0, #4]
 8005426:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 800542a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800542c:	7940      	ldrb	r0, [r0, #5]
 800542e:	f88d 0035 	strb.w	r0, [sp, #53]	@ 0x35

08005432 <??zcl_color_server_handle_command_68>:
 8005432:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 8005436:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800543a:	0020      	movs	r0, r4
 800543c:	f7ff fb48 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005440:	2800      	cmp	r0, #0
 8005442:	d101      	bne.n	8005448 <??zcl_color_server_handle_command_69>
 8005444:	2070      	movs	r0, #112	@ 0x70
 8005446:	e317      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005448 <??zcl_color_server_handle_command_69>:
 8005448:	2002      	movs	r0, #2
 800544a:	9001      	str	r0, [sp, #4]
 800544c:	2001      	movs	r0, #1
 800544e:	9000      	str	r0, [sp, #0]
 8005450:	f10d 030a 	add.w	r3, sp, #10
 8005454:	2208      	movs	r2, #8
 8005456:	2100      	movs	r1, #0
 8005458:	0020      	movs	r0, r4
 800545a:	f7fb f916 	bl	800068a <ZbZclAttrWrite>
 800545e:	2002      	movs	r0, #2
 8005460:	9001      	str	r0, [sp, #4]
 8005462:	2001      	movs	r0, #1
 8005464:	9000      	str	r0, [sp, #0]
 8005466:	f10d 030a 	add.w	r3, sp, #10
 800546a:	f244 0201 	movw	r2, #16385	@ 0x4001
 800546e:	2100      	movs	r1, #0
 8005470:	0020      	movs	r0, r4
 8005472:	f7fb f90a 	bl	800068a <ZbZclAttrWrite>
 8005476:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005478:	f001 fe23 	bl	80070c2 <pletoh16>
 800547c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8005480:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8005484:	f5b0 4f7f 	cmp.w	r0, #65280	@ 0xff00
 8005488:	db03      	blt.n	8005492 <??zcl_color_server_handle_command_70>
 800548a:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 800548e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30

08005492 <??zcl_color_server_handle_command_70>:
 8005492:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005494:	1c80      	adds	r0, r0, #2
 8005496:	f001 fe14 	bl	80070c2 <pletoh16>
 800549a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800549e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054a0:	aa2e      	add	r2, sp, #184	@ 0xb8
 80054a2:	a90c      	add	r1, sp, #48	@ 0x30
 80054a4:	0020      	movs	r0, r4
 80054a6:	f8d7 c098 	ldr.w	ip, [r7, #152]	@ 0x98
 80054aa:	47e0      	blx	ip
 80054ac:	e2e4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080054ae <??zcl_color_server_handle_command_13>:
 80054ae:	2000      	movs	r0, #0
 80054b0:	f88d 001c 	strb.w	r0, [sp, #28]
 80054b4:	2003      	movs	r0, #3
 80054b6:	f88d 001b 	strb.w	r0, [sp, #27]
 80054ba:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80054bc:	2805      	cmp	r0, #5
 80054be:	da01      	bge.n	80054c4 <??zcl_color_server_handle_command_71>
 80054c0:	2080      	movs	r0, #128	@ 0x80
 80054c2:	e2d9      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080054c4 <??zcl_color_server_handle_command_71>:
 80054c4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d101      	bne.n	80054d0 <??zcl_color_server_handle_command_72>
 80054cc:	2081      	movs	r0, #129	@ 0x81
 80054ce:	e2d3      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080054d0 <??zcl_color_server_handle_command_72>:
 80054d0:	f05f 0908 	movs.w	r9, #8
 80054d4:	f05f 0a00 	movs.w	sl, #0
 80054d8:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 80054dc:	4652      	mov	r2, sl
 80054de:	4649      	mov	r1, r9
 80054e0:	4658      	mov	r0, fp
 80054e2:	f002 fc19 	bl	8007d18 <__aeabi_memset>
 80054e6:	4640      	mov	r0, r8
 80054e8:	b280      	uxth	r0, r0
 80054ea:	2807      	cmp	r0, #7
 80054ec:	db07      	blt.n	80054fe <??zcl_color_server_handle_command_73>
 80054ee:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80054f0:	7940      	ldrb	r0, [r0, #5]
 80054f2:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
 80054f6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80054f8:	7980      	ldrb	r0, [r0, #6]
 80054fa:	f88d 0057 	strb.w	r0, [sp, #87]	@ 0x57

080054fe <??zcl_color_server_handle_command_73>:
 80054fe:	f89d 2057 	ldrb.w	r2, [sp, #87]	@ 0x57
 8005502:	f89d 1056 	ldrb.w	r1, [sp, #86]	@ 0x56
 8005506:	0020      	movs	r0, r4
 8005508:	f7ff fae2 	bl	8004ad0 <zcl_color_options_cmd_allow>
 800550c:	2800      	cmp	r0, #0
 800550e:	d101      	bne.n	8005514 <??zcl_color_server_handle_command_74>
 8005510:	2070      	movs	r0, #112	@ 0x70
 8005512:	e2b1      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005514 <??zcl_color_server_handle_command_74>:
 8005514:	2002      	movs	r0, #2
 8005516:	9001      	str	r0, [sp, #4]
 8005518:	2001      	movs	r0, #1
 800551a:	9000      	str	r0, [sp, #0]
 800551c:	ab07      	add	r3, sp, #28
 800551e:	2208      	movs	r2, #8
 8005520:	2100      	movs	r1, #0
 8005522:	0020      	movs	r0, r4
 8005524:	f7fb f8b1 	bl	800068a <ZbZclAttrWrite>
 8005528:	2002      	movs	r0, #2
 800552a:	9001      	str	r0, [sp, #4]
 800552c:	2001      	movs	r0, #1
 800552e:	9000      	str	r0, [sp, #0]
 8005530:	f10d 031b 	add.w	r3, sp, #27
 8005534:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005538:	2100      	movs	r1, #0
 800553a:	0020      	movs	r0, r4
 800553c:	f7fb f8a5 	bl	800068a <ZbZclAttrWrite>
 8005540:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005542:	f001 fdbe 	bl	80070c2 <pletoh16>
 8005546:	f8ad 0050 	strh.w	r0, [sp, #80]	@ 0x50
 800554a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800554c:	7880      	ldrb	r0, [r0, #2]
 800554e:	f88d 0052 	strb.w	r0, [sp, #82]	@ 0x52
 8005552:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005554:	1cc0      	adds	r0, r0, #3
 8005556:	f001 fdb4 	bl	80070c2 <pletoh16>
 800555a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 800555e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005560:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005562:	a914      	add	r1, sp, #80	@ 0x50
 8005564:	0020      	movs	r0, r4
 8005566:	f8d7 c09c 	ldr.w	ip, [r7, #156]	@ 0x9c
 800556a:	47e0      	blx	ip
 800556c:	e284      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800556e <??zcl_color_server_handle_command_14>:
 800556e:	2000      	movs	r0, #0
 8005570:	f88d 001a 	strb.w	r0, [sp, #26]
 8005574:	2003      	movs	r0, #3
 8005576:	f88d 0019 	strb.w	r0, [sp, #25]
 800557a:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800557c:	2803      	cmp	r0, #3
 800557e:	da01      	bge.n	8005584 <??zcl_color_server_handle_command_75>
 8005580:	2080      	movs	r0, #128	@ 0x80
 8005582:	e279      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005584 <??zcl_color_server_handle_command_75>:
 8005584:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8005588:	2800      	cmp	r0, #0
 800558a:	d101      	bne.n	8005590 <??zcl_color_server_handle_command_76>
 800558c:	2081      	movs	r0, #129	@ 0x81
 800558e:	e273      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005590 <??zcl_color_server_handle_command_76>:
 8005590:	f05f 0906 	movs.w	r9, #6
 8005594:	f05f 0a00 	movs.w	sl, #0
 8005598:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800559c:	4652      	mov	r2, sl
 800559e:	4649      	mov	r1, r9
 80055a0:	4658      	mov	r0, fp
 80055a2:	f002 fbb9 	bl	8007d18 <__aeabi_memset>
 80055a6:	4640      	mov	r0, r8
 80055a8:	b280      	uxth	r0, r0
 80055aa:	2805      	cmp	r0, #5
 80055ac:	db07      	blt.n	80055be <??zcl_color_server_handle_command_77>
 80055ae:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055b0:	78c0      	ldrb	r0, [r0, #3]
 80055b2:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
 80055b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055b8:	7900      	ldrb	r0, [r0, #4]
 80055ba:	f88d 002d 	strb.w	r0, [sp, #45]	@ 0x2d

080055be <??zcl_color_server_handle_command_77>:
 80055be:	f89d 202d 	ldrb.w	r2, [sp, #45]	@ 0x2d
 80055c2:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 80055c6:	0020      	movs	r0, r4
 80055c8:	f7ff fa82 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d101      	bne.n	80055d4 <??zcl_color_server_handle_command_78>
 80055d0:	2070      	movs	r0, #112	@ 0x70
 80055d2:	e251      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080055d4 <??zcl_color_server_handle_command_78>:
 80055d4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055d6:	7800      	ldrb	r0, [r0, #0]
 80055d8:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80055dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055de:	1c40      	adds	r0, r0, #1
 80055e0:	f001 fd6f 	bl	80070c2 <pletoh16>
 80055e4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80055e8:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 80055ec:	2801      	cmp	r0, #1
 80055ee:	d003      	beq.n	80055f8 <??zcl_color_server_handle_command_79>
 80055f0:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 80055f4:	2803      	cmp	r0, #3
 80055f6:	d105      	bne.n	8005604 <??zcl_color_server_handle_command_80>

080055f8 <??zcl_color_server_handle_command_79>:
 80055f8:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d101      	bne.n	8005604 <??zcl_color_server_handle_command_80>
 8005600:	2085      	movs	r0, #133	@ 0x85
 8005602:	e239      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005604 <??zcl_color_server_handle_command_80>:
 8005604:	2002      	movs	r0, #2
 8005606:	9001      	str	r0, [sp, #4]
 8005608:	2001      	movs	r0, #1
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	f10d 031a 	add.w	r3, sp, #26
 8005610:	2208      	movs	r2, #8
 8005612:	2100      	movs	r1, #0
 8005614:	0020      	movs	r0, r4
 8005616:	f7fb f838 	bl	800068a <ZbZclAttrWrite>
 800561a:	2002      	movs	r0, #2
 800561c:	9001      	str	r0, [sp, #4]
 800561e:	2001      	movs	r0, #1
 8005620:	9000      	str	r0, [sp, #0]
 8005622:	f10d 0319 	add.w	r3, sp, #25
 8005626:	f244 0201 	movw	r2, #16385	@ 0x4001
 800562a:	2100      	movs	r1, #0
 800562c:	0020      	movs	r0, r4
 800562e:	f7fb f82c 	bl	800068a <ZbZclAttrWrite>
 8005632:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005634:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005636:	a90a      	add	r1, sp, #40	@ 0x28
 8005638:	0020      	movs	r0, r4
 800563a:	f8d7 c0a0 	ldr.w	ip, [r7, #160]	@ 0xa0
 800563e:	47e0      	blx	ip
 8005640:	e21a      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005642 <??zcl_color_server_handle_command_15>:
 8005642:	2000      	movs	r0, #0
 8005644:	f88d 0018 	strb.w	r0, [sp, #24]
 8005648:	2003      	movs	r0, #3
 800564a:	f88d 0017 	strb.w	r0, [sp, #23]
 800564e:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005650:	2805      	cmp	r0, #5
 8005652:	da01      	bge.n	8005658 <??zcl_color_server_handle_command_81>
 8005654:	2080      	movs	r0, #128	@ 0x80
 8005656:	e20f      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005658 <??zcl_color_server_handle_command_81>:
 8005658:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800565c:	2800      	cmp	r0, #0
 800565e:	d101      	bne.n	8005664 <??zcl_color_server_handle_command_82>
 8005660:	2081      	movs	r0, #129	@ 0x81
 8005662:	e209      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005664 <??zcl_color_server_handle_command_82>:
 8005664:	f05f 0908 	movs.w	r9, #8
 8005668:	f05f 0a00 	movs.w	sl, #0
 800566c:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8005670:	4652      	mov	r2, sl
 8005672:	4649      	mov	r1, r9
 8005674:	4658      	mov	r0, fp
 8005676:	f002 fb4f 	bl	8007d18 <__aeabi_memset>
 800567a:	4640      	mov	r0, r8
 800567c:	b280      	uxth	r0, r0
 800567e:	2807      	cmp	r0, #7
 8005680:	db07      	blt.n	8005692 <??zcl_color_server_handle_command_83>
 8005682:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005684:	7940      	ldrb	r0, [r0, #5]
 8005686:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
 800568a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800568c:	7980      	ldrb	r0, [r0, #6]
 800568e:	f88d 004f 	strb.w	r0, [sp, #79]	@ 0x4f

08005692 <??zcl_color_server_handle_command_83>:
 8005692:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 8005696:	f89d 104e 	ldrb.w	r1, [sp, #78]	@ 0x4e
 800569a:	0020      	movs	r0, r4
 800569c:	f7ff fa18 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d101      	bne.n	80056a8 <??zcl_color_server_handle_command_84>
 80056a4:	2070      	movs	r0, #112	@ 0x70
 80056a6:	e1e7      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080056a8 <??zcl_color_server_handle_command_84>:
 80056a8:	2002      	movs	r0, #2
 80056aa:	9001      	str	r0, [sp, #4]
 80056ac:	2001      	movs	r0, #1
 80056ae:	9000      	str	r0, [sp, #0]
 80056b0:	ab06      	add	r3, sp, #24
 80056b2:	2208      	movs	r2, #8
 80056b4:	2100      	movs	r1, #0
 80056b6:	0020      	movs	r0, r4
 80056b8:	f7fa ffe7 	bl	800068a <ZbZclAttrWrite>
 80056bc:	2002      	movs	r0, #2
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	2001      	movs	r0, #1
 80056c2:	9000      	str	r0, [sp, #0]
 80056c4:	f10d 0317 	add.w	r3, sp, #23
 80056c8:	f244 0201 	movw	r2, #16385	@ 0x4001
 80056cc:	2100      	movs	r1, #0
 80056ce:	0020      	movs	r0, r4
 80056d0:	f7fa ffdb 	bl	800068a <ZbZclAttrWrite>
 80056d4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80056d6:	7800      	ldrb	r0, [r0, #0]
 80056d8:	f88d 0048 	strb.w	r0, [sp, #72]	@ 0x48
 80056dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80056de:	1c40      	adds	r0, r0, #1
 80056e0:	f001 fcef 	bl	80070c2 <pletoh16>
 80056e4:	f8ad 004a 	strh.w	r0, [sp, #74]	@ 0x4a
 80056e8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80056ea:	1cc0      	adds	r0, r0, #3
 80056ec:	f001 fce9 	bl	80070c2 <pletoh16>
 80056f0:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
 80056f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80056f6:	aa2e      	add	r2, sp, #184	@ 0xb8
 80056f8:	a912      	add	r1, sp, #72	@ 0x48
 80056fa:	0020      	movs	r0, r4
 80056fc:	f8d7 c0a4 	ldr.w	ip, [r7, #164]	@ 0xa4
 8005700:	47e0      	blx	ip
 8005702:	e1b9      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005704 <??zcl_color_server_handle_command_16>:
 8005704:	2000      	movs	r0, #0
 8005706:	f88d 0016 	strb.w	r0, [sp, #22]
 800570a:	2003      	movs	r0, #3
 800570c:	f88d 0015 	strb.w	r0, [sp, #21]
 8005710:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005712:	2805      	cmp	r0, #5
 8005714:	da01      	bge.n	800571a <??zcl_color_server_handle_command_85>
 8005716:	2080      	movs	r0, #128	@ 0x80
 8005718:	e1ae      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800571a <??zcl_color_server_handle_command_85>:
 800571a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800571e:	2800      	cmp	r0, #0
 8005720:	d101      	bne.n	8005726 <??zcl_color_server_handle_command_86>
 8005722:	2081      	movs	r0, #129	@ 0x81
 8005724:	e1a8      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005726 <??zcl_color_server_handle_command_86>:
 8005726:	f05f 0908 	movs.w	r9, #8
 800572a:	f05f 0a00 	movs.w	sl, #0
 800572e:	f10d 0b40 	add.w	fp, sp, #64	@ 0x40
 8005732:	4652      	mov	r2, sl
 8005734:	4649      	mov	r1, r9
 8005736:	4658      	mov	r0, fp
 8005738:	f002 faee 	bl	8007d18 <__aeabi_memset>
 800573c:	4640      	mov	r0, r8
 800573e:	b280      	uxth	r0, r0
 8005740:	2807      	cmp	r0, #7
 8005742:	db07      	blt.n	8005754 <??zcl_color_server_handle_command_87>
 8005744:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005746:	7940      	ldrb	r0, [r0, #5]
 8005748:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 800574c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800574e:	7980      	ldrb	r0, [r0, #6]
 8005750:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47

08005754 <??zcl_color_server_handle_command_87>:
 8005754:	f89d 2047 	ldrb.w	r2, [sp, #71]	@ 0x47
 8005758:	f89d 1046 	ldrb.w	r1, [sp, #70]	@ 0x46
 800575c:	0020      	movs	r0, r4
 800575e:	f7ff f9b7 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005762:	2800      	cmp	r0, #0
 8005764:	d101      	bne.n	800576a <??zcl_color_server_handle_command_88>
 8005766:	2070      	movs	r0, #112	@ 0x70
 8005768:	e186      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800576a <??zcl_color_server_handle_command_88>:
 800576a:	2002      	movs	r0, #2
 800576c:	9001      	str	r0, [sp, #4]
 800576e:	2001      	movs	r0, #1
 8005770:	9000      	str	r0, [sp, #0]
 8005772:	f10d 0316 	add.w	r3, sp, #22
 8005776:	2208      	movs	r2, #8
 8005778:	2100      	movs	r1, #0
 800577a:	0020      	movs	r0, r4
 800577c:	f7fa ff85 	bl	800068a <ZbZclAttrWrite>
 8005780:	2002      	movs	r0, #2
 8005782:	9001      	str	r0, [sp, #4]
 8005784:	2001      	movs	r0, #1
 8005786:	9000      	str	r0, [sp, #0]
 8005788:	f10d 0315 	add.w	r3, sp, #21
 800578c:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005790:	2100      	movs	r1, #0
 8005792:	0020      	movs	r0, r4
 8005794:	f7fa ff79 	bl	800068a <ZbZclAttrWrite>
 8005798:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800579a:	f001 fc92 	bl	80070c2 <pletoh16>
 800579e:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80057a2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80057a4:	7880      	ldrb	r0, [r0, #2]
 80057a6:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
 80057aa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80057ac:	1cc0      	adds	r0, r0, #3
 80057ae:	f001 fc88 	bl	80070c2 <pletoh16>
 80057b2:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 80057b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057b8:	aa2e      	add	r2, sp, #184	@ 0xb8
 80057ba:	a910      	add	r1, sp, #64	@ 0x40
 80057bc:	0020      	movs	r0, r4
 80057be:	f8d7 c0a8 	ldr.w	ip, [r7, #168]	@ 0xa8
 80057c2:	47e0      	blx	ip
 80057c4:	e158      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080057c6 <??zcl_color_server_handle_command_17>:
 80057c6:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80057c8:	2807      	cmp	r0, #7
 80057ca:	da01      	bge.n	80057d0 <??zcl_color_server_handle_command_89>
 80057cc:	2080      	movs	r0, #128	@ 0x80
 80057ce:	e153      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080057d0 <??zcl_color_server_handle_command_89>:
 80057d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d101      	bne.n	80057dc <??zcl_color_server_handle_command_90>
 80057d8:	2081      	movs	r0, #129	@ 0x81
 80057da:	e14d      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080057dc <??zcl_color_server_handle_command_90>:
 80057dc:	f05f 090a 	movs.w	r9, #10
 80057e0:	f05f 0a00 	movs.w	sl, #0
 80057e4:	f10d 0ba8 	add.w	fp, sp, #168	@ 0xa8
 80057e8:	4652      	mov	r2, sl
 80057ea:	4649      	mov	r1, r9
 80057ec:	4658      	mov	r0, fp
 80057ee:	f002 fa93 	bl	8007d18 <__aeabi_memset>
 80057f2:	4640      	mov	r0, r8
 80057f4:	b280      	uxth	r0, r0
 80057f6:	2809      	cmp	r0, #9
 80057f8:	db07      	blt.n	800580a <??zcl_color_server_handle_command_91>
 80057fa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80057fc:	79c0      	ldrb	r0, [r0, #7]
 80057fe:	f88d 00b0 	strb.w	r0, [sp, #176]	@ 0xb0
 8005802:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005804:	7a00      	ldrb	r0, [r0, #8]
 8005806:	f88d 00b1 	strb.w	r0, [sp, #177]	@ 0xb1

0800580a <??zcl_color_server_handle_command_91>:
 800580a:	f89d 20b1 	ldrb.w	r2, [sp, #177]	@ 0xb1
 800580e:	f89d 10b0 	ldrb.w	r1, [sp, #176]	@ 0xb0
 8005812:	0020      	movs	r0, r4
 8005814:	f7ff f95c 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005818:	2800      	cmp	r0, #0
 800581a:	d101      	bne.n	8005820 <??zcl_color_server_handle_command_92>
 800581c:	2070      	movs	r0, #112	@ 0x70
 800581e:	e12b      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005820 <??zcl_color_server_handle_command_92>:
 8005820:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005822:	7800      	ldrb	r0, [r0, #0]
 8005824:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
 8005828:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800582a:	7840      	ldrb	r0, [r0, #1]
 800582c:	f88d 00a9 	strb.w	r0, [sp, #169]	@ 0xa9
 8005830:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005832:	7880      	ldrb	r0, [r0, #2]
 8005834:	f88d 00aa 	strb.w	r0, [sp, #170]	@ 0xaa
 8005838:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800583a:	1cc0      	adds	r0, r0, #3
 800583c:	f001 fc41 	bl	80070c2 <pletoh16>
 8005840:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 8005844:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005846:	1d40      	adds	r0, r0, #5
 8005848:	f001 fc3b 	bl	80070c2 <pletoh16>
 800584c:	f8ad 00ae 	strh.w	r0, [sp, #174]	@ 0xae
 8005850:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005852:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005854:	a92a      	add	r1, sp, #168	@ 0xa8
 8005856:	0020      	movs	r0, r4
 8005858:	f8d7 c0ac 	ldr.w	ip, [r7, #172]	@ 0xac
 800585c:	47e0      	blx	ip
 800585e:	e10b      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005860 <??zcl_color_server_handle_command_18>:
 8005860:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8005864:	2800      	cmp	r0, #0
 8005866:	d101      	bne.n	800586c <??zcl_color_server_handle_command_93>
 8005868:	2081      	movs	r0, #129	@ 0x81
 800586a:	e105      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800586c <??zcl_color_server_handle_command_93>:
 800586c:	f05f 0902 	movs.w	r9, #2
 8005870:	f05f 0a00 	movs.w	sl, #0
 8005874:	46eb      	mov	fp, sp
 8005876:	4652      	mov	r2, sl
 8005878:	4649      	mov	r1, r9
 800587a:	4658      	mov	r0, fp
 800587c:	f002 fa4c 	bl	8007d18 <__aeabi_memset>
 8005880:	4640      	mov	r0, r8
 8005882:	b280      	uxth	r0, r0
 8005884:	2802      	cmp	r0, #2
 8005886:	db07      	blt.n	8005898 <??zcl_color_server_handle_command_94>
 8005888:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800588a:	7800      	ldrb	r0, [r0, #0]
 800588c:	f88d 0000 	strb.w	r0, [sp]
 8005890:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005892:	7840      	ldrb	r0, [r0, #1]
 8005894:	f88d 0001 	strb.w	r0, [sp, #1]

08005898 <??zcl_color_server_handle_command_94>:
 8005898:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800589c:	f89d 1000 	ldrb.w	r1, [sp]
 80058a0:	0020      	movs	r0, r4
 80058a2:	f7ff f915 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d101      	bne.n	80058ae <??zcl_color_server_handle_command_95>
 80058aa:	2070      	movs	r0, #112	@ 0x70
 80058ac:	e0e4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058ae <??zcl_color_server_handle_command_95>:
 80058ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80058b0:	aa2e      	add	r2, sp, #184	@ 0xb8
 80058b2:	4669      	mov	r1, sp
 80058b4:	0020      	movs	r0, r4
 80058b6:	f8d7 c0b0 	ldr.w	ip, [r7, #176]	@ 0xb0
 80058ba:	47e0      	blx	ip
 80058bc:	e0dc      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058be <??zcl_color_server_handle_command_19>:
 80058be:	2002      	movs	r0, #2
 80058c0:	f88d 0009 	strb.w	r0, [sp, #9]
 80058c4:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80058c6:	2807      	cmp	r0, #7
 80058c8:	da01      	bge.n	80058ce <??zcl_color_server_handle_command_96>
 80058ca:	2080      	movs	r0, #128	@ 0x80
 80058cc:	e0d4      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058ce <??zcl_color_server_handle_command_96>:
 80058ce:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d101      	bne.n	80058da <??zcl_color_server_handle_command_97>
 80058d6:	2081      	movs	r0, #129	@ 0x81
 80058d8:	e0ce      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080058da <??zcl_color_server_handle_command_97>:
 80058da:	f05f 090a 	movs.w	r9, #10
 80058de:	f05f 0a00 	movs.w	sl, #0
 80058e2:	f10d 0b88 	add.w	fp, sp, #136	@ 0x88
 80058e6:	4652      	mov	r2, sl
 80058e8:	4649      	mov	r1, r9
 80058ea:	4658      	mov	r0, fp
 80058ec:	f002 fa14 	bl	8007d18 <__aeabi_memset>
 80058f0:	4640      	mov	r0, r8
 80058f2:	b280      	uxth	r0, r0
 80058f4:	2809      	cmp	r0, #9
 80058f6:	db07      	blt.n	8005908 <??zcl_color_server_handle_command_98>
 80058f8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80058fa:	79c0      	ldrb	r0, [r0, #7]
 80058fc:	f88d 0090 	strb.w	r0, [sp, #144]	@ 0x90
 8005900:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005902:	7a00      	ldrb	r0, [r0, #8]
 8005904:	f88d 0091 	strb.w	r0, [sp, #145]	@ 0x91

08005908 <??zcl_color_server_handle_command_98>:
 8005908:	f89d 2091 	ldrb.w	r2, [sp, #145]	@ 0x91
 800590c:	f89d 1090 	ldrb.w	r1, [sp, #144]	@ 0x90
 8005910:	0020      	movs	r0, r4
 8005912:	f7ff f8dd 	bl	8004ad0 <zcl_color_options_cmd_allow>
 8005916:	2800      	cmp	r0, #0
 8005918:	d101      	bne.n	800591e <??zcl_color_server_handle_command_99>
 800591a:	2070      	movs	r0, #112	@ 0x70
 800591c:	e0ac      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800591e <??zcl_color_server_handle_command_99>:
 800591e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005920:	7800      	ldrb	r0, [r0, #0]
 8005922:	f88d 0088 	strb.w	r0, [sp, #136]	@ 0x88
 8005926:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005928:	1c40      	adds	r0, r0, #1
 800592a:	f001 fbca 	bl	80070c2 <pletoh16>
 800592e:	f8ad 008a 	strh.w	r0, [sp, #138]	@ 0x8a
 8005932:	f89d 0088 	ldrb.w	r0, [sp, #136]	@ 0x88
 8005936:	2801      	cmp	r0, #1
 8005938:	d003      	beq.n	8005942 <??zcl_color_server_handle_command_100>
 800593a:	f89d 0088 	ldrb.w	r0, [sp, #136]	@ 0x88
 800593e:	2803      	cmp	r0, #3
 8005940:	d105      	bne.n	800594e <??zcl_color_server_handle_command_101>

08005942 <??zcl_color_server_handle_command_100>:
 8005942:	f8bd 008a 	ldrh.w	r0, [sp, #138]	@ 0x8a
 8005946:	2800      	cmp	r0, #0
 8005948:	d101      	bne.n	800594e <??zcl_color_server_handle_command_101>
 800594a:	2085      	movs	r0, #133	@ 0x85
 800594c:	e094      	b.n	8005a78 <??zcl_color_server_handle_command_1>

0800594e <??zcl_color_server_handle_command_101>:
 800594e:	2002      	movs	r0, #2
 8005950:	9001      	str	r0, [sp, #4]
 8005952:	2001      	movs	r0, #1
 8005954:	9000      	str	r0, [sp, #0]
 8005956:	f10d 0309 	add.w	r3, sp, #9
 800595a:	2208      	movs	r2, #8
 800595c:	2100      	movs	r1, #0
 800595e:	0020      	movs	r0, r4
 8005960:	f7fa fe93 	bl	800068a <ZbZclAttrWrite>
 8005964:	2002      	movs	r0, #2
 8005966:	9001      	str	r0, [sp, #4]
 8005968:	2001      	movs	r0, #1
 800596a:	9000      	str	r0, [sp, #0]
 800596c:	f10d 0309 	add.w	r3, sp, #9
 8005970:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005974:	2100      	movs	r1, #0
 8005976:	0020      	movs	r0, r4
 8005978:	f7fa fe87 	bl	800068a <ZbZclAttrWrite>
 800597c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800597e:	1cc0      	adds	r0, r0, #3
 8005980:	f001 fb9f 	bl	80070c2 <pletoh16>
 8005984:	f8ad 008c 	strh.w	r0, [sp, #140]	@ 0x8c
 8005988:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800598a:	1d40      	adds	r0, r0, #5
 800598c:	f001 fb99 	bl	80070c2 <pletoh16>
 8005990:	f8ad 008e 	strh.w	r0, [sp, #142]	@ 0x8e
 8005994:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005996:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005998:	a922      	add	r1, sp, #136	@ 0x88
 800599a:	0020      	movs	r0, r4
 800599c:	f8d7 c0b4 	ldr.w	ip, [r7, #180]	@ 0xb4
 80059a0:	47e0      	blx	ip
 80059a2:	e069      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080059a4 <??zcl_color_server_handle_command_20>:
 80059a4:	2002      	movs	r0, #2
 80059a6:	f88d 0008 	strb.w	r0, [sp, #8]
 80059aa:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80059ac:	2809      	cmp	r0, #9
 80059ae:	da01      	bge.n	80059b4 <??zcl_color_server_handle_command_102>
 80059b0:	2080      	movs	r0, #128	@ 0x80
 80059b2:	e061      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080059b4 <??zcl_color_server_handle_command_102>:
 80059b4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d101      	bne.n	80059c0 <??zcl_color_server_handle_command_103>
 80059bc:	2081      	movs	r0, #129	@ 0x81
 80059be:	e05b      	b.n	8005a78 <??zcl_color_server_handle_command_1>

080059c0 <??zcl_color_server_handle_command_103>:
 80059c0:	f05f 090c 	movs.w	r9, #12
 80059c4:	f05f 0a00 	movs.w	sl, #0
 80059c8:	f10d 0b9c 	add.w	fp, sp, #156	@ 0x9c
 80059cc:	4652      	mov	r2, sl
 80059ce:	4649      	mov	r1, r9
 80059d0:	4658      	mov	r0, fp
 80059d2:	f002 f9a1 	bl	8007d18 <__aeabi_memset>
 80059d6:	4640      	mov	r0, r8
 80059d8:	b280      	uxth	r0, r0
 80059da:	280b      	cmp	r0, #11
 80059dc:	db07      	blt.n	80059ee <??zcl_color_server_handle_command_104>
 80059de:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80059e0:	7a40      	ldrb	r0, [r0, #9]
 80059e2:	f88d 00a6 	strb.w	r0, [sp, #166]	@ 0xa6
 80059e6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80059e8:	7a80      	ldrb	r0, [r0, #10]
 80059ea:	f88d 00a7 	strb.w	r0, [sp, #167]	@ 0xa7

080059ee <??zcl_color_server_handle_command_104>:
 80059ee:	f89d 20a7 	ldrb.w	r2, [sp, #167]	@ 0xa7
 80059f2:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80059f6:	0020      	movs	r0, r4
 80059f8:	f7ff f86a 	bl	8004ad0 <zcl_color_options_cmd_allow>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d101      	bne.n	8005a04 <??zcl_color_server_handle_command_105>
 8005a00:	2070      	movs	r0, #112	@ 0x70
 8005a02:	e039      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005a04 <??zcl_color_server_handle_command_105>:
 8005a04:	2002      	movs	r0, #2
 8005a06:	9001      	str	r0, [sp, #4]
 8005a08:	2001      	movs	r0, #1
 8005a0a:	9000      	str	r0, [sp, #0]
 8005a0c:	ab02      	add	r3, sp, #8
 8005a0e:	2208      	movs	r2, #8
 8005a10:	2100      	movs	r1, #0
 8005a12:	0020      	movs	r0, r4
 8005a14:	f7fa fe39 	bl	800068a <ZbZclAttrWrite>
 8005a18:	2002      	movs	r0, #2
 8005a1a:	9001      	str	r0, [sp, #4]
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	9000      	str	r0, [sp, #0]
 8005a20:	ab02      	add	r3, sp, #8
 8005a22:	f244 0201 	movw	r2, #16385	@ 0x4001
 8005a26:	2100      	movs	r1, #0
 8005a28:	0020      	movs	r0, r4
 8005a2a:	f7fa fe2e 	bl	800068a <ZbZclAttrWrite>
 8005a2e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a30:	7800      	ldrb	r0, [r0, #0]
 8005a32:	f88d 009c 	strb.w	r0, [sp, #156]	@ 0x9c
 8005a36:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a38:	1c40      	adds	r0, r0, #1
 8005a3a:	f001 fb42 	bl	80070c2 <pletoh16>
 8005a3e:	f8ad 009e 	strh.w	r0, [sp, #158]	@ 0x9e
 8005a42:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a44:	1cc0      	adds	r0, r0, #3
 8005a46:	f001 fb3c 	bl	80070c2 <pletoh16>
 8005a4a:	f8ad 00a0 	strh.w	r0, [sp, #160]	@ 0xa0
 8005a4e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a50:	1d40      	adds	r0, r0, #5
 8005a52:	f001 fb36 	bl	80070c2 <pletoh16>
 8005a56:	f8ad 00a2 	strh.w	r0, [sp, #162]	@ 0xa2
 8005a5a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005a5c:	1dc0      	adds	r0, r0, #7
 8005a5e:	f001 fb30 	bl	80070c2 <pletoh16>
 8005a62:	f8ad 00a4 	strh.w	r0, [sp, #164]	@ 0xa4
 8005a66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a68:	aa2e      	add	r2, sp, #184	@ 0xb8
 8005a6a:	a927      	add	r1, sp, #156	@ 0x9c
 8005a6c:	0020      	movs	r0, r4
 8005a6e:	f8d7 c0b8 	ldr.w	ip, [r7, #184]	@ 0xb8
 8005a72:	47e0      	blx	ip
 8005a74:	e000      	b.n	8005a78 <??zcl_color_server_handle_command_1>

08005a76 <??zcl_color_server_handle_command_21>:
 8005a76:	2081      	movs	r0, #129	@ 0x81

08005a78 <??zcl_color_server_handle_command_1>:
 8005a78:	b035      	add	sp, #212	@ 0xd4
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a7e <zcl_attr_write_cb>:
 8005a7e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	0005      	movs	r5, r0
 8005a86:	0016      	movs	r6, r2
 8005a88:	001f      	movs	r7, r3
 8005a8a:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8005a8e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005a90:	f05f 0900 	movs.w	r9, #0
 8005a94:	0030      	movs	r0, r6
 8005a96:	b280      	uxth	r0, r0
 8005a98:	f244 010d 	movw	r1, #16397	@ 0x400d
 8005a9c:	4288      	cmp	r0, r1
 8005a9e:	d129      	bne.n	8005af4 <??zcl_attr_write_cb_0>
 8005aa0:	0038      	movs	r0, r7
 8005aa2:	f001 fb0e 	bl	80070c2 <pletoh16>
 8005aa6:	f8ad 0000 	strh.w	r0, [sp]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2200      	movs	r2, #0
 8005aae:	f244 010b 	movw	r1, #16395	@ 0x400b
 8005ab2:	0028      	movs	r0, r5
 8005ab4:	f7fb ff88 	bl	80019c8 <ZbZclAttrIntegerRead>
 8005ab8:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005abc:	2300      	movs	r3, #0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2107      	movs	r1, #7
 8005ac2:	0028      	movs	r0, r5
 8005ac4:	f7fb ff80 	bl	80019c8 <ZbZclAttrIntegerRead>
 8005ac8:	f8ad 0002 	strh.w	r0, [sp, #2]
 8005acc:	f8bd 0000 	ldrh.w	r0, [sp]
 8005ad0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005ad4:	4288      	cmp	r0, r1
 8005ad6:	d305      	bcc.n	8005ae4 <??zcl_attr_write_cb_1>
 8005ad8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8005adc:	f8bd 1000 	ldrh.w	r1, [sp]
 8005ae0:	4288      	cmp	r0, r1
 8005ae2:	d202      	bcs.n	8005aea <??zcl_attr_write_cb_2>

08005ae4 <??zcl_attr_write_cb_1>:
 8005ae4:	f05f 0a87 	movs.w	sl, #135	@ 0x87
 8005ae8:	e006      	b.n	8005af8 <??zcl_attr_write_cb_3>

08005aea <??zcl_attr_write_cb_2>:
 8005aea:	2002      	movs	r0, #2
 8005aec:	4681      	mov	r9, r0
 8005aee:	f05f 0a00 	movs.w	sl, #0
 8005af2:	e001      	b.n	8005af8 <??zcl_attr_write_cb_3>

08005af4 <??zcl_attr_write_cb_0>:
 8005af4:	f05f 0a86 	movs.w	sl, #134	@ 0x86

08005af8 <??zcl_attr_write_cb_3>:
 8005af8:	0020      	movs	r0, r4
 8005afa:	b280      	uxth	r0, r0
 8005afc:	07c0      	lsls	r0, r0, #31
 8005afe:	d40c      	bmi.n	8005b1a <??zcl_attr_write_cb_4>
 8005b00:	4650      	mov	r0, sl
 8005b02:	b2c0      	uxtb	r0, r0
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d108      	bne.n	8005b1a <??zcl_attr_write_cb_4>
 8005b08:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b0c:	9702      	str	r7, [sp, #8]
 8005b0e:	46c3      	mov	fp, r8
 8005b10:	9a03      	ldr	r2, [sp, #12]
 8005b12:	9902      	ldr	r1, [sp, #8]
 8005b14:	4658      	mov	r0, fp
 8005b16:	f011 fb96 	bl	8017246 <__aeabi_memcpy>

08005b1a <??zcl_attr_write_cb_4>:
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	b2c0      	uxtb	r0, r0
 8005b1e:	b005      	add	sp, #20
 8005b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b24 <zcl_persist_handle_set>:
 8005b24:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	0004      	movs	r4, r0
 8005b2a:	000d      	movs	r5, r1
 8005b2c:	0016      	movs	r6, r2
 8005b2e:	f05f 0b00 	movs.w	fp, #0

08005b32 <??zcl_persist_handle_set_0>:
 8005b32:	4658      	mov	r0, fp
 8005b34:	0031      	movs	r1, r6
 8005b36:	b280      	uxth	r0, r0
 8005b38:	b289      	uxth	r1, r1
 8005b3a:	4288      	cmp	r0, r1
 8005b3c:	d23c      	bcs.n	8005bb8 <??zcl_persist_handle_set_1>
 8005b3e:	0030      	movs	r0, r6
 8005b40:	b280      	uxth	r0, r0
 8005b42:	4659      	mov	r1, fp
 8005b44:	b289      	uxth	r1, r1
 8005b46:	1d09      	adds	r1, r1, #4
 8005b48:	4288      	cmp	r0, r1
 8005b4a:	d201      	bcs.n	8005b50 <??zcl_persist_handle_set_2>
 8005b4c:	2087      	movs	r0, #135	@ 0x87
 8005b4e:	e034      	b.n	8005bba <??zcl_persist_handle_set_3>

08005b50 <??zcl_persist_handle_set_2>:
 8005b50:	4658      	mov	r0, fp
 8005b52:	b280      	uxth	r0, r0
 8005b54:	4428      	add	r0, r5
 8005b56:	f001 fab4 	bl	80070c2 <pletoh16>
 8005b5a:	0007      	movs	r7, r0
 8005b5c:	f11b 0b02 	adds.w	fp, fp, #2
 8005b60:	4658      	mov	r0, fp
 8005b62:	b280      	uxth	r0, r0
 8005b64:	4428      	add	r0, r5
 8005b66:	f001 faac 	bl	80070c2 <pletoh16>
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	f11b 0b02 	adds.w	fp, fp, #2
 8005b70:	0030      	movs	r0, r6
 8005b72:	b280      	uxth	r0, r0
 8005b74:	4641      	mov	r1, r8
 8005b76:	b289      	uxth	r1, r1
 8005b78:	fa11 f18b 	uxtah	r1, r1, fp
 8005b7c:	4288      	cmp	r0, r1
 8005b7e:	da01      	bge.n	8005b84 <??zcl_persist_handle_set_4>
 8005b80:	2087      	movs	r0, #135	@ 0x87
 8005b82:	e01a      	b.n	8005bba <??zcl_persist_handle_set_3>

08005b84 <??zcl_persist_handle_set_4>:
 8005b84:	4658      	mov	r0, fp
 8005b86:	b280      	uxth	r0, r0
 8005b88:	4428      	add	r0, r5
 8005b8a:	4681      	mov	r9, r0
 8005b8c:	eb18 0b0b 	adds.w	fp, r8, fp
 8005b90:	2006      	movs	r0, #6
 8005b92:	9001      	str	r0, [sp, #4]
 8005b94:	4640      	mov	r0, r8
 8005b96:	b280      	uxth	r0, r0
 8005b98:	9000      	str	r0, [sp, #0]
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	003a      	movs	r2, r7
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	0020      	movs	r0, r4
 8005ba4:	f7fa fd71 	bl	800068a <ZbZclAttrWrite>
 8005ba8:	4682      	mov	sl, r0
 8005baa:	4650      	mov	r0, sl
 8005bac:	b2c0      	uxtb	r0, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d0bf      	beq.n	8005b32 <??zcl_persist_handle_set_0>
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	b2c0      	uxtb	r0, r0
 8005bb6:	e000      	b.n	8005bba <??zcl_persist_handle_set_3>

08005bb8 <??zcl_persist_handle_set_1>:
 8005bb8:	2000      	movs	r0, #0

08005bba <??zcl_persist_handle_set_3>:
 8005bba:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005bbe <ZbZclHandleReadAttr>:
 8005bbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc2:	b092      	sub	sp, #72	@ 0x48
 8005bc4:	0005      	movs	r5, r0
 8005bc6:	000e      	movs	r6, r1
 8005bc8:	0017      	movs	r7, r2
 8005bca:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8005bce:	2300      	movs	r3, #0
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	8b69      	ldrh	r1, [r5, #26]
 8005bd4:	68a8      	ldr	r0, [r5, #8]
 8005bd6:	f00d fd2b 	bl	8013630 <zb_heap_alloc>
 8005bda:	0004      	movs	r4, r0
 8005bdc:	2c00      	cmp	r4, #0
 8005bde:	d106      	bne.n	8005bee <??ZbZclHandleReadAttr_0>
 8005be0:	2389      	movs	r3, #137	@ 0x89
 8005be2:	0032      	movs	r2, r6
 8005be4:	0039      	movs	r1, r7
 8005be6:	0028      	movs	r0, r5
 8005be8:	f00d fb9a 	bl	8013320 <ZbZclSendDefaultResponse>
 8005bec:	e0bd      	b.n	8005d6a <??ZbZclHandleReadAttr_1>

08005bee <??ZbZclHandleReadAttr_0>:
 8005bee:	f05f 0808 	movs.w	r8, #8
 8005bf2:	f05f 0a00 	movs.w	sl, #0
 8005bf6:	f10d 0b0c 	add.w	fp, sp, #12
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	4658      	mov	r0, fp
 8005c00:	f002 f88a 	bl	8007d18 <__aeabi_memset>
 8005c04:	2000      	movs	r0, #0
 8005c06:	f88d 000c 	strb.w	r0, [sp, #12]
 8005c0a:	7870      	ldrb	r0, [r6, #1]
 8005c0c:	f88d 000d 	strb.w	r0, [sp, #13]
 8005c10:	78b0      	ldrb	r0, [r6, #2]
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d101      	bne.n	8005c1a <??ZbZclHandleReadAttr_2>
 8005c16:	2001      	movs	r0, #1
 8005c18:	e000      	b.n	8005c1c <??ZbZclHandleReadAttr_3>

08005c1a <??ZbZclHandleReadAttr_2>:
 8005c1a:	2000      	movs	r0, #0

08005c1c <??ZbZclHandleReadAttr_3>:
 8005c1c:	f88d 000e 	strb.w	r0, [sp, #14]
 8005c20:	2001      	movs	r0, #1
 8005c22:	f88d 000f 	strb.w	r0, [sp, #15]
 8005c26:	88b0      	ldrh	r0, [r6, #4]
 8005c28:	f8ad 0010 	strh.w	r0, [sp, #16]
 8005c2c:	79b0      	ldrb	r0, [r6, #6]
 8005c2e:	f88d 0012 	strb.w	r0, [sp, #18]
 8005c32:	2001      	movs	r0, #1
 8005c34:	f88d 0013 	strb.w	r0, [sp, #19]
 8005c38:	8b6a      	ldrh	r2, [r5, #26]
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	a803      	add	r0, sp, #12
 8005c3e:	f000 fca5 	bl	800658c <ZbZclAppendHeader>
 8005c42:	4680      	mov	r8, r0
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	d50c      	bpl.n	8005c64 <??ZbZclHandleReadAttr_4>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	464a      	mov	r2, r9
 8005c4e:	0021      	movs	r1, r4
 8005c50:	68a8      	ldr	r0, [r5, #8]
 8005c52:	f00d fcfc 	bl	801364e <zb_heap_free>
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	0032      	movs	r2, r6
 8005c5a:	0039      	movs	r1, r7
 8005c5c:	0028      	movs	r0, r5
 8005c5e:	f00d fb5f 	bl	8013320 <ZbZclSendDefaultResponse>
 8005c62:	e082      	b.n	8005d6a <??ZbZclHandleReadAttr_1>

08005c64 <??ZbZclHandleReadAttr_4>:
 8005c64:	46c3      	mov	fp, r8

08005c66 <??ZbZclHandleReadAttr_5>:
 8005c66:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8005c68:	2802      	cmp	r0, #2
 8005c6a:	d353      	bcc.n	8005d14 <??ZbZclHandleReadAttr_6>

08005c6c <??ZbZclHandleReadAttr_7>:
 8005c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c6e:	f001 fa28 	bl	80070c2 <pletoh16>
 8005c72:	f8ad 000a 	strh.w	r0, [sp, #10]
 8005c76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c78:	1c80      	adds	r0, r0, #2
 8005c7a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c7c:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8005c7e:	1e80      	subs	r0, r0, #2
 8005c80:	8538      	strh	r0, [r7, #40]	@ 0x28
 8005c82:	f11b 0004 	adds.w	r0, fp, #4
 8005c86:	8b69      	ldrh	r1, [r5, #26]
 8005c88:	4288      	cmp	r0, r1
 8005c8a:	d243      	bcs.n	8005d14 <??ZbZclHandleReadAttr_6>

08005c8c <??ZbZclHandleReadAttr_8>:
 8005c8c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005c90:	eb04 000b 	add.w	r0, r4, fp
 8005c94:	f001 fa61 	bl	800715a <putle16>
 8005c98:	f11b 0b02 	adds.w	fp, fp, #2
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	9001      	str	r0, [sp, #4]
 8005ca0:	8b68      	ldrh	r0, [r5, #26]
 8005ca2:	ebb0 000b 	subs.w	r0, r0, fp
 8005ca6:	1e80      	subs	r0, r0, #2
 8005ca8:	9000      	str	r0, [sp, #0]
 8005caa:	eb04 000b 	add.w	r0, r4, fp
 8005cae:	1c83      	adds	r3, r0, #2
 8005cb0:	aa02      	add	r2, sp, #8
 8005cb2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005cb6:	0028      	movs	r0, r5
 8005cb8:	f7fa fb95 	bl	80003e6 <ZbZclAttrRead>
 8005cbc:	4682      	mov	sl, r0
 8005cbe:	f804 a00b 	strb.w	sl, [r4, fp]
 8005cc2:	f11b 0b01 	adds.w	fp, fp, #1
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	b2c0      	uxtb	r0, r0
 8005cca:	2889      	cmp	r0, #137	@ 0x89
 8005ccc:	d022      	beq.n	8005d14 <??ZbZclHandleReadAttr_6>

08005cce <??ZbZclHandleReadAttr_9>:
 8005cce:	4650      	mov	r0, sl
 8005cd0:	b2c0      	uxtb	r0, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1c7      	bne.n	8005c66 <??ZbZclHandleReadAttr_5>

08005cd6 <??ZbZclHandleReadAttr_10>:
 8005cd6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005cda:	f804 000b 	strb.w	r0, [r4, fp]
 8005cde:	f11b 0b01 	adds.w	fp, fp, #1
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	8b6a      	ldrh	r2, [r5, #26]
 8005ce6:	ebb2 020b 	subs.w	r2, r2, fp
 8005cea:	eb04 010b 	add.w	r1, r4, fp
 8005cee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005cf2:	f7fb f9a0 	bl	8001036 <ZbZclAttrParseLength>
 8005cf6:	4680      	mov	r8, r0
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	d507      	bpl.n	8005d0e <??ZbZclHandleReadAttr_11>
 8005cfe:	f1bb 0b01 	subs.w	fp, fp, #1
 8005d02:	2087      	movs	r0, #135	@ 0x87
 8005d04:	eb04 010b 	add.w	r1, r4, fp
 8005d08:	f801 0c01 	strb.w	r0, [r1, #-1]
 8005d0c:	e7ab      	b.n	8005c66 <??ZbZclHandleReadAttr_5>

08005d0e <??ZbZclHandleReadAttr_11>:
 8005d0e:	eb18 0b0b 	adds.w	fp, r8, fp
 8005d12:	e7a8      	b.n	8005c66 <??ZbZclHandleReadAttr_5>

08005d14 <??ZbZclHandleReadAttr_6>:
 8005d14:	003a      	movs	r2, r7
 8005d16:	a906      	add	r1, sp, #24
 8005d18:	0028      	movs	r0, r5
 8005d1a:	f7fe f80e 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8005d1e:	a806      	add	r0, sp, #24
 8005d20:	f117 0110 	adds.w	r1, r7, #16
 8005d24:	2210      	movs	r2, #16
 8005d26:	f011 fa8e 	bl	8017246 <__aeabi_memcpy>
 8005d2a:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8005d2e:	f7fd ff9c 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8005d32:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8005d36:	7da8      	ldrb	r0, [r5, #22]
 8005d38:	0700      	lsls	r0, r0, #28
 8005d3a:	d406      	bmi.n	8005d4a <??ZbZclHandleReadAttr_12>
 8005d3c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8005d40:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 8005d44:	4001      	ands	r1, r0
 8005d46:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

08005d4a <??ZbZclHandleReadAttr_12>:
 8005d4a:	940c      	str	r4, [sp, #48]	@ 0x30
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8005d52:	2300      	movs	r3, #0
 8005d54:	2200      	movs	r2, #0
 8005d56:	a906      	add	r1, sp, #24
 8005d58:	68a8      	ldr	r0, [r5, #8]
 8005d5a:	f00c fe41 	bl	80129e0 <ZbApsdeDataReqCallback>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	464a      	mov	r2, r9
 8005d62:	0021      	movs	r1, r4
 8005d64:	68a8      	ldr	r0, [r5, #8]
 8005d66:	f00d fc72 	bl	801364e <zb_heap_free>

08005d6a <??ZbZclHandleReadAttr_1>:
 8005d6a:	b013      	add	sp, #76	@ 0x4c
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d70 <??DataTable1>:
 8005d70:	0000 0000                                   ....

08005d74 <ZbZclHandleWriteAttr>:
 8005d74:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d78:	b0a3      	sub	sp, #140	@ 0x8c
 8005d7a:	0016      	movs	r6, r2
 8005d7c:	2701      	movs	r7, #1
 8005d7e:	2500      	movs	r5, #0
 8005d80:	2400      	movs	r4, #0
 8005d82:	f05f 0800 	movs.w	r8, #0
 8005d86:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005d88:	79c0      	ldrb	r0, [r0, #7]
 8005d8a:	f88d 000a 	strb.w	r0, [sp, #10]
 8005d8e:	f05f 0900 	movs.w	r9, #0
 8005d92:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005d96:	2802      	cmp	r0, #2
 8005d98:	d007      	beq.n	8005daa <??ZbZclHandleWriteAttr_0>
 8005d9a:	2803      	cmp	r0, #3
 8005d9c:	d003      	beq.n	8005da6 <??ZbZclHandleWriteAttr_1>
 8005d9e:	2805      	cmp	r0, #5
 8005da0:	f000 80c3 	beq.w	8005f2a <??ZbZclHandleWriteAttr_2>
 8005da4:	e116      	b.n	8005fd4 <??ZbZclHandleWriteAttr_3>

08005da6 <??ZbZclHandleWriteAttr_1>:
 8005da6:	f059 0901 	orrs.w	r9, r9, #1

08005daa <??ZbZclHandleWriteAttr_0>:
 8005daa:	2008      	movs	r0, #8
 8005dac:	9001      	str	r0, [sp, #4]
 8005dae:	2000      	movs	r0, #0
 8005db0:	9000      	str	r0, [sp, #0]
 8005db2:	f10d 0b14 	add.w	fp, sp, #20
 8005db6:	9a00      	ldr	r2, [sp, #0]
 8005db8:	9901      	ldr	r1, [sp, #4]
 8005dba:	4658      	mov	r0, fp
 8005dbc:	f001 ffac 	bl	8007d18 <__aeabi_memset>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f88d 0014 	strb.w	r0, [sp, #20]
 8005dc6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005dc8:	7840      	ldrb	r0, [r0, #1]
 8005dca:	f88d 0015 	strb.w	r0, [sp, #21]
 8005dce:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005dd0:	7880      	ldrb	r0, [r0, #2]
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d101      	bne.n	8005dda <??ZbZclHandleWriteAttr_4>
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e000      	b.n	8005ddc <??ZbZclHandleWriteAttr_5>

08005dda <??ZbZclHandleWriteAttr_4>:
 8005dda:	2000      	movs	r0, #0

08005ddc <??ZbZclHandleWriteAttr_5>:
 8005ddc:	f88d 0016 	strb.w	r0, [sp, #22]
 8005de0:	2001      	movs	r0, #1
 8005de2:	f88d 0017 	strb.w	r0, [sp, #23]
 8005de6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005de8:	8880      	ldrh	r0, [r0, #4]
 8005dea:	f8ad 0018 	strh.w	r0, [sp, #24]
 8005dee:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005df0:	7980      	ldrb	r0, [r0, #6]
 8005df2:	f88d 001a 	strb.w	r0, [sp, #26]
 8005df6:	2004      	movs	r0, #4
 8005df8:	f88d 001b 	strb.w	r0, [sp, #27]
 8005dfc:	2239      	movs	r2, #57	@ 0x39
 8005dfe:	a907      	add	r1, sp, #28
 8005e00:	a805      	add	r0, sp, #20
 8005e02:	f000 fbc3 	bl	800658c <ZbZclAppendHeader>
 8005e06:	0005      	movs	r5, r0
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	d502      	bpl.n	8005e12 <??ZbZclHandleWriteAttr_6>
 8005e0c:	2080      	movs	r0, #128	@ 0x80
 8005e0e:	4680      	mov	r8, r0
 8005e10:	e0e2      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005e12 <??ZbZclHandleWriteAttr_6>:
 8005e12:	0032      	movs	r2, r6
 8005e14:	a916      	add	r1, sp, #88	@ 0x58
 8005e16:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005e18:	f7fd ff8f 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8005e1c:	a816      	add	r0, sp, #88	@ 0x58
 8005e1e:	f116 0110 	adds.w	r1, r6, #16
 8005e22:	2210      	movs	r2, #16
 8005e24:	f011 fa0f 	bl	8017246 <__aeabi_memcpy>
 8005e28:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8005e2c:	f7fd ff1d 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8005e30:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 8005e34:	2000      	movs	r0, #0
 8005e36:	4682      	mov	sl, r0
 8005e38:	2080      	movs	r0, #128	@ 0x80
 8005e3a:	0007      	movs	r7, r0
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f88d 0008 	strb.w	r0, [sp, #8]
 8005e42:	2000      	movs	r0, #0
 8005e44:	0004      	movs	r4, r0

08005e46 <??ZbZclHandleWriteAttr_8>:
 8005e46:	f11a 0003 	adds.w	r0, sl, #3
 8005e4a:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005e4c:	4288      	cmp	r0, r1
 8005e4e:	d302      	bcc.n	8005e56 <??ZbZclHandleWriteAttr_9>
 8005e50:	2080      	movs	r0, #128	@ 0x80
 8005e52:	0007      	movs	r7, r0
 8005e54:	e05c      	b.n	8005f10 <??ZbZclHandleWriteAttr_10>

08005e56 <??ZbZclHandleWriteAttr_9>:
 8005e56:	1ce8      	adds	r0, r5, #3
 8005e58:	283a      	cmp	r0, #58	@ 0x3a
 8005e5a:	d305      	bcc.n	8005e68 <??ZbZclHandleWriteAttr_11>
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	f88d 0008 	strb.w	r0, [sp, #8]
 8005e62:	2089      	movs	r0, #137	@ 0x89
 8005e64:	0007      	movs	r7, r0
 8005e66:	e053      	b.n	8005f10 <??ZbZclHandleWriteAttr_10>

08005e68 <??ZbZclHandleWriteAttr_11>:
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f88d 0008 	strb.w	r0, [sp, #8]
 8005e6e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005e70:	4450      	add	r0, sl
 8005e72:	f001 f926 	bl	80070c2 <pletoh16>
 8005e76:	f8ad 000c 	strh.w	r0, [sp, #12]
 8005e7a:	f11a 0a02 	adds.w	sl, sl, #2
 8005e7e:	4650      	mov	r0, sl
 8005e80:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 8005e82:	5c09      	ldrb	r1, [r1, r0]
 8005e84:	f88d 1009 	strb.w	r1, [sp, #9]
 8005e88:	4682      	mov	sl, r0
 8005e8a:	f11a 0a01 	adds.w	sl, sl, #1
 8005e8e:	2300      	movs	r3, #0
 8005e90:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8005e92:	ebb2 020a 	subs.w	r2, r2, sl
 8005e96:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005e98:	eb00 010a 	add.w	r1, r0, sl
 8005e9c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005ea0:	f7fb f8c9 	bl	8001036 <ZbZclAttrParseLength>
 8005ea4:	9004      	str	r0, [sp, #16]
 8005ea6:	9804      	ldr	r0, [sp, #16]
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d50c      	bpl.n	8005ec6 <??ZbZclHandleWriteAttr_12>
 8005eac:	1c64      	adds	r4, r4, #1
 8005eae:	2087      	movs	r0, #135	@ 0x87
 8005eb0:	a907      	add	r1, sp, #28
 8005eb2:	5548      	strb	r0, [r1, r5]
 8005eb4:	1c6d      	adds	r5, r5, #1
 8005eb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005eba:	a807      	add	r0, sp, #28
 8005ebc:	4428      	add	r0, r5
 8005ebe:	f001 f94c 	bl	800715a <putle16>
 8005ec2:	1cad      	adds	r5, r5, #2
 8005ec4:	e024      	b.n	8005f10 <??ZbZclHandleWriteAttr_10>

08005ec6 <??ZbZclHandleWriteAttr_12>:
 8005ec6:	4648      	mov	r0, r9
 8005ec8:	b280      	uxth	r0, r0
 8005eca:	9001      	str	r0, [sp, #4]
 8005ecc:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005ece:	ebb0 000a 	subs.w	r0, r0, sl
 8005ed2:	9000      	str	r0, [sp, #0]
 8005ed4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005ed6:	eb00 030a 	add.w	r3, r0, sl
 8005eda:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005ede:	f116 0110 	adds.w	r1, r6, #16
 8005ee2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005ee4:	f7fa fbd1 	bl	800068a <ZbZclAttrWrite>
 8005ee8:	0007      	movs	r7, r0
 8005eea:	9804      	ldr	r0, [sp, #16]
 8005eec:	eb10 0a0a 	adds.w	sl, r0, sl
 8005ef0:	0038      	movs	r0, r7
 8005ef2:	b2c0      	uxtb	r0, r0
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0a6      	beq.n	8005e46 <??ZbZclHandleWriteAttr_8>
 8005ef8:	1c64      	adds	r4, r4, #1
 8005efa:	a807      	add	r0, sp, #28
 8005efc:	5547      	strb	r7, [r0, r5]
 8005efe:	1c6d      	adds	r5, r5, #1
 8005f00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005f04:	a807      	add	r0, sp, #28
 8005f06:	4428      	add	r0, r5
 8005f08:	f001 f927 	bl	800715a <putle16>
 8005f0c:	1cad      	adds	r5, r5, #2
 8005f0e:	e79a      	b.n	8005e46 <??ZbZclHandleWriteAttr_8>

08005f10 <??ZbZclHandleWriteAttr_10>:
 8005f10:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d001      	beq.n	8005f1c <??ZbZclHandleWriteAttr_13>
 8005f18:	46b8      	mov	r8, r7
 8005f1a:	e05d      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005f1c <??ZbZclHandleWriteAttr_13>:
 8005f1c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005f20:	2802      	cmp	r0, #2
 8005f22:	d001      	beq.n	8005f28 <??ZbZclHandleWriteAttr_14>
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	d000      	beq.n	8005f2a <??ZbZclHandleWriteAttr_2>

08005f28 <??ZbZclHandleWriteAttr_14>:
 8005f28:	e056      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005f2a <??ZbZclHandleWriteAttr_2>:
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	f05f 0b00 	movs.w	fp, #0

08005f32 <??ZbZclHandleWriteAttr_15>:
 8005f32:	f11a 0003 	adds.w	r0, sl, #3
 8005f36:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005f38:	4288      	cmp	r0, r1
 8005f3a:	d302      	bcc.n	8005f42 <??ZbZclHandleWriteAttr_16>
 8005f3c:	465c      	mov	r4, fp
 8005f3e:	1c64      	adds	r4, r4, #1
 8005f40:	e03b      	b.n	8005fba <??ZbZclHandleWriteAttr_17>

08005f42 <??ZbZclHandleWriteAttr_16>:
 8005f42:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f44:	4450      	add	r0, sl
 8005f46:	f001 f8bc 	bl	80070c2 <pletoh16>
 8005f4a:	f8ad 000c 	strh.w	r0, [sp, #12]
 8005f4e:	f11a 0a02 	adds.w	sl, sl, #2
 8005f52:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f54:	f810 000a 	ldrb.w	r0, [r0, sl]
 8005f58:	f88d 0009 	strb.w	r0, [sp, #9]
 8005f5c:	f11a 0a01 	adds.w	sl, sl, #1
 8005f60:	2300      	movs	r3, #0
 8005f62:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8005f64:	ebb2 020a 	subs.w	r2, r2, sl
 8005f68:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f6a:	eb00 010a 	add.w	r1, r0, sl
 8005f6e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8005f72:	f7fb f860 	bl	8001036 <ZbZclAttrParseLength>
 8005f76:	9004      	str	r0, [sp, #16]
 8005f78:	9804      	ldr	r0, [sp, #16]
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d502      	bpl.n	8005f84 <??ZbZclHandleWriteAttr_18>
 8005f7e:	465c      	mov	r4, fp
 8005f80:	1c64      	adds	r4, r4, #1
 8005f82:	e01a      	b.n	8005fba <??ZbZclHandleWriteAttr_17>

08005f84 <??ZbZclHandleWriteAttr_18>:
 8005f84:	2000      	movs	r0, #0
 8005f86:	9001      	str	r0, [sp, #4]
 8005f88:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005f8a:	ebb0 000a 	subs.w	r0, r0, sl
 8005f8e:	9000      	str	r0, [sp, #0]
 8005f90:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005f92:	eb00 030a 	add.w	r3, r0, sl
 8005f96:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005f9a:	f116 0110 	adds.w	r1, r6, #16
 8005f9e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005fa0:	f7fa fb73 	bl	800068a <ZbZclAttrWrite>
 8005fa4:	0007      	movs	r7, r0
 8005fa6:	0038      	movs	r0, r7
 8005fa8:	b2c0      	uxtb	r0, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d001      	beq.n	8005fb2 <??ZbZclHandleWriteAttr_19>
 8005fae:	f11b 0b01 	adds.w	fp, fp, #1

08005fb2 <??ZbZclHandleWriteAttr_19>:
 8005fb2:	9804      	ldr	r0, [sp, #16]
 8005fb4:	eb10 0a0a 	adds.w	sl, r0, sl
 8005fb8:	e7bb      	b.n	8005f32 <??ZbZclHandleWriteAttr_15>

08005fba <??ZbZclHandleWriteAttr_17>:
 8005fba:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8005fbe:	2803      	cmp	r0, #3
 8005fc0:	d105      	bne.n	8005fce <??ZbZclHandleWriteAttr_20>
 8005fc2:	2c00      	cmp	r4, #0
 8005fc4:	d002      	beq.n	8005fcc <??ZbZclHandleWriteAttr_21>
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	4680      	mov	r8, r0
 8005fca:	e005      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005fcc <??ZbZclHandleWriteAttr_21>:
 8005fcc:	e004      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005fce <??ZbZclHandleWriteAttr_20>:
 8005fce:	20ff      	movs	r0, #255	@ 0xff
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	e001      	b.n	8005fd8 <??ZbZclHandleWriteAttr_7>

08005fd4 <??ZbZclHandleWriteAttr_3>:
 8005fd4:	2081      	movs	r0, #129	@ 0x81
 8005fd6:	4680      	mov	r8, r0

08005fd8 <??ZbZclHandleWriteAttr_7>:
 8005fd8:	4640      	mov	r0, r8
 8005fda:	b2c0      	uxtb	r0, r0
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d00b      	beq.n	8005ff8 <??ZbZclHandleWriteAttr_22>
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	b2c0      	uxtb	r0, r0
 8005fe4:	28ff      	cmp	r0, #255	@ 0xff
 8005fe6:	d006      	beq.n	8005ff6 <??ZbZclHandleWriteAttr_23>
 8005fe8:	4643      	mov	r3, r8
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005fee:	0031      	movs	r1, r6
 8005ff0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005ff2:	f00d f995 	bl	8013320 <ZbZclSendDefaultResponse>

08005ff6 <??ZbZclHandleWriteAttr_23>:
 8005ff6:	e01a      	b.n	800602e <??ZbZclHandleWriteAttr_24>

08005ff8 <??ZbZclHandleWriteAttr_22>:
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d10c      	bne.n	8006016 <??ZbZclHandleWriteAttr_25>
 8005ffc:	2d00      	cmp	r5, #0
 8005ffe:	d106      	bne.n	800600e <??ZbZclHandleWriteAttr_26>
 8006000:	2301      	movs	r3, #1
 8006002:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006004:	0031      	movs	r1, r6
 8006006:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8006008:	f00d f98a 	bl	8013320 <ZbZclSendDefaultResponse>
 800600c:	e00f      	b.n	800602e <??ZbZclHandleWriteAttr_24>

0800600e <??ZbZclHandleWriteAttr_26>:
 800600e:	2000      	movs	r0, #0
 8006010:	a907      	add	r1, sp, #28
 8006012:	5548      	strb	r0, [r1, r5]
 8006014:	1c6d      	adds	r5, r5, #1

08006016 <??ZbZclHandleWriteAttr_25>:
 8006016:	a807      	add	r0, sp, #28
 8006018:	901c      	str	r0, [sp, #112]	@ 0x70
 800601a:	0028      	movs	r0, r5
 800601c:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 8006020:	2300      	movs	r3, #0
 8006022:	2200      	movs	r2, #0
 8006024:	a916      	add	r1, sp, #88	@ 0x58
 8006026:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8006028:	6880      	ldr	r0, [r0, #8]
 800602a:	f00c fcd9 	bl	80129e0 <ZbApsdeDataReqCallback>

0800602e <??ZbZclHandleWriteAttr_24>:
 800602e:	b025      	add	sp, #148	@ 0x94
 8006030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006034 <zcl_handle_command>:
 8006034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006038:	0004      	movs	r4, r0
 800603a:	000d      	movs	r5, r1
 800603c:	0016      	movs	r6, r2
 800603e:	79f7      	ldrb	r7, [r6, #7]
 8006040:	8868      	ldrh	r0, [r5, #2]
 8006042:	28ff      	cmp	r0, #255	@ 0xff
 8006044:	d102      	bne.n	800604c <??zcl_handle_command_0>
 8006046:	f05f 0800 	movs.w	r8, #0
 800604a:	e001      	b.n	8006050 <??zcl_handle_command_1>

0800604c <??zcl_handle_command_0>:
 800604c:	f05f 0801 	movs.w	r8, #1

08006050 <??zcl_handle_command_1>:
 8006050:	f115 0110 	adds.w	r1, r5, #16
 8006054:	68a0      	ldr	r0, [r4, #8]
 8006056:	f00c fd60 	bl	8012b1a <ZbApsAddrIsLocal>
 800605a:	2800      	cmp	r0, #0
 800605c:	d121      	bne.n	80060a2 <??zcl_handle_command_2>

0800605e <??zcl_handle_command_3>:
 800605e:	89a0      	ldrh	r0, [r4, #12]
 8006060:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006064:	d01d      	beq.n	80060a2 <??zcl_handle_command_2>

08006066 <??zcl_handle_command_4>:
 8006066:	0032      	movs	r2, r6
 8006068:	0029      	movs	r1, r5
 800606a:	0020      	movs	r0, r4
 800606c:	f7fd fd70 	bl	8003b50 <ZbZclClusterCheckMinSecurity>
 8006070:	2800      	cmp	r0, #0
 8006072:	d107      	bne.n	8006084 <??zcl_handle_command_5>
 8006074:	2301      	movs	r3, #1
 8006076:	0032      	movs	r2, r6
 8006078:	0029      	movs	r1, r5
 800607a:	0020      	movs	r0, r4
 800607c:	f00d f950 	bl	8013320 <ZbZclSendDefaultResponse>
 8006080:	4640      	mov	r0, r8
 8006082:	e0f7      	b.n	8006274 <??zcl_handle_command_6>

08006084 <??zcl_handle_command_5>:
 8006084:	0032      	movs	r2, r6
 8006086:	0029      	movs	r1, r5
 8006088:	68a0      	ldr	r0, [r4, #8]
 800608a:	f00d f82f 	bl	80130ec <ZbZclDeviceLogCheckAllow>
 800608e:	2800      	cmp	r0, #0
 8006090:	d107      	bne.n	80060a2 <??zcl_handle_command_2>
 8006092:	2301      	movs	r3, #1
 8006094:	0032      	movs	r2, r6
 8006096:	0029      	movs	r1, r5
 8006098:	0020      	movs	r0, r4
 800609a:	f00d f941 	bl	8013320 <ZbZclSendDefaultResponse>
 800609e:	4640      	mov	r0, r8
 80060a0:	e0e8      	b.n	8006274 <??zcl_handle_command_6>

080060a2 <??zcl_handle_command_2>:
 80060a2:	7830      	ldrb	r0, [r6, #0]
 80060a4:	2801      	cmp	r0, #1
 80060a6:	d13a      	bne.n	800611e <??zcl_handle_command_8>
 80060a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d107      	bne.n	80060be <??zcl_handle_command_9>
 80060ae:	2381      	movs	r3, #129	@ 0x81
 80060b0:	0032      	movs	r2, r6
 80060b2:	0029      	movs	r1, r5
 80060b4:	0020      	movs	r0, r4
 80060b6:	f00d f933 	bl	8013320 <ZbZclSendDefaultResponse>
 80060ba:	4640      	mov	r0, r8
 80060bc:	e0da      	b.n	8006274 <??zcl_handle_command_6>

080060be <??zcl_handle_command_9>:
 80060be:	7870      	ldrb	r0, [r6, #1]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d00e      	beq.n	80060e2 <??zcl_handle_command_10>
 80060c4:	8a20      	ldrh	r0, [r4, #16]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d003      	beq.n	80060d2 <??zcl_handle_command_11>
 80060ca:	8a20      	ldrh	r0, [r4, #16]
 80060cc:	88b1      	ldrh	r1, [r6, #4]
 80060ce:	4288      	cmp	r0, r1
 80060d0:	d012      	beq.n	80060f8 <??zcl_handle_command_12>

080060d2 <??zcl_handle_command_11>:
 80060d2:	2381      	movs	r3, #129	@ 0x81
 80060d4:	0032      	movs	r2, r6
 80060d6:	0029      	movs	r1, r5
 80060d8:	0020      	movs	r0, r4
 80060da:	f00d f921 	bl	8013320 <ZbZclSendDefaultResponse>
 80060de:	4640      	mov	r0, r8
 80060e0:	e0c8      	b.n	8006274 <??zcl_handle_command_6>

080060e2 <??zcl_handle_command_10>:
 80060e2:	8a20      	ldrh	r0, [r4, #16]
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d007      	beq.n	80060f8 <??zcl_handle_command_12>
 80060e8:	2381      	movs	r3, #129	@ 0x81
 80060ea:	0032      	movs	r2, r6
 80060ec:	0029      	movs	r1, r5
 80060ee:	0020      	movs	r0, r4
 80060f0:	f00d f916 	bl	8013320 <ZbZclSendDefaultResponse>
 80060f4:	4640      	mov	r0, r8
 80060f6:	e0bd      	b.n	8006274 <??zcl_handle_command_6>

080060f8 <??zcl_handle_command_12>:
 80060f8:	002a      	movs	r2, r5
 80060fa:	0031      	movs	r1, r6
 80060fc:	0020      	movs	r0, r4
 80060fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006100:	4798      	blx	r3
 8006102:	4681      	mov	r9, r0
 8006104:	4648      	mov	r0, r9
 8006106:	b2c0      	uxtb	r0, r0
 8006108:	28ff      	cmp	r0, #255	@ 0xff
 800610a:	d006      	beq.n	800611a <??zcl_handle_command_13>
 800610c:	464b      	mov	r3, r9
 800610e:	b2db      	uxtb	r3, r3
 8006110:	0032      	movs	r2, r6
 8006112:	0029      	movs	r1, r5
 8006114:	0020      	movs	r0, r4
 8006116:	f00d f903 	bl	8013320 <ZbZclSendDefaultResponse>

0800611a <??zcl_handle_command_13>:
 800611a:	4640      	mov	r0, r8
 800611c:	e0aa      	b.n	8006274 <??zcl_handle_command_6>

0800611e <??zcl_handle_command_8>:
 800611e:	7830      	ldrb	r0, [r6, #0]
 8006120:	2800      	cmp	r0, #0
 8006122:	d007      	beq.n	8006134 <??zcl_handle_command_14>
 8006124:	2385      	movs	r3, #133	@ 0x85
 8006126:	0032      	movs	r2, r6
 8006128:	0029      	movs	r1, r5
 800612a:	0020      	movs	r0, r4
 800612c:	f00d f8f8 	bl	8013320 <ZbZclSendDefaultResponse>
 8006130:	4640      	mov	r0, r8
 8006132:	e09f      	b.n	8006274 <??zcl_handle_command_6>

08006134 <??zcl_handle_command_14>:
 8006134:	0038      	movs	r0, r7
 8006136:	b2c0      	uxtb	r0, r0
 8006138:	2800      	cmp	r0, #0
 800613a:	d01c      	beq.n	8006176 <??zcl_handle_command_15>
 800613c:	2801      	cmp	r0, #1
 800613e:	d03f      	beq.n	80061c0 <??zcl_handle_command_16>
 8006140:	2802      	cmp	r0, #2
 8006142:	d01e      	beq.n	8006182 <??zcl_handle_command_17>
 8006144:	2803      	cmp	r0, #3
 8006146:	d01c      	beq.n	8006182 <??zcl_handle_command_17>
 8006148:	2804      	cmp	r0, #4
 800614a:	d039      	beq.n	80061c0 <??zcl_handle_command_16>
 800614c:	2805      	cmp	r0, #5
 800614e:	d018      	beq.n	8006182 <??zcl_handle_command_17>
 8006150:	2806      	cmp	r0, #6
 8006152:	d01c      	beq.n	800618e <??zcl_handle_command_18>
 8006154:	2807      	cmp	r0, #7
 8006156:	d033      	beq.n	80061c0 <??zcl_handle_command_16>
 8006158:	2808      	cmp	r0, #8
 800615a:	d01e      	beq.n	800619a <??zcl_handle_command_19>
 800615c:	2809      	cmp	r0, #9
 800615e:	d02f      	beq.n	80061c0 <??zcl_handle_command_16>
 8006160:	280a      	cmp	r0, #10
 8006162:	d020      	beq.n	80061a6 <??zcl_handle_command_20>
 8006164:	280b      	cmp	r0, #11
 8006166:	d02a      	beq.n	80061be <??zcl_handle_command_21>
 8006168:	280c      	cmp	r0, #12
 800616a:	d022      	beq.n	80061b2 <??zcl_handle_command_22>
 800616c:	280d      	cmp	r0, #13
 800616e:	d027      	beq.n	80061c0 <??zcl_handle_command_16>
 8006170:	2810      	cmp	r0, #16
 8006172:	d025      	beq.n	80061c0 <??zcl_handle_command_16>
 8006174:	e025      	b.n	80061c2 <??zcl_handle_command_23>

08006176 <??zcl_handle_command_15>:
 8006176:	002a      	movs	r2, r5
 8006178:	0031      	movs	r1, r6
 800617a:	0020      	movs	r0, r4
 800617c:	f7ff fd1f 	bl	8005bbe <ZbZclHandleReadAttr>
 8006180:	e077      	b.n	8006272 <??zcl_handle_command_24>

08006182 <??zcl_handle_command_17>:
 8006182:	002a      	movs	r2, r5
 8006184:	0031      	movs	r1, r6
 8006186:	0020      	movs	r0, r4
 8006188:	f7ff fdf4 	bl	8005d74 <ZbZclHandleWriteAttr>
 800618c:	e071      	b.n	8006272 <??zcl_handle_command_24>

0800618e <??zcl_handle_command_18>:
 800618e:	002a      	movs	r2, r5
 8006190:	0031      	movs	r1, r6
 8006192:	0020      	movs	r0, r4
 8006194:	f7fc fdf1 	bl	8002d7a <ZbZclHandleConfigReport>
 8006198:	e06b      	b.n	8006272 <??zcl_handle_command_24>

0800619a <??zcl_handle_command_19>:
 800619a:	002a      	movs	r2, r5
 800619c:	0031      	movs	r1, r6
 800619e:	0020      	movs	r0, r4
 80061a0:	f7fd f86f 	bl	8003282 <ZbZclHandleReadReport>
 80061a4:	e065      	b.n	8006272 <??zcl_handle_command_24>

080061a6 <??zcl_handle_command_20>:
 80061a6:	002a      	movs	r2, r5
 80061a8:	0031      	movs	r1, r6
 80061aa:	0020      	movs	r0, r4
 80061ac:	f7fd f98e 	bl	80034cc <ZbZclHandleReportAttr>
 80061b0:	e05f      	b.n	8006272 <??zcl_handle_command_24>

080061b2 <??zcl_handle_command_22>:
 80061b2:	002a      	movs	r2, r5
 80061b4:	0031      	movs	r1, r6
 80061b6:	0020      	movs	r0, r4
 80061b8:	f7fa f833 	bl	8000222 <ZbZclAttrHandleDiscover>
 80061bc:	e059      	b.n	8006272 <??zcl_handle_command_24>

080061be <??zcl_handle_command_21>:
 80061be:	e058      	b.n	8006272 <??zcl_handle_command_24>

080061c0 <??zcl_handle_command_16>:
 80061c0:	e057      	b.n	8006272 <??zcl_handle_command_24>

080061c2 <??zcl_handle_command_23>:
 80061c2:	7870      	ldrb	r0, [r6, #1]
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d04e      	beq.n	8006266 <??zcl_handle_command_25>
 80061c8:	88b0      	ldrh	r0, [r6, #4]
 80061ca:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80061ce:	4288      	cmp	r0, r1
 80061d0:	d141      	bne.n	8006256 <??zcl_handle_command_26>
 80061d2:	f115 0110 	adds.w	r1, r5, #16
 80061d6:	68a0      	ldr	r0, [r4, #8]
 80061d8:	f00c fc9f 	bl	8012b1a <ZbApsAddrIsLocal>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d107      	bne.n	80061f0 <??zcl_handle_command_27>
 80061e0:	2381      	movs	r3, #129	@ 0x81
 80061e2:	0032      	movs	r2, r6
 80061e4:	0029      	movs	r1, r5
 80061e6:	0020      	movs	r0, r4
 80061e8:	f00d f89a 	bl	8013320 <ZbZclSendDefaultResponse>
 80061ec:	4640      	mov	r0, r8
 80061ee:	e041      	b.n	8006274 <??zcl_handle_command_6>

080061f0 <??zcl_handle_command_27>:
 80061f0:	0038      	movs	r0, r7
 80061f2:	b2c0      	uxtb	r0, r0
 80061f4:	28f0      	cmp	r0, #240	@ 0xf0
 80061f6:	d108      	bne.n	800620a <??zcl_handle_command_28>
 80061f8:	78b0      	ldrb	r0, [r6, #2]
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d131      	bne.n	8006262 <??zcl_handle_command_29>
 80061fe:	002a      	movs	r2, r5
 8006200:	0031      	movs	r1, r6
 8006202:	0020      	movs	r0, r4
 8006204:	f001 fc6f 	bl	8007ae6 <ZbZclHandleGetSceneData>
 8006208:	e02b      	b.n	8006262 <??zcl_handle_command_29>

0800620a <??zcl_handle_command_28>:
 800620a:	0038      	movs	r0, r7
 800620c:	b2c0      	uxtb	r0, r0
 800620e:	28f1      	cmp	r0, #241	@ 0xf1
 8006210:	d108      	bne.n	8006224 <??zcl_handle_command_30>
 8006212:	78b0      	ldrb	r0, [r6, #2]
 8006214:	2800      	cmp	r0, #0
 8006216:	d124      	bne.n	8006262 <??zcl_handle_command_29>
 8006218:	002a      	movs	r2, r5
 800621a:	0031      	movs	r1, r6
 800621c:	0020      	movs	r0, r4
 800621e:	f001 fce1 	bl	8007be4 <ZbZclHandleSetSceneData>
 8006222:	e01e      	b.n	8006262 <??zcl_handle_command_29>

08006224 <??zcl_handle_command_30>:
 8006224:	0038      	movs	r0, r7
 8006226:	b2c0      	uxtb	r0, r0
 8006228:	28f2      	cmp	r0, #242	@ 0xf2
 800622a:	d10d      	bne.n	8006248 <??zcl_handle_command_31>
 800622c:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800622e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8006230:	0020      	movs	r0, r4
 8006232:	f7ff fc77 	bl	8005b24 <zcl_persist_handle_set>
 8006236:	4681      	mov	r9, r0
 8006238:	464b      	mov	r3, r9
 800623a:	b2db      	uxtb	r3, r3
 800623c:	0032      	movs	r2, r6
 800623e:	0029      	movs	r1, r5
 8006240:	0020      	movs	r0, r4
 8006242:	f00d f86d 	bl	8013320 <ZbZclSendDefaultResponse>
 8006246:	e00c      	b.n	8006262 <??zcl_handle_command_29>

08006248 <??zcl_handle_command_31>:
 8006248:	2381      	movs	r3, #129	@ 0x81
 800624a:	0032      	movs	r2, r6
 800624c:	0029      	movs	r1, r5
 800624e:	0020      	movs	r0, r4
 8006250:	f00d f866 	bl	8013320 <ZbZclSendDefaultResponse>
 8006254:	e005      	b.n	8006262 <??zcl_handle_command_29>

08006256 <??zcl_handle_command_26>:
 8006256:	2381      	movs	r3, #129	@ 0x81
 8006258:	0032      	movs	r2, r6
 800625a:	0029      	movs	r1, r5
 800625c:	0020      	movs	r0, r4
 800625e:	f00d f85f 	bl	8013320 <ZbZclSendDefaultResponse>

08006262 <??zcl_handle_command_29>:
 8006262:	4640      	mov	r0, r8
 8006264:	e006      	b.n	8006274 <??zcl_handle_command_6>

08006266 <??zcl_handle_command_25>:
 8006266:	2381      	movs	r3, #129	@ 0x81
 8006268:	0032      	movs	r2, r6
 800626a:	0029      	movs	r1, r5
 800626c:	0020      	movs	r0, r4
 800626e:	f00d f857 	bl	8013320 <ZbZclSendDefaultResponse>

08006272 <??zcl_handle_command_24>:
 8006272:	4640      	mov	r0, r8

08006274 <??zcl_handle_command_6>:
 8006274:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08006278 <zcl_cluster_data_ind>:
 8006278:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800627a:	0004      	movs	r4, r0
 800627c:	000d      	movs	r5, r1
 800627e:	002e      	movs	r6, r5
 8006280:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8006282:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006284:	4668      	mov	r0, sp
 8006286:	f000 f8fe 	bl	8006486 <ZbZclParseHeader>
 800628a:	0007      	movs	r7, r0
 800628c:	2f00      	cmp	r7, #0
 800628e:	d501      	bpl.n	8006294 <??zcl_cluster_data_ind_0>
 8006290:	2000      	movs	r0, #0
 8006292:	e00a      	b.n	80062aa <??zcl_cluster_data_ind_1>

08006294 <??zcl_cluster_data_ind_0>:
 8006294:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006296:	4438      	add	r0, r7
 8006298:	6260      	str	r0, [r4, #36]	@ 0x24
 800629a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800629c:	1bc0      	subs	r0, r0, r7
 800629e:	8520      	strh	r0, [r4, #40]	@ 0x28
 80062a0:	466a      	mov	r2, sp
 80062a2:	0021      	movs	r1, r4
 80062a4:	0030      	movs	r0, r6
 80062a6:	f7ff fec5 	bl	8006034 <zcl_handle_command>

080062aa <??zcl_cluster_data_ind_1>:
 80062aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080062ac <zcl_cluster_alarm_data_ind>:
 80062ac:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	b098      	sub	sp, #96	@ 0x60
 80062b2:	0004      	movs	r4, r0
 80062b4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80062b6:	26ff      	movs	r6, #255	@ 0xff
 80062b8:	2700      	movs	r7, #0
 80062ba:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80062bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80062be:	a802      	add	r0, sp, #8
 80062c0:	f000 f8e1 	bl	8006486 <ZbZclParseHeader>
 80062c4:	4680      	mov	r8, r0
 80062c6:	f1b8 0f00 	cmp.w	r8, #0
 80062ca:	d501      	bpl.n	80062d0 <??zcl_cluster_alarm_data_ind_0>
 80062cc:	2000      	movs	r0, #0
 80062ce:	e0d7      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062d0 <??zcl_cluster_alarm_data_ind_0>:
 80062d0:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 80062d2:	ebb0 0008 	subs.w	r0, r0, r8
 80062d6:	8520      	strh	r0, [r4, #40]	@ 0x28
 80062d8:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80062da:	2809      	cmp	r0, #9
 80062dc:	d001      	beq.n	80062e2 <??zcl_cluster_alarm_data_ind_2>
 80062de:	2000      	movs	r0, #0
 80062e0:	e0ce      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062e2 <??zcl_cluster_alarm_data_ind_2>:
 80062e2:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d001      	beq.n	80062ee <??zcl_cluster_alarm_data_ind_3>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e0c8      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062ee <??zcl_cluster_alarm_data_ind_3>:
 80062ee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80062f2:	2801      	cmp	r0, #1
 80062f4:	d001      	beq.n	80062fa <??zcl_cluster_alarm_data_ind_4>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e0c2      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080062fa <??zcl_cluster_alarm_data_ind_4>:
 80062fa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80062fe:	2800      	cmp	r0, #0
 8006300:	d002      	beq.n	8006308 <??zcl_cluster_alarm_data_ind_5>
 8006302:	2801      	cmp	r0, #1
 8006304:	d02a      	beq.n	800635c <??zcl_cluster_alarm_data_ind_6>
 8006306:	e03f      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

08006308 <??zcl_cluster_alarm_data_ind_5>:
 8006308:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800630a:	f810 0008 	ldrb.w	r0, [r0, r8]
 800630e:	f88d 0004 	strb.w	r0, [sp, #4]
 8006312:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006314:	4440      	add	r0, r8
 8006316:	1c40      	adds	r0, r0, #1
 8006318:	f000 fed3 	bl	80070c2 <pletoh16>
 800631c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8006320:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8006324:	0028      	movs	r0, r5
 8006326:	f7fd fbaf 	bl	8003a88 <ZbZclClusterGetClusterId>
 800632a:	4581      	cmp	r9, r0
 800632c:	d12c      	bne.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800632e <??zcl_cluster_alarm_data_ind_9>:
 800632e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8006330:	2800      	cmp	r0, #0
 8006332:	d104      	bne.n	800633e <??zcl_cluster_alarm_data_ind_10>
 8006334:	2081      	movs	r0, #129	@ 0x81
 8006336:	0006      	movs	r6, r0
 8006338:	2001      	movs	r0, #1
 800633a:	0007      	movs	r7, r0
 800633c:	e024      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800633e <??zcl_cluster_alarm_data_ind_10>:
 800633e:	a802      	add	r0, sp, #8
 8006340:	9000      	str	r0, [sp, #0]
 8006342:	0023      	movs	r3, r4
 8006344:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006348:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800634c:	0028      	movs	r0, r5
 800634e:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8006352:	47e0      	blx	ip
 8006354:	0006      	movs	r6, r0
 8006356:	2001      	movs	r0, #1
 8006358:	0007      	movs	r7, r0
 800635a:	e015      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800635c <??zcl_cluster_alarm_data_ind_6>:
 800635c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800635e:	2800      	cmp	r0, #0
 8006360:	d104      	bne.n	800636c <??zcl_cluster_alarm_data_ind_11>
 8006362:	2081      	movs	r0, #129	@ 0x81
 8006364:	0006      	movs	r6, r0
 8006366:	2001      	movs	r0, #1
 8006368:	0007      	movs	r7, r0
 800636a:	e00d      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

0800636c <??zcl_cluster_alarm_data_ind_11>:
 800636c:	a802      	add	r0, sp, #8
 800636e:	9000      	str	r0, [sp, #0]
 8006370:	0023      	movs	r3, r4
 8006372:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006376:	21ff      	movs	r1, #255	@ 0xff
 8006378:	0028      	movs	r0, r5
 800637a:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 800637e:	47e0      	blx	ip
 8006380:	0006      	movs	r6, r0
 8006382:	2001      	movs	r0, #1
 8006384:	0007      	movs	r7, r0
 8006386:	e7ff      	b.n	8006388 <??zcl_cluster_alarm_data_ind_7>

08006388 <??zcl_cluster_alarm_data_ind_7>:
 8006388:	0030      	movs	r0, r6
 800638a:	b2c0      	uxtb	r0, r0
 800638c:	28ff      	cmp	r0, #255	@ 0xff
 800638e:	d076      	beq.n	800647e <??zcl_cluster_alarm_data_ind_12>
 8006390:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8006394:	f88d 0000 	strb.w	r0, [sp]
 8006398:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800639c:	f88d 0002 	strb.w	r0, [sp, #2]
 80063a0:	f88d 6003 	strb.w	r6, [sp, #3]
 80063a4:	f05f 0a08 	movs.w	sl, #8
 80063a8:	f05f 0b00 	movs.w	fp, #0
 80063ac:	f10d 0908 	add.w	r9, sp, #8
 80063b0:	465a      	mov	r2, fp
 80063b2:	4651      	mov	r1, sl
 80063b4:	4648      	mov	r0, r9
 80063b6:	f001 fcaf 	bl	8007d18 <__aeabi_memset>
 80063ba:	2000      	movs	r0, #0
 80063bc:	f88d 0008 	strb.w	r0, [sp, #8]
 80063c0:	2000      	movs	r0, #0
 80063c2:	f88d 0009 	strb.w	r0, [sp, #9]
 80063c6:	2001      	movs	r0, #1
 80063c8:	f88d 000a 	strb.w	r0, [sp, #10]
 80063cc:	2001      	movs	r0, #1
 80063ce:	f88d 000b 	strb.w	r0, [sp, #11]
 80063d2:	2000      	movs	r0, #0
 80063d4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80063d8:	f89d 0000 	ldrb.w	r0, [sp]
 80063dc:	f88d 000e 	strb.w	r0, [sp, #14]
 80063e0:	200b      	movs	r0, #11
 80063e2:	f88d 000f 	strb.w	r0, [sp, #15]
 80063e6:	2205      	movs	r2, #5
 80063e8:	a905      	add	r1, sp, #20
 80063ea:	a802      	add	r0, sp, #8
 80063ec:	f000 f8ce 	bl	800658c <ZbZclAppendHeader>
 80063f0:	4681      	mov	r9, r0
 80063f2:	f1b9 0f00 	cmp.w	r9, #0
 80063f6:	d501      	bpl.n	80063fc <??zcl_cluster_alarm_data_ind_13>
 80063f8:	2089      	movs	r0, #137	@ 0x89
 80063fa:	e041      	b.n	8006480 <??zcl_cluster_alarm_data_ind_1>

080063fc <??zcl_cluster_alarm_data_ind_13>:
 80063fc:	a805      	add	r0, sp, #20
 80063fe:	9014      	str	r0, [sp, #80]	@ 0x50
 8006400:	a814      	add	r0, sp, #80	@ 0x50
 8006402:	f8c0 9004 	str.w	r9, [r0, #4]
 8006406:	f10d 0102 	add.w	r1, sp, #2
 800640a:	6081      	str	r1, [r0, #8]
 800640c:	2002      	movs	r0, #2
 800640e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006410:	2030      	movs	r0, #48	@ 0x30
 8006412:	9004      	str	r0, [sp, #16]
 8006414:	f05f 0a00 	movs.w	sl, #0
 8006418:	f10d 0b20 	add.w	fp, sp, #32
 800641c:	4652      	mov	r2, sl
 800641e:	9904      	ldr	r1, [sp, #16]
 8006420:	4658      	mov	r0, fp
 8006422:	f001 fc79 	bl	8007d18 <__aeabi_memset>
 8006426:	a808      	add	r0, sp, #32
 8006428:	f114 0110 	adds.w	r1, r4, #16
 800642c:	2210      	movs	r2, #16
 800642e:	f010 ff0a 	bl	8017246 <__aeabi_memcpy>
 8006432:	8aa8      	ldrh	r0, [r5, #20]
 8006434:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8006438:	2009      	movs	r0, #9
 800643a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800643e:	7ba8      	ldrb	r0, [r5, #14]
 8006440:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8006444:	a814      	add	r0, sp, #80	@ 0x50
 8006446:	900e      	str	r0, [sp, #56]	@ 0x38
 8006448:	2002      	movs	r0, #2
 800644a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800644e:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8006452:	f7fd fc0a 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8006456:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 800645a:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 800645e:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8006462:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8006466:	2000      	movs	r0, #0
 8006468:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 800646c:	2000      	movs	r0, #0
 800646e:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 8006472:	2300      	movs	r3, #0
 8006474:	2200      	movs	r2, #0
 8006476:	a908      	add	r1, sp, #32
 8006478:	68a8      	ldr	r0, [r5, #8]
 800647a:	f00c fab1 	bl	80129e0 <ZbApsdeDataReqCallback>

0800647e <??zcl_cluster_alarm_data_ind_12>:
 800647e:	0038      	movs	r0, r7

08006480 <??zcl_cluster_alarm_data_ind_1>:
 8006480:	b019      	add	sp, #100	@ 0x64
 8006482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006486 <ZbZclParseHeader>:
 8006486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648a:	0004      	movs	r4, r0
 800648c:	000d      	movs	r5, r1
 800648e:	0016      	movs	r6, r2
 8006490:	2700      	movs	r7, #0
 8006492:	2e03      	cmp	r6, #3
 8006494:	d202      	bcs.n	800649c <??ZbZclParseHeader_0>
 8006496:	f05f 30ff 	movs.w	r0, #4294967295
 800649a:	e035      	b.n	8006508 <??ZbZclParseHeader_1>

0800649c <??ZbZclParseHeader_0>:
 800649c:	f05f 0808 	movs.w	r8, #8
 80064a0:	f05f 0900 	movs.w	r9, #0
 80064a4:	46a2      	mov	sl, r4
 80064a6:	464a      	mov	r2, r9
 80064a8:	4641      	mov	r1, r8
 80064aa:	4650      	mov	r0, sl
 80064ac:	f001 fc34 	bl	8007d18 <__aeabi_memset>
 80064b0:	5de8      	ldrb	r0, [r5, r7]
 80064b2:	f010 0003 	ands.w	r0, r0, #3
 80064b6:	7020      	strb	r0, [r4, #0]
 80064b8:	5de8      	ldrb	r0, [r5, r7]
 80064ba:	b2c0      	uxtb	r0, r0
 80064bc:	0880      	lsrs	r0, r0, #2
 80064be:	f010 0001 	ands.w	r0, r0, #1
 80064c2:	7060      	strb	r0, [r4, #1]
 80064c4:	5de8      	ldrb	r0, [r5, r7]
 80064c6:	b2c0      	uxtb	r0, r0
 80064c8:	08c0      	lsrs	r0, r0, #3
 80064ca:	f010 0001 	ands.w	r0, r0, #1
 80064ce:	70a0      	strb	r0, [r4, #2]
 80064d0:	5de8      	ldrb	r0, [r5, r7]
 80064d2:	b2c0      	uxtb	r0, r0
 80064d4:	0900      	lsrs	r0, r0, #4
 80064d6:	f010 0001 	ands.w	r0, r0, #1
 80064da:	70e0      	strb	r0, [r4, #3]
 80064dc:	1c7f      	adds	r7, r7, #1
 80064de:	7860      	ldrb	r0, [r4, #1]
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d00a      	beq.n	80064fa <??ZbZclParseHeader_2>
 80064e4:	2e05      	cmp	r6, #5
 80064e6:	d202      	bcs.n	80064ee <??ZbZclParseHeader_3>
 80064e8:	f05f 30ff 	movs.w	r0, #4294967295
 80064ec:	e00c      	b.n	8006508 <??ZbZclParseHeader_1>

080064ee <??ZbZclParseHeader_3>:
 80064ee:	eb05 0007 	add.w	r0, r5, r7
 80064f2:	f000 fde6 	bl	80070c2 <pletoh16>
 80064f6:	80a0      	strh	r0, [r4, #4]
 80064f8:	1cbf      	adds	r7, r7, #2

080064fa <??ZbZclParseHeader_2>:
 80064fa:	5de8      	ldrb	r0, [r5, r7]
 80064fc:	71a0      	strb	r0, [r4, #6]
 80064fe:	1c7f      	adds	r7, r7, #1
 8006500:	5de8      	ldrb	r0, [r5, r7]
 8006502:	71e0      	strb	r0, [r4, #7]
 8006504:	1c7f      	adds	r7, r7, #1
 8006506:	0038      	movs	r0, r7

08006508 <??ZbZclParseHeader_1>:
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800650c <ZbZclPrependHeader>:
 800650c:	b470      	push	{r4, r5, r6}
 800650e:	0003      	movs	r3, r0
 8006510:	2400      	movs	r4, #0
 8006512:	0015      	movs	r5, r2
 8006514:	2600      	movs	r6, #0
 8006516:	7858      	ldrb	r0, [r3, #1]
 8006518:	2800      	cmp	r0, #0
 800651a:	d004      	beq.n	8006526 <??ZbZclPrependHeader_0>
 800651c:	2a05      	cmp	r2, #5
 800651e:	d202      	bcs.n	8006526 <??ZbZclPrependHeader_0>
 8006520:	f05f 30ff 	movs.w	r0, #4294967295
 8006524:	e030      	b.n	8006588 <??ZbZclPrependHeader_1>

08006526 <??ZbZclPrependHeader_0>:
 8006526:	2a03      	cmp	r2, #3
 8006528:	d202      	bcs.n	8006530 <??ZbZclPrependHeader_2>
 800652a:	f05f 30ff 	movs.w	r0, #4294967295
 800652e:	e02b      	b.n	8006588 <??ZbZclPrependHeader_1>

08006530 <??ZbZclPrependHeader_2>:
 8006530:	1e6d      	subs	r5, r5, #1
 8006532:	79d8      	ldrb	r0, [r3, #7]
 8006534:	5548      	strb	r0, [r1, r5]
 8006536:	1c76      	adds	r6, r6, #1
 8006538:	1e6d      	subs	r5, r5, #1
 800653a:	7998      	ldrb	r0, [r3, #6]
 800653c:	5548      	strb	r0, [r1, r5]
 800653e:	1c76      	adds	r6, r6, #1
 8006540:	7858      	ldrb	r0, [r3, #1]
 8006542:	2800      	cmp	r0, #0
 8006544:	d009      	beq.n	800655a <??ZbZclPrependHeader_3>
 8006546:	1e6d      	subs	r5, r5, #1
 8006548:	8898      	ldrh	r0, [r3, #4]
 800654a:	b280      	uxth	r0, r0
 800654c:	0a00      	lsrs	r0, r0, #8
 800654e:	5548      	strb	r0, [r1, r5]
 8006550:	1c76      	adds	r6, r6, #1
 8006552:	1e6d      	subs	r5, r5, #1
 8006554:	8898      	ldrh	r0, [r3, #4]
 8006556:	5548      	strb	r0, [r1, r5]
 8006558:	1c76      	adds	r6, r6, #1

0800655a <??ZbZclPrependHeader_3>:
 800655a:	7818      	ldrb	r0, [r3, #0]
 800655c:	f010 0003 	ands.w	r0, r0, #3
 8006560:	4304      	orrs	r4, r0
 8006562:	7858      	ldrb	r0, [r3, #1]
 8006564:	2800      	cmp	r0, #0
 8006566:	d001      	beq.n	800656c <??ZbZclPrependHeader_4>
 8006568:	f054 0404 	orrs.w	r4, r4, #4

0800656c <??ZbZclPrependHeader_4>:
 800656c:	7898      	ldrb	r0, [r3, #2]
 800656e:	2801      	cmp	r0, #1
 8006570:	d101      	bne.n	8006576 <??ZbZclPrependHeader_5>
 8006572:	f054 0408 	orrs.w	r4, r4, #8

08006576 <??ZbZclPrependHeader_5>:
 8006576:	78d8      	ldrb	r0, [r3, #3]
 8006578:	2801      	cmp	r0, #1
 800657a:	d101      	bne.n	8006580 <??ZbZclPrependHeader_6>
 800657c:	f054 0410 	orrs.w	r4, r4, #16

08006580 <??ZbZclPrependHeader_6>:
 8006580:	1e6d      	subs	r5, r5, #1
 8006582:	554c      	strb	r4, [r1, r5]
 8006584:	1c76      	adds	r6, r6, #1
 8006586:	0030      	movs	r0, r6

08006588 <??ZbZclPrependHeader_1>:
 8006588:	bc70      	pop	{r4, r5, r6}
 800658a:	4770      	bx	lr

0800658c <ZbZclAppendHeader>:
 800658c:	b430      	push	{r4, r5}
 800658e:	0003      	movs	r3, r0
 8006590:	2400      	movs	r4, #0
 8006592:	2500      	movs	r5, #0
 8006594:	7858      	ldrb	r0, [r3, #1]
 8006596:	2800      	cmp	r0, #0
 8006598:	d004      	beq.n	80065a4 <??ZbZclAppendHeader_0>
 800659a:	2a05      	cmp	r2, #5
 800659c:	d202      	bcs.n	80065a4 <??ZbZclAppendHeader_0>
 800659e:	f05f 30ff 	movs.w	r0, #4294967295
 80065a2:	e02b      	b.n	80065fc <??ZbZclAppendHeader_1>

080065a4 <??ZbZclAppendHeader_0>:
 80065a4:	2a03      	cmp	r2, #3
 80065a6:	d202      	bcs.n	80065ae <??ZbZclAppendHeader_2>
 80065a8:	f05f 30ff 	movs.w	r0, #4294967295
 80065ac:	e026      	b.n	80065fc <??ZbZclAppendHeader_1>

080065ae <??ZbZclAppendHeader_2>:
 80065ae:	7818      	ldrb	r0, [r3, #0]
 80065b0:	f010 0003 	ands.w	r0, r0, #3
 80065b4:	4304      	orrs	r4, r0
 80065b6:	7858      	ldrb	r0, [r3, #1]
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d001      	beq.n	80065c0 <??ZbZclAppendHeader_3>
 80065bc:	f054 0404 	orrs.w	r4, r4, #4

080065c0 <??ZbZclAppendHeader_3>:
 80065c0:	7898      	ldrb	r0, [r3, #2]
 80065c2:	2801      	cmp	r0, #1
 80065c4:	d101      	bne.n	80065ca <??ZbZclAppendHeader_4>
 80065c6:	f054 0408 	orrs.w	r4, r4, #8

080065ca <??ZbZclAppendHeader_4>:
 80065ca:	78d8      	ldrb	r0, [r3, #3]
 80065cc:	2801      	cmp	r0, #1
 80065ce:	d101      	bne.n	80065d4 <??ZbZclAppendHeader_5>
 80065d0:	f054 0410 	orrs.w	r4, r4, #16

080065d4 <??ZbZclAppendHeader_5>:
 80065d4:	554c      	strb	r4, [r1, r5]
 80065d6:	1c6d      	adds	r5, r5, #1
 80065d8:	7858      	ldrb	r0, [r3, #1]
 80065da:	2800      	cmp	r0, #0
 80065dc:	d007      	beq.n	80065ee <??ZbZclAppendHeader_6>
 80065de:	8898      	ldrh	r0, [r3, #4]
 80065e0:	5548      	strb	r0, [r1, r5]
 80065e2:	1c6d      	adds	r5, r5, #1
 80065e4:	8898      	ldrh	r0, [r3, #4]
 80065e6:	b280      	uxth	r0, r0
 80065e8:	0a00      	lsrs	r0, r0, #8
 80065ea:	5548      	strb	r0, [r1, r5]
 80065ec:	1c6d      	adds	r5, r5, #1

080065ee <??ZbZclAppendHeader_6>:
 80065ee:	7998      	ldrb	r0, [r3, #6]
 80065f0:	5548      	strb	r0, [r1, r5]
 80065f2:	1c6d      	adds	r5, r5, #1
 80065f4:	79d8      	ldrb	r0, [r3, #7]
 80065f6:	5548      	strb	r0, [r1, r5]
 80065f8:	1c6d      	adds	r5, r5, #1
 80065fa:	0028      	movs	r0, r5

080065fc <??ZbZclAppendHeader_1>:
 80065fc:	bc30      	pop	{r4, r5}
 80065fe:	4770      	bx	lr

08006600 <ZbZclLevelServerAlloc>:
 8006600:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	000f      	movs	r7, r1
 8006608:	0014      	movs	r4, r2
 800660a:	001d      	movs	r5, r3
 800660c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8006610:	2c00      	cmp	r4, #0
 8006612:	d016      	beq.n	8006642 <??ZbZclLevelServerAlloc_0>
 8006614:	0020      	movs	r0, r4
 8006616:	f7fd fa37 	bl	8003a88 <ZbZclClusterGetClusterId>
 800661a:	2806      	cmp	r0, #6
 800661c:	d001      	beq.n	8006622 <??ZbZclLevelServerAlloc_1>
 800661e:	2000      	movs	r0, #0
 8006620:	e05a      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

08006622 <??ZbZclLevelServerAlloc_1>:
 8006622:	0020      	movs	r0, r4
 8006624:	f7fd fb38 	bl	8003c98 <ZbZclClusterGetDirection>
 8006628:	2800      	cmp	r0, #0
 800662a:	d001      	beq.n	8006630 <??ZbZclLevelServerAlloc_3>
 800662c:	2000      	movs	r0, #0
 800662e:	e053      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

08006630 <??ZbZclLevelServerAlloc_3>:
 8006630:	0020      	movs	r0, r4
 8006632:	f7fd fa23 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8006636:	0039      	movs	r1, r7
 8006638:	b2c9      	uxtb	r1, r1
 800663a:	4288      	cmp	r0, r1
 800663c:	d001      	beq.n	8006642 <??ZbZclLevelServerAlloc_0>
 800663e:	2000      	movs	r0, #0
 8006640:	e04a      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

08006642 <??ZbZclLevelServerAlloc_0>:
 8006642:	2000      	movs	r0, #0
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	003b      	movs	r3, r7
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2208      	movs	r2, #8
 800664c:	2180      	movs	r1, #128	@ 0x80
 800664e:	9802      	ldr	r0, [sp, #8]
 8006650:	f7fd fba3 	bl	8003d9a <ZbZclClusterAlloc>
 8006654:	0006      	movs	r6, r0
 8006656:	2e00      	cmp	r6, #0
 8006658:	d101      	bne.n	800665e <??ZbZclLevelServerAlloc_4>
 800665a:	2000      	movs	r0, #0
 800665c:	e03c      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

0800665e <??ZbZclLevelServerAlloc_4>:
 800665e:	2202      	movs	r2, #2
 8006660:	2300      	movs	r3, #0
 8006662:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006666:	0030      	movs	r0, r6
 8006668:	f7fb f9fb 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800666c:	f20f 0071 	addw	r0, pc, #113	@ 0x71
 8006670:	6630      	str	r0, [r6, #96]	@ 0x60
 8006672:	f20f 00b1 	addw	r0, pc, #177	@ 0xb1
 8006676:	6670      	str	r0, [r6, #100]	@ 0x64
 8006678:	f20f 10f1 	addw	r0, pc, #497	@ 0x1f1
 800667c:	65b0      	str	r0, [r6, #88]	@ 0x58
 800667e:	2d00      	cmp	r5, #0
 8006680:	d00a      	beq.n	8006698 <??ZbZclLevelServerAlloc_5>
 8006682:	f05f 0910 	movs.w	r9, #16
 8006686:	46aa      	mov	sl, r5
 8006688:	f116 0b70 	adds.w	fp, r6, #112	@ 0x70
 800668c:	464a      	mov	r2, r9
 800668e:	4651      	mov	r1, sl
 8006690:	4658      	mov	r0, fp
 8006692:	f010 fdd8 	bl	8017246 <__aeabi_memcpy>
 8006696:	e00a      	b.n	80066ae <??ZbZclLevelServerAlloc_6>

08006698 <??ZbZclLevelServerAlloc_5>:
 8006698:	f05f 0910 	movs.w	r9, #16
 800669c:	f05f 0a00 	movs.w	sl, #0
 80066a0:	f116 0b70 	adds.w	fp, r6, #112	@ 0x70
 80066a4:	4652      	mov	r2, sl
 80066a6:	4649      	mov	r1, r9
 80066a8:	4658      	mov	r0, fp
 80066aa:	f001 fb35 	bl	8007d18 <__aeabi_memset>

080066ae <??ZbZclLevelServerAlloc_6>:
 80066ae:	4641      	mov	r1, r8
 80066b0:	0030      	movs	r0, r6
 80066b2:	f7fd f9e5 	bl	8003a80 <ZbZclClusterSetCallbackArg>
 80066b6:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80066b8:	2202      	movs	r2, #2
 80066ba:	4908      	ldr	r1, [pc, #32]	@ (80066dc <??DataTable0>)
 80066bc:	0030      	movs	r0, r6
 80066be:	f7fb fae7 	bl	8001c90 <ZbZclAttrAppendList>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d004      	beq.n	80066d0 <??ZbZclLevelServerAlloc_7>
 80066c6:	0030      	movs	r0, r6
 80066c8:	f7fd fc29 	bl	8003f1e <ZbZclClusterFree>
 80066cc:	2000      	movs	r0, #0
 80066ce:	e003      	b.n	80066d8 <??ZbZclLevelServerAlloc_2>

080066d0 <??ZbZclLevelServerAlloc_7>:
 80066d0:	0030      	movs	r0, r6
 80066d2:	f7fd fbf2 	bl	8003eba <ZbZclClusterAttach>
 80066d6:	0030      	movs	r0, r6

080066d8 <??ZbZclLevelServerAlloc_2>:
 80066d8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066dc <??DataTable0>:
 80066dc:	9890 0801                                   ....

080066e0 <zcl_level_server_get_scene_data>:
 80066e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80066e2:	0004      	movs	r4, r0
 80066e4:	000d      	movs	r5, r1
 80066e6:	0016      	movs	r6, r2
 80066e8:	2703      	movs	r7, #3
 80066ea:	2000      	movs	r0, #0
 80066ec:	9001      	str	r0, [sp, #4]
 80066ee:	2001      	movs	r0, #1
 80066f0:	9000      	str	r0, [sp, #0]
 80066f2:	ab02      	add	r3, sp, #8
 80066f4:	2200      	movs	r2, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	0020      	movs	r0, r4
 80066fa:	f7f9 fe74 	bl	80003e6 <ZbZclAttrRead>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d001      	beq.n	8006706 <??zcl_level_server_get_scene_data_0>
 8006702:	2000      	movs	r0, #0
 8006704:	e00d      	b.n	8006722 <??zcl_level_server_get_scene_data_1>

08006706 <??zcl_level_server_get_scene_data_0>:
 8006706:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800670a:	0039      	movs	r1, r7
 800670c:	b2c9      	uxtb	r1, r1
 800670e:	5468      	strb	r0, [r5, r1]
 8006710:	1c7f      	adds	r7, r7, #1
 8006712:	89a1      	ldrh	r1, [r4, #12]
 8006714:	0028      	movs	r0, r5
 8006716:	f000 fd20 	bl	800715a <putle16>
 800671a:	1ef8      	subs	r0, r7, #3
 800671c:	70a8      	strb	r0, [r5, #2]
 800671e:	0038      	movs	r0, r7
 8006720:	b2c0      	uxtb	r0, r0

08006722 <??zcl_level_server_get_scene_data_1>:
 8006722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006724 <zcl_level_server_set_scene_data>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	b085      	sub	sp, #20
 800672a:	4680      	mov	r8, r0
 800672c:	000c      	movs	r4, r1
 800672e:	0015      	movs	r5, r2
 8006730:	001e      	movs	r6, r3
 8006732:	f8cd 8010 	str.w	r8, [sp, #16]
 8006736:	0028      	movs	r0, r5
 8006738:	b2c0      	uxtb	r0, r0
 800673a:	2801      	cmp	r0, #1
 800673c:	d001      	beq.n	8006742 <??zcl_level_server_set_scene_data_0>
 800673e:	2087      	movs	r0, #135	@ 0x87
 8006740:	e037      	b.n	80067b2 <??zcl_level_server_set_scene_data_1>

08006742 <??zcl_level_server_set_scene_data_0>:
 8006742:	7827      	ldrb	r7, [r4, #0]
 8006744:	9804      	ldr	r0, [sp, #16]
 8006746:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 8006748:	2800      	cmp	r0, #0
 800674a:	d02a      	beq.n	80067a2 <??zcl_level_server_set_scene_data_2>
 800674c:	f05f 0906 	movs.w	r9, #6
 8006750:	f05f 0a00 	movs.w	sl, #0
 8006754:	f10d 0b08 	add.w	fp, sp, #8
 8006758:	4652      	mov	r2, sl
 800675a:	4649      	mov	r1, r9
 800675c:	4658      	mov	r0, fp
 800675e:	f001 fadb 	bl	8007d18 <__aeabi_memset>
 8006762:	2000      	movs	r0, #0
 8006764:	f88d 0008 	strb.w	r0, [sp, #8]
 8006768:	f88d 7009 	strb.w	r7, [sp, #9]
 800676c:	2000      	movs	r0, #0
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	2002      	movs	r0, #2
 8006772:	9000      	str	r0, [sp, #0]
 8006774:	f10d 030a 	add.w	r3, sp, #10
 8006778:	2200      	movs	r2, #0
 800677a:	2110      	movs	r1, #16
 800677c:	4640      	mov	r0, r8
 800677e:	f7f9 fe32 	bl	80003e6 <ZbZclAttrRead>
 8006782:	2800      	cmp	r0, #0
 8006784:	d002      	beq.n	800678c <??zcl_level_server_set_scene_data_3>
 8006786:	2000      	movs	r0, #0
 8006788:	f8ad 000a 	strh.w	r0, [sp, #10]

0800678c <??zcl_level_server_set_scene_data_3>:
 800678c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8006790:	2200      	movs	r2, #0
 8006792:	a902      	add	r1, sp, #8
 8006794:	4640      	mov	r0, r8
 8006796:	f8dd c010 	ldr.w	ip, [sp, #16]
 800679a:	f8dc c070 	ldr.w	ip, [ip, #112]	@ 0x70
 800679e:	47e0      	blx	ip
 80067a0:	e006      	b.n	80067b0 <??zcl_level_server_set_scene_data_4>

080067a2 <??zcl_level_server_set_scene_data_2>:
 80067a2:	003a      	movs	r2, r7
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	2300      	movs	r3, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7fb f959 	bl	8001a62 <ZbZclAttrIntegerWrite>

080067b0 <??zcl_level_server_set_scene_data_4>:
 80067b0:	2000      	movs	r0, #0

080067b2 <??zcl_level_server_set_scene_data_1>:
 80067b2:	b005      	add	sp, #20
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067b8 <zcl_level_options_cmd_allow>:
 80067b8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80067bc:	0005      	movs	r5, r0
 80067be:	000e      	movs	r6, r1
 80067c0:	0017      	movs	r7, r2
 80067c2:	46a8      	mov	r8, r5
 80067c4:	2000      	movs	r0, #0
 80067c6:	9001      	str	r0, [sp, #4]
 80067c8:	2001      	movs	r0, #1
 80067ca:	9000      	str	r0, [sp, #0]
 80067cc:	ab02      	add	r3, sp, #8
 80067ce:	2200      	movs	r2, #0
 80067d0:	210f      	movs	r1, #15
 80067d2:	0028      	movs	r0, r5
 80067d4:	f7f9 fe07 	bl	80003e6 <ZbZclAttrRead>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d001      	beq.n	80067e0 <??zcl_level_options_cmd_allow_0>
 80067dc:	2000      	movs	r0, #0
 80067de:	e042      	b.n	8006866 <??zcl_level_options_cmd_allow_1>

080067e0 <??zcl_level_options_cmd_allow_0>:
 80067e0:	f05f 0900 	movs.w	r9, #0

080067e4 <??zcl_level_options_cmd_allow_2>:
 80067e4:	4648      	mov	r0, r9
 80067e6:	b2c0      	uxtb	r0, r0
 80067e8:	2808      	cmp	r0, #8
 80067ea:	da1d      	bge.n	8006828 <??zcl_level_options_cmd_allow_3>
 80067ec:	2001      	movs	r0, #1
 80067ee:	fa10 f009 	lsls.w	r0, r0, r9
 80067f2:	0004      	movs	r4, r0
 80067f4:	0030      	movs	r0, r6
 80067f6:	b2c0      	uxtb	r0, r0
 80067f8:	0021      	movs	r1, r4
 80067fa:	b2c9      	uxtb	r1, r1
 80067fc:	4208      	tst	r0, r1
 80067fe:	d010      	beq.n	8006822 <??zcl_level_options_cmd_allow_4>

08006800 <??zcl_level_options_cmd_allow_5>:
 8006800:	0038      	movs	r0, r7
 8006802:	b2c0      	uxtb	r0, r0
 8006804:	0021      	movs	r1, r4
 8006806:	b2c9      	uxtb	r1, r1
 8006808:	4208      	tst	r0, r1
 800680a:	d105      	bne.n	8006818 <??zcl_level_options_cmd_allow_6>
 800680c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006810:	43a0      	bics	r0, r4
 8006812:	f88d 0008 	strb.w	r0, [sp, #8]
 8006816:	e004      	b.n	8006822 <??zcl_level_options_cmd_allow_4>

08006818 <??zcl_level_options_cmd_allow_6>:
 8006818:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800681c:	4320      	orrs	r0, r4
 800681e:	f88d 0008 	strb.w	r0, [sp, #8]

08006822 <??zcl_level_options_cmd_allow_4>:
 8006822:	f119 0901 	adds.w	r9, r9, #1
 8006826:	e7dd      	b.n	80067e4 <??zcl_level_options_cmd_allow_2>

08006828 <??zcl_level_options_cmd_allow_3>:
 8006828:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800682c:	07c0      	lsls	r0, r0, #31
 800682e:	d419      	bmi.n	8006864 <??zcl_level_options_cmd_allow_7>
 8006830:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 8006834:	2800      	cmp	r0, #0
 8006836:	d015      	beq.n	8006864 <??zcl_level_options_cmd_allow_7>
 8006838:	2000      	movs	r0, #0
 800683a:	9001      	str	r0, [sp, #4]
 800683c:	2001      	movs	r0, #1
 800683e:	9000      	str	r0, [sp, #0]
 8006840:	f10d 0309 	add.w	r3, sp, #9
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 800684c:	f7f9 fdcb 	bl	80003e6 <ZbZclAttrRead>
 8006850:	2800      	cmp	r0, #0
 8006852:	d001      	beq.n	8006858 <??zcl_level_options_cmd_allow_8>
 8006854:	2000      	movs	r0, #0
 8006856:	e006      	b.n	8006866 <??zcl_level_options_cmd_allow_1>

08006858 <??zcl_level_options_cmd_allow_8>:
 8006858:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800685c:	2800      	cmp	r0, #0
 800685e:	d101      	bne.n	8006864 <??zcl_level_options_cmd_allow_7>
 8006860:	2000      	movs	r0, #0
 8006862:	e000      	b.n	8006866 <??zcl_level_options_cmd_allow_1>

08006864 <??zcl_level_options_cmd_allow_7>:
 8006864:	2001      	movs	r0, #1

08006866 <??zcl_level_options_cmd_allow_1>:
 8006866:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800686c <zcl_level_server_handle_command>:
 800686c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	b08e      	sub	sp, #56	@ 0x38
 8006872:	0004      	movs	r4, r0
 8006874:	000d      	movs	r5, r1
 8006876:	0016      	movs	r6, r2
 8006878:	0027      	movs	r7, r4
 800687a:	f8b6 8028 	ldrh.w	r8, [r6, #40]	@ 0x28
 800687e:	f05f 0918 	movs.w	r9, #24
 8006882:	f05f 0a00 	movs.w	sl, #0
 8006886:	f10d 0b20 	add.w	fp, sp, #32
 800688a:	4652      	mov	r2, sl
 800688c:	4649      	mov	r1, r9
 800688e:	4658      	mov	r0, fp
 8006890:	f001 fa42 	bl	8007d18 <__aeabi_memset>
 8006894:	a808      	add	r0, sp, #32
 8006896:	f116 0110 	adds.w	r1, r6, #16
 800689a:	2210      	movs	r2, #16
 800689c:	f010 fcd3 	bl	8017246 <__aeabi_memcpy>
 80068a0:	79a8      	ldrb	r0, [r5, #6]
 80068a2:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
 80068a6:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 80068aa:	f7fd f9de 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 80068ae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80068b2:	78a8      	ldrb	r0, [r5, #2]
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d001      	beq.n	80068bc <??zcl_level_server_handle_command_0>
 80068b8:	2081      	movs	r0, #129	@ 0x81
 80068ba:	e124      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080068bc <??zcl_level_server_handle_command_0>:
 80068bc:	79e8      	ldrb	r0, [r5, #7]
 80068be:	2800      	cmp	r0, #0
 80068c0:	d00f      	beq.n	80068e2 <??zcl_level_server_handle_command_2>
 80068c2:	2802      	cmp	r0, #2
 80068c4:	f000 809b 	beq.w	80069fe <??zcl_level_server_handle_command_3>
 80068c8:	d353      	bcc.n	8006972 <??zcl_level_server_handle_command_4>
 80068ca:	2804      	cmp	r0, #4
 80068cc:	d009      	beq.n	80068e2 <??zcl_level_server_handle_command_2>
 80068ce:	f0c0 80e2 	bcc.w	8006a96 <??zcl_level_server_handle_command_5>
 80068d2:	2806      	cmp	r0, #6
 80068d4:	f000 8093 	beq.w	80069fe <??zcl_level_server_handle_command_3>
 80068d8:	d34b      	bcc.n	8006972 <??zcl_level_server_handle_command_4>
 80068da:	2807      	cmp	r0, #7
 80068dc:	f000 80db 	beq.w	8006a96 <??zcl_level_server_handle_command_5>
 80068e0:	e110      	b.n	8006b04 <??zcl_level_server_handle_command_6>

080068e2 <??zcl_level_server_handle_command_2>:
 80068e2:	4640      	mov	r0, r8
 80068e4:	b280      	uxth	r0, r0
 80068e6:	2803      	cmp	r0, #3
 80068e8:	da01      	bge.n	80068ee <??zcl_level_server_handle_command_7>
 80068ea:	2080      	movs	r0, #128	@ 0x80
 80068ec:	e10b      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080068ee <??zcl_level_server_handle_command_7>:
 80068ee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d101      	bne.n	80068f8 <??zcl_level_server_handle_command_8>
 80068f4:	2081      	movs	r0, #129	@ 0x81
 80068f6:	e106      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080068f8 <??zcl_level_server_handle_command_8>:
 80068f8:	f05f 0906 	movs.w	r9, #6
 80068fc:	f05f 0a00 	movs.w	sl, #0
 8006900:	f10d 0b14 	add.w	fp, sp, #20
 8006904:	4652      	mov	r2, sl
 8006906:	4649      	mov	r1, r9
 8006908:	4658      	mov	r0, fp
 800690a:	f001 fa05 	bl	8007d18 <__aeabi_memset>
 800690e:	79e8      	ldrb	r0, [r5, #7]
 8006910:	2804      	cmp	r0, #4
 8006912:	d102      	bne.n	800691a <??zcl_level_server_handle_command_9>
 8006914:	2001      	movs	r0, #1
 8006916:	f88d 0014 	strb.w	r0, [sp, #20]

0800691a <??zcl_level_server_handle_command_9>:
 800691a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800691c:	7800      	ldrb	r0, [r0, #0]
 800691e:	f88d 0015 	strb.w	r0, [sp, #21]
 8006922:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006924:	1c40      	adds	r0, r0, #1
 8006926:	f000 fbcc 	bl	80070c2 <pletoh16>
 800692a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800692e:	79e8      	ldrb	r0, [r5, #7]
 8006930:	2800      	cmp	r0, #0
 8006932:	d116      	bne.n	8006962 <??zcl_level_server_handle_command_10>
 8006934:	4640      	mov	r0, r8
 8006936:	b280      	uxth	r0, r0
 8006938:	2805      	cmp	r0, #5
 800693a:	db07      	blt.n	800694c <??zcl_level_server_handle_command_11>
 800693c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800693e:	78c0      	ldrb	r0, [r0, #3]
 8006940:	f88d 0018 	strb.w	r0, [sp, #24]
 8006944:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006946:	7900      	ldrb	r0, [r0, #4]
 8006948:	f88d 0019 	strb.w	r0, [sp, #25]

0800694c <??zcl_level_server_handle_command_11>:
 800694c:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8006950:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8006954:	0020      	movs	r0, r4
 8006956:	f7ff ff2f 	bl	80067b8 <zcl_level_options_cmd_allow>
 800695a:	2800      	cmp	r0, #0
 800695c:	d101      	bne.n	8006962 <??zcl_level_server_handle_command_10>
 800695e:	2070      	movs	r0, #112	@ 0x70
 8006960:	e0d1      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006962 <??zcl_level_server_handle_command_10>:
 8006962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006964:	aa08      	add	r2, sp, #32
 8006966:	a905      	add	r1, sp, #20
 8006968:	0020      	movs	r0, r4
 800696a:	f8d7 c070 	ldr.w	ip, [r7, #112]	@ 0x70
 800696e:	47e0      	blx	ip
 8006970:	e0c9      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006972 <??zcl_level_server_handle_command_4>:
 8006972:	4640      	mov	r0, r8
 8006974:	b280      	uxth	r0, r0
 8006976:	2802      	cmp	r0, #2
 8006978:	da01      	bge.n	800697e <??zcl_level_server_handle_command_12>
 800697a:	2080      	movs	r0, #128	@ 0x80
 800697c:	e0c3      	b.n	8006b06 <??zcl_level_server_handle_command_1>

0800697e <??zcl_level_server_handle_command_12>:
 800697e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006980:	2800      	cmp	r0, #0
 8006982:	d101      	bne.n	8006988 <??zcl_level_server_handle_command_13>
 8006984:	2081      	movs	r0, #129	@ 0x81
 8006986:	e0be      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006988 <??zcl_level_server_handle_command_13>:
 8006988:	f05f 0905 	movs.w	r9, #5
 800698c:	f05f 0a00 	movs.w	sl, #0
 8006990:	f10d 0b0c 	add.w	fp, sp, #12
 8006994:	4652      	mov	r2, sl
 8006996:	4649      	mov	r1, r9
 8006998:	4658      	mov	r0, fp
 800699a:	f001 f9bd 	bl	8007d18 <__aeabi_memset>
 800699e:	79e8      	ldrb	r0, [r5, #7]
 80069a0:	2805      	cmp	r0, #5
 80069a2:	d102      	bne.n	80069aa <??zcl_level_server_handle_command_14>
 80069a4:	2001      	movs	r0, #1
 80069a6:	f88d 000c 	strb.w	r0, [sp, #12]

080069aa <??zcl_level_server_handle_command_14>:
 80069aa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069ac:	7800      	ldrb	r0, [r0, #0]
 80069ae:	f88d 000d 	strb.w	r0, [sp, #13]
 80069b2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069b4:	7840      	ldrb	r0, [r0, #1]
 80069b6:	f88d 000e 	strb.w	r0, [sp, #14]
 80069ba:	79e8      	ldrb	r0, [r5, #7]
 80069bc:	2801      	cmp	r0, #1
 80069be:	d116      	bne.n	80069ee <??zcl_level_server_handle_command_15>
 80069c0:	4640      	mov	r0, r8
 80069c2:	b280      	uxth	r0, r0
 80069c4:	2804      	cmp	r0, #4
 80069c6:	db07      	blt.n	80069d8 <??zcl_level_server_handle_command_16>
 80069c8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069ca:	7880      	ldrb	r0, [r0, #2]
 80069cc:	f88d 000f 	strb.w	r0, [sp, #15]
 80069d0:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80069d2:	78c0      	ldrb	r0, [r0, #3]
 80069d4:	f88d 0010 	strb.w	r0, [sp, #16]

080069d8 <??zcl_level_server_handle_command_16>:
 80069d8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80069dc:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80069e0:	0020      	movs	r0, r4
 80069e2:	f7ff fee9 	bl	80067b8 <zcl_level_options_cmd_allow>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d101      	bne.n	80069ee <??zcl_level_server_handle_command_15>
 80069ea:	2070      	movs	r0, #112	@ 0x70
 80069ec:	e08b      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080069ee <??zcl_level_server_handle_command_15>:
 80069ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80069f0:	aa08      	add	r2, sp, #32
 80069f2:	a903      	add	r1, sp, #12
 80069f4:	0020      	movs	r0, r4
 80069f6:	f8d7 c074 	ldr.w	ip, [r7, #116]	@ 0x74
 80069fa:	47e0      	blx	ip
 80069fc:	e083      	b.n	8006b06 <??zcl_level_server_handle_command_1>

080069fe <??zcl_level_server_handle_command_3>:
 80069fe:	4640      	mov	r0, r8
 8006a00:	b280      	uxth	r0, r0
 8006a02:	2804      	cmp	r0, #4
 8006a04:	da01      	bge.n	8006a0a <??zcl_level_server_handle_command_17>
 8006a06:	2080      	movs	r0, #128	@ 0x80
 8006a08:	e07d      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a0a <??zcl_level_server_handle_command_17>:
 8006a0a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d101      	bne.n	8006a14 <??zcl_level_server_handle_command_18>
 8006a10:	2081      	movs	r0, #129	@ 0x81
 8006a12:	e078      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a14 <??zcl_level_server_handle_command_18>:
 8006a14:	f05f 0908 	movs.w	r9, #8
 8006a18:	f05f 0a00 	movs.w	sl, #0
 8006a1c:	f10d 0b04 	add.w	fp, sp, #4
 8006a20:	4652      	mov	r2, sl
 8006a22:	4649      	mov	r1, r9
 8006a24:	4658      	mov	r0, fp
 8006a26:	f001 f977 	bl	8007d18 <__aeabi_memset>
 8006a2a:	79e8      	ldrb	r0, [r5, #7]
 8006a2c:	2806      	cmp	r0, #6
 8006a2e:	d102      	bne.n	8006a36 <??zcl_level_server_handle_command_19>
 8006a30:	2001      	movs	r0, #1
 8006a32:	f88d 0004 	strb.w	r0, [sp, #4]

08006a36 <??zcl_level_server_handle_command_19>:
 8006a36:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a38:	7800      	ldrb	r0, [r0, #0]
 8006a3a:	f88d 0005 	strb.w	r0, [sp, #5]
 8006a3e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a40:	7840      	ldrb	r0, [r0, #1]
 8006a42:	f88d 0006 	strb.w	r0, [sp, #6]
 8006a46:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a48:	1c80      	adds	r0, r0, #2
 8006a4a:	f000 fb3a 	bl	80070c2 <pletoh16>
 8006a4e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8006a52:	79e8      	ldrb	r0, [r5, #7]
 8006a54:	2802      	cmp	r0, #2
 8006a56:	d116      	bne.n	8006a86 <??zcl_level_server_handle_command_20>
 8006a58:	4640      	mov	r0, r8
 8006a5a:	b280      	uxth	r0, r0
 8006a5c:	2806      	cmp	r0, #6
 8006a5e:	db07      	blt.n	8006a70 <??zcl_level_server_handle_command_21>
 8006a60:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a62:	7900      	ldrb	r0, [r0, #4]
 8006a64:	f88d 000a 	strb.w	r0, [sp, #10]
 8006a68:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006a6a:	7940      	ldrb	r0, [r0, #5]
 8006a6c:	f88d 000b 	strb.w	r0, [sp, #11]

08006a70 <??zcl_level_server_handle_command_21>:
 8006a70:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8006a74:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8006a78:	0020      	movs	r0, r4
 8006a7a:	f7ff fe9d 	bl	80067b8 <zcl_level_options_cmd_allow>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d101      	bne.n	8006a86 <??zcl_level_server_handle_command_20>
 8006a82:	2070      	movs	r0, #112	@ 0x70
 8006a84:	e03f      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a86 <??zcl_level_server_handle_command_20>:
 8006a86:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006a88:	aa08      	add	r2, sp, #32
 8006a8a:	a901      	add	r1, sp, #4
 8006a8c:	0020      	movs	r0, r4
 8006a8e:	f8d7 c078 	ldr.w	ip, [r7, #120]	@ 0x78
 8006a92:	47e0      	blx	ip
 8006a94:	e037      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006a96 <??zcl_level_server_handle_command_5>:
 8006a96:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d101      	bne.n	8006aa0 <??zcl_level_server_handle_command_22>
 8006a9c:	2081      	movs	r0, #129	@ 0x81
 8006a9e:	e032      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006aa0 <??zcl_level_server_handle_command_22>:
 8006aa0:	f05f 0903 	movs.w	r9, #3
 8006aa4:	f05f 0a00 	movs.w	sl, #0
 8006aa8:	46eb      	mov	fp, sp
 8006aaa:	4652      	mov	r2, sl
 8006aac:	4649      	mov	r1, r9
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f001 f932 	bl	8007d18 <__aeabi_memset>
 8006ab4:	79e8      	ldrb	r0, [r5, #7]
 8006ab6:	2807      	cmp	r0, #7
 8006ab8:	d102      	bne.n	8006ac0 <??zcl_level_server_handle_command_23>
 8006aba:	2001      	movs	r0, #1
 8006abc:	f88d 0000 	strb.w	r0, [sp]

08006ac0 <??zcl_level_server_handle_command_23>:
 8006ac0:	79e8      	ldrb	r0, [r5, #7]
 8006ac2:	2803      	cmp	r0, #3
 8006ac4:	d116      	bne.n	8006af4 <??zcl_level_server_handle_command_24>
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	b280      	uxth	r0, r0
 8006aca:	2802      	cmp	r0, #2
 8006acc:	db07      	blt.n	8006ade <??zcl_level_server_handle_command_25>
 8006ace:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006ad0:	7800      	ldrb	r0, [r0, #0]
 8006ad2:	f88d 0001 	strb.w	r0, [sp, #1]
 8006ad6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006ad8:	7840      	ldrb	r0, [r0, #1]
 8006ada:	f88d 0002 	strb.w	r0, [sp, #2]

08006ade <??zcl_level_server_handle_command_25>:
 8006ade:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006ae2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8006ae6:	0020      	movs	r0, r4
 8006ae8:	f7ff fe66 	bl	80067b8 <zcl_level_options_cmd_allow>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d101      	bne.n	8006af4 <??zcl_level_server_handle_command_24>
 8006af0:	2070      	movs	r0, #112	@ 0x70
 8006af2:	e008      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006af4 <??zcl_level_server_handle_command_24>:
 8006af4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006af6:	aa08      	add	r2, sp, #32
 8006af8:	4669      	mov	r1, sp
 8006afa:	0020      	movs	r0, r4
 8006afc:	f8d7 c07c 	ldr.w	ip, [r7, #124]	@ 0x7c
 8006b00:	47e0      	blx	ip
 8006b02:	e000      	b.n	8006b06 <??zcl_level_server_handle_command_1>

08006b04 <??zcl_level_server_handle_command_6>:
 8006b04:	2081      	movs	r0, #129	@ 0x81

08006b06 <??zcl_level_server_handle_command_1>:
 8006b06:	b00f      	add	sp, #60	@ 0x3c
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b0c <ZbZclOnOffServerAlloc>:
 8006b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	0006      	movs	r6, r0
 8006b12:	000f      	movs	r7, r1
 8006b14:	0014      	movs	r4, r2
 8006b16:	4698      	mov	r8, r3
 8006b18:	2000      	movs	r0, #0
 8006b1a:	9000      	str	r0, [sp, #0]
 8006b1c:	003b      	movs	r3, r7
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2206      	movs	r2, #6
 8006b22:	2180      	movs	r1, #128	@ 0x80
 8006b24:	0030      	movs	r0, r6
 8006b26:	f7fd f938 	bl	8003d9a <ZbZclClusterAlloc>
 8006b2a:	0005      	movs	r5, r0
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	d101      	bne.n	8006b34 <??ZbZclOnOffServerAlloc_0>
 8006b30:	2000      	movs	r0, #0
 8006b32:	e041      	b.n	8006bb8 <??ZbZclOnOffServerAlloc_1>

08006b34 <??ZbZclOnOffServerAlloc_0>:
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d00a      	beq.n	8006b4e <??ZbZclOnOffServerAlloc_2>
 8006b38:	f05f 090c 	movs.w	r9, #12
 8006b3c:	46a2      	mov	sl, r4
 8006b3e:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8006b42:	464a      	mov	r2, r9
 8006b44:	4651      	mov	r1, sl
 8006b46:	4658      	mov	r0, fp
 8006b48:	f010 fb7d 	bl	8017246 <__aeabi_memcpy>
 8006b4c:	e00a      	b.n	8006b64 <??ZbZclOnOffServerAlloc_3>

08006b4e <??ZbZclOnOffServerAlloc_2>:
 8006b4e:	f05f 090c 	movs.w	r9, #12
 8006b52:	f05f 0a00 	movs.w	sl, #0
 8006b56:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f001 f8da 	bl	8007d18 <__aeabi_memset>

08006b64 <??ZbZclOnOffServerAlloc_3>:
 8006b64:	2201      	movs	r2, #1
 8006b66:	2300      	movs	r3, #0
 8006b68:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006b6c:	0028      	movs	r0, r5
 8006b6e:	f7fa ff78 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006b72:	f20f 004d 	addw	r0, pc, #77	@ 0x4d
 8006b76:	6628      	str	r0, [r5, #96]	@ 0x60
 8006b78:	f20f 0089 	addw	r0, pc, #137	@ 0x89
 8006b7c:	6668      	str	r0, [r5, #100]	@ 0x64
 8006b7e:	f20f 00c1 	addw	r0, pc, #193	@ 0xc1
 8006b82:	65a8      	str	r0, [r5, #88]	@ 0x58
 8006b84:	2201      	movs	r2, #1
 8006b86:	490d      	ldr	r1, [pc, #52]	@ (8006bbc <??DataTable0>)
 8006b88:	0028      	movs	r0, r5
 8006b8a:	f7fb f881 	bl	8001c90 <ZbZclAttrAppendList>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d004      	beq.n	8006b9c <??ZbZclOnOffServerAlloc_4>
 8006b92:	0028      	movs	r0, r5
 8006b94:	f7fd f9c3 	bl	8003f1e <ZbZclClusterFree>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e00d      	b.n	8006bb8 <??ZbZclOnOffServerAlloc_1>

08006b9c <??ZbZclOnOffServerAlloc_4>:
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	0028      	movs	r0, r5
 8006ba4:	f7fa ff5d 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006ba8:	4641      	mov	r1, r8
 8006baa:	0028      	movs	r0, r5
 8006bac:	f7fc ff68 	bl	8003a80 <ZbZclClusterSetCallbackArg>
 8006bb0:	0028      	movs	r0, r5
 8006bb2:	f7fd f982 	bl	8003eba <ZbZclClusterAttach>
 8006bb6:	0028      	movs	r0, r5

08006bb8 <??ZbZclOnOffServerAlloc_1>:
 8006bb8:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bbc <??DataTable0>:
 8006bbc:	98e0 0801                                   ....

08006bc0 <onOffServerGetSceneData>:
 8006bc0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8006bc2:	0004      	movs	r4, r0
 8006bc4:	000d      	movs	r5, r1
 8006bc6:	0016      	movs	r6, r2
 8006bc8:	2703      	movs	r7, #3
 8006bca:	2000      	movs	r0, #0
 8006bcc:	9001      	str	r0, [sp, #4]
 8006bce:	2001      	movs	r0, #1
 8006bd0:	9000      	str	r0, [sp, #0]
 8006bd2:	ab02      	add	r3, sp, #8
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	0020      	movs	r0, r4
 8006bda:	f7f9 fc04 	bl	80003e6 <ZbZclAttrRead>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d001      	beq.n	8006be6 <??onOffServerGetSceneData_0>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e00d      	b.n	8006c02 <??onOffServerGetSceneData_1>

08006be6 <??onOffServerGetSceneData_0>:
 8006be6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006bea:	0039      	movs	r1, r7
 8006bec:	b2c9      	uxtb	r1, r1
 8006bee:	5468      	strb	r0, [r5, r1]
 8006bf0:	1c7f      	adds	r7, r7, #1
 8006bf2:	89a1      	ldrh	r1, [r4, #12]
 8006bf4:	0028      	movs	r0, r5
 8006bf6:	f000 fab0 	bl	800715a <putle16>
 8006bfa:	1ef8      	subs	r0, r7, #3
 8006bfc:	70a8      	strb	r0, [r5, #2]
 8006bfe:	0038      	movs	r0, r7
 8006c00:	b2c0      	uxtb	r0, r0

08006c02 <??onOffServerGetSceneData_1>:
 8006c02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08006c04 <onOffServerSetSceneData>:
 8006c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c08:	0007      	movs	r7, r0
 8006c0a:	000c      	movs	r4, r1
 8006c0c:	0015      	movs	r5, r2
 8006c0e:	001e      	movs	r6, r3
 8006c10:	0028      	movs	r0, r5
 8006c12:	b2c0      	uxtb	r0, r0
 8006c14:	2801      	cmp	r0, #1
 8006c16:	d001      	beq.n	8006c1c <??onOffServerSetSceneData_0>
 8006c18:	2087      	movs	r0, #135	@ 0x87
 8006c1a:	e00f      	b.n	8006c3c <??onOffServerSetSceneData_1>

08006c1c <??onOffServerSetSceneData_0>:
 8006c1c:	7820      	ldrb	r0, [r4, #0]
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d002      	beq.n	8006c28 <??onOffServerSetSceneData_2>
 8006c22:	f05f 0801 	movs.w	r8, #1
 8006c26:	e001      	b.n	8006c2c <??onOffServerSetSceneData_3>

08006c28 <??onOffServerSetSceneData_2>:
 8006c28:	f05f 0800 	movs.w	r8, #0

08006c2c <??onOffServerSetSceneData_3>:
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	2300      	movs	r3, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	0038      	movs	r0, r7
 8006c36:	f7fa ff14 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006c3a:	2000      	movs	r0, #0

08006c3c <??onOffServerSetSceneData_1>:
 8006c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c40 <onOffServerCommand>:
 8006c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	b08a      	sub	sp, #40	@ 0x28
 8006c46:	4680      	mov	r8, r0
 8006c48:	000c      	movs	r4, r1
 8006c4a:	0015      	movs	r5, r2
 8006c4c:	4646      	mov	r6, r8
 8006c4e:	27ff      	movs	r7, #255	@ 0xff
 8006c50:	f05f 0918 	movs.w	r9, #24
 8006c54:	f05f 0a00 	movs.w	sl, #0
 8006c58:	f10d 0b10 	add.w	fp, sp, #16
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4658      	mov	r0, fp
 8006c62:	f001 f859 	bl	8007d18 <__aeabi_memset>
 8006c66:	a804      	add	r0, sp, #16
 8006c68:	f115 0110 	adds.w	r1, r5, #16
 8006c6c:	2210      	movs	r2, #16
 8006c6e:	f010 faea 	bl	8017246 <__aeabi_memcpy>
 8006c72:	79a0      	ldrb	r0, [r4, #6]
 8006c74:	f88d 0020 	strb.w	r0, [sp, #32]
 8006c78:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8006c7c:	f7fc fff5 	bl	8003c6a <ZbZclTxOptsFromSecurityStatus>
 8006c80:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8006c84:	79e0      	ldrb	r0, [r4, #7]
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d003      	beq.n	8006c92 <??onOffServerCommand_0>
 8006c8a:	2802      	cmp	r0, #2
 8006c8c:	d025      	beq.n	8006cda <??onOffServerCommand_1>
 8006c8e:	d312      	bcc.n	8006cb6 <??onOffServerCommand_2>
 8006c90:	e050      	b.n	8006d34 <??onOffServerCommand_3>

08006c92 <??onOffServerCommand_0>:
 8006c92:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d007      	beq.n	8006ca8 <??onOffServerCommand_4>
 8006c98:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8006c9c:	a904      	add	r1, sp, #16
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 8006ca2:	4798      	blx	r3
 8006ca4:	0007      	movs	r7, r0
 8006ca6:	e005      	b.n	8006cb4 <??onOffServerCommand_5>

08006ca8 <??onOffServerCommand_4>:
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7fa fed7 	bl	8001a62 <ZbZclAttrIntegerWrite>

08006cb4 <??onOffServerCommand_5>:
 8006cb4:	e040      	b.n	8006d38 <??onOffServerCommand_6>

08006cb6 <??onOffServerCommand_2>:
 8006cb6:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d007      	beq.n	8006ccc <??onOffServerCommand_7>
 8006cbc:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8006cc0:	a904      	add	r1, sp, #16
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8006cc6:	4798      	blx	r3
 8006cc8:	0007      	movs	r7, r0
 8006cca:	e005      	b.n	8006cd8 <??onOffServerCommand_8>

08006ccc <??onOffServerCommand_7>:
 8006ccc:	2201      	movs	r2, #1
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f7fa fec5 	bl	8001a62 <ZbZclAttrIntegerWrite>

08006cd8 <??onOffServerCommand_8>:
 8006cd8:	e02e      	b.n	8006d38 <??onOffServerCommand_6>

08006cda <??onOffServerCommand_1>:
 8006cda:	6f70      	ldr	r0, [r6, #116]	@ 0x74
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d007      	beq.n	8006cf0 <??onOffServerCommand_9>
 8006ce0:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006cea:	4798      	blx	r3
 8006cec:	0007      	movs	r7, r0
 8006cee:	e020      	b.n	8006d32 <??onOffServerCommand_10>

08006cf0 <??onOffServerCommand_9>:
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	9001      	str	r0, [sp, #4]
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	9000      	str	r0, [sp, #0]
 8006cf8:	ab02      	add	r3, sp, #8
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	f7f9 fb71 	bl	80003e6 <ZbZclAttrRead>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d002      	beq.n	8006d0e <??onOffServerCommand_11>
 8006d08:	2086      	movs	r0, #134	@ 0x86
 8006d0a:	0007      	movs	r7, r0
 8006d0c:	e014      	b.n	8006d38 <??onOffServerCommand_6>

08006d0e <??onOffServerCommand_11>:
 8006d0e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d003      	beq.n	8006d1e <??onOffServerCommand_12>
 8006d16:	2000      	movs	r0, #0
 8006d18:	f88d 0008 	strb.w	r0, [sp, #8]
 8006d1c:	e002      	b.n	8006d24 <??onOffServerCommand_13>

08006d1e <??onOffServerCommand_12>:
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f88d 0008 	strb.w	r0, [sp, #8]

08006d24 <??onOffServerCommand_13>:
 8006d24:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	f7fa fe98 	bl	8001a62 <ZbZclAttrIntegerWrite>

08006d32 <??onOffServerCommand_10>:
 8006d32:	e001      	b.n	8006d38 <??onOffServerCommand_6>

08006d34 <??onOffServerCommand_3>:
 8006d34:	2081      	movs	r0, #129	@ 0x81
 8006d36:	0007      	movs	r7, r0

08006d38 <??onOffServerCommand_6>:
 8006d38:	0038      	movs	r0, r7
 8006d3a:	b2c0      	uxtb	r0, r0
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d106      	bne.n	8006d4e <??onOffServerCommand_14>
 8006d40:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d003      	beq.n	8006d4e <??onOffServerCommand_14>
 8006d46:	79e1      	ldrb	r1, [r4, #7]
 8006d48:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 8006d4a:	6ff2      	ldr	r2, [r6, #124]	@ 0x7c
 8006d4c:	4790      	blx	r2

08006d4e <??onOffServerCommand_14>:
 8006d4e:	0038      	movs	r0, r7
 8006d50:	b2c0      	uxtb	r0, r0
 8006d52:	b00b      	add	sp, #44	@ 0x2c
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d58 <ZbZclOnOffServerSetLevelControlCallback>:
 8006d58:	0003      	movs	r3, r0
 8006d5a:	6799      	str	r1, [r3, #120]	@ 0x78
 8006d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006d5e:	4770      	bx	lr

08006d60 <zcl_attr_cb>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	0004      	movs	r4, r0
 8006d66:	000d      	movs	r5, r1
 8006d68:	7928      	ldrb	r0, [r5, #4]
 8006d6a:	2801      	cmp	r0, #1
 8006d6c:	d10f      	bne.n	8006d8e <??zcl_attr_cb_0>
 8006d6e:	69e8      	ldr	r0, [r5, #28]
 8006d70:	9003      	str	r0, [sp, #12]
 8006d72:	8a28      	ldrh	r0, [r5, #16]
 8006d74:	9002      	str	r0, [sp, #8]
 8006d76:	6968      	ldr	r0, [r5, #20]
 8006d78:	9001      	str	r0, [sp, #4]
 8006d7a:	68e8      	ldr	r0, [r5, #12]
 8006d7c:	9000      	str	r0, [sp, #0]
 8006d7e:	68ab      	ldr	r3, [r5, #8]
 8006d80:	6828      	ldr	r0, [r5, #0]
 8006d82:	8802      	ldrh	r2, [r0, #0]
 8006d84:	69a9      	ldr	r1, [r5, #24]
 8006d86:	0020      	movs	r0, r4
 8006d88:	f000 f882 	bl	8006e90 <zcl_attr_write_cb>
 8006d8c:	e000      	b.n	8006d90 <??zcl_attr_cb_1>

08006d8e <??zcl_attr_cb_0>:
 8006d8e:	2001      	movs	r0, #1

08006d90 <??zcl_attr_cb_1>:
 8006d90:	b005      	add	sp, #20
 8006d92:	bd30      	pop	{r4, r5, pc}

08006d94 <ZbZclTempMeasServerAlloc>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	4681      	mov	r9, r0
 8006d9a:	000e      	movs	r6, r1
 8006d9c:	0017      	movs	r7, r2
 8006d9e:	4698      	mov	r8, r3
 8006da0:	9d08      	ldr	r5, [sp, #32]
 8006da2:	2000      	movs	r0, #0
 8006da4:	9000      	str	r0, [sp, #0]
 8006da6:	0033      	movs	r3, r6
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f240 4202 	movw	r2, #1026	@ 0x402
 8006dae:	2180      	movs	r1, #128	@ 0x80
 8006db0:	4648      	mov	r0, r9
 8006db2:	f7fc fff2 	bl	8003d9a <ZbZclClusterAlloc>
 8006db6:	0004      	movs	r4, r0
 8006db8:	2c00      	cmp	r4, #0
 8006dba:	d101      	bne.n	8006dc0 <??ZbZclTempMeasServerAlloc_0>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e03a      	b.n	8006e36 <??ZbZclTempMeasServerAlloc_1>

08006dc0 <??ZbZclTempMeasServerAlloc_0>:
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006dc8:	0020      	movs	r0, r4
 8006dca:	f7fa fe4a 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006dce:	0038      	movs	r0, r7
 8006dd0:	b200      	sxth	r0, r0
 8006dd2:	17c1      	asrs	r1, r0, #31
 8006dd4:	e9c4 011c 	strd	r0, r1, [r4, #112]	@ 0x70
 8006dd8:	f8a4 8078 	strh.w	r8, [r4, #120]	@ 0x78
 8006ddc:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8006de0:	2204      	movs	r2, #4
 8006de2:	4929      	ldr	r1, [pc, #164]	@ (8006e88 <??DataTable2>)
 8006de4:	0020      	movs	r0, r4
 8006de6:	f7fa ff53 	bl	8001c90 <ZbZclAttrAppendList>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d004      	beq.n	8006df8 <??ZbZclTempMeasServerAlloc_2>
 8006dee:	0020      	movs	r0, r4
 8006df0:	f7fd f895 	bl	8003f1e <ZbZclClusterFree>
 8006df4:	2000      	movs	r0, #0
 8006df6:	e01e      	b.n	8006e36 <??ZbZclTempMeasServerAlloc_1>

08006df8 <??ZbZclTempMeasServerAlloc_2>:
 8006df8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	0020      	movs	r0, r4
 8006e02:	f7fa fe2e 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e06:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	0020      	movs	r0, r4
 8006e0e:	f7fa fe28 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e12:	f9b4 2078 	ldrsh.w	r2, [r4, #120]	@ 0x78
 8006e16:	17d3      	asrs	r3, r2, #31
 8006e18:	2102      	movs	r1, #2
 8006e1a:	0020      	movs	r0, r4
 8006e1c:	f7fa fe21 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e20:	f8b4 207a 	ldrh.w	r2, [r4, #122]	@ 0x7a
 8006e24:	2300      	movs	r3, #0
 8006e26:	2103      	movs	r1, #3
 8006e28:	0020      	movs	r0, r4
 8006e2a:	f7fa fe1a 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006e2e:	0020      	movs	r0, r4
 8006e30:	f7fd f843 	bl	8003eba <ZbZclClusterAttach>
 8006e34:	0020      	movs	r0, r4

08006e36 <??ZbZclTempMeasServerAlloc_1>:
 8006e36:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08006e3a <zcl_meas_temp_server_range_check>:
 8006e3a:	b410      	push	{r4}
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	0018      	movs	r0, r3
 8006e40:	4c12      	ldr	r4, [pc, #72]	@ (8006e8c <??DataTable2_1>)
 8006e42:	b200      	sxth	r0, r0
 8006e44:	42a0      	cmp	r0, r4
 8006e46:	d101      	bne.n	8006e4c <??zcl_meas_temp_server_range_check_0>
 8006e48:	2001      	movs	r0, #1
 8006e4a:	e01a      	b.n	8006e82 <??zcl_meas_temp_server_range_check_1>

08006e4c <??zcl_meas_temp_server_range_check_0>:
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	000c      	movs	r4, r1
 8006e50:	b200      	sxth	r0, r0
 8006e52:	b224      	sxth	r4, r4
 8006e54:	42a0      	cmp	r0, r4
 8006e56:	da06      	bge.n	8006e66 <??zcl_meas_temp_server_range_check_2>
 8006e58:	0008      	movs	r0, r1
 8006e5a:	b200      	sxth	r0, r0
 8006e5c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8006e60:	d001      	beq.n	8006e66 <??zcl_meas_temp_server_range_check_2>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e00d      	b.n	8006e82 <??zcl_meas_temp_server_range_check_1>

08006e66 <??zcl_meas_temp_server_range_check_2>:
 8006e66:	0010      	movs	r0, r2
 8006e68:	001c      	movs	r4, r3
 8006e6a:	b200      	sxth	r0, r0
 8006e6c:	b224      	sxth	r4, r4
 8006e6e:	42a0      	cmp	r0, r4
 8006e70:	da06      	bge.n	8006e80 <??zcl_meas_temp_server_range_check_3>
 8006e72:	0010      	movs	r0, r2
 8006e74:	b200      	sxth	r0, r0
 8006e76:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8006e7a:	d001      	beq.n	8006e80 <??zcl_meas_temp_server_range_check_3>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e000      	b.n	8006e82 <??zcl_meas_temp_server_range_check_1>

08006e80 <??zcl_meas_temp_server_range_check_3>:
 8006e80:	2001      	movs	r0, #1

08006e82 <??zcl_meas_temp_server_range_check_1>:
 8006e82:	bc10      	pop	{r4}
 8006e84:	4770      	bx	lr
	...

08006e88 <??DataTable2>:
 8006e88:	9908 0801                                   ....

08006e8c <??DataTable2_1>:
 8006e8c:	8000 ffff                                   ....

08006e90 <zcl_attr_write_cb>:
 8006e90:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	b081      	sub	sp, #4
 8006e96:	0005      	movs	r5, r0
 8006e98:	0016      	movs	r6, r2
 8006e9a:	001f      	movs	r7, r3
 8006e9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8006ea0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8006ea2:	0030      	movs	r0, r6
 8006ea4:	b280      	uxth	r0, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d125      	bne.n	8006ef6 <??zcl_attr_write_cb_0>
 8006eaa:	0038      	movs	r0, r7
 8006eac:	f000 f909 	bl	80070c2 <pletoh16>
 8006eb0:	4681      	mov	r9, r0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	0028      	movs	r0, r5
 8006eba:	f7fa fd85 	bl	80019c8 <ZbZclAttrIntegerRead>
 8006ebe:	f8ad 0000 	strh.w	r0, [sp]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	0028      	movs	r0, r5
 8006eca:	f7fa fd7d 	bl	80019c8 <ZbZclAttrIntegerRead>
 8006ece:	4682      	mov	sl, r0
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	b212      	sxth	r2, r2
 8006ed4:	f9bd 1000 	ldrsh.w	r1, [sp]
 8006ed8:	4648      	mov	r0, r9
 8006eda:	b200      	sxth	r0, r0
 8006edc:	f7ff ffad 	bl	8006e3a <zcl_meas_temp_server_range_check>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d101      	bne.n	8006ee8 <??zcl_attr_write_cb_1>
 8006ee4:	2087      	movs	r0, #135	@ 0x87
 8006ee6:	e012      	b.n	8006f0e <??zcl_attr_write_cb_2>

08006ee8 <??zcl_attr_write_cb_1>:
 8006ee8:	f05f 0b02 	movs.w	fp, #2
 8006eec:	0020      	movs	r0, r4
 8006eee:	b280      	uxth	r0, r0
 8006ef0:	07c0      	lsls	r0, r0, #31
 8006ef2:	d40b      	bmi.n	8006f0c <??zcl_attr_write_cb_3>
 8006ef4:	e001      	b.n	8006efa <??zcl_attr_write_cb_4>

08006ef6 <??zcl_attr_write_cb_0>:
 8006ef6:	2086      	movs	r0, #134	@ 0x86
 8006ef8:	e009      	b.n	8006f0e <??zcl_attr_write_cb_2>

08006efa <??zcl_attr_write_cb_4>:
 8006efa:	f8cd b000 	str.w	fp, [sp]
 8006efe:	46b9      	mov	r9, r7
 8006f00:	46c2      	mov	sl, r8
 8006f02:	9a00      	ldr	r2, [sp, #0]
 8006f04:	4649      	mov	r1, r9
 8006f06:	4650      	mov	r0, sl
 8006f08:	f010 f99d 	bl	8017246 <__aeabi_memcpy>

08006f0c <??zcl_attr_write_cb_3>:
 8006f0c:	2000      	movs	r0, #0

08006f0e <??zcl_attr_write_cb_2>:
 8006f0e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006f14 <zcl_attr_cb>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	0004      	movs	r4, r0
 8006f1a:	000d      	movs	r5, r1
 8006f1c:	7928      	ldrb	r0, [r5, #4]
 8006f1e:	2801      	cmp	r0, #1
 8006f20:	d10f      	bne.n	8006f42 <??zcl_attr_cb_0>
 8006f22:	69e8      	ldr	r0, [r5, #28]
 8006f24:	9003      	str	r0, [sp, #12]
 8006f26:	8a28      	ldrh	r0, [r5, #16]
 8006f28:	9002      	str	r0, [sp, #8]
 8006f2a:	6968      	ldr	r0, [r5, #20]
 8006f2c:	9001      	str	r0, [sp, #4]
 8006f2e:	68e8      	ldr	r0, [r5, #12]
 8006f30:	9000      	str	r0, [sp, #0]
 8006f32:	68ab      	ldr	r3, [r5, #8]
 8006f34:	6828      	ldr	r0, [r5, #0]
 8006f36:	8802      	ldrh	r2, [r0, #0]
 8006f38:	69a9      	ldr	r1, [r5, #24]
 8006f3a:	0020      	movs	r0, r4
 8006f3c:	f000 f862 	bl	8007004 <zcl_attr_write_cb>
 8006f40:	e000      	b.n	8006f44 <??zcl_attr_cb_1>

08006f42 <??zcl_attr_cb_0>:
 8006f42:	2001      	movs	r0, #1

08006f44 <??zcl_attr_cb_1>:
 8006f44:	b005      	add	sp, #20
 8006f46:	bd30      	pop	{r4, r5, pc}

08006f48 <ZbZclWaterContentMeasServerAlloc>:
 8006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	0006      	movs	r6, r0
 8006f4e:	000f      	movs	r7, r1
 8006f50:	4690      	mov	r8, r2
 8006f52:	4699      	mov	r9, r3
 8006f54:	9d08      	ldr	r5, [sp, #32]
 8006f56:	4640      	mov	r0, r8
 8006f58:	b280      	uxth	r0, r0
 8006f5a:	f240 4105 	movw	r1, #1029	@ 0x405
 8006f5e:	4288      	cmp	r0, r1
 8006f60:	d00c      	beq.n	8006f7c <??ZbZclWaterContentMeasServerAlloc_0>
 8006f62:	4640      	mov	r0, r8
 8006f64:	b280      	uxth	r0, r0
 8006f66:	f240 4107 	movw	r1, #1031	@ 0x407
 8006f6a:	4288      	cmp	r0, r1
 8006f6c:	d006      	beq.n	8006f7c <??ZbZclWaterContentMeasServerAlloc_0>
 8006f6e:	4640      	mov	r0, r8
 8006f70:	b280      	uxth	r0, r0
 8006f72:	f5b0 6f81 	cmp.w	r0, #1032	@ 0x408
 8006f76:	d001      	beq.n	8006f7c <??ZbZclWaterContentMeasServerAlloc_0>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e03e      	b.n	8006ffa <??ZbZclWaterContentMeasServerAlloc_1>

08006f7c <??ZbZclWaterContentMeasServerAlloc_0>:
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	9000      	str	r0, [sp, #0]
 8006f80:	003b      	movs	r3, r7
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	4642      	mov	r2, r8
 8006f86:	b292      	uxth	r2, r2
 8006f88:	2170      	movs	r1, #112	@ 0x70
 8006f8a:	0030      	movs	r0, r6
 8006f8c:	f7fc ff05 	bl	8003d9a <ZbZclClusterAlloc>
 8006f90:	0004      	movs	r4, r0
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	d101      	bne.n	8006f9a <??ZbZclWaterContentMeasServerAlloc_2>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e02f      	b.n	8006ffa <??ZbZclWaterContentMeasServerAlloc_1>

08006f9a <??ZbZclWaterContentMeasServerAlloc_2>:
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8006fa2:	0020      	movs	r0, r4
 8006fa4:	f7fa fd5d 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006fa8:	f8a4 906c 	strh.w	r9, [r4, #108]	@ 0x6c
 8006fac:	f8a4 506e 	strh.w	r5, [r4, #110]	@ 0x6e
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	4913      	ldr	r1, [pc, #76]	@ (8007000 <??DataTable1>)
 8006fb4:	0020      	movs	r0, r4
 8006fb6:	f7fa fe6b 	bl	8001c90 <ZbZclAttrAppendList>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d004      	beq.n	8006fc8 <??ZbZclWaterContentMeasServerAlloc_3>
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	f7fc ffad 	bl	8003f1e <ZbZclClusterFree>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	e018      	b.n	8006ffa <??ZbZclWaterContentMeasServerAlloc_1>

08006fc8 <??ZbZclWaterContentMeasServerAlloc_3>:
 8006fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	0020      	movs	r0, r4
 8006fd2:	f7fa fd46 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006fd6:	f8b4 206c 	ldrh.w	r2, [r4, #108]	@ 0x6c
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2101      	movs	r1, #1
 8006fde:	0020      	movs	r0, r4
 8006fe0:	f7fa fd3f 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006fe4:	f8b4 206e 	ldrh.w	r2, [r4, #110]	@ 0x6e
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2102      	movs	r1, #2
 8006fec:	0020      	movs	r0, r4
 8006fee:	f7fa fd38 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	f7fc ff61 	bl	8003eba <ZbZclClusterAttach>
 8006ff8:	0020      	movs	r0, r4

08006ffa <??ZbZclWaterContentMeasServerAlloc_1>:
 8006ffa:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08007000 <??DataTable1>:
 8007000:	99a8 0801                                   ....

08007004 <zcl_attr_write_cb>:
 8007004:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	b083      	sub	sp, #12
 800700a:	0005      	movs	r5, r0
 800700c:	001e      	movs	r6, r3
 800700e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8007010:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007012:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8007016:	2800      	cmp	r0, #0
 8007018:	d136      	bne.n	8007088 <??zcl_attr_write_cb_0>
 800701a:	0030      	movs	r0, r6
 800701c:	f000 f851 	bl	80070c2 <pletoh16>
 8007020:	4680      	mov	r8, r0
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	2101      	movs	r1, #1
 8007028:	0028      	movs	r0, r5
 800702a:	f7fa fccd 	bl	80019c8 <ZbZclAttrIntegerRead>
 800702e:	f8ad 0000 	strh.w	r0, [sp]
 8007032:	2300      	movs	r3, #0
 8007034:	2200      	movs	r2, #0
 8007036:	2102      	movs	r1, #2
 8007038:	0028      	movs	r0, r5
 800703a:	f7fa fcc5 	bl	80019c8 <ZbZclAttrIntegerRead>
 800703e:	4681      	mov	r9, r0
 8007040:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007044:	f8bd 1000 	ldrh.w	r1, [sp]
 8007048:	4281      	cmp	r1, r0
 800704a:	d016      	beq.n	800707a <??zcl_attr_write_cb_1>
 800704c:	4649      	mov	r1, r9
 800704e:	0002      	movs	r2, r0
 8007050:	b289      	uxth	r1, r1
 8007052:	4291      	cmp	r1, r2
 8007054:	d011      	beq.n	800707a <??zcl_attr_write_cb_1>
 8007056:	4641      	mov	r1, r8
 8007058:	f8bd 2000 	ldrh.w	r2, [sp]
 800705c:	b289      	uxth	r1, r1
 800705e:	4291      	cmp	r1, r2
 8007060:	d305      	bcc.n	800706e <??zcl_attr_write_cb_2>
 8007062:	4649      	mov	r1, r9
 8007064:	4642      	mov	r2, r8
 8007066:	b289      	uxth	r1, r1
 8007068:	b292      	uxth	r2, r2
 800706a:	4291      	cmp	r1, r2
 800706c:	d205      	bcs.n	800707a <??zcl_attr_write_cb_1>

0800706e <??zcl_attr_write_cb_2>:
 800706e:	4641      	mov	r1, r8
 8007070:	b289      	uxth	r1, r1
 8007072:	4281      	cmp	r1, r0
 8007074:	d001      	beq.n	800707a <??zcl_attr_write_cb_1>
 8007076:	2087      	movs	r0, #135	@ 0x87
 8007078:	e012      	b.n	80070a0 <??zcl_attr_write_cb_3>

0800707a <??zcl_attr_write_cb_1>:
 800707a:	f05f 0a02 	movs.w	sl, #2
 800707e:	0020      	movs	r0, r4
 8007080:	b280      	uxth	r0, r0
 8007082:	07c0      	lsls	r0, r0, #31
 8007084:	d40b      	bmi.n	800709e <??zcl_attr_write_cb_4>
 8007086:	e001      	b.n	800708c <??zcl_attr_write_cb_5>

08007088 <??zcl_attr_write_cb_0>:
 8007088:	2086      	movs	r0, #134	@ 0x86
 800708a:	e009      	b.n	80070a0 <??zcl_attr_write_cb_3>

0800708c <??zcl_attr_write_cb_5>:
 800708c:	f8cd a008 	str.w	sl, [sp, #8]
 8007090:	9601      	str	r6, [sp, #4]
 8007092:	46bb      	mov	fp, r7
 8007094:	9a02      	ldr	r2, [sp, #8]
 8007096:	9901      	ldr	r1, [sp, #4]
 8007098:	4658      	mov	r0, fp
 800709a:	f010 f8d4 	bl	8017246 <__aeabi_memcpy>

0800709e <??zcl_attr_write_cb_4>:
 800709e:	2000      	movs	r0, #0

080070a0 <??zcl_attr_write_cb_3>:
 80070a0:	b005      	add	sp, #20
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070a6 <is_little_endian>:
 80070a6:	b081      	sub	sp, #4
 80070a8:	2001      	movs	r0, #1
 80070aa:	f8ad 0000 	strh.w	r0, [sp]
 80070ae:	4668      	mov	r0, sp
 80070b0:	7800      	ldrb	r0, [r0, #0]
 80070b2:	2801      	cmp	r0, #1
 80070b4:	d101      	bne.n	80070ba <??is_little_endian_0>
 80070b6:	2001      	movs	r0, #1
 80070b8:	e000      	b.n	80070bc <??is_little_endian_1>

080070ba <??is_little_endian_0>:
 80070ba:	2000      	movs	r0, #0

080070bc <??is_little_endian_1>:
 80070bc:	b2c0      	uxtb	r0, r0
 80070be:	b001      	add	sp, #4
 80070c0:	4770      	bx	lr

080070c2 <pletoh16>:
 80070c2:	0001      	movs	r1, r0
 80070c4:	7808      	ldrb	r0, [r1, #0]
 80070c6:	7849      	ldrb	r1, [r1, #1]
 80070c8:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80070cc:	b280      	uxth	r0, r0
 80070ce:	4770      	bx	lr

080070d0 <pletoh24>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	0004      	movs	r4, r0
 80070d4:	0020      	movs	r0, r4
 80070d6:	f7ff fff4 	bl	80070c2 <pletoh16>
 80070da:	b280      	uxth	r0, r0
 80070dc:	78a1      	ldrb	r1, [r4, #2]
 80070de:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 80070e2:	bd10      	pop	{r4, pc}

080070e4 <pletoh32>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	0004      	movs	r4, r0
 80070e8:	0020      	movs	r0, r4
 80070ea:	f7ff ffea 	bl	80070c2 <pletoh16>
 80070ee:	0005      	movs	r5, r0
 80070f0:	b2ad      	uxth	r5, r5
 80070f2:	1ca0      	adds	r0, r4, #2
 80070f4:	f7ff ffe5 	bl	80070c2 <pletoh16>
 80070f8:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 80070fc:	0028      	movs	r0, r5
 80070fe:	bd32      	pop	{r1, r4, r5, pc}

08007100 <pletoh40>:
 8007100:	b510      	push	{r4, lr}
 8007102:	0004      	movs	r4, r0
 8007104:	0020      	movs	r0, r4
 8007106:	f7ff ffed 	bl	80070e4 <pletoh32>
 800710a:	7921      	ldrb	r1, [r4, #4]
 800710c:	bd10      	pop	{r4, pc}

0800710e <pletoh48>:
 800710e:	b510      	push	{r4, lr}
 8007110:	0004      	movs	r4, r0
 8007112:	0020      	movs	r0, r4
 8007114:	f7ff fff4 	bl	8007100 <pletoh40>
 8007118:	7962      	ldrb	r2, [r4, #5]
 800711a:	2300      	movs	r3, #0
 800711c:	0213      	lsls	r3, r2, #8
 800711e:	2200      	movs	r2, #0
 8007120:	4310      	orrs	r0, r2
 8007122:	4319      	orrs	r1, r3
 8007124:	bd10      	pop	{r4, pc}

08007126 <pletoh56>:
 8007126:	b510      	push	{r4, lr}
 8007128:	0004      	movs	r4, r0
 800712a:	0020      	movs	r0, r4
 800712c:	f7ff ffef 	bl	800710e <pletoh48>
 8007130:	79a2      	ldrb	r2, [r4, #6]
 8007132:	2300      	movs	r3, #0
 8007134:	0413      	lsls	r3, r2, #16
 8007136:	2200      	movs	r2, #0
 8007138:	4310      	orrs	r0, r2
 800713a:	4319      	orrs	r1, r3
 800713c:	bd10      	pop	{r4, pc}

0800713e <pletoh64>:
 800713e:	b538      	push	{r3, r4, r5, lr}
 8007140:	0005      	movs	r5, r0
 8007142:	0028      	movs	r0, r5
 8007144:	f7ff ffce 	bl	80070e4 <pletoh32>
 8007148:	0004      	movs	r4, r0
 800714a:	1d28      	adds	r0, r5, #4
 800714c:	f7ff ffca 	bl	80070e4 <pletoh32>
 8007150:	0003      	movs	r3, r0
 8007152:	0022      	movs	r2, r4
 8007154:	0010      	movs	r0, r2
 8007156:	0019      	movs	r1, r3
 8007158:	bd34      	pop	{r2, r4, r5, pc}

0800715a <putle16>:
 800715a:	7001      	strb	r1, [r0, #0]
 800715c:	000a      	movs	r2, r1
 800715e:	b292      	uxth	r2, r2
 8007160:	0a12      	lsrs	r2, r2, #8
 8007162:	7042      	strb	r2, [r0, #1]
 8007164:	4770      	bx	lr

08007166 <putle24>:
 8007166:	b538      	push	{r3, r4, r5, lr}
 8007168:	0004      	movs	r4, r0
 800716a:	000d      	movs	r5, r1
 800716c:	0029      	movs	r1, r5
 800716e:	b289      	uxth	r1, r1
 8007170:	0020      	movs	r0, r4
 8007172:	f7ff fff2 	bl	800715a <putle16>
 8007176:	0028      	movs	r0, r5
 8007178:	0c00      	lsrs	r0, r0, #16
 800717a:	70a0      	strb	r0, [r4, #2]
 800717c:	bd31      	pop	{r0, r4, r5, pc}

0800717e <putle32>:
 800717e:	b538      	push	{r3, r4, r5, lr}
 8007180:	0004      	movs	r4, r0
 8007182:	000d      	movs	r5, r1
 8007184:	0029      	movs	r1, r5
 8007186:	0020      	movs	r0, r4
 8007188:	f7ff ffed 	bl	8007166 <putle24>
 800718c:	0028      	movs	r0, r5
 800718e:	0e00      	lsrs	r0, r0, #24
 8007190:	70e0      	strb	r0, [r4, #3]
 8007192:	bd31      	pop	{r0, r4, r5, pc}

08007194 <putle40>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	0006      	movs	r6, r0
 8007198:	0014      	movs	r4, r2
 800719a:	001d      	movs	r5, r3
 800719c:	0021      	movs	r1, r4
 800719e:	0030      	movs	r0, r6
 80071a0:	f7ff ffed 	bl	800717e <putle32>
 80071a4:	7135      	strb	r5, [r6, #4]
 80071a6:	bd70      	pop	{r4, r5, r6, pc}

080071a8 <putle48>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	0006      	movs	r6, r0
 80071ac:	0014      	movs	r4, r2
 80071ae:	001d      	movs	r5, r3
 80071b0:	0022      	movs	r2, r4
 80071b2:	002b      	movs	r3, r5
 80071b4:	0030      	movs	r0, r6
 80071b6:	f7ff ffed 	bl	8007194 <putle40>
 80071ba:	0020      	movs	r0, r4
 80071bc:	0029      	movs	r1, r5
 80071be:	0a08      	lsrs	r0, r1, #8
 80071c0:	2100      	movs	r1, #0
 80071c2:	7170      	strb	r0, [r6, #5]
 80071c4:	bd70      	pop	{r4, r5, r6, pc}

080071c6 <putle56>:
 80071c6:	b570      	push	{r4, r5, r6, lr}
 80071c8:	0006      	movs	r6, r0
 80071ca:	0014      	movs	r4, r2
 80071cc:	001d      	movs	r5, r3
 80071ce:	0022      	movs	r2, r4
 80071d0:	002b      	movs	r3, r5
 80071d2:	0030      	movs	r0, r6
 80071d4:	f7ff ffe8 	bl	80071a8 <putle48>
 80071d8:	0020      	movs	r0, r4
 80071da:	0029      	movs	r1, r5
 80071dc:	0c08      	lsrs	r0, r1, #16
 80071de:	2100      	movs	r1, #0
 80071e0:	71b0      	strb	r0, [r6, #6]
 80071e2:	bd70      	pop	{r4, r5, r6, pc}

080071e4 <putle64>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	0006      	movs	r6, r0
 80071e8:	0014      	movs	r4, r2
 80071ea:	001d      	movs	r5, r3
 80071ec:	0022      	movs	r2, r4
 80071ee:	002b      	movs	r3, r5
 80071f0:	0030      	movs	r0, r6
 80071f2:	f7ff ffe8 	bl	80071c6 <putle56>
 80071f6:	0020      	movs	r0, r4
 80071f8:	0029      	movs	r1, r5
 80071fa:	0e08      	lsrs	r0, r1, #24
 80071fc:	2100      	movs	r1, #0
 80071fe:	71f0      	strb	r0, [r6, #7]
 8007200:	bd70      	pop	{r4, r5, r6, pc}
	...

08007204 <ZbZclAppendFloat>:
 8007204:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	b081      	sub	sp, #4
 800720a:	ed2d 8b04 	vpush	{d8-d9}
 800720e:	b084      	sub	sp, #16
 8007210:	eeb0 8a40 	vmov.f32	s16, s0
 8007214:	eef0 8a60 	vmov.f32	s17, s1
 8007218:	000e      	movs	r6, r1
 800721a:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800721e:	2838      	cmp	r0, #56	@ 0x38
 8007220:	d149      	bne.n	80072b6 <??ZbZclAppendFloat_0>
 8007222:	2400      	movs	r4, #0
 8007224:	2510      	movs	r5, #16
 8007226:	f07f 070e 	mvns.w	r7, #14
 800722a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800722c:	2802      	cmp	r0, #2
 800722e:	d202      	bcs.n	8007236 <??ZbZclAppendFloat_1>
 8007230:	f05f 30ff 	movs.w	r0, #4294967295
 8007234:	e120      	b.n	8007478 <??ZbZclAppendFloat_2>

08007236 <??ZbZclAppendFloat_1>:
 8007236:	003a      	movs	r2, r7
 8007238:	0029      	movs	r1, r5
 800723a:	4668      	mov	r0, sp
 800723c:	eeb0 0a48 	vmov.f32	s0, s16
 8007240:	eef0 0a68 	vmov.f32	s1, s17
 8007244:	f000 fb08 	bl	8007858 <ZbZclFloatFrexp>
 8007248:	eeb0 9a40 	vmov.f32	s18, s0
 800724c:	eef0 9a60 	vmov.f32	s19, s1
 8007250:	f8dd 8000 	ldr.w	r8, [sp]
 8007254:	ebb8 0807 	subs.w	r8, r8, r7
 8007258:	ea5f 2888 	movs.w	r8, r8, lsl #10
 800725c:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 8007260:	ec51 0b19 	vmov	r0, r1, d9
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	f001 fa22 	bl	80086b0 <__aeabi_cdcmpeq>
 800726c:	d210      	bcs.n	8007290 <??ZbZclAppendFloat_3>
 800726e:	ec51 0b19 	vmov	r0, r1, d9
 8007272:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8007276:	f001 fa6b 	bl	8008750 <__aeabi_d2iz>
 800727a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800727e:	fb10 f101 	smulbb	r1, r0, r1
 8007282:	0589      	lsls	r1, r1, #22
 8007284:	0d89      	lsrs	r1, r1, #22
 8007286:	ea58 0101 	orrs.w	r1, r8, r1
 800728a:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 800728e:	e00b      	b.n	80072a8 <??ZbZclAppendFloat_4>

08007290 <??ZbZclAppendFloat_3>:
 8007290:	ec51 0b19 	vmov	r0, r1, d9
 8007294:	f001 fa5c 	bl	8008750 <__aeabi_d2iz>
 8007298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800729c:	fb10 f101 	smulbb	r1, r0, r1
 80072a0:	0589      	lsls	r1, r1, #22
 80072a2:	0d89      	lsrs	r1, r1, #22
 80072a4:	ea58 0101 	orrs.w	r1, r8, r1

080072a8 <??ZbZclAppendFloat_4>:
 80072a8:	7031      	strb	r1, [r6, #0]
 80072aa:	0008      	movs	r0, r1
 80072ac:	b280      	uxth	r0, r0
 80072ae:	0a00      	lsrs	r0, r0, #8
 80072b0:	7070      	strb	r0, [r6, #1]
 80072b2:	2002      	movs	r0, #2
 80072b4:	e0e0      	b.n	8007478 <??ZbZclAppendFloat_2>

080072b6 <??ZbZclAppendFloat_0>:
 80072b6:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80072ba:	2839      	cmp	r0, #57	@ 0x39
 80072bc:	d14e      	bne.n	800735c <??ZbZclAppendFloat_5>
 80072be:	2400      	movs	r4, #0
 80072c0:	2580      	movs	r5, #128	@ 0x80
 80072c2:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 80072c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072c8:	2804      	cmp	r0, #4
 80072ca:	d202      	bcs.n	80072d2 <??ZbZclAppendFloat_6>
 80072cc:	f05f 30ff 	movs.w	r0, #4294967295
 80072d0:	e0d2      	b.n	8007478 <??ZbZclAppendFloat_2>

080072d2 <??ZbZclAppendFloat_6>:
 80072d2:	003a      	movs	r2, r7
 80072d4:	0029      	movs	r1, r5
 80072d6:	4668      	mov	r0, sp
 80072d8:	eeb0 0a48 	vmov.f32	s0, s16
 80072dc:	eef0 0a68 	vmov.f32	s1, s17
 80072e0:	f000 faba 	bl	8007858 <ZbZclFloatFrexp>
 80072e4:	eeb0 9a40 	vmov.f32	s18, s0
 80072e8:	eef0 9a60 	vmov.f32	s19, s1
 80072ec:	f8dd 8000 	ldr.w	r8, [sp]
 80072f0:	ebb8 0807 	subs.w	r8, r8, r7
 80072f4:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 80072f8:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 80072fc:	ec51 0b19 	vmov	r0, r1, d9
 8007300:	2200      	movs	r2, #0
 8007302:	2300      	movs	r3, #0
 8007304:	f001 f9d4 	bl	80086b0 <__aeabi_cdcmpeq>
 8007308:	d210      	bcs.n	800732c <??ZbZclAppendFloat_7>
 800730a:	ec51 0b19 	vmov	r0, r1, d9
 800730e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8007312:	f001 fa45 	bl	80087a0 <__aeabi_d2uiz>
 8007316:	0001      	movs	r1, r0
 8007318:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 800731c:	4341      	muls	r1, r0
 800731e:	0249      	lsls	r1, r1, #9
 8007320:	0a49      	lsrs	r1, r1, #9
 8007322:	ea58 0101 	orrs.w	r1, r8, r1
 8007326:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 800732a:	e00b      	b.n	8007344 <??ZbZclAppendFloat_8>

0800732c <??ZbZclAppendFloat_7>:
 800732c:	ec51 0b19 	vmov	r0, r1, d9
 8007330:	f001 fa36 	bl	80087a0 <__aeabi_d2uiz>
 8007334:	0001      	movs	r1, r0
 8007336:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 800733a:	4341      	muls	r1, r0
 800733c:	0249      	lsls	r1, r1, #9
 800733e:	0a49      	lsrs	r1, r1, #9
 8007340:	ea58 0101 	orrs.w	r1, r8, r1

08007344 <??ZbZclAppendFloat_8>:
 8007344:	7031      	strb	r1, [r6, #0]
 8007346:	0008      	movs	r0, r1
 8007348:	0a00      	lsrs	r0, r0, #8
 800734a:	7070      	strb	r0, [r6, #1]
 800734c:	0008      	movs	r0, r1
 800734e:	0c00      	lsrs	r0, r0, #16
 8007350:	70b0      	strb	r0, [r6, #2]
 8007352:	0008      	movs	r0, r1
 8007354:	0e00      	lsrs	r0, r0, #24
 8007356:	70f0      	strb	r0, [r6, #3]
 8007358:	2004      	movs	r0, #4
 800735a:	e08d      	b.n	8007478 <??ZbZclAppendFloat_2>

0800735c <??ZbZclAppendFloat_5>:
 800735c:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8007360:	283a      	cmp	r0, #58	@ 0x3a
 8007362:	f040 8087 	bne.w	8007474 <??ZbZclAppendFloat_9>
 8007366:	2400      	movs	r4, #0
 8007368:	2500      	movs	r5, #0
 800736a:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 800736e:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8007ab4 <??DataTable3>
 8007372:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007374:	2808      	cmp	r0, #8
 8007376:	d202      	bcs.n	800737e <??ZbZclAppendFloat_10>
 8007378:	f05f 30ff 	movs.w	r0, #4294967295
 800737c:	e07c      	b.n	8007478 <??ZbZclAppendFloat_2>

0800737e <??ZbZclAppendFloat_10>:
 800737e:	4642      	mov	r2, r8
 8007380:	0039      	movs	r1, r7
 8007382:	4668      	mov	r0, sp
 8007384:	eeb0 0a48 	vmov.f32	s0, s16
 8007388:	eef0 0a68 	vmov.f32	s1, s17
 800738c:	f000 fa64 	bl	8007858 <ZbZclFloatFrexp>
 8007390:	eeb0 9a40 	vmov.f32	s18, s0
 8007394:	eef0 9a60 	vmov.f32	s19, s1
 8007398:	9800      	ldr	r0, [sp, #0]
 800739a:	17c1      	asrs	r1, r0, #31
 800739c:	ea5f 79e8 	movs.w	r9, r8, asr #31
 80073a0:	ebb0 0008 	subs.w	r0, r0, r8
 80073a4:	eb71 0109 	sbcs.w	r1, r1, r9
 80073a8:	0501      	lsls	r1, r0, #20
 80073aa:	2000      	movs	r0, #0
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 8007ab8 <??DataTable3_1>
 80073b2:	4010      	ands	r0, r2
 80073b4:	4019      	ands	r1, r3
 80073b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ba:	ec51 0b19 	vmov	r0, r1, d9
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	f001 f975 	bl	80086b0 <__aeabi_cdcmpeq>
 80073c6:	d21f      	bcs.n	8007408 <??ZbZclAppendFloat_11>
 80073c8:	ec51 0b19 	vmov	r0, r1, d9
 80073cc:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80073d0:	f001 faba 	bl	8008948 <__aeabi_d2ulz>
 80073d4:	2200      	movs	r2, #0
 80073d6:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 80073da:	fba2 ab00 	umull	sl, fp, r2, r0
 80073de:	fb02 bb01 	mla	fp, r2, r1, fp
 80073e2:	fb03 bb00 	mla	fp, r3, r0, fp
 80073e6:	f05f 30ff 	movs.w	r0, #4294967295
 80073ea:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8007abc <??DataTable3_2>
 80073ee:	ea1a 0000 	ands.w	r0, sl, r0
 80073f2:	ea1b 0101 	ands.w	r1, fp, r1
 80073f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073fa:	4310      	orrs	r0, r2
 80073fc:	4319      	orrs	r1, r3
 80073fe:	f050 0200 	orrs.w	r2, r0, #0
 8007402:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 8007406:	e018      	b.n	800743a <??ZbZclAppendFloat_12>

08007408 <??ZbZclAppendFloat_11>:
 8007408:	ec51 0b19 	vmov	r0, r1, d9
 800740c:	f001 fa9c 	bl	8008948 <__aeabi_d2ulz>
 8007410:	2200      	movs	r2, #0
 8007412:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8007416:	fba2 ab00 	umull	sl, fp, r2, r0
 800741a:	fb02 bb01 	mla	fp, r2, r1, fp
 800741e:	fb03 bb00 	mla	fp, r3, r0, fp
 8007422:	f05f 30ff 	movs.w	r0, #4294967295
 8007426:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8007abc <??DataTable3_2>
 800742a:	ea1a 0000 	ands.w	r0, sl, r0
 800742e:	ea1b 0101 	ands.w	r1, fp, r1
 8007432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007436:	4302      	orrs	r2, r0
 8007438:	430b      	orrs	r3, r1

0800743a <??ZbZclAppendFloat_12>:
 800743a:	7032      	strb	r2, [r6, #0]
 800743c:	0010      	movs	r0, r2
 800743e:	b280      	uxth	r0, r0
 8007440:	0a00      	lsrs	r0, r0, #8
 8007442:	7070      	strb	r0, [r6, #1]
 8007444:	0010      	movs	r0, r2
 8007446:	0c00      	lsrs	r0, r0, #16
 8007448:	70b0      	strb	r0, [r6, #2]
 800744a:	0010      	movs	r0, r2
 800744c:	0e00      	lsrs	r0, r0, #24
 800744e:	70f0      	strb	r0, [r6, #3]
 8007450:	7133      	strb	r3, [r6, #4]
 8007452:	0010      	movs	r0, r2
 8007454:	0019      	movs	r1, r3
 8007456:	0a08      	lsrs	r0, r1, #8
 8007458:	2100      	movs	r1, #0
 800745a:	7170      	strb	r0, [r6, #5]
 800745c:	0010      	movs	r0, r2
 800745e:	0019      	movs	r1, r3
 8007460:	0c08      	lsrs	r0, r1, #16
 8007462:	2100      	movs	r1, #0
 8007464:	71b0      	strb	r0, [r6, #6]
 8007466:	0010      	movs	r0, r2
 8007468:	0019      	movs	r1, r3
 800746a:	0e08      	lsrs	r0, r1, #24
 800746c:	2100      	movs	r1, #0
 800746e:	71f0      	strb	r0, [r6, #7]
 8007470:	2008      	movs	r0, #8
 8007472:	e001      	b.n	8007478 <??ZbZclAppendFloat_2>

08007474 <??ZbZclAppendFloat_9>:
 8007474:	f05f 30ff 	movs.w	r0, #4294967295

08007478 <??ZbZclAppendFloat_2>:
 8007478:	b004      	add	sp, #16
 800747a:	ecbd 8b04 	vpop	{d8-d9}
 800747e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007482 <ZbZclParseFloat>:
 8007482:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007486:	ed2d 8b02 	vpush	{d8}
 800748a:	000e      	movs	r6, r1
 800748c:	4691      	mov	r9, r2
 800748e:	2000      	movs	r0, #0
 8007490:	f889 0000 	strb.w	r0, [r9]
 8007494:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8007498:	2838      	cmp	r0, #56	@ 0x38
 800749a:	d006      	beq.n	80074aa <??ZbZclParseFloat_0>
 800749c:	f0c0 8138 	bcc.w	8007710 <??ZbZclParseFloat_1>
 80074a0:	283a      	cmp	r0, #58	@ 0x3a
 80074a2:	f000 80ad 	beq.w	8007600 <??ZbZclParseFloat_2>
 80074a6:	d354      	bcc.n	8007552 <??ZbZclParseFloat_3>
 80074a8:	e132      	b.n	8007710 <??ZbZclParseFloat_1>

080074aa <??ZbZclParseFloat_0>:
 80074aa:	0030      	movs	r0, r6
 80074ac:	f7ff fe09 	bl	80070c2 <pletoh16>
 80074b0:	0004      	movs	r4, r0
 80074b2:	0020      	movs	r0, r4
 80074b4:	b280      	uxth	r0, r0
 80074b6:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 80074ba:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 80074be:	d121      	bne.n	8007504 <??ZbZclParseFloat_4>
 80074c0:	05a0      	lsls	r0, r4, #22
 80074c2:	d008      	beq.n	80074d6 <??ZbZclParseFloat_5>
 80074c4:	2000      	movs	r0, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	2300      	movs	r3, #0
 80074cc:	f000 ffba 	bl	8008444 <__aeabi_ddiv>
 80074d0:	ec41 0b10 	vmov	d0, r0, r1
 80074d4:	e127      	b.n	8007726 <??ZbZclParseFloat_6>

080074d6 <??ZbZclParseFloat_5>:
 80074d6:	0420      	lsls	r0, r4, #16
 80074d8:	d50a      	bpl.n	80074f0 <??ZbZclParseFloat_7>
 80074da:	2000      	movs	r0, #0
 80074dc:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 8007ac0 <??DataTable3_3>
 80074e0:	2200      	movs	r2, #0
 80074e2:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80074e6:	f000 ffad 	bl	8008444 <__aeabi_ddiv>
 80074ea:	ec41 0b10 	vmov	d0, r0, r1
 80074ee:	e008      	b.n	8007502 <??ZbZclParseFloat_8>

080074f0 <??ZbZclParseFloat_7>:
 80074f0:	2000      	movs	r0, #0
 80074f2:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8007ac0 <??DataTable3_3>
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	f000 ffa3 	bl	8008444 <__aeabi_ddiv>
 80074fe:	ec41 0b10 	vmov	d0, r0, r1

08007502 <??ZbZclParseFloat_8>:
 8007502:	e110      	b.n	8007726 <??ZbZclParseFloat_6>

08007504 <??ZbZclParseFloat_4>:
 8007504:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8007508:	4645      	mov	r5, r8
 800750a:	b2ad      	uxth	r5, r5
 800750c:	3d0f      	subs	r5, #15
 800750e:	3d0a      	subs	r5, #10
 8007510:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 8007514:	d004      	beq.n	8007520 <??ZbZclParseFloat_9>
 8007516:	05a7      	lsls	r7, r4, #22
 8007518:	0dbf      	lsrs	r7, r7, #22
 800751a:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 800751e:	e002      	b.n	8007526 <??ZbZclParseFloat_10>

08007520 <??ZbZclParseFloat_9>:
 8007520:	1c6d      	adds	r5, r5, #1
 8007522:	05a7      	lsls	r7, r4, #22
 8007524:	0dbf      	lsrs	r7, r7, #22

08007526 <??ZbZclParseFloat_10>:
 8007526:	0038      	movs	r0, r7
 8007528:	b280      	uxth	r0, r0
 800752a:	f000 fde7 	bl	80080fc <__aeabi_ui2d>
 800752e:	ec41 0b18 	vmov	d8, r0, r1
 8007532:	0420      	lsls	r0, r4, #16
 8007534:	d505      	bpl.n	8007542 <??ZbZclParseFloat_11>
 8007536:	ec51 0b18 	vmov	r0, r1, d8
 800753a:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800753e:	ec41 0b18 	vmov	d8, r0, r1

08007542 <??ZbZclParseFloat_11>:
 8007542:	0028      	movs	r0, r5
 8007544:	eeb0 0a48 	vmov.f32	s0, s16
 8007548:	eef0 0a68 	vmov.f32	s1, s17
 800754c:	f000 f8ef 	bl	800772e <ZbZclFloatLdexp>
 8007550:	e0e9      	b.n	8007726 <??ZbZclParseFloat_6>

08007552 <??ZbZclParseFloat_3>:
 8007552:	0030      	movs	r0, r6
 8007554:	f7ff fdc6 	bl	80070e4 <pletoh32>
 8007558:	0004      	movs	r4, r0
 800755a:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 800755e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007562:	d121      	bne.n	80075a8 <??ZbZclParseFloat_12>
 8007564:	0260      	lsls	r0, r4, #9
 8007566:	d008      	beq.n	800757a <??ZbZclParseFloat_13>
 8007568:	2000      	movs	r0, #0
 800756a:	2100      	movs	r1, #0
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	f000 ff68 	bl	8008444 <__aeabi_ddiv>
 8007574:	ec41 0b10 	vmov	d0, r0, r1
 8007578:	e0d5      	b.n	8007726 <??ZbZclParseFloat_6>

0800757a <??ZbZclParseFloat_13>:
 800757a:	2c00      	cmp	r4, #0
 800757c:	d50a      	bpl.n	8007594 <??ZbZclParseFloat_14>
 800757e:	2000      	movs	r0, #0
 8007580:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8007ac0 <??DataTable3_3>
 8007584:	2200      	movs	r2, #0
 8007586:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 800758a:	f000 ff5b 	bl	8008444 <__aeabi_ddiv>
 800758e:	ec41 0b10 	vmov	d0, r0, r1
 8007592:	e008      	b.n	80075a6 <??ZbZclParseFloat_15>

08007594 <??ZbZclParseFloat_14>:
 8007594:	2000      	movs	r0, #0
 8007596:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8007ac0 <??DataTable3_3>
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	f000 ff51 	bl	8008444 <__aeabi_ddiv>
 80075a2:	ec41 0b10 	vmov	d0, r0, r1

080075a6 <??ZbZclParseFloat_15>:
 80075a6:	e0be      	b.n	8007726 <??ZbZclParseFloat_6>

080075a8 <??ZbZclParseFloat_12>:
 80075a8:	0025      	movs	r5, r4
 80075aa:	0ded      	lsrs	r5, r5, #23
 80075ac:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 80075b0:	002f      	movs	r7, r5
 80075b2:	b2bf      	uxth	r7, r7
 80075b4:	3f7f      	subs	r7, #127	@ 0x7f
 80075b6:	3f17      	subs	r7, #23
 80075b8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80075bc:	d006      	beq.n	80075cc <??ZbZclParseFloat_16>
 80075be:	ea5f 2844 	movs.w	r8, r4, lsl #9
 80075c2:	ea5f 2858 	movs.w	r8, r8, lsr #9
 80075c6:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 80075ca:	e004      	b.n	80075d6 <??ZbZclParseFloat_17>

080075cc <??ZbZclParseFloat_16>:
 80075cc:	1c7f      	adds	r7, r7, #1
 80075ce:	ea5f 2844 	movs.w	r8, r4, lsl #9
 80075d2:	ea5f 2858 	movs.w	r8, r8, lsr #9

080075d6 <??ZbZclParseFloat_17>:
 80075d6:	4640      	mov	r0, r8
 80075d8:	f000 fd90 	bl	80080fc <__aeabi_ui2d>
 80075dc:	ec41 0b18 	vmov	d8, r0, r1
 80075e0:	2c00      	cmp	r4, #0
 80075e2:	d505      	bpl.n	80075f0 <??ZbZclParseFloat_18>
 80075e4:	ec51 0b18 	vmov	r0, r1, d8
 80075e8:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80075ec:	ec41 0b18 	vmov	d8, r0, r1

080075f0 <??ZbZclParseFloat_18>:
 80075f0:	0038      	movs	r0, r7
 80075f2:	eeb0 0a48 	vmov.f32	s0, s16
 80075f6:	eef0 0a68 	vmov.f32	s1, s17
 80075fa:	f000 f898 	bl	800772e <ZbZclFloatLdexp>
 80075fe:	e092      	b.n	8007726 <??ZbZclParseFloat_6>

08007600 <??ZbZclParseFloat_2>:
 8007600:	0030      	movs	r0, r6
 8007602:	f7ff fd9c 	bl	800713e <pletoh64>
 8007606:	0004      	movs	r4, r0
 8007608:	000d      	movs	r5, r1
 800760a:	2000      	movs	r0, #0
 800760c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 8007ab8 <??DataTable3_1>
 8007610:	ea14 0200 	ands.w	r2, r4, r0
 8007614:	ea15 0301 	ands.w	r3, r5, r1
 8007618:	f05f 0a00 	movs.w	sl, #0
 800761c:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 8007ab8 <??DataTable3_1>
 8007620:	455b      	cmp	r3, fp
 8007622:	d131      	bne.n	8007688 <??ZbZclParseFloat_19>
 8007624:	4552      	cmp	r2, sl
 8007626:	d12f      	bne.n	8007688 <??ZbZclParseFloat_19>
 8007628:	f05f 30ff 	movs.w	r0, #4294967295
 800762c:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8007abc <??DataTable3_2>
 8007630:	4020      	ands	r0, r4
 8007632:	4029      	ands	r1, r5
 8007634:	2900      	cmp	r1, #0
 8007636:	d101      	bne.n	800763c <??ZbZclParseFloat_20>
 8007638:	2800      	cmp	r0, #0
 800763a:	d008      	beq.n	800764e <??ZbZclParseFloat_21>

0800763c <??ZbZclParseFloat_20>:
 800763c:	2000      	movs	r0, #0
 800763e:	2100      	movs	r1, #0
 8007640:	2200      	movs	r2, #0
 8007642:	2300      	movs	r3, #0
 8007644:	f000 fefe 	bl	8008444 <__aeabi_ddiv>
 8007648:	ec41 0b10 	vmov	d0, r0, r1
 800764c:	e06b      	b.n	8007726 <??ZbZclParseFloat_6>

0800764e <??ZbZclParseFloat_21>:
 800764e:	f014 0000 	ands.w	r0, r4, #0
 8007652:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8007656:	2900      	cmp	r1, #0
 8007658:	d101      	bne.n	800765e <??ZbZclParseFloat_22>
 800765a:	2800      	cmp	r0, #0
 800765c:	d00a      	beq.n	8007674 <??ZbZclParseFloat_23>

0800765e <??ZbZclParseFloat_22>:
 800765e:	2000      	movs	r0, #0
 8007660:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 8007ac0 <??DataTable3_3>
 8007664:	2200      	movs	r2, #0
 8007666:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 800766a:	f000 feeb 	bl	8008444 <__aeabi_ddiv>
 800766e:	ec41 0b10 	vmov	d0, r0, r1
 8007672:	e008      	b.n	8007686 <??ZbZclParseFloat_24>

08007674 <??ZbZclParseFloat_23>:
 8007674:	2000      	movs	r0, #0
 8007676:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 8007ac0 <??DataTable3_3>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	f000 fee1 	bl	8008444 <__aeabi_ddiv>
 8007682:	ec41 0b10 	vmov	d0, r0, r1

08007686 <??ZbZclParseFloat_24>:
 8007686:	e04e      	b.n	8007726 <??ZbZclParseFloat_6>

08007688 <??ZbZclParseFloat_19>:
 8007688:	0022      	movs	r2, r4
 800768a:	002b      	movs	r3, r5
 800768c:	0d1a      	lsrs	r2, r3, #20
 800768e:	2300      	movs	r3, #0
 8007690:	4690      	mov	r8, r2
 8007692:	ea5f 5848 	movs.w	r8, r8, lsl #21
 8007696:	ea5f 5858 	movs.w	r8, r8, lsr #21
 800769a:	4647      	mov	r7, r8
 800769c:	b2bf      	uxth	r7, r7
 800769e:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 80076a2:	3f34      	subs	r7, #52	@ 0x34
 80076a4:	4020      	ands	r0, r4
 80076a6:	4029      	ands	r1, r5
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d101      	bne.n	80076b0 <??ZbZclParseFloat_25>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d00a      	beq.n	80076c6 <??ZbZclParseFloat_26>

080076b0 <??ZbZclParseFloat_25>:
 80076b0:	f05f 30ff 	movs.w	r0, #4294967295
 80076b4:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8007abc <??DataTable3_2>
 80076b8:	4020      	ands	r0, r4
 80076ba:	4029      	ands	r1, r5
 80076bc:	f110 0a00 	adds.w	sl, r0, #0
 80076c0:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 80076c4:	e008      	b.n	80076d8 <??ZbZclParseFloat_27>

080076c6 <??ZbZclParseFloat_26>:
 80076c6:	1c7f      	adds	r7, r7, #1
 80076c8:	f05f 30ff 	movs.w	r0, #4294967295
 80076cc:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8007abc <??DataTable3_2>
 80076d0:	ea14 0a00 	ands.w	sl, r4, r0
 80076d4:	ea15 0b01 	ands.w	fp, r5, r1

080076d8 <??ZbZclParseFloat_27>:
 80076d8:	4650      	mov	r0, sl
 80076da:	4659      	mov	r1, fp
 80076dc:	f000 fd52 	bl	8008184 <__aeabi_ul2d>
 80076e0:	ec41 0b18 	vmov	d8, r0, r1
 80076e4:	f014 0000 	ands.w	r0, r4, #0
 80076e8:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d101      	bne.n	80076f4 <??ZbZclParseFloat_28>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d005      	beq.n	8007700 <??ZbZclParseFloat_29>

080076f4 <??ZbZclParseFloat_28>:
 80076f4:	ec51 0b18 	vmov	r0, r1, d8
 80076f8:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80076fc:	ec41 0b18 	vmov	d8, r0, r1

08007700 <??ZbZclParseFloat_29>:
 8007700:	0038      	movs	r0, r7
 8007702:	eeb0 0a48 	vmov.f32	s0, s16
 8007706:	eef0 0a68 	vmov.f32	s1, s17
 800770a:	f000 f810 	bl	800772e <ZbZclFloatLdexp>
 800770e:	e00a      	b.n	8007726 <??ZbZclParseFloat_6>

08007710 <??ZbZclParseFloat_1>:
 8007710:	208d      	movs	r0, #141	@ 0x8d
 8007712:	f889 0000 	strb.w	r0, [r9]
 8007716:	2000      	movs	r0, #0
 8007718:	2100      	movs	r1, #0
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	f000 fe91 	bl	8008444 <__aeabi_ddiv>
 8007722:	ec41 0b10 	vmov	d0, r0, r1

08007726 <??ZbZclParseFloat_6>:
 8007726:	ecbd 8b02 	vpop	{d8}
 800772a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800772e <ZbZclFloatLdexp>:
 800772e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007732:	ed2d 8b04 	vpush	{d8-d9}
 8007736:	b084      	sub	sp, #16
 8007738:	eeb0 8a40 	vmov.f32	s16, s0
 800773c:	eef0 8a60 	vmov.f32	s17, s1
 8007740:	0006      	movs	r6, r0
 8007742:	2730      	movs	r7, #48	@ 0x30
 8007744:	ec53 2b18 	vmov	r2, r3, d8
 8007748:	ec51 0b18 	vmov	r0, r1, d8
 800774c:	f000 ffb0 	bl	80086b0 <__aeabi_cdcmpeq>
 8007750:	d10c      	bne.n	800776c <??ZbZclFloatLdexp_0>
 8007752:	ec53 2b18 	vmov	r2, r3, d8
 8007756:	ec51 0b18 	vmov	r0, r1, d8
 800775a:	f000 fb93 	bl	8007e84 <__adddf3>
 800775e:	0002      	movs	r2, r0
 8007760:	000b      	movs	r3, r1
 8007762:	ec51 0b18 	vmov	r0, r1, d8
 8007766:	f000 ffa3 	bl	80086b0 <__aeabi_cdcmpeq>
 800776a:	d104      	bne.n	8007776 <??ZbZclFloatLdexp_1>

0800776c <??ZbZclFloatLdexp_0>:
 800776c:	eeb0 0a48 	vmov.f32	s0, s16
 8007770:	eef0 0a68 	vmov.f32	s1, s17
 8007774:	e06b      	b.n	800784e <??ZbZclFloatLdexp_2>

08007776 <??ZbZclFloatLdexp_1>:
 8007776:	2e01      	cmp	r6, #1
 8007778:	db2c      	blt.n	80077d4 <??ZbZclFloatLdexp_3>
 800777a:	2401      	movs	r4, #1
 800777c:	2500      	movs	r5, #0
 800777e:	0020      	movs	r0, r4
 8007780:	0029      	movs	r1, r5
 8007782:	003a      	movs	r2, r7
 8007784:	f000 fb6c 	bl	8007e60 <__aeabi_llsl>
 8007788:	4680      	mov	r8, r0
 800778a:	4689      	mov	r9, r1
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f000 fcf8 	bl	8008184 <__aeabi_ul2d>
 8007794:	ec41 0b19 	vmov	d9, r0, r1

08007798 <??ZbZclFloatLdexp_4>:
 8007798:	42be      	cmp	r6, r7
 800779a:	db09      	blt.n	80077b0 <??ZbZclFloatLdexp_5>
 800779c:	ec51 0b18 	vmov	r0, r1, d8
 80077a0:	ec53 2b19 	vmov	r2, r3, d9
 80077a4:	f000 fd24 	bl	80081f0 <__aeabi_dmul>
 80077a8:	ec41 0b18 	vmov	d8, r0, r1
 80077ac:	1bf6      	subs	r6, r6, r7
 80077ae:	e7f3      	b.n	8007798 <??ZbZclFloatLdexp_4>

080077b0 <??ZbZclFloatLdexp_5>:
 80077b0:	0020      	movs	r0, r4
 80077b2:	0029      	movs	r1, r5
 80077b4:	0032      	movs	r2, r6
 80077b6:	f000 fb53 	bl	8007e60 <__aeabi_llsl>
 80077ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c2:	f000 fcdf 	bl	8008184 <__aeabi_ul2d>
 80077c6:	ec53 2b18 	vmov	r2, r3, d8
 80077ca:	f000 fd11 	bl	80081f0 <__aeabi_dmul>
 80077ce:	ec41 0b18 	vmov	d8, r0, r1
 80077d2:	e038      	b.n	8007846 <??ZbZclFloatLdexp_6>

080077d4 <??ZbZclFloatLdexp_3>:
 80077d4:	2e00      	cmp	r6, #0
 80077d6:	d536      	bpl.n	8007846 <??ZbZclFloatLdexp_6>
 80077d8:	2401      	movs	r4, #1
 80077da:	2500      	movs	r5, #0
 80077dc:	0020      	movs	r0, r4
 80077de:	0029      	movs	r1, r5
 80077e0:	003a      	movs	r2, r7
 80077e2:	f000 fb3d 	bl	8007e60 <__aeabi_llsl>
 80077e6:	4682      	mov	sl, r0
 80077e8:	468b      	mov	fp, r1
 80077ea:	4650      	mov	r0, sl
 80077ec:	4659      	mov	r1, fp
 80077ee:	f000 fcc9 	bl	8008184 <__aeabi_ul2d>
 80077f2:	0002      	movs	r2, r0
 80077f4:	000b      	movs	r3, r1
 80077f6:	2000      	movs	r0, #0
 80077f8:	49b1      	ldr	r1, [pc, #708]	@ (8007ac0 <??DataTable3_3>)
 80077fa:	f000 fe23 	bl	8008444 <__aeabi_ddiv>
 80077fe:	ec41 0b19 	vmov	d9, r0, r1
 8007802:	f1d6 0800 	rsbs	r8, r6, #0

08007806 <??ZbZclFloatLdexp_7>:
 8007806:	45b8      	cmp	r8, r7
 8007808:	db0a      	blt.n	8007820 <??ZbZclFloatLdexp_8>
 800780a:	ec53 2b18 	vmov	r2, r3, d8
 800780e:	ec51 0b19 	vmov	r0, r1, d9
 8007812:	f000 fced 	bl	80081f0 <__aeabi_dmul>
 8007816:	ec41 0b18 	vmov	d8, r0, r1
 800781a:	ebb8 0807 	subs.w	r8, r8, r7
 800781e:	e7f2      	b.n	8007806 <??ZbZclFloatLdexp_7>

08007820 <??ZbZclFloatLdexp_8>:
 8007820:	0020      	movs	r0, r4
 8007822:	0029      	movs	r1, r5
 8007824:	4642      	mov	r2, r8
 8007826:	f000 fb1b 	bl	8007e60 <__aeabi_llsl>
 800782a:	e9cd 0100 	strd	r0, r1, [sp]
 800782e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007832:	f000 fca7 	bl	8008184 <__aeabi_ul2d>
 8007836:	0002      	movs	r2, r0
 8007838:	000b      	movs	r3, r1
 800783a:	ec51 0b18 	vmov	r0, r1, d8
 800783e:	f000 fe01 	bl	8008444 <__aeabi_ddiv>
 8007842:	ec41 0b18 	vmov	d8, r0, r1

08007846 <??ZbZclFloatLdexp_6>:
 8007846:	eeb0 0a48 	vmov.f32	s0, s16
 800784a:	eef0 0a68 	vmov.f32	s1, s17

0800784e <??ZbZclFloatLdexp_2>:
 800784e:	b004      	add	sp, #16
 8007850:	ecbd 8b04 	vpop	{d8-d9}
 8007854:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007858 <ZbZclFloatFrexp>:
 8007858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	ed2d 8b06 	vpush	{d8-d10}
 8007860:	b086      	sub	sp, #24
 8007862:	eeb0 8a40 	vmov.f32	s16, s0
 8007866:	eef0 8a60 	vmov.f32	s17, s1
 800786a:	4682      	mov	sl, r0
 800786c:	000e      	movs	r6, r1
 800786e:	4693      	mov	fp, r2
 8007870:	2730      	movs	r7, #48	@ 0x30
 8007872:	f05f 0800 	movs.w	r8, #0
 8007876:	f05f 0901 	movs.w	r9, #1
 800787a:	eeb0 9a48 	vmov.f32	s18, s16
 800787e:	eef0 9a68 	vmov.f32	s19, s17
 8007882:	ec51 0b18 	vmov	r0, r1, d8
 8007886:	2200      	movs	r2, #0
 8007888:	2300      	movs	r3, #0
 800788a:	f000 ff11 	bl	80086b0 <__aeabi_cdcmpeq>
 800788e:	d208      	bcs.n	80078a2 <??ZbZclFloatFrexp_0>
 8007890:	f05f 30ff 	movs.w	r0, #4294967295
 8007894:	4681      	mov	r9, r0
 8007896:	ec51 0b19 	vmov	r0, r1, d9
 800789a:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800789e:	ec41 0b19 	vmov	d9, r0, r1

080078a2 <??ZbZclFloatFrexp_0>:
 80078a2:	ec53 2b19 	vmov	r2, r3, d9
 80078a6:	ec51 0b19 	vmov	r0, r1, d9
 80078aa:	f000 ff01 	bl	80086b0 <__aeabi_cdcmpeq>
 80078ae:	d00b      	beq.n	80078c8 <??ZbZclFloatFrexp_1>
 80078b0:	f8ca 6000 	str.w	r6, [sl]
 80078b4:	4648      	mov	r0, r9
 80078b6:	f000 fc31 	bl	800811c <__aeabi_i2d>
 80078ba:	2200      	movs	r2, #0
 80078bc:	4b81      	ldr	r3, [pc, #516]	@ (8007ac4 <??DataTable3_4>)
 80078be:	f000 fc97 	bl	80081f0 <__aeabi_dmul>
 80078c2:	ec41 0b10 	vmov	d0, r0, r1
 80078c6:	e0ef      	b.n	8007aa8 <??ZbZclFloatFrexp_2>

080078c8 <??ZbZclFloatFrexp_1>:
 80078c8:	2000      	movs	r0, #0
 80078ca:	497d      	ldr	r1, [pc, #500]	@ (8007ac0 <??DataTable3_3>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	2300      	movs	r3, #0
 80078d0:	f000 fdb8 	bl	8008444 <__aeabi_ddiv>
 80078d4:	ec53 2b19 	vmov	r2, r3, d9
 80078d8:	f000 feea 	bl	80086b0 <__aeabi_cdcmpeq>
 80078dc:	d00b      	beq.n	80078f6 <??ZbZclFloatFrexp_3>
 80078de:	2000      	movs	r0, #0
 80078e0:	4977      	ldr	r1, [pc, #476]	@ (8007ac0 <??DataTable3_3>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80078e8:	f000 fdac 	bl	8008444 <__aeabi_ddiv>
 80078ec:	ec53 2b19 	vmov	r2, r3, d9
 80078f0:	f000 fede 	bl	80086b0 <__aeabi_cdcmpeq>
 80078f4:	d107      	bne.n	8007906 <??ZbZclFloatFrexp_4>

080078f6 <??ZbZclFloatFrexp_3>:
 80078f6:	f8ca 6000 	str.w	r6, [sl]
 80078fa:	4648      	mov	r0, r9
 80078fc:	f000 fc0e 	bl	800811c <__aeabi_i2d>
 8007900:	ec41 0b10 	vmov	d0, r0, r1
 8007904:	e0d0      	b.n	8007aa8 <??ZbZclFloatFrexp_2>

08007906 <??ZbZclFloatFrexp_4>:
 8007906:	ec53 2b19 	vmov	r2, r3, d9
 800790a:	ec51 0b19 	vmov	r0, r1, d9
 800790e:	f000 fab9 	bl	8007e84 <__adddf3>
 8007912:	ec53 2b19 	vmov	r2, r3, d9
 8007916:	f000 fecb 	bl	80086b0 <__aeabi_cdcmpeq>
 800791a:	d10b      	bne.n	8007934 <??ZbZclFloatFrexp_5>
 800791c:	f8ca b000 	str.w	fp, [sl]
 8007920:	4648      	mov	r0, r9
 8007922:	f000 fbfb 	bl	800811c <__aeabi_i2d>
 8007926:	2200      	movs	r2, #0
 8007928:	2300      	movs	r3, #0
 800792a:	f000 fc61 	bl	80081f0 <__aeabi_dmul>
 800792e:	ec41 0b10 	vmov	d0, r0, r1
 8007932:	e0b9      	b.n	8007aa8 <??ZbZclFloatFrexp_2>

08007934 <??ZbZclFloatFrexp_5>:
 8007934:	ec51 0b19 	vmov	r0, r1, d9
 8007938:	2200      	movs	r2, #0
 800793a:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 800793e:	f000 feaf 	bl	80086a0 <__aeabi_cdrcmple>
 8007942:	d854      	bhi.n	80079ee <??ZbZclFloatFrexp_6>
 8007944:	2001      	movs	r0, #1
 8007946:	2100      	movs	r1, #0
 8007948:	003a      	movs	r2, r7
 800794a:	f000 fa89 	bl	8007e60 <__aeabi_llsl>
 800794e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007956:	f000 fc15 	bl	8008184 <__aeabi_ul2d>
 800795a:	0002      	movs	r2, r0
 800795c:	000b      	movs	r3, r1
 800795e:	2000      	movs	r0, #0
 8007960:	4957      	ldr	r1, [pc, #348]	@ (8007ac0 <??DataTable3_3>)
 8007962:	f000 fd6f 	bl	8008444 <__aeabi_ddiv>
 8007966:	ec41 0b1a 	vmov	d10, r0, r1
 800796a:	2002      	movs	r0, #2
 800796c:	2100      	movs	r1, #0
 800796e:	003a      	movs	r2, r7
 8007970:	f000 fa76 	bl	8007e60 <__aeabi_llsl>
 8007974:	e9cd 0100 	strd	r0, r1, [sp]

08007978 <??ZbZclFloatFrexp_7>:
 8007978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800797c:	f000 fc02 	bl	8008184 <__aeabi_ul2d>
 8007980:	0002      	movs	r2, r0
 8007982:	000b      	movs	r3, r1
 8007984:	ec51 0b19 	vmov	r0, r1, d9
 8007988:	f000 fe8a 	bl	80086a0 <__aeabi_cdrcmple>
 800798c:	d813      	bhi.n	80079b6 <??ZbZclFloatFrexp_8>
 800798e:	ec53 2b19 	vmov	r2, r3, d9
 8007992:	ec51 0b1a 	vmov	r0, r1, d10
 8007996:	f000 fc2b 	bl	80081f0 <__aeabi_dmul>
 800799a:	ec41 0b19 	vmov	d9, r0, r1
 800799e:	eb17 0808 	adds.w	r8, r7, r8
 80079a2:	45b0      	cmp	r8, r6
 80079a4:	dbe8      	blt.n	8007978 <??ZbZclFloatFrexp_7>
 80079a6:	f8ca 6000 	str.w	r6, [sl]
 80079aa:	4648      	mov	r0, r9
 80079ac:	f000 fbb6 	bl	800811c <__aeabi_i2d>
 80079b0:	ec41 0b10 	vmov	d0, r0, r1
 80079b4:	e078      	b.n	8007aa8 <??ZbZclFloatFrexp_2>

080079b6 <??ZbZclFloatFrexp_8>:
 80079b6:	ec51 0b19 	vmov	r0, r1, d9
 80079ba:	2200      	movs	r2, #0
 80079bc:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 80079c0:	f000 fe6e 	bl	80086a0 <__aeabi_cdrcmple>
 80079c4:	d865      	bhi.n	8007a92 <??ZbZclFloatFrexp_9>
 80079c6:	ec53 2b19 	vmov	r2, r3, d9
 80079ca:	2000      	movs	r0, #0
 80079cc:	493e      	ldr	r1, [pc, #248]	@ (8007ac8 <??DataTable3_5>)
 80079ce:	f000 fc0f 	bl	80081f0 <__aeabi_dmul>
 80079d2:	ec41 0b19 	vmov	d9, r0, r1
 80079d6:	f118 0801 	adds.w	r8, r8, #1
 80079da:	45b0      	cmp	r8, r6
 80079dc:	dbeb      	blt.n	80079b6 <??ZbZclFloatFrexp_8>
 80079de:	f8ca 6000 	str.w	r6, [sl]
 80079e2:	4648      	mov	r0, r9
 80079e4:	f000 fb9a 	bl	800811c <__aeabi_i2d>
 80079e8:	ec41 0b10 	vmov	d0, r0, r1
 80079ec:	e05c      	b.n	8007aa8 <??ZbZclFloatFrexp_2>

080079ee <??ZbZclFloatFrexp_6>:
 80079ee:	ec51 0b19 	vmov	r0, r1, d9
 80079f2:	2200      	movs	r2, #0
 80079f4:	4b32      	ldr	r3, [pc, #200]	@ (8007ac0 <??DataTable3_3>)
 80079f6:	f000 fe5b 	bl	80086b0 <__aeabi_cdcmpeq>
 80079fa:	d24a      	bcs.n	8007a92 <??ZbZclFloatFrexp_9>
 80079fc:	2401      	movs	r4, #1
 80079fe:	2500      	movs	r5, #0
 8007a00:	0020      	movs	r0, r4
 8007a02:	0029      	movs	r1, r5
 8007a04:	003a      	movs	r2, r7
 8007a06:	f000 fa2b 	bl	8007e60 <__aeabi_llsl>
 8007a0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a12:	f000 fbb7 	bl	8008184 <__aeabi_ul2d>
 8007a16:	ec41 0b1a 	vmov	d10, r0, r1
 8007a1a:	0020      	movs	r0, r4
 8007a1c:	0029      	movs	r1, r5
 8007a1e:	003a      	movs	r2, r7
 8007a20:	f000 fa1e 	bl	8007e60 <__aeabi_llsl>
 8007a24:	e9cd 0100 	strd	r0, r1, [sp]

08007a28 <??ZbZclFloatFrexp_10>:
 8007a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a2c:	f000 fbaa 	bl	8008184 <__aeabi_ul2d>
 8007a30:	0002      	movs	r2, r0
 8007a32:	000b      	movs	r3, r1
 8007a34:	2000      	movs	r0, #0
 8007a36:	4922      	ldr	r1, [pc, #136]	@ (8007ac0 <??DataTable3_3>)
 8007a38:	f000 fd04 	bl	8008444 <__aeabi_ddiv>
 8007a3c:	0002      	movs	r2, r0
 8007a3e:	000b      	movs	r3, r1
 8007a40:	ec51 0b18 	vmov	r0, r1, d8
 8007a44:	f000 fe34 	bl	80086b0 <__aeabi_cdcmpeq>
 8007a48:	d20e      	bcs.n	8007a68 <??ZbZclFloatFrexp_11>
 8007a4a:	ebb8 0007 	subs.w	r0, r8, r7
 8007a4e:	4583      	cmp	fp, r0
 8007a50:	da0a      	bge.n	8007a68 <??ZbZclFloatFrexp_11>

08007a52 <??ZbZclFloatFrexp_12>:
 8007a52:	ec53 2b19 	vmov	r2, r3, d9
 8007a56:	ec51 0b1a 	vmov	r0, r1, d10
 8007a5a:	f000 fbc9 	bl	80081f0 <__aeabi_dmul>
 8007a5e:	ec41 0b19 	vmov	d9, r0, r1
 8007a62:	ebb8 0807 	subs.w	r8, r8, r7
 8007a66:	e7df      	b.n	8007a28 <??ZbZclFloatFrexp_10>

08007a68 <??ZbZclFloatFrexp_11>:
 8007a68:	ec51 0b19 	vmov	r0, r1, d9
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4b14      	ldr	r3, [pc, #80]	@ (8007ac0 <??DataTable3_3>)
 8007a70:	f000 fe1e 	bl	80086b0 <__aeabi_cdcmpeq>
 8007a74:	d20d      	bcs.n	8007a92 <??ZbZclFloatFrexp_9>
 8007a76:	f1b8 0801 	subs.w	r8, r8, #1
 8007a7a:	45d8      	cmp	r8, fp
 8007a7c:	d009      	beq.n	8007a92 <??ZbZclFloatFrexp_9>

08007a7e <??ZbZclFloatFrexp_13>:
 8007a7e:	ec53 2b19 	vmov	r2, r3, d9
 8007a82:	2000      	movs	r0, #0
 8007a84:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 8007a88:	f000 fbb2 	bl	80081f0 <__aeabi_dmul>
 8007a8c:	ec41 0b19 	vmov	d9, r0, r1
 8007a90:	e7ea      	b.n	8007a68 <??ZbZclFloatFrexp_11>

08007a92 <??ZbZclFloatFrexp_9>:
 8007a92:	f8ca 8000 	str.w	r8, [sl]
 8007a96:	4648      	mov	r0, r9
 8007a98:	f000 fb40 	bl	800811c <__aeabi_i2d>
 8007a9c:	ec53 2b19 	vmov	r2, r3, d9
 8007aa0:	f000 fba6 	bl	80081f0 <__aeabi_dmul>
 8007aa4:	ec41 0b10 	vmov	d0, r0, r1

08007aa8 <??ZbZclFloatFrexp_2>:
 8007aa8:	b006      	add	sp, #24
 8007aaa:	ecbd 8b06 	vpop	{d8-d10}
 8007aae:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007ab4 <??DataTable3>:
 8007ab4:	fc01 ffff                                   ....

08007ab8 <??DataTable3_1>:
 8007ab8:	0000 7ff0                                   ....

08007abc <??DataTable3_2>:
 8007abc:	ffff 000f                                   ....

08007ac0 <??DataTable3_3>:
 8007ac0:	0000 3ff0                                   ...?

08007ac4 <??DataTable3_4>:
 8007ac4:	0000 3ff8                                   ...?

08007ac8 <??DataTable3_5>:
 8007ac8:	0000 3fe0                                   ...?

08007acc <ZbZclAttrIsFloat>:
 8007acc:	0001      	movs	r1, r0
 8007ace:	0008      	movs	r0, r1
 8007ad0:	b2c0      	uxtb	r0, r0
 8007ad2:	2838      	cmp	r0, #56	@ 0x38
 8007ad4:	db05      	blt.n	8007ae2 <??ZbZclAttrIsFloat_0>
 8007ad6:	0008      	movs	r0, r1
 8007ad8:	b2c0      	uxtb	r0, r0
 8007ada:	283b      	cmp	r0, #59	@ 0x3b
 8007adc:	da01      	bge.n	8007ae2 <??ZbZclAttrIsFloat_0>
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e000      	b.n	8007ae4 <??ZbZclAttrIsFloat_1>

08007ae2 <??ZbZclAttrIsFloat_0>:
 8007ae2:	2000      	movs	r0, #0

08007ae4 <??ZbZclAttrIsFloat_1>:
 8007ae4:	4770      	bx	lr

08007ae6 <ZbZclHandleGetSceneData>:
 8007ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aea:	b0a2      	sub	sp, #136	@ 0x88
 8007aec:	0004      	movs	r4, r0
 8007aee:	000d      	movs	r5, r1
 8007af0:	0016      	movs	r6, r2
 8007af2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d106      	bne.n	8007b06 <??ZbZclHandleGetSceneData_0>
 8007af8:	2381      	movs	r3, #129	@ 0x81
 8007afa:	002a      	movs	r2, r5
 8007afc:	0031      	movs	r1, r6
 8007afe:	0020      	movs	r0, r4
 8007b00:	f00b fc0e 	bl	8013320 <ZbZclSendDefaultResponse>
 8007b04:	e06b      	b.n	8007bde <??ZbZclHandleGetSceneData_1>

08007b06 <??ZbZclHandleGetSceneData_0>:
 8007b06:	2708      	movs	r7, #8
 8007b08:	f05f 0800 	movs.w	r8, #0
 8007b0c:	46e9      	mov	r9, sp
 8007b0e:	4642      	mov	r2, r8
 8007b10:	0039      	movs	r1, r7
 8007b12:	4648      	mov	r0, r9
 8007b14:	f000 f900 	bl	8007d18 <__aeabi_memset>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	f88d 0000 	strb.w	r0, [sp]
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f88d 0001 	strb.w	r0, [sp, #1]
 8007b24:	78a8      	ldrb	r0, [r5, #2]
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d103      	bne.n	8007b32 <??ZbZclHandleGetSceneData_2>
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f88d 0002 	strb.w	r0, [sp, #2]
 8007b30:	e002      	b.n	8007b38 <??ZbZclHandleGetSceneData_3>

08007b32 <??ZbZclHandleGetSceneData_2>:
 8007b32:	2000      	movs	r0, #0
 8007b34:	f88d 0002 	strb.w	r0, [sp, #2]

08007b38 <??ZbZclHandleGetSceneData_3>:
 8007b38:	2001      	movs	r0, #1
 8007b3a:	f88d 0003 	strb.w	r0, [sp, #3]
 8007b3e:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8007b42:	f8ad 0004 	strh.w	r0, [sp, #4]
 8007b46:	79a8      	ldrb	r0, [r5, #6]
 8007b48:	f88d 0006 	strb.w	r0, [sp, #6]
 8007b4c:	20f0      	movs	r0, #240	@ 0xf0
 8007b4e:	f88d 0007 	strb.w	r0, [sp, #7]
 8007b52:	8b62      	ldrh	r2, [r4, #26]
 8007b54:	a90e      	add	r1, sp, #56	@ 0x38
 8007b56:	4668      	mov	r0, sp
 8007b58:	f7fe fd18 	bl	800658c <ZbZclAppendHeader>
 8007b5c:	0007      	movs	r7, r0
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	d506      	bpl.n	8007b70 <??ZbZclHandleGetSceneData_4>
 8007b62:	2380      	movs	r3, #128	@ 0x80
 8007b64:	002a      	movs	r2, r5
 8007b66:	0031      	movs	r1, r6
 8007b68:	0020      	movs	r0, r4
 8007b6a:	f00b fbd9 	bl	8013320 <ZbZclSendDefaultResponse>
 8007b6e:	e036      	b.n	8007bde <??ZbZclHandleGetSceneData_1>

08007b70 <??ZbZclHandleGetSceneData_4>:
 8007b70:	46b9      	mov	r9, r7
 8007b72:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	a80e      	add	r0, sp, #56	@ 0x38
 8007b7a:	eb00 0109 	add.w	r1, r0, r9
 8007b7e:	0020      	movs	r0, r4
 8007b80:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007b82:	4798      	blx	r3
 8007b84:	4680      	mov	r8, r0
 8007b86:	4640      	mov	r0, r8
 8007b88:	b2c0      	uxtb	r0, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d106      	bne.n	8007b9c <??ZbZclHandleGetSceneData_5>
 8007b8e:	2381      	movs	r3, #129	@ 0x81
 8007b90:	002a      	movs	r2, r5
 8007b92:	0031      	movs	r1, r6
 8007b94:	0020      	movs	r0, r4
 8007b96:	f00b fbc3 	bl	8013320 <ZbZclSendDefaultResponse>
 8007b9a:	e020      	b.n	8007bde <??ZbZclHandleGetSceneData_1>

08007b9c <??ZbZclHandleGetSceneData_5>:
 8007b9c:	fa59 f988 	uxtab	r9, r9, r8
 8007ba0:	0032      	movs	r2, r6
 8007ba2:	a902      	add	r1, sp, #8
 8007ba4:	0020      	movs	r0, r4
 8007ba6:	f7fc f8c8 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8007baa:	a802      	add	r0, sp, #8
 8007bac:	f116 0110 	adds.w	r1, r6, #16
 8007bb0:	2210      	movs	r2, #16
 8007bb2:	f00f fb48 	bl	8017246 <__aeabi_memcpy>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 8007bc8:	a80e      	add	r0, sp, #56	@ 0x38
 8007bca:	9008      	str	r0, [sp, #32]
 8007bcc:	4648      	mov	r0, r9
 8007bce:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	a902      	add	r1, sp, #8
 8007bd8:	68a0      	ldr	r0, [r4, #8]
 8007bda:	f00a ff01 	bl	80129e0 <ZbApsdeDataReqCallback>

08007bde <??ZbZclHandleGetSceneData_1>:
 8007bde:	b023      	add	sp, #140	@ 0x8c
 8007be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007be4 <ZbZclHandleSetSceneData>:
 8007be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	b0a4      	sub	sp, #144	@ 0x90
 8007bea:	0004      	movs	r4, r0
 8007bec:	000d      	movs	r5, r1
 8007bee:	0016      	movs	r6, r2
 8007bf0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d106      	bne.n	8007c04 <??ZbZclHandleSetSceneData_0>
 8007bf6:	2381      	movs	r3, #129	@ 0x81
 8007bf8:	002a      	movs	r2, r5
 8007bfa:	0031      	movs	r1, r6
 8007bfc:	0020      	movs	r0, r4
 8007bfe:	f00b fb8f 	bl	8013320 <ZbZclSendDefaultResponse>
 8007c02:	e086      	b.n	8007d12 <??ZbZclHandleSetSceneData_1>

08007c04 <??ZbZclHandleSetSceneData_0>:
 8007c04:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8007c06:	2805      	cmp	r0, #5
 8007c08:	da06      	bge.n	8007c18 <??ZbZclHandleSetSceneData_2>
 8007c0a:	2380      	movs	r3, #128	@ 0x80
 8007c0c:	002a      	movs	r2, r5
 8007c0e:	0031      	movs	r1, r6
 8007c10:	0020      	movs	r0, r4
 8007c12:	f00b fb85 	bl	8013320 <ZbZclSendDefaultResponse>
 8007c16:	e07c      	b.n	8007d12 <??ZbZclHandleSetSceneData_1>

08007c18 <??ZbZclHandleSetSceneData_2>:
 8007c18:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8007c1a:	f7ff fa63 	bl	80070e4 <pletoh32>
 8007c1e:	0007      	movs	r7, r0
 8007c20:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8007c22:	7900      	ldrb	r0, [r0, #4]
 8007c24:	f88d 0000 	strb.w	r0, [sp]
 8007c28:	f89d 0000 	ldrb.w	r0, [sp]
 8007c2c:	1d40      	adds	r0, r0, #5
 8007c2e:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8007c30:	4288      	cmp	r0, r1
 8007c32:	d206      	bcs.n	8007c42 <??ZbZclHandleSetSceneData_3>
 8007c34:	2380      	movs	r3, #128	@ 0x80
 8007c36:	002a      	movs	r2, r5
 8007c38:	0031      	movs	r1, r6
 8007c3a:	0020      	movs	r0, r4
 8007c3c:	f00b fb70 	bl	8013320 <ZbZclSendDefaultResponse>
 8007c40:	e067      	b.n	8007d12 <??ZbZclHandleSetSceneData_1>

08007c42 <??ZbZclHandleSetSceneData_3>:
 8007c42:	003b      	movs	r3, r7
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f89d 2000 	ldrb.w	r2, [sp]
 8007c4a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8007c4c:	1d41      	adds	r1, r0, #5
 8007c4e:	0020      	movs	r0, r4
 8007c50:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8007c54:	47e0      	blx	ip
 8007c56:	4680      	mov	r8, r0
 8007c58:	f05f 0908 	movs.w	r9, #8
 8007c5c:	f05f 0a00 	movs.w	sl, #0
 8007c60:	f10d 0b04 	add.w	fp, sp, #4
 8007c64:	4652      	mov	r2, sl
 8007c66:	4649      	mov	r1, r9
 8007c68:	4658      	mov	r0, fp
 8007c6a:	f000 f855 	bl	8007d18 <__aeabi_memset>
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f88d 0004 	strb.w	r0, [sp, #4]
 8007c74:	2001      	movs	r0, #1
 8007c76:	f88d 0005 	strb.w	r0, [sp, #5]
 8007c7a:	78a8      	ldrb	r0, [r5, #2]
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d103      	bne.n	8007c88 <??ZbZclHandleSetSceneData_4>
 8007c80:	2001      	movs	r0, #1
 8007c82:	f88d 0006 	strb.w	r0, [sp, #6]
 8007c86:	e002      	b.n	8007c8e <??ZbZclHandleSetSceneData_5>

08007c88 <??ZbZclHandleSetSceneData_4>:
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f88d 0006 	strb.w	r0, [sp, #6]

08007c8e <??ZbZclHandleSetSceneData_5>:
 8007c8e:	2001      	movs	r0, #1
 8007c90:	f88d 0007 	strb.w	r0, [sp, #7]
 8007c94:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8007c98:	f8ad 0008 	strh.w	r0, [sp, #8]
 8007c9c:	79a8      	ldrb	r0, [r5, #6]
 8007c9e:	f88d 000a 	strb.w	r0, [sp, #10]
 8007ca2:	20f1      	movs	r0, #241	@ 0xf1
 8007ca4:	f88d 000b 	strb.w	r0, [sp, #11]
 8007ca8:	8b62      	ldrh	r2, [r4, #26]
 8007caa:	a910      	add	r1, sp, #64	@ 0x40
 8007cac:	a801      	add	r0, sp, #4
 8007cae:	f7fe fc6d 	bl	800658c <ZbZclAppendHeader>
 8007cb2:	4681      	mov	r9, r0
 8007cb4:	f1b9 0f00 	cmp.w	r9, #0
 8007cb8:	d506      	bpl.n	8007cc8 <??ZbZclHandleSetSceneData_6>
 8007cba:	2380      	movs	r3, #128	@ 0x80
 8007cbc:	002a      	movs	r2, r5
 8007cbe:	0031      	movs	r1, r6
 8007cc0:	0020      	movs	r0, r4
 8007cc2:	f00b fb2d 	bl	8013320 <ZbZclSendDefaultResponse>
 8007cc6:	e024      	b.n	8007d12 <??ZbZclHandleSetSceneData_1>

08007cc8 <??ZbZclHandleSetSceneData_6>:
 8007cc8:	46ca      	mov	sl, r9
 8007cca:	a810      	add	r0, sp, #64	@ 0x40
 8007ccc:	f800 800a 	strb.w	r8, [r0, sl]
 8007cd0:	f11a 0a01 	adds.w	sl, sl, #1
 8007cd4:	0032      	movs	r2, r6
 8007cd6:	a904      	add	r1, sp, #16
 8007cd8:	0020      	movs	r0, r4
 8007cda:	f7fc f82e 	bl	8003d3a <ZbZclClusterInitApsdeReq>
 8007cde:	a804      	add	r0, sp, #16
 8007ce0:	f116 0110 	adds.w	r1, r6, #16
 8007ce4:	2210      	movs	r2, #16
 8007ce6:	f00f faae 	bl	8017246 <__aeabi_memcpy>
 8007cea:	2000      	movs	r0, #0
 8007cec:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 8007cfc:	a810      	add	r0, sp, #64	@ 0x40
 8007cfe:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d00:	4650      	mov	r0, sl
 8007d02:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8007d06:	2300      	movs	r3, #0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	a904      	add	r1, sp, #16
 8007d0c:	68a0      	ldr	r0, [r4, #8]
 8007d0e:	f00a fe67 	bl	80129e0 <ZbApsdeDataReqCallback>

08007d12 <??ZbZclHandleSetSceneData_1>:
 8007d12:	b025      	add	sp, #148	@ 0x94
 8007d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d18 <__aeabi_memset>:
 8007d18:	b470      	push	{r4, r5, r6}
 8007d1a:	0784      	lsls	r4, r0, #30
 8007d1c:	d046      	beq.n	8007dac <__aeabi_memset+0x94>
 8007d1e:	1e4c      	subs	r4, r1, #1
 8007d20:	2900      	cmp	r1, #0
 8007d22:	d041      	beq.n	8007da8 <__aeabi_memset+0x90>
 8007d24:	b2d5      	uxtb	r5, r2
 8007d26:	4603      	mov	r3, r0
 8007d28:	e002      	b.n	8007d30 <__aeabi_memset+0x18>
 8007d2a:	1e61      	subs	r1, r4, #1
 8007d2c:	b3e4      	cbz	r4, 8007da8 <__aeabi_memset+0x90>
 8007d2e:	460c      	mov	r4, r1
 8007d30:	f803 5b01 	strb.w	r5, [r3], #1
 8007d34:	0799      	lsls	r1, r3, #30
 8007d36:	d1f8      	bne.n	8007d2a <__aeabi_memset+0x12>
 8007d38:	2c03      	cmp	r4, #3
 8007d3a:	d92e      	bls.n	8007d9a <__aeabi_memset+0x82>
 8007d3c:	b2d5      	uxtb	r5, r2
 8007d3e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007d42:	2c0f      	cmp	r4, #15
 8007d44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007d48:	d919      	bls.n	8007d7e <__aeabi_memset+0x66>
 8007d4a:	4626      	mov	r6, r4
 8007d4c:	f103 0110 	add.w	r1, r3, #16
 8007d50:	3e10      	subs	r6, #16
 8007d52:	2e0f      	cmp	r6, #15
 8007d54:	f841 5c10 	str.w	r5, [r1, #-16]
 8007d58:	f841 5c0c 	str.w	r5, [r1, #-12]
 8007d5c:	f841 5c08 	str.w	r5, [r1, #-8]
 8007d60:	f841 5c04 	str.w	r5, [r1, #-4]
 8007d64:	f101 0110 	add.w	r1, r1, #16
 8007d68:	d8f2      	bhi.n	8007d50 <__aeabi_memset+0x38>
 8007d6a:	f1a4 0110 	sub.w	r1, r4, #16
 8007d6e:	f021 010f 	bic.w	r1, r1, #15
 8007d72:	f004 040f 	and.w	r4, r4, #15
 8007d76:	3110      	adds	r1, #16
 8007d78:	2c03      	cmp	r4, #3
 8007d7a:	440b      	add	r3, r1
 8007d7c:	d90d      	bls.n	8007d9a <__aeabi_memset+0x82>
 8007d7e:	461e      	mov	r6, r3
 8007d80:	4621      	mov	r1, r4
 8007d82:	3904      	subs	r1, #4
 8007d84:	2903      	cmp	r1, #3
 8007d86:	f846 5b04 	str.w	r5, [r6], #4
 8007d8a:	d8fa      	bhi.n	8007d82 <__aeabi_memset+0x6a>
 8007d8c:	1f21      	subs	r1, r4, #4
 8007d8e:	f021 0103 	bic.w	r1, r1, #3
 8007d92:	3104      	adds	r1, #4
 8007d94:	440b      	add	r3, r1
 8007d96:	f004 0403 	and.w	r4, r4, #3
 8007d9a:	b12c      	cbz	r4, 8007da8 <__aeabi_memset+0x90>
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	441c      	add	r4, r3
 8007da0:	f803 2b01 	strb.w	r2, [r3], #1
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	d1fb      	bne.n	8007da0 <__aeabi_memset+0x88>
 8007da8:	bc70      	pop	{r4, r5, r6}
 8007daa:	4770      	bx	lr
 8007dac:	460c      	mov	r4, r1
 8007dae:	4603      	mov	r3, r0
 8007db0:	e7c2      	b.n	8007d38 <__aeabi_memset+0x20>
	...

08007dc0 <memchr>:
 8007dc0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8007dc4:	2a10      	cmp	r2, #16
 8007dc6:	db2b      	blt.n	8007e20 <memchr+0x60>
 8007dc8:	f010 0f07 	tst.w	r0, #7
 8007dcc:	d008      	beq.n	8007de0 <memchr+0x20>
 8007dce:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007dd2:	3a01      	subs	r2, #1
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	d02d      	beq.n	8007e34 <memchr+0x74>
 8007dd8:	f010 0f07 	tst.w	r0, #7
 8007ddc:	b342      	cbz	r2, 8007e30 <memchr+0x70>
 8007dde:	d1f6      	bne.n	8007dce <memchr+0xe>
 8007de0:	b4f0      	push	{r4, r5, r6, r7}
 8007de2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007de6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8007dea:	f022 0407 	bic.w	r4, r2, #7
 8007dee:	f07f 0700 	mvns.w	r7, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007df8:	3c08      	subs	r4, #8
 8007dfa:	ea85 0501 	eor.w	r5, r5, r1
 8007dfe:	ea86 0601 	eor.w	r6, r6, r1
 8007e02:	fa85 f547 	uadd8	r5, r5, r7
 8007e06:	faa3 f587 	sel	r5, r3, r7
 8007e0a:	fa86 f647 	uadd8	r6, r6, r7
 8007e0e:	faa5 f687 	sel	r6, r5, r7
 8007e12:	b98e      	cbnz	r6, 8007e38 <memchr+0x78>
 8007e14:	d1ee      	bne.n	8007df4 <memchr+0x34>
 8007e16:	bcf0      	pop	{r4, r5, r6, r7}
 8007e18:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8007e1c:	f002 0207 	and.w	r2, r2, #7
 8007e20:	b132      	cbz	r2, 8007e30 <memchr+0x70>
 8007e22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007e26:	3a01      	subs	r2, #1
 8007e28:	ea83 0301 	eor.w	r3, r3, r1
 8007e2c:	b113      	cbz	r3, 8007e34 <memchr+0x74>
 8007e2e:	d1f8      	bne.n	8007e22 <memchr+0x62>
 8007e30:	2000      	movs	r0, #0
 8007e32:	4770      	bx	lr
 8007e34:	3801      	subs	r0, #1
 8007e36:	4770      	bx	lr
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	bf06      	itte	eq
 8007e3c:	4635      	moveq	r5, r6
 8007e3e:	3803      	subeq	r0, #3
 8007e40:	3807      	subne	r0, #7
 8007e42:	f015 0f01 	tst.w	r5, #1
 8007e46:	d107      	bne.n	8007e58 <memchr+0x98>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8007e4e:	bf02      	ittt	eq
 8007e50:	3001      	addeq	r0, #1
 8007e52:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8007e56:	3001      	addeq	r0, #1
 8007e58:	bcf0      	pop	{r4, r5, r6, r7}
 8007e5a:	3801      	subs	r0, #1
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop

08007e60 <__aeabi_llsl>:
 8007e60:	4091      	lsls	r1, r2
 8007e62:	0003      	movs	r3, r0
 8007e64:	4090      	lsls	r0, r2
 8007e66:	469c      	mov	ip, r3
 8007e68:	3a20      	subs	r2, #32
 8007e6a:	4093      	lsls	r3, r2
 8007e6c:	4319      	orrs	r1, r3
 8007e6e:	4252      	negs	r2, r2
 8007e70:	4663      	mov	r3, ip
 8007e72:	40d3      	lsrs	r3, r2
 8007e74:	4319      	orrs	r1, r3
 8007e76:	4770      	bx	lr

08007e78 <__aeabi_drsub>:
 8007e78:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8007e7c:	e002      	b.n	8007e84 <__adddf3>
 8007e7e:	bf00      	nop

08007e80 <__aeabi_dsub>:
 8007e80:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08007e84 <__adddf3>:
 8007e84:	b530      	push	{r4, r5, lr}
 8007e86:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007e8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007e8e:	ea94 0f05 	teq	r4, r5
 8007e92:	bf08      	it	eq
 8007e94:	ea90 0f02 	teqeq	r0, r2
 8007e98:	bf1f      	itttt	ne
 8007e9a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007e9e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007ea2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ea6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007eaa:	f000 80e2 	beq.w	8008072 <__adddf3+0x1ee>
 8007eae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007eb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007eb6:	bfb8      	it	lt
 8007eb8:	426d      	neglt	r5, r5
 8007eba:	dd0c      	ble.n	8007ed6 <__adddf3+0x52>
 8007ebc:	442c      	add	r4, r5
 8007ebe:	ea80 0202 	eor.w	r2, r0, r2
 8007ec2:	ea81 0303 	eor.w	r3, r1, r3
 8007ec6:	ea82 0000 	eor.w	r0, r2, r0
 8007eca:	ea83 0101 	eor.w	r1, r3, r1
 8007ece:	ea80 0202 	eor.w	r2, r0, r2
 8007ed2:	ea81 0303 	eor.w	r3, r1, r3
 8007ed6:	2d36      	cmp	r5, #54	@ 0x36
 8007ed8:	bf88      	it	hi
 8007eda:	bd30      	pophi	{r4, r5, pc}
 8007edc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8007ee0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007ee4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8007ee8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007eec:	d002      	beq.n	8007ef4 <__adddf3+0x70>
 8007eee:	4240      	negs	r0, r0
 8007ef0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ef4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8007ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007efc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f00:	d002      	beq.n	8007f08 <__adddf3+0x84>
 8007f02:	4252      	negs	r2, r2
 8007f04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f08:	ea94 0f05 	teq	r4, r5
 8007f0c:	f000 80a7 	beq.w	800805e <__adddf3+0x1da>
 8007f10:	f1a4 0401 	sub.w	r4, r4, #1
 8007f14:	f1d5 0e20 	rsbs	lr, r5, #32
 8007f18:	db0d      	blt.n	8007f36 <__adddf3+0xb2>
 8007f1a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007f1e:	fa22 f205 	lsr.w	r2, r2, r5
 8007f22:	1880      	adds	r0, r0, r2
 8007f24:	f141 0100 	adc.w	r1, r1, #0
 8007f28:	fa03 f20e 	lsl.w	r2, r3, lr
 8007f2c:	1880      	adds	r0, r0, r2
 8007f2e:	fa43 f305 	asr.w	r3, r3, r5
 8007f32:	4159      	adcs	r1, r3
 8007f34:	e00e      	b.n	8007f54 <__adddf3+0xd0>
 8007f36:	f1a5 0520 	sub.w	r5, r5, #32
 8007f3a:	f10e 0e20 	add.w	lr, lr, #32
 8007f3e:	2a01      	cmp	r2, #1
 8007f40:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007f44:	bf28      	it	cs
 8007f46:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007f4a:	fa43 f305 	asr.w	r3, r3, r5
 8007f4e:	18c0      	adds	r0, r0, r3
 8007f50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007f54:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007f58:	d507      	bpl.n	8007f6a <__adddf3+0xe6>
 8007f5a:	f04f 0e00 	mov.w	lr, #0
 8007f5e:	f1dc 0c00 	rsbs	ip, ip, #0
 8007f62:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007f66:	eb6e 0101 	sbc.w	r1, lr, r1
 8007f6a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007f6e:	d31b      	bcc.n	8007fa8 <__adddf3+0x124>
 8007f70:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007f74:	d30c      	bcc.n	8007f90 <__adddf3+0x10c>
 8007f76:	0849      	lsrs	r1, r1, #1
 8007f78:	ea5f 0030 	movs.w	r0, r0, rrx
 8007f7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007f80:	f104 0401 	add.w	r4, r4, #1
 8007f84:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007f88:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8007f8c:	f080 809a 	bcs.w	80080c4 <__adddf3+0x240>
 8007f90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8007f94:	bf08      	it	eq
 8007f96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007f9a:	f150 0000 	adcs.w	r0, r0, #0
 8007f9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007fa2:	ea41 0105 	orr.w	r1, r1, r5
 8007fa6:	bd30      	pop	{r4, r5, pc}
 8007fa8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007fac:	4140      	adcs	r0, r0
 8007fae:	eb41 0101 	adc.w	r1, r1, r1
 8007fb2:	3c01      	subs	r4, #1
 8007fb4:	bf28      	it	cs
 8007fb6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8007fba:	d2e9      	bcs.n	8007f90 <__adddf3+0x10c>
 8007fbc:	f091 0f00 	teq	r1, #0
 8007fc0:	bf04      	itt	eq
 8007fc2:	4601      	moveq	r1, r0
 8007fc4:	2000      	moveq	r0, #0
 8007fc6:	fab1 f381 	clz	r3, r1
 8007fca:	bf08      	it	eq
 8007fcc:	3320      	addeq	r3, #32
 8007fce:	f1a3 030b 	sub.w	r3, r3, #11
 8007fd2:	f1b3 0220 	subs.w	r2, r3, #32
 8007fd6:	da0c      	bge.n	8007ff2 <__adddf3+0x16e>
 8007fd8:	320c      	adds	r2, #12
 8007fda:	dd08      	ble.n	8007fee <__adddf3+0x16a>
 8007fdc:	f102 0c14 	add.w	ip, r2, #20
 8007fe0:	f1c2 020c 	rsb	r2, r2, #12
 8007fe4:	fa01 f00c 	lsl.w	r0, r1, ip
 8007fe8:	fa21 f102 	lsr.w	r1, r1, r2
 8007fec:	e00c      	b.n	8008008 <__adddf3+0x184>
 8007fee:	f102 0214 	add.w	r2, r2, #20
 8007ff2:	bfd8      	it	le
 8007ff4:	f1c2 0c20 	rsble	ip, r2, #32
 8007ff8:	fa01 f102 	lsl.w	r1, r1, r2
 8007ffc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008000:	bfdc      	itt	le
 8008002:	ea41 010c 	orrle.w	r1, r1, ip
 8008006:	4090      	lslle	r0, r2
 8008008:	1ae4      	subs	r4, r4, r3
 800800a:	bfa2      	ittt	ge
 800800c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008010:	4329      	orrge	r1, r5
 8008012:	bd30      	popge	{r4, r5, pc}
 8008014:	ea6f 0404 	mvn.w	r4, r4
 8008018:	3c1f      	subs	r4, #31
 800801a:	da1c      	bge.n	8008056 <__adddf3+0x1d2>
 800801c:	340c      	adds	r4, #12
 800801e:	dc0e      	bgt.n	800803e <__adddf3+0x1ba>
 8008020:	f104 0414 	add.w	r4, r4, #20
 8008024:	f1c4 0220 	rsb	r2, r4, #32
 8008028:	fa20 f004 	lsr.w	r0, r0, r4
 800802c:	fa01 f302 	lsl.w	r3, r1, r2
 8008030:	ea40 0003 	orr.w	r0, r0, r3
 8008034:	fa21 f304 	lsr.w	r3, r1, r4
 8008038:	ea45 0103 	orr.w	r1, r5, r3
 800803c:	bd30      	pop	{r4, r5, pc}
 800803e:	f1c4 040c 	rsb	r4, r4, #12
 8008042:	f1c4 0220 	rsb	r2, r4, #32
 8008046:	fa20 f002 	lsr.w	r0, r0, r2
 800804a:	fa01 f304 	lsl.w	r3, r1, r4
 800804e:	ea40 0003 	orr.w	r0, r0, r3
 8008052:	4629      	mov	r1, r5
 8008054:	bd30      	pop	{r4, r5, pc}
 8008056:	fa21 f004 	lsr.w	r0, r1, r4
 800805a:	4629      	mov	r1, r5
 800805c:	bd30      	pop	{r4, r5, pc}
 800805e:	f094 0f00 	teq	r4, #0
 8008062:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8008066:	bf06      	itte	eq
 8008068:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800806c:	3401      	addeq	r4, #1
 800806e:	3d01      	subne	r5, #1
 8008070:	e74e      	b.n	8007f10 <__adddf3+0x8c>
 8008072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008076:	bf18      	it	ne
 8008078:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800807c:	d029      	beq.n	80080d2 <__adddf3+0x24e>
 800807e:	ea94 0f05 	teq	r4, r5
 8008082:	bf08      	it	eq
 8008084:	ea90 0f02 	teqeq	r0, r2
 8008088:	d005      	beq.n	8008096 <__adddf3+0x212>
 800808a:	ea54 0c00 	orrs.w	ip, r4, r0
 800808e:	bf04      	itt	eq
 8008090:	4619      	moveq	r1, r3
 8008092:	4610      	moveq	r0, r2
 8008094:	bd30      	pop	{r4, r5, pc}
 8008096:	ea91 0f03 	teq	r1, r3
 800809a:	bf1e      	ittt	ne
 800809c:	2100      	movne	r1, #0
 800809e:	2000      	movne	r0, #0
 80080a0:	bd30      	popne	{r4, r5, pc}
 80080a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80080a6:	d105      	bne.n	80080b4 <__adddf3+0x230>
 80080a8:	0040      	lsls	r0, r0, #1
 80080aa:	4149      	adcs	r1, r1
 80080ac:	bf28      	it	cs
 80080ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80080b2:	bd30      	pop	{r4, r5, pc}
 80080b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80080b8:	bf3c      	itt	cc
 80080ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80080be:	bd30      	popcc	{r4, r5, pc}
 80080c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80080c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80080c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80080cc:	f04f 0000 	mov.w	r0, #0
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80080d6:	bf1a      	itte	ne
 80080d8:	4619      	movne	r1, r3
 80080da:	4610      	movne	r0, r2
 80080dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80080e0:	bf1c      	itt	ne
 80080e2:	460b      	movne	r3, r1
 80080e4:	4602      	movne	r2, r0
 80080e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80080ea:	bf06      	itte	eq
 80080ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80080f0:	ea91 0f03 	teqeq	r1, r3
 80080f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80080f8:	bd30      	pop	{r4, r5, pc}
 80080fa:	bf00      	nop

080080fc <__aeabi_ui2d>:
 80080fc:	f090 0f00 	teq	r0, #0
 8008100:	bf04      	itt	eq
 8008102:	2100      	moveq	r1, #0
 8008104:	4770      	bxeq	lr
 8008106:	b530      	push	{r4, r5, lr}
 8008108:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800810c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008110:	f04f 0500 	mov.w	r5, #0
 8008114:	f04f 0100 	mov.w	r1, #0
 8008118:	e750      	b.n	8007fbc <__adddf3+0x138>
 800811a:	bf00      	nop

0800811c <__aeabi_i2d>:
 800811c:	f090 0f00 	teq	r0, #0
 8008120:	bf04      	itt	eq
 8008122:	2100      	moveq	r1, #0
 8008124:	4770      	bxeq	lr
 8008126:	b530      	push	{r4, r5, lr}
 8008128:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800812c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8008130:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8008134:	bf48      	it	mi
 8008136:	4240      	negmi	r0, r0
 8008138:	f04f 0100 	mov.w	r1, #0
 800813c:	e73e      	b.n	8007fbc <__adddf3+0x138>
 800813e:	bf00      	nop

08008140 <__aeabi_f2d>:
 8008140:	0042      	lsls	r2, r0, #1
 8008142:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008146:	ea4f 0131 	mov.w	r1, r1, rrx
 800814a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800814e:	bf1f      	itttt	ne
 8008150:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8008154:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8008158:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800815c:	4770      	bxne	lr
 800815e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8008162:	bf08      	it	eq
 8008164:	4770      	bxeq	lr
 8008166:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800816a:	bf04      	itt	eq
 800816c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008170:	4770      	bxeq	lr
 8008172:	b530      	push	{r4, r5, lr}
 8008174:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008178:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800817c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008180:	e71c      	b.n	8007fbc <__adddf3+0x138>
 8008182:	bf00      	nop

08008184 <__aeabi_ul2d>:
 8008184:	ea50 0201 	orrs.w	r2, r0, r1
 8008188:	bf08      	it	eq
 800818a:	4770      	bxeq	lr
 800818c:	b530      	push	{r4, r5, lr}
 800818e:	f04f 0500 	mov.w	r5, #0
 8008192:	e00a      	b.n	80081aa <__aeabi_l2d+0x16>

08008194 <__aeabi_l2d>:
 8008194:	ea50 0201 	orrs.w	r2, r0, r1
 8008198:	bf08      	it	eq
 800819a:	4770      	bxeq	lr
 800819c:	b530      	push	{r4, r5, lr}
 800819e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80081a2:	d502      	bpl.n	80081aa <__aeabi_l2d+0x16>
 80081a4:	4240      	negs	r0, r0
 80081a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80081ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80081b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80081b6:	f43f aed8 	beq.w	8007f6a <__adddf3+0xe6>
 80081ba:	f04f 0203 	mov.w	r2, #3
 80081be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081c2:	bf18      	it	ne
 80081c4:	3203      	addne	r2, #3
 80081c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081ca:	bf18      	it	ne
 80081cc:	3203      	addne	r2, #3
 80081ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80081d2:	f1c2 0320 	rsb	r3, r2, #32
 80081d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80081da:	fa20 f002 	lsr.w	r0, r0, r2
 80081de:	fa01 fe03 	lsl.w	lr, r1, r3
 80081e2:	ea40 000e 	orr.w	r0, r0, lr
 80081e6:	fa21 f102 	lsr.w	r1, r1, r2
 80081ea:	4414      	add	r4, r2
 80081ec:	e6bd      	b.n	8007f6a <__adddf3+0xe6>
 80081ee:	bf00      	nop

080081f0 <__aeabi_dmul>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80081f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80081fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80081fe:	bf1d      	ittte	ne
 8008200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008204:	ea94 0f0c 	teqne	r4, ip
 8008208:	ea95 0f0c 	teqne	r5, ip
 800820c:	f000 f8de 	bleq	80083cc <__aeabi_dmul+0x1dc>
 8008210:	442c      	add	r4, r5
 8008212:	ea81 0603 	eor.w	r6, r1, r3
 8008216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800821a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800821e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008222:	bf18      	it	ne
 8008224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008228:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800822c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008230:	d038      	beq.n	80082a4 <__aeabi_dmul+0xb4>
 8008232:	fba0 ce02 	umull	ip, lr, r0, r2
 8008236:	f04f 0500 	mov.w	r5, #0
 800823a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800823e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8008242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008246:	f04f 0600 	mov.w	r6, #0
 800824a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800824e:	f09c 0f00 	teq	ip, #0
 8008252:	bf18      	it	ne
 8008254:	f04e 0e01 	orrne.w	lr, lr, #1
 8008258:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800825c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8008260:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8008264:	d204      	bcs.n	8008270 <__aeabi_dmul+0x80>
 8008266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800826a:	416d      	adcs	r5, r5
 800826c:	eb46 0606 	adc.w	r6, r6, r6
 8008270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800827c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008284:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008288:	bf88      	it	hi
 800828a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800828e:	d81e      	bhi.n	80082ce <__aeabi_dmul+0xde>
 8008290:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8008294:	bf08      	it	eq
 8008296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800829a:	f150 0000 	adcs.w	r0, r0, #0
 800829e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80082a8:	ea46 0101 	orr.w	r1, r6, r1
 80082ac:	ea40 0002 	orr.w	r0, r0, r2
 80082b0:	ea81 0103 	eor.w	r1, r1, r3
 80082b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80082b8:	bfc2      	ittt	gt
 80082ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80082be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80082c2:	bd70      	popgt	{r4, r5, r6, pc}
 80082c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80082c8:	f04f 0e00 	mov.w	lr, #0
 80082cc:	3c01      	subs	r4, #1
 80082ce:	f300 80ab 	bgt.w	8008428 <__aeabi_dmul+0x238>
 80082d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80082d6:	bfde      	ittt	le
 80082d8:	2000      	movle	r0, #0
 80082da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80082de:	bd70      	pople	{r4, r5, r6, pc}
 80082e0:	f1c4 0400 	rsb	r4, r4, #0
 80082e4:	3c20      	subs	r4, #32
 80082e6:	da35      	bge.n	8008354 <__aeabi_dmul+0x164>
 80082e8:	340c      	adds	r4, #12
 80082ea:	dc1b      	bgt.n	8008324 <__aeabi_dmul+0x134>
 80082ec:	f104 0414 	add.w	r4, r4, #20
 80082f0:	f1c4 0520 	rsb	r5, r4, #32
 80082f4:	fa00 f305 	lsl.w	r3, r0, r5
 80082f8:	fa20 f004 	lsr.w	r0, r0, r4
 80082fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008300:	ea40 0002 	orr.w	r0, r0, r2
 8008304:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8008308:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800830c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008310:	fa21 f604 	lsr.w	r6, r1, r4
 8008314:	eb42 0106 	adc.w	r1, r2, r6
 8008318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800831c:	bf08      	it	eq
 800831e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	f1c4 040c 	rsb	r4, r4, #12
 8008328:	f1c4 0520 	rsb	r5, r4, #32
 800832c:	fa00 f304 	lsl.w	r3, r0, r4
 8008330:	fa20 f005 	lsr.w	r0, r0, r5
 8008334:	fa01 f204 	lsl.w	r2, r1, r4
 8008338:	ea40 0002 	orr.w	r0, r0, r2
 800833c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008344:	f141 0100 	adc.w	r1, r1, #0
 8008348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800834c:	bf08      	it	eq
 800834e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	f1c4 0520 	rsb	r5, r4, #32
 8008358:	fa00 f205 	lsl.w	r2, r0, r5
 800835c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008360:	fa20 f304 	lsr.w	r3, r0, r4
 8008364:	fa01 f205 	lsl.w	r2, r1, r5
 8008368:	ea43 0302 	orr.w	r3, r3, r2
 800836c:	fa21 f004 	lsr.w	r0, r1, r4
 8008370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008374:	fa21 f204 	lsr.w	r2, r1, r4
 8008378:	ea20 0002 	bic.w	r0, r0, r2
 800837c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008384:	bf08      	it	eq
 8008386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f094 0f00 	teq	r4, #0
 8008390:	d10f      	bne.n	80083b2 <__aeabi_dmul+0x1c2>
 8008392:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8008396:	0040      	lsls	r0, r0, #1
 8008398:	eb41 0101 	adc.w	r1, r1, r1
 800839c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80083a0:	bf08      	it	eq
 80083a2:	3c01      	subeq	r4, #1
 80083a4:	d0f7      	beq.n	8008396 <__aeabi_dmul+0x1a6>
 80083a6:	ea41 0106 	orr.w	r1, r1, r6
 80083aa:	f095 0f00 	teq	r5, #0
 80083ae:	bf18      	it	ne
 80083b0:	4770      	bxne	lr
 80083b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80083b6:	0052      	lsls	r2, r2, #1
 80083b8:	eb43 0303 	adc.w	r3, r3, r3
 80083bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80083c0:	bf08      	it	eq
 80083c2:	3d01      	subeq	r5, #1
 80083c4:	d0f7      	beq.n	80083b6 <__aeabi_dmul+0x1c6>
 80083c6:	ea43 0306 	orr.w	r3, r3, r6
 80083ca:	4770      	bx	lr
 80083cc:	ea94 0f0c 	teq	r4, ip
 80083d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80083d4:	bf18      	it	ne
 80083d6:	ea95 0f0c 	teqne	r5, ip
 80083da:	d00c      	beq.n	80083f6 <__aeabi_dmul+0x206>
 80083dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80083e0:	bf18      	it	ne
 80083e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80083e6:	d1d1      	bne.n	800838c <__aeabi_dmul+0x19c>
 80083e8:	ea81 0103 	eor.w	r1, r1, r3
 80083ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80083f0:	f04f 0000 	mov.w	r0, #0
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80083fa:	bf06      	itte	eq
 80083fc:	4610      	moveq	r0, r2
 80083fe:	4619      	moveq	r1, r3
 8008400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008404:	d019      	beq.n	800843a <__aeabi_dmul+0x24a>
 8008406:	ea94 0f0c 	teq	r4, ip
 800840a:	d102      	bne.n	8008412 <__aeabi_dmul+0x222>
 800840c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008410:	d113      	bne.n	800843a <__aeabi_dmul+0x24a>
 8008412:	ea95 0f0c 	teq	r5, ip
 8008416:	d105      	bne.n	8008424 <__aeabi_dmul+0x234>
 8008418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800841c:	bf1c      	itt	ne
 800841e:	4610      	movne	r0, r2
 8008420:	4619      	movne	r1, r3
 8008422:	d10a      	bne.n	800843a <__aeabi_dmul+0x24a>
 8008424:	ea81 0103 	eor.w	r1, r1, r3
 8008428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800842c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8008430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	bd70      	pop	{r4, r5, r6, pc}
 800843a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800843e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8008442:	bd70      	pop	{r4, r5, r6, pc}

08008444 <__aeabi_ddiv>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800844a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800844e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008452:	bf1d      	ittte	ne
 8008454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008458:	ea94 0f0c 	teqne	r4, ip
 800845c:	ea95 0f0c 	teqne	r5, ip
 8008460:	f000 f8a7 	bleq	80085b2 <__aeabi_ddiv+0x16e>
 8008464:	eba4 0405 	sub.w	r4, r4, r5
 8008468:	ea81 0e03 	eor.w	lr, r1, r3
 800846c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008470:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008474:	f000 8088 	beq.w	8008588 <__aeabi_ddiv+0x144>
 8008478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800847c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008480:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008484:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008488:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800848c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008490:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008494:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008498:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800849c:	429d      	cmp	r5, r3
 800849e:	bf08      	it	eq
 80084a0:	4296      	cmpeq	r6, r2
 80084a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80084a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80084aa:	d202      	bcs.n	80084b2 <__aeabi_ddiv+0x6e>
 80084ac:	085b      	lsrs	r3, r3, #1
 80084ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80084b2:	1ab6      	subs	r6, r6, r2
 80084b4:	eb65 0503 	sbc.w	r5, r5, r3
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80084be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80084c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80084c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80084ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084ce:	bf22      	ittt	cs
 80084d0:	1ab6      	subcs	r6, r6, r2
 80084d2:	4675      	movcs	r5, lr
 80084d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80084d8:	085b      	lsrs	r3, r3, #1
 80084da:	ea4f 0232 	mov.w	r2, r2, rrx
 80084de:	ebb6 0e02 	subs.w	lr, r6, r2
 80084e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084e6:	bf22      	ittt	cs
 80084e8:	1ab6      	subcs	r6, r6, r2
 80084ea:	4675      	movcs	r5, lr
 80084ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80084f0:	085b      	lsrs	r3, r3, #1
 80084f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80084f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80084fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084fe:	bf22      	ittt	cs
 8008500:	1ab6      	subcs	r6, r6, r2
 8008502:	4675      	movcs	r5, lr
 8008504:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	ea4f 0232 	mov.w	r2, r2, rrx
 800850e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008512:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008516:	bf22      	ittt	cs
 8008518:	1ab6      	subcs	r6, r6, r2
 800851a:	4675      	movcs	r5, lr
 800851c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008520:	ea55 0e06 	orrs.w	lr, r5, r6
 8008524:	d018      	beq.n	8008558 <__aeabi_ddiv+0x114>
 8008526:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800852a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800852e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008532:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008536:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800853a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800853e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008542:	d1c0      	bne.n	80084c6 <__aeabi_ddiv+0x82>
 8008544:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008548:	d10b      	bne.n	8008562 <__aeabi_ddiv+0x11e>
 800854a:	ea41 0100 	orr.w	r1, r1, r0
 800854e:	f04f 0000 	mov.w	r0, #0
 8008552:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008556:	e7b6      	b.n	80084c6 <__aeabi_ddiv+0x82>
 8008558:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800855c:	bf04      	itt	eq
 800855e:	4301      	orreq	r1, r0
 8008560:	2000      	moveq	r0, #0
 8008562:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008566:	bf88      	it	hi
 8008568:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800856c:	f63f aeaf 	bhi.w	80082ce <__aeabi_dmul+0xde>
 8008570:	ebb5 0c03 	subs.w	ip, r5, r3
 8008574:	bf04      	itt	eq
 8008576:	ebb6 0c02 	subseq.w	ip, r6, r2
 800857a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800857e:	f150 0000 	adcs.w	r0, r0, #0
 8008582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800858c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008590:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008594:	bfc2      	ittt	gt
 8008596:	ebd4 050c 	rsbsgt	r5, r4, ip
 800859a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800859e:	bd70      	popgt	{r4, r5, r6, pc}
 80085a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80085a4:	f04f 0e00 	mov.w	lr, #0
 80085a8:	3c01      	subs	r4, #1
 80085aa:	e690      	b.n	80082ce <__aeabi_dmul+0xde>
 80085ac:	ea45 0e06 	orr.w	lr, r5, r6
 80085b0:	e68d      	b.n	80082ce <__aeabi_dmul+0xde>
 80085b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085b6:	ea94 0f0c 	teq	r4, ip
 80085ba:	bf08      	it	eq
 80085bc:	ea95 0f0c 	teqeq	r5, ip
 80085c0:	f43f af3b 	beq.w	800843a <__aeabi_dmul+0x24a>
 80085c4:	ea94 0f0c 	teq	r4, ip
 80085c8:	d10a      	bne.n	80085e0 <__aeabi_ddiv+0x19c>
 80085ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085ce:	f47f af34 	bne.w	800843a <__aeabi_dmul+0x24a>
 80085d2:	ea95 0f0c 	teq	r5, ip
 80085d6:	f47f af25 	bne.w	8008424 <__aeabi_dmul+0x234>
 80085da:	4610      	mov	r0, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	e72c      	b.n	800843a <__aeabi_dmul+0x24a>
 80085e0:	ea95 0f0c 	teq	r5, ip
 80085e4:	d106      	bne.n	80085f4 <__aeabi_ddiv+0x1b0>
 80085e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80085ea:	f43f aefd 	beq.w	80083e8 <__aeabi_dmul+0x1f8>
 80085ee:	4610      	mov	r0, r2
 80085f0:	4619      	mov	r1, r3
 80085f2:	e722      	b.n	800843a <__aeabi_dmul+0x24a>
 80085f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80085f8:	bf18      	it	ne
 80085fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80085fe:	f47f aec5 	bne.w	800838c <__aeabi_dmul+0x19c>
 8008602:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008606:	f47f af0d 	bne.w	8008424 <__aeabi_dmul+0x234>
 800860a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800860e:	f47f aeeb 	bne.w	80083e8 <__aeabi_dmul+0x1f8>
 8008612:	e712      	b.n	800843a <__aeabi_dmul+0x24a>

08008614 <__gedf2>:
 8008614:	f04f 3cff 	mov.w	ip, #4294967295
 8008618:	e006      	b.n	8008628 <__cmpdf2+0x4>
 800861a:	bf00      	nop

0800861c <__ledf2>:
 800861c:	f04f 0c01 	mov.w	ip, #1
 8008620:	e002      	b.n	8008628 <__cmpdf2+0x4>
 8008622:	bf00      	nop

08008624 <__cmpdf2>:
 8008624:	f04f 0c01 	mov.w	ip, #1
 8008628:	f84d cd04 	str.w	ip, [sp, #-4]!
 800862c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008634:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008638:	bf18      	it	ne
 800863a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800863e:	d01b      	beq.n	8008678 <__cmpdf2+0x54>
 8008640:	b001      	add	sp, #4
 8008642:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008646:	bf0c      	ite	eq
 8008648:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800864c:	ea91 0f03 	teqne	r1, r3
 8008650:	bf02      	ittt	eq
 8008652:	ea90 0f02 	teqeq	r0, r2
 8008656:	2000      	moveq	r0, #0
 8008658:	4770      	bxeq	lr
 800865a:	f110 0f00 	cmn.w	r0, #0
 800865e:	ea91 0f03 	teq	r1, r3
 8008662:	bf58      	it	pl
 8008664:	4299      	cmppl	r1, r3
 8008666:	bf08      	it	eq
 8008668:	4290      	cmpeq	r0, r2
 800866a:	bf2c      	ite	cs
 800866c:	17d8      	asrcs	r0, r3, #31
 800866e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008672:	f040 0001 	orr.w	r0, r0, #1
 8008676:	4770      	bx	lr
 8008678:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800867c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008680:	d102      	bne.n	8008688 <__cmpdf2+0x64>
 8008682:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008686:	d107      	bne.n	8008698 <__cmpdf2+0x74>
 8008688:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800868c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008690:	d1d6      	bne.n	8008640 <__cmpdf2+0x1c>
 8008692:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008696:	d0d3      	beq.n	8008640 <__cmpdf2+0x1c>
 8008698:	f85d 0b04 	ldr.w	r0, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop

080086a0 <__aeabi_cdrcmple>:
 80086a0:	4684      	mov	ip, r0
 80086a2:	4610      	mov	r0, r2
 80086a4:	4662      	mov	r2, ip
 80086a6:	468c      	mov	ip, r1
 80086a8:	4619      	mov	r1, r3
 80086aa:	4663      	mov	r3, ip
 80086ac:	e000      	b.n	80086b0 <__aeabi_cdcmpeq>
 80086ae:	bf00      	nop

080086b0 <__aeabi_cdcmpeq>:
 80086b0:	b501      	push	{r0, lr}
 80086b2:	f7ff ffb7 	bl	8008624 <__cmpdf2>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	bf48      	it	mi
 80086ba:	f110 0f00 	cmnmi.w	r0, #0
 80086be:	bd01      	pop	{r0, pc}

080086c0 <__aeabi_dcmpeq>:
 80086c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086c4:	f7ff fff4 	bl	80086b0 <__aeabi_cdcmpeq>
 80086c8:	bf0c      	ite	eq
 80086ca:	2001      	moveq	r0, #1
 80086cc:	2000      	movne	r0, #0
 80086ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80086d2:	bf00      	nop

080086d4 <__aeabi_dcmplt>:
 80086d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086d8:	f7ff ffea 	bl	80086b0 <__aeabi_cdcmpeq>
 80086dc:	bf34      	ite	cc
 80086de:	2001      	movcc	r0, #1
 80086e0:	2000      	movcs	r0, #0
 80086e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80086e6:	bf00      	nop

080086e8 <__aeabi_dcmple>:
 80086e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086ec:	f7ff ffe0 	bl	80086b0 <__aeabi_cdcmpeq>
 80086f0:	bf94      	ite	ls
 80086f2:	2001      	movls	r0, #1
 80086f4:	2000      	movhi	r0, #0
 80086f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80086fa:	bf00      	nop

080086fc <__aeabi_dcmpge>:
 80086fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008700:	f7ff ffce 	bl	80086a0 <__aeabi_cdrcmple>
 8008704:	bf94      	ite	ls
 8008706:	2001      	movls	r0, #1
 8008708:	2000      	movhi	r0, #0
 800870a:	f85d fb08 	ldr.w	pc, [sp], #8
 800870e:	bf00      	nop

08008710 <__aeabi_dcmpgt>:
 8008710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008714:	f7ff ffc4 	bl	80086a0 <__aeabi_cdrcmple>
 8008718:	bf34      	ite	cc
 800871a:	2001      	movcc	r0, #1
 800871c:	2000      	movcs	r0, #0
 800871e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008722:	bf00      	nop

08008724 <__aeabi_dcmpun>:
 8008724:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008728:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800872c:	d102      	bne.n	8008734 <__aeabi_dcmpun+0x10>
 800872e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008732:	d10a      	bne.n	800874a <__aeabi_dcmpun+0x26>
 8008734:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800873c:	d102      	bne.n	8008744 <__aeabi_dcmpun+0x20>
 800873e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008742:	d102      	bne.n	800874a <__aeabi_dcmpun+0x26>
 8008744:	f04f 0000 	mov.w	r0, #0
 8008748:	4770      	bx	lr
 800874a:	f04f 0001 	mov.w	r0, #1
 800874e:	4770      	bx	lr

08008750 <__aeabi_d2iz>:
 8008750:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008754:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008758:	d215      	bcs.n	8008786 <__aeabi_d2iz+0x36>
 800875a:	d511      	bpl.n	8008780 <__aeabi_d2iz+0x30>
 800875c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008760:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008764:	d912      	bls.n	800878c <__aeabi_d2iz+0x3c>
 8008766:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800876a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800876e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008772:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008776:	fa23 f002 	lsr.w	r0, r3, r2
 800877a:	bf18      	it	ne
 800877c:	4240      	negne	r0, r0
 800877e:	4770      	bx	lr
 8008780:	f04f 0000 	mov.w	r0, #0
 8008784:	4770      	bx	lr
 8008786:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800878a:	d105      	bne.n	8008798 <__aeabi_d2iz+0x48>
 800878c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008790:	bf08      	it	eq
 8008792:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008796:	4770      	bx	lr
 8008798:	f04f 0000 	mov.w	r0, #0
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop

080087a0 <__aeabi_d2uiz>:
 80087a0:	004a      	lsls	r2, r1, #1
 80087a2:	d211      	bcs.n	80087c8 <__aeabi_d2uiz+0x28>
 80087a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80087a8:	d211      	bcs.n	80087ce <__aeabi_d2uiz+0x2e>
 80087aa:	d50d      	bpl.n	80087c8 <__aeabi_d2uiz+0x28>
 80087ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80087b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80087b4:	d40e      	bmi.n	80087d4 <__aeabi_d2uiz+0x34>
 80087b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80087ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80087c2:	fa23 f002 	lsr.w	r0, r3, r2
 80087c6:	4770      	bx	lr
 80087c8:	f04f 0000 	mov.w	r0, #0
 80087cc:	4770      	bx	lr
 80087ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80087d2:	d102      	bne.n	80087da <__aeabi_d2uiz+0x3a>
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	4770      	bx	lr
 80087da:	f04f 0000 	mov.w	r0, #0
 80087de:	4770      	bx	lr

080087e0 <__aeabi_d2f>:
 80087e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80087e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80087e8:	bf24      	itt	cs
 80087ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80087ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80087f2:	d90d      	bls.n	8008810 <__aeabi_d2f+0x30>
 80087f4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80087f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80087fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008800:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008804:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008808:	bf08      	it	eq
 800880a:	f020 0001 	biceq.w	r0, r0, #1
 800880e:	4770      	bx	lr
 8008810:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008814:	d121      	bne.n	800885a <__aeabi_d2f+0x7a>
 8008816:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800881a:	bfbc      	itt	lt
 800881c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008820:	4770      	bxlt	lr
 8008822:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008826:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800882a:	f1c2 0218 	rsb	r2, r2, #24
 800882e:	f1c2 0c20 	rsb	ip, r2, #32
 8008832:	fa10 f30c 	lsls.w	r3, r0, ip
 8008836:	fa20 f002 	lsr.w	r0, r0, r2
 800883a:	bf18      	it	ne
 800883c:	f040 0001 	orrne.w	r0, r0, #1
 8008840:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008844:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008848:	fa03 fc0c 	lsl.w	ip, r3, ip
 800884c:	ea40 000c 	orr.w	r0, r0, ip
 8008850:	fa23 f302 	lsr.w	r3, r3, r2
 8008854:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008858:	e7cc      	b.n	80087f4 <__aeabi_d2f+0x14>
 800885a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800885e:	d107      	bne.n	8008870 <__aeabi_d2f+0x90>
 8008860:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008864:	bf1e      	ittt	ne
 8008866:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800886a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800886e:	4770      	bxne	lr
 8008870:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008874:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008878:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop

08008880 <__aeabi_uldivmod>:
 8008880:	b953      	cbnz	r3, 8008898 <__aeabi_uldivmod+0x18>
 8008882:	b94a      	cbnz	r2, 8008898 <__aeabi_uldivmod+0x18>
 8008884:	2900      	cmp	r1, #0
 8008886:	bf08      	it	eq
 8008888:	2800      	cmpeq	r0, #0
 800888a:	bf1c      	itt	ne
 800888c:	f04f 31ff 	movne.w	r1, #4294967295
 8008890:	f04f 30ff 	movne.w	r0, #4294967295
 8008894:	f000 b9d4 	b.w	8008c40 <__aeabi_idiv0>
 8008898:	f1ad 0c08 	sub.w	ip, sp, #8
 800889c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80088a0:	f000 f870 	bl	8008984 <__udivmoddi4>
 80088a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80088a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ac:	b004      	add	sp, #16
 80088ae:	4770      	bx	lr

080088b0 <__aeabi_f2lz>:
 80088b0:	ee07 0a90 	vmov	s15, r0
 80088b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088bc:	d401      	bmi.n	80088c2 <__aeabi_f2lz+0x12>
 80088be:	f000 b823 	b.w	8008908 <__aeabi_f2ulz>
 80088c2:	eef1 7a67 	vneg.f32	s15, s15
 80088c6:	b508      	push	{r3, lr}
 80088c8:	ee17 0a90 	vmov	r0, s15
 80088cc:	f000 f81c 	bl	8008908 <__aeabi_f2ulz>
 80088d0:	4240      	negs	r0, r0
 80088d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80088d6:	bd08      	pop	{r3, pc}

080088d8 <__aeabi_d2lz>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	2200      	movs	r2, #0
 80088dc:	2300      	movs	r3, #0
 80088de:	4604      	mov	r4, r0
 80088e0:	460d      	mov	r5, r1
 80088e2:	f7ff fef7 	bl	80086d4 <__aeabi_dcmplt>
 80088e6:	b928      	cbnz	r0, 80088f4 <__aeabi_d2lz+0x1c>
 80088e8:	4620      	mov	r0, r4
 80088ea:	4629      	mov	r1, r5
 80088ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f0:	f000 b82a 	b.w	8008948 <__aeabi_d2ulz>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80088fa:	f000 f825 	bl	8008948 <__aeabi_d2ulz>
 80088fe:	4240      	negs	r0, r0
 8008900:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	bf00      	nop

08008908 <__aeabi_f2ulz>:
 8008908:	b5d0      	push	{r4, r6, r7, lr}
 800890a:	f7ff fc19 	bl	8008140 <__aeabi_f2d>
 800890e:	4b0c      	ldr	r3, [pc, #48]	@ (8008940 <__aeabi_f2ulz+0x38>)
 8008910:	2200      	movs	r2, #0
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	f7ff fc6b 	bl	80081f0 <__aeabi_dmul>
 800891a:	f7ff ff41 	bl	80087a0 <__aeabi_d2uiz>
 800891e:	4604      	mov	r4, r0
 8008920:	f7ff fbec 	bl	80080fc <__aeabi_ui2d>
 8008924:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <__aeabi_f2ulz+0x3c>)
 8008926:	2200      	movs	r2, #0
 8008928:	f7ff fc62 	bl	80081f0 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7ff faa4 	bl	8007e80 <__aeabi_dsub>
 8008938:	f7ff ff32 	bl	80087a0 <__aeabi_d2uiz>
 800893c:	4621      	mov	r1, r4
 800893e:	bdd0      	pop	{r4, r6, r7, pc}
 8008940:	3df00000 	.word	0x3df00000
 8008944:	41f00000 	.word	0x41f00000

08008948 <__aeabi_d2ulz>:
 8008948:	b5d0      	push	{r4, r6, r7, lr}
 800894a:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <__aeabi_d2ulz+0x34>)
 800894c:	2200      	movs	r2, #0
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	f7ff fc4d 	bl	80081f0 <__aeabi_dmul>
 8008956:	f7ff ff23 	bl	80087a0 <__aeabi_d2uiz>
 800895a:	4604      	mov	r4, r0
 800895c:	f7ff fbce 	bl	80080fc <__aeabi_ui2d>
 8008960:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <__aeabi_d2ulz+0x38>)
 8008962:	2200      	movs	r2, #0
 8008964:	f7ff fc44 	bl	80081f0 <__aeabi_dmul>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4630      	mov	r0, r6
 800896e:	4639      	mov	r1, r7
 8008970:	f7ff fa86 	bl	8007e80 <__aeabi_dsub>
 8008974:	f7ff ff14 	bl	80087a0 <__aeabi_d2uiz>
 8008978:	4621      	mov	r1, r4
 800897a:	bdd0      	pop	{r4, r6, r7, pc}
 800897c:	3df00000 	.word	0x3df00000
 8008980:	41f00000 	.word	0x41f00000

08008984 <__udivmoddi4>:
 8008984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	9d08      	ldr	r5, [sp, #32]
 800898a:	460c      	mov	r4, r1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d14e      	bne.n	8008a2e <__udivmoddi4+0xaa>
 8008990:	4694      	mov	ip, r2
 8008992:	458c      	cmp	ip, r1
 8008994:	4686      	mov	lr, r0
 8008996:	fab2 f282 	clz	r2, r2
 800899a:	d962      	bls.n	8008a62 <__udivmoddi4+0xde>
 800899c:	b14a      	cbz	r2, 80089b2 <__udivmoddi4+0x2e>
 800899e:	f1c2 0320 	rsb	r3, r2, #32
 80089a2:	4091      	lsls	r1, r2
 80089a4:	fa20 f303 	lsr.w	r3, r0, r3
 80089a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80089ac:	4319      	orrs	r1, r3
 80089ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80089b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80089b6:	fa1f f68c 	uxth.w	r6, ip
 80089ba:	fbb1 f4f7 	udiv	r4, r1, r7
 80089be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80089c2:	fb07 1114 	mls	r1, r7, r4, r1
 80089c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80089ca:	fb04 f106 	mul.w	r1, r4, r6
 80089ce:	4299      	cmp	r1, r3
 80089d0:	d90a      	bls.n	80089e8 <__udivmoddi4+0x64>
 80089d2:	eb1c 0303 	adds.w	r3, ip, r3
 80089d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80089da:	f080 8112 	bcs.w	8008c02 <__udivmoddi4+0x27e>
 80089de:	4299      	cmp	r1, r3
 80089e0:	f240 810f 	bls.w	8008c02 <__udivmoddi4+0x27e>
 80089e4:	3c02      	subs	r4, #2
 80089e6:	4463      	add	r3, ip
 80089e8:	1a59      	subs	r1, r3, r1
 80089ea:	fa1f f38e 	uxth.w	r3, lr
 80089ee:	fbb1 f0f7 	udiv	r0, r1, r7
 80089f2:	fb07 1110 	mls	r1, r7, r0, r1
 80089f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80089fa:	fb00 f606 	mul.w	r6, r0, r6
 80089fe:	429e      	cmp	r6, r3
 8008a00:	d90a      	bls.n	8008a18 <__udivmoddi4+0x94>
 8008a02:	eb1c 0303 	adds.w	r3, ip, r3
 8008a06:	f100 31ff 	add.w	r1, r0, #4294967295
 8008a0a:	f080 80fc 	bcs.w	8008c06 <__udivmoddi4+0x282>
 8008a0e:	429e      	cmp	r6, r3
 8008a10:	f240 80f9 	bls.w	8008c06 <__udivmoddi4+0x282>
 8008a14:	4463      	add	r3, ip
 8008a16:	3802      	subs	r0, #2
 8008a18:	1b9b      	subs	r3, r3, r6
 8008a1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008a1e:	2100      	movs	r1, #0
 8008a20:	b11d      	cbz	r5, 8008a2a <__udivmoddi4+0xa6>
 8008a22:	40d3      	lsrs	r3, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	e9c5 3200 	strd	r3, r2, [r5]
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	428b      	cmp	r3, r1
 8008a30:	d905      	bls.n	8008a3e <__udivmoddi4+0xba>
 8008a32:	b10d      	cbz	r5, 8008a38 <__udivmoddi4+0xb4>
 8008a34:	e9c5 0100 	strd	r0, r1, [r5]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4608      	mov	r0, r1
 8008a3c:	e7f5      	b.n	8008a2a <__udivmoddi4+0xa6>
 8008a3e:	fab3 f183 	clz	r1, r3
 8008a42:	2900      	cmp	r1, #0
 8008a44:	d146      	bne.n	8008ad4 <__udivmoddi4+0x150>
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	d302      	bcc.n	8008a50 <__udivmoddi4+0xcc>
 8008a4a:	4290      	cmp	r0, r2
 8008a4c:	f0c0 80f0 	bcc.w	8008c30 <__udivmoddi4+0x2ac>
 8008a50:	1a86      	subs	r6, r0, r2
 8008a52:	eb64 0303 	sbc.w	r3, r4, r3
 8008a56:	2001      	movs	r0, #1
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	d0e6      	beq.n	8008a2a <__udivmoddi4+0xa6>
 8008a5c:	e9c5 6300 	strd	r6, r3, [r5]
 8008a60:	e7e3      	b.n	8008a2a <__udivmoddi4+0xa6>
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	f040 8090 	bne.w	8008b88 <__udivmoddi4+0x204>
 8008a68:	eba1 040c 	sub.w	r4, r1, ip
 8008a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008a70:	fa1f f78c 	uxth.w	r7, ip
 8008a74:	2101      	movs	r1, #1
 8008a76:	fbb4 f6f8 	udiv	r6, r4, r8
 8008a7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008a7e:	fb08 4416 	mls	r4, r8, r6, r4
 8008a82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a86:	fb07 f006 	mul.w	r0, r7, r6
 8008a8a:	4298      	cmp	r0, r3
 8008a8c:	d908      	bls.n	8008aa0 <__udivmoddi4+0x11c>
 8008a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8008a92:	f106 34ff 	add.w	r4, r6, #4294967295
 8008a96:	d202      	bcs.n	8008a9e <__udivmoddi4+0x11a>
 8008a98:	4298      	cmp	r0, r3
 8008a9a:	f200 80cd 	bhi.w	8008c38 <__udivmoddi4+0x2b4>
 8008a9e:	4626      	mov	r6, r4
 8008aa0:	1a1c      	subs	r4, r3, r0
 8008aa2:	fa1f f38e 	uxth.w	r3, lr
 8008aa6:	fbb4 f0f8 	udiv	r0, r4, r8
 8008aaa:	fb08 4410 	mls	r4, r8, r0, r4
 8008aae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ab2:	fb00 f707 	mul.w	r7, r0, r7
 8008ab6:	429f      	cmp	r7, r3
 8008ab8:	d908      	bls.n	8008acc <__udivmoddi4+0x148>
 8008aba:	eb1c 0303 	adds.w	r3, ip, r3
 8008abe:	f100 34ff 	add.w	r4, r0, #4294967295
 8008ac2:	d202      	bcs.n	8008aca <__udivmoddi4+0x146>
 8008ac4:	429f      	cmp	r7, r3
 8008ac6:	f200 80b0 	bhi.w	8008c2a <__udivmoddi4+0x2a6>
 8008aca:	4620      	mov	r0, r4
 8008acc:	1bdb      	subs	r3, r3, r7
 8008ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008ad2:	e7a5      	b.n	8008a20 <__udivmoddi4+0x9c>
 8008ad4:	f1c1 0620 	rsb	r6, r1, #32
 8008ad8:	408b      	lsls	r3, r1
 8008ada:	fa22 f706 	lsr.w	r7, r2, r6
 8008ade:	431f      	orrs	r7, r3
 8008ae0:	fa20 fc06 	lsr.w	ip, r0, r6
 8008ae4:	fa04 f301 	lsl.w	r3, r4, r1
 8008ae8:	ea43 030c 	orr.w	r3, r3, ip
 8008aec:	40f4      	lsrs	r4, r6
 8008aee:	fa00 f801 	lsl.w	r8, r0, r1
 8008af2:	0c38      	lsrs	r0, r7, #16
 8008af4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008af8:	fbb4 fef0 	udiv	lr, r4, r0
 8008afc:	fa1f fc87 	uxth.w	ip, r7
 8008b00:	fb00 441e 	mls	r4, r0, lr, r4
 8008b04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008b08:	fb0e f90c 	mul.w	r9, lr, ip
 8008b0c:	45a1      	cmp	r9, r4
 8008b0e:	fa02 f201 	lsl.w	r2, r2, r1
 8008b12:	d90a      	bls.n	8008b2a <__udivmoddi4+0x1a6>
 8008b14:	193c      	adds	r4, r7, r4
 8008b16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008b1a:	f080 8084 	bcs.w	8008c26 <__udivmoddi4+0x2a2>
 8008b1e:	45a1      	cmp	r9, r4
 8008b20:	f240 8081 	bls.w	8008c26 <__udivmoddi4+0x2a2>
 8008b24:	f1ae 0e02 	sub.w	lr, lr, #2
 8008b28:	443c      	add	r4, r7
 8008b2a:	eba4 0409 	sub.w	r4, r4, r9
 8008b2e:	fa1f f983 	uxth.w	r9, r3
 8008b32:	fbb4 f3f0 	udiv	r3, r4, r0
 8008b36:	fb00 4413 	mls	r4, r0, r3, r4
 8008b3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008b3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8008b42:	45a4      	cmp	ip, r4
 8008b44:	d907      	bls.n	8008b56 <__udivmoddi4+0x1d2>
 8008b46:	193c      	adds	r4, r7, r4
 8008b48:	f103 30ff 	add.w	r0, r3, #4294967295
 8008b4c:	d267      	bcs.n	8008c1e <__udivmoddi4+0x29a>
 8008b4e:	45a4      	cmp	ip, r4
 8008b50:	d965      	bls.n	8008c1e <__udivmoddi4+0x29a>
 8008b52:	3b02      	subs	r3, #2
 8008b54:	443c      	add	r4, r7
 8008b56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008b5a:	fba0 9302 	umull	r9, r3, r0, r2
 8008b5e:	eba4 040c 	sub.w	r4, r4, ip
 8008b62:	429c      	cmp	r4, r3
 8008b64:	46ce      	mov	lr, r9
 8008b66:	469c      	mov	ip, r3
 8008b68:	d351      	bcc.n	8008c0e <__udivmoddi4+0x28a>
 8008b6a:	d04e      	beq.n	8008c0a <__udivmoddi4+0x286>
 8008b6c:	b155      	cbz	r5, 8008b84 <__udivmoddi4+0x200>
 8008b6e:	ebb8 030e 	subs.w	r3, r8, lr
 8008b72:	eb64 040c 	sbc.w	r4, r4, ip
 8008b76:	fa04 f606 	lsl.w	r6, r4, r6
 8008b7a:	40cb      	lsrs	r3, r1
 8008b7c:	431e      	orrs	r6, r3
 8008b7e:	40cc      	lsrs	r4, r1
 8008b80:	e9c5 6400 	strd	r6, r4, [r5]
 8008b84:	2100      	movs	r1, #0
 8008b86:	e750      	b.n	8008a2a <__udivmoddi4+0xa6>
 8008b88:	f1c2 0320 	rsb	r3, r2, #32
 8008b8c:	fa20 f103 	lsr.w	r1, r0, r3
 8008b90:	fa0c fc02 	lsl.w	ip, ip, r2
 8008b94:	fa24 f303 	lsr.w	r3, r4, r3
 8008b98:	4094      	lsls	r4, r2
 8008b9a:	430c      	orrs	r4, r1
 8008b9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ba0:	fa00 fe02 	lsl.w	lr, r0, r2
 8008ba4:	fa1f f78c 	uxth.w	r7, ip
 8008ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008bac:	fb08 3110 	mls	r1, r8, r0, r3
 8008bb0:	0c23      	lsrs	r3, r4, #16
 8008bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bb6:	fb00 f107 	mul.w	r1, r0, r7
 8008bba:	4299      	cmp	r1, r3
 8008bbc:	d908      	bls.n	8008bd0 <__udivmoddi4+0x24c>
 8008bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8008bc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8008bc6:	d22c      	bcs.n	8008c22 <__udivmoddi4+0x29e>
 8008bc8:	4299      	cmp	r1, r3
 8008bca:	d92a      	bls.n	8008c22 <__udivmoddi4+0x29e>
 8008bcc:	3802      	subs	r0, #2
 8008bce:	4463      	add	r3, ip
 8008bd0:	1a5b      	subs	r3, r3, r1
 8008bd2:	b2a4      	uxth	r4, r4
 8008bd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8008bd8:	fb08 3311 	mls	r3, r8, r1, r3
 8008bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008be0:	fb01 f307 	mul.w	r3, r1, r7
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	d908      	bls.n	8008bfa <__udivmoddi4+0x276>
 8008be8:	eb1c 0404 	adds.w	r4, ip, r4
 8008bec:	f101 36ff 	add.w	r6, r1, #4294967295
 8008bf0:	d213      	bcs.n	8008c1a <__udivmoddi4+0x296>
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	d911      	bls.n	8008c1a <__udivmoddi4+0x296>
 8008bf6:	3902      	subs	r1, #2
 8008bf8:	4464      	add	r4, ip
 8008bfa:	1ae4      	subs	r4, r4, r3
 8008bfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c00:	e739      	b.n	8008a76 <__udivmoddi4+0xf2>
 8008c02:	4604      	mov	r4, r0
 8008c04:	e6f0      	b.n	80089e8 <__udivmoddi4+0x64>
 8008c06:	4608      	mov	r0, r1
 8008c08:	e706      	b.n	8008a18 <__udivmoddi4+0x94>
 8008c0a:	45c8      	cmp	r8, r9
 8008c0c:	d2ae      	bcs.n	8008b6c <__udivmoddi4+0x1e8>
 8008c0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008c12:	eb63 0c07 	sbc.w	ip, r3, r7
 8008c16:	3801      	subs	r0, #1
 8008c18:	e7a8      	b.n	8008b6c <__udivmoddi4+0x1e8>
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	e7ed      	b.n	8008bfa <__udivmoddi4+0x276>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	e799      	b.n	8008b56 <__udivmoddi4+0x1d2>
 8008c22:	4630      	mov	r0, r6
 8008c24:	e7d4      	b.n	8008bd0 <__udivmoddi4+0x24c>
 8008c26:	46d6      	mov	lr, sl
 8008c28:	e77f      	b.n	8008b2a <__udivmoddi4+0x1a6>
 8008c2a:	4463      	add	r3, ip
 8008c2c:	3802      	subs	r0, #2
 8008c2e:	e74d      	b.n	8008acc <__udivmoddi4+0x148>
 8008c30:	4606      	mov	r6, r0
 8008c32:	4623      	mov	r3, r4
 8008c34:	4608      	mov	r0, r1
 8008c36:	e70f      	b.n	8008a58 <__udivmoddi4+0xd4>
 8008c38:	3e02      	subs	r6, #2
 8008c3a:	4463      	add	r3, ip
 8008c3c:	e730      	b.n	8008aa0 <__udivmoddi4+0x11c>
 8008c3e:	bf00      	nop

08008c40 <__aeabi_idiv0>:
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop

08008c44 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8008c4c:	4b07      	ldr	r3, [pc, #28]	@ (8008c6c <LL_C2_PWR_SetPowerMode+0x28>)
 8008c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c52:	f023 0207 	bic.w	r2, r3, #7
 8008c56:	4905      	ldr	r1, [pc, #20]	@ (8008c6c <LL_C2_PWR_SetPowerMode+0x28>)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	58000400 	.word	0x58000400

08008c70 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008c78:	4b06      	ldr	r3, [pc, #24]	@ (8008c94 <LL_EXTI_EnableIT_32_63+0x24>)
 8008c7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008c7e:	4905      	ldr	r1, [pc, #20]	@ (8008c94 <LL_EXTI_EnableIT_32_63+0x24>)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	58000800 	.word	0x58000800

08008c98 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8008ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8008ca6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8008caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cb2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	021b      	lsls	r3, r3, #8
 8008cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	cafecafe 	.word	0xcafecafe

08008cd4 <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 8008cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ce2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008ce6:	6013      	str	r3, [r2, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8008cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008d04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	608b      	str	r3, [r1, #8]
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008d20:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <LL_LPM_EnableSleep+0x1c>)
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	4a04      	ldr	r2, [pc, #16]	@ (8008d38 <LL_LPM_EnableSleep+0x1c>)
 8008d26:	f023 0304 	bic.w	r3, r3, #4
 8008d2a:	6113      	str	r3, [r2, #16]
}
 8008d2c:	bf00      	nop
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	e000ed00 	.word	0xe000ed00

08008d3c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	22ff      	movs	r2, #255	@ 0xff
 8008d48:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	22ca      	movs	r2, #202	@ 0xca
 8008d62:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2253      	movs	r2, #83	@ 0x53
 8008d68:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f023 0207 	bic.w	r2, r3, #7
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	609a      	str	r2, [r3, #8]
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008da0:	4b04      	ldr	r3, [pc, #16]	@ (8008db4 <MX_APPE_Config+0x18>)
 8008da2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008da6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8008da8:	f000 f824 	bl	8008df4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8008dac:	f000 f829 	bl	8008e02 <Config_HSE>

  return;
 8008db0:	bf00      	nop
}
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	58004000 	.word	0x58004000

08008db8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8008dbc:	f000 f835 	bl	8008e2a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8008dc0:	f000 f84e 	bl	8008e60 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8008dc4:	4903      	ldr	r1, [pc, #12]	@ (8008dd4 <MX_APPE_Init+0x1c>)
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f000 f9b0 	bl	800912c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8008dcc:	f000 f860 	bl	8008e90 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8008dd0:	bf00      	nop
}
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000320 	.word	0x20000320

08008dd8 <Init_Smps>:

void Init_Smps(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8008ddc:	bf00      	nop
}
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <Init_Exti>:

void Init_Exti(void)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8008dea:	2050      	movs	r0, #80	@ 0x50
 8008dec:	f7ff ff40 	bl	8008c70 <LL_EXTI_EnableIT_32_63>

  return;
 8008df0:	bf00      	nop
}
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8008df8:	bf00      	nop
}
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f008 fe95 	bl	8011b38 <OTP_Read>
 8008e0e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d005      	beq.n	8008e22 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	799b      	ldrb	r3, [r3, #6]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff ff3c 	bl	8008c98 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
}
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <System_Init>:

static void System_Init(void)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	af00      	add	r7, sp, #0
  Init_Smps();
 8008e2e:	f7ff ffd3 	bl	8008dd8 <Init_Smps>

  Init_Exti();
 8008e32:	f7ff ffd8 	bl	8008de6 <Init_Exti>

  Init_Rtc();
 8008e36:	f000 f803 	bl	8008e40 <Init_Rtc>

  return;
 8008e3a:	bf00      	nop
}
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <Init_Rtc>:

static void Init_Rtc(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <Init_Rtc+0x1c>)
 8008e46:	f7ff ff86 	bl	8008d56 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4803      	ldr	r0, [pc, #12]	@ (8008e5c <Init_Rtc+0x1c>)
 8008e4e:	f7ff ff92 	bl	8008d76 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8008e52:	4802      	ldr	r0, [pc, #8]	@ (8008e5c <Init_Rtc+0x1c>)
 8008e54:	f7ff ff72 	bl	8008d3c <LL_RTC_EnableWriteProtection>

  return;
 8008e58:	bf00      	nop
}
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40002800 	.word	0x40002800

08008e60 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 8008e64:	f7ff ff36 	bl	8008cd4 <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8008e68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008e6c:	f7ff ff41 	bl	8008cf2 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8008e70:	f00d fb02 	bl	8016478 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8008e74:	2004      	movs	r0, #4
 8008e76:	f7ff fee5 	bl	8008c44 <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f00d fb3d 	bl	80164fc <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8008e82:	2101      	movs	r1, #1
 8008e84:	2001      	movs	r0, #1
 8008e86:	f00d fb09 	bl	801649c <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8008e8a:	bf00      	nop
}
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8008e96:	f009 f935 	bl	8012104 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8008e9a:	4a14      	ldr	r2, [pc, #80]	@ (8008eec <appe_Tl_Init+0x5c>)
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	2008      	movs	r0, #8
 8008ea0:	f00d fc58 	bl	8016754 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8008ea4:	4b12      	ldr	r3, [pc, #72]	@ (8008ef0 <appe_Tl_Init+0x60>)
 8008ea6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8008ea8:	4b12      	ldr	r3, [pc, #72]	@ (8008ef4 <appe_Tl_Init+0x64>)
 8008eaa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8008eac:	463b      	mov	r3, r7
 8008eae:	4619      	mov	r1, r3
 8008eb0:	4811      	ldr	r0, [pc, #68]	@ (8008ef8 <appe_Tl_Init+0x68>)
 8008eb2:	f008 ff2b 	bl	8011d0c <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 8008eb6:	f107 0308 	add.w	r3, r7, #8
 8008eba:	2218      	movs	r2, #24
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f00e f912 	bl	80170e8 <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8008efc <appe_Tl_Init+0x6c>)
 8008eca:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8008ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f00 <appe_Tl_Init+0x70>)
 8008ece:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8008ed0:	f240 533c 	movw	r3, #1340	@ 0x53c
 8008ed4:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8008ed6:	f107 0308 	add.w	r3, r7, #8
 8008eda:	4618      	mov	r0, r3
 8008edc:	f009 fa6e 	bl	80123bc <TL_MM_Init>

  TL_Enable();
 8008ee0:	f009 f90a 	bl	80120f8 <TL_Enable>

  return;
 8008ee4:	bf00      	nop
}
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	08011d45 	.word	0x08011d45
 8008ef0:	20030620 	.word	0x20030620
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f1b 	.word	0x08008f1b
 8008efc:	2003072c 	.word	0x2003072c
 8008f00:	200300e4 	.word	0x200300e4

08008f04 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8008f0e:	bf00      	nop
}
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	330b      	adds	r3, #11
 8008f28:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 8008f34:	d004      	beq.n	8008f40 <APPE_SysUserEvtRx+0x26>
 8008f36:	f249 2201 	movw	r2, #37377	@ 0x9201
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d003      	beq.n	8008f46 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8008f3e:	e008      	b.n	8008f52 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8008f40:	f000 f844 	bl	8008fcc <APPE_SysEvtReadyProcessing>
         break;
 8008f44:	e005      	b.n	8008f52 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	789b      	ldrb	r3, [r3, #2]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 f806 	bl	8008f5c <APPE_SysEvtError>
         break;
 8008f50:	bf00      	nop
  }
  return;
 8008f52:	bf00      	nop
}
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f6a:	d10f      	bne.n	8008f8c <APPE_SysEvtError+0x30>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8008f6c:	4812      	ldr	r0, [pc, #72]	@ (8008fb8 <APPE_SysEvtError+0x5c>)
 8008f6e:	f008 fdbb 	bl	8011ae8 <DbgTraceGetFileName>
 8008f72:	4601      	mov	r1, r0
 8008f74:	f240 13bd 	movw	r3, #445	@ 0x1bd
 8008f78:	4a10      	ldr	r2, [pc, #64]	@ (8008fbc <APPE_SysEvtError+0x60>)
 8008f7a:	4811      	ldr	r0, [pc, #68]	@ (8008fc0 <APPE_SysEvtError+0x64>)
 8008f7c:	f00d fe98 	bl	8016cb0 <iprintf>
 8008f80:	4a10      	ldr	r2, [pc, #64]	@ (8008fc4 <APPE_SysEvtError+0x68>)
 8008f82:	2101      	movs	r1, #1
 8008f84:	2000      	movs	r0, #0
 8008f86:	f001 f867 	bl	800a058 <logApplication>
       break;
 8008f8a:	e010      	b.n	8008fae <APPE_SysEvtError+0x52>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8008f8c:	480a      	ldr	r0, [pc, #40]	@ (8008fb8 <APPE_SysEvtError+0x5c>)
 8008f8e:	f008 fdab 	bl	8011ae8 <DbgTraceGetFileName>
 8008f92:	4601      	mov	r1, r0
 8008f94:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8008f98:	4a08      	ldr	r2, [pc, #32]	@ (8008fbc <APPE_SysEvtError+0x60>)
 8008f9a:	4809      	ldr	r0, [pc, #36]	@ (8008fc0 <APPE_SysEvtError+0x64>)
 8008f9c:	f00d fe88 	bl	8016cb0 <iprintf>
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	4a09      	ldr	r2, [pc, #36]	@ (8008fc8 <APPE_SysEvtError+0x6c>)
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	f001 f856 	bl	800a058 <logApplication>
       break;
 8008fac:	bf00      	nop
  }
  return;
 8008fae:	bf00      	nop
}
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	08018db8 	.word	0x08018db8
 8008fbc:	08019a20 	.word	0x08019a20
 8008fc0:	08018dd0 	.word	0x08018dd0
 8008fc4:	08018de0 	.word	0x08018de0
 8008fc8:	08018e00 	.word	0x08018e00

08008fcc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8008fd0:	f009 fa68 	bl	80124a4 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 8008fd4:	f00c f8b8 	bl	8015148 <APP_ZIGBEE_Init>
  return;
 8008fd8:	bf00      	nop
}
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008fe4:	f002 f860 	bl	800b0a8 <HAL_GetTick>
 8008fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff4:	d00a      	beq.n	800900c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8008ff6:	f002 f86f 	bl	800b0d8 <HAL_GetTickFreq>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009004:	e002      	b.n	800900c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8009006:	f7ff fe89 	bl	8008d1c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800900a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800900c:	f002 f84c 	bl	800b0a8 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	429a      	cmp	r2, r3
 800901a:	d8f4      	bhi.n	8009006 <HAL_Delay+0x2a>
  }
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800902a:	f04f 30ff 	mov.w	r0, #4294967295
 800902e:	f00d fa95 	bl	801655c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}

08009036 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8009036:	b480      	push	{r7}
 8009038:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800903a:	bf00      	nop
}
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d003      	beq.n	800905c <UTIL_SEQ_EvtIdle+0x18>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d004      	beq.n	8009064 <UTIL_SEQ_EvtIdle+0x20>
 800905a:	e00a      	b.n	8009072 <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 800905c:	2002      	movs	r0, #2
 800905e:	f00d fa7d 	bl	801655c <UTIL_SEQ_Run>
    break;
 8009062:	e00b      	b.n	800907c <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8009064:	2004      	movs	r0, #4
 8009066:	f00d fbc3 	bl	80167f0 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 800906a:	2003      	movs	r0, #3
 800906c:	f00d fa76 	bl	801655c <UTIL_SEQ_Run>
    break;
 8009070:	e004      	b.n	800907c <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	f00d fa71 	bl	801655c <UTIL_SEQ_Run>
    break;
 800907a:	bf00      	nop
  }
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800908c:	2100      	movs	r1, #0
 800908e:	2008      	movs	r0, #8
 8009090:	f00d fb82 	bl	8016798 <UTIL_SEQ_SetTask>
  return;
 8009094:	bf00      	nop
}
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80090a4:	2001      	movs	r0, #1
 80090a6:	f00d fba3 	bl	80167f0 <UTIL_SEQ_SetEvt>
  return;
 80090aa:	bf00      	nop
}
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80090ba:	2001      	movs	r0, #1
 80090bc:	f00d fbb8 	bl	8016830 <UTIL_SEQ_WaitEvt>
  return;
 80090c0:	bf00      	nop
}
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f009 f9af 	bl	8012434 <TL_MM_EvtDone>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <LL_EXTI_EnableIT_0_31>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80090e8:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <LL_EXTI_EnableIT_0_31+0x24>)
 80090ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80090ee:	4905      	ldr	r1, [pc, #20]	@ (8009104 <LL_EXTI_EnableIT_0_31+0x24>)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	58000800 	.word	0x58000800

08009108 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009110:	4b05      	ldr	r3, [pc, #20]	@ (8009128 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	4904      	ldr	r1, [pc, #16]	@ (8009128 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4313      	orrs	r3, r2
 800911a:	600b      	str	r3, [r1, #0]

}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	58000800 	.word	0x58000800

0800912c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8009138:	4b5e      	ldr	r3, [pc, #376]	@ (80092b4 <HW_TS_Init+0x188>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	22ca      	movs	r2, #202	@ 0xca
 800913e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009140:	4b5c      	ldr	r3, [pc, #368]	@ (80092b4 <HW_TS_Init+0x188>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2253      	movs	r2, #83	@ 0x53
 8009146:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009148:	4b5b      	ldr	r3, [pc, #364]	@ (80092b8 <HW_TS_Init+0x18c>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	4a5a      	ldr	r2, [pc, #360]	@ (80092b8 <HW_TS_Init+0x18c>)
 800914e:	f043 0320 	orr.w	r3, r3, #32
 8009152:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8009154:	4b58      	ldr	r3, [pc, #352]	@ (80092b8 <HW_TS_Init+0x18c>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f1c3 0304 	rsb	r3, r3, #4
 8009164:	b2da      	uxtb	r2, r3
 8009166:	4b55      	ldr	r3, [pc, #340]	@ (80092bc <HW_TS_Init+0x190>)
 8009168:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800916a:	4b53      	ldr	r3, [pc, #332]	@ (80092b8 <HW_TS_Init+0x18c>)
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009172:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8009176:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	fa92 f2a2 	rbit	r2, r2
 800917e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	2a00      	cmp	r2, #0
 8009188:	d101      	bne.n	800918e <HW_TS_Init+0x62>
  {
    return 32U;
 800918a:	2220      	movs	r2, #32
 800918c:	e003      	b.n	8009196 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	fab2 f282 	clz	r2, r2
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	40d3      	lsrs	r3, r2
 8009198:	b2db      	uxtb	r3, r3
 800919a:	3301      	adds	r3, #1
 800919c:	b2da      	uxtb	r2, r3
 800919e:	4b48      	ldr	r3, [pc, #288]	@ (80092c0 <HW_TS_Init+0x194>)
 80091a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80091a2:	4b45      	ldr	r3, [pc, #276]	@ (80092b8 <HW_TS_Init+0x18c>)
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3301      	adds	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	4b44      	ldr	r3, [pc, #272]	@ (80092c4 <HW_TS_Init+0x198>)
 80091b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80091b6:	4b43      	ldr	r3, [pc, #268]	@ (80092c4 <HW_TS_Init+0x198>)
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4a40      	ldr	r2, [pc, #256]	@ (80092c0 <HW_TS_Init+0x194>)
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80091c8:	4a3c      	ldr	r2, [pc, #240]	@ (80092bc <HW_TS_Init+0x190>)
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	40d3      	lsrs	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d904      	bls.n	80091e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80091da:	4b3b      	ldr	r3, [pc, #236]	@ (80092c8 <HW_TS_Init+0x19c>)
 80091dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091e0:	801a      	strh	r2, [r3, #0]
 80091e2:	e003      	b.n	80091ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	4b37      	ldr	r3, [pc, #220]	@ (80092c8 <HW_TS_Init+0x19c>)
 80091ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80091ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091f0:	f7ff ff8a 	bl	8009108 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80091f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091f8:	f7ff ff72 	bl	80090e0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d13d      	bne.n	800927e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8009202:	4b32      	ldr	r3, [pc, #200]	@ (80092cc <HW_TS_Init+0x1a0>)
 8009204:	2201      	movs	r2, #1
 8009206:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8009208:	4b31      	ldr	r3, [pc, #196]	@ (80092d0 <HW_TS_Init+0x1a4>)
 800920a:	f04f 32ff 	mov.w	r2, #4294967295
 800920e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8009210:	2300      	movs	r3, #0
 8009212:	77fb      	strb	r3, [r7, #31]
 8009214:	e00c      	b.n	8009230 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8009216:	7ffa      	ldrb	r2, [r7, #31]
 8009218:	492e      	ldr	r1, [pc, #184]	@ (80092d4 <HW_TS_Init+0x1a8>)
 800921a:	4613      	mov	r3, r2
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	440b      	add	r3, r1
 8009224:	330c      	adds	r3, #12
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800922a:	7ffb      	ldrb	r3, [r7, #31]
 800922c:	3301      	adds	r3, #1
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	7ffb      	ldrb	r3, [r7, #31]
 8009232:	2b05      	cmp	r3, #5
 8009234:	d9ef      	bls.n	8009216 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8009236:	4b28      	ldr	r3, [pc, #160]	@ (80092d8 <HW_TS_Init+0x1ac>)
 8009238:	2206      	movs	r2, #6
 800923a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800923c:	4b1d      	ldr	r3, [pc, #116]	@ (80092b4 <HW_TS_Init+0x188>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	4b1c      	ldr	r3, [pc, #112]	@ (80092b4 <HW_TS_Init+0x188>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800924a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800924c:	4b19      	ldr	r3, [pc, #100]	@ (80092b4 <HW_TS_Init+0x188>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	b2da      	uxtb	r2, r3
 8009254:	4b17      	ldr	r3, [pc, #92]	@ (80092b4 <HW_TS_Init+0x188>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800925c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800925e:	4b1f      	ldr	r3, [pc, #124]	@ (80092dc <HW_TS_Init+0x1b0>)
 8009260:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009264:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8009266:	2003      	movs	r0, #3
 8009268:	f003 f925 	bl	800c4b6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800926c:	4b11      	ldr	r3, [pc, #68]	@ (80092b4 <HW_TS_Init+0x188>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	4b10      	ldr	r3, [pc, #64]	@ (80092b4 <HW_TS_Init+0x188>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800927a:	609a      	str	r2, [r3, #8]
 800927c:	e009      	b.n	8009292 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800927e:	4b0d      	ldr	r3, [pc, #52]	@ (80092b4 <HW_TS_Init+0x188>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800928c:	2003      	movs	r0, #3
 800928e:	f003 f904 	bl	800c49a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8009292:	4b08      	ldr	r3, [pc, #32]	@ (80092b4 <HW_TS_Init+0x188>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	22ff      	movs	r2, #255	@ 0xff
 8009298:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800929a:	2200      	movs	r2, #0
 800929c:	2103      	movs	r1, #3
 800929e:	2003      	movs	r0, #3
 80092a0:	f003 f8c7 	bl	800c432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80092a4:	2003      	movs	r0, #3
 80092a6:	f003 f8de 	bl	800c466 <HAL_NVIC_EnableIRQ>

  return;
 80092aa:	bf00      	nop
}
 80092ac:	3720      	adds	r7, #32
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000320 	.word	0x20000320
 80092b8:	40002800 	.word	0x40002800
 80092bc:	200001c5 	.word	0x200001c5
 80092c0:	200001c6 	.word	0x200001c6
 80092c4:	200001c8 	.word	0x200001c8
 80092c8:	200001ca 	.word	0x200001ca
 80092cc:	200001c4 	.word	0x200001c4
 80092d0:	200001c0 	.word	0x200001c0
 80092d4:	2000012c 	.word	0x2000012c
 80092d8:	200001bc 	.word	0x200001bc
 80092dc:	58000800 	.word	0x58000800

080092e0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80092e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80092f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4013      	ands	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009304:	68fb      	ldr	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800931a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800931e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4313      	orrs	r3, r2
 8009328:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800932a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800932e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4013      	ands	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009336:	68fb      	ldr	r3, [r7, #12]
}
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <__io_putchar>:
#define HAL_SMALL_WAIT  50

// check if necessary
// Define serial output function using UART2
int __io_putchar(int ch)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 800934c:	1d39      	adds	r1, r7, #4
 800934e:	2332      	movs	r3, #50	@ 0x32
 8009350:	2201      	movs	r2, #1
 8009352:	4804      	ldr	r0, [pc, #16]	@ (8009364 <__io_putchar+0x20>)
 8009354:	f007 fa2d 	bl	80107b2 <HAL_UART_Transmit>
    return 1;
 8009358:	2301      	movs	r3, #1
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000428 	.word	0x20000428

08009368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800936e:	f001 fe2d 	bl	800afcc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8009372:	f7ff fd13 	bl	8008d9c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009376:	f000 f869 	bl	800944c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800937a:	f000 f8d7 	bl	800952c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800937e:	f000 f9bb 	bl	80096f8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009382:	f000 fb51 	bl	8009a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8009386:	f000 fb3d 	bl	8009a04 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800938a:	f000 faef 	bl	800996c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800938e:	f000 f9cf 	bl	8009730 <MX_RTC_Init>
  MX_I2C1_Init();
 8009392:	f000 f971 	bl	8009678 <MX_I2C1_Init>
  MX_TIM2_Init();
 8009396:	f000 fa53 	bl	8009840 <MX_TIM2_Init>
  MX_TIM16_Init();
 800939a:	f000 fac1 	bl	8009920 <MX_TIM16_Init>
  MX_ADC1_Init();
 800939e:	f000 f8e5 	bl	800956c <MX_ADC1_Init>
  MX_TIM1_Init();
 80093a2:	f000 f9f9 	bl	8009798 <MX_TIM1_Init>
  MX_RF_Init();
 80093a6:	f000 f9bb 	bl	8009720 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  // check if anything else necessary and to put to header/source
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 80093aa:	4b1c      	ldr	r3, [pc, #112]	@ (800941c <main+0xb4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6898      	ldr	r0, [r3, #8]
 80093b0:	2300      	movs	r3, #0
 80093b2:	2202      	movs	r2, #2
 80093b4:	2100      	movs	r1, #0
 80093b6:	f00d fceb 	bl	8016d90 <setvbuf>
  printf("\n\n\nNew start\n");
 80093ba:	4819      	ldr	r0, [pc, #100]	@ (8009420 <main+0xb8>)
 80093bc:	f00d fce0 	bl	8016d80 <puts>

  // init DHT11
  //init_dht11(&dht11, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
  TEMP_HUMID_init(&OBJ_TEMP_HUMID, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
 80093c0:	2380      	movs	r3, #128	@ 0x80
 80093c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80093c6:	4917      	ldr	r1, [pc, #92]	@ (8009424 <main+0xbc>)
 80093c8:	4817      	ldr	r0, [pc, #92]	@ (8009428 <main+0xc0>)
 80093ca:	f001 fd8d 	bl	800aee8 <TEMP_HUMID_init>
  SOIL_MOIST_init(&OBJ_SOIL_MOIST_sensor_1, &adc_buffer[0]);
 80093ce:	4917      	ldr	r1, [pc, #92]	@ (800942c <main+0xc4>)
 80093d0:	4817      	ldr	r0, [pc, #92]	@ (8009430 <main+0xc8>)
 80093d2:	f001 fd3b 	bl	800ae4c <SOIL_MOIST_init>
  SOIL_MOIST_init(&OBJ_SOIL_MOIST_sensor_2, &adc_buffer[1]);
 80093d6:	4917      	ldr	r1, [pc, #92]	@ (8009434 <main+0xcc>)
 80093d8:	4817      	ldr	r0, [pc, #92]	@ (8009438 <main+0xd0>)
 80093da:	f001 fd37 	bl	800ae4c <SOIL_MOIST_init>
  RGB_init(&OBJ_RGB_LED, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80093de:	230c      	movs	r3, #12
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	2304      	movs	r3, #4
 80093e4:	2200      	movs	r2, #0
 80093e6:	4915      	ldr	r1, [pc, #84]	@ (800943c <main+0xd4>)
 80093e8:	4815      	ldr	r0, [pc, #84]	@ (8009440 <main+0xd8>)
 80093ea:	f001 f9b5 	bl	800a758 <RGB_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 80093ee:	2203      	movs	r2, #3
 80093f0:	490e      	ldr	r1, [pc, #56]	@ (800942c <main+0xc4>)
 80093f2:	4814      	ldr	r0, [pc, #80]	@ (8009444 <main+0xdc>)
 80093f4:	f002 f990 	bl	800b718 <HAL_ADC_Start_DMA>

  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 80093f8:	4813      	ldr	r0, [pc, #76]	@ (8009448 <main+0xe0>)
 80093fa:	f005 ff5f 	bl	800f2bc <HAL_TIM_Base_Start_IT>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <main+0xa0>
    {
      /* Starting Error */
      Error_Handler();
 8009404:	f000 fb64 	bl	8009ad0 <Error_Handler>
    }

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8009408:	f7ff fcd6 	bl	8008db8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800940c:	f7ff fe0b 	bl	8009026 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 8009410:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009414:	f7ff fde2 	bl	8008fdc <HAL_Delay>
    MX_APPE_Process();
 8009418:	bf00      	nop
 800941a:	e7f7      	b.n	800940c <main+0xa4>
 800941c:	20000094 	.word	0x20000094
 8009420:	08018e20 	.word	0x08018e20
 8009424:	200003dc 	.word	0x200003dc
 8009428:	200004dc 	.word	0x200004dc
 800942c:	200004bc 	.word	0x200004bc
 8009430:	200004f8 	.word	0x200004f8
 8009434:	200004be 	.word	0x200004be
 8009438:	20000500 	.word	0x20000500
 800943c:	20000390 	.word	0x20000390
 8009440:	200004c4 	.word	0x200004c4
 8009444:	200001cc 	.word	0x200001cc
 8009448:	20000344 	.word	0x20000344

0800944c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b09a      	sub	sp, #104	@ 0x68
 8009450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009452:	f107 0320 	add.w	r3, r7, #32
 8009456:	2248      	movs	r2, #72	@ 0x48
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f00d fe44 	bl	80170e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009460:	1d3b      	adds	r3, r7, #4
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	605a      	str	r2, [r3, #4]
 8009468:	609a      	str	r2, [r3, #8]
 800946a:	60da      	str	r2, [r3, #12]
 800946c:	611a      	str	r2, [r3, #16]
 800946e:	615a      	str	r2, [r3, #20]
 8009470:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8009472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800947c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009480:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8009482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009490:	f043 0301 	orr.w	r3, r3, #1
 8009494:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009496:	4b24      	ldr	r3, [pc, #144]	@ (8009528 <SystemClock_Config+0xdc>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800949e:	4a22      	ldr	r2, [pc, #136]	@ (8009528 <SystemClock_Config+0xdc>)
 80094a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	4b20      	ldr	r3, [pc, #128]	@ (8009528 <SystemClock_Config+0xdc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80094ae:	603b      	str	r3, [r7, #0]
 80094b0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80094b2:	232b      	movs	r3, #43	@ 0x2b
 80094b4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80094bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80094c2:	2301      	movs	r3, #1
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80094c6:	2340      	movs	r3, #64	@ 0x40
 80094c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80094ca:	2300      	movs	r3, #0
 80094cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80094ce:	2360      	movs	r3, #96	@ 0x60
 80094d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80094d2:	2305      	movs	r3, #5
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094da:	f107 0320 	add.w	r3, r7, #32
 80094de:	4618      	mov	r0, r3
 80094e0:	f004 fa54 	bl	800d98c <HAL_RCC_OscConfig>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80094ea:	f000 faf1 	bl	8009ad0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80094ee:	236f      	movs	r3, #111	@ 0x6f
 80094f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80094f2:	2302      	movs	r3, #2
 80094f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8009502:	2300      	movs	r3, #0
 8009504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8009506:	2300      	movs	r3, #0
 8009508:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	2101      	movs	r1, #1
 800950e:	4618      	mov	r0, r3
 8009510:	f004 fdb0 	bl	800e074 <HAL_RCC_ClockConfig>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800951a:	f000 fad9 	bl	8009ad0 <Error_Handler>
  }
}
 800951e:	bf00      	nop
 8009520:	3768      	adds	r7, #104	@ 0x68
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	58000400 	.word	0x58000400

0800952c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b094      	sub	sp, #80	@ 0x50
 8009530:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009532:	463b      	mov	r3, r7
 8009534:	2250      	movs	r2, #80	@ 0x50
 8009536:	2100      	movs	r1, #0
 8009538:	4618      	mov	r0, r3
 800953a:	f00d fdd5 	bl	80170e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800953e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8009542:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8009544:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8009548:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800954a:	2300      	movs	r3, #0
 800954c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800954e:	2310      	movs	r3, #16
 8009550:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009552:	463b      	mov	r3, r7
 8009554:	4618      	mov	r0, r3
 8009556:	f005 f9ca 	bl	800e8ee <HAL_RCCEx_PeriphCLKConfig>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8009560:	f000 fab6 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8009564:	bf00      	nop
 8009566:	3750      	adds	r7, #80	@ 0x50
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009572:	463b      	mov	r3, r7
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	605a      	str	r2, [r3, #4]
 800957a:	609a      	str	r2, [r3, #8]
 800957c:	60da      	str	r2, [r3, #12]
 800957e:	611a      	str	r2, [r3, #16]
 8009580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009582:	4b38      	ldr	r3, [pc, #224]	@ (8009664 <MX_ADC1_Init+0xf8>)
 8009584:	4a38      	ldr	r2, [pc, #224]	@ (8009668 <MX_ADC1_Init+0xfc>)
 8009586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8009588:	4b36      	ldr	r3, [pc, #216]	@ (8009664 <MX_ADC1_Init+0xf8>)
 800958a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800958e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009590:	4b34      	ldr	r3, [pc, #208]	@ (8009664 <MX_ADC1_Init+0xf8>)
 8009592:	2200      	movs	r2, #0
 8009594:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009596:	4b33      	ldr	r3, [pc, #204]	@ (8009664 <MX_ADC1_Init+0xf8>)
 8009598:	2200      	movs	r2, #0
 800959a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800959c:	4b31      	ldr	r3, [pc, #196]	@ (8009664 <MX_ADC1_Init+0xf8>)
 800959e:	2201      	movs	r2, #1
 80095a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80095a2:	4b30      	ldr	r3, [pc, #192]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095a4:	2208      	movs	r2, #8
 80095a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80095a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80095ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80095b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095b6:	2203      	movs	r2, #3
 80095b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80095ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80095c2:	4b28      	ldr	r3, [pc, #160]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80095c8:	4b26      	ldr	r3, [pc, #152]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80095ce:	4b25      	ldr	r3, [pc, #148]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80095d6:	4b23      	ldr	r3, [pc, #140]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80095dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80095de:	4b21      	ldr	r3, [pc, #132]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80095e6:	481f      	ldr	r0, [pc, #124]	@ (8009664 <MX_ADC1_Init+0xf8>)
 80095e8:	f001 ff4a 	bl	800b480 <HAL_ADC_Init>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80095f2:	f000 fa6d 	bl	8009ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80095f6:	4b1d      	ldr	r3, [pc, #116]	@ (800966c <MX_ADC1_Init+0x100>)
 80095f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80095fa:	2306      	movs	r3, #6
 80095fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80095fe:	2300      	movs	r3, #0
 8009600:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009602:	237f      	movs	r3, #127	@ 0x7f
 8009604:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009606:	2304      	movs	r3, #4
 8009608:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800960e:	463b      	mov	r3, r7
 8009610:	4619      	mov	r1, r3
 8009612:	4814      	ldr	r0, [pc, #80]	@ (8009664 <MX_ADC1_Init+0xf8>)
 8009614:	f002 f922 	bl	800b85c <HAL_ADC_ConfigChannel>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800961e:	f000 fa57 	bl	8009ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8009622:	4b13      	ldr	r3, [pc, #76]	@ (8009670 <MX_ADC1_Init+0x104>)
 8009624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009626:	230c      	movs	r3, #12
 8009628:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800962a:	463b      	mov	r3, r7
 800962c:	4619      	mov	r1, r3
 800962e:	480d      	ldr	r0, [pc, #52]	@ (8009664 <MX_ADC1_Init+0xf8>)
 8009630:	f002 f914 	bl	800b85c <HAL_ADC_ConfigChannel>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800963a:	f000 fa49 	bl	8009ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800963e:	4b0d      	ldr	r3, [pc, #52]	@ (8009674 <MX_ADC1_Init+0x108>)
 8009640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009642:	2312      	movs	r3, #18
 8009644:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009646:	463b      	mov	r3, r7
 8009648:	4619      	mov	r1, r3
 800964a:	4806      	ldr	r0, [pc, #24]	@ (8009664 <MX_ADC1_Init+0xf8>)
 800964c:	f002 f906 	bl	800b85c <HAL_ADC_ConfigChannel>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8009656:	f000 fa3b 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800965a:	bf00      	nop
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	200001cc 	.word	0x200001cc
 8009668:	50040000 	.word	0x50040000
 800966c:	25b00200 	.word	0x25b00200
 8009670:	2a000400 	.word	0x2a000400
 8009674:	2e300800 	.word	0x2e300800

08009678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800967c:	4b1b      	ldr	r3, [pc, #108]	@ (80096ec <MX_I2C1_Init+0x74>)
 800967e:	4a1c      	ldr	r2, [pc, #112]	@ (80096f0 <MX_I2C1_Init+0x78>)
 8009680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8009682:	4b1a      	ldr	r3, [pc, #104]	@ (80096ec <MX_I2C1_Init+0x74>)
 8009684:	4a1b      	ldr	r2, [pc, #108]	@ (80096f4 <MX_I2C1_Init+0x7c>)
 8009686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009688:	4b18      	ldr	r3, [pc, #96]	@ (80096ec <MX_I2C1_Init+0x74>)
 800968a:	2200      	movs	r2, #0
 800968c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800968e:	4b17      	ldr	r3, [pc, #92]	@ (80096ec <MX_I2C1_Init+0x74>)
 8009690:	2201      	movs	r2, #1
 8009692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009694:	4b15      	ldr	r3, [pc, #84]	@ (80096ec <MX_I2C1_Init+0x74>)
 8009696:	2200      	movs	r2, #0
 8009698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800969a:	4b14      	ldr	r3, [pc, #80]	@ (80096ec <MX_I2C1_Init+0x74>)
 800969c:	2200      	movs	r2, #0
 800969e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80096a0:	4b12      	ldr	r3, [pc, #72]	@ (80096ec <MX_I2C1_Init+0x74>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80096a6:	4b11      	ldr	r3, [pc, #68]	@ (80096ec <MX_I2C1_Init+0x74>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80096ac:	4b0f      	ldr	r3, [pc, #60]	@ (80096ec <MX_I2C1_Init+0x74>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80096b2:	480e      	ldr	r0, [pc, #56]	@ (80096ec <MX_I2C1_Init+0x74>)
 80096b4:	f003 fc1e 	bl	800cef4 <HAL_I2C_Init>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80096be:	f000 fa07 	bl	8009ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80096c2:	2100      	movs	r1, #0
 80096c4:	4809      	ldr	r0, [pc, #36]	@ (80096ec <MX_I2C1_Init+0x74>)
 80096c6:	f003 fcb0 	bl	800d02a <HAL_I2CEx_ConfigAnalogFilter>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80096d0:	f000 f9fe 	bl	8009ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80096d4:	2100      	movs	r1, #0
 80096d6:	4805      	ldr	r0, [pc, #20]	@ (80096ec <MX_I2C1_Init+0x74>)
 80096d8:	f003 fcf2 	bl	800d0c0 <HAL_I2CEx_ConfigDigitalFilter>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80096e2:	f000 f9f5 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80096e6:	bf00      	nop
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000290 	.word	0x20000290
 80096f0:	40005400 	.word	0x40005400
 80096f4:	00b07cb4 	.word	0x00b07cb4

080096f8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80096fc:	4b06      	ldr	r3, [pc, #24]	@ (8009718 <MX_IPCC_Init+0x20>)
 80096fe:	4a07      	ldr	r2, [pc, #28]	@ (800971c <MX_IPCC_Init+0x24>)
 8009700:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8009702:	4805      	ldr	r0, [pc, #20]	@ (8009718 <MX_IPCC_Init+0x20>)
 8009704:	f003 fd28 	bl	800d158 <HAL_IPCC_Init>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800970e:	f000 f9df 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8009712:	bf00      	nop
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	200002e4 	.word	0x200002e4
 800971c:	58000c00 	.word	0x58000c00

08009720 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009734:	4b16      	ldr	r3, [pc, #88]	@ (8009790 <MX_RTC_Init+0x60>)
 8009736:	4a17      	ldr	r2, [pc, #92]	@ (8009794 <MX_RTC_Init+0x64>)
 8009738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800973a:	4b15      	ldr	r3, [pc, #84]	@ (8009790 <MX_RTC_Init+0x60>)
 800973c:	2200      	movs	r2, #0
 800973e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8009740:	4b13      	ldr	r3, [pc, #76]	@ (8009790 <MX_RTC_Init+0x60>)
 8009742:	220f      	movs	r2, #15
 8009744:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8009746:	4b12      	ldr	r3, [pc, #72]	@ (8009790 <MX_RTC_Init+0x60>)
 8009748:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800974c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800974e:	4b10      	ldr	r3, [pc, #64]	@ (8009790 <MX_RTC_Init+0x60>)
 8009750:	2200      	movs	r2, #0
 8009752:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009754:	4b0e      	ldr	r3, [pc, #56]	@ (8009790 <MX_RTC_Init+0x60>)
 8009756:	2200      	movs	r2, #0
 8009758:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800975a:	4b0d      	ldr	r3, [pc, #52]	@ (8009790 <MX_RTC_Init+0x60>)
 800975c:	2200      	movs	r2, #0
 800975e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009760:	4b0b      	ldr	r3, [pc, #44]	@ (8009790 <MX_RTC_Init+0x60>)
 8009762:	2200      	movs	r2, #0
 8009764:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009766:	480a      	ldr	r0, [pc, #40]	@ (8009790 <MX_RTC_Init+0x60>)
 8009768:	f005 fb48 	bl	800edfc <HAL_RTC_Init>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8009772:	f000 f9ad 	bl	8009ad0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	4805      	ldr	r0, [pc, #20]	@ (8009790 <MX_RTC_Init+0x60>)
 800977c:	f005 fc3e 	bl	800effc <HAL_RTCEx_SetWakeUpTimer>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8009786:	f000 f9a3 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000320 	.word	0x20000320
 8009794:	40002800 	.word	0x40002800

08009798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800979e:	f107 0310 	add.w	r3, r7, #16
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	605a      	str	r2, [r3, #4]
 80097a8:	609a      	str	r2, [r3, #8]
 80097aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097ac:	1d3b      	adds	r3, r7, #4
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80097b6:	4b20      	ldr	r3, [pc, #128]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097b8:	4a20      	ldr	r2, [pc, #128]	@ (800983c <MX_TIM1_Init+0xa4>)
 80097ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 80097bc:	4b1e      	ldr	r3, [pc, #120]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097be:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80097c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80097ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80097d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097d2:	4b19      	ldr	r3, [pc, #100]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80097d8:	4b17      	ldr	r3, [pc, #92]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097da:	2200      	movs	r2, #0
 80097dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097de:	4b16      	ldr	r3, [pc, #88]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80097e4:	4814      	ldr	r0, [pc, #80]	@ (8009838 <MX_TIM1_Init+0xa0>)
 80097e6:	f005 fca4 	bl	800f132 <HAL_TIM_Base_Init>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80097f0:	f000 f96e 	bl	8009ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	4619      	mov	r1, r3
 8009800:	480d      	ldr	r0, [pc, #52]	@ (8009838 <MX_TIM1_Init+0xa0>)
 8009802:	f006 f97f 	bl	800fb04 <HAL_TIM_ConfigClockSource>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800980c:	f000 f960 	bl	8009ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009810:	2300      	movs	r3, #0
 8009812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009814:	2300      	movs	r3, #0
 8009816:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800981c:	1d3b      	adds	r3, r7, #4
 800981e:	4619      	mov	r1, r3
 8009820:	4805      	ldr	r0, [pc, #20]	@ (8009838 <MX_TIM1_Init+0xa0>)
 8009822:	f006 feb3 	bl	801058c <HAL_TIMEx_MasterConfigSynchronization>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800982c:	f000 f950 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009830:	bf00      	nop
 8009832:	3720      	adds	r7, #32
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20000344 	.word	0x20000344
 800983c:	40012c00 	.word	0x40012c00

08009840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b08a      	sub	sp, #40	@ 0x28
 8009844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009846:	f107 031c 	add.w	r3, r7, #28
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	605a      	str	r2, [r3, #4]
 8009850:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009852:	463b      	mov	r3, r7
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	605a      	str	r2, [r3, #4]
 800985a:	609a      	str	r2, [r3, #8]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	611a      	str	r2, [r3, #16]
 8009860:	615a      	str	r2, [r3, #20]
 8009862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009864:	4b2d      	ldr	r3, [pc, #180]	@ (800991c <MX_TIM2_Init+0xdc>)
 8009866:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800986a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 800986c:	4b2b      	ldr	r3, [pc, #172]	@ (800991c <MX_TIM2_Init+0xdc>)
 800986e:	f240 123f 	movw	r2, #319	@ 0x13f
 8009872:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009874:	4b29      	ldr	r3, [pc, #164]	@ (800991c <MX_TIM2_Init+0xdc>)
 8009876:	2200      	movs	r2, #0
 8009878:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800987a:	4b28      	ldr	r3, [pc, #160]	@ (800991c <MX_TIM2_Init+0xdc>)
 800987c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009880:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009882:	4b26      	ldr	r3, [pc, #152]	@ (800991c <MX_TIM2_Init+0xdc>)
 8009884:	2200      	movs	r2, #0
 8009886:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009888:	4b24      	ldr	r3, [pc, #144]	@ (800991c <MX_TIM2_Init+0xdc>)
 800988a:	2200      	movs	r2, #0
 800988c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800988e:	4823      	ldr	r0, [pc, #140]	@ (800991c <MX_TIM2_Init+0xdc>)
 8009890:	f005 fd62 	bl	800f358 <HAL_TIM_PWM_Init>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800989a:	f000 f919 	bl	8009ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800989e:	2300      	movs	r3, #0
 80098a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80098a6:	f107 031c 	add.w	r3, r7, #28
 80098aa:	4619      	mov	r1, r3
 80098ac:	481b      	ldr	r0, [pc, #108]	@ (800991c <MX_TIM2_Init+0xdc>)
 80098ae:	f006 fe6d 	bl	801058c <HAL_TIMEx_MasterConfigSynchronization>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80098b8:	f000 f90a 	bl	8009ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098bc:	2360      	movs	r3, #96	@ 0x60
 80098be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098cc:	463b      	mov	r3, r7
 80098ce:	2200      	movs	r2, #0
 80098d0:	4619      	mov	r1, r3
 80098d2:	4812      	ldr	r0, [pc, #72]	@ (800991c <MX_TIM2_Init+0xdc>)
 80098d4:	f006 f802 	bl	800f8dc <HAL_TIM_PWM_ConfigChannel>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80098de:	f000 f8f7 	bl	8009ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80098e2:	463b      	mov	r3, r7
 80098e4:	2208      	movs	r2, #8
 80098e6:	4619      	mov	r1, r3
 80098e8:	480c      	ldr	r0, [pc, #48]	@ (800991c <MX_TIM2_Init+0xdc>)
 80098ea:	f005 fff7 	bl	800f8dc <HAL_TIM_PWM_ConfigChannel>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80098f4:	f000 f8ec 	bl	8009ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80098f8:	463b      	mov	r3, r7
 80098fa:	220c      	movs	r2, #12
 80098fc:	4619      	mov	r1, r3
 80098fe:	4807      	ldr	r0, [pc, #28]	@ (800991c <MX_TIM2_Init+0xdc>)
 8009900:	f005 ffec 	bl	800f8dc <HAL_TIM_PWM_ConfigChannel>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800990a:	f000 f8e1 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800990e:	4803      	ldr	r0, [pc, #12]	@ (800991c <MX_TIM2_Init+0xdc>)
 8009910:	f000 fac4 	bl	8009e9c <HAL_TIM_MspPostInit>

}
 8009914:	bf00      	nop
 8009916:	3728      	adds	r7, #40	@ 0x28
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000390 	.word	0x20000390

08009920 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009924:	4b0f      	ldr	r3, [pc, #60]	@ (8009964 <MX_TIM16_Init+0x44>)
 8009926:	4a10      	ldr	r2, [pc, #64]	@ (8009968 <MX_TIM16_Init+0x48>)
 8009928:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 800992a:	4b0e      	ldr	r3, [pc, #56]	@ (8009964 <MX_TIM16_Init+0x44>)
 800992c:	221f      	movs	r2, #31
 800992e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009930:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <MX_TIM16_Init+0x44>)
 8009932:	2200      	movs	r2, #0
 8009934:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8009936:	4b0b      	ldr	r3, [pc, #44]	@ (8009964 <MX_TIM16_Init+0x44>)
 8009938:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800993c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800993e:	4b09      	ldr	r3, [pc, #36]	@ (8009964 <MX_TIM16_Init+0x44>)
 8009940:	2200      	movs	r2, #0
 8009942:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009944:	4b07      	ldr	r3, [pc, #28]	@ (8009964 <MX_TIM16_Init+0x44>)
 8009946:	2200      	movs	r2, #0
 8009948:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800994a:	4b06      	ldr	r3, [pc, #24]	@ (8009964 <MX_TIM16_Init+0x44>)
 800994c:	2200      	movs	r2, #0
 800994e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009950:	4804      	ldr	r0, [pc, #16]	@ (8009964 <MX_TIM16_Init+0x44>)
 8009952:	f005 fbee 	bl	800f132 <HAL_TIM_Base_Init>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800995c:	f000 f8b8 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009960:	bf00      	nop
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200003dc 	.word	0x200003dc
 8009968:	40014400 	.word	0x40014400

0800996c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009970:	4b22      	ldr	r3, [pc, #136]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 8009972:	4a23      	ldr	r2, [pc, #140]	@ (8009a00 <MX_USART1_UART_Init+0x94>)
 8009974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009976:	4b21      	ldr	r3, [pc, #132]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 8009978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800997c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800997e:	4b1f      	ldr	r3, [pc, #124]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 8009980:	2200      	movs	r2, #0
 8009982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009984:	4b1d      	ldr	r3, [pc, #116]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 8009986:	2200      	movs	r2, #0
 8009988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800998a:	4b1c      	ldr	r3, [pc, #112]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 800998c:	2200      	movs	r2, #0
 800998e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009990:	4b1a      	ldr	r3, [pc, #104]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 8009992:	220c      	movs	r2, #12
 8009994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009996:	4b19      	ldr	r3, [pc, #100]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 8009998:	2200      	movs	r2, #0
 800999a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800999c:	4b17      	ldr	r3, [pc, #92]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 800999e:	2200      	movs	r2, #0
 80099a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099a2:	4b16      	ldr	r3, [pc, #88]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80099a8:	4b14      	ldr	r3, [pc, #80]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80099ae:	4b13      	ldr	r3, [pc, #76]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099b4:	4811      	ldr	r0, [pc, #68]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099b6:	f006 feac 	bl	8010712 <HAL_UART_Init>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80099c0:	f000 f886 	bl	8009ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099c4:	2100      	movs	r1, #0
 80099c6:	480d      	ldr	r0, [pc, #52]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099c8:	f007 ffc3 	bl	8011952 <HAL_UARTEx_SetTxFifoThreshold>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80099d2:	f000 f87d 	bl	8009ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099d6:	2100      	movs	r1, #0
 80099d8:	4808      	ldr	r0, [pc, #32]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099da:	f007 fff8 	bl	80119ce <HAL_UARTEx_SetRxFifoThreshold>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80099e4:	f000 f874 	bl	8009ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80099e8:	4804      	ldr	r0, [pc, #16]	@ (80099fc <MX_USART1_UART_Init+0x90>)
 80099ea:	f007 ff79 	bl	80118e0 <HAL_UARTEx_DisableFifoMode>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80099f4:	f000 f86c 	bl	8009ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80099f8:	bf00      	nop
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	20000428 	.word	0x20000428
 8009a00:	40013800 	.word	0x40013800

08009a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009a08:	2004      	movs	r0, #4
 8009a0a:	f7ff fc69 	bl	80092e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009a0e:	2001      	movs	r0, #1
 8009a10:	f7ff fc66 	bl	80092e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	200b      	movs	r0, #11
 8009a1a:	f002 fd0a 	bl	800c432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009a1e:	200b      	movs	r0, #11
 8009a20:	f002 fd21 	bl	800c466 <HAL_NVIC_EnableIRQ>

}
 8009a24:	bf00      	nop
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a2e:	1d3b      	adds	r3, r7, #4
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	609a      	str	r2, [r3, #8]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a3c:	2004      	movs	r0, #4
 8009a3e:	f7ff fc68 	bl	8009312 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a42:	2002      	movs	r0, #2
 8009a44:	f7ff fc65 	bl	8009312 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a48:	2001      	movs	r0, #1
 8009a4a:	f7ff fc62 	bl	8009312 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a4e:	2010      	movs	r0, #16
 8009a50:	f7ff fc5f 	bl	8009312 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8009a54:	2200      	movs	r2, #0
 8009a56:	2110      	movs	r1, #16
 8009a58:	481b      	ldr	r0, [pc, #108]	@ (8009ac8 <MX_GPIO_Init+0xa0>)
 8009a5a:	f003 f9f5 	bl	800ce48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8009a5e:	2302      	movs	r3, #2
 8009a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009a66:	2301      	movs	r3, #1
 8009a68:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8009a6a:	1d3b      	adds	r3, r7, #4
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a72:	f003 f861 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_HUMID_Pin */
  GPIO_InitStruct.Pin = TEMP_HUMID_Pin;
 8009a76:	2380      	movs	r3, #128	@ 0x80
 8009a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEMP_HUMID_GPIO_Port, &GPIO_InitStruct);
 8009a82:	1d3b      	adds	r3, r7, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a8a:	f003 f855 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8009a8e:	2310      	movs	r3, #16
 8009a90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a92:	2301      	movs	r3, #1
 8009a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8009a9e:	1d3b      	adds	r3, r7, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4809      	ldr	r0, [pc, #36]	@ (8009ac8 <MX_GPIO_Init+0xa0>)
 8009aa4:	f003 f848 	bl	800cb38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8009aa8:	2380      	movs	r3, #128	@ 0x80
 8009aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8009ab4:	1d3b      	adds	r3, r7, #4
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4804      	ldr	r0, [pc, #16]	@ (8009acc <MX_GPIO_Init+0xa4>)
 8009aba:	f003 f83d 	bl	800cb38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009abe:	bf00      	nop
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	48001000 	.word	0x48001000
 8009acc:	48000400 	.word	0x48000400

08009ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009ad4:	b672      	cpsid	i
}
 8009ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <Error_Handler+0x8>

08009adc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8009ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009af4:	bf00      	nop
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <LL_AHB2_GRP1_EnableClock>:
{
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b22:	68fb      	ldr	r3, [r7, #12]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4013      	ands	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b54:	68fb      	ldr	r3, [r7, #12]
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b085      	sub	sp, #20
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4013      	ands	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	bf00      	nop
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009ba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8009bca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009bce:	f7ff ffaf 	bl	8009b30 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	202e      	movs	r0, #46	@ 0x2e
 8009bd8:	f002 fc2b 	bl	800c432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8009bdc:	202e      	movs	r0, #46	@ 0x2e
 8009bde:	f002 fc42 	bl	800c466 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009be2:	bf00      	nop
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b09c      	sub	sp, #112	@ 0x70
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bf0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	609a      	str	r2, [r3, #8]
 8009bfc:	60da      	str	r2, [r3, #12]
 8009bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	2250      	movs	r2, #80	@ 0x50
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f00d fa6d 	bl	80170e8 <memset>
  if(hadc->Instance==ADC1)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a32      	ldr	r2, [pc, #200]	@ (8009cdc <HAL_ADC_MspInit+0xf4>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d15c      	bne.n	8009cd2 <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8009c1e:	2318      	movs	r3, #24
 8009c20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009c22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8009c28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8009c2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009c32:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8009c34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8009c3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	4618      	mov	r0, r3
 8009c46:	f004 fe52 	bl	800e8ee <HAL_RCCEx_PeriphCLKConfig>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8009c50:	f7ff ff3e 	bl	8009ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009c54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009c58:	f7ff ff51 	bl	8009afe <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7ff ff4e 	bl	8009afe <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8009c62:	2370      	movs	r3, #112	@ 0x70
 8009c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c66:	2303      	movs	r3, #3
 8009c68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009c72:	4619      	mov	r1, r3
 8009c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009c78:	f002 ff5e 	bl	800cb38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8009c7c:	4b18      	ldr	r3, [pc, #96]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009c7e:	4a19      	ldr	r2, [pc, #100]	@ (8009ce4 <HAL_ADC_MspInit+0xfc>)
 8009c80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8009c82:	4b17      	ldr	r3, [pc, #92]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009c84:	2205      	movs	r2, #5
 8009c86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009c88:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c8e:	4b14      	ldr	r3, [pc, #80]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009c94:	4b12      	ldr	r3, [pc, #72]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009c96:	2280      	movs	r2, #128	@ 0x80
 8009c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009c9a:	4b11      	ldr	r3, [pc, #68]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009ca4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009caa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009cac:	2220      	movs	r2, #32
 8009cae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009cb6:	480a      	ldr	r0, [pc, #40]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009cb8:	f002 fc0c 	bl	800c4d4 <HAL_DMA_Init>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8009cc2:	f7ff ff05 	bl	8009ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a05      	ldr	r2, [pc, #20]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009cca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009ccc:	4a04      	ldr	r2, [pc, #16]	@ (8009ce0 <HAL_ADC_MspInit+0xf8>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8009cd2:	bf00      	nop
 8009cd4:	3770      	adds	r7, #112	@ 0x70
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	50040000 	.word	0x50040000
 8009ce0:	20000230 	.word	0x20000230
 8009ce4:	40020008 	.word	0x40020008

08009ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b09c      	sub	sp, #112	@ 0x70
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cf0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	605a      	str	r2, [r3, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
 8009cfc:	60da      	str	r2, [r3, #12]
 8009cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	2250      	movs	r2, #80	@ 0x50
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f00d f9ed 	bl	80170e8 <memset>
  if(hi2c->Instance==I2C1)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a17      	ldr	r2, [pc, #92]	@ (8009d70 <HAL_I2C_MspInit+0x88>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d126      	bne.n	8009d66 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8009d18:	2304      	movs	r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009d1c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8009d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d22:	f107 030c 	add.w	r3, r7, #12
 8009d26:	4618      	mov	r0, r3
 8009d28:	f004 fde1 	bl	800e8ee <HAL_RCCEx_PeriphCLKConfig>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8009d32:	f7ff fecd 	bl	8009ad0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d36:	2002      	movs	r0, #2
 8009d38:	f7ff fee1 	bl	8009afe <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009d3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009d42:	2312      	movs	r3, #18
 8009d44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009d4e:	2304      	movs	r3, #4
 8009d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009d56:	4619      	mov	r1, r3
 8009d58:	4806      	ldr	r0, [pc, #24]	@ (8009d74 <HAL_I2C_MspInit+0x8c>)
 8009d5a:	f002 feed 	bl	800cb38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009d5e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009d62:	f7ff fefe 	bl	8009b62 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009d66:	bf00      	nop
 8009d68:	3770      	adds	r7, #112	@ 0x70
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	40005400 	.word	0x40005400
 8009d74:	48000400 	.word	0x48000400

08009d78 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a0d      	ldr	r2, [pc, #52]	@ (8009dbc <HAL_IPCC_MspInit+0x44>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d113      	bne.n	8009db2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8009d8a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009d8e:	f7ff fecf 	bl	8009b30 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8009d92:	2200      	movs	r2, #0
 8009d94:	2100      	movs	r1, #0
 8009d96:	202c      	movs	r0, #44	@ 0x2c
 8009d98:	f002 fb4b 	bl	800c432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009d9c:	202c      	movs	r0, #44	@ 0x2c
 8009d9e:	f002 fb62 	bl	800c466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8009da2:	2200      	movs	r2, #0
 8009da4:	2100      	movs	r1, #0
 8009da6:	202d      	movs	r0, #45	@ 0x2d
 8009da8:	f002 fb43 	bl	800c432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009dac:	202d      	movs	r0, #45	@ 0x2d
 8009dae:	f002 fb5a 	bl	800c466 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	58000c00 	.word	0x58000c00

08009dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b096      	sub	sp, #88	@ 0x58
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009dc8:	f107 0308 	add.w	r3, r7, #8
 8009dcc:	2250      	movs	r2, #80	@ 0x50
 8009dce:	2100      	movs	r1, #0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f00d f989 	bl	80170e8 <memset>
  if(hrtc->Instance==RTC)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a0f      	ldr	r2, [pc, #60]	@ (8009e18 <HAL_RTC_MspInit+0x58>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d117      	bne.n	8009e10 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8009de0:	f003 fa40 	bl	800d264 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009de4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009de8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009dea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009dee:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009df0:	f107 0308 	add.w	r3, r7, #8
 8009df4:	4618      	mov	r0, r3
 8009df6:	f004 fd7a 	bl	800e8ee <HAL_RCCEx_PeriphCLKConfig>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8009e00:	f7ff fe66 	bl	8009ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009e04:	f7ff fe6a 	bl	8009adc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8009e08:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009e0c:	f7ff fea9 	bl	8009b62 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8009e10:	bf00      	nop
 8009e12:	3758      	adds	r7, #88	@ 0x58
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40002800 	.word	0x40002800

08009e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a12      	ldr	r2, [pc, #72]	@ (8009e74 <HAL_TIM_Base_MspInit+0x58>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d10c      	bne.n	8009e48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009e2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009e32:	f7ff feaf 	bl	8009b94 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	2019      	movs	r0, #25
 8009e3c:	f002 faf9 	bl	800c432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009e40:	2019      	movs	r0, #25
 8009e42:	f002 fb10 	bl	800c466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8009e46:	e010      	b.n	8009e6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8009e78 <HAL_TIM_Base_MspInit+0x5c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d10b      	bne.n	8009e6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009e52:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009e56:	f7ff fe9d 	bl	8009b94 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	2019      	movs	r0, #25
 8009e60:	f002 fae7 	bl	800c432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009e64:	2019      	movs	r0, #25
 8009e66:	f002 fafe 	bl	800c466 <HAL_NVIC_EnableIRQ>
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	40012c00 	.word	0x40012c00
 8009e78:	40014400 	.word	0x40014400

08009e7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e8c:	d102      	bne.n	8009e94 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009e8e:	2001      	movs	r0, #1
 8009e90:	f7ff fe67 	bl	8009b62 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ea4:	f107 030c 	add.w	r3, r7, #12
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	605a      	str	r2, [r3, #4]
 8009eae:	609a      	str	r2, [r3, #8]
 8009eb0:	60da      	str	r2, [r3, #12]
 8009eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ebc:	d113      	bne.n	8009ee6 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	f7ff fe1d 	bl	8009afe <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 8009ec4:	230d      	movs	r3, #13
 8009ec6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ed8:	f107 030c 	add.w	r3, r7, #12
 8009edc:	4619      	mov	r1, r3
 8009ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ee2:	f002 fe29 	bl	800cb38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009ee6:	bf00      	nop
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b09c      	sub	sp, #112	@ 0x70
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ef8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	605a      	str	r2, [r3, #4]
 8009f02:	609a      	str	r2, [r3, #8]
 8009f04:	60da      	str	r2, [r3, #12]
 8009f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	2250      	movs	r2, #80	@ 0x50
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4618      	mov	r0, r3
 8009f12:	f00d f8e9 	bl	80170e8 <memset>
  if(huart->Instance==USART1)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009f88 <HAL_UART_MspInit+0x98>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d12e      	bne.n	8009f7e <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009f20:	2301      	movs	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009f24:	2300      	movs	r3, #0
 8009f26:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f28:	f107 030c 	add.w	r3, r7, #12
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f004 fcde 	bl	800e8ee <HAL_RCCEx_PeriphCLKConfig>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009f38:	f7ff fdca 	bl	8009ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009f3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009f40:	f7ff fe28 	bl	8009b94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f44:	2001      	movs	r0, #1
 8009f46:	f7ff fdda 	bl	8009afe <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009f4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f50:	2302      	movs	r3, #2
 8009f52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009f5c:	2307      	movs	r3, #7
 8009f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009f64:	4619      	mov	r1, r3
 8009f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f6a:	f002 fde5 	bl	800cb38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2100      	movs	r1, #0
 8009f72:	2024      	movs	r0, #36	@ 0x24
 8009f74:	f002 fa5d 	bl	800c432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009f78:	2024      	movs	r0, #36	@ 0x24
 8009f7a:	f002 fa74 	bl	800c466 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009f7e:	bf00      	nop
 8009f80:	3770      	adds	r7, #112	@ 0x70
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	40013800 	.word	0x40013800

08009f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <NMI_Handler+0x4>

08009f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009f98:	bf00      	nop
 8009f9a:	e7fd      	b.n	8009f98 <HardFault_Handler+0x4>

08009f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009fa0:	bf00      	nop
 8009fa2:	e7fd      	b.n	8009fa0 <MemManage_Handler+0x4>

08009fa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009fa8:	bf00      	nop
 8009faa:	e7fd      	b.n	8009fa8 <BusFault_Handler+0x4>

08009fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <UsageFault_Handler+0x4>

08009fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009fb8:	bf00      	nop
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009fc6:	bf00      	nop
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009fd4:	bf00      	nop
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009fe2:	f001 f84d 	bl	800b080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009fe6:	bf00      	nop
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009ff0:	4802      	ldr	r0, [pc, #8]	@ (8009ffc <DMA1_Channel1_IRQHandler+0x10>)
 8009ff2:	f002 fc50 	bl	800c896 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009ff6:	bf00      	nop
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000230 	.word	0x20000230

0800a000 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a004:	4804      	ldr	r0, [pc, #16]	@ (800a018 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a006:	f005 fb61 	bl	800f6cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800a00a:	4804      	ldr	r0, [pc, #16]	@ (800a01c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800a00c:	f005 fb5e 	bl	800f6cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  cyclic_routine();
 800a010:	f000 fb4c 	bl	800a6ac <cyclic_routine>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a014:	bf00      	nop
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20000344 	.word	0x20000344
 800a01c:	200003dc 	.word	0x200003dc

0800a020 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a024:	4802      	ldr	r0, [pc, #8]	@ (800a030 <USART1_IRQHandler+0x10>)
 800a026:	f006 fc53 	bl	80108d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a02a:	bf00      	nop
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000428 	.word	0x20000428

0800a034 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800a038:	f00c f868 	bl	801610c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800a03c:	bf00      	nop
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800a044:	f00c f8b8 	bl	80161b8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800a048:	bf00      	nop
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800a050:	f002 ff2c 	bl	800ceac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800a054:	bf00      	nop
 800a056:	bd80      	pop	{r7, pc}

0800a058 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 800a058:	b40c      	push	{r2, r3}
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	4603      	mov	r3, r0
 800a062:	460a      	mov	r2, r1
 800a064:	71fb      	strb	r3, [r7, #7]
 800a066:	4613      	mov	r3, r2
 800a068:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	b002      	add	sp, #8
 800a076:	4770      	bx	lr

0800a078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
  return 1;
 800a07c:	2301      	movs	r3, #1
}
 800a07e:	4618      	mov	r0, r3
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <_kill>:

int _kill(int pid, int sig)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a092:	f00d f8ab 	bl	80171ec <__errno>
 800a096:	4603      	mov	r3, r0
 800a098:	2216      	movs	r2, #22
 800a09a:	601a      	str	r2, [r3, #0]
  return -1;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <_exit>:

void _exit (int status)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a0b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff ffe7 	bl	800a088 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a0ba:	bf00      	nop
 800a0bc:	e7fd      	b.n	800a0ba <_exit+0x12>

0800a0be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b086      	sub	sp, #24
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	e00a      	b.n	800a0e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a0d0:	f3af 8000 	nop.w
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	60ba      	str	r2, [r7, #8]
 800a0dc:	b2ca      	uxtb	r2, r1
 800a0de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	dbf0      	blt.n	800a0d0 <_read+0x12>
  }

  return len;
 800a0ee:	687b      	ldr	r3, [r7, #4]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	e009      	b.n	800a11e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	60ba      	str	r2, [r7, #8]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f7ff f916 	bl	8009344 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	3301      	adds	r3, #1
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	429a      	cmp	r2, r3
 800a124:	dbf1      	blt.n	800a10a <_write+0x12>
  }
  return len;
 800a126:	687b      	ldr	r3, [r7, #4]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <_close>:

int _close(int file)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a158:	605a      	str	r2, [r3, #4]
  return 0;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <_isatty>:

int _isatty(int file)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a170:	2301      	movs	r3, #1
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a1a0:	4a14      	ldr	r2, [pc, #80]	@ (800a1f4 <_sbrk+0x5c>)
 800a1a2:	4b15      	ldr	r3, [pc, #84]	@ (800a1f8 <_sbrk+0x60>)
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a1ac:	4b13      	ldr	r3, [pc, #76]	@ (800a1fc <_sbrk+0x64>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a1b4:	4b11      	ldr	r3, [pc, #68]	@ (800a1fc <_sbrk+0x64>)
 800a1b6:	4a12      	ldr	r2, [pc, #72]	@ (800a200 <_sbrk+0x68>)
 800a1b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a1ba:	4b10      	ldr	r3, [pc, #64]	@ (800a1fc <_sbrk+0x64>)
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d207      	bcs.n	800a1d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a1c8:	f00d f810 	bl	80171ec <__errno>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	220c      	movs	r2, #12
 800a1d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d6:	e009      	b.n	800a1ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a1d8:	4b08      	ldr	r3, [pc, #32]	@ (800a1fc <_sbrk+0x64>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a1de:	4b07      	ldr	r3, [pc, #28]	@ (800a1fc <_sbrk+0x64>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	4a05      	ldr	r2, [pc, #20]	@ (800a1fc <_sbrk+0x64>)
 800a1e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	20030000 	.word	0x20030000
 800a1f8:	00000400 	.word	0x00000400
 800a1fc:	20000508 	.word	0x20000508
 800a200:	20000a30 	.word	0x20000a30

0800a204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800a208:	4b24      	ldr	r3, [pc, #144]	@ (800a29c <SystemInit+0x98>)
 800a20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a20e:	4a23      	ldr	r2, [pc, #140]	@ (800a29c <SystemInit+0x98>)
 800a210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800a228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a22c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800a230:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800a232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a23c:	4b18      	ldr	r3, [pc, #96]	@ (800a2a0 <SystemInit+0x9c>)
 800a23e:	4013      	ands	r3, r2
 800a240:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800a242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a24a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a24e:	f023 0305 	bic.w	r3, r3, #5
 800a252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a25a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a25e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a262:	f023 0301 	bic.w	r3, r3, #1
 800a266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800a26a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a26e:	4a0d      	ldr	r2, [pc, #52]	@ (800a2a4 <SystemInit+0xa0>)
 800a270:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800a272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a276:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a4 <SystemInit+0xa0>)
 800a278:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a27a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a288:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a28a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a28e:	2200      	movs	r2, #0
 800a290:	619a      	str	r2, [r3, #24]
}
 800a292:	bf00      	nop
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	e000ed00 	.word	0xe000ed00
 800a2a0:	faf6fefb 	.word	0xfaf6fefb
 800a2a4:	22041000 	.word	0x22041000

0800a2a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800a2a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a2aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a2ac:	3304      	adds	r3, #4

0800a2ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a2ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a2b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800a2b2:	d3f9      	bcc.n	800a2a8 <CopyDataInit>
  bx lr
 800a2b4:	4770      	bx	lr

0800a2b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800a2b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800a2b8:	3004      	adds	r0, #4

0800a2ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800a2ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 800a2bc:	d3fb      	bcc.n	800a2b6 <FillZerobss>
  bx lr
 800a2be:	4770      	bx	lr

0800a2c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a2c0:	480c      	ldr	r0, [pc, #48]	@ (800a2f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a2c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a2c4:	f7ff ff9e 	bl	800a204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800a2c8:	480b      	ldr	r0, [pc, #44]	@ (800a2f8 <LoopForever+0x6>)
 800a2ca:	490c      	ldr	r1, [pc, #48]	@ (800a2fc <LoopForever+0xa>)
 800a2cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a300 <LoopForever+0xe>)
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f7ff ffed 	bl	800a2ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800a2d4:	480b      	ldr	r0, [pc, #44]	@ (800a304 <LoopForever+0x12>)
 800a2d6:	490c      	ldr	r1, [pc, #48]	@ (800a308 <LoopForever+0x16>)
 800a2d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a30c <LoopForever+0x1a>)
 800a2da:	2300      	movs	r3, #0
 800a2dc:	f7ff ffe7 	bl	800a2ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800a2e0:	480b      	ldr	r0, [pc, #44]	@ (800a310 <LoopForever+0x1e>)
 800a2e2:	490c      	ldr	r1, [pc, #48]	@ (800a314 <LoopForever+0x22>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f7ff ffe8 	bl	800a2ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800a2ea:	f00c ff85 	bl	80171f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800a2ee:	f7ff f83b 	bl	8009368 <main>

0800a2f2 <LoopForever>:

LoopForever:
  b LoopForever
 800a2f2:	e7fe      	b.n	800a2f2 <LoopForever>
  ldr   r0, =_estack
 800a2f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800a2f8:	20000008 	.word	0x20000008
 800a2fc:	200000f8 	.word	0x200000f8
 800a300:	08019f28 	.word	0x08019f28
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800a304:	200300e4 	.word	0x200300e4
 800a308:	20030b5a 	.word	0x20030b5a
 800a30c:	0801a029 	.word	0x0801a029
  INIT_BSS _sbss, _ebss
 800a310:	20000110 	.word	0x20000110
 800a314:	20000a30 	.word	0x20000a30

0800a318 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a318:	e7fe      	b.n	800a318 <ADC1_IRQHandler>

0800a31a <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
 800a326:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	609a      	str	r2, [r3, #8]
	dht->port = port;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	887a      	ldrh	r2, [r7, #2]
 800a338:	809a      	strh	r2, [r3, #4]
}
 800a33a:	bf00      	nop
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b088      	sub	sp, #32
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	460b      	mov	r3, r1
 800a350:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a352:	f107 030c 	add.w	r3, r7, #12
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	605a      	str	r2, [r3, #4]
 800a35c:	609a      	str	r2, [r3, #8]
 800a35e:	60da      	str	r2, [r3, #12]
 800a360:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d111      	bne.n	800a38c <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	889b      	ldrh	r3, [r3, #4]
 800a36c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a36e:	2301      	movs	r3, #1
 800a370:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a376:	2303      	movs	r3, #3
 800a378:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f107 020c 	add.w	r2, r7, #12
 800a382:	4611      	mov	r1, r2
 800a384:	4618      	mov	r0, r3
 800a386:	f002 fbd7 	bl	800cb38 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 800a38a:	e013      	b.n	800a3b4 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d110      	bne.n	800a3b4 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	889b      	ldrh	r3, [r3, #4]
 800a396:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a398:	2300      	movs	r3, #0
 800a39a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f107 020c 	add.w	r2, r7, #12
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f002 fbc2 	bl	800cb38 <HAL_GPIO_Init>
}
 800a3b4:	bf00      	nop
 800a3b6:	3720      	adds	r7, #32
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b094      	sub	sp, #80	@ 0x50
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff ffaa 	bl	800a346 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	889b      	ldrh	r3, [r3, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f002 fd23 	bl	800ce48 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 800a402:	2012      	movs	r0, #18
 800a404:	f7fe fdea 	bl	8008fdc <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 800a408:	b672      	cpsid	i
}
 800a40a:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	4618      	mov	r0, r3
 800a412:	f004 fee5 	bl	800f1e0 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 800a416:	2100      	movs	r1, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ff94 	bl	800a346 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2200      	movs	r2, #0
 800a426:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800a428:	e00b      	b.n	800a442 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a432:	b29b      	uxth	r3, r3
 800a434:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a438:	d903      	bls.n	800a442 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 800a43a:	b662      	cpsie	i
}
 800a43c:	bf00      	nop
			__enable_irq();
			return 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	e130      	b.n	800a6a4 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	889b      	ldrh	r3, [r3, #4]
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f002 fce3 	bl	800ce18 <HAL_GPIO_ReadPin>
 800a452:	4603      	mov	r3, r0
 800a454:	2b01      	cmp	r3, #1
 800a456:	d0e8      	beq.n	800a42a <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2200      	movs	r2, #0
 800a460:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800a462:	e00b      	b.n	800a47c <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a472:	d903      	bls.n	800a47c <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 800a474:	b662      	cpsie	i
}
 800a476:	bf00      	nop
			__enable_irq();
			return 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	e113      	b.n	800a6a4 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	889b      	ldrh	r3, [r3, #4]
 800a484:	4619      	mov	r1, r3
 800a486:	4610      	mov	r0, r2
 800a488:	f002 fcc6 	bl	800ce18 <HAL_GPIO_ReadPin>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0e8      	beq.n	800a464 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800a4a6:	e00b      	b.n	800a4c0 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a4b6:	d903      	bls.n	800a4c0 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 800a4b8:	b662      	cpsie	i
}
 800a4ba:	bf00      	nop
			__enable_irq();
			return 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e0f1      	b.n	800a6a4 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	889b      	ldrh	r3, [r3, #4]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	f002 fca4 	bl	800ce18 <HAL_GPIO_ReadPin>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d0e8      	beq.n	800a4a8 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4de:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 800a4e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4e2:	2b4a      	cmp	r3, #74	@ 0x4a
 800a4e4:	d80c      	bhi.n	800a500 <readDHT11+0x144>
 800a4e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4e8:	2b55      	cmp	r3, #85	@ 0x55
 800a4ea:	d909      	bls.n	800a500 <readDHT11+0x144>
 800a4ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a4ee:	2b4a      	cmp	r3, #74	@ 0x4a
 800a4f0:	d806      	bhi.n	800a500 <readDHT11+0x144>
 800a4f2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a4f4:	2b55      	cmp	r3, #85	@ 0x55
 800a4f6:	d903      	bls.n	800a500 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 800a4f8:	b662      	cpsie	i
}
 800a4fa:	bf00      	nop
	{
		__enable_irq();
		return 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	e0d1      	b.n	800a6a4 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 800a500:	2300      	movs	r3, #0
 800a502:	647b      	str	r3, [r7, #68]	@ 0x44
 800a504:	e05d      	b.n	800a5c2 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2200      	movs	r2, #0
 800a50e:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800a510:	e00b      	b.n	800a52a <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a520:	d903      	bls.n	800a52a <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 800a522:	b662      	cpsie	i
}
 800a524:	bf00      	nop
				__enable_irq();
				return 0;
 800a526:	2300      	movs	r3, #0
 800a528:	e0bc      	b.n	800a6a4 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	889b      	ldrh	r3, [r3, #4]
 800a532:	4619      	mov	r1, r3
 800a534:	4610      	mov	r0, r2
 800a536:	f002 fc6f 	bl	800ce18 <HAL_GPIO_ReadPin>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0e8      	beq.n	800a512 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800a54a:	e00b      	b.n	800a564 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a554:	b29b      	uxth	r3, r3
 800a556:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a55a:	d903      	bls.n	800a564 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 800a55c:	b662      	cpsie	i
}
 800a55e:	bf00      	nop
				__enable_irq();
				return 0;
 800a560:	2300      	movs	r3, #0
 800a562:	e09f      	b.n	800a6a4 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	889b      	ldrh	r3, [r3, #4]
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f002 fc52 	bl	800ce18 <HAL_GPIO_ReadPin>
 800a574:	4603      	mov	r3, r0
 800a576:	2b01      	cmp	r3, #1
 800a578:	d0e8      	beq.n	800a54c <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 800a584:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a586:	2b14      	cmp	r3, #20
 800a588:	d906      	bls.n	800a598 <readDHT11+0x1dc>
 800a58a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a58c:	2b1d      	cmp	r3, #29
 800a58e:	d803      	bhi.n	800a598 <readDHT11+0x1dc>
		{
			mBit = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a596:	e008      	b.n	800a5aa <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800a598:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a59a:	2b3c      	cmp	r3, #60	@ 0x3c
 800a59c:	d905      	bls.n	800a5aa <readDHT11+0x1ee>
 800a59e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5a0:	2b4f      	cmp	r3, #79	@ 0x4f
 800a5a2:	d802      	bhi.n	800a5aa <readDHT11+0x1ee>
		{
			 mBit = 1;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 800a5aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a5ae:	b2d9      	uxtb	r1, r3
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5b6:	4413      	add	r3, r2
 800a5b8:	460a      	mov	r2, r1
 800a5ba:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 800a5bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5be:	3301      	adds	r3, #1
 800a5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5c4:	2b27      	cmp	r3, #39	@ 0x27
 800a5c6:	dd9e      	ble.n	800a506 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f004 fe4d 	bl	800f26c <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 800a5d2:	b662      	cpsie	i
}
 800a5d4:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5da:	e011      	b.n	800a600 <readDHT11+0x244>
	{
		humVal += mData[i];
 800a5dc:	f107 0208 	add.w	r2, r7, #8
 800a5e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e2:	4413      	add	r3, r2
 800a5e4:	781a      	ldrb	r2, [r3, #0]
 800a5e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 800a5f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 800a5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800a600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a602:	2b07      	cmp	r3, #7
 800a604:	ddea      	ble.n	800a5dc <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 800a606:	2310      	movs	r3, #16
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a60a:	e011      	b.n	800a630 <readDHT11+0x274>
	{
		tempVal += mData[i];
 800a60c:	f107 0208 	add.w	r2, r7, #8
 800a610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a612:	4413      	add	r3, r2
 800a614:	781a      	ldrb	r2, [r3, #0]
 800a616:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a61a:	4413      	add	r3, r2
 800a61c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 800a620:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 800a62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a62c:	3301      	adds	r3, #1
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a632:	2b17      	cmp	r3, #23
 800a634:	ddea      	ble.n	800a60c <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 800a636:	2320      	movs	r3, #32
 800a638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a63a:	e011      	b.n	800a660 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 800a63c:	f107 0208 	add.w	r2, r7, #8
 800a640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a642:	4413      	add	r3, r2
 800a644:	781a      	ldrb	r2, [r3, #0]
 800a646:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a64a:	4413      	add	r3, r2
 800a64c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 800a650:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	3301      	adds	r3, #1
 800a65e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a662:	2b27      	cmp	r3, #39	@ 0x27
 800a664:	ddea      	ble.n	800a63c <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 800a666:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a66a:	085b      	lsrs	r3, r3, #1
 800a66c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 800a670:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800a674:	085b      	lsrs	r3, r3, #1
 800a676:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 800a67a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a67e:	085b      	lsrs	r3, r3, #1
 800a680:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 800a684:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800a688:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a68c:	4413      	add	r3, r2
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800a698:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800a6a0:	735a      	strb	r2, [r3, #13]


	return 1;
 800a6a2:	2301      	movs	r3, #1
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3750      	adds	r7, #80	@ 0x50
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <cyclic_routine>:
extern struct SOIL_MOIST_obj OBJ_SOIL_MOIST_sensor_1;	// Object for soil moisture sensor 1
extern struct SOIL_MOIST_obj OBJ_SOIL_MOIST_sensor_2;	// Object for soil moisture sensor 2

struct APP_ZIGBEE_cyclic_data data = {0};

void cyclic_routine(void){
 800a6ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a6b0:	af00      	add	r7, sp, #0
	TEMP_HUMID_read(&OBJ_TEMP_HUMID);
 800a6b2:	4822      	ldr	r0, [pc, #136]	@ (800a73c <cyclic_routine+0x90>)
 800a6b4:	f000 fc2b 	bl	800af0e <TEMP_HUMID_read>
	data.temperature = TEMP_HUMID_get_temperature(&OBJ_TEMP_HUMID);
 800a6b8:	4820      	ldr	r0, [pc, #128]	@ (800a73c <cyclic_routine+0x90>)
 800a6ba:	f000 fc59 	bl	800af70 <TEMP_HUMID_get_temperature>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	491f      	ldr	r1, [pc, #124]	@ (800a740 <cyclic_routine+0x94>)
 800a6c4:	e9c1 2300 	strd	r2, r3, [r1]
	data.humidity = TEMP_HUMID_get_humidity(&OBJ_TEMP_HUMID);
 800a6c8:	481c      	ldr	r0, [pc, #112]	@ (800a73c <cyclic_routine+0x90>)
 800a6ca:	f000 fc68 	bl	800af9e <TEMP_HUMID_get_humidity>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	491b      	ldr	r1, [pc, #108]	@ (800a740 <cyclic_routine+0x94>)
 800a6d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data.soil_moisture_1 = SOIL_MOIST_get_moisture_percent(&OBJ_SOIL_MOIST_sensor_1);
 800a6d8:	481a      	ldr	r0, [pc, #104]	@ (800a744 <cyclic_routine+0x98>)
 800a6da:	f000 fbc9 	bl	800ae70 <SOIL_MOIST_get_moisture_percent>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4698      	mov	r8, r3
 800a6e6:	4691      	mov	r9, r2
 800a6e8:	4b15      	ldr	r3, [pc, #84]	@ (800a740 <cyclic_routine+0x94>)
 800a6ea:	e9c3 8904 	strd	r8, r9, [r3, #16]
	data.soil_moisture_2 = SOIL_MOIST_get_moisture_percent(&OBJ_SOIL_MOIST_sensor_2);
 800a6ee:	4816      	ldr	r0, [pc, #88]	@ (800a748 <cyclic_routine+0x9c>)
 800a6f0:	f000 fbbe 	bl	800ae70 <SOIL_MOIST_get_moisture_percent>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	461c      	mov	r4, r3
 800a6fc:	4615      	mov	r5, r2
 800a6fe:	4b10      	ldr	r3, [pc, #64]	@ (800a740 <cyclic_routine+0x94>)
 800a700:	e9c3 4506 	strd	r4, r5, [r3, #24]
#ifdef DEGBUG_PRINTF
	printf("Temperature: %d, Humidity: %d\n", OBJ_TEMP_HUMID.dht11.temperature, OBJ_TEMP_HUMID.dht11.humidty);
 800a704:	4b0d      	ldr	r3, [pc, #52]	@ (800a73c <cyclic_routine+0x90>)
 800a706:	7e1b      	ldrb	r3, [r3, #24]
 800a708:	4619      	mov	r1, r3
 800a70a:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <cyclic_routine+0x90>)
 800a70c:	7e5b      	ldrb	r3, [r3, #25]
 800a70e:	461a      	mov	r2, r3
 800a710:	480e      	ldr	r0, [pc, #56]	@ (800a74c <cyclic_routine+0xa0>)
 800a712:	f00c facd 	bl	8016cb0 <iprintf>
	printf("Soil Moisture: %d promille\n", SOIL_MOIST_get_moisture_percent(&OBJ_SOIL_MOIST_sensor_1));
 800a716:	480b      	ldr	r0, [pc, #44]	@ (800a744 <cyclic_routine+0x98>)
 800a718:	f000 fbaa 	bl	800ae70 <SOIL_MOIST_get_moisture_percent>
 800a71c:	4603      	mov	r3, r0
 800a71e:	4619      	mov	r1, r3
 800a720:	480b      	ldr	r0, [pc, #44]	@ (800a750 <cyclic_routine+0xa4>)
 800a722:	f00c fac5 	bl	8016cb0 <iprintf>
#endif
	APP_ZIGBEE_cyclic_reporting(&data);
 800a726:	4806      	ldr	r0, [pc, #24]	@ (800a740 <cyclic_routine+0x94>)
 800a728:	f00b fb58 	bl	8015ddc <APP_ZIGBEE_cyclic_reporting>
	HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 800a72c:	2110      	movs	r1, #16
 800a72e:	4809      	ldr	r0, [pc, #36]	@ (800a754 <cyclic_routine+0xa8>)
 800a730:	f002 fba2 	bl	800ce78 <HAL_GPIO_TogglePin>
}
 800a734:	bf00      	nop
 800a736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a73a:	bf00      	nop
 800a73c:	200004dc 	.word	0x200004dc
 800a740:	20000510 	.word	0x20000510
 800a744:	200004f8 	.word	0x200004f8
 800a748:	20000500 	.word	0x20000500
 800a74c:	08018e30 	.word	0x08018e30
 800a750:	08018e50 	.word	0x08018e50
 800a754:	48001000 	.word	0x48001000

0800a758 <RGB_init>:
void setPWM_normal_timer(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse);
uint16_t saturate_color(uint16_t in);
struct RGB_colors xy_to_RGB(float x, float y, float brightness);
void update_color_xy(struct RGB_obj *obj);

void RGB_init(struct RGB_obj *obj, TIM_HandleTypeDef *timer, uint32_t channel_red, uint32_t channel_green, uint32_t channel_blue){
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
	struct RGB_colors zero_col = {0};
 800a766:	f107 0310 	add.w	r3, r7, #16
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	809a      	strh	r2, [r3, #4]
	obj->timer = timer;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	601a      	str	r2, [r3, #0]
	obj->channel_red = channel_red;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	605a      	str	r2, [r3, #4]
	obj->channel_green = channel_green;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	609a      	str	r2, [r3, #8]
	obj->channel_blue = channel_blue;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a3a      	ldr	r2, [r7, #32]
 800a786:	60da      	str	r2, [r3, #12]
	obj->XY_col.x = 0;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	821a      	strh	r2, [r3, #16]
	obj->XY_col.y = 0,
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	825a      	strh	r2, [r3, #18]
	obj->XY_col.brightness = 0xFF,
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	22ff      	movs	r2, #255	@ 0xff
 800a798:	829a      	strh	r2, [r3, #20]
	obj->on_status = false;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	759a      	strb	r2, [r3, #22]
	RGB_set(obj, zero_col);
 800a7a0:	f107 0310 	add.w	r3, r7, #16
 800a7a4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f829 	bl	800a800 <RGB_set>
}
 800a7ae:	bf00      	nop
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <RGB_set_xy>:

void RGB_set_xy(struct RGB_obj *obj, uint16_t x, uint16_t y){
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	807b      	strh	r3, [r7, #2]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	803b      	strh	r3, [r7, #0]
	obj->XY_col.x = x;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	887a      	ldrh	r2, [r7, #2]
 800a7ca:	821a      	strh	r2, [r3, #16]
	obj->XY_col.y = y;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	883a      	ldrh	r2, [r7, #0]
 800a7d0:	825a      	strh	r2, [r3, #18]
	update_color_xy(obj);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 faee 	bl	800adb4 <update_color_xy>
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <RGB_set_brightness>:

void RGB_set_brightness(struct RGB_obj *obj, uint16_t brightness){
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	807b      	strh	r3, [r7, #2]
	obj->XY_col.brightness = brightness;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	887a      	ldrh	r2, [r7, #2]
 800a7f0:	829a      	strh	r2, [r3, #20]
	update_color_xy(obj);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fade 	bl	800adb4 <update_color_xy>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <RGB_set>:

void RGB_set(struct RGB_obj *obj, struct RGB_colors color){
 800a800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a802:	b097      	sub	sp, #92	@ 0x5c
 800a804:	af12      	add	r7, sp, #72	@ 0x48
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	1d3b      	adds	r3, r7, #4
 800a80a:	e883 0006 	stmia.w	r3, {r1, r2}
	setPWM_normal_timer(*obj->timer, obj->channel_blue, color.b);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681e      	ldr	r6, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	893a      	ldrh	r2, [r7, #8]
 800a818:	9210      	str	r2, [sp, #64]	@ 0x40
 800a81a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a81c:	466d      	mov	r5, sp
 800a81e:	f106 0410 	add.w	r4, r6, #16
 800a822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a82a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a82c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a82e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a832:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a836:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a83a:	f000 f859 	bl	800a8f0 <setPWM_normal_timer>
	setPWM_normal_timer(*obj->timer, obj->channel_green, color.g);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681e      	ldr	r6, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	88fa      	ldrh	r2, [r7, #6]
 800a848:	9210      	str	r2, [sp, #64]	@ 0x40
 800a84a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a84c:	466d      	mov	r5, sp
 800a84e:	f106 0410 	add.w	r4, r6, #16
 800a852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a85a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a85c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a85e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a862:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a866:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a86a:	f000 f841 	bl	800a8f0 <setPWM_normal_timer>
	setPWM_normal_timer(*obj->timer, obj->channel_red, color.r);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681e      	ldr	r6, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	88ba      	ldrh	r2, [r7, #4]
 800a878:	9210      	str	r2, [sp, #64]	@ 0x40
 800a87a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a87c:	466d      	mov	r5, sp
 800a87e:	f106 0410 	add.w	r4, r6, #16
 800a882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a88a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a88c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a88e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a892:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a896:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a89a:	f000 f829 	bl	800a8f0 <setPWM_normal_timer>
}
 800a89e:	bf00      	nop
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8a6 <RGB_turn_off>:

void RGB_turn_off(struct RGB_obj *obj){
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
	struct RGB_colors zero_col = {0};
 800a8ae:	f107 0308 	add.w	r3, r7, #8
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	809a      	strh	r2, [r3, #4]
	obj->on_status = false;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	759a      	strb	r2, [r3, #22]
	RGB_set(obj, zero_col);
 800a8be:	f107 0308 	add.w	r3, r7, #8
 800a8c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff ff9a 	bl	800a800 <RGB_set>
}
 800a8cc:	bf00      	nop
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <RGB_turn_on>:

void RGB_turn_on(struct RGB_obj *obj){
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	obj->on_status = true;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	759a      	strb	r2, [r3, #22]
	update_color_xy(obj);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa66 	bl	800adb4 <update_color_xy>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <setPWM_normal_timer>:

void setPWM_normal_timer(TIM_HandleTypeDef timer, uint32_t channel, uint16_t pulse) {
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b088      	sub	sp, #32
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800a8fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&timer, channel); 								// stop generation of pwm
 800a900:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a902:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a906:	f004 fe59 	bl	800f5bc <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = MAX_BRIGHTNESS; 							// set the period duration
 800a90a:	2364      	movs	r3, #100	@ 0x64
 800a90c:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer); 										// re-inititialize with new period value
 800a90e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a912:	f004 fd21 	bl	800f358 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a916:	2360      	movs	r3, #96	@ 0x60
 800a918:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = saturate_color(pulse); 										// set the pulse duration
 800a91a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f81e 	bl	800a960 <saturate_color>
 800a924:	4603      	mov	r3, r0
 800a926:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a928:	2300      	movs	r3, #0
 800a92a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800a930:	1d3b      	adds	r3, r7, #4
 800a932:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a934:	4619      	mov	r1, r3
 800a936:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a93a:	f004 ffcf 	bl	800f8dc <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800a93e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a940:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a944:	f004 fd60 	bl	800f408 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&timer, channel);
 800a948:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a94a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a94e:	f005 fd85 	bl	801045c <HAL_TIMEx_PWMN_Start>
}
 800a952:	bf00      	nop
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a95c:	b004      	add	sp, #16
 800a95e:	4770      	bx	lr

0800a960 <saturate_color>:

uint16_t saturate_color(uint16_t in){
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	80fb      	strh	r3, [r7, #6]
	if(in > MAX_BRIGHTNESS){
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	2b64      	cmp	r3, #100	@ 0x64
 800a96e:	d901      	bls.n	800a974 <saturate_color+0x14>
		return MAX_BRIGHTNESS;
 800a970:	2364      	movs	r3, #100	@ 0x64
 800a972:	e000      	b.n	800a976 <saturate_color+0x16>
	}else{
		return in;
 800a974:	88fb      	ldrh	r3, [r7, #6]
	}
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	0000      	movs	r0, r0
 800a984:	0000      	movs	r0, r0
	...

0800a988 <xy_to_RGB>:

//https://gist.github.com/popcorn245/30afa0f98eea1c2fd34d
struct RGB_colors xy_to_RGB(float x, float y, float brightness){
 800a988:	b5b0      	push	{r4, r5, r7, lr}
 800a98a:	b08e      	sub	sp, #56	@ 0x38
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	ed87 0a02 	vstr	s0, [r7, #8]
 800a994:	edc7 0a01 	vstr	s1, [r7, #4]
 800a998:	ed87 1a00 	vstr	s2, [r7]
	float z = 1.0f - x - y;
 800a99c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9a0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a9a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float Y = brightness; // The given brightness value
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	623b      	str	r3, [r7, #32]
	float X = (Y / y) * x;
 800a9b8:	edd7 6a08 	vldr	s13, [r7, #32]
 800a9bc:	ed97 7a01 	vldr	s14, [r7, #4]
 800a9c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9c4:	ed97 7a02 	vldr	s14, [r7, #8]
 800a9c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9cc:	edc7 7a07 	vstr	s15, [r7, #28]
	float Z = (Y / y) * z;
 800a9d0:	edd7 6a08 	vldr	s13, [r7, #32]
 800a9d4:	ed97 7a01 	vldr	s14, [r7, #4]
 800a9d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a9e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e4:	edc7 7a06 	vstr	s15, [r7, #24]
	float r = X * 1.656492 - Y * 0.354851 - Z * 0.255038;
 800a9e8:	69f8      	ldr	r0, [r7, #28]
 800a9ea:	f7fd fba9 	bl	8008140 <__aeabi_f2d>
 800a9ee:	a3df      	add	r3, pc, #892	@ (adr r3, 800ad6c <xy_to_RGB+0x3e4>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7fd fbfc 	bl	80081f0 <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	461d      	mov	r5, r3
 800aa00:	6a38      	ldr	r0, [r7, #32]
 800aa02:	f7fd fb9d 	bl	8008140 <__aeabi_f2d>
 800aa06:	a3db      	add	r3, pc, #876	@ (adr r3, 800ad74 <xy_to_RGB+0x3ec>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7fd fbf0 	bl	80081f0 <__aeabi_dmul>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4620      	mov	r0, r4
 800aa16:	4629      	mov	r1, r5
 800aa18:	f7fd fa32 	bl	8007e80 <__aeabi_dsub>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4614      	mov	r4, r2
 800aa22:	461d      	mov	r5, r3
 800aa24:	69b8      	ldr	r0, [r7, #24]
 800aa26:	f7fd fb8b 	bl	8008140 <__aeabi_f2d>
 800aa2a:	a3d4      	add	r3, pc, #848	@ (adr r3, 800ad7c <xy_to_RGB+0x3f4>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7fd fbde 	bl	80081f0 <__aeabi_dmul>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4620      	mov	r0, r4
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	f7fd fa20 	bl	8007e80 <__aeabi_dsub>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4610      	mov	r0, r2
 800aa46:	4619      	mov	r1, r3
 800aa48:	f7fd feca 	bl	80087e0 <__aeabi_d2f>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	637b      	str	r3, [r7, #52]	@ 0x34
	float g = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;
 800aa50:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa54:	eef1 7a67 	vneg.f32	s15, s15
 800aa58:	ee17 3a90 	vmov	r3, s15
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fd fb6f 	bl	8008140 <__aeabi_f2d>
 800aa62:	a3c8      	add	r3, pc, #800	@ (adr r3, 800ad84 <xy_to_RGB+0x3fc>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7fd fbc2 	bl	80081f0 <__aeabi_dmul>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4614      	mov	r4, r2
 800aa72:	461d      	mov	r5, r3
 800aa74:	6a38      	ldr	r0, [r7, #32]
 800aa76:	f7fd fb63 	bl	8008140 <__aeabi_f2d>
 800aa7a:	a3c4      	add	r3, pc, #784	@ (adr r3, 800ad8c <xy_to_RGB+0x404>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7fd fbb6 	bl	80081f0 <__aeabi_dmul>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4620      	mov	r0, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	f7fd f9fa 	bl	8007e84 <__adddf3>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4614      	mov	r4, r2
 800aa96:	461d      	mov	r5, r3
 800aa98:	69b8      	ldr	r0, [r7, #24]
 800aa9a:	f7fd fb51 	bl	8008140 <__aeabi_f2d>
 800aa9e:	a3bd      	add	r3, pc, #756	@ (adr r3, 800ad94 <xy_to_RGB+0x40c>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f7fd fba4 	bl	80081f0 <__aeabi_dmul>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7fd f9e8 	bl	8007e84 <__adddf3>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4610      	mov	r0, r2
 800aaba:	4619      	mov	r1, r3
 800aabc:	f7fd fe90 	bl	80087e0 <__aeabi_d2f>
 800aac0:	4603      	mov	r3, r0
 800aac2:	633b      	str	r3, [r7, #48]	@ 0x30
	float b = X * 0.051713 - Y * 0.121364 + Z * 1.011530;
 800aac4:	69f8      	ldr	r0, [r7, #28]
 800aac6:	f7fd fb3b 	bl	8008140 <__aeabi_f2d>
 800aaca:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ad9c <xy_to_RGB+0x414>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7fd fb8e 	bl	80081f0 <__aeabi_dmul>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4614      	mov	r4, r2
 800aada:	461d      	mov	r5, r3
 800aadc:	6a38      	ldr	r0, [r7, #32]
 800aade:	f7fd fb2f 	bl	8008140 <__aeabi_f2d>
 800aae2:	a3b0      	add	r3, pc, #704	@ (adr r3, 800ada4 <xy_to_RGB+0x41c>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7fd fb82 	bl	80081f0 <__aeabi_dmul>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	f7fd f9c4 	bl	8007e80 <__aeabi_dsub>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4614      	mov	r4, r2
 800aafe:	461d      	mov	r5, r3
 800ab00:	69b8      	ldr	r0, [r7, #24]
 800ab02:	f7fd fb1d 	bl	8008140 <__aeabi_f2d>
 800ab06:	a3a9      	add	r3, pc, #676	@ (adr r3, 800adac <xy_to_RGB+0x424>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7fd fb70 	bl	80081f0 <__aeabi_dmul>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4620      	mov	r0, r4
 800ab16:	4629      	mov	r1, r5
 800ab18:	f7fd f9b4 	bl	8007e84 <__adddf3>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4610      	mov	r0, r2
 800ab22:	4619      	mov	r1, r3
 800ab24:	f7fd fe5c 	bl	80087e0 <__aeabi_d2f>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float max = 0.0f;
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	62bb      	str	r3, [r7, #40]	@ 0x28
	r = r <= 0.0031308f ? 12.92f * r : (1.0f + 0.055f) * pow(r, (1.0f / 2.4f)) - 0.055f;
 800ab32:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ab36:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 800ad60 <xy_to_RGB+0x3d8>
 800ab3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab42:	d806      	bhi.n	800ab52 <xy_to_RGB+0x1ca>
 800ab44:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ab48:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800ad64 <xy_to_RGB+0x3dc>
 800ab4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab50:	e022      	b.n	800ab98 <xy_to_RGB+0x210>
 800ab52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ab54:	f7fd faf4 	bl	8008140 <__aeabi_f2d>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 800ad48 <xy_to_RGB+0x3c0>
 800ab60:	ec43 2b10 	vmov	d0, r2, r3
 800ab64:	f00d f9bc 	bl	8017ee0 <pow>
 800ab68:	ec51 0b10 	vmov	r0, r1, d0
 800ab6c:	a378      	add	r3, pc, #480	@ (adr r3, 800ad50 <xy_to_RGB+0x3c8>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7fd fb3d 	bl	80081f0 <__aeabi_dmul>
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	a376      	add	r3, pc, #472	@ (adr r3, 800ad58 <xy_to_RGB+0x3d0>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7fd f97c 	bl	8007e80 <__aeabi_dsub>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	f7fd fe26 	bl	80087e0 <__aeabi_d2f>
 800ab94:	ee07 0a90 	vmov	s15, r0
 800ab98:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	g = g <= 0.0031308f ? 12.92f * g : (1.0f + 0.055f) * pow(g, (1.0f / 2.4f)) - 0.055f;
 800ab9c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800aba0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800ad60 <xy_to_RGB+0x3d8>
 800aba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abac:	d806      	bhi.n	800abbc <xy_to_RGB+0x234>
 800abae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800abb2:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800ad64 <xy_to_RGB+0x3dc>
 800abb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abba:	e022      	b.n	800ac02 <xy_to_RGB+0x27a>
 800abbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abbe:	f7fd fabf 	bl	8008140 <__aeabi_f2d>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 800ad48 <xy_to_RGB+0x3c0>
 800abca:	ec43 2b10 	vmov	d0, r2, r3
 800abce:	f00d f987 	bl	8017ee0 <pow>
 800abd2:	ec51 0b10 	vmov	r0, r1, d0
 800abd6:	a35e      	add	r3, pc, #376	@ (adr r3, 800ad50 <xy_to_RGB+0x3c8>)
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f7fd fb08 	bl	80081f0 <__aeabi_dmul>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4610      	mov	r0, r2
 800abe6:	4619      	mov	r1, r3
 800abe8:	a35b      	add	r3, pc, #364	@ (adr r3, 800ad58 <xy_to_RGB+0x3d0>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	f7fd f947 	bl	8007e80 <__aeabi_dsub>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4610      	mov	r0, r2
 800abf8:	4619      	mov	r1, r3
 800abfa:	f7fd fdf1 	bl	80087e0 <__aeabi_d2f>
 800abfe:	ee07 0a90 	vmov	s15, r0
 800ac02:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	b = b <= 0.0031308f ? 12.92f * b : (1.0f + 0.055f) * pow(b, (1.0f / 2.4f)) - 0.055f;
 800ac06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ac0a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ad60 <xy_to_RGB+0x3d8>
 800ac0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac16:	d806      	bhi.n	800ac26 <xy_to_RGB+0x29e>
 800ac18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ac1c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800ad64 <xy_to_RGB+0x3dc>
 800ac20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac24:	e022      	b.n	800ac6c <xy_to_RGB+0x2e4>
 800ac26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac28:	f7fd fa8a 	bl	8008140 <__aeabi_f2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 800ad48 <xy_to_RGB+0x3c0>
 800ac34:	ec43 2b10 	vmov	d0, r2, r3
 800ac38:	f00d f952 	bl	8017ee0 <pow>
 800ac3c:	ec51 0b10 	vmov	r0, r1, d0
 800ac40:	a343      	add	r3, pc, #268	@ (adr r3, 800ad50 <xy_to_RGB+0x3c8>)
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	f7fd fad3 	bl	80081f0 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4619      	mov	r1, r3
 800ac52:	a341      	add	r3, pc, #260	@ (adr r3, 800ad58 <xy_to_RGB+0x3d0>)
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	f7fd f912 	bl	8007e80 <__aeabi_dsub>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4610      	mov	r0, r2
 800ac62:	4619      	mov	r1, r3
 800ac64:	f7fd fdbc 	bl	80087e0 <__aeabi_d2f>
 800ac68:	ee07 0a90 	vmov	s15, r0
 800ac6c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	if(r>g){
 800ac70:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800ac74:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ac78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac80:	dd02      	ble.n	800ac88 <xy_to_RGB+0x300>
		max = r;
 800ac82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac86:	e001      	b.n	800ac8c <xy_to_RGB+0x304>
	}else{
		max = g;
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	if(b>max){
 800ac8c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ac90:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ac94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9c:	dd01      	ble.n	800aca2 <xy_to_RGB+0x31a>
		max = b;
 800ac9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca0:	62bb      	str	r3, [r7, #40]	@ 0x28
	}
	if(max>1.0f){
 800aca2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800aca6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb2:	dd17      	ble.n	800ace4 <xy_to_RGB+0x35c>
	r = r/max;
 800acb4:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800acb8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800acbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	g = g/max;
 800acc4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800acc8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800accc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	b = b/max;
 800acd4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800acd8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800acdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ace0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	}

	struct RGB_colors out = {
		.r = MAX_BRIGHTNESS*r,
 800ace4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ace8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ad68 <xy_to_RGB+0x3e0>
 800acec:	ee67 7a87 	vmul.f32	s15, s15, s14
	struct RGB_colors out = {
 800acf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acf4:	ee17 3a90 	vmov	r3, s15
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	823b      	strh	r3, [r7, #16]
		.g = MAX_BRIGHTNESS*g,
 800acfc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ad00:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ad68 <xy_to_RGB+0x3e0>
 800ad04:	ee67 7a87 	vmul.f32	s15, s15, s14
	struct RGB_colors out = {
 800ad08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad0c:	ee17 3a90 	vmov	r3, s15
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	827b      	strh	r3, [r7, #18]
		.b = MAX_BRIGHTNESS*b
 800ad14:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ad18:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800ad68 <xy_to_RGB+0x3e0>
 800ad1c:	ee67 7a87 	vmul.f32	s15, s15, s14
	struct RGB_colors out = {
 800ad20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad24:	ee17 3a90 	vmov	r3, s15
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	82bb      	strh	r3, [r7, #20]
	};
	return out;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f107 0310 	add.w	r3, r7, #16
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	6010      	str	r0, [r2, #0]
 800ad38:	889b      	ldrh	r3, [r3, #4]
 800ad3a:	8093      	strh	r3, [r2, #4]
}
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	3738      	adds	r7, #56	@ 0x38
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bdb0      	pop	{r4, r5, r7, pc}
 800ad44:	f3af 8000 	nop.w
 800ad48:	a0000000 	.word	0xa0000000
 800ad4c:	3fdaaaaa 	.word	0x3fdaaaaa
 800ad50:	a0000000 	.word	0xa0000000
 800ad54:	3ff0e147 	.word	0x3ff0e147
 800ad58:	c0000000 	.word	0xc0000000
 800ad5c:	3fac28f5 	.word	0x3fac28f5
 800ad60:	3b4d2e1c 	.word	0x3b4d2e1c
 800ad64:	414eb852 	.word	0x414eb852
 800ad68:	42c80000 	.word	0x42c80000
 800ad6c:	c1615ec0 	.word	0xc1615ec0
 800ad70:	3ffa80fd 	.word	0x3ffa80fd
 800ad74:	f7fcfc40 	.word	0xf7fcfc40
 800ad78:	3fd6b5e0 	.word	0x3fd6b5e0
 800ad7c:	e74f2f12 	.word	0xe74f2f12
 800ad80:	3fd0528a 	.word	0x3fd0528a
 800ad84:	817b95a3 	.word	0x817b95a3
 800ad88:	3fe6a159 	.word	0x3fe6a159
 800ad8c:	908e581d 	.word	0x908e581d
 800ad90:	3ffa7c81 	.word	0x3ffa7c81
 800ad94:	d35eb745 	.word	0xd35eb745
 800ad98:	3fa28283 	.word	0x3fa28283
 800ad9c:	578e5c4f 	.word	0x578e5c4f
 800ada0:	3faa7a20 	.word	0x3faa7a20
 800ada4:	0ae9680e 	.word	0x0ae9680e
 800ada8:	3fbf11b6 	.word	0x3fbf11b6
 800adac:	14cec41e 	.word	0x14cec41e
 800adb0:	3ff02f3a 	.word	0x3ff02f3a

0800adb4 <update_color_xy>:

void update_color_xy(struct RGB_obj *obj){
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	float x = 1.0f*obj->XY_col.x/0xFFFF;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	8a1b      	ldrh	r3, [r3, #16]
 800adc0:	ee07 3a90 	vmov	s15, r3
 800adc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800adc8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800ae40 <update_color_xy+0x8c>
 800adcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800add0:	edc7 7a07 	vstr	s15, [r7, #28]
	float y = 1.0f*obj->XY_col.x/0xFFFF;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	8a1b      	ldrh	r3, [r3, #16]
 800add8:	ee07 3a90 	vmov	s15, r3
 800addc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ade0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800ae40 <update_color_xy+0x8c>
 800ade4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ade8:	edc7 7a06 	vstr	s15, [r7, #24]
	float brightness = 1.0f*obj->XY_col.brightness/0xFF;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	8a9b      	ldrh	r3, [r3, #20]
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800adf8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ae44 <update_color_xy+0x90>
 800adfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ae00:	edc7 7a05 	vstr	s15, [r7, #20]
	struct RGB_colors RGB = xy_to_RGB(x, y, brightness);
 800ae04:	f107 030c 	add.w	r3, r7, #12
 800ae08:	ed97 1a05 	vldr	s2, [r7, #20]
 800ae0c:	edd7 0a06 	vldr	s1, [r7, #24]
 800ae10:	ed97 0a07 	vldr	s0, [r7, #28]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff fdb7 	bl	800a988 <xy_to_RGB>
#ifdef DEGBUG_PRINTF
    printf("R: %d, G: %d, B: %d", RGB.r, RGB.g, RGB.b);
 800ae1a:	89bb      	ldrh	r3, [r7, #12]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	89fb      	ldrh	r3, [r7, #14]
 800ae20:	461a      	mov	r2, r3
 800ae22:	8a3b      	ldrh	r3, [r7, #16]
 800ae24:	4808      	ldr	r0, [pc, #32]	@ (800ae48 <update_color_xy+0x94>)
 800ae26:	f00b ff43 	bl	8016cb0 <iprintf>
#endif
	RGB_set(obj, RGB);
 800ae2a:	f107 030c 	add.w	r3, r7, #12
 800ae2e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fce4 	bl	800a800 <RGB_set>
}
 800ae38:	bf00      	nop
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	477fff00 	.word	0x477fff00
 800ae44:	437f0000 	.word	0x437f0000
 800ae48:	08018e6c 	.word	0x08018e6c

0800ae4c <SOIL_MOIST_init>:
#define WATER_MEAS 3570U

uint32_t saturate(uint32_t val);


void SOIL_MOIST_init(struct SOIL_MOIST_obj *obj, uint16_t *DMA_location){
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
	obj->type = SOIL_MOIST;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	701a      	strb	r2, [r3, #0]
	obj->ADC_val = DMA_location;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	605a      	str	r2, [r3, #4]
}
 800ae62:	bf00      	nop
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <SOIL_MOIST_get_moisture_percent>:


uint16_t SOIL_MOIST_get_moisture_percent(struct SOIL_MOIST_obj *obj){
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
	uint32_t working_value = saturate(*obj->ADC_val);// saturate
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 f818 	bl	800aeb4 <saturate>
 800ae84:	60f8      	str	r0, [r7, #12]
	working_value = working_value - OC_MEAS;	// compensate lower offset
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f6a3 13c4 	subw	r3, r3, #2500	@ 0x9c4
 800ae8c:	60fb      	str	r3, [r7, #12]
	working_value = 10000U*working_value/(WATER_MEAS - OC_MEAS);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ae94:	fb02 f303 	mul.w	r3, r2, r3
 800ae98:	4a05      	ldr	r2, [pc, #20]	@ (800aeb0 <SOIL_MOIST_get_moisture_percent+0x40>)
 800ae9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae9e:	0a9b      	lsrs	r3, r3, #10
 800aea0:	60fb      	str	r3, [r7, #12]
	return (uint16_t)working_value;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	b29b      	uxth	r3, r3
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	f4fe9083 	.word	0xf4fe9083

0800aeb4 <saturate>:



// private FCT

uint32_t saturate(uint32_t val){
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	if(val > WATER_MEAS){
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f640 52f2 	movw	r2, #3570	@ 0xdf2
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d902      	bls.n	800aecc <saturate+0x18>
		return WATER_MEAS;
 800aec6:	f640 53f2 	movw	r3, #3570	@ 0xdf2
 800aeca:	e007      	b.n	800aedc <saturate+0x28>
	}else if(val < OC_MEAS){
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d801      	bhi.n	800aeda <saturate+0x26>
		return val;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	e000      	b.n	800aedc <saturate+0x28>
	}else{
		return val;
 800aeda:	687b      	ldr	r3, [r7, #4]
	}
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <TEMP_HUMID_init>:
#include "TEMP_HUMID.h"

void TEMP_HUMID_init(struct TEMP_HUMID_obj *obj, TIM_HandleTypeDef *timer, GPIO_TypeDef* port, uint16_t pin){
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	807b      	strh	r3, [r7, #2]
	//make tim16 maybe to tim17
	init_dht11(&obj->dht11, timer, port, pin);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f103 000c 	add.w	r0, r3, #12
 800aefc:	887b      	ldrh	r3, [r7, #2]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	f7ff fa0a 	bl	800a31a <init_dht11>
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <TEMP_HUMID_read>:

void TEMP_HUMID_read(struct TEMP_HUMID_obj *obj){
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
	switch (obj->type){
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <TEMP_HUMID_read+0x16>
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d021      	beq.n	800af66 <TEMP_HUMID_read+0x58>
 800af22:	e017      	b.n	800af54 <TEMP_HUMID_read+0x46>
	case DHT11:
		readDHT11(&obj->dht11);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	330c      	adds	r3, #12
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fa47 	bl	800a3bc <readDHT11>
		obj->temperature_degC = (float)obj->dht11.temperature;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7e1b      	ldrb	r3, [r3, #24]
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	edc3 7a01 	vstr	s15, [r3, #4]
		obj->humidity_percent = (float)obj->dht11.humidty;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7e5b      	ldrb	r3, [r3, #25]
 800af44:	ee07 3a90 	vmov	s15, r3
 800af48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 800af52:	e009      	b.n	800af68 <TEMP_HUMID_read+0x5a>
	case DHT22:

		break;
	default:
		obj->temperature_degC = 0;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f04f 0200 	mov.w	r2, #0
 800af5a:	605a      	str	r2, [r3, #4]
		obj->humidity_percent = 0;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f04f 0200 	mov.w	r2, #0
 800af62:	609a      	str	r2, [r3, #8]
		break;
 800af64:	e000      	b.n	800af68 <TEMP_HUMID_read+0x5a>
		break;
 800af66:	bf00      	nop
	}
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <TEMP_HUMID_get_temperature>:

long long TEMP_HUMID_get_temperature(struct TEMP_HUMID_obj *obj){
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	float value_mul = obj->temperature_degC * 10.0f;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800af7e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800af82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800af86:	edc7 7a03 	vstr	s15, [r7, #12]
	return ((long long)(value_mul));
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7fd fc90 	bl	80088b0 <__aeabi_f2lz>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
}
 800af94:	4610      	mov	r0, r2
 800af96:	4619      	mov	r1, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <TEMP_HUMID_get_humidity>:

long long TEMP_HUMID_get_humidity(struct TEMP_HUMID_obj *obj){
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
	float value_mul = obj->humidity_percent * 10.0f;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	edd3 7a02 	vldr	s15, [r3, #8]
 800afac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800afb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afb4:	edc7 7a03 	vstr	s15, [r7, #12]
	return ((long long)(value_mul));
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7fd fc79 	bl	80088b0 <__aeabi_f2lz>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
}
 800afc2:	4610      	mov	r0, r2
 800afc4:	4619      	mov	r1, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800afd6:	4b0c      	ldr	r3, [pc, #48]	@ (800b008 <HAL_Init+0x3c>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a0b      	ldr	r2, [pc, #44]	@ (800b008 <HAL_Init+0x3c>)
 800afdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afe0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800afe2:	2003      	movs	r0, #3
 800afe4:	f001 fa1a 	bl	800c41c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800afe8:	200f      	movs	r0, #15
 800afea:	f000 f80f 	bl	800b00c <HAL_InitTick>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	71fb      	strb	r3, [r7, #7]
 800aff8:	e001      	b.n	800affe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800affa:	f7fe fde4 	bl	8009bc6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800affe:	79fb      	ldrb	r3, [r7, #7]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	58004000 	.word	0x58004000

0800b00c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800b018:	4b17      	ldr	r3, [pc, #92]	@ (800b078 <HAL_InitTick+0x6c>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d024      	beq.n	800b06a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b020:	f003 f9d4 	bl	800e3cc <HAL_RCC_GetHCLKFreq>
 800b024:	4602      	mov	r2, r0
 800b026:	4b14      	ldr	r3, [pc, #80]	@ (800b078 <HAL_InitTick+0x6c>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	4619      	mov	r1, r3
 800b02c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b030:	fbb3 f3f1 	udiv	r3, r3, r1
 800b034:	fbb2 f3f3 	udiv	r3, r2, r3
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 fa22 	bl	800c482 <HAL_SYSTICK_Config>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10f      	bne.n	800b064 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b0f      	cmp	r3, #15
 800b048:	d809      	bhi.n	800b05e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b04a:	2200      	movs	r2, #0
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	f04f 30ff 	mov.w	r0, #4294967295
 800b052:	f001 f9ee 	bl	800c432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b056:	4a09      	ldr	r2, [pc, #36]	@ (800b07c <HAL_InitTick+0x70>)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	e007      	b.n	800b06e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	73fb      	strb	r3, [r7, #15]
 800b062:	e004      	b.n	800b06e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
 800b068:	e001      	b.n	800b06e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20000010 	.word	0x20000010
 800b07c:	2000000c 	.word	0x2000000c

0800b080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b084:	4b06      	ldr	r3, [pc, #24]	@ (800b0a0 <HAL_IncTick+0x20>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	461a      	mov	r2, r3
 800b08a:	4b06      	ldr	r3, [pc, #24]	@ (800b0a4 <HAL_IncTick+0x24>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4413      	add	r3, r2
 800b090:	4a04      	ldr	r2, [pc, #16]	@ (800b0a4 <HAL_IncTick+0x24>)
 800b092:	6013      	str	r3, [r2, #0]
}
 800b094:	bf00      	nop
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	20000010 	.word	0x20000010
 800b0a4:	20000530 	.word	0x20000530

0800b0a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
  return uwTick;
 800b0ac:	4b03      	ldr	r3, [pc, #12]	@ (800b0bc <HAL_GetTick+0x14>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	20000530 	.word	0x20000530

0800b0c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800b0c4:	4b03      	ldr	r3, [pc, #12]	@ (800b0d4 <HAL_GetTickPrio+0x14>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	2000000c 	.word	0x2000000c

0800b0d8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800b0dc:	4b03      	ldr	r3, [pc, #12]	@ (800b0ec <HAL_GetTickFreq+0x14>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	20000010 	.word	0x20000010

0800b0f0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	431a      	orrs	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800b10a:	bf00      	nop
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	431a      	orrs	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	609a      	str	r2, [r3, #8]
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3360      	adds	r3, #96	@ 0x60
 800b16a:	461a      	mov	r2, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	4b08      	ldr	r3, [pc, #32]	@ (800b19c <LL_ADC_SetOffset+0x44>)
 800b17a:	4013      	ands	r3, r2
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	4313      	orrs	r3, r2
 800b188:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b190:	bf00      	nop
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	03fff000 	.word	0x03fff000

0800b1a0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3360      	adds	r3, #96	@ 0x60
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3360      	adds	r3, #96	@ 0x60
 800b1dc:	461a      	mov	r2, r3
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b1f6:	bf00      	nop
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b216:	2301      	movs	r3, #1
 800b218:	e000      	b.n	800b21c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b21a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3330      	adds	r3, #48	@ 0x30
 800b238:	461a      	mov	r2, r3
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	f003 030c 	and.w	r3, r3, #12
 800b244:	4413      	add	r3, r2
 800b246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f003 031f 	and.w	r3, r3, #31
 800b252:	211f      	movs	r1, #31
 800b254:	fa01 f303 	lsl.w	r3, r1, r3
 800b258:	43db      	mvns	r3, r3
 800b25a:	401a      	ands	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	0e9b      	lsrs	r3, r3, #26
 800b260:	f003 011f 	and.w	r1, r3, #31
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f003 031f 	and.w	r3, r3, #31
 800b26a:	fa01 f303 	lsl.w	r3, r1, r3
 800b26e:	431a      	orrs	r2, r3
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800b274:	bf00      	nop
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3314      	adds	r3, #20
 800b290:	461a      	mov	r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	0e5b      	lsrs	r3, r3, #25
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	f003 0304 	and.w	r3, r3, #4
 800b29c:	4413      	add	r3, r2
 800b29e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	0d1b      	lsrs	r3, r3, #20
 800b2a8:	f003 031f 	and.w	r3, r3, #31
 800b2ac:	2107      	movs	r1, #7
 800b2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b2:	43db      	mvns	r3, r3
 800b2b4:	401a      	ands	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	0d1b      	lsrs	r3, r3, #20
 800b2ba:	f003 031f 	and.w	r3, r3, #31
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800b2ca:	bf00      	nop
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2f0:	43db      	mvns	r3, r3
 800b2f2:	401a      	ands	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f003 0318 	and.w	r3, r3, #24
 800b2fa:	4908      	ldr	r1, [pc, #32]	@ (800b31c <LL_ADC_SetChannelSingleDiff+0x44>)
 800b2fc:	40d9      	lsrs	r1, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	400b      	ands	r3, r1
 800b302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b306:	431a      	orrs	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b30e:	bf00      	nop
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	0007ffff 	.word	0x0007ffff

0800b320 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	6093      	str	r3, [r2, #8]
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b358:	d101      	bne.n	800b35e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b35a:	2301      	movs	r3, #1
 800b35c:	e000      	b.n	800b360 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b37c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b380:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3a8:	d101      	bne.n	800b3ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e000      	b.n	800b3b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3d0:	f043 0201 	orr.w	r2, r3, #1
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f003 0301 	and.w	r3, r3, #1
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d101      	bne.n	800b3fc <LL_ADC_IsEnabled+0x18>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e000      	b.n	800b3fe <LL_ADC_IsEnabled+0x1a>
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b41a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b41e:	f043 0204 	orr.w	r2, r3, #4
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f003 0304 	and.w	r3, r3, #4
 800b442:	2b04      	cmp	r3, #4
 800b444:	d101      	bne.n	800b44a <LL_ADC_REG_IsConversionOngoing+0x18>
 800b446:	2301      	movs	r3, #1
 800b448:	e000      	b.n	800b44c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f003 0308 	and.w	r3, r3, #8
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d101      	bne.n	800b470 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e000      	b.n	800b472 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b490:	2300      	movs	r3, #0
 800b492:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e12e      	b.n	800b6fc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7fe fb9b 	bl	8009be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff ff3d 	bl	800b344 <LL_ADC_IsDeepPowerDownEnabled>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d004      	beq.n	800b4da <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff ff23 	bl	800b320 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff ff58 	bl	800b394 <LL_ADC_IsInternalRegulatorEnabled>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d115      	bne.n	800b516 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff ff3c 	bl	800b36c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b4f4:	4b83      	ldr	r3, [pc, #524]	@ (800b704 <HAL_ADC_Init+0x284>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	099b      	lsrs	r3, r3, #6
 800b4fa:	4a83      	ldr	r2, [pc, #524]	@ (800b708 <HAL_ADC_Init+0x288>)
 800b4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b500:	099b      	lsrs	r3, r3, #6
 800b502:	3301      	adds	r3, #1
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b508:	e002      	b.n	800b510 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	3b01      	subs	r3, #1
 800b50e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1f9      	bne.n	800b50a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff ff3a 	bl	800b394 <LL_ADC_IsInternalRegulatorEnabled>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10d      	bne.n	800b542 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b52a:	f043 0210 	orr.w	r2, r3, #16
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b536:	f043 0201 	orr.w	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4618      	mov	r0, r3
 800b548:	f7ff ff73 	bl	800b432 <LL_ADC_REG_IsConversionOngoing>
 800b54c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	2b00      	cmp	r3, #0
 800b558:	f040 80c7 	bne.w	800b6ea <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f040 80c3 	bne.w	800b6ea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b568:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b56c:	f043 0202 	orr.w	r2, r3, #2
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff ff33 	bl	800b3e4 <LL_ADC_IsEnabled>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b584:	4861      	ldr	r0, [pc, #388]	@ (800b70c <HAL_ADC_Init+0x28c>)
 800b586:	f7ff ff2d 	bl	800b3e4 <LL_ADC_IsEnabled>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d105      	bne.n	800b59c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4619      	mov	r1, r3
 800b596:	485e      	ldr	r0, [pc, #376]	@ (800b710 <HAL_ADC_Init+0x290>)
 800b598:	f7ff fdaa 	bl	800b0f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	7e5b      	ldrb	r3, [r3, #25]
 800b5a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b5ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b5b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5ba:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800b5bc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d106      	bne.n	800b5dc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	045b      	lsls	r3, r3, #17
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d009      	beq.n	800b5f8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	4b45      	ldr	r3, [pc, #276]	@ (800b714 <HAL_ADC_Init+0x294>)
 800b600:	4013      	ands	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6812      	ldr	r2, [r2, #0]
 800b606:	69b9      	ldr	r1, [r7, #24]
 800b608:	430b      	orrs	r3, r1
 800b60a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff ff0e 	bl	800b432 <LL_ADC_REG_IsConversionOngoing>
 800b616:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff ff1b 	bl	800b458 <LL_ADC_INJ_IsConversionOngoing>
 800b622:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d13d      	bne.n	800b6a6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d13a      	bne.n	800b6a6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b634:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b63c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b63e:	4313      	orrs	r3, r2
 800b640:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b64c:	f023 0302 	bic.w	r3, r3, #2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	6812      	ldr	r2, [r2, #0]
 800b654:	69b9      	ldr	r1, [r7, #24]
 800b656:	430b      	orrs	r3, r1
 800b658:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b660:	2b01      	cmp	r3, #1
 800b662:	d118      	bne.n	800b696 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b66e:	f023 0304 	bic.w	r3, r3, #4
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b67a:	4311      	orrs	r1, r2
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b680:	4311      	orrs	r1, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b686:	430a      	orrs	r2, r1
 800b688:	431a      	orrs	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f042 0201 	orr.w	r2, r2, #1
 800b692:	611a      	str	r2, [r3, #16]
 800b694:	e007      	b.n	800b6a6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	691a      	ldr	r2, [r3, #16]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f022 0201 	bic.w	r2, r2, #1
 800b6a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d10c      	bne.n	800b6c8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6b4:	f023 010f 	bic.w	r1, r3, #15
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	69db      	ldr	r3, [r3, #28]
 800b6bc:	1e5a      	subs	r2, r3, #1
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b6c6:	e007      	b.n	800b6d8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f022 020f 	bic.w	r2, r2, #15
 800b6d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6dc:	f023 0303 	bic.w	r3, r3, #3
 800b6e0:	f043 0201 	orr.w	r2, r3, #1
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	655a      	str	r2, [r3, #84]	@ 0x54
 800b6e8:	e007      	b.n	800b6fa <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6ee:	f043 0210 	orr.w	r2, r3, #16
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b6fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3720      	adds	r7, #32
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	20000008 	.word	0x20000008
 800b708:	053e2d63 	.word	0x053e2d63
 800b70c:	50040000 	.word	0x50040000
 800b710:	50040300 	.word	0x50040300
 800b714:	fff0c007 	.word	0xfff0c007

0800b718 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff fe82 	bl	800b432 <LL_ADC_REG_IsConversionOngoing>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d167      	bne.n	800b804 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d101      	bne.n	800b742 <HAL_ADC_Start_DMA+0x2a>
 800b73e:	2302      	movs	r3, #2
 800b740:	e063      	b.n	800b80a <HAL_ADC_Start_DMA+0xf2>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f000 fc4c 	bl	800bfe8 <ADC_Enable>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d14f      	bne.n	800b7fa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b75e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b762:	f023 0301 	bic.w	r3, r3, #1
 800b766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b772:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d006      	beq.n	800b788 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b77e:	f023 0206 	bic.w	r2, r3, #6
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	659a      	str	r2, [r3, #88]	@ 0x58
 800b786:	e002      	b.n	800b78e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b792:	4a20      	ldr	r2, [pc, #128]	@ (800b814 <HAL_ADC_Start_DMA+0xfc>)
 800b794:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b79a:	4a1f      	ldr	r2, [pc, #124]	@ (800b818 <HAL_ADC_Start_DMA+0x100>)
 800b79c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b81c <HAL_ADC_Start_DMA+0x104>)
 800b7a4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	221c      	movs	r2, #28
 800b7ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f042 0210 	orr.w	r2, r2, #16
 800b7c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f042 0201 	orr.w	r2, r2, #1
 800b7d4:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3340      	adds	r3, #64	@ 0x40
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f000 ff1d 	bl	800c624 <HAL_DMA_Start_IT>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff fe09 	bl	800b40a <LL_ADC_REG_StartConversion>
 800b7f8:	e006      	b.n	800b808 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b802:	e001      	b.n	800b808 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b804:	2302      	movs	r3, #2
 800b806:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b808:	7dfb      	ldrb	r3, [r7, #23]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	0800c0dd 	.word	0x0800c0dd
 800b818:	0800c1b5 	.word	0x0800c1b5
 800b81c:	0800c1d1 	.word	0x0800c1d1

0800b820 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b0b6      	sub	sp, #216	@ 0xd8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b876:	2b01      	cmp	r3, #1
 800b878:	d101      	bne.n	800b87e <HAL_ADC_ConfigChannel+0x22>
 800b87a:	2302      	movs	r3, #2
 800b87c:	e39f      	b.n	800bfbe <HAL_ADC_ConfigChannel+0x762>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fdd1 	bl	800b432 <LL_ADC_REG_IsConversionOngoing>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	f040 8384 	bne.w	800bfa0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	6859      	ldr	r1, [r3, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f7ff fcbf 	bl	800b228 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff fdbf 	bl	800b432 <LL_ADC_REG_IsConversionOngoing>
 800b8b4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff fdcb 	bl	800b458 <LL_ADC_INJ_IsConversionOngoing>
 800b8c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b8c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f040 81a6 	bne.w	800bc1c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b8d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 81a1 	bne.w	800bc1c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	6819      	ldr	r1, [r3, #0]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f7ff fcca 	bl	800b280 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	695a      	ldr	r2, [r3, #20]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	f003 0303 	and.w	r3, r3, #3
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	2b04      	cmp	r3, #4
 800b90c:	d00a      	beq.n	800b924 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	6919      	ldr	r1, [r3, #16]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b91e:	f7ff fc1b 	bl	800b158 <LL_ADC_SetOffset>
 800b922:	e17b      	b.n	800bc1c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2100      	movs	r1, #0
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff fc38 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800b930:	4603      	mov	r3, r0
 800b932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10a      	bne.n	800b950 <HAL_ADC_ConfigChannel+0xf4>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2100      	movs	r1, #0
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff fc2d 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800b946:	4603      	mov	r3, r0
 800b948:	0e9b      	lsrs	r3, r3, #26
 800b94a:	f003 021f 	and.w	r2, r3, #31
 800b94e:	e01e      	b.n	800b98e <HAL_ADC_ConfigChannel+0x132>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2100      	movs	r1, #0
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fc22 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b966:	fa93 f3a3 	rbit	r3, r3
 800b96a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800b96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800b976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800b97e:	2320      	movs	r3, #32
 800b980:	e004      	b.n	800b98c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800b982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b986:	fab3 f383 	clz	r3, r3
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	461a      	mov	r2, r3
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b996:	2b00      	cmp	r3, #0
 800b998:	d105      	bne.n	800b9a6 <HAL_ADC_ConfigChannel+0x14a>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	0e9b      	lsrs	r3, r3, #26
 800b9a0:	f003 031f 	and.w	r3, r3, #31
 800b9a4:	e018      	b.n	800b9d8 <HAL_ADC_ConfigChannel+0x17c>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b9b2:	fa93 f3a3 	rbit	r3, r3
 800b9b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b9ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b9c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800b9ca:	2320      	movs	r3, #32
 800b9cc:	e004      	b.n	800b9d8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800b9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9d2:	fab3 f383 	clz	r3, r3
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d106      	bne.n	800b9ea <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff fbf1 	bl	800b1cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fbd5 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <HAL_ADC_ConfigChannel+0x1ba>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2101      	movs	r1, #1
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fbca 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	0e9b      	lsrs	r3, r3, #26
 800ba10:	f003 021f 	and.w	r2, r3, #31
 800ba14:	e01e      	b.n	800ba54 <HAL_ADC_ConfigChannel+0x1f8>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff fbbf 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800ba22:	4603      	mov	r3, r0
 800ba24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba2c:	fa93 f3a3 	rbit	r3, r3
 800ba30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800ba34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800ba3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800ba44:	2320      	movs	r3, #32
 800ba46:	e004      	b.n	800ba52 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800ba48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ba4c:	fab3 f383 	clz	r3, r3
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	461a      	mov	r2, r3
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <HAL_ADC_ConfigChannel+0x210>
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	0e9b      	lsrs	r3, r3, #26
 800ba66:	f003 031f 	and.w	r3, r3, #31
 800ba6a:	e018      	b.n	800ba9e <HAL_ADC_ConfigChannel+0x242>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba78:	fa93 f3a3 	rbit	r3, r3
 800ba7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800ba80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800ba88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800ba90:	2320      	movs	r3, #32
 800ba92:	e004      	b.n	800ba9e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800ba94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba98:	fab3 f383 	clz	r3, r3
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d106      	bne.n	800bab0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2101      	movs	r1, #1
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fb8e 	bl	800b1cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2102      	movs	r1, #2
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fb72 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800babc:	4603      	mov	r3, r0
 800babe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10a      	bne.n	800badc <HAL_ADC_ConfigChannel+0x280>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2102      	movs	r1, #2
 800bacc:	4618      	mov	r0, r3
 800bace:	f7ff fb67 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800bad2:	4603      	mov	r3, r0
 800bad4:	0e9b      	lsrs	r3, r3, #26
 800bad6:	f003 021f 	and.w	r2, r3, #31
 800bada:	e01e      	b.n	800bb1a <HAL_ADC_ConfigChannel+0x2be>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2102      	movs	r1, #2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff fb5c 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800bae8:	4603      	mov	r3, r0
 800baea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800baf2:	fa93 f3a3 	rbit	r3, r3
 800baf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800bafa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bafe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800bb02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800bb0a:	2320      	movs	r3, #32
 800bb0c:	e004      	b.n	800bb18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800bb0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb12:	fab3 f383 	clz	r3, r3
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	461a      	mov	r2, r3
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d105      	bne.n	800bb32 <HAL_ADC_ConfigChannel+0x2d6>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	0e9b      	lsrs	r3, r3, #26
 800bb2c:	f003 031f 	and.w	r3, r3, #31
 800bb30:	e016      	b.n	800bb60 <HAL_ADC_ConfigChannel+0x304>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bb3e:	fa93 f3a3 	rbit	r3, r3
 800bb42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800bb44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800bb4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800bb52:	2320      	movs	r3, #32
 800bb54:	e004      	b.n	800bb60 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800bb56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb5a:	fab3 f383 	clz	r3, r3
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d106      	bne.n	800bb72 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2102      	movs	r1, #2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff fb2d 	bl	800b1cc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2103      	movs	r1, #3
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fb11 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10a      	bne.n	800bb9e <HAL_ADC_ConfigChannel+0x342>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2103      	movs	r1, #3
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7ff fb06 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800bb94:	4603      	mov	r3, r0
 800bb96:	0e9b      	lsrs	r3, r3, #26
 800bb98:	f003 021f 	and.w	r2, r3, #31
 800bb9c:	e017      	b.n	800bbce <HAL_ADC_ConfigChannel+0x372>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2103      	movs	r1, #3
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff fafb 	bl	800b1a0 <LL_ADC_GetOffsetChannel>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbb0:	fa93 f3a3 	rbit	r3, r3
 800bbb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800bbb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbb8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800bbba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800bbc0:	2320      	movs	r3, #32
 800bbc2:	e003      	b.n	800bbcc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800bbc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbc6:	fab3 f383 	clz	r3, r3
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	461a      	mov	r2, r3
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d105      	bne.n	800bbe6 <HAL_ADC_ConfigChannel+0x38a>
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	0e9b      	lsrs	r3, r3, #26
 800bbe0:	f003 031f 	and.w	r3, r3, #31
 800bbe4:	e011      	b.n	800bc0a <HAL_ADC_ConfigChannel+0x3ae>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bbee:	fa93 f3a3 	rbit	r3, r3
 800bbf2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800bbf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800bbf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800bbfe:	2320      	movs	r3, #32
 800bc00:	e003      	b.n	800bc0a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800bc02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc04:	fab3 f383 	clz	r3, r3
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d106      	bne.n	800bc1c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2200      	movs	r2, #0
 800bc14:	2103      	movs	r1, #3
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff fad8 	bl	800b1cc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff fbdf 	bl	800b3e4 <LL_ADC_IsEnabled>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 81c2 	bne.w	800bfb2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	6819      	ldr	r1, [r3, #0]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f7ff fb4c 	bl	800b2d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	4a8e      	ldr	r2, [pc, #568]	@ (800be80 <HAL_ADC_ConfigChannel+0x624>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	f040 8130 	bne.w	800beac <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10b      	bne.n	800bc74 <HAL_ADC_ConfigChannel+0x418>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	0e9b      	lsrs	r3, r3, #26
 800bc62:	3301      	adds	r3, #1
 800bc64:	f003 031f 	and.w	r3, r3, #31
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	bf94      	ite	ls
 800bc6c:	2301      	movls	r3, #1
 800bc6e:	2300      	movhi	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	e019      	b.n	800bca8 <HAL_ADC_ConfigChannel+0x44c>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc7c:	fa93 f3a3 	rbit	r3, r3
 800bc80:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800bc82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800bc86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800bc8c:	2320      	movs	r3, #32
 800bc8e:	e003      	b.n	800bc98 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800bc90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc92:	fab3 f383 	clz	r3, r3
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	3301      	adds	r3, #1
 800bc9a:	f003 031f 	and.w	r3, r3, #31
 800bc9e:	2b09      	cmp	r3, #9
 800bca0:	bf94      	ite	ls
 800bca2:	2301      	movls	r3, #1
 800bca4:	2300      	movhi	r3, #0
 800bca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d079      	beq.n	800bda0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d107      	bne.n	800bcc8 <HAL_ADC_ConfigChannel+0x46c>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	0e9b      	lsrs	r3, r3, #26
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	069b      	lsls	r3, r3, #26
 800bcc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bcc6:	e015      	b.n	800bcf4 <HAL_ADC_ConfigChannel+0x498>
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcd0:	fa93 f3a3 	rbit	r3, r3
 800bcd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800bcd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800bcda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800bce0:	2320      	movs	r3, #32
 800bce2:	e003      	b.n	800bcec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800bce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bce6:	fab3 f383 	clz	r3, r3
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	3301      	adds	r3, #1
 800bcee:	069b      	lsls	r3, r3, #26
 800bcf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d109      	bne.n	800bd14 <HAL_ADC_ConfigChannel+0x4b8>
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	0e9b      	lsrs	r3, r3, #26
 800bd06:	3301      	adds	r3, #1
 800bd08:	f003 031f 	and.w	r3, r3, #31
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd12:	e017      	b.n	800bd44 <HAL_ADC_ConfigChannel+0x4e8>
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd1c:	fa93 f3a3 	rbit	r3, r3
 800bd20:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800bd22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800bd26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800bd2c:	2320      	movs	r3, #32
 800bd2e:	e003      	b.n	800bd38 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800bd30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd32:	fab3 f383 	clz	r3, r3
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	3301      	adds	r3, #1
 800bd3a:	f003 031f 	and.w	r3, r3, #31
 800bd3e:	2101      	movs	r1, #1
 800bd40:	fa01 f303 	lsl.w	r3, r1, r3
 800bd44:	ea42 0103 	orr.w	r1, r2, r3
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <HAL_ADC_ConfigChannel+0x50e>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	0e9b      	lsrs	r3, r3, #26
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	f003 021f 	and.w	r2, r3, #31
 800bd60:	4613      	mov	r3, r2
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	4413      	add	r3, r2
 800bd66:	051b      	lsls	r3, r3, #20
 800bd68:	e018      	b.n	800bd9c <HAL_ADC_ConfigChannel+0x540>
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	fa93 f3a3 	rbit	r3, r3
 800bd76:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800bd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800bd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bd82:	2320      	movs	r3, #32
 800bd84:	e003      	b.n	800bd8e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd88:	fab3 f383 	clz	r3, r3
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	3301      	adds	r3, #1
 800bd90:	f003 021f 	and.w	r2, r3, #31
 800bd94:	4613      	mov	r3, r2
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	4413      	add	r3, r2
 800bd9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	e080      	b.n	800bea2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d107      	bne.n	800bdbc <HAL_ADC_ConfigChannel+0x560>
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	0e9b      	lsrs	r3, r3, #26
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	069b      	lsls	r3, r3, #26
 800bdb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bdba:	e015      	b.n	800bde8 <HAL_ADC_ConfigChannel+0x58c>
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc4:	fa93 f3a3 	rbit	r3, r3
 800bdc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800bdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800bdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800bdd4:	2320      	movs	r3, #32
 800bdd6:	e003      	b.n	800bde0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdda:	fab3 f383 	clz	r3, r3
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	3301      	adds	r3, #1
 800bde2:	069b      	lsls	r3, r3, #26
 800bde4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <HAL_ADC_ConfigChannel+0x5ac>
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	0e9b      	lsrs	r3, r3, #26
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	f003 031f 	and.w	r3, r3, #31
 800be00:	2101      	movs	r1, #1
 800be02:	fa01 f303 	lsl.w	r3, r1, r3
 800be06:	e017      	b.n	800be38 <HAL_ADC_ConfigChannel+0x5dc>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	fa93 f3a3 	rbit	r3, r3
 800be14:	61fb      	str	r3, [r7, #28]
  return result;
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800be1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800be20:	2320      	movs	r3, #32
 800be22:	e003      	b.n	800be2c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	fab3 f383 	clz	r3, r3
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	3301      	adds	r3, #1
 800be2e:	f003 031f 	and.w	r3, r3, #31
 800be32:	2101      	movs	r1, #1
 800be34:	fa01 f303 	lsl.w	r3, r1, r3
 800be38:	ea42 0103 	orr.w	r1, r2, r3
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10d      	bne.n	800be64 <HAL_ADC_ConfigChannel+0x608>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	0e9b      	lsrs	r3, r3, #26
 800be4e:	3301      	adds	r3, #1
 800be50:	f003 021f 	and.w	r2, r3, #31
 800be54:	4613      	mov	r3, r2
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	4413      	add	r3, r2
 800be5a:	3b1e      	subs	r3, #30
 800be5c:	051b      	lsls	r3, r3, #20
 800be5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800be62:	e01d      	b.n	800bea0 <HAL_ADC_ConfigChannel+0x644>
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	fa93 f3a3 	rbit	r3, r3
 800be70:	613b      	str	r3, [r7, #16]
  return result;
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d103      	bne.n	800be84 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800be7c:	2320      	movs	r3, #32
 800be7e:	e005      	b.n	800be8c <HAL_ADC_ConfigChannel+0x630>
 800be80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	fab3 f383 	clz	r3, r3
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	3301      	adds	r3, #1
 800be8e:	f003 021f 	and.w	r2, r3, #31
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	3b1e      	subs	r3, #30
 800be9a:	051b      	lsls	r3, r3, #20
 800be9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bea0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bea6:	4619      	mov	r1, r3
 800bea8:	f7ff f9ea 	bl	800b280 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4b45      	ldr	r3, [pc, #276]	@ (800bfc8 <HAL_ADC_ConfigChannel+0x76c>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d07c      	beq.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800beb8:	4844      	ldr	r0, [pc, #272]	@ (800bfcc <HAL_ADC_ConfigChannel+0x770>)
 800beba:	f7ff f93f 	bl	800b13c <LL_ADC_GetCommonPathInternalCh>
 800bebe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bec2:	4843      	ldr	r0, [pc, #268]	@ (800bfd0 <HAL_ADC_ConfigChannel+0x774>)
 800bec4:	f7ff fa8e 	bl	800b3e4 <LL_ADC_IsEnabled>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d15e      	bne.n	800bf8c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a40      	ldr	r2, [pc, #256]	@ (800bfd4 <HAL_ADC_ConfigChannel+0x778>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d127      	bne.n	800bf28 <HAL_ADC_ConfigChannel+0x6cc>
 800bed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bedc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d121      	bne.n	800bf28 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a39      	ldr	r2, [pc, #228]	@ (800bfd0 <HAL_ADC_ConfigChannel+0x774>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d161      	bne.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800beee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bef2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bef6:	4619      	mov	r1, r3
 800bef8:	4834      	ldr	r0, [pc, #208]	@ (800bfcc <HAL_ADC_ConfigChannel+0x770>)
 800befa:	f7ff f90c 	bl	800b116 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800befe:	4b36      	ldr	r3, [pc, #216]	@ (800bfd8 <HAL_ADC_ConfigChannel+0x77c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	099b      	lsrs	r3, r3, #6
 800bf04:	4a35      	ldr	r2, [pc, #212]	@ (800bfdc <HAL_ADC_ConfigChannel+0x780>)
 800bf06:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0a:	099b      	lsrs	r3, r3, #6
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	4613      	mov	r3, r2
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4413      	add	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800bf18:	e002      	b.n	800bf20 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1f9      	bne.n	800bf1a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bf26:	e044      	b.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a2c      	ldr	r2, [pc, #176]	@ (800bfe0 <HAL_ADC_ConfigChannel+0x784>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d113      	bne.n	800bf5a <HAL_ADC_ConfigChannel+0x6fe>
 800bf32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10d      	bne.n	800bf5a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a23      	ldr	r2, [pc, #140]	@ (800bfd0 <HAL_ADC_ConfigChannel+0x774>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d134      	bne.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800bf48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf50:	4619      	mov	r1, r3
 800bf52:	481e      	ldr	r0, [pc, #120]	@ (800bfcc <HAL_ADC_ConfigChannel+0x770>)
 800bf54:	f7ff f8df 	bl	800b116 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bf58:	e02b      	b.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a21      	ldr	r2, [pc, #132]	@ (800bfe4 <HAL_ADC_ConfigChannel+0x788>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d126      	bne.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
 800bf64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d120      	bne.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a16      	ldr	r2, [pc, #88]	@ (800bfd0 <HAL_ADC_ConfigChannel+0x774>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d11b      	bne.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800bf7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bf82:	4619      	mov	r1, r3
 800bf84:	4811      	ldr	r0, [pc, #68]	@ (800bfcc <HAL_ADC_ConfigChannel+0x770>)
 800bf86:	f7ff f8c6 	bl	800b116 <LL_ADC_SetCommonPathInternalCh>
 800bf8a:	e012      	b.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf90:	f043 0220 	orr.w	r2, r3, #32
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800bf9e:	e008      	b.n	800bfb2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfa4:	f043 0220 	orr.w	r2, r3, #32
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800bfba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	37d8      	adds	r7, #216	@ 0xd8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	80080000 	.word	0x80080000
 800bfcc:	50040300 	.word	0x50040300
 800bfd0:	50040000 	.word	0x50040000
 800bfd4:	c7520000 	.word	0xc7520000
 800bfd8:	20000008 	.word	0x20000008
 800bfdc:	053e2d63 	.word	0x053e2d63
 800bfe0:	cb840000 	.word	0xcb840000
 800bfe4:	80000001 	.word	0x80000001

0800bfe8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff f9f3 	bl	800b3e4 <LL_ADC_IsEnabled>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d15e      	bne.n	800c0c2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689a      	ldr	r2, [r3, #8]
 800c00a:	4b30      	ldr	r3, [pc, #192]	@ (800c0cc <ADC_Enable+0xe4>)
 800c00c:	4013      	ands	r3, r2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00d      	beq.n	800c02e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c016:	f043 0210 	orr.w	r2, r3, #16
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c022:	f043 0201 	orr.w	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e04a      	b.n	800c0c4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff f9c2 	bl	800b3bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c038:	4825      	ldr	r0, [pc, #148]	@ (800c0d0 <ADC_Enable+0xe8>)
 800c03a:	f7ff f87f 	bl	800b13c <LL_ADC_GetCommonPathInternalCh>
 800c03e:	4603      	mov	r3, r0
 800c040:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00f      	beq.n	800c068 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c048:	4b22      	ldr	r3, [pc, #136]	@ (800c0d4 <ADC_Enable+0xec>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	099b      	lsrs	r3, r3, #6
 800c04e:	4a22      	ldr	r2, [pc, #136]	@ (800c0d8 <ADC_Enable+0xf0>)
 800c050:	fba2 2303 	umull	r2, r3, r2, r3
 800c054:	099b      	lsrs	r3, r3, #6
 800c056:	3301      	adds	r3, #1
 800c058:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c05a:	e002      	b.n	800c062 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	3b01      	subs	r3, #1
 800c060:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1f9      	bne.n	800c05c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800c068:	f7ff f81e 	bl	800b0a8 <HAL_GetTick>
 800c06c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c06e:	e021      	b.n	800c0b4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff f9b5 	bl	800b3e4 <LL_ADC_IsEnabled>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff f999 	bl	800b3bc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c08a:	f7ff f80d 	bl	800b0a8 <HAL_GetTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	2b02      	cmp	r3, #2
 800c096:	d90d      	bls.n	800c0b4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c09c:	f043 0210 	orr.w	r2, r3, #16
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a8:	f043 0201 	orr.w	r2, r3, #1
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e007      	b.n	800c0c4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d1d6      	bne.n	800c070 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	8000003f 	.word	0x8000003f
 800c0d0:	50040300 	.word	0x50040300
 800c0d4:	20000008 	.word	0x20000008
 800c0d8:	053e2d63 	.word	0x053e2d63

0800c0dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d14b      	bne.n	800c18e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 0308 	and.w	r3, r3, #8
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d021      	beq.n	800c154 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff f874 	bl	800b202 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d032      	beq.n	800c186 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d12b      	bne.n	800c186 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c132:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c13e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11f      	bne.n	800c186 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c14a:	f043 0201 	orr.w	r2, r3, #1
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	655a      	str	r2, [r3, #84]	@ 0x54
 800c152:	e018      	b.n	800c186 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	f003 0302 	and.w	r3, r3, #2
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d111      	bne.n	800c186 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c166:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c17e:	f043 0201 	orr.w	r2, r3, #1
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff fb4a 	bl	800b820 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c18c:	e00e      	b.n	800c1ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c192:	f003 0310 	and.w	r3, r3, #16
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f7ff fb54 	bl	800b848 <HAL_ADC_ErrorCallback>
}
 800c1a0:	e004      	b.n	800c1ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	4798      	blx	r3
}
 800c1ac:	bf00      	nop
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff fb36 	bl	800b834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c1c8:	bf00      	nop
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1ee:	f043 0204 	orr.w	r2, r3, #4
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7ff fb26 	bl	800b848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f003 0307 	and.w	r3, r3, #7
 800c212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c214:	4b0c      	ldr	r3, [pc, #48]	@ (800c248 <__NVIC_SetPriorityGrouping+0x44>)
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c220:	4013      	ands	r3, r2
 800c222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c22c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c236:	4a04      	ldr	r2, [pc, #16]	@ (800c248 <__NVIC_SetPriorityGrouping+0x44>)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	60d3      	str	r3, [r2, #12]
}
 800c23c:	bf00      	nop
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	e000ed00 	.word	0xe000ed00

0800c24c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c250:	4b04      	ldr	r3, [pc, #16]	@ (800c264 <__NVIC_GetPriorityGrouping+0x18>)
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	0a1b      	lsrs	r3, r3, #8
 800c256:	f003 0307 	and.w	r3, r3, #7
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	e000ed00 	.word	0xe000ed00

0800c268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c276:	2b00      	cmp	r3, #0
 800c278:	db0b      	blt.n	800c292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	f003 021f 	and.w	r2, r3, #31
 800c280:	4907      	ldr	r1, [pc, #28]	@ (800c2a0 <__NVIC_EnableIRQ+0x38>)
 800c282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c286:	095b      	lsrs	r3, r3, #5
 800c288:	2001      	movs	r0, #1
 800c28a:	fa00 f202 	lsl.w	r2, r0, r2
 800c28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	e000e100 	.word	0xe000e100

0800c2a4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	db0c      	blt.n	800c2d0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c2b6:	79fb      	ldrb	r3, [r7, #7]
 800c2b8:	f003 021f 	and.w	r2, r3, #31
 800c2bc:	4907      	ldr	r1, [pc, #28]	@ (800c2dc <__NVIC_SetPendingIRQ+0x38>)
 800c2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	fa00 f202 	lsl.w	r2, r0, r2
 800c2ca:	3340      	adds	r3, #64	@ 0x40
 800c2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr
 800c2dc:	e000e100 	.word	0xe000e100

0800c2e0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	db0c      	blt.n	800c30c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	f003 021f 	and.w	r2, r3, #31
 800c2f8:	4907      	ldr	r1, [pc, #28]	@ (800c318 <__NVIC_ClearPendingIRQ+0x38>)
 800c2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2fe:	095b      	lsrs	r3, r3, #5
 800c300:	2001      	movs	r0, #1
 800c302:	fa00 f202 	lsl.w	r2, r0, r2
 800c306:	3360      	adds	r3, #96	@ 0x60
 800c308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c30c:	bf00      	nop
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	e000e100 	.word	0xe000e100

0800c31c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	6039      	str	r1, [r7, #0]
 800c326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	db0a      	blt.n	800c346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	b2da      	uxtb	r2, r3
 800c334:	490c      	ldr	r1, [pc, #48]	@ (800c368 <__NVIC_SetPriority+0x4c>)
 800c336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c33a:	0112      	lsls	r2, r2, #4
 800c33c:	b2d2      	uxtb	r2, r2
 800c33e:	440b      	add	r3, r1
 800c340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c344:	e00a      	b.n	800c35c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	4908      	ldr	r1, [pc, #32]	@ (800c36c <__NVIC_SetPriority+0x50>)
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	f003 030f 	and.w	r3, r3, #15
 800c352:	3b04      	subs	r3, #4
 800c354:	0112      	lsls	r2, r2, #4
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	440b      	add	r3, r1
 800c35a:	761a      	strb	r2, [r3, #24]
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	e000e100 	.word	0xe000e100
 800c36c:	e000ed00 	.word	0xe000ed00

0800c370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c370:	b480      	push	{r7}
 800c372:	b089      	sub	sp, #36	@ 0x24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f003 0307 	and.w	r3, r3, #7
 800c382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f1c3 0307 	rsb	r3, r3, #7
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	bf28      	it	cs
 800c38e:	2304      	movcs	r3, #4
 800c390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	3304      	adds	r3, #4
 800c396:	2b06      	cmp	r3, #6
 800c398:	d902      	bls.n	800c3a0 <NVIC_EncodePriority+0x30>
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	3b03      	subs	r3, #3
 800c39e:	e000      	b.n	800c3a2 <NVIC_EncodePriority+0x32>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ae:	43da      	mvns	r2, r3
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	401a      	ands	r2, r3
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c3b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	fa01 f303 	lsl.w	r3, r1, r3
 800c3c2:	43d9      	mvns	r1, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c3c8:	4313      	orrs	r3, r2
         );
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3724      	adds	r7, #36	@ 0x24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
	...

0800c3d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3e8:	d301      	bcc.n	800c3ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e00f      	b.n	800c40e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c3ee:	4a0a      	ldr	r2, [pc, #40]	@ (800c418 <SysTick_Config+0x40>)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c3f6:	210f      	movs	r1, #15
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	f7ff ff8e 	bl	800c31c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c400:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <SysTick_Config+0x40>)
 800c402:	2200      	movs	r2, #0
 800c404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c406:	4b04      	ldr	r3, [pc, #16]	@ (800c418 <SysTick_Config+0x40>)
 800c408:	2207      	movs	r2, #7
 800c40a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	e000e010 	.word	0xe000e010

0800c41c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff feed 	bl	800c204 <__NVIC_SetPriorityGrouping>
}
 800c42a:	bf00      	nop
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b086      	sub	sp, #24
 800c436:	af00      	add	r7, sp, #0
 800c438:	4603      	mov	r3, r0
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
 800c43e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c440:	f7ff ff04 	bl	800c24c <__NVIC_GetPriorityGrouping>
 800c444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	6978      	ldr	r0, [r7, #20]
 800c44c:	f7ff ff90 	bl	800c370 <NVIC_EncodePriority>
 800c450:	4602      	mov	r2, r0
 800c452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c456:	4611      	mov	r1, r2
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff ff5f 	bl	800c31c <__NVIC_SetPriority>
}
 800c45e:	bf00      	nop
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	4603      	mov	r3, r0
 800c46e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c474:	4618      	mov	r0, r3
 800c476:	f7ff fef7 	bl	800c268 <__NVIC_EnableIRQ>
}
 800c47a:	bf00      	nop
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff ffa4 	bl	800c3d8 <SysTick_Config>
 800c490:	4603      	mov	r3, r0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800c4a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff fefb 	bl	800c2a4 <__NVIC_SetPendingIRQ>
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	4603      	mov	r3, r0
 800c4be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800c4c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7ff ff0b 	bl	800c2e0 <__NVIC_ClearPendingIRQ>
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e08e      	b.n	800c604 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	4b47      	ldr	r3, [pc, #284]	@ (800c60c <HAL_DMA_Init+0x138>)
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d80f      	bhi.n	800c512 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4b45      	ldr	r3, [pc, #276]	@ (800c610 <HAL_DMA_Init+0x13c>)
 800c4fa:	4413      	add	r3, r2
 800c4fc:	4a45      	ldr	r2, [pc, #276]	@ (800c614 <HAL_DMA_Init+0x140>)
 800c4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c502:	091b      	lsrs	r3, r3, #4
 800c504:	009a      	lsls	r2, r3, #2
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a42      	ldr	r2, [pc, #264]	@ (800c618 <HAL_DMA_Init+0x144>)
 800c50e:	641a      	str	r2, [r3, #64]	@ 0x40
 800c510:	e00e      	b.n	800c530 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	4b40      	ldr	r3, [pc, #256]	@ (800c61c <HAL_DMA_Init+0x148>)
 800c51a:	4413      	add	r3, r2
 800c51c:	4a3d      	ldr	r2, [pc, #244]	@ (800c614 <HAL_DMA_Init+0x140>)
 800c51e:	fba2 2303 	umull	r2, r3, r2, r3
 800c522:	091b      	lsrs	r3, r3, #4
 800c524:	009a      	lsls	r2, r3, #2
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a3c      	ldr	r2, [pc, #240]	@ (800c620 <HAL_DMA_Init+0x14c>)
 800c52e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2202      	movs	r2, #2
 800c534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c54a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c56c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fa74 	bl	800ca70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c590:	d102      	bne.n	800c598 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5a0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c5a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c5ae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d010      	beq.n	800c5da <HAL_DMA_Init+0x106>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	d80c      	bhi.n	800c5da <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa93 	bl	800caec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c5d6:	605a      	str	r2, [r3, #4]
 800c5d8:	e008      	b.n	800c5ec <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	40020407 	.word	0x40020407
 800c610:	bffdfff8 	.word	0xbffdfff8
 800c614:	cccccccd 	.word	0xcccccccd
 800c618:	40020000 	.word	0x40020000
 800c61c:	bffdfbf8 	.word	0xbffdfbf8
 800c620:	40020400 	.word	0x40020400

0800c624 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d101      	bne.n	800c644 <HAL_DMA_Start_IT+0x20>
 800c640:	2302      	movs	r3, #2
 800c642:	e066      	b.n	800c712 <HAL_DMA_Start_IT+0xee>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b01      	cmp	r3, #1
 800c656:	d155      	bne.n	800c704 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2200      	movs	r2, #0
 800c664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f022 0201 	bic.w	r2, r2, #1
 800c674:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	68b9      	ldr	r1, [r7, #8]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 f9b9 	bl	800c9f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c686:	2b00      	cmp	r3, #0
 800c688:	d008      	beq.n	800c69c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f042 020e 	orr.w	r2, r2, #14
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	e00f      	b.n	800c6bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f022 0204 	bic.w	r2, r2, #4
 800c6aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f042 020a 	orr.w	r2, r2, #10
 800c6ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d007      	beq.n	800c6da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d007      	beq.n	800c6f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f042 0201 	orr.w	r2, r2, #1
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	e005      	b.n	800c710 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c70c:	2302      	movs	r3, #2
 800c70e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c710:	7dfb      	ldrb	r3, [r7, #23]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d101      	bne.n	800c72c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	e04f      	b.n	800c7cc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b02      	cmp	r3, #2
 800c736:	d008      	beq.n	800c74a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2204      	movs	r2, #4
 800c73c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	e040      	b.n	800c7cc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 020e 	bic.w	r2, r2, #14
 800c758:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c768:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0201 	bic.w	r2, r2, #1
 800c778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c77e:	f003 021c 	and.w	r2, r3, #28
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c786:	2101      	movs	r1, #1
 800c788:	fa01 f202 	lsl.w	r2, r1, r2
 800c78c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c796:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00c      	beq.n	800c7ba <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c7ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c7b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	d005      	beq.n	800c7fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2204      	movs	r2, #4
 800c7f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	73fb      	strb	r3, [r7, #15]
 800c7fa:	e047      	b.n	800c88c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 020e 	bic.w	r2, r2, #14
 800c80a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 0201 	bic.w	r2, r2, #1
 800c81a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c826:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c82a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c830:	f003 021c 	and.w	r2, r3, #28
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c838:	2101      	movs	r1, #1
 800c83a:	fa01 f202 	lsl.w	r2, r1, r2
 800c83e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c848:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00c      	beq.n	800c86c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c85c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c860:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c86a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c880:	2b00      	cmp	r3, #0
 800c882:	d003      	beq.n	800c88c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	4798      	blx	r3
    }
  }
  return status;
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b084      	sub	sp, #16
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8b2:	f003 031c 	and.w	r3, r3, #28
 800c8b6:	2204      	movs	r2, #4
 800c8b8:	409a      	lsls	r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4013      	ands	r3, r2
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d026      	beq.n	800c910 <HAL_DMA_IRQHandler+0x7a>
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f003 0304 	and.w	r3, r3, #4
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d021      	beq.n	800c910 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 0320 	and.w	r3, r3, #32
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f022 0204 	bic.w	r2, r2, #4
 800c8e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ee:	f003 021c 	and.w	r2, r3, #28
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f6:	2104      	movs	r1, #4
 800c8f8:	fa01 f202 	lsl.w	r2, r1, r2
 800c8fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c902:	2b00      	cmp	r3, #0
 800c904:	d071      	beq.n	800c9ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c90e:	e06c      	b.n	800c9ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c914:	f003 031c 	and.w	r3, r3, #28
 800c918:	2202      	movs	r2, #2
 800c91a:	409a      	lsls	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4013      	ands	r3, r2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d02e      	beq.n	800c982 <HAL_DMA_IRQHandler+0xec>
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d029      	beq.n	800c982 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 0320 	and.w	r3, r3, #32
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10b      	bne.n	800c954 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f022 020a 	bic.w	r2, r2, #10
 800c94a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c958:	f003 021c 	and.w	r2, r3, #28
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c960:	2102      	movs	r1, #2
 800c962:	fa01 f202 	lsl.w	r2, r1, r2
 800c966:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c974:	2b00      	cmp	r3, #0
 800c976:	d038      	beq.n	800c9ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c980:	e033      	b.n	800c9ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c986:	f003 031c 	and.w	r3, r3, #28
 800c98a:	2208      	movs	r2, #8
 800c98c:	409a      	lsls	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	4013      	ands	r3, r2
 800c992:	2b00      	cmp	r3, #0
 800c994:	d02a      	beq.n	800c9ec <HAL_DMA_IRQHandler+0x156>
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	f003 0308 	and.w	r3, r3, #8
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d025      	beq.n	800c9ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 020e 	bic.w	r2, r2, #14
 800c9ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9b4:	f003 021c 	and.w	r2, r3, #28
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9bc:	2101      	movs	r1, #1
 800c9be:	fa01 f202 	lsl.w	r2, r1, r2
 800c9c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d004      	beq.n	800c9ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c9ea:	bf00      	nop
 800c9ec:	bf00      	nop
}
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ca0a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d004      	beq.n	800ca1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ca1c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca22:	f003 021c 	and.w	r2, r3, #28
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	fa01 f202 	lsl.w	r2, r1, r2
 800ca30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	2b10      	cmp	r3, #16
 800ca40:	d108      	bne.n	800ca54 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ca52:	e007      	b.n	800ca64 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	60da      	str	r2, [r3, #12]
}
 800ca64:	bf00      	nop
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4b17      	ldr	r3, [pc, #92]	@ (800cadc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d80a      	bhi.n	800ca9a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca88:	089b      	lsrs	r3, r3, #2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca90:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	6493      	str	r3, [r2, #72]	@ 0x48
 800ca98:	e007      	b.n	800caaa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca9e:	089b      	lsrs	r3, r3, #2
 800caa0:	009a      	lsls	r2, r3, #2
 800caa2:	4b0f      	ldr	r3, [pc, #60]	@ (800cae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800caa4:	4413      	add	r3, r2
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	3b08      	subs	r3, #8
 800cab2:	4a0c      	ldr	r2, [pc, #48]	@ (800cae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800cab4:	fba2 2303 	umull	r2, r3, r2, r3
 800cab8:	091b      	lsrs	r3, r3, #4
 800caba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a0a      	ldr	r2, [pc, #40]	@ (800cae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800cac0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f003 031f 	and.w	r3, r3, #31
 800cac8:	2201      	movs	r2, #1
 800caca:	409a      	lsls	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800cad0:	bf00      	nop
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	40020407 	.word	0x40020407
 800cae0:	4002081c 	.word	0x4002081c
 800cae4:	cccccccd 	.word	0xcccccccd
 800cae8:	40020880 	.word	0x40020880

0800caec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cafc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4b0b      	ldr	r3, [pc, #44]	@ (800cb30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800cb02:	4413      	add	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	461a      	mov	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a09      	ldr	r2, [pc, #36]	@ (800cb34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800cb10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	f003 0303 	and.w	r3, r3, #3
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	409a      	lsls	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800cb22:	bf00      	nop
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	1000823f 	.word	0x1000823f
 800cb34:	40020940 	.word	0x40020940

0800cb38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b087      	sub	sp, #28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cb42:	2300      	movs	r3, #0
 800cb44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cb46:	e14c      	b.n	800cde2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	fa01 f303 	lsl.w	r3, r1, r3
 800cb54:	4013      	ands	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f000 813e 	beq.w	800cddc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f003 0303 	and.w	r3, r3, #3
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d005      	beq.n	800cb78 <HAL_GPIO_Init+0x40>
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	d130      	bne.n	800cbda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	2203      	movs	r2, #3
 800cb84:	fa02 f303 	lsl.w	r3, r2, r3
 800cb88:	43db      	mvns	r3, r3
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	68da      	ldr	r2, [r3, #12]
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cbae:	2201      	movs	r2, #1
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb6:	43db      	mvns	r3, r3
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	4013      	ands	r3, r2
 800cbbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	091b      	lsrs	r3, r3, #4
 800cbc4:	f003 0201 	and.w	r2, r3, #1
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	fa02 f303 	lsl.w	r3, r2, r3
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f003 0303 	and.w	r3, r3, #3
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d017      	beq.n	800cc16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	2203      	movs	r2, #3
 800cbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf6:	43db      	mvns	r3, r3
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	689a      	ldr	r2, [r3, #8]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f003 0303 	and.w	r3, r3, #3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d123      	bne.n	800cc6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	08da      	lsrs	r2, r3, #3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3208      	adds	r2, #8
 800cc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	220f      	movs	r2, #15
 800cc3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc3e:	43db      	mvns	r3, r3
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4013      	ands	r3, r2
 800cc44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	691a      	ldr	r2, [r3, #16]
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f003 0307 	and.w	r3, r3, #7
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	fa02 f303 	lsl.w	r3, r2, r3
 800cc56:	693a      	ldr	r2, [r7, #16]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	08da      	lsrs	r2, r3, #3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3208      	adds	r2, #8
 800cc64:	6939      	ldr	r1, [r7, #16]
 800cc66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	2203      	movs	r2, #3
 800cc76:	fa02 f303 	lsl.w	r3, r2, r3
 800cc7a:	43db      	mvns	r3, r3
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4013      	ands	r3, r2
 800cc80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f003 0203 	and.w	r2, r3, #3
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f000 8098 	beq.w	800cddc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800ccac:	4a54      	ldr	r2, [pc, #336]	@ (800ce00 <HAL_GPIO_Init+0x2c8>)
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	089b      	lsrs	r3, r3, #2
 800ccb2:	3302      	adds	r3, #2
 800ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	220f      	movs	r2, #15
 800ccc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc8:	43db      	mvns	r3, r3
 800ccca:	693a      	ldr	r2, [r7, #16]
 800cccc:	4013      	ands	r3, r2
 800ccce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800ccd6:	d019      	beq.n	800cd0c <HAL_GPIO_Init+0x1d4>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a4a      	ldr	r2, [pc, #296]	@ (800ce04 <HAL_GPIO_Init+0x2cc>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d013      	beq.n	800cd08 <HAL_GPIO_Init+0x1d0>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a49      	ldr	r2, [pc, #292]	@ (800ce08 <HAL_GPIO_Init+0x2d0>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d00d      	beq.n	800cd04 <HAL_GPIO_Init+0x1cc>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a48      	ldr	r2, [pc, #288]	@ (800ce0c <HAL_GPIO_Init+0x2d4>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d007      	beq.n	800cd00 <HAL_GPIO_Init+0x1c8>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a47      	ldr	r2, [pc, #284]	@ (800ce10 <HAL_GPIO_Init+0x2d8>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d101      	bne.n	800ccfc <HAL_GPIO_Init+0x1c4>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	e008      	b.n	800cd0e <HAL_GPIO_Init+0x1d6>
 800ccfc:	2307      	movs	r3, #7
 800ccfe:	e006      	b.n	800cd0e <HAL_GPIO_Init+0x1d6>
 800cd00:	2303      	movs	r3, #3
 800cd02:	e004      	b.n	800cd0e <HAL_GPIO_Init+0x1d6>
 800cd04:	2302      	movs	r3, #2
 800cd06:	e002      	b.n	800cd0e <HAL_GPIO_Init+0x1d6>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <HAL_GPIO_Init+0x1d6>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	f002 0203 	and.w	r2, r2, #3
 800cd14:	0092      	lsls	r2, r2, #2
 800cd16:	4093      	lsls	r3, r2
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800cd1e:	4938      	ldr	r1, [pc, #224]	@ (800ce00 <HAL_GPIO_Init+0x2c8>)
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	089b      	lsrs	r3, r3, #2
 800cd24:	3302      	adds	r3, #2
 800cd26:	693a      	ldr	r2, [r7, #16]
 800cd28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cd2c:	4b39      	ldr	r3, [pc, #228]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	43db      	mvns	r3, r3
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d003      	beq.n	800cd50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cd50:	4a30      	ldr	r2, [pc, #192]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cd56:	4b2f      	ldr	r3, [pc, #188]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	43db      	mvns	r3, r3
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	4013      	ands	r3, r2
 800cd64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d003      	beq.n	800cd7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cd7a:	4a26      	ldr	r2, [pc, #152]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cd80:	4b24      	ldr	r3, [pc, #144]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	43db      	mvns	r3, r3
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	4013      	ands	r3, r2
 800cd90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cda6:	4a1b      	ldr	r2, [pc, #108]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800cdae:	4b19      	ldr	r3, [pc, #100]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cdb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cdb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	43db      	mvns	r3, r3
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cdd4:	4a0f      	ldr	r2, [pc, #60]	@ (800ce14 <HAL_GPIO_Init+0x2dc>)
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	3301      	adds	r3, #1
 800cde0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f47f aeab 	bne.w	800cb48 <HAL_GPIO_Init+0x10>
  }
}
 800cdf2:	bf00      	nop
 800cdf4:	bf00      	nop
 800cdf6:	371c      	adds	r7, #28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	40010000 	.word	0x40010000
 800ce04:	48000400 	.word	0x48000400
 800ce08:	48000800 	.word	0x48000800
 800ce0c:	48000c00 	.word	0x48000c00
 800ce10:	48001000 	.word	0x48001000
 800ce14:	58000800 	.word	0x58000800

0800ce18 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	887b      	ldrh	r3, [r7, #2]
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ce30:	2301      	movs	r3, #1
 800ce32:	73fb      	strb	r3, [r7, #15]
 800ce34:	e001      	b.n	800ce3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	807b      	strh	r3, [r7, #2]
 800ce54:	4613      	mov	r3, r2
 800ce56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ce58:	787b      	ldrb	r3, [r7, #1]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ce5e:	887a      	ldrh	r2, [r7, #2]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ce64:	e002      	b.n	800ce6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ce66:	887a      	ldrh	r2, [r7, #2]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	695b      	ldr	r3, [r3, #20]
 800ce88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ce8a:	887a      	ldrh	r2, [r7, #2]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4013      	ands	r3, r2
 800ce90:	041a      	lsls	r2, r3, #16
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	43d9      	mvns	r1, r3
 800ce96:	887b      	ldrh	r3, [r7, #2]
 800ce98:	400b      	ands	r3, r1
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	619a      	str	r2, [r3, #24]
}
 800cea0:	bf00      	nop
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800ceb2:	4b0a      	ldr	r3, [pc, #40]	@ (800cedc <HAL_HSEM_IRQHandler+0x30>)
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800ceb8:	4b08      	ldr	r3, [pc, #32]	@ (800cedc <HAL_HSEM_IRQHandler+0x30>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	43db      	mvns	r3, r3
 800cec0:	4906      	ldr	r1, [pc, #24]	@ (800cedc <HAL_HSEM_IRQHandler+0x30>)
 800cec2:	4013      	ands	r3, r2
 800cec4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800cec6:	4a05      	ldr	r2, [pc, #20]	@ (800cedc <HAL_HSEM_IRQHandler+0x30>)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f807 	bl	800cee0 <HAL_HSEM_FreeCallback>
}
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	58001500 	.word	0x58001500

0800cee0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e08d      	b.n	800d022 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7fc fee4 	bl	8009ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2224      	movs	r2, #36	@ 0x24
 800cf24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f022 0201 	bic.w	r2, r2, #1
 800cf36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cf44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	689a      	ldr	r2, [r3, #8]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cf54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d107      	bne.n	800cf6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cf6a:	609a      	str	r2, [r3, #8]
 800cf6c:	e006      	b.n	800cf7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689a      	ldr	r2, [r3, #8]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800cf7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d108      	bne.n	800cf96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf92:	605a      	str	r2, [r3, #4]
 800cf94:	e007      	b.n	800cfa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cfa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	6812      	ldr	r2, [r2, #0]
 800cfb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cfb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	68da      	ldr	r2, [r3, #12]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cfc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	691a      	ldr	r2, [r3, #16]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	430a      	orrs	r2, r1
 800cfe2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	69d9      	ldr	r1, [r3, #28]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a1a      	ldr	r2, [r3, #32]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	430a      	orrs	r2, r1
 800cff2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f042 0201 	orr.w	r2, r2, #1
 800d002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2220      	movs	r2, #32
 800d00e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b20      	cmp	r3, #32
 800d03e:	d138      	bne.n	800d0b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d046:	2b01      	cmp	r3, #1
 800d048:	d101      	bne.n	800d04e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d04a:	2302      	movs	r3, #2
 800d04c:	e032      	b.n	800d0b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2224      	movs	r2, #36	@ 0x24
 800d05a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f022 0201 	bic.w	r2, r2, #1
 800d06c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d07c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	6819      	ldr	r1, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	430a      	orrs	r2, r1
 800d08c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f042 0201 	orr.w	r2, r2, #1
 800d09c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2220      	movs	r2, #32
 800d0a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e000      	b.n	800d0b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d0b2:	2302      	movs	r3, #2
  }
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	2b20      	cmp	r3, #32
 800d0d4:	d139      	bne.n	800d14a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d101      	bne.n	800d0e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e033      	b.n	800d14c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2224      	movs	r2, #36	@ 0x24
 800d0f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f022 0201 	bic.w	r2, r2, #1
 800d102:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d112:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	021b      	lsls	r3, r3, #8
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f042 0201 	orr.w	r2, r2, #1
 800d134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2220      	movs	r2, #32
 800d13a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	e000      	b.n	800d14c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d14a:	2302      	movs	r3, #2
  }
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800d160:	2300      	movs	r3, #0
 800d162:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d01e      	beq.n	800d1a8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800d16a:	4b13      	ldr	r3, [pc, #76]	@ (800d1b8 <HAL_IPCC_Init+0x60>)
 800d16c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d102      	bne.n	800d180 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fc fdfc 	bl	8009d78 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800d180:	68b8      	ldr	r0, [r7, #8]
 800d182:	f000 f85b 	bl	800d23c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f82c 	bl	800d1f0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800d1a6:	e001      	b.n	800d1ac <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	58000c00 	.word	0x58000c00

0800d1bc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800d1ca:	bf00      	nop
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	60b9      	str	r1, [r7, #8]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800d1e4:	bf00      	nop
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	e00f      	b.n	800d21e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	4a0b      	ldr	r2, [pc, #44]	@ (800d234 <IPCC_SetDefaultCallbacks+0x44>)
 800d208:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3306      	adds	r3, #6
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4413      	add	r3, r2
 800d214:	4a08      	ldr	r2, [pc, #32]	@ (800d238 <IPCC_SetDefaultCallbacks+0x48>)
 800d216:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3301      	adds	r3, #1
 800d21c:	60fb      	str	r3, [r7, #12]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b05      	cmp	r3, #5
 800d222:	d9ec      	bls.n	800d1fe <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800d224:	bf00      	nop
 800d226:	bf00      	nop
 800d228:	3714      	adds	r7, #20
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	0800d1bd 	.word	0x0800d1bd
 800d238:	0800d1d7 	.word	0x0800d1d7

0800d23c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800d250:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	223f      	movs	r2, #63	@ 0x3f
 800d256:	609a      	str	r2, [r3, #8]
}
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d264:	b480      	push	{r7}
 800d266:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d268:	4b05      	ldr	r3, [pc, #20]	@ (800d280 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a04      	ldr	r2, [pc, #16]	@ (800d280 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d26e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d272:	6013      	str	r3, [r2, #0]
}
 800d274:	bf00      	nop
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	58000400 	.word	0x58000400

0800d284 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d284:	b480      	push	{r7}
 800d286:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d288:	4b04      	ldr	r3, [pc, #16]	@ (800d29c <HAL_PWREx_GetVoltageRange+0x18>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800d290:	4618      	mov	r0, r3
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	58000400 	.word	0x58000400

0800d2a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800d2a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d2b2:	d101      	bne.n	800d2b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e000      	b.n	800d2ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <LL_RCC_HSE_Enable>:
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d2c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2d6:	6013      	str	r3, [r2, #0]
}
 800d2d8:	bf00      	nop
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <LL_RCC_HSE_Disable>:
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800d2e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2f4:	6013      	str	r3, [r2, #0]
}
 800d2f6:	bf00      	nop
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <LL_RCC_HSE_IsReady>:
{
 800d300:	b480      	push	{r7}
 800d302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800d304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d30e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d312:	d101      	bne.n	800d318 <LL_RCC_HSE_IsReady+0x18>
 800d314:	2301      	movs	r3, #1
 800d316:	e000      	b.n	800d31a <LL_RCC_HSE_IsReady+0x1a>
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <LL_RCC_HSI_Enable>:
{
 800d324:	b480      	push	{r7}
 800d326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d336:	6013      	str	r3, [r2, #0]
}
 800d338:	bf00      	nop
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <LL_RCC_HSI_Disable>:
{
 800d342:	b480      	push	{r7}
 800d344:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800d346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d354:	6013      	str	r3, [r2, #0]
}
 800d356:	bf00      	nop
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <LL_RCC_HSI_IsReady>:
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d36e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d372:	d101      	bne.n	800d378 <LL_RCC_HSI_IsReady+0x18>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <LL_RCC_HSI_IsReady+0x1a>
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <LL_RCC_HSI_SetCalibTrimming>:
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800d38c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	061b      	lsls	r3, r3, #24
 800d39a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	604b      	str	r3, [r1, #4]
}
 800d3a2:	bf00      	nop
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <LL_RCC_HSI48_Enable>:
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d3b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3be:	f043 0301 	orr.w	r3, r3, #1
 800d3c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d3c6:	bf00      	nop
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <LL_RCC_HSI48_Disable>:
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d3d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3e0:	f023 0301 	bic.w	r3, r3, #1
 800d3e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d3e8:	bf00      	nop
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <LL_RCC_HSI48_IsReady>:
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800d3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3fe:	f003 0302 	and.w	r3, r3, #2
 800d402:	2b02      	cmp	r3, #2
 800d404:	d101      	bne.n	800d40a <LL_RCC_HSI48_IsReady+0x18>
 800d406:	2301      	movs	r3, #1
 800d408:	e000      	b.n	800d40c <LL_RCC_HSI48_IsReady+0x1a>
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <LL_RCC_LSE_Enable>:
{
 800d416:	b480      	push	{r7}
 800d418:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d41a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d426:	f043 0301 	orr.w	r3, r3, #1
 800d42a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d42e:	bf00      	nop
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <LL_RCC_LSE_Disable>:
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d43c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d444:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d448:	f023 0301 	bic.w	r3, r3, #1
 800d44c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d450:	bf00      	nop
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <LL_RCC_LSE_EnableBypass>:
{
 800d45a:	b480      	push	{r7}
 800d45c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d45e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d466:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d46a:	f043 0304 	orr.w	r3, r3, #4
 800d46e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d472:	bf00      	nop
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <LL_RCC_LSE_DisableBypass>:
{
 800d47c:	b480      	push	{r7}
 800d47e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d48c:	f023 0304 	bic.w	r3, r3, #4
 800d490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d494:	bf00      	nop
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <LL_RCC_LSE_IsReady>:
{
 800d49e:	b480      	push	{r7}
 800d4a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d4a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4aa:	f003 0302 	and.w	r3, r3, #2
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d101      	bne.n	800d4b6 <LL_RCC_LSE_IsReady+0x18>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e000      	b.n	800d4b8 <LL_RCC_LSE_IsReady+0x1a>
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <LL_RCC_LSI1_Enable>:
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d4c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4d2:	f043 0301 	orr.w	r3, r3, #1
 800d4d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d4da:	bf00      	nop
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <LL_RCC_LSI1_Disable>:
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4f4:	f023 0301 	bic.w	r3, r3, #1
 800d4f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d4fc:	bf00      	nop
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr

0800d506 <LL_RCC_LSI1_IsReady>:
{
 800d506:	b480      	push	{r7}
 800d508:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800d50a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d512:	f003 0302 	and.w	r3, r3, #2
 800d516:	2b02      	cmp	r3, #2
 800d518:	d101      	bne.n	800d51e <LL_RCC_LSI1_IsReady+0x18>
 800d51a:	2301      	movs	r3, #1
 800d51c:	e000      	b.n	800d520 <LL_RCC_LSI1_IsReady+0x1a>
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <LL_RCC_LSI2_Enable>:
{
 800d52a:	b480      	push	{r7}
 800d52c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d52e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d53a:	f043 0304 	orr.w	r3, r3, #4
 800d53e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d542:	bf00      	nop
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <LL_RCC_LSI2_Disable>:
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d558:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d55c:	f023 0304 	bic.w	r3, r3, #4
 800d560:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d564:	bf00      	nop
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <LL_RCC_LSI2_IsReady>:
{
 800d56e:	b480      	push	{r7}
 800d570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800d572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b08      	cmp	r3, #8
 800d580:	d101      	bne.n	800d586 <LL_RCC_LSI2_IsReady+0x18>
 800d582:	2301      	movs	r3, #1
 800d584:	e000      	b.n	800d588 <LL_RCC_LSI2_IsReady+0x1a>
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <LL_RCC_LSI2_SetTrimming>:
{
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800d59a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d5a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	021b      	lsls	r3, r3, #8
 800d5aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <LL_RCC_MSI_Enable>:
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800d5c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d5ce:	f043 0301 	orr.w	r3, r3, #1
 800d5d2:	6013      	str	r3, [r2, #0]
}
 800d5d4:	bf00      	nop
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <LL_RCC_MSI_Disable>:
{
 800d5de:	b480      	push	{r7}
 800d5e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800d5e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d5ec:	f023 0301 	bic.w	r3, r3, #1
 800d5f0:	6013      	str	r3, [r2, #0]
}
 800d5f2:	bf00      	nop
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <LL_RCC_MSI_IsReady>:
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800d600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 0302 	and.w	r3, r3, #2
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d101      	bne.n	800d612 <LL_RCC_MSI_IsReady+0x16>
 800d60e:	2301      	movs	r3, #1
 800d610:	e000      	b.n	800d614 <LL_RCC_MSI_IsReady+0x18>
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <LL_RCC_MSI_SetRange>:
{
 800d61e:	b480      	push	{r7}
 800d620:	b083      	sub	sp, #12
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800d626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4313      	orrs	r3, r2
 800d638:	600b      	str	r3, [r1, #0]
}
 800d63a:	bf00      	nop
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <LL_RCC_MSI_GetRange>:
{
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800d64c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d656:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2bb0      	cmp	r3, #176	@ 0xb0
 800d65c:	d901      	bls.n	800d662 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800d65e:	23b0      	movs	r3, #176	@ 0xb0
 800d660:	607b      	str	r3, [r7, #4]
  return msiRange;
 800d662:	687b      	ldr	r3, [r7, #4]
}
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <LL_RCC_MSI_SetCalibTrimming>:
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800d678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	021b      	lsls	r3, r3, #8
 800d686:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d68a:	4313      	orrs	r3, r2
 800d68c:	604b      	str	r3, [r1, #4]
}
 800d68e:	bf00      	nop
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <LL_RCC_SetSysClkSource>:
{
 800d69a:	b480      	push	{r7}
 800d69c:	b083      	sub	sp, #12
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d6a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	f023 0203 	bic.w	r2, r3, #3
 800d6ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	608b      	str	r3, [r1, #8]
}
 800d6b6:	bf00      	nop
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <LL_RCC_GetSysClkSource>:
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d6c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	f003 030c 	and.w	r3, r3, #12
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <LL_RCC_SetAHBPrescaler>:
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d6e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d6ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	608b      	str	r3, [r1, #8]
}
 800d6f6:	bf00      	nop
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <LL_C2_RCC_SetAHBPrescaler>:
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d70a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d70e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d712:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d716:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d722:	bf00      	nop
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <LL_RCC_SetAHB4Prescaler>:
{
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d73a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d73e:	f023 020f 	bic.w	r2, r3, #15
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	091b      	lsrs	r3, r3, #4
 800d746:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d74a:	4313      	orrs	r3, r2
 800d74c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <LL_RCC_SetAPB1Prescaler>:
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d76e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4313      	orrs	r3, r2
 800d776:	608b      	str	r3, [r1, #8]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <LL_RCC_SetAPB2Prescaler>:
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d78c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	608b      	str	r3, [r1, #8]
}
 800d7a0:	bf00      	nop
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <LL_RCC_GetAHBPrescaler>:
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d7b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <LL_RCC_GetAHB4Prescaler>:
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d7c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <LL_RCC_GetAPB1Prescaler>:
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d7e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <LL_RCC_GetAPB2Prescaler>:
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d7fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800d806:	4618      	mov	r0, r3
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800d810:	b480      	push	{r7}
 800d812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d81e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d822:	6013      	str	r3, [r2, #0]
}
 800d824:	bf00      	nop
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800d82e:	b480      	push	{r7}
 800d830:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800d832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d83c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d840:	6013      	str	r3, [r2, #0]
}
 800d842:	bf00      	nop
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800d84c:	b480      	push	{r7}
 800d84e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d85a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d85e:	d101      	bne.n	800d864 <LL_RCC_PLL_IsReady+0x18>
 800d860:	2301      	movs	r3, #1
 800d862:	e000      	b.n	800d866 <LL_RCC_PLL_IsReady+0x1a>
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d870:	b480      	push	{r7}
 800d872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	0a1b      	lsrs	r3, r3, #8
 800d87c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800d880:	4618      	mov	r0, r3
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800d88a:	b480      	push	{r7}
 800d88c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d88e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800d898:	4618      	mov	r0, r3
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d8a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr

0800d8ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d8ba:	b480      	push	{r7}
 800d8bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d8be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f003 0303 	and.w	r3, r3, #3
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d8d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8e4:	d101      	bne.n	800d8ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e000      	b.n	800d8ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d8fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d90a:	d101      	bne.n	800d910 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d90c:	2301      	movs	r3, #1
 800d90e:	e000      	b.n	800d912 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d924:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d930:	d101      	bne.n	800d936 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d932:	2301      	movs	r3, #1
 800d934:	e000      	b.n	800d938 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800d942:	b480      	push	{r7}
 800d944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d954:	d101      	bne.n	800d95a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d956:	2301      	movs	r3, #1
 800d958:	e000      	b.n	800d95c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800d966:	b480      	push	{r7}
 800d968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d96a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d974:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d978:	d101      	bne.n	800d97e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e000      	b.n	800d980 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
	...

0800d98c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d98c:	b590      	push	{r4, r7, lr}
 800d98e:	b08d      	sub	sp, #52	@ 0x34
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d101      	bne.n	800d99e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e363      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f003 0320 	and.w	r3, r3, #32
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 808d 	beq.w	800dac6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9ac:	f7ff fe89 	bl	800d6c2 <LL_RCC_GetSysClkSource>
 800d9b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9b2:	f7ff ff82 	bl	800d8ba <LL_RCC_PLL_GetMainSource>
 800d9b6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d005      	beq.n	800d9ca <HAL_RCC_OscConfig+0x3e>
 800d9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c0:	2b0c      	cmp	r3, #12
 800d9c2:	d147      	bne.n	800da54 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d144      	bne.n	800da54 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	69db      	ldr	r3, [r3, #28]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e347      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d9da:	f7ff fe34 	bl	800d646 <LL_RCC_MSI_GetRange>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	429c      	cmp	r4, r3
 800d9e2:	d914      	bls.n	800da0e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 fd2f 	bl	800e44c <RCC_SetFlashLatencyFromMSIRange>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e336      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7ff fe0e 	bl	800d61e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	4618      	mov	r0, r3
 800da08:	f7ff fe32 	bl	800d670 <LL_RCC_MSI_SetCalibTrimming>
 800da0c:	e013      	b.n	800da36 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff fe03 	bl	800d61e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6a1b      	ldr	r3, [r3, #32]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff fe27 	bl	800d670 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fd10 	bl	800e44c <RCC_SetFlashLatencyFromMSIRange>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d001      	beq.n	800da36 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e317      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800da36:	f000 fcc9 	bl	800e3cc <HAL_RCC_GetHCLKFreq>
 800da3a:	4603      	mov	r3, r0
 800da3c:	4aa4      	ldr	r2, [pc, #656]	@ (800dcd0 <HAL_RCC_OscConfig+0x344>)
 800da3e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800da40:	4ba4      	ldr	r3, [pc, #656]	@ (800dcd4 <HAL_RCC_OscConfig+0x348>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4618      	mov	r0, r3
 800da46:	f7fd fae1 	bl	800b00c <HAL_InitTick>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d039      	beq.n	800dac4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e308      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d01e      	beq.n	800da9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800da5c:	f7ff fdb0 	bl	800d5c0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800da60:	f7fd fb22 	bl	800b0a8 <HAL_GetTick>
 800da64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800da66:	e008      	b.n	800da7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800da68:	f7fd fb1e 	bl	800b0a8 <HAL_GetTick>
 800da6c:	4602      	mov	r2, r0
 800da6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	2b02      	cmp	r3, #2
 800da74:	d901      	bls.n	800da7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e2f5      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800da7a:	f7ff fdbf 	bl	800d5fc <LL_RCC_MSI_IsReady>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d0f1      	beq.n	800da68 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fdc8 	bl	800d61e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fdec 	bl	800d670 <LL_RCC_MSI_SetCalibTrimming>
 800da98:	e015      	b.n	800dac6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800da9a:	f7ff fda0 	bl	800d5de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800da9e:	f7fd fb03 	bl	800b0a8 <HAL_GetTick>
 800daa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800daa4:	e008      	b.n	800dab8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800daa6:	f7fd faff 	bl	800b0a8 <HAL_GetTick>
 800daaa:	4602      	mov	r2, r0
 800daac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d901      	bls.n	800dab8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800dab4:	2303      	movs	r3, #3
 800dab6:	e2d6      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800dab8:	f7ff fda0 	bl	800d5fc <LL_RCC_MSI_IsReady>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f1      	bne.n	800daa6 <HAL_RCC_OscConfig+0x11a>
 800dac2:	e000      	b.n	800dac6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800dac4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d047      	beq.n	800db62 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dad2:	f7ff fdf6 	bl	800d6c2 <LL_RCC_GetSysClkSource>
 800dad6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dad8:	f7ff feef 	bl	800d8ba <LL_RCC_PLL_GetMainSource>
 800dadc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	2b08      	cmp	r3, #8
 800dae2:	d005      	beq.n	800daf0 <HAL_RCC_OscConfig+0x164>
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	2b0c      	cmp	r3, #12
 800dae8:	d108      	bne.n	800dafc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	2b03      	cmp	r3, #3
 800daee:	d105      	bne.n	800dafc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d134      	bne.n	800db62 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e2b4      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db04:	d102      	bne.n	800db0c <HAL_RCC_OscConfig+0x180>
 800db06:	f7ff fbdd 	bl	800d2c4 <LL_RCC_HSE_Enable>
 800db0a:	e001      	b.n	800db10 <HAL_RCC_OscConfig+0x184>
 800db0c:	f7ff fbe9 	bl	800d2e2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d012      	beq.n	800db3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db18:	f7fd fac6 	bl	800b0a8 <HAL_GetTick>
 800db1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800db1e:	e008      	b.n	800db32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db20:	f7fd fac2 	bl	800b0a8 <HAL_GetTick>
 800db24:	4602      	mov	r2, r0
 800db26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	2b64      	cmp	r3, #100	@ 0x64
 800db2c:	d901      	bls.n	800db32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800db2e:	2303      	movs	r3, #3
 800db30:	e299      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800db32:	f7ff fbe5 	bl	800d300 <LL_RCC_HSE_IsReady>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0f1      	beq.n	800db20 <HAL_RCC_OscConfig+0x194>
 800db3c:	e011      	b.n	800db62 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db3e:	f7fd fab3 	bl	800b0a8 <HAL_GetTick>
 800db42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800db44:	e008      	b.n	800db58 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800db46:	f7fd faaf 	bl	800b0a8 <HAL_GetTick>
 800db4a:	4602      	mov	r2, r0
 800db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	2b64      	cmp	r3, #100	@ 0x64
 800db52:	d901      	bls.n	800db58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800db54:	2303      	movs	r3, #3
 800db56:	e286      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800db58:	f7ff fbd2 	bl	800d300 <LL_RCC_HSE_IsReady>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1f1      	bne.n	800db46 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0302 	and.w	r3, r3, #2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d04c      	beq.n	800dc08 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db6e:	f7ff fda8 	bl	800d6c2 <LL_RCC_GetSysClkSource>
 800db72:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800db74:	f7ff fea1 	bl	800d8ba <LL_RCC_PLL_GetMainSource>
 800db78:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	2b04      	cmp	r3, #4
 800db7e:	d005      	beq.n	800db8c <HAL_RCC_OscConfig+0x200>
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	2b0c      	cmp	r3, #12
 800db84:	d10e      	bne.n	800dba4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d10b      	bne.n	800dba4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e266      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff fbf1 	bl	800d384 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800dba2:	e031      	b.n	800dc08 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d019      	beq.n	800dbe0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dbac:	f7ff fbba 	bl	800d324 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb0:	f7fd fa7a 	bl	800b0a8 <HAL_GetTick>
 800dbb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800dbb6:	e008      	b.n	800dbca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbb8:	f7fd fa76 	bl	800b0a8 <HAL_GetTick>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d901      	bls.n	800dbca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	e24d      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800dbca:	f7ff fbc9 	bl	800d360 <LL_RCC_HSI_IsReady>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d0f1      	beq.n	800dbb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7ff fbd3 	bl	800d384 <LL_RCC_HSI_SetCalibTrimming>
 800dbde:	e013      	b.n	800dc08 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbe0:	f7ff fbaf 	bl	800d342 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbe4:	f7fd fa60 	bl	800b0a8 <HAL_GetTick>
 800dbe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800dbea:	e008      	b.n	800dbfe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbec:	f7fd fa5c 	bl	800b0a8 <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d901      	bls.n	800dbfe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e233      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800dbfe:	f7ff fbaf 	bl	800d360 <LL_RCC_HSI_IsReady>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1f1      	bne.n	800dbec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f003 0308 	and.w	r3, r3, #8
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d106      	bne.n	800dc22 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 80a3 	beq.w	800dd68 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d076      	beq.n	800dd18 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f003 0310 	and.w	r3, r3, #16
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d046      	beq.n	800dcc4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800dc36:	f7ff fc66 	bl	800d506 <LL_RCC_LSI1_IsReady>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d113      	bne.n	800dc68 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800dc40:	f7ff fc3f 	bl	800d4c2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dc44:	f7fd fa30 	bl	800b0a8 <HAL_GetTick>
 800dc48:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800dc4a:	e008      	b.n	800dc5e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dc4c:	f7fd fa2c 	bl	800b0a8 <HAL_GetTick>
 800dc50:	4602      	mov	r2, r0
 800dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d901      	bls.n	800dc5e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e203      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800dc5e:	f7ff fc52 	bl	800d506 <LL_RCC_LSI1_IsReady>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d0f1      	beq.n	800dc4c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800dc68:	f7ff fc5f 	bl	800d52a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc6c:	f7fd fa1c 	bl	800b0a8 <HAL_GetTick>
 800dc70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800dc72:	e008      	b.n	800dc86 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dc74:	f7fd fa18 	bl	800b0a8 <HAL_GetTick>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d901      	bls.n	800dc86 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e1ef      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800dc86:	f7ff fc72 	bl	800d56e <LL_RCC_LSI2_IsReady>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d0f1      	beq.n	800dc74 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	699b      	ldr	r3, [r3, #24]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7ff fc7c 	bl	800d592 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800dc9a:	f7ff fc23 	bl	800d4e4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc9e:	f7fd fa03 	bl	800b0a8 <HAL_GetTick>
 800dca2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800dca4:	e008      	b.n	800dcb8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dca6:	f7fd f9ff 	bl	800b0a8 <HAL_GetTick>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d901      	bls.n	800dcb8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	e1d6      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800dcb8:	f7ff fc25 	bl	800d506 <LL_RCC_LSI1_IsReady>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1f1      	bne.n	800dca6 <HAL_RCC_OscConfig+0x31a>
 800dcc2:	e051      	b.n	800dd68 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800dcc4:	f7ff fbfd 	bl	800d4c2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcc8:	f7fd f9ee 	bl	800b0a8 <HAL_GetTick>
 800dccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800dcce:	e00c      	b.n	800dcea <HAL_RCC_OscConfig+0x35e>
 800dcd0:	20000008 	.word	0x20000008
 800dcd4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dcd8:	f7fd f9e6 	bl	800b0a8 <HAL_GetTick>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d901      	bls.n	800dcea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800dce6:	2303      	movs	r3, #3
 800dce8:	e1bd      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800dcea:	f7ff fc0c 	bl	800d506 <LL_RCC_LSI1_IsReady>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0f1      	beq.n	800dcd8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800dcf4:	f7ff fc2a 	bl	800d54c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800dcf8:	e008      	b.n	800dd0c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dcfa:	f7fd f9d5 	bl	800b0a8 <HAL_GetTick>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	2b03      	cmp	r3, #3
 800dd06:	d901      	bls.n	800dd0c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e1ac      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800dd0c:	f7ff fc2f 	bl	800d56e <LL_RCC_LSI2_IsReady>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d1f1      	bne.n	800dcfa <HAL_RCC_OscConfig+0x36e>
 800dd16:	e027      	b.n	800dd68 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800dd18:	f7ff fc18 	bl	800d54c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd1c:	f7fd f9c4 	bl	800b0a8 <HAL_GetTick>
 800dd20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800dd22:	e008      	b.n	800dd36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dd24:	f7fd f9c0 	bl	800b0a8 <HAL_GetTick>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d901      	bls.n	800dd36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800dd32:	2303      	movs	r3, #3
 800dd34:	e197      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800dd36:	f7ff fc1a 	bl	800d56e <LL_RCC_LSI2_IsReady>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f1      	bne.n	800dd24 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800dd40:	f7ff fbd0 	bl	800d4e4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd44:	f7fd f9b0 	bl	800b0a8 <HAL_GetTick>
 800dd48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800dd4a:	e008      	b.n	800dd5e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dd4c:	f7fd f9ac 	bl	800b0a8 <HAL_GetTick>
 800dd50:	4602      	mov	r2, r0
 800dd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d901      	bls.n	800dd5e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	e183      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800dd5e:	f7ff fbd2 	bl	800d506 <LL_RCC_LSI1_IsReady>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1f1      	bne.n	800dd4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d05b      	beq.n	800de2c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd74:	4ba7      	ldr	r3, [pc, #668]	@ (800e014 <HAL_RCC_OscConfig+0x688>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d114      	bne.n	800ddaa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800dd80:	f7ff fa70 	bl	800d264 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd84:	f7fd f990 	bl	800b0a8 <HAL_GetTick>
 800dd88:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd8a:	e008      	b.n	800dd9e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd8c:	f7fd f98c 	bl	800b0a8 <HAL_GetTick>
 800dd90:	4602      	mov	r2, r0
 800dd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d901      	bls.n	800dd9e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e163      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd9e:	4b9d      	ldr	r3, [pc, #628]	@ (800e014 <HAL_RCC_OscConfig+0x688>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0f0      	beq.n	800dd8c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d102      	bne.n	800ddb8 <HAL_RCC_OscConfig+0x42c>
 800ddb2:	f7ff fb30 	bl	800d416 <LL_RCC_LSE_Enable>
 800ddb6:	e00c      	b.n	800ddd2 <HAL_RCC_OscConfig+0x446>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	2b05      	cmp	r3, #5
 800ddbe:	d104      	bne.n	800ddca <HAL_RCC_OscConfig+0x43e>
 800ddc0:	f7ff fb4b 	bl	800d45a <LL_RCC_LSE_EnableBypass>
 800ddc4:	f7ff fb27 	bl	800d416 <LL_RCC_LSE_Enable>
 800ddc8:	e003      	b.n	800ddd2 <HAL_RCC_OscConfig+0x446>
 800ddca:	f7ff fb35 	bl	800d438 <LL_RCC_LSE_Disable>
 800ddce:	f7ff fb55 	bl	800d47c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d014      	beq.n	800de04 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddda:	f7fd f965 	bl	800b0a8 <HAL_GetTick>
 800ddde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800dde0:	e00a      	b.n	800ddf8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dde2:	f7fd f961 	bl	800b0a8 <HAL_GetTick>
 800dde6:	4602      	mov	r2, r0
 800dde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d901      	bls.n	800ddf8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e136      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ddf8:	f7ff fb51 	bl	800d49e <LL_RCC_LSE_IsReady>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0ef      	beq.n	800dde2 <HAL_RCC_OscConfig+0x456>
 800de02:	e013      	b.n	800de2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de04:	f7fd f950 	bl	800b0a8 <HAL_GetTick>
 800de08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800de0a:	e00a      	b.n	800de22 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800de0c:	f7fd f94c 	bl	800b0a8 <HAL_GetTick>
 800de10:	4602      	mov	r2, r0
 800de12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d901      	bls.n	800de22 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e121      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800de22:	f7ff fb3c 	bl	800d49e <LL_RCC_LSE_IsReady>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1ef      	bne.n	800de0c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de34:	2b00      	cmp	r3, #0
 800de36:	d02c      	beq.n	800de92 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d014      	beq.n	800de6a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800de40:	f7ff fab5 	bl	800d3ae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de44:	f7fd f930 	bl	800b0a8 <HAL_GetTick>
 800de48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800de4a:	e008      	b.n	800de5e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de4c:	f7fd f92c 	bl	800b0a8 <HAL_GetTick>
 800de50:	4602      	mov	r2, r0
 800de52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de54:	1ad3      	subs	r3, r2, r3
 800de56:	2b02      	cmp	r3, #2
 800de58:	d901      	bls.n	800de5e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800de5a:	2303      	movs	r3, #3
 800de5c:	e103      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800de5e:	f7ff fac8 	bl	800d3f2 <LL_RCC_HSI48_IsReady>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0f1      	beq.n	800de4c <HAL_RCC_OscConfig+0x4c0>
 800de68:	e013      	b.n	800de92 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800de6a:	f7ff fab1 	bl	800d3d0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de6e:	f7fd f91b 	bl	800b0a8 <HAL_GetTick>
 800de72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800de74:	e008      	b.n	800de88 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de76:	f7fd f917 	bl	800b0a8 <HAL_GetTick>
 800de7a:	4602      	mov	r2, r0
 800de7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	2b02      	cmp	r3, #2
 800de82:	d901      	bls.n	800de88 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800de84:	2303      	movs	r3, #3
 800de86:	e0ee      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800de88:	f7ff fab3 	bl	800d3f2 <LL_RCC_HSI48_IsReady>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1f1      	bne.n	800de76 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de96:	2b00      	cmp	r3, #0
 800de98:	f000 80e4 	beq.w	800e064 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de9c:	f7ff fc11 	bl	800d6c2 <LL_RCC_GetSysClkSource>
 800dea0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800dea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deae:	2b02      	cmp	r3, #2
 800deb0:	f040 80b4 	bne.w	800e01c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f003 0203 	and.w	r2, r3, #3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800debe:	429a      	cmp	r2, r3
 800dec0:	d123      	bne.n	800df0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800decc:	429a      	cmp	r2, r3
 800dece:	d11c      	bne.n	800df0a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	0a1b      	lsrs	r3, r3, #8
 800ded4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dedc:	429a      	cmp	r2, r3
 800dede:	d114      	bne.n	800df0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800deea:	429a      	cmp	r2, r3
 800deec:	d10d      	bne.n	800df0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800def8:	429a      	cmp	r2, r3
 800defa:	d106      	bne.n	800df0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800df06:	429a      	cmp	r2, r3
 800df08:	d05d      	beq.n	800dfc6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	2b0c      	cmp	r3, #12
 800df0e:	d058      	beq.n	800dfc2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800df10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	e0a1      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800df22:	f7ff fc84 	bl	800d82e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800df26:	f7fd f8bf 	bl	800b0a8 <HAL_GetTick>
 800df2a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800df2c:	e008      	b.n	800df40 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df2e:	f7fd f8bb 	bl	800b0a8 <HAL_GetTick>
 800df32:	4602      	mov	r2, r0
 800df34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df36:	1ad3      	subs	r3, r2, r3
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d901      	bls.n	800df40 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e092      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800df40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1ef      	bne.n	800df2e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800df4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df52:	68da      	ldr	r2, [r3, #12]
 800df54:	4b30      	ldr	r3, [pc, #192]	@ (800e018 <HAL_RCC_OscConfig+0x68c>)
 800df56:	4013      	ands	r3, r2
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800df60:	4311      	orrs	r1, r2
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800df66:	0212      	lsls	r2, r2, #8
 800df68:	4311      	orrs	r1, r2
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800df6e:	4311      	orrs	r1, r2
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800df74:	4311      	orrs	r1, r2
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800df7a:	430a      	orrs	r2, r1
 800df7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df80:	4313      	orrs	r3, r2
 800df82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800df84:	f7ff fc44 	bl	800d810 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800df88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800df98:	f7fd f886 	bl	800b0a8 <HAL_GetTick>
 800df9c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df9e:	e008      	b.n	800dfb2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfa0:	f7fd f882 	bl	800b0a8 <HAL_GetTick>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	2b02      	cmp	r3, #2
 800dfac:	d901      	bls.n	800dfb2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e059      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dfb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0ef      	beq.n	800dfa0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dfc0:	e050      	b.n	800e064 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e04f      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dfc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d147      	bne.n	800e064 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800dfd4:	f7ff fc1c 	bl	800d810 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800dfd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dfe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dfe8:	f7fd f85e 	bl	800b0a8 <HAL_GetTick>
 800dfec:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dfee:	e008      	b.n	800e002 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dff0:	f7fd f85a 	bl	800b0a8 <HAL_GetTick>
 800dff4:	4602      	mov	r2, r0
 800dff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	d901      	bls.n	800e002 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800dffe:	2303      	movs	r3, #3
 800e000:	e031      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0ef      	beq.n	800dff0 <HAL_RCC_OscConfig+0x664>
 800e010:	e028      	b.n	800e064 <HAL_RCC_OscConfig+0x6d8>
 800e012:	bf00      	nop
 800e014:	58000400 	.word	0x58000400
 800e018:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b0c      	cmp	r3, #12
 800e020:	d01e      	beq.n	800e060 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e022:	f7ff fc04 	bl	800d82e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e026:	f7fd f83f 	bl	800b0a8 <HAL_GetTick>
 800e02a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e02c:	e008      	b.n	800e040 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e02e:	f7fd f83b 	bl	800b0a8 <HAL_GetTick>
 800e032:	4602      	mov	r2, r0
 800e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	2b02      	cmp	r3, #2
 800e03a:	d901      	bls.n	800e040 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e012      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1ef      	bne.n	800e02e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800e04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e052:	68da      	ldr	r2, [r3, #12]
 800e054:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e058:	4b05      	ldr	r3, [pc, #20]	@ (800e070 <HAL_RCC_OscConfig+0x6e4>)
 800e05a:	4013      	ands	r3, r2
 800e05c:	60cb      	str	r3, [r1, #12]
 800e05e:	e001      	b.n	800e064 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	e000      	b.n	800e066 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3734      	adds	r7, #52	@ 0x34
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd90      	pop	{r4, r7, pc}
 800e06e:	bf00      	nop
 800e070:	eefefffc 	.word	0xeefefffc

0800e074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e084:	2301      	movs	r3, #1
 800e086:	e12d      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e088:	4b98      	ldr	r3, [pc, #608]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f003 0307 	and.w	r3, r3, #7
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d91b      	bls.n	800e0ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e096:	4b95      	ldr	r3, [pc, #596]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f023 0207 	bic.w	r2, r3, #7
 800e09e:	4993      	ldr	r1, [pc, #588]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0a6:	f7fc ffff 	bl	800b0a8 <HAL_GetTick>
 800e0aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0ac:	e008      	b.n	800e0c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e0ae:	f7fc fffb 	bl	800b0a8 <HAL_GetTick>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d901      	bls.n	800e0c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	e111      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0c0:	4b8a      	ldr	r3, [pc, #552]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0307 	and.w	r3, r3, #7
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d1ef      	bne.n	800e0ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f003 0302 	and.w	r3, r3, #2
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d016      	beq.n	800e108 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7ff fafb 	bl	800d6da <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e0e4:	f7fc ffe0 	bl	800b0a8 <HAL_GetTick>
 800e0e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e0ea:	e008      	b.n	800e0fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e0ec:	f7fc ffdc 	bl	800b0a8 <HAL_GetTick>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	2b02      	cmp	r3, #2
 800e0f8:	d901      	bls.n	800e0fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	e0f2      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e0fe:	f7ff fbe8 	bl	800d8d2 <LL_RCC_IsActiveFlag_HPRE>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0f1      	beq.n	800e0ec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f003 0320 	and.w	r3, r3, #32
 800e110:	2b00      	cmp	r3, #0
 800e112:	d016      	beq.n	800e142 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7ff faf2 	bl	800d702 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e11e:	f7fc ffc3 	bl	800b0a8 <HAL_GetTick>
 800e122:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e124:	e008      	b.n	800e138 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e126:	f7fc ffbf 	bl	800b0a8 <HAL_GetTick>
 800e12a:	4602      	mov	r2, r0
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	2b02      	cmp	r3, #2
 800e132:	d901      	bls.n	800e138 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800e134:	2303      	movs	r3, #3
 800e136:	e0d5      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e138:	f7ff fbdd 	bl	800d8f6 <LL_RCC_IsActiveFlag_C2HPRE>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0f1      	beq.n	800e126 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d016      	beq.n	800e17c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff faeb 	bl	800d72e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e158:	f7fc ffa6 	bl	800b0a8 <HAL_GetTick>
 800e15c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e15e:	e008      	b.n	800e172 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e160:	f7fc ffa2 	bl	800b0a8 <HAL_GetTick>
 800e164:	4602      	mov	r2, r0
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d901      	bls.n	800e172 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e0b8      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e172:	f7ff fbd3 	bl	800d91c <LL_RCC_IsActiveFlag_SHDHPRE>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d0f1      	beq.n	800e160 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f003 0304 	and.w	r3, r3, #4
 800e184:	2b00      	cmp	r3, #0
 800e186:	d016      	beq.n	800e1b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7ff fae5 	bl	800d75c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e192:	f7fc ff89 	bl	800b0a8 <HAL_GetTick>
 800e196:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e198:	e008      	b.n	800e1ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e19a:	f7fc ff85 	bl	800b0a8 <HAL_GetTick>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	1ad3      	subs	r3, r2, r3
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d901      	bls.n	800e1ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e09b      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e1ac:	f7ff fbc9 	bl	800d942 <LL_RCC_IsActiveFlag_PPRE1>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d0f1      	beq.n	800e19a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f003 0308 	and.w	r3, r3, #8
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d017      	beq.n	800e1f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7ff fadb 	bl	800d784 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e1ce:	f7fc ff6b 	bl	800b0a8 <HAL_GetTick>
 800e1d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e1d4:	e008      	b.n	800e1e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e1d6:	f7fc ff67 	bl	800b0a8 <HAL_GetTick>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d901      	bls.n	800e1e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	e07d      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e1e8:	f7ff fbbd 	bl	800d966 <LL_RCC_IsActiveFlag_PPRE2>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0f1      	beq.n	800e1d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f003 0301 	and.w	r3, r3, #1
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d043      	beq.n	800e286 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	2b02      	cmp	r3, #2
 800e204:	d106      	bne.n	800e214 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800e206:	f7ff f87b 	bl	800d300 <LL_RCC_HSE_IsReady>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d11e      	bne.n	800e24e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e067      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	2b03      	cmp	r3, #3
 800e21a:	d106      	bne.n	800e22a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800e21c:	f7ff fb16 	bl	800d84c <LL_RCC_PLL_IsReady>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d113      	bne.n	800e24e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	e05c      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800e232:	f7ff f9e3 	bl	800d5fc <LL_RCC_MSI_IsReady>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d108      	bne.n	800e24e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	e051      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800e240:	f7ff f88e 	bl	800d360 <LL_RCC_HSI_IsReady>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d101      	bne.n	800e24e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e04a      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	4618      	mov	r0, r3
 800e254:	f7ff fa21 	bl	800d69a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e258:	f7fc ff26 	bl	800b0a8 <HAL_GetTick>
 800e25c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e25e:	e00a      	b.n	800e276 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e260:	f7fc ff22 	bl	800b0a8 <HAL_GetTick>
 800e264:	4602      	mov	r2, r0
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e26e:	4293      	cmp	r3, r2
 800e270:	d901      	bls.n	800e276 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800e272:	2303      	movs	r3, #3
 800e274:	e036      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e276:	f7ff fa24 	bl	800d6c2 <LL_RCC_GetSysClkSource>
 800e27a:	4602      	mov	r2, r0
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	429a      	cmp	r2, r3
 800e284:	d1ec      	bne.n	800e260 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e286:	4b19      	ldr	r3, [pc, #100]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f003 0307 	and.w	r3, r3, #7
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	429a      	cmp	r2, r3
 800e292:	d21b      	bcs.n	800e2cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e294:	4b15      	ldr	r3, [pc, #84]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f023 0207 	bic.w	r2, r3, #7
 800e29c:	4913      	ldr	r1, [pc, #76]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2a4:	f7fc ff00 	bl	800b0a8 <HAL_GetTick>
 800e2a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2aa:	e008      	b.n	800e2be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e2ac:	f7fc fefc 	bl	800b0a8 <HAL_GetTick>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d901      	bls.n	800e2be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	e012      	b.n	800e2e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2be:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ec <HAL_RCC_ClockConfig+0x278>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f003 0307 	and.w	r3, r3, #7
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d1ef      	bne.n	800e2ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e2cc:	f000 f87e 	bl	800e3cc <HAL_RCC_GetHCLKFreq>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	4a07      	ldr	r2, [pc, #28]	@ (800e2f0 <HAL_RCC_ClockConfig+0x27c>)
 800e2d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800e2d6:	f7fc fef3 	bl	800b0c0 <HAL_GetTickPrio>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fc fe95 	bl	800b00c <HAL_InitTick>
 800e2e2:	4603      	mov	r3, r0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	58004000 	.word	0x58004000
 800e2f0:	20000008 	.word	0x20000008

0800e2f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e2fa:	f7ff f9e2 	bl	800d6c2 <LL_RCC_GetSysClkSource>
 800e2fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10a      	bne.n	800e31c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e306:	f7ff f99e 	bl	800d646 <LL_RCC_MSI_GetRange>
 800e30a:	4603      	mov	r3, r0
 800e30c:	091b      	lsrs	r3, r3, #4
 800e30e:	f003 030f 	and.w	r3, r3, #15
 800e312:	4a2b      	ldr	r2, [pc, #172]	@ (800e3c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e318:	60fb      	str	r3, [r7, #12]
 800e31a:	e04b      	b.n	800e3b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b04      	cmp	r3, #4
 800e320:	d102      	bne.n	800e328 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e322:	4b28      	ldr	r3, [pc, #160]	@ (800e3c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e324:	60fb      	str	r3, [r7, #12]
 800e326:	e045      	b.n	800e3b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b08      	cmp	r3, #8
 800e32c:	d10a      	bne.n	800e344 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e32e:	f7fe ffb7 	bl	800d2a0 <LL_RCC_HSE_IsEnabledDiv2>
 800e332:	4603      	mov	r3, r0
 800e334:	2b01      	cmp	r3, #1
 800e336:	d102      	bne.n	800e33e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800e338:	4b22      	ldr	r3, [pc, #136]	@ (800e3c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	e03a      	b.n	800e3b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800e33e:	4b22      	ldr	r3, [pc, #136]	@ (800e3c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e340:	60fb      	str	r3, [r7, #12]
 800e342:	e037      	b.n	800e3b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800e344:	f7ff fab9 	bl	800d8ba <LL_RCC_PLL_GetMainSource>
 800e348:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d003      	beq.n	800e358 <HAL_RCC_GetSysClockFreq+0x64>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2b03      	cmp	r3, #3
 800e354:	d003      	beq.n	800e35e <HAL_RCC_GetSysClockFreq+0x6a>
 800e356:	e00d      	b.n	800e374 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800e358:	4b1a      	ldr	r3, [pc, #104]	@ (800e3c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e35a:	60bb      	str	r3, [r7, #8]
        break;
 800e35c:	e015      	b.n	800e38a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e35e:	f7fe ff9f 	bl	800d2a0 <LL_RCC_HSE_IsEnabledDiv2>
 800e362:	4603      	mov	r3, r0
 800e364:	2b01      	cmp	r3, #1
 800e366:	d102      	bne.n	800e36e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800e368:	4b16      	ldr	r3, [pc, #88]	@ (800e3c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e36a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800e36c:	e00d      	b.n	800e38a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800e36e:	4b16      	ldr	r3, [pc, #88]	@ (800e3c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e370:	60bb      	str	r3, [r7, #8]
        break;
 800e372:	e00a      	b.n	800e38a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e374:	f7ff f967 	bl	800d646 <LL_RCC_MSI_GetRange>
 800e378:	4603      	mov	r3, r0
 800e37a:	091b      	lsrs	r3, r3, #4
 800e37c:	f003 030f 	and.w	r3, r3, #15
 800e380:	4a0f      	ldr	r2, [pc, #60]	@ (800e3c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e386:	60bb      	str	r3, [r7, #8]
        break;
 800e388:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800e38a:	f7ff fa71 	bl	800d870 <LL_RCC_PLL_GetN>
 800e38e:	4602      	mov	r2, r0
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	fb03 f402 	mul.w	r4, r3, r2
 800e396:	f7ff fa84 	bl	800d8a2 <LL_RCC_PLL_GetDivider>
 800e39a:	4603      	mov	r3, r0
 800e39c:	091b      	lsrs	r3, r3, #4
 800e39e:	3301      	adds	r3, #1
 800e3a0:	fbb4 f4f3 	udiv	r4, r4, r3
 800e3a4:	f7ff fa71 	bl	800d88a <LL_RCC_PLL_GetR>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	0f5b      	lsrs	r3, r3, #29
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	fbb4 f3f3 	udiv	r3, r4, r3
 800e3b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3714      	adds	r7, #20
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd90      	pop	{r4, r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	08019a94 	.word	0x08019a94
 800e3c4:	00f42400 	.word	0x00f42400
 800e3c8:	01e84800 	.word	0x01e84800

0800e3cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e3cc:	b598      	push	{r3, r4, r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e3d0:	f7ff ff90 	bl	800e2f4 <HAL_RCC_GetSysClockFreq>
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	f7ff f9e9 	bl	800d7ac <LL_RCC_GetAHBPrescaler>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	091b      	lsrs	r3, r3, #4
 800e3de:	f003 030f 	and.w	r3, r3, #15
 800e3e2:	4a03      	ldr	r2, [pc, #12]	@ (800e3f0 <HAL_RCC_GetHCLKFreq+0x24>)
 800e3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	bd98      	pop	{r3, r4, r7, pc}
 800e3f0:	08019a34 	.word	0x08019a34

0800e3f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3f4:	b598      	push	{r3, r4, r7, lr}
 800e3f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e3f8:	f7ff ffe8 	bl	800e3cc <HAL_RCC_GetHCLKFreq>
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	f7ff f9ef 	bl	800d7e0 <LL_RCC_GetAPB1Prescaler>
 800e402:	4603      	mov	r3, r0
 800e404:	0a1b      	lsrs	r3, r3, #8
 800e406:	f003 0307 	and.w	r3, r3, #7
 800e40a:	4a04      	ldr	r2, [pc, #16]	@ (800e41c <HAL_RCC_GetPCLK1Freq+0x28>)
 800e40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e410:	f003 031f 	and.w	r3, r3, #31
 800e414:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e418:	4618      	mov	r0, r3
 800e41a:	bd98      	pop	{r3, r4, r7, pc}
 800e41c:	08019a74 	.word	0x08019a74

0800e420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e420:	b598      	push	{r3, r4, r7, lr}
 800e422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800e424:	f7ff ffd2 	bl	800e3cc <HAL_RCC_GetHCLKFreq>
 800e428:	4604      	mov	r4, r0
 800e42a:	f7ff f9e5 	bl	800d7f8 <LL_RCC_GetAPB2Prescaler>
 800e42e:	4603      	mov	r3, r0
 800e430:	0adb      	lsrs	r3, r3, #11
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	4a04      	ldr	r2, [pc, #16]	@ (800e448 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e43c:	f003 031f 	and.w	r3, r3, #31
 800e440:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e444:	4618      	mov	r0, r3
 800e446:	bd98      	pop	{r3, r4, r7, pc}
 800e448:	08019a74 	.word	0x08019a74

0800e44c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800e44c:	b590      	push	{r4, r7, lr}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2bb0      	cmp	r3, #176	@ 0xb0
 800e458:	d903      	bls.n	800e462 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800e45a:	4b15      	ldr	r3, [pc, #84]	@ (800e4b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e45e:	60fb      	str	r3, [r7, #12]
 800e460:	e007      	b.n	800e472 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	091b      	lsrs	r3, r3, #4
 800e466:	f003 030f 	and.w	r3, r3, #15
 800e46a:	4a11      	ldr	r2, [pc, #68]	@ (800e4b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e470:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800e472:	f7ff f9a7 	bl	800d7c4 <LL_RCC_GetAHB4Prescaler>
 800e476:	4603      	mov	r3, r0
 800e478:	091b      	lsrs	r3, r3, #4
 800e47a:	f003 030f 	and.w	r3, r3, #15
 800e47e:	4a0d      	ldr	r2, [pc, #52]	@ (800e4b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800e480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	fbb2 f3f3 	udiv	r3, r2, r3
 800e48a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	4a0a      	ldr	r2, [pc, #40]	@ (800e4b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800e490:	fba2 2303 	umull	r2, r3, r2, r3
 800e494:	0c9c      	lsrs	r4, r3, #18
 800e496:	f7fe fef5 	bl	800d284 <HAL_PWREx_GetVoltageRange>
 800e49a:	4603      	mov	r3, r0
 800e49c:	4619      	mov	r1, r3
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f000 f80c 	bl	800e4bc <RCC_SetFlashLatency>
 800e4a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	08019a94 	.word	0x08019a94
 800e4b4:	08019a34 	.word	0x08019a34
 800e4b8:	431bde83 	.word	0x431bde83

0800e4bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800e4bc:	b590      	push	{r4, r7, lr}
 800e4be:	b093      	sub	sp, #76	@ 0x4c
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800e4c6:	4b37      	ldr	r3, [pc, #220]	@ (800e5a4 <RCC_SetFlashLatency+0xe8>)
 800e4c8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800e4cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800e4d2:	4a35      	ldr	r2, [pc, #212]	@ (800e5a8 <RCC_SetFlashLatency+0xec>)
 800e4d4:	f107 031c 	add.w	r3, r7, #28
 800e4d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800e4da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800e4de:	4b33      	ldr	r3, [pc, #204]	@ (800e5ac <RCC_SetFlashLatency+0xf0>)
 800e4e0:	f107 040c 	add.w	r4, r7, #12
 800e4e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4f4:	d11a      	bne.n	800e52c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4fa:	e013      	b.n	800e524 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800e4fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	3348      	adds	r3, #72	@ 0x48
 800e502:	443b      	add	r3, r7
 800e504:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d807      	bhi.n	800e51e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	3348      	adds	r3, #72	@ 0x48
 800e514:	443b      	add	r3, r7
 800e516:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e51a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800e51c:	e020      	b.n	800e560 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e51e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e520:	3301      	adds	r3, #1
 800e522:	643b      	str	r3, [r7, #64]	@ 0x40
 800e524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e526:	2b03      	cmp	r3, #3
 800e528:	d9e8      	bls.n	800e4fc <RCC_SetFlashLatency+0x40>
 800e52a:	e019      	b.n	800e560 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e52c:	2300      	movs	r3, #0
 800e52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e530:	e013      	b.n	800e55a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800e532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	3348      	adds	r3, #72	@ 0x48
 800e538:	443b      	add	r3, r7
 800e53a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	429a      	cmp	r2, r3
 800e542:	d807      	bhi.n	800e554 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	3348      	adds	r3, #72	@ 0x48
 800e54a:	443b      	add	r3, r7
 800e54c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e550:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800e552:	e005      	b.n	800e560 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e556:	3301      	adds	r3, #1
 800e558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d9e8      	bls.n	800e532 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800e560:	4b13      	ldr	r3, [pc, #76]	@ (800e5b0 <RCC_SetFlashLatency+0xf4>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f023 0207 	bic.w	r2, r3, #7
 800e568:	4911      	ldr	r1, [pc, #68]	@ (800e5b0 <RCC_SetFlashLatency+0xf4>)
 800e56a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e56c:	4313      	orrs	r3, r2
 800e56e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e570:	f7fc fd9a 	bl	800b0a8 <HAL_GetTick>
 800e574:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e576:	e008      	b.n	800e58a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e578:	f7fc fd96 	bl	800b0a8 <HAL_GetTick>
 800e57c:	4602      	mov	r2, r0
 800e57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	2b02      	cmp	r3, #2
 800e584:	d901      	bls.n	800e58a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800e586:	2303      	movs	r3, #3
 800e588:	e007      	b.n	800e59a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e58a:	4b09      	ldr	r3, [pc, #36]	@ (800e5b0 <RCC_SetFlashLatency+0xf4>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0307 	and.w	r3, r3, #7
 800e592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e594:	429a      	cmp	r2, r3
 800e596:	d1ef      	bne.n	800e578 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	374c      	adds	r7, #76	@ 0x4c
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd90      	pop	{r4, r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	08018e80 	.word	0x08018e80
 800e5a8:	08018e90 	.word	0x08018e90
 800e5ac:	08018e9c 	.word	0x08018e9c
 800e5b0:	58004000 	.word	0x58004000

0800e5b4 <LL_RCC_LSE_IsEnabled>:
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800e5b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5c0:	f003 0301 	and.w	r3, r3, #1
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d101      	bne.n	800e5cc <LL_RCC_LSE_IsEnabled+0x18>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e000      	b.n	800e5ce <LL_RCC_LSE_IsEnabled+0x1a>
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <LL_RCC_LSE_IsReady>:
{
 800e5d8:	b480      	push	{r7}
 800e5da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e5dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5e4:	f003 0302 	and.w	r3, r3, #2
 800e5e8:	2b02      	cmp	r3, #2
 800e5ea:	d101      	bne.n	800e5f0 <LL_RCC_LSE_IsReady+0x18>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <LL_RCC_LSE_IsReady+0x1a>
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <LL_RCC_SetRFWKPClockSource>:
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800e604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e60c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4313      	orrs	r3, r2
 800e618:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <LL_RCC_SetSMPSClockSource>:
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800e630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e636:	f023 0203 	bic.w	r2, r3, #3
 800e63a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4313      	orrs	r3, r2
 800e642:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <LL_RCC_SetSMPSPrescaler>:
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800e658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e65e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e662:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4313      	orrs	r3, r2
 800e66a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e66c:	bf00      	nop
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <LL_RCC_SetUSARTClockSource>:
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800e680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e688:	f023 0203 	bic.w	r2, r3, #3
 800e68c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4313      	orrs	r3, r2
 800e694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e698:	bf00      	nop
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <LL_RCC_SetLPUARTClockSource>:
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800e6ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e6b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <LL_RCC_SetI2CClockSource>:
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800e6d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	091b      	lsrs	r3, r3, #4
 800e6e4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e6e8:	43db      	mvns	r3, r3
 800e6ea:	401a      	ands	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	011b      	lsls	r3, r3, #4
 800e6f0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e6f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e6fe:	bf00      	nop
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr

0800e70a <LL_RCC_SetLPTIMClockSource>:
{
 800e70a:	b480      	push	{r7}
 800e70c:	b083      	sub	sp, #12
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800e712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e716:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	0c1b      	lsrs	r3, r3, #16
 800e71e:	041b      	lsls	r3, r3, #16
 800e720:	43db      	mvns	r3, r3
 800e722:	401a      	ands	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	041b      	lsls	r3, r3, #16
 800e728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e72c:	4313      	orrs	r3, r2
 800e72e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e732:	bf00      	nop
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <LL_RCC_SetSAIClockSource>:
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800e746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e74e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4313      	orrs	r3, r2
 800e75a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e75e:	bf00      	nop
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <LL_RCC_SetRNGClockSource>:
{
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800e772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e77a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e77e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4313      	orrs	r3, r2
 800e786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e78a:	bf00      	nop
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <LL_RCC_SetCLK48ClockSource>:
{
 800e796:	b480      	push	{r7}
 800e798:	b083      	sub	sp, #12
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800e79e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e7aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <LL_RCC_SetUSBClockSource>:
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff ffe3 	bl	800e796 <LL_RCC_SetCLK48ClockSource>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <LL_RCC_SetADCClockSource>:
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800e7e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e7ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <LL_RCC_SetRTCClockSource>:
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800e80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e814:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4313      	orrs	r3, r2
 800e820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <LL_RCC_GetRTCClockSource>:
{
 800e830:	b480      	push	{r7}
 800e832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e83c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800e840:	4618      	mov	r0, r3
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr

0800e84a <LL_RCC_ForceBackupDomainReset>:
{
 800e84a:	b480      	push	{r7}
 800e84c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e84e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e856:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e85a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e85e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e862:	bf00      	nop
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <LL_RCC_ReleaseBackupDomainReset>:
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e87c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <LL_RCC_PLLSAI1_Enable>:
{
 800e88e:	b480      	push	{r7}
 800e890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e89c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e8a0:	6013      	str	r3, [r2, #0]
}
 800e8a2:	bf00      	nop
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <LL_RCC_PLLSAI1_Disable>:
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e8b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e8ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e8be:	6013      	str	r3, [r2, #0]
}
 800e8c0:	bf00      	nop
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <LL_RCC_PLLSAI1_IsReady>:
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e8ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e8d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e8dc:	d101      	bne.n	800e8e2 <LL_RCC_PLLSAI1_IsReady+0x18>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e000      	b.n	800e8e4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr

0800e8ee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b088      	sub	sp, #32
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e906:	2b00      	cmp	r3, #0
 800e908:	d034      	beq.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e90e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e912:	d021      	beq.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e914:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e918:	d81b      	bhi.n	800e952 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e91a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e91e:	d01d      	beq.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e924:	d815      	bhi.n	800e952 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00b      	beq.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e92a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e92e:	d110      	bne.n	800e952 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e93a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e93e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e940:	e00d      	b.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	3304      	adds	r3, #4
 800e946:	4618      	mov	r0, r3
 800e948:	f000 f947 	bl	800ebda <RCCEx_PLLSAI1_ConfigNP>
 800e94c:	4603      	mov	r3, r0
 800e94e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e950:	e005      	b.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	77fb      	strb	r3, [r7, #31]
        break;
 800e956:	e002      	b.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e958:	bf00      	nop
 800e95a:	e000      	b.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e95c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e95e:	7ffb      	ldrb	r3, [r7, #31]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d105      	bne.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e968:	4618      	mov	r0, r3
 800e96a:	f7ff fee8 	bl	800e73e <LL_RCC_SetSAIClockSource>
 800e96e:	e001      	b.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e970:	7ffb      	ldrb	r3, [r7, #31]
 800e972:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d046      	beq.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e980:	f7ff ff56 	bl	800e830 <LL_RCC_GetRTCClockSource>
 800e984:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e98a:	69ba      	ldr	r2, [r7, #24]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d03c      	beq.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e990:	f7fe fc68 	bl	800d264 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d105      	bne.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff ff30 	bl	800e804 <LL_RCC_SetRTCClockSource>
 800e9a4:	e02e      	b.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e9a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e9b0:	f7ff ff4b 	bl	800e84a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e9b4:	f7ff ff5a 	bl	800e86c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e9c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e9d0:	f7ff fdf0 	bl	800e5b4 <LL_RCC_LSE_IsEnabled>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d114      	bne.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e9da:	f7fc fb65 	bl	800b0a8 <HAL_GetTick>
 800e9de:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e9e0:	e00b      	b.n	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e9e2:	f7fc fb61 	bl	800b0a8 <HAL_GetTick>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	1ad3      	subs	r3, r2, r3
 800e9ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d902      	bls.n	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	77fb      	strb	r3, [r7, #31]
              break;
 800e9f8:	e004      	b.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e9fa:	f7ff fded 	bl	800e5d8 <LL_RCC_LSE_IsReady>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d1ee      	bne.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ea04:	7ffb      	ldrb	r3, [r7, #31]
 800ea06:	77bb      	strb	r3, [r7, #30]
 800ea08:	e001      	b.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea0a:	7ffb      	ldrb	r3, [r7, #31]
 800ea0c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d004      	beq.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	699b      	ldr	r3, [r3, #24]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fe2a 	bl	800e678 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f003 0302 	and.w	r3, r3, #2
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d004      	beq.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	69db      	ldr	r3, [r3, #28]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff fe35 	bl	800e6a4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 0310 	and.w	r3, r3, #16
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d004      	beq.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fe5d 	bl	800e70a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f003 0320 	and.w	r3, r3, #32
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d004      	beq.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff fe52 	bl	800e70a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f003 0304 	and.w	r3, r3, #4
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d004      	beq.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff fe2a 	bl	800e6d0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 0308 	and.w	r3, r3, #8
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7ff fe1f 	bl	800e6d0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d022      	beq.n	800eae4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7ff fe8d 	bl	800e7c2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eab0:	d107      	bne.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800eab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eabc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eac0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eac6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eaca:	d10b      	bne.n	800eae4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	3304      	adds	r3, #4
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 f8dd 	bl	800ec90 <RCCEx_PLLSAI1_ConfigNQ>
 800ead6:	4603      	mov	r3, r0
 800ead8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800eada:	7ffb      	ldrb	r3, [r7, #31]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d001      	beq.n	800eae4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800eae0:	7ffb      	ldrb	r3, [r7, #31]
 800eae2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d02b      	beq.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaf8:	d008      	beq.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eafe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eb02:	d003      	beq.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d105      	bne.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff fe2a 	bl	800e76a <LL_RCC_SetRNGClockSource>
 800eb16:	e00a      	b.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x240>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb20:	60fb      	str	r3, [r7, #12]
 800eb22:	2000      	movs	r0, #0
 800eb24:	f7ff fe21 	bl	800e76a <LL_RCC_SetRNGClockSource>
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f7ff fe34 	bl	800e796 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb32:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800eb36:	d107      	bne.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800eb38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eb42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eb46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d022      	beq.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff fe3d 	bl	800e7d8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb66:	d107      	bne.n	800eb78 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800eb68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eb72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb76:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb80:	d10b      	bne.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	3304      	adds	r3, #4
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 f8dd 	bl	800ed46 <RCCEx_PLLSAI1_ConfigNR>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800eb90:	7ffb      	ldrb	r3, [r7, #31]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800eb96:	7ffb      	ldrb	r3, [r7, #31]
 800eb98:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d004      	beq.n	800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff fd26 	bl	800e5fc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d009      	beq.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff fd45 	bl	800e650 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff fd2c 	bl	800e628 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ebd0:	7fbb      	ldrb	r3, [r7, #30]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3720      	adds	r7, #32
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ebe6:	f7ff fe61 	bl	800e8ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ebea:	f7fc fa5d 	bl	800b0a8 <HAL_GetTick>
 800ebee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ebf0:	e009      	b.n	800ec06 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ebf2:	f7fc fa59 	bl	800b0a8 <HAL_GetTick>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d902      	bls.n	800ec06 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ec00:	2303      	movs	r3, #3
 800ec02:	73fb      	strb	r3, [r7, #15]
      break;
 800ec04:	e004      	b.n	800ec10 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ec06:	f7ff fe60 	bl	800e8ca <LL_RCC_PLLSAI1_IsReady>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1f0      	bne.n	800ebf2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ec10:	7bfb      	ldrb	r3, [r7, #15]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d137      	bne.n	800ec86 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ec16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	021b      	lsls	r3, r3, #8
 800ec26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ec2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec40:	4313      	orrs	r3, r2
 800ec42:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ec44:	f7ff fe23 	bl	800e88e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec48:	f7fc fa2e 	bl	800b0a8 <HAL_GetTick>
 800ec4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ec4e:	e009      	b.n	800ec64 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ec50:	f7fc fa2a 	bl	800b0a8 <HAL_GetTick>
 800ec54:	4602      	mov	r2, r0
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d902      	bls.n	800ec64 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	73fb      	strb	r3, [r7, #15]
        break;
 800ec62:	e004      	b.n	800ec6e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ec64:	f7ff fe31 	bl	800e8ca <LL_RCC_PLLSAI1_IsReady>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d1f0      	bne.n	800ec50 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d108      	bne.n	800ec86 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ec74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec78:	691a      	ldr	r2, [r3, #16]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec82:	4313      	orrs	r3, r2
 800ec84:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ec86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ec9c:	f7ff fe06 	bl	800e8ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eca0:	f7fc fa02 	bl	800b0a8 <HAL_GetTick>
 800eca4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800eca6:	e009      	b.n	800ecbc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eca8:	f7fc f9fe 	bl	800b0a8 <HAL_GetTick>
 800ecac:	4602      	mov	r2, r0
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d902      	bls.n	800ecbc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	73fb      	strb	r3, [r7, #15]
      break;
 800ecba:	e004      	b.n	800ecc6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ecbc:	f7ff fe05 	bl	800e8ca <LL_RCC_PLLSAI1_IsReady>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1f0      	bne.n	800eca8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d137      	bne.n	800ed3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800eccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	021b      	lsls	r3, r3, #8
 800ecdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ece0:	4313      	orrs	r3, r2
 800ece2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ece4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ecfa:	f7ff fdc8 	bl	800e88e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ecfe:	f7fc f9d3 	bl	800b0a8 <HAL_GetTick>
 800ed02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ed04:	e009      	b.n	800ed1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ed06:	f7fc f9cf 	bl	800b0a8 <HAL_GetTick>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d902      	bls.n	800ed1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	73fb      	strb	r3, [r7, #15]
        break;
 800ed18:	e004      	b.n	800ed24 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ed1a:	f7ff fdd6 	bl	800e8ca <LL_RCC_PLLSAI1_IsReady>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d1f0      	bne.n	800ed06 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d108      	bne.n	800ed3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ed2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed2e:	691a      	ldr	r2, [r3, #16]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b084      	sub	sp, #16
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ed52:	f7ff fdab 	bl	800e8ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ed56:	f7fc f9a7 	bl	800b0a8 <HAL_GetTick>
 800ed5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ed5c:	e009      	b.n	800ed72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ed5e:	f7fc f9a3 	bl	800b0a8 <HAL_GetTick>
 800ed62:	4602      	mov	r2, r0
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d902      	bls.n	800ed72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed70:	e004      	b.n	800ed7c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ed72:	f7ff fdaa 	bl	800e8ca <LL_RCC_PLLSAI1_IsReady>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1f0      	bne.n	800ed5e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d137      	bne.n	800edf2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ed82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	021b      	lsls	r3, r3, #8
 800ed92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed96:	4313      	orrs	r3, r2
 800ed98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ed9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800edac:	4313      	orrs	r3, r2
 800edae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800edb0:	f7ff fd6d 	bl	800e88e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800edb4:	f7fc f978 	bl	800b0a8 <HAL_GetTick>
 800edb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800edba:	e009      	b.n	800edd0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800edbc:	f7fc f974 	bl	800b0a8 <HAL_GetTick>
 800edc0:	4602      	mov	r2, r0
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	d902      	bls.n	800edd0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800edca:	2303      	movs	r3, #3
 800edcc:	73fb      	strb	r3, [r7, #15]
        break;
 800edce:	e004      	b.n	800edda <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800edd0:	f7ff fd7b 	bl	800e8ca <LL_RCC_PLLSAI1_IsReady>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d1f0      	bne.n	800edbc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800edda:	7bfb      	ldrb	r3, [r7, #15]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d108      	bne.n	800edf2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ede0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ede4:	691a      	ldr	r2, [r3, #16]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800edee:	4313      	orrs	r3, r2
 800edf0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800edf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d101      	bne.n	800ee0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e09f      	b.n	800ef4e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7fa ffcc 	bl	8009dc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2202      	movs	r2, #2
 800ee2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ee30:	4b49      	ldr	r3, [pc, #292]	@ (800ef58 <HAL_RTC_Init+0x15c>)
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	f003 0310 	and.w	r3, r3, #16
 800ee38:	2b10      	cmp	r3, #16
 800ee3a:	d07e      	beq.n	800ef3a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	22ca      	movs	r2, #202	@ 0xca
 800ee42:	625a      	str	r2, [r3, #36]	@ 0x24
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2253      	movs	r2, #83	@ 0x53
 800ee4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f8ab 	bl	800efa8 <RTC_EnterInitMode>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00a      	beq.n	800ee6e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	22ff      	movs	r2, #255	@ 0xff
 800ee5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2204      	movs	r2, #4
 800ee64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	73fb      	strb	r3, [r7, #15]
 800ee6c:	e067      	b.n	800ef3e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	6812      	ldr	r2, [r2, #0]
 800ee78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee80:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6899      	ldr	r1, [r3, #8]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	431a      	orrs	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	699b      	ldr	r3, [r3, #24]
 800ee96:	431a      	orrs	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	68d2      	ldr	r2, [r2, #12]
 800eea8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	6919      	ldr	r1, [r3, #16]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	041a      	lsls	r2, r3, #16
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	430a      	orrs	r2, r1
 800eebc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eecc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0203 	bic.w	r2, r2, #3
 800eedc:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	69da      	ldr	r2, [r3, #28]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	695b      	ldr	r3, [r3, #20]
 800eeec:	431a      	orrs	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	430a      	orrs	r2, r1
 800eef4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	f003 0320 	and.w	r3, r3, #32
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d113      	bne.n	800ef2c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f829 	bl	800ef5c <HAL_RTC_WaitForSynchro>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00d      	beq.n	800ef2c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	22ff      	movs	r2, #255	@ 0xff
 800ef16:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2204      	movs	r2, #4
 800ef1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e010      	b.n	800ef4e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	22ff      	movs	r2, #255	@ 0xff
 800ef32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73fb      	strb	r3, [r7, #15]
 800ef38:	e001      	b.n	800ef3e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d103      	bne.n	800ef4c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800ef4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	40002800 	.word	0x40002800

0800ef5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68da      	ldr	r2, [r3, #12]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ef72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ef74:	f7fc f898 	bl	800b0a8 <HAL_GetTick>
 800ef78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ef7a:	e009      	b.n	800ef90 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ef7c:	f7fc f894 	bl	800b0a8 <HAL_GetTick>
 800ef80:	4602      	mov	r2, r0
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef8a:	d901      	bls.n	800ef90 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ef8c:	2303      	movs	r3, #3
 800ef8e:	e007      	b.n	800efa0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	f003 0320 	and.w	r3, r3, #32
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d0ee      	beq.n	800ef7c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d119      	bne.n	800eff2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f04f 32ff 	mov.w	r2, #4294967295
 800efc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800efc8:	f7fc f86e 	bl	800b0a8 <HAL_GetTick>
 800efcc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800efce:	e009      	b.n	800efe4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800efd0:	f7fc f86a 	bl	800b0a8 <HAL_GetTick>
 800efd4:	4602      	mov	r2, r0
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800efde:	d901      	bls.n	800efe4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800efe0:	2303      	movs	r3, #3
 800efe2:	e007      	b.n	800eff4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0ee      	beq.n	800efd0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b086      	sub	sp, #24
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d101      	bne.n	800f016 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800f012:	2302      	movs	r3, #2
 800f014:	e089      	b.n	800f12a <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2202      	movs	r2, #2
 800f022:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	22ca      	movs	r2, #202	@ 0xca
 800f02c:	625a      	str	r2, [r3, #36]	@ 0x24
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2253      	movs	r2, #83	@ 0x53
 800f034:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f040:	2b00      	cmp	r3, #0
 800f042:	d020      	beq.n	800f086 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800f044:	f7fc f830 	bl	800b0a8 <HAL_GetTick>
 800f048:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f04a:	e015      	b.n	800f078 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f04c:	f7fc f82c 	bl	800b0a8 <HAL_GetTick>
 800f050:	4602      	mov	r2, r0
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f05a:	d90d      	bls.n	800f078 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	22ff      	movs	r2, #255	@ 0xff
 800f062:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2203      	movs	r2, #3
 800f068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800f074:	2303      	movs	r3, #3
 800f076:	e058      	b.n	800f12a <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	f003 0304 	and.w	r3, r3, #4
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e2      	bne.n	800f04c <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	689a      	ldr	r2, [r3, #8]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f094:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800f096:	f7fc f807 	bl	800b0a8 <HAL_GetTick>
 800f09a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f09c:	e015      	b.n	800f0ca <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f09e:	f7fc f803 	bl	800b0a8 <HAL_GetTick>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f0ac:	d90d      	bls.n	800f0ca <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	22ff      	movs	r2, #255	@ 0xff
 800f0b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2203      	movs	r2, #3
 800f0ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800f0c6:	2303      	movs	r3, #3
 800f0c8:	e02f      	b.n	800f12a <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	f003 0304 	and.w	r3, r3, #4
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0e2      	beq.n	800f09e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	689a      	ldr	r2, [r3, #8]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f022 0207 	bic.w	r2, r2, #7
 800f0e6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	6899      	ldr	r1, [r3, #8]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689a      	ldr	r2, [r3, #8]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f10e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	22ff      	movs	r2, #255	@ 0xff
 800f116:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800f128:	2300      	movs	r3, #0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3718      	adds	r7, #24
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b082      	sub	sp, #8
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d101      	bne.n	800f144 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	e049      	b.n	800f1d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d106      	bne.n	800f15e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7fa fe5f 	bl	8009e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2202      	movs	r2, #2
 800f162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3304      	adds	r3, #4
 800f16e:	4619      	mov	r1, r3
 800f170:	4610      	mov	r0, r2
 800f172:	f000 fdc3 	bl	800fcfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2201      	movs	r2, #1
 800f182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2201      	movs	r2, #1
 800f192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d001      	beq.n	800f1f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e02e      	b.n	800f256 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a17      	ldr	r2, [pc, #92]	@ (800f264 <HAL_TIM_Base_Start+0x84>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d004      	beq.n	800f214 <HAL_TIM_Base_Start+0x34>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f212:	d115      	bne.n	800f240 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689a      	ldr	r2, [r3, #8]
 800f21a:	4b13      	ldr	r3, [pc, #76]	@ (800f268 <HAL_TIM_Base_Start+0x88>)
 800f21c:	4013      	ands	r3, r2
 800f21e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2b06      	cmp	r3, #6
 800f224:	d015      	beq.n	800f252 <HAL_TIM_Base_Start+0x72>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f22c:	d011      	beq.n	800f252 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f042 0201 	orr.w	r2, r2, #1
 800f23c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f23e:	e008      	b.n	800f252 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f042 0201 	orr.w	r2, r2, #1
 800f24e:	601a      	str	r2, [r3, #0]
 800f250:	e000      	b.n	800f254 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f252:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	40012c00 	.word	0x40012c00
 800f268:	00010007 	.word	0x00010007

0800f26c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6a1a      	ldr	r2, [r3, #32]
 800f27a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f27e:	4013      	ands	r3, r2
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10f      	bne.n	800f2a4 <HAL_TIM_Base_Stop+0x38>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6a1a      	ldr	r2, [r3, #32]
 800f28a:	f240 4344 	movw	r3, #1092	@ 0x444
 800f28e:	4013      	ands	r3, r2
 800f290:	2b00      	cmp	r3, #0
 800f292:	d107      	bne.n	800f2a4 <HAL_TIM_Base_Stop+0x38>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f022 0201 	bic.w	r2, r2, #1
 800f2a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr
	...

0800f2bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d001      	beq.n	800f2d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e036      	b.n	800f342 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2202      	movs	r2, #2
 800f2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	68da      	ldr	r2, [r3, #12]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f042 0201 	orr.w	r2, r2, #1
 800f2ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a17      	ldr	r2, [pc, #92]	@ (800f350 <HAL_TIM_Base_Start_IT+0x94>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d004      	beq.n	800f300 <HAL_TIM_Base_Start_IT+0x44>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2fe:	d115      	bne.n	800f32c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	689a      	ldr	r2, [r3, #8]
 800f306:	4b13      	ldr	r3, [pc, #76]	@ (800f354 <HAL_TIM_Base_Start_IT+0x98>)
 800f308:	4013      	ands	r3, r2
 800f30a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2b06      	cmp	r3, #6
 800f310:	d015      	beq.n	800f33e <HAL_TIM_Base_Start_IT+0x82>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f318:	d011      	beq.n	800f33e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f042 0201 	orr.w	r2, r2, #1
 800f328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f32a:	e008      	b.n	800f33e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f042 0201 	orr.w	r2, r2, #1
 800f33a:	601a      	str	r2, [r3, #0]
 800f33c:	e000      	b.n	800f340 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f33e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	40012c00 	.word	0x40012c00
 800f354:	00010007 	.word	0x00010007

0800f358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d101      	bne.n	800f36a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	e049      	b.n	800f3fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7fa fd7c 	bl	8009e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2202      	movs	r2, #2
 800f388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	3304      	adds	r3, #4
 800f394:	4619      	mov	r1, r3
 800f396:	4610      	mov	r0, r2
 800f398:	f000 fcb0 	bl	800fcfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d109      	bne.n	800f42c <HAL_TIM_PWM_Start+0x24>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b01      	cmp	r3, #1
 800f422:	bf14      	ite	ne
 800f424:	2301      	movne	r3, #1
 800f426:	2300      	moveq	r3, #0
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	e03c      	b.n	800f4a6 <HAL_TIM_PWM_Start+0x9e>
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b04      	cmp	r3, #4
 800f430:	d109      	bne.n	800f446 <HAL_TIM_PWM_Start+0x3e>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	bf14      	ite	ne
 800f43e:	2301      	movne	r3, #1
 800f440:	2300      	moveq	r3, #0
 800f442:	b2db      	uxtb	r3, r3
 800f444:	e02f      	b.n	800f4a6 <HAL_TIM_PWM_Start+0x9e>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	2b08      	cmp	r3, #8
 800f44a:	d109      	bne.n	800f460 <HAL_TIM_PWM_Start+0x58>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b01      	cmp	r3, #1
 800f456:	bf14      	ite	ne
 800f458:	2301      	movne	r3, #1
 800f45a:	2300      	moveq	r3, #0
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	e022      	b.n	800f4a6 <HAL_TIM_PWM_Start+0x9e>
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	2b0c      	cmp	r3, #12
 800f464:	d109      	bne.n	800f47a <HAL_TIM_PWM_Start+0x72>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	2b01      	cmp	r3, #1
 800f470:	bf14      	ite	ne
 800f472:	2301      	movne	r3, #1
 800f474:	2300      	moveq	r3, #0
 800f476:	b2db      	uxtb	r3, r3
 800f478:	e015      	b.n	800f4a6 <HAL_TIM_PWM_Start+0x9e>
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	2b10      	cmp	r3, #16
 800f47e:	d109      	bne.n	800f494 <HAL_TIM_PWM_Start+0x8c>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b01      	cmp	r3, #1
 800f48a:	bf14      	ite	ne
 800f48c:	2301      	movne	r3, #1
 800f48e:	2300      	moveq	r3, #0
 800f490:	b2db      	uxtb	r3, r3
 800f492:	e008      	b.n	800f4a6 <HAL_TIM_PWM_Start+0x9e>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	bf14      	ite	ne
 800f4a0:	2301      	movne	r3, #1
 800f4a2:	2300      	moveq	r3, #0
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e079      	b.n	800f5a2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d104      	bne.n	800f4be <HAL_TIM_PWM_Start+0xb6>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f4bc:	e023      	b.n	800f506 <HAL_TIM_PWM_Start+0xfe>
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2b04      	cmp	r3, #4
 800f4c2:	d104      	bne.n	800f4ce <HAL_TIM_PWM_Start+0xc6>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f4cc:	e01b      	b.n	800f506 <HAL_TIM_PWM_Start+0xfe>
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	2b08      	cmp	r3, #8
 800f4d2:	d104      	bne.n	800f4de <HAL_TIM_PWM_Start+0xd6>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2202      	movs	r2, #2
 800f4d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f4dc:	e013      	b.n	800f506 <HAL_TIM_PWM_Start+0xfe>
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	2b0c      	cmp	r3, #12
 800f4e2:	d104      	bne.n	800f4ee <HAL_TIM_PWM_Start+0xe6>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f4ec:	e00b      	b.n	800f506 <HAL_TIM_PWM_Start+0xfe>
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	2b10      	cmp	r3, #16
 800f4f2:	d104      	bne.n	800f4fe <HAL_TIM_PWM_Start+0xf6>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2202      	movs	r2, #2
 800f4f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f4fc:	e003      	b.n	800f506 <HAL_TIM_PWM_Start+0xfe>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2202      	movs	r2, #2
 800f502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2201      	movs	r2, #1
 800f50c:	6839      	ldr	r1, [r7, #0]
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 ff7e 	bl	8010410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	4a24      	ldr	r2, [pc, #144]	@ (800f5ac <HAL_TIM_PWM_Start+0x1a4>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d009      	beq.n	800f532 <HAL_TIM_PWM_Start+0x12a>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4a23      	ldr	r2, [pc, #140]	@ (800f5b0 <HAL_TIM_PWM_Start+0x1a8>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d004      	beq.n	800f532 <HAL_TIM_PWM_Start+0x12a>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4a21      	ldr	r2, [pc, #132]	@ (800f5b4 <HAL_TIM_PWM_Start+0x1ac>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d101      	bne.n	800f536 <HAL_TIM_PWM_Start+0x12e>
 800f532:	2301      	movs	r3, #1
 800f534:	e000      	b.n	800f538 <HAL_TIM_PWM_Start+0x130>
 800f536:	2300      	movs	r3, #0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d007      	beq.n	800f54c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f54a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a16      	ldr	r2, [pc, #88]	@ (800f5ac <HAL_TIM_PWM_Start+0x1a4>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d004      	beq.n	800f560 <HAL_TIM_PWM_Start+0x158>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f55e:	d115      	bne.n	800f58c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	689a      	ldr	r2, [r3, #8]
 800f566:	4b14      	ldr	r3, [pc, #80]	@ (800f5b8 <HAL_TIM_PWM_Start+0x1b0>)
 800f568:	4013      	ands	r3, r2
 800f56a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2b06      	cmp	r3, #6
 800f570:	d015      	beq.n	800f59e <HAL_TIM_PWM_Start+0x196>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f578:	d011      	beq.n	800f59e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f042 0201 	orr.w	r2, r2, #1
 800f588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f58a:	e008      	b.n	800f59e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f042 0201 	orr.w	r2, r2, #1
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	e000      	b.n	800f5a0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f59e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	40012c00 	.word	0x40012c00
 800f5b0:	40014400 	.word	0x40014400
 800f5b4:	40014800 	.word	0x40014800
 800f5b8:	00010007 	.word	0x00010007

0800f5bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 ff1e 	bl	8010410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4a39      	ldr	r2, [pc, #228]	@ (800f6c0 <HAL_TIM_PWM_Stop+0x104>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d009      	beq.n	800f5f2 <HAL_TIM_PWM_Stop+0x36>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a38      	ldr	r2, [pc, #224]	@ (800f6c4 <HAL_TIM_PWM_Stop+0x108>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d004      	beq.n	800f5f2 <HAL_TIM_PWM_Stop+0x36>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a36      	ldr	r2, [pc, #216]	@ (800f6c8 <HAL_TIM_PWM_Stop+0x10c>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d101      	bne.n	800f5f6 <HAL_TIM_PWM_Stop+0x3a>
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e000      	b.n	800f5f8 <HAL_TIM_PWM_Stop+0x3c>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d017      	beq.n	800f62c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	6a1a      	ldr	r2, [r3, #32]
 800f602:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f606:	4013      	ands	r3, r2
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d10f      	bne.n	800f62c <HAL_TIM_PWM_Stop+0x70>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6a1a      	ldr	r2, [r3, #32]
 800f612:	f240 4344 	movw	r3, #1092	@ 0x444
 800f616:	4013      	ands	r3, r2
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d107      	bne.n	800f62c <HAL_TIM_PWM_Stop+0x70>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f62a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	6a1a      	ldr	r2, [r3, #32]
 800f632:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f636:	4013      	ands	r3, r2
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10f      	bne.n	800f65c <HAL_TIM_PWM_Stop+0xa0>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6a1a      	ldr	r2, [r3, #32]
 800f642:	f240 4344 	movw	r3, #1092	@ 0x444
 800f646:	4013      	ands	r3, r2
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d107      	bne.n	800f65c <HAL_TIM_PWM_Stop+0xa0>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f022 0201 	bic.w	r2, r2, #1
 800f65a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d104      	bne.n	800f66c <HAL_TIM_PWM_Stop+0xb0>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f66a:	e023      	b.n	800f6b4 <HAL_TIM_PWM_Stop+0xf8>
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	2b04      	cmp	r3, #4
 800f670:	d104      	bne.n	800f67c <HAL_TIM_PWM_Stop+0xc0>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2201      	movs	r2, #1
 800f676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f67a:	e01b      	b.n	800f6b4 <HAL_TIM_PWM_Stop+0xf8>
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2b08      	cmp	r3, #8
 800f680:	d104      	bne.n	800f68c <HAL_TIM_PWM_Stop+0xd0>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f68a:	e013      	b.n	800f6b4 <HAL_TIM_PWM_Stop+0xf8>
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2b0c      	cmp	r3, #12
 800f690:	d104      	bne.n	800f69c <HAL_TIM_PWM_Stop+0xe0>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2201      	movs	r2, #1
 800f696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f69a:	e00b      	b.n	800f6b4 <HAL_TIM_PWM_Stop+0xf8>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b10      	cmp	r3, #16
 800f6a0:	d104      	bne.n	800f6ac <HAL_TIM_PWM_Stop+0xf0>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f6aa:	e003      	b.n	800f6b4 <HAL_TIM_PWM_Stop+0xf8>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	40012c00 	.word	0x40012c00
 800f6c4:	40014400 	.word	0x40014400
 800f6c8:	40014800 	.word	0x40014800

0800f6cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	f003 0302 	and.w	r3, r3, #2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d020      	beq.n	800f730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f003 0302 	and.w	r3, r3, #2
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d01b      	beq.n	800f730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f06f 0202 	mvn.w	r2, #2
 800f700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	f003 0303 	and.w	r3, r3, #3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d003      	beq.n	800f71e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fad1 	bl	800fcbe <HAL_TIM_IC_CaptureCallback>
 800f71c:	e005      	b.n	800f72a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 fac3 	bl	800fcaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fad4 	bl	800fcd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2200      	movs	r2, #0
 800f72e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	f003 0304 	and.w	r3, r3, #4
 800f736:	2b00      	cmp	r3, #0
 800f738:	d020      	beq.n	800f77c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f003 0304 	and.w	r3, r3, #4
 800f740:	2b00      	cmp	r3, #0
 800f742:	d01b      	beq.n	800f77c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f06f 0204 	mvn.w	r2, #4
 800f74c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2202      	movs	r2, #2
 800f752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	699b      	ldr	r3, [r3, #24]
 800f75a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d003      	beq.n	800f76a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 faab 	bl	800fcbe <HAL_TIM_IC_CaptureCallback>
 800f768:	e005      	b.n	800f776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fa9d 	bl	800fcaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 faae 	bl	800fcd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	f003 0308 	and.w	r3, r3, #8
 800f782:	2b00      	cmp	r3, #0
 800f784:	d020      	beq.n	800f7c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f003 0308 	and.w	r3, r3, #8
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d01b      	beq.n	800f7c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f06f 0208 	mvn.w	r2, #8
 800f798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2204      	movs	r2, #4
 800f79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	69db      	ldr	r3, [r3, #28]
 800f7a6:	f003 0303 	and.w	r3, r3, #3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d003      	beq.n	800f7b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 fa85 	bl	800fcbe <HAL_TIM_IC_CaptureCallback>
 800f7b4:	e005      	b.n	800f7c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa77 	bl	800fcaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 fa88 	bl	800fcd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	f003 0310 	and.w	r3, r3, #16
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d020      	beq.n	800f814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f003 0310 	and.w	r3, r3, #16
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d01b      	beq.n	800f814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f06f 0210 	mvn.w	r2, #16
 800f7e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2208      	movs	r2, #8
 800f7ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	69db      	ldr	r3, [r3, #28]
 800f7f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d003      	beq.n	800f802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fa5f 	bl	800fcbe <HAL_TIM_IC_CaptureCallback>
 800f800:	e005      	b.n	800f80e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fa51 	bl	800fcaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fa62 	bl	800fcd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	f003 0301 	and.w	r3, r3, #1
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00c      	beq.n	800f838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	2b00      	cmp	r3, #0
 800f826:	d007      	beq.n	800f838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f06f 0201 	mvn.w	r2, #1
 800f830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fa2f 	bl	800fc96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d104      	bne.n	800f84c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00c      	beq.n	800f866 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f852:	2b00      	cmp	r3, #0
 800f854:	d007      	beq.n	800f866 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 fefd 	bl	8010660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00c      	beq.n	800f88a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f876:	2b00      	cmp	r3, #0
 800f878:	d007      	beq.n	800f88a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fef5 	bl	8010674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00c      	beq.n	800f8ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d007      	beq.n	800f8ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f8a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fa1c 	bl	800fce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	f003 0320 	and.w	r3, r3, #32
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00c      	beq.n	800f8d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f003 0320 	and.w	r3, r3, #32
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d007      	beq.n	800f8d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f06f 0220 	mvn.w	r2, #32
 800f8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 febd 	bl	801064c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f8d2:	bf00      	nop
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d101      	bne.n	800f8fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	e0ff      	b.n	800fafa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b14      	cmp	r3, #20
 800f906:	f200 80f0 	bhi.w	800faea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f90a:	a201      	add	r2, pc, #4	@ (adr r2, 800f910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f910:	0800f965 	.word	0x0800f965
 800f914:	0800faeb 	.word	0x0800faeb
 800f918:	0800faeb 	.word	0x0800faeb
 800f91c:	0800faeb 	.word	0x0800faeb
 800f920:	0800f9a5 	.word	0x0800f9a5
 800f924:	0800faeb 	.word	0x0800faeb
 800f928:	0800faeb 	.word	0x0800faeb
 800f92c:	0800faeb 	.word	0x0800faeb
 800f930:	0800f9e7 	.word	0x0800f9e7
 800f934:	0800faeb 	.word	0x0800faeb
 800f938:	0800faeb 	.word	0x0800faeb
 800f93c:	0800faeb 	.word	0x0800faeb
 800f940:	0800fa27 	.word	0x0800fa27
 800f944:	0800faeb 	.word	0x0800faeb
 800f948:	0800faeb 	.word	0x0800faeb
 800f94c:	0800faeb 	.word	0x0800faeb
 800f950:	0800fa69 	.word	0x0800fa69
 800f954:	0800faeb 	.word	0x0800faeb
 800f958:	0800faeb 	.word	0x0800faeb
 800f95c:	0800faeb 	.word	0x0800faeb
 800f960:	0800faa9 	.word	0x0800faa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	68b9      	ldr	r1, [r7, #8]
 800f96a:	4618      	mov	r0, r3
 800f96c:	f000 fa36 	bl	800fddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	699a      	ldr	r2, [r3, #24]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f042 0208 	orr.w	r2, r2, #8
 800f97e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	699a      	ldr	r2, [r3, #24]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f022 0204 	bic.w	r2, r2, #4
 800f98e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	6999      	ldr	r1, [r3, #24]
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	691a      	ldr	r2, [r3, #16]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	430a      	orrs	r2, r1
 800f9a0:	619a      	str	r2, [r3, #24]
      break;
 800f9a2:	e0a5      	b.n	800faf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68b9      	ldr	r1, [r7, #8]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f000 fa92 	bl	800fed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	699a      	ldr	r2, [r3, #24]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f9be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	699a      	ldr	r2, [r3, #24]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f9ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	6999      	ldr	r1, [r3, #24]
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	691b      	ldr	r3, [r3, #16]
 800f9da:	021a      	lsls	r2, r3, #8
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	430a      	orrs	r2, r1
 800f9e2:	619a      	str	r2, [r3, #24]
      break;
 800f9e4:	e084      	b.n	800faf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68b9      	ldr	r1, [r7, #8]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f000 faeb 	bl	800ffc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	69da      	ldr	r2, [r3, #28]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f042 0208 	orr.w	r2, r2, #8
 800fa00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	69da      	ldr	r2, [r3, #28]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f022 0204 	bic.w	r2, r2, #4
 800fa10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	69d9      	ldr	r1, [r3, #28]
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	691a      	ldr	r2, [r3, #16]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	430a      	orrs	r2, r1
 800fa22:	61da      	str	r2, [r3, #28]
      break;
 800fa24:	e064      	b.n	800faf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68b9      	ldr	r1, [r7, #8]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f000 fb43 	bl	80100b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	69da      	ldr	r2, [r3, #28]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	69da      	ldr	r2, [r3, #28]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fa50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	69d9      	ldr	r1, [r3, #28]
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	021a      	lsls	r2, r3, #8
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	430a      	orrs	r2, r1
 800fa64:	61da      	str	r2, [r3, #28]
      break;
 800fa66:	e043      	b.n	800faf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	68b9      	ldr	r1, [r7, #8]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 fb80 	bl	8010174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f042 0208 	orr.w	r2, r2, #8
 800fa82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f022 0204 	bic.w	r2, r2, #4
 800fa92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	691a      	ldr	r2, [r3, #16]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	430a      	orrs	r2, r1
 800faa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800faa6:	e023      	b.n	800faf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	68b9      	ldr	r1, [r7, #8]
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 fbb8 	bl	8010224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fac2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fad2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	691b      	ldr	r3, [r3, #16]
 800fade:	021a      	lsls	r2, r3, #8
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	430a      	orrs	r2, r1
 800fae6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800fae8:	e002      	b.n	800faf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	75fb      	strb	r3, [r7, #23]
      break;
 800faee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800faf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3718      	adds	r7, #24
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop

0800fb04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d101      	bne.n	800fb20 <HAL_TIM_ConfigClockSource+0x1c>
 800fb1c:	2302      	movs	r3, #2
 800fb1e:	e0b6      	b.n	800fc8e <HAL_TIM_ConfigClockSource+0x18a>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2201      	movs	r2, #1
 800fb24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	689b      	ldr	r3, [r3, #8]
 800fb36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fb3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fb42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb5c:	d03e      	beq.n	800fbdc <HAL_TIM_ConfigClockSource+0xd8>
 800fb5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb62:	f200 8087 	bhi.w	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb6a:	f000 8086 	beq.w	800fc7a <HAL_TIM_ConfigClockSource+0x176>
 800fb6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb72:	d87f      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb74:	2b70      	cmp	r3, #112	@ 0x70
 800fb76:	d01a      	beq.n	800fbae <HAL_TIM_ConfigClockSource+0xaa>
 800fb78:	2b70      	cmp	r3, #112	@ 0x70
 800fb7a:	d87b      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb7c:	2b60      	cmp	r3, #96	@ 0x60
 800fb7e:	d050      	beq.n	800fc22 <HAL_TIM_ConfigClockSource+0x11e>
 800fb80:	2b60      	cmp	r3, #96	@ 0x60
 800fb82:	d877      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb84:	2b50      	cmp	r3, #80	@ 0x50
 800fb86:	d03c      	beq.n	800fc02 <HAL_TIM_ConfigClockSource+0xfe>
 800fb88:	2b50      	cmp	r3, #80	@ 0x50
 800fb8a:	d873      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb8c:	2b40      	cmp	r3, #64	@ 0x40
 800fb8e:	d058      	beq.n	800fc42 <HAL_TIM_ConfigClockSource+0x13e>
 800fb90:	2b40      	cmp	r3, #64	@ 0x40
 800fb92:	d86f      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb94:	2b30      	cmp	r3, #48	@ 0x30
 800fb96:	d064      	beq.n	800fc62 <HAL_TIM_ConfigClockSource+0x15e>
 800fb98:	2b30      	cmp	r3, #48	@ 0x30
 800fb9a:	d86b      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fb9c:	2b20      	cmp	r3, #32
 800fb9e:	d060      	beq.n	800fc62 <HAL_TIM_ConfigClockSource+0x15e>
 800fba0:	2b20      	cmp	r3, #32
 800fba2:	d867      	bhi.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d05c      	beq.n	800fc62 <HAL_TIM_ConfigClockSource+0x15e>
 800fba8:	2b10      	cmp	r3, #16
 800fbaa:	d05a      	beq.n	800fc62 <HAL_TIM_ConfigClockSource+0x15e>
 800fbac:	e062      	b.n	800fc74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fbbe:	f000 fc07 	bl	80103d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fbd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	68ba      	ldr	r2, [r7, #8]
 800fbd8:	609a      	str	r2, [r3, #8]
      break;
 800fbda:	e04f      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fbec:	f000 fbf0 	bl	80103d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	689a      	ldr	r2, [r3, #8]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fbfe:	609a      	str	r2, [r3, #8]
      break;
 800fc00:	e03c      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc0e:	461a      	mov	r2, r3
 800fc10:	f000 fb62 	bl	80102d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2150      	movs	r1, #80	@ 0x50
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 fbbb 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fc20:	e02c      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc2e:	461a      	mov	r2, r3
 800fc30:	f000 fb81 	bl	8010336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2160      	movs	r1, #96	@ 0x60
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 fbab 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fc40:	e01c      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f000 fb42 	bl	80102d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2140      	movs	r1, #64	@ 0x40
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 fb9b 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fc60:	e00c      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	f000 fb92 	bl	8010396 <TIM_ITRx_SetConfig>
      break;
 800fc72:	e003      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800fc74:	2301      	movs	r3, #1
 800fc76:	73fb      	strb	r3, [r7, #15]
      break;
 800fc78:	e000      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800fc7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc96:	b480      	push	{r7}
 800fc98:	b083      	sub	sp, #12
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fc9e:	bf00      	nop
 800fca0:	370c      	adds	r7, #12
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr

0800fcaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcaa:	b480      	push	{r7}
 800fcac:	b083      	sub	sp, #12
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fcb2:	bf00      	nop
 800fcb4:	370c      	adds	r7, #12
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr

0800fcbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fcbe:	b480      	push	{r7}
 800fcc0:	b083      	sub	sp, #12
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fcc6:	bf00      	nop
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b083      	sub	sp, #12
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fcda:	bf00      	nop
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fcee:	bf00      	nop
 800fcf0:	370c      	adds	r7, #12
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
	...

0800fcfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a30      	ldr	r2, [pc, #192]	@ (800fdd0 <TIM_Base_SetConfig+0xd4>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d003      	beq.n	800fd1c <TIM_Base_SetConfig+0x20>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd1a:	d108      	bne.n	800fd2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4a27      	ldr	r2, [pc, #156]	@ (800fdd0 <TIM_Base_SetConfig+0xd4>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d00b      	beq.n	800fd4e <TIM_Base_SetConfig+0x52>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd3c:	d007      	beq.n	800fd4e <TIM_Base_SetConfig+0x52>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a24      	ldr	r2, [pc, #144]	@ (800fdd4 <TIM_Base_SetConfig+0xd8>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d003      	beq.n	800fd4e <TIM_Base_SetConfig+0x52>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a23      	ldr	r2, [pc, #140]	@ (800fdd8 <TIM_Base_SetConfig+0xdc>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d108      	bne.n	800fd60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	689a      	ldr	r2, [r3, #8]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a12      	ldr	r2, [pc, #72]	@ (800fdd0 <TIM_Base_SetConfig+0xd4>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d007      	beq.n	800fd9c <TIM_Base_SetConfig+0xa0>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a11      	ldr	r2, [pc, #68]	@ (800fdd4 <TIM_Base_SetConfig+0xd8>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d003      	beq.n	800fd9c <TIM_Base_SetConfig+0xa0>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a10      	ldr	r2, [pc, #64]	@ (800fdd8 <TIM_Base_SetConfig+0xdc>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d103      	bne.n	800fda4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	691a      	ldr	r2, [r3, #16]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b01      	cmp	r3, #1
 800fdb4:	d105      	bne.n	800fdc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	691b      	ldr	r3, [r3, #16]
 800fdba:	f023 0201 	bic.w	r2, r3, #1
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	611a      	str	r2, [r3, #16]
  }
}
 800fdc2:	bf00      	nop
 800fdc4:	3714      	adds	r7, #20
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	40012c00 	.word	0x40012c00
 800fdd4:	40014400 	.word	0x40014400
 800fdd8:	40014800 	.word	0x40014800

0800fddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6a1b      	ldr	r3, [r3, #32]
 800fdf0:	f023 0201 	bic.w	r2, r3, #1
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	699b      	ldr	r3, [r3, #24]
 800fe02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	f023 0302 	bic.w	r3, r3, #2
 800fe28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	697a      	ldr	r2, [r7, #20]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4a24      	ldr	r2, [pc, #144]	@ (800fec8 <TIM_OC1_SetConfig+0xec>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d007      	beq.n	800fe4c <TIM_OC1_SetConfig+0x70>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4a23      	ldr	r2, [pc, #140]	@ (800fecc <TIM_OC1_SetConfig+0xf0>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d003      	beq.n	800fe4c <TIM_OC1_SetConfig+0x70>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a22      	ldr	r2, [pc, #136]	@ (800fed0 <TIM_OC1_SetConfig+0xf4>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d10c      	bne.n	800fe66 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f023 0308 	bic.w	r3, r3, #8
 800fe52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	f023 0304 	bic.w	r3, r3, #4
 800fe64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4a17      	ldr	r2, [pc, #92]	@ (800fec8 <TIM_OC1_SetConfig+0xec>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d007      	beq.n	800fe7e <TIM_OC1_SetConfig+0xa2>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4a17      	ldr	r2, [pc, #92]	@ (800fed0 <TIM_OC1_SetConfig+0xf4>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d003      	beq.n	800fe7e <TIM_OC1_SetConfig+0xa2>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4a14      	ldr	r2, [pc, #80]	@ (800fecc <TIM_OC1_SetConfig+0xf0>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d111      	bne.n	800fea2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fe8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	695b      	ldr	r3, [r3, #20]
 800fe92:	693a      	ldr	r2, [r7, #16]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	685a      	ldr	r2, [r3, #4]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	697a      	ldr	r2, [r7, #20]
 800feba:	621a      	str	r2, [r3, #32]
}
 800febc:	bf00      	nop
 800febe:	371c      	adds	r7, #28
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	40012c00 	.word	0x40012c00
 800fecc:	40014800 	.word	0x40014800
 800fed0:	40014400 	.word	0x40014400

0800fed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b087      	sub	sp, #28
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6a1b      	ldr	r3, [r3, #32]
 800fee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a1b      	ldr	r3, [r3, #32]
 800fee8:	f023 0210 	bic.w	r2, r3, #16
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	699b      	ldr	r3, [r3, #24]
 800fefa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ff02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	021b      	lsls	r3, r3, #8
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	f023 0320 	bic.w	r3, r3, #32
 800ff22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	011b      	lsls	r3, r3, #4
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a22      	ldr	r2, [pc, #136]	@ (800ffbc <TIM_OC2_SetConfig+0xe8>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d10d      	bne.n	800ff54 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	011b      	lsls	r3, r3, #4
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a19      	ldr	r2, [pc, #100]	@ (800ffbc <TIM_OC2_SetConfig+0xe8>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d007      	beq.n	800ff6c <TIM_OC2_SetConfig+0x98>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a18      	ldr	r2, [pc, #96]	@ (800ffc0 <TIM_OC2_SetConfig+0xec>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d003      	beq.n	800ff6c <TIM_OC2_SetConfig+0x98>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a17      	ldr	r2, [pc, #92]	@ (800ffc4 <TIM_OC2_SetConfig+0xf0>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d113      	bne.n	800ff94 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ff72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ff7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	695b      	ldr	r3, [r3, #20]
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	693a      	ldr	r2, [r7, #16]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	693a      	ldr	r2, [r7, #16]
 800ff90:	4313      	orrs	r3, r2
 800ff92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	693a      	ldr	r2, [r7, #16]
 800ff98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	685a      	ldr	r2, [r3, #4]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	697a      	ldr	r2, [r7, #20]
 800ffac:	621a      	str	r2, [r3, #32]
}
 800ffae:	bf00      	nop
 800ffb0:	371c      	adds	r7, #28
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	40012c00 	.word	0x40012c00
 800ffc0:	40014400 	.word	0x40014400
 800ffc4:	40014800 	.word	0x40014800

0800ffc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b087      	sub	sp, #28
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a1b      	ldr	r3, [r3, #32]
 800ffd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6a1b      	ldr	r3, [r3, #32]
 800ffdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	69db      	ldr	r3, [r3, #28]
 800ffee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f023 0303 	bic.w	r3, r3, #3
 8010002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	4313      	orrs	r3, r2
 801000c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	021b      	lsls	r3, r3, #8
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	4313      	orrs	r3, r2
 8010020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4a21      	ldr	r2, [pc, #132]	@ (80100ac <TIM_OC3_SetConfig+0xe4>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d10d      	bne.n	8010046 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	021b      	lsls	r3, r3, #8
 8010038:	697a      	ldr	r2, [r7, #20]
 801003a:	4313      	orrs	r3, r2
 801003c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a18      	ldr	r2, [pc, #96]	@ (80100ac <TIM_OC3_SetConfig+0xe4>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d007      	beq.n	801005e <TIM_OC3_SetConfig+0x96>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a17      	ldr	r2, [pc, #92]	@ (80100b0 <TIM_OC3_SetConfig+0xe8>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d003      	beq.n	801005e <TIM_OC3_SetConfig+0x96>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a16      	ldr	r2, [pc, #88]	@ (80100b4 <TIM_OC3_SetConfig+0xec>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d113      	bne.n	8010086 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801006c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	011b      	lsls	r3, r3, #4
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	4313      	orrs	r3, r2
 8010078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	699b      	ldr	r3, [r3, #24]
 801007e:	011b      	lsls	r3, r3, #4
 8010080:	693a      	ldr	r2, [r7, #16]
 8010082:	4313      	orrs	r3, r2
 8010084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	693a      	ldr	r2, [r7, #16]
 801008a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	621a      	str	r2, [r3, #32]
}
 80100a0:	bf00      	nop
 80100a2:	371c      	adds	r7, #28
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	40012c00 	.word	0x40012c00
 80100b0:	40014400 	.word	0x40014400
 80100b4:	40014800 	.word	0x40014800

080100b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b087      	sub	sp, #28
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a1b      	ldr	r3, [r3, #32]
 80100cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80100e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80100ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	021b      	lsls	r3, r3, #8
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	4313      	orrs	r3, r2
 80100fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	689b      	ldr	r3, [r3, #8]
 801010c:	031b      	lsls	r3, r3, #12
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	4313      	orrs	r3, r2
 8010112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4a14      	ldr	r2, [pc, #80]	@ (8010168 <TIM_OC4_SetConfig+0xb0>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d007      	beq.n	801012c <TIM_OC4_SetConfig+0x74>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4a13      	ldr	r2, [pc, #76]	@ (801016c <TIM_OC4_SetConfig+0xb4>)
 8010120:	4293      	cmp	r3, r2
 8010122:	d003      	beq.n	801012c <TIM_OC4_SetConfig+0x74>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4a12      	ldr	r2, [pc, #72]	@ (8010170 <TIM_OC4_SetConfig+0xb8>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d109      	bne.n	8010140 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	695b      	ldr	r3, [r3, #20]
 8010138:	019b      	lsls	r3, r3, #6
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	4313      	orrs	r3, r2
 801013e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	697a      	ldr	r2, [r7, #20]
 8010144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	693a      	ldr	r2, [r7, #16]
 8010158:	621a      	str	r2, [r3, #32]
}
 801015a:	bf00      	nop
 801015c:	371c      	adds	r7, #28
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	40012c00 	.word	0x40012c00
 801016c:	40014400 	.word	0x40014400
 8010170:	40014800 	.word	0x40014800

08010174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010174:	b480      	push	{r7}
 8010176:	b087      	sub	sp, #28
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6a1b      	ldr	r3, [r3, #32]
 8010182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6a1b      	ldr	r3, [r3, #32]
 8010188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801019a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80101a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68fa      	ldr	r2, [r7, #12]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80101b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	689b      	ldr	r3, [r3, #8]
 80101be:	041b      	lsls	r3, r3, #16
 80101c0:	693a      	ldr	r2, [r7, #16]
 80101c2:	4313      	orrs	r3, r2
 80101c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a13      	ldr	r2, [pc, #76]	@ (8010218 <TIM_OC5_SetConfig+0xa4>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d007      	beq.n	80101de <TIM_OC5_SetConfig+0x6a>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4a12      	ldr	r2, [pc, #72]	@ (801021c <TIM_OC5_SetConfig+0xa8>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d003      	beq.n	80101de <TIM_OC5_SetConfig+0x6a>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4a11      	ldr	r2, [pc, #68]	@ (8010220 <TIM_OC5_SetConfig+0xac>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d109      	bne.n	80101f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80101e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	695b      	ldr	r3, [r3, #20]
 80101ea:	021b      	lsls	r3, r3, #8
 80101ec:	697a      	ldr	r2, [r7, #20]
 80101ee:	4313      	orrs	r3, r2
 80101f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	697a      	ldr	r2, [r7, #20]
 80101f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	685a      	ldr	r2, [r3, #4]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	693a      	ldr	r2, [r7, #16]
 801020a:	621a      	str	r2, [r3, #32]
}
 801020c:	bf00      	nop
 801020e:	371c      	adds	r7, #28
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr
 8010218:	40012c00 	.word	0x40012c00
 801021c:	40014400 	.word	0x40014400
 8010220:	40014800 	.word	0x40014800

08010224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010224:	b480      	push	{r7}
 8010226:	b087      	sub	sp, #28
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6a1b      	ldr	r3, [r3, #32]
 8010232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a1b      	ldr	r3, [r3, #32]
 8010238:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801024a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	021b      	lsls	r3, r3, #8
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	4313      	orrs	r3, r2
 8010262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801026a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	051b      	lsls	r3, r3, #20
 8010272:	693a      	ldr	r2, [r7, #16]
 8010274:	4313      	orrs	r3, r2
 8010276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4a14      	ldr	r2, [pc, #80]	@ (80102cc <TIM_OC6_SetConfig+0xa8>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d007      	beq.n	8010290 <TIM_OC6_SetConfig+0x6c>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a13      	ldr	r2, [pc, #76]	@ (80102d0 <TIM_OC6_SetConfig+0xac>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d003      	beq.n	8010290 <TIM_OC6_SetConfig+0x6c>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4a12      	ldr	r2, [pc, #72]	@ (80102d4 <TIM_OC6_SetConfig+0xb0>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d109      	bne.n	80102a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010296:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	695b      	ldr	r3, [r3, #20]
 801029c:	029b      	lsls	r3, r3, #10
 801029e:	697a      	ldr	r2, [r7, #20]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	685a      	ldr	r2, [r3, #4]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	693a      	ldr	r2, [r7, #16]
 80102bc:	621a      	str	r2, [r3, #32]
}
 80102be:	bf00      	nop
 80102c0:	371c      	adds	r7, #28
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop
 80102cc:	40012c00 	.word	0x40012c00
 80102d0:	40014400 	.word	0x40014400
 80102d4:	40014800 	.word	0x40014800

080102d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80102d8:	b480      	push	{r7}
 80102da:	b087      	sub	sp, #28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6a1b      	ldr	r3, [r3, #32]
 80102e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6a1b      	ldr	r3, [r3, #32]
 80102ee:	f023 0201 	bic.w	r2, r3, #1
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	699b      	ldr	r3, [r3, #24]
 80102fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	011b      	lsls	r3, r3, #4
 8010308:	693a      	ldr	r2, [r7, #16]
 801030a:	4313      	orrs	r3, r2
 801030c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f023 030a 	bic.w	r3, r3, #10
 8010314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010316:	697a      	ldr	r2, [r7, #20]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	4313      	orrs	r3, r2
 801031c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	621a      	str	r2, [r3, #32]
}
 801032a:	bf00      	nop
 801032c:	371c      	adds	r7, #28
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010336:	b480      	push	{r7}
 8010338:	b087      	sub	sp, #28
 801033a:	af00      	add	r7, sp, #0
 801033c:	60f8      	str	r0, [r7, #12]
 801033e:	60b9      	str	r1, [r7, #8]
 8010340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	6a1b      	ldr	r3, [r3, #32]
 801034c:	f023 0210 	bic.w	r2, r3, #16
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	699b      	ldr	r3, [r3, #24]
 8010358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	031b      	lsls	r3, r3, #12
 8010366:	693a      	ldr	r2, [r7, #16]
 8010368:	4313      	orrs	r3, r2
 801036a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	011b      	lsls	r3, r3, #4
 8010378:	697a      	ldr	r2, [r7, #20]
 801037a:	4313      	orrs	r3, r2
 801037c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	621a      	str	r2, [r3, #32]
}
 801038a:	bf00      	nop
 801038c:	371c      	adds	r7, #28
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr

08010396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010396:	b480      	push	{r7}
 8010398:	b085      	sub	sp, #20
 801039a:	af00      	add	r7, sp, #0
 801039c:	6078      	str	r0, [r7, #4]
 801039e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80103ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80103b2:	683a      	ldr	r2, [r7, #0]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	4313      	orrs	r3, r2
 80103b8:	f043 0307 	orr.w	r3, r3, #7
 80103bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	609a      	str	r2, [r3, #8]
}
 80103c4:	bf00      	nop
 80103c6:	3714      	adds	r7, #20
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b087      	sub	sp, #28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	607a      	str	r2, [r7, #4]
 80103dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80103ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	021a      	lsls	r2, r3, #8
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	431a      	orrs	r2, r3
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	697a      	ldr	r2, [r7, #20]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	609a      	str	r2, [r3, #8]
}
 8010404:	bf00      	nop
 8010406:	371c      	adds	r7, #28
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr

08010410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010410:	b480      	push	{r7}
 8010412:	b087      	sub	sp, #28
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	f003 031f 	and.w	r3, r3, #31
 8010422:	2201      	movs	r2, #1
 8010424:	fa02 f303 	lsl.w	r3, r2, r3
 8010428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6a1a      	ldr	r2, [r3, #32]
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	43db      	mvns	r3, r3
 8010432:	401a      	ands	r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6a1a      	ldr	r2, [r3, #32]
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f003 031f 	and.w	r3, r3, #31
 8010442:	6879      	ldr	r1, [r7, #4]
 8010444:	fa01 f303 	lsl.w	r3, r1, r3
 8010448:	431a      	orrs	r2, r3
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	621a      	str	r2, [r3, #32]
}
 801044e:	bf00      	nop
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
	...

0801045c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d109      	bne.n	8010480 <HAL_TIMEx_PWMN_Start+0x24>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b01      	cmp	r3, #1
 8010476:	bf14      	ite	ne
 8010478:	2301      	movne	r3, #1
 801047a:	2300      	moveq	r3, #0
 801047c:	b2db      	uxtb	r3, r3
 801047e:	e022      	b.n	80104c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	2b04      	cmp	r3, #4
 8010484:	d109      	bne.n	801049a <HAL_TIMEx_PWMN_Start+0x3e>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b01      	cmp	r3, #1
 8010490:	bf14      	ite	ne
 8010492:	2301      	movne	r3, #1
 8010494:	2300      	moveq	r3, #0
 8010496:	b2db      	uxtb	r3, r3
 8010498:	e015      	b.n	80104c6 <HAL_TIMEx_PWMN_Start+0x6a>
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b08      	cmp	r3, #8
 801049e:	d109      	bne.n	80104b4 <HAL_TIMEx_PWMN_Start+0x58>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	bf14      	ite	ne
 80104ac:	2301      	movne	r3, #1
 80104ae:	2300      	moveq	r3, #0
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	e008      	b.n	80104c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	2b01      	cmp	r3, #1
 80104be:	bf14      	ite	ne
 80104c0:	2301      	movne	r3, #1
 80104c2:	2300      	moveq	r3, #0
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80104ca:	2301      	movs	r3, #1
 80104cc:	e055      	b.n	801057a <HAL_TIMEx_PWMN_Start+0x11e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d104      	bne.n	80104de <HAL_TIMEx_PWMN_Start+0x82>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2202      	movs	r2, #2
 80104d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80104dc:	e013      	b.n	8010506 <HAL_TIMEx_PWMN_Start+0xaa>
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	2b04      	cmp	r3, #4
 80104e2:	d104      	bne.n	80104ee <HAL_TIMEx_PWMN_Start+0x92>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2202      	movs	r2, #2
 80104e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80104ec:	e00b      	b.n	8010506 <HAL_TIMEx_PWMN_Start+0xaa>
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	2b08      	cmp	r3, #8
 80104f2:	d104      	bne.n	80104fe <HAL_TIMEx_PWMN_Start+0xa2>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2202      	movs	r2, #2
 80104f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80104fc:	e003      	b.n	8010506 <HAL_TIMEx_PWMN_Start+0xaa>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2202      	movs	r2, #2
 8010502:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2204      	movs	r2, #4
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	4618      	mov	r0, r3
 8010510:	f000 f8ba 	bl	8010688 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010522:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a16      	ldr	r2, [pc, #88]	@ (8010584 <HAL_TIMEx_PWMN_Start+0x128>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d004      	beq.n	8010538 <HAL_TIMEx_PWMN_Start+0xdc>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010536:	d115      	bne.n	8010564 <HAL_TIMEx_PWMN_Start+0x108>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	689a      	ldr	r2, [r3, #8]
 801053e:	4b12      	ldr	r3, [pc, #72]	@ (8010588 <HAL_TIMEx_PWMN_Start+0x12c>)
 8010540:	4013      	ands	r3, r2
 8010542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2b06      	cmp	r3, #6
 8010548:	d015      	beq.n	8010576 <HAL_TIMEx_PWMN_Start+0x11a>
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010550:	d011      	beq.n	8010576 <HAL_TIMEx_PWMN_Start+0x11a>
    {
      __HAL_TIM_ENABLE(htim);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f042 0201 	orr.w	r2, r2, #1
 8010560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010562:	e008      	b.n	8010576 <HAL_TIMEx_PWMN_Start+0x11a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f042 0201 	orr.w	r2, r2, #1
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	e000      	b.n	8010578 <HAL_TIMEx_PWMN_Start+0x11c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010578:	2300      	movs	r3, #0
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	40012c00 	.word	0x40012c00
 8010588:	00010007 	.word	0x00010007

0801058c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801058c:	b480      	push	{r7}
 801058e:	b085      	sub	sp, #20
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801059c:	2b01      	cmp	r3, #1
 801059e:	d101      	bne.n	80105a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80105a0:	2302      	movs	r3, #2
 80105a2:	e04a      	b.n	801063a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2202      	movs	r2, #2
 80105b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a1f      	ldr	r2, [pc, #124]	@ (8010648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d108      	bne.n	80105e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80105d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	4313      	orrs	r3, r2
 80105de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	4313      	orrs	r3, r2
 80105f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	68fa      	ldr	r2, [r7, #12]
 80105f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4a12      	ldr	r2, [pc, #72]	@ (8010648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d004      	beq.n	801060e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801060c:	d10c      	bne.n	8010628 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	4313      	orrs	r3, r2
 801061e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2201      	movs	r2, #1
 801062c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	40012c00 	.word	0x40012c00

0801064c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010654:	bf00      	nop
 8010656:	370c      	adds	r7, #12
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801067c:	bf00      	nop
 801067e:	370c      	adds	r7, #12
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010688:	b480      	push	{r7}
 801068a:	b087      	sub	sp, #28
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	f003 030f 	and.w	r3, r3, #15
 801069a:	2204      	movs	r2, #4
 801069c:	fa02 f303 	lsl.w	r3, r2, r3
 80106a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6a1a      	ldr	r2, [r3, #32]
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	43db      	mvns	r3, r3
 80106aa:	401a      	ands	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6a1a      	ldr	r2, [r3, #32]
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	f003 030f 	and.w	r3, r3, #15
 80106ba:	6879      	ldr	r1, [r7, #4]
 80106bc:	fa01 f303 	lsl.w	r3, r1, r3
 80106c0:	431a      	orrs	r2, r3
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	621a      	str	r2, [r3, #32]
}
 80106c6:	bf00      	nop
 80106c8:	371c      	adds	r7, #28
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <LL_RCC_GetUSARTClockSource>:
{
 80106d2:	b480      	push	{r7}
 80106d4:	b083      	sub	sp, #12
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80106da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80106de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4013      	ands	r3, r2
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <LL_RCC_GetLPUARTClockSource>:
{
 80106f2:	b480      	push	{r7}
 80106f4:	b083      	sub	sp, #12
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80106fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80106fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4013      	ands	r3, r2
}
 8010706:	4618      	mov	r0, r3
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b082      	sub	sp, #8
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d101      	bne.n	8010724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010720:	2301      	movs	r3, #1
 8010722:	e042      	b.n	80107aa <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801072a:	2b00      	cmp	r3, #0
 801072c:	d106      	bne.n	801073c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7f9 fbda 	bl	8009ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2224      	movs	r2, #36	@ 0x24
 8010740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f022 0201 	bic.w	r2, r2, #1
 8010752:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 fe41 	bl	80113e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 fc16 	bl	8010f94 <UART_SetConfig>
 8010768:	4603      	mov	r3, r0
 801076a:	2b01      	cmp	r3, #1
 801076c:	d101      	bne.n	8010772 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801076e:	2301      	movs	r3, #1
 8010770:	e01b      	b.n	80107aa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	685a      	ldr	r2, [r3, #4]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	689a      	ldr	r2, [r3, #8]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010790:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f042 0201 	orr.w	r2, r2, #1
 80107a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 fec0 	bl	8011528 <UART_CheckIdleState>
 80107a8:	4603      	mov	r3, r0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107b2:	b580      	push	{r7, lr}
 80107b4:	b08a      	sub	sp, #40	@ 0x28
 80107b6:	af02      	add	r7, sp, #8
 80107b8:	60f8      	str	r0, [r7, #12]
 80107ba:	60b9      	str	r1, [r7, #8]
 80107bc:	603b      	str	r3, [r7, #0]
 80107be:	4613      	mov	r3, r2
 80107c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107c8:	2b20      	cmp	r3, #32
 80107ca:	d17b      	bne.n	80108c4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <HAL_UART_Transmit+0x26>
 80107d2:	88fb      	ldrh	r3, [r7, #6]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80107d8:	2301      	movs	r3, #1
 80107da:	e074      	b.n	80108c6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2221      	movs	r2, #33	@ 0x21
 80107e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80107ec:	f7fa fc5c 	bl	800b0a8 <HAL_GetTick>
 80107f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	88fa      	ldrh	r2, [r7, #6]
 80107f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	88fa      	ldrh	r2, [r7, #6]
 80107fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801080a:	d108      	bne.n	801081e <HAL_UART_Transmit+0x6c>
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d104      	bne.n	801081e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010814:	2300      	movs	r3, #0
 8010816:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	61bb      	str	r3, [r7, #24]
 801081c:	e003      	b.n	8010826 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010822:	2300      	movs	r3, #0
 8010824:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010826:	e030      	b.n	801088a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	2200      	movs	r2, #0
 8010830:	2180      	movs	r1, #128	@ 0x80
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f000 ff22 	bl	801167c <UART_WaitOnFlagUntilTimeout>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d005      	beq.n	801084a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2220      	movs	r2, #32
 8010842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010846:	2303      	movs	r3, #3
 8010848:	e03d      	b.n	80108c6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d10b      	bne.n	8010868 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010850:	69bb      	ldr	r3, [r7, #24]
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	461a      	mov	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801085e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	3302      	adds	r3, #2
 8010864:	61bb      	str	r3, [r7, #24]
 8010866:	e007      	b.n	8010878 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	781a      	ldrb	r2, [r3, #0]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	3301      	adds	r3, #1
 8010876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801087e:	b29b      	uxth	r3, r3
 8010880:	3b01      	subs	r3, #1
 8010882:	b29a      	uxth	r2, r3
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010890:	b29b      	uxth	r3, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	d1c8      	bne.n	8010828 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2200      	movs	r2, #0
 801089e:	2140      	movs	r1, #64	@ 0x40
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f000 feeb 	bl	801167c <UART_WaitOnFlagUntilTimeout>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d005      	beq.n	80108b8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2220      	movs	r2, #32
 80108b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80108b4:	2303      	movs	r3, #3
 80108b6:	e006      	b.n	80108c6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2220      	movs	r2, #32
 80108bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80108c0:	2300      	movs	r3, #0
 80108c2:	e000      	b.n	80108c6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80108c4:	2302      	movs	r3, #2
  }
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3720      	adds	r7, #32
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
	...

080108d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b0ba      	sub	sp, #232	@ 0xe8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	69db      	ldr	r3, [r3, #28]
 80108de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80108f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80108fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80108fe:	4013      	ands	r3, r2
 8010900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010908:	2b00      	cmp	r3, #0
 801090a:	d11b      	bne.n	8010944 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801090c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010910:	f003 0320 	and.w	r3, r3, #32
 8010914:	2b00      	cmp	r3, #0
 8010916:	d015      	beq.n	8010944 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801091c:	f003 0320 	and.w	r3, r3, #32
 8010920:	2b00      	cmp	r3, #0
 8010922:	d105      	bne.n	8010930 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d009      	beq.n	8010944 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010934:	2b00      	cmp	r3, #0
 8010936:	f000 8300 	beq.w	8010f3a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	4798      	blx	r3
      }
      return;
 8010942:	e2fa      	b.n	8010f3a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010948:	2b00      	cmp	r3, #0
 801094a:	f000 8123 	beq.w	8010b94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801094e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010952:	4b8d      	ldr	r3, [pc, #564]	@ (8010b88 <HAL_UART_IRQHandler+0x2b8>)
 8010954:	4013      	ands	r3, r2
 8010956:	2b00      	cmp	r3, #0
 8010958:	d106      	bne.n	8010968 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801095a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801095e:	4b8b      	ldr	r3, [pc, #556]	@ (8010b8c <HAL_UART_IRQHandler+0x2bc>)
 8010960:	4013      	ands	r3, r2
 8010962:	2b00      	cmp	r3, #0
 8010964:	f000 8116 	beq.w	8010b94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d011      	beq.n	8010998 <HAL_UART_IRQHandler+0xc8>
 8010974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00b      	beq.n	8010998 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2201      	movs	r2, #1
 8010986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801098e:	f043 0201 	orr.w	r2, r3, #1
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801099c:	f003 0302 	and.w	r3, r3, #2
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d011      	beq.n	80109c8 <HAL_UART_IRQHandler+0xf8>
 80109a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109a8:	f003 0301 	and.w	r3, r3, #1
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00b      	beq.n	80109c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2202      	movs	r2, #2
 80109b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109be:	f043 0204 	orr.w	r2, r3, #4
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109cc:	f003 0304 	and.w	r3, r3, #4
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d011      	beq.n	80109f8 <HAL_UART_IRQHandler+0x128>
 80109d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109d8:	f003 0301 	and.w	r3, r3, #1
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00b      	beq.n	80109f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2204      	movs	r2, #4
 80109e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109ee:	f043 0202 	orr.w	r2, r3, #2
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80109f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109fc:	f003 0308 	and.w	r3, r3, #8
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d017      	beq.n	8010a34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a08:	f003 0320 	and.w	r3, r3, #32
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d105      	bne.n	8010a1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010a10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010a14:	4b5c      	ldr	r3, [pc, #368]	@ (8010b88 <HAL_UART_IRQHandler+0x2b8>)
 8010a16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00b      	beq.n	8010a34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2208      	movs	r2, #8
 8010a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a2a:	f043 0208 	orr.w	r2, r3, #8
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d012      	beq.n	8010a66 <HAL_UART_IRQHandler+0x196>
 8010a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00c      	beq.n	8010a66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a5c:	f043 0220 	orr.w	r2, r3, #32
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 8266 	beq.w	8010f3e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a76:	f003 0320 	and.w	r3, r3, #32
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d013      	beq.n	8010aa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a82:	f003 0320 	and.w	r3, r3, #32
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d105      	bne.n	8010a96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d007      	beq.n	8010aa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d003      	beq.n	8010aa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010aac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010aba:	2b40      	cmp	r3, #64	@ 0x40
 8010abc:	d005      	beq.n	8010aca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010ac2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d054      	beq.n	8010b74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 fe43 	bl	8011756 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	689b      	ldr	r3, [r3, #8]
 8010ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ada:	2b40      	cmp	r3, #64	@ 0x40
 8010adc:	d146      	bne.n	8010b6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	3308      	adds	r3, #8
 8010ae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010aec:	e853 3f00 	ldrex	r3, [r3]
 8010af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	3308      	adds	r3, #8
 8010b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010b1a:	e841 2300 	strex	r3, r2, [r1]
 8010b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d1d9      	bne.n	8010ade <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d017      	beq.n	8010b64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b3a:	4a15      	ldr	r2, [pc, #84]	@ (8010b90 <HAL_UART_IRQHandler+0x2c0>)
 8010b3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7fb fe47 	bl	800c7d8 <HAL_DMA_Abort_IT>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d019      	beq.n	8010b84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010b5e:	4610      	mov	r0, r2
 8010b60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b62:	e00f      	b.n	8010b84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f000 f9ff 	bl	8010f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b6a:	e00b      	b.n	8010b84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f9fb 	bl	8010f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b72:	e007      	b.n	8010b84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f9f7 	bl	8010f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010b82:	e1dc      	b.n	8010f3e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b84:	bf00      	nop
    return;
 8010b86:	e1da      	b.n	8010f3e <HAL_UART_IRQHandler+0x66e>
 8010b88:	10000001 	.word	0x10000001
 8010b8c:	04000120 	.word	0x04000120
 8010b90:	08011823 	.word	0x08011823

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	f040 8170 	bne.w	8010e7e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ba2:	f003 0310 	and.w	r3, r3, #16
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 8169 	beq.w	8010e7e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bb0:	f003 0310 	and.w	r3, r3, #16
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f000 8162 	beq.w	8010e7e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2210      	movs	r2, #16
 8010bc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bcc:	2b40      	cmp	r3, #64	@ 0x40
 8010bce:	f040 80d8 	bne.w	8010d82 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f000 80af 	beq.w	8010d48 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010bf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	f080 80a7 	bcs.w	8010d48 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010c00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f003 0320 	and.w	r3, r3, #32
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f040 8087 	bne.w	8010d26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010c24:	e853 3f00 	ldrex	r3, [r3]
 8010c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010c46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d1da      	bne.n	8010c18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	3308      	adds	r3, #8
 8010c68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c6c:	e853 3f00 	ldrex	r3, [r3]
 8010c70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c74:	f023 0301 	bic.w	r3, r3, #1
 8010c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3308      	adds	r3, #8
 8010c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010c86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010c92:	e841 2300 	strex	r3, r2, [r1]
 8010c96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1e1      	bne.n	8010c62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	3308      	adds	r3, #8
 8010ca4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ca8:	e853 3f00 	ldrex	r3, [r3]
 8010cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3308      	adds	r3, #8
 8010cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010cc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010cca:	e841 2300 	strex	r3, r2, [r1]
 8010cce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d1e3      	bne.n	8010c9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2220      	movs	r2, #32
 8010cda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cec:	e853 3f00 	ldrex	r3, [r3]
 8010cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cf4:	f023 0310 	bic.w	r3, r3, #16
 8010cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010d08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010d0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d0e:	e841 2300 	strex	r3, r2, [r1]
 8010d12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d1e4      	bne.n	8010ce4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fb fcfa 	bl	800c71a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2202      	movs	r2, #2
 8010d2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	4619      	mov	r1, r3
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 f91b 	bl	8010f7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010d46:	e0fc      	b.n	8010f42 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010d52:	429a      	cmp	r2, r3
 8010d54:	f040 80f5 	bne.w	8010f42 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f003 0320 	and.w	r3, r3, #32
 8010d66:	2b20      	cmp	r3, #32
 8010d68:	f040 80eb 	bne.w	8010f42 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f8fe 	bl	8010f7c <HAL_UARTEx_RxEventCallback>
      return;
 8010d80:	e0df      	b.n	8010f42 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80d1 	beq.w	8010f46 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8010da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 80cc 	beq.w	8010f46 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db6:	e853 3f00 	ldrex	r3, [r3]
 8010dba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010dd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010dd8:	e841 2300 	strex	r3, r2, [r1]
 8010ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1e4      	bne.n	8010dae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	3308      	adds	r3, #8
 8010dea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dee:	e853 3f00 	ldrex	r3, [r3]
 8010df2:	623b      	str	r3, [r7, #32]
   return(result);
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010dfa:	f023 0301 	bic.w	r3, r3, #1
 8010dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	3308      	adds	r3, #8
 8010e08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010e0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8010e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e14:	e841 2300 	strex	r3, r2, [r1]
 8010e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1e1      	bne.n	8010de4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2220      	movs	r2, #32
 8010e24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	e853 3f00 	ldrex	r3, [r3]
 8010e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f023 0310 	bic.w	r3, r3, #16
 8010e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	461a      	mov	r2, r3
 8010e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010e56:	61fb      	str	r3, [r7, #28]
 8010e58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5a:	69b9      	ldr	r1, [r7, #24]
 8010e5c:	69fa      	ldr	r2, [r7, #28]
 8010e5e:	e841 2300 	strex	r3, r2, [r1]
 8010e62:	617b      	str	r3, [r7, #20]
   return(result);
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1e4      	bne.n	8010e34 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2202      	movs	r2, #2
 8010e6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010e74:	4619      	mov	r1, r3
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 f880 	bl	8010f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e7c:	e063      	b.n	8010f46 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00e      	beq.n	8010ea8 <HAL_UART_IRQHandler+0x5d8>
 8010e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d008      	beq.n	8010ea8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010e9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fcff 	bl	80118a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010ea6:	e051      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d014      	beq.n	8010ede <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d105      	bne.n	8010ecc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010ec4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d008      	beq.n	8010ede <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d03a      	beq.n	8010f4a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	4798      	blx	r3
    }
    return;
 8010edc:	e035      	b.n	8010f4a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d009      	beq.n	8010efe <HAL_UART_IRQHandler+0x62e>
 8010eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d003      	beq.n	8010efe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fca9 	bl	801184e <UART_EndTransmit_IT>
    return;
 8010efc:	e026      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d009      	beq.n	8010f1e <HAL_UART_IRQHandler+0x64e>
 8010f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d003      	beq.n	8010f1e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 fcd8 	bl	80118cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f1c:	e016      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d010      	beq.n	8010f4c <HAL_UART_IRQHandler+0x67c>
 8010f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	da0c      	bge.n	8010f4c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 fcc0 	bl	80118b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f38:	e008      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
      return;
 8010f3a:	bf00      	nop
 8010f3c:	e006      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
    return;
 8010f3e:	bf00      	nop
 8010f40:	e004      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
      return;
 8010f42:	bf00      	nop
 8010f44:	e002      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
      return;
 8010f46:	bf00      	nop
 8010f48:	e000      	b.n	8010f4c <HAL_UART_IRQHandler+0x67c>
    return;
 8010f4a:	bf00      	nop
  }
}
 8010f4c:	37e8      	adds	r7, #232	@ 0xe8
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop

08010f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010f5c:	bf00      	nop
 8010f5e:	370c      	adds	r7, #12
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b083      	sub	sp, #12
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010f70:	bf00      	nop
 8010f72:	370c      	adds	r7, #12
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	460b      	mov	r3, r1
 8010f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f98:	b08c      	sub	sp, #48	@ 0x30
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	689a      	ldr	r2, [r3, #8]
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	431a      	orrs	r2, r3
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	695b      	ldr	r3, [r3, #20]
 8010fb2:	431a      	orrs	r2, r3
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	69db      	ldr	r3, [r3, #28]
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	4baf      	ldr	r3, [pc, #700]	@ (8011280 <UART_SetConfig+0x2ec>)
 8010fc4:	4013      	ands	r3, r2
 8010fc6:	697a      	ldr	r2, [r7, #20]
 8010fc8:	6812      	ldr	r2, [r2, #0]
 8010fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fcc:	430b      	orrs	r3, r1
 8010fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	68da      	ldr	r2, [r3, #12]
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	430a      	orrs	r2, r1
 8010fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4aa4      	ldr	r2, [pc, #656]	@ (8011284 <UART_SetConfig+0x2f0>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d004      	beq.n	8011000 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	6a1b      	ldr	r3, [r3, #32]
 8010ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801100a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801100e:	697a      	ldr	r2, [r7, #20]
 8011010:	6812      	ldr	r2, [r2, #0]
 8011012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011014:	430b      	orrs	r3, r1
 8011016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801101e:	f023 010f 	bic.w	r1, r3, #15
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	430a      	orrs	r2, r1
 801102c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	4a95      	ldr	r2, [pc, #596]	@ (8011288 <UART_SetConfig+0x2f4>)
 8011034:	4293      	cmp	r3, r2
 8011036:	d125      	bne.n	8011084 <UART_SetConfig+0xf0>
 8011038:	2003      	movs	r0, #3
 801103a:	f7ff fb4a 	bl	80106d2 <LL_RCC_GetUSARTClockSource>
 801103e:	4603      	mov	r3, r0
 8011040:	2b03      	cmp	r3, #3
 8011042:	d81b      	bhi.n	801107c <UART_SetConfig+0xe8>
 8011044:	a201      	add	r2, pc, #4	@ (adr r2, 801104c <UART_SetConfig+0xb8>)
 8011046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801104a:	bf00      	nop
 801104c:	0801105d 	.word	0x0801105d
 8011050:	0801106d 	.word	0x0801106d
 8011054:	08011065 	.word	0x08011065
 8011058:	08011075 	.word	0x08011075
 801105c:	2301      	movs	r3, #1
 801105e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011062:	e042      	b.n	80110ea <UART_SetConfig+0x156>
 8011064:	2302      	movs	r3, #2
 8011066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801106a:	e03e      	b.n	80110ea <UART_SetConfig+0x156>
 801106c:	2304      	movs	r3, #4
 801106e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011072:	e03a      	b.n	80110ea <UART_SetConfig+0x156>
 8011074:	2308      	movs	r3, #8
 8011076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801107a:	e036      	b.n	80110ea <UART_SetConfig+0x156>
 801107c:	2310      	movs	r3, #16
 801107e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011082:	e032      	b.n	80110ea <UART_SetConfig+0x156>
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a7e      	ldr	r2, [pc, #504]	@ (8011284 <UART_SetConfig+0x2f0>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d12a      	bne.n	80110e4 <UART_SetConfig+0x150>
 801108e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8011092:	f7ff fb2e 	bl	80106f2 <LL_RCC_GetLPUARTClockSource>
 8011096:	4603      	mov	r3, r0
 8011098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801109c:	d01a      	beq.n	80110d4 <UART_SetConfig+0x140>
 801109e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80110a2:	d81b      	bhi.n	80110dc <UART_SetConfig+0x148>
 80110a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110a8:	d00c      	beq.n	80110c4 <UART_SetConfig+0x130>
 80110aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80110ae:	d815      	bhi.n	80110dc <UART_SetConfig+0x148>
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d003      	beq.n	80110bc <UART_SetConfig+0x128>
 80110b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80110b8:	d008      	beq.n	80110cc <UART_SetConfig+0x138>
 80110ba:	e00f      	b.n	80110dc <UART_SetConfig+0x148>
 80110bc:	2300      	movs	r3, #0
 80110be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110c2:	e012      	b.n	80110ea <UART_SetConfig+0x156>
 80110c4:	2302      	movs	r3, #2
 80110c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110ca:	e00e      	b.n	80110ea <UART_SetConfig+0x156>
 80110cc:	2304      	movs	r3, #4
 80110ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110d2:	e00a      	b.n	80110ea <UART_SetConfig+0x156>
 80110d4:	2308      	movs	r3, #8
 80110d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110da:	e006      	b.n	80110ea <UART_SetConfig+0x156>
 80110dc:	2310      	movs	r3, #16
 80110de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110e2:	e002      	b.n	80110ea <UART_SetConfig+0x156>
 80110e4:	2310      	movs	r3, #16
 80110e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4a65      	ldr	r2, [pc, #404]	@ (8011284 <UART_SetConfig+0x2f0>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	f040 8097 	bne.w	8011224 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80110f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110fa:	2b08      	cmp	r3, #8
 80110fc:	d823      	bhi.n	8011146 <UART_SetConfig+0x1b2>
 80110fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011104 <UART_SetConfig+0x170>)
 8011100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011104:	08011129 	.word	0x08011129
 8011108:	08011147 	.word	0x08011147
 801110c:	08011131 	.word	0x08011131
 8011110:	08011147 	.word	0x08011147
 8011114:	08011137 	.word	0x08011137
 8011118:	08011147 	.word	0x08011147
 801111c:	08011147 	.word	0x08011147
 8011120:	08011147 	.word	0x08011147
 8011124:	0801113f 	.word	0x0801113f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011128:	f7fd f964 	bl	800e3f4 <HAL_RCC_GetPCLK1Freq>
 801112c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801112e:	e010      	b.n	8011152 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011130:	4b56      	ldr	r3, [pc, #344]	@ (801128c <UART_SetConfig+0x2f8>)
 8011132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011134:	e00d      	b.n	8011152 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011136:	f7fd f8dd 	bl	800e2f4 <HAL_RCC_GetSysClockFreq>
 801113a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801113c:	e009      	b.n	8011152 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801113e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011144:	e005      	b.n	8011152 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011146:	2300      	movs	r3, #0
 8011148:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801114a:	2301      	movs	r3, #1
 801114c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011154:	2b00      	cmp	r3, #0
 8011156:	f000 812b 	beq.w	80113b0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801115e:	4a4c      	ldr	r2, [pc, #304]	@ (8011290 <UART_SetConfig+0x2fc>)
 8011160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011164:	461a      	mov	r2, r3
 8011166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011168:	fbb3 f3f2 	udiv	r3, r3, r2
 801116c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	685a      	ldr	r2, [r3, #4]
 8011172:	4613      	mov	r3, r2
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	4413      	add	r3, r2
 8011178:	69ba      	ldr	r2, [r7, #24]
 801117a:	429a      	cmp	r2, r3
 801117c:	d305      	bcc.n	801118a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011184:	69ba      	ldr	r2, [r7, #24]
 8011186:	429a      	cmp	r2, r3
 8011188:	d903      	bls.n	8011192 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801118a:	2301      	movs	r3, #1
 801118c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011190:	e10e      	b.n	80113b0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011194:	2200      	movs	r2, #0
 8011196:	60bb      	str	r3, [r7, #8]
 8011198:	60fa      	str	r2, [r7, #12]
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801119e:	4a3c      	ldr	r2, [pc, #240]	@ (8011290 <UART_SetConfig+0x2fc>)
 80111a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	2200      	movs	r2, #0
 80111a8:	603b      	str	r3, [r7, #0]
 80111aa:	607a      	str	r2, [r7, #4]
 80111ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80111b4:	f7f7 fb64 	bl	8008880 <__aeabi_uldivmod>
 80111b8:	4602      	mov	r2, r0
 80111ba:	460b      	mov	r3, r1
 80111bc:	4610      	mov	r0, r2
 80111be:	4619      	mov	r1, r3
 80111c0:	f04f 0200 	mov.w	r2, #0
 80111c4:	f04f 0300 	mov.w	r3, #0
 80111c8:	020b      	lsls	r3, r1, #8
 80111ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80111ce:	0202      	lsls	r2, r0, #8
 80111d0:	6979      	ldr	r1, [r7, #20]
 80111d2:	6849      	ldr	r1, [r1, #4]
 80111d4:	0849      	lsrs	r1, r1, #1
 80111d6:	2000      	movs	r0, #0
 80111d8:	460c      	mov	r4, r1
 80111da:	4605      	mov	r5, r0
 80111dc:	eb12 0804 	adds.w	r8, r2, r4
 80111e0:	eb43 0905 	adc.w	r9, r3, r5
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	469a      	mov	sl, r3
 80111ec:	4693      	mov	fp, r2
 80111ee:	4652      	mov	r2, sl
 80111f0:	465b      	mov	r3, fp
 80111f2:	4640      	mov	r0, r8
 80111f4:	4649      	mov	r1, r9
 80111f6:	f7f7 fb43 	bl	8008880 <__aeabi_uldivmod>
 80111fa:	4602      	mov	r2, r0
 80111fc:	460b      	mov	r3, r1
 80111fe:	4613      	mov	r3, r2
 8011200:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011208:	d308      	bcc.n	801121c <UART_SetConfig+0x288>
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011210:	d204      	bcs.n	801121c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	6a3a      	ldr	r2, [r7, #32]
 8011218:	60da      	str	r2, [r3, #12]
 801121a:	e0c9      	b.n	80113b0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801121c:	2301      	movs	r3, #1
 801121e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011222:	e0c5      	b.n	80113b0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	69db      	ldr	r3, [r3, #28]
 8011228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801122c:	d16d      	bne.n	801130a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801122e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011232:	3b01      	subs	r3, #1
 8011234:	2b07      	cmp	r3, #7
 8011236:	d82d      	bhi.n	8011294 <UART_SetConfig+0x300>
 8011238:	a201      	add	r2, pc, #4	@ (adr r2, 8011240 <UART_SetConfig+0x2ac>)
 801123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123e:	bf00      	nop
 8011240:	08011261 	.word	0x08011261
 8011244:	08011269 	.word	0x08011269
 8011248:	08011295 	.word	0x08011295
 801124c:	0801126f 	.word	0x0801126f
 8011250:	08011295 	.word	0x08011295
 8011254:	08011295 	.word	0x08011295
 8011258:	08011295 	.word	0x08011295
 801125c:	08011277 	.word	0x08011277
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011260:	f7fd f8de 	bl	800e420 <HAL_RCC_GetPCLK2Freq>
 8011264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011266:	e01b      	b.n	80112a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011268:	4b08      	ldr	r3, [pc, #32]	@ (801128c <UART_SetConfig+0x2f8>)
 801126a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801126c:	e018      	b.n	80112a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801126e:	f7fd f841 	bl	800e2f4 <HAL_RCC_GetSysClockFreq>
 8011272:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011274:	e014      	b.n	80112a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801127a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801127c:	e010      	b.n	80112a0 <UART_SetConfig+0x30c>
 801127e:	bf00      	nop
 8011280:	cfff69f3 	.word	0xcfff69f3
 8011284:	40008000 	.word	0x40008000
 8011288:	40013800 	.word	0x40013800
 801128c:	00f42400 	.word	0x00f42400
 8011290:	08019ad4 	.word	0x08019ad4
      default:
        pclk = 0U;
 8011294:	2300      	movs	r3, #0
 8011296:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011298:	2301      	movs	r3, #1
 801129a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801129e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80112a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f000 8084 	beq.w	80113b0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ac:	4a4b      	ldr	r2, [pc, #300]	@ (80113dc <UART_SetConfig+0x448>)
 80112ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112b2:	461a      	mov	r2, r3
 80112b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80112ba:	005a      	lsls	r2, r3, #1
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	085b      	lsrs	r3, r3, #1
 80112c2:	441a      	add	r2, r3
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	2b0f      	cmp	r3, #15
 80112d2:	d916      	bls.n	8011302 <UART_SetConfig+0x36e>
 80112d4:	6a3b      	ldr	r3, [r7, #32]
 80112d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112da:	d212      	bcs.n	8011302 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112dc:	6a3b      	ldr	r3, [r7, #32]
 80112de:	b29b      	uxth	r3, r3
 80112e0:	f023 030f 	bic.w	r3, r3, #15
 80112e4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112e6:	6a3b      	ldr	r3, [r7, #32]
 80112e8:	085b      	lsrs	r3, r3, #1
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	f003 0307 	and.w	r3, r3, #7
 80112f0:	b29a      	uxth	r2, r3
 80112f2:	8bfb      	ldrh	r3, [r7, #30]
 80112f4:	4313      	orrs	r3, r2
 80112f6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	8bfa      	ldrh	r2, [r7, #30]
 80112fe:	60da      	str	r2, [r3, #12]
 8011300:	e056      	b.n	80113b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011302:	2301      	movs	r3, #1
 8011304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011308:	e052      	b.n	80113b0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801130a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801130e:	3b01      	subs	r3, #1
 8011310:	2b07      	cmp	r3, #7
 8011312:	d822      	bhi.n	801135a <UART_SetConfig+0x3c6>
 8011314:	a201      	add	r2, pc, #4	@ (adr r2, 801131c <UART_SetConfig+0x388>)
 8011316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131a:	bf00      	nop
 801131c:	0801133d 	.word	0x0801133d
 8011320:	08011345 	.word	0x08011345
 8011324:	0801135b 	.word	0x0801135b
 8011328:	0801134b 	.word	0x0801134b
 801132c:	0801135b 	.word	0x0801135b
 8011330:	0801135b 	.word	0x0801135b
 8011334:	0801135b 	.word	0x0801135b
 8011338:	08011353 	.word	0x08011353
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801133c:	f7fd f870 	bl	800e420 <HAL_RCC_GetPCLK2Freq>
 8011340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011342:	e010      	b.n	8011366 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011344:	4b26      	ldr	r3, [pc, #152]	@ (80113e0 <UART_SetConfig+0x44c>)
 8011346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011348:	e00d      	b.n	8011366 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801134a:	f7fc ffd3 	bl	800e2f4 <HAL_RCC_GetSysClockFreq>
 801134e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011350:	e009      	b.n	8011366 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011358:	e005      	b.n	8011366 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801135a:	2300      	movs	r3, #0
 801135c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801135e:	2301      	movs	r3, #1
 8011360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011364:	bf00      	nop
    }

    if (pclk != 0U)
 8011366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011368:	2b00      	cmp	r3, #0
 801136a:	d021      	beq.n	80113b0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011370:	4a1a      	ldr	r2, [pc, #104]	@ (80113dc <UART_SetConfig+0x448>)
 8011372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011376:	461a      	mov	r2, r3
 8011378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801137a:	fbb3 f2f2 	udiv	r2, r3, r2
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	085b      	lsrs	r3, r3, #1
 8011384:	441a      	add	r2, r3
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	fbb2 f3f3 	udiv	r3, r2, r3
 801138e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011390:	6a3b      	ldr	r3, [r7, #32]
 8011392:	2b0f      	cmp	r3, #15
 8011394:	d909      	bls.n	80113aa <UART_SetConfig+0x416>
 8011396:	6a3b      	ldr	r3, [r7, #32]
 8011398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801139c:	d205      	bcs.n	80113aa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801139e:	6a3b      	ldr	r3, [r7, #32]
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	60da      	str	r2, [r3, #12]
 80113a8:	e002      	b.n	80113b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2201      	movs	r2, #1
 80113b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	2201      	movs	r2, #1
 80113bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	2200      	movs	r2, #0
 80113c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	2200      	movs	r2, #0
 80113ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80113cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3730      	adds	r7, #48	@ 0x30
 80113d4:	46bd      	mov	sp, r7
 80113d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80113da:	bf00      	nop
 80113dc:	08019ad4 	.word	0x08019ad4
 80113e0:	00f42400 	.word	0x00f42400

080113e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113f0:	f003 0308 	and.w	r3, r3, #8
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d00a      	beq.n	801140e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	430a      	orrs	r2, r1
 801140c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011412:	f003 0301 	and.w	r3, r3, #1
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00a      	beq.n	8011430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	430a      	orrs	r2, r1
 801142e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011434:	f003 0302 	and.w	r3, r3, #2
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00a      	beq.n	8011452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	430a      	orrs	r2, r1
 8011450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011456:	f003 0304 	and.w	r3, r3, #4
 801145a:	2b00      	cmp	r3, #0
 801145c:	d00a      	beq.n	8011474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	430a      	orrs	r2, r1
 8011472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011478:	f003 0310 	and.w	r3, r3, #16
 801147c:	2b00      	cmp	r3, #0
 801147e:	d00a      	beq.n	8011496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	430a      	orrs	r2, r1
 8011494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801149a:	f003 0320 	and.w	r3, r3, #32
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00a      	beq.n	80114b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	430a      	orrs	r2, r1
 80114b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d01a      	beq.n	80114fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	430a      	orrs	r2, r1
 80114d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80114e2:	d10a      	bne.n	80114fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	430a      	orrs	r2, r1
 80114f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011502:	2b00      	cmp	r3, #0
 8011504:	d00a      	beq.n	801151c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	430a      	orrs	r2, r1
 801151a:	605a      	str	r2, [r3, #4]
  }
}
 801151c:	bf00      	nop
 801151e:	370c      	adds	r7, #12
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr

08011528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b098      	sub	sp, #96	@ 0x60
 801152c:	af02      	add	r7, sp, #8
 801152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011538:	f7f9 fdb6 	bl	800b0a8 <HAL_GetTick>
 801153c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f003 0308 	and.w	r3, r3, #8
 8011548:	2b08      	cmp	r3, #8
 801154a:	d12f      	bne.n	80115ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801154c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011554:	2200      	movs	r2, #0
 8011556:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 f88e 	bl	801167c <UART_WaitOnFlagUntilTimeout>
 8011560:	4603      	mov	r3, r0
 8011562:	2b00      	cmp	r3, #0
 8011564:	d022      	beq.n	80115ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801156c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801156e:	e853 3f00 	ldrex	r3, [r3]
 8011572:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801157a:	653b      	str	r3, [r7, #80]	@ 0x50
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	461a      	mov	r2, r3
 8011582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011584:	647b      	str	r3, [r7, #68]	@ 0x44
 8011586:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801158a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801158c:	e841 2300 	strex	r3, r2, [r1]
 8011590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011594:	2b00      	cmp	r3, #0
 8011596:	d1e6      	bne.n	8011566 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2220      	movs	r2, #32
 801159c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115a8:	2303      	movs	r3, #3
 80115aa:	e063      	b.n	8011674 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f003 0304 	and.w	r3, r3, #4
 80115b6:	2b04      	cmp	r3, #4
 80115b8:	d149      	bne.n	801164e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115c2:	2200      	movs	r2, #0
 80115c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 f857 	bl	801167c <UART_WaitOnFlagUntilTimeout>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d03c      	beq.n	801164e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115dc:	e853 3f00 	ldrex	r3, [r3]
 80115e0:	623b      	str	r3, [r7, #32]
   return(result);
 80115e2:	6a3b      	ldr	r3, [r7, #32]
 80115e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80115e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	461a      	mov	r2, r3
 80115f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80115f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115fa:	e841 2300 	strex	r3, r2, [r1]
 80115fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1e6      	bne.n	80115d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	3308      	adds	r3, #8
 801160c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	e853 3f00 	ldrex	r3, [r3]
 8011614:	60fb      	str	r3, [r7, #12]
   return(result);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f023 0301 	bic.w	r3, r3, #1
 801161c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	3308      	adds	r3, #8
 8011624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011626:	61fa      	str	r2, [r7, #28]
 8011628:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162a:	69b9      	ldr	r1, [r7, #24]
 801162c:	69fa      	ldr	r2, [r7, #28]
 801162e:	e841 2300 	strex	r3, r2, [r1]
 8011632:	617b      	str	r3, [r7, #20]
   return(result);
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1e5      	bne.n	8011606 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2220      	movs	r2, #32
 801163e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2200      	movs	r2, #0
 8011646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801164a:	2303      	movs	r3, #3
 801164c:	e012      	b.n	8011674 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2220      	movs	r2, #32
 8011652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2220      	movs	r2, #32
 801165a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011672:	2300      	movs	r3, #0
}
 8011674:	4618      	mov	r0, r3
 8011676:	3758      	adds	r7, #88	@ 0x58
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	603b      	str	r3, [r7, #0]
 8011688:	4613      	mov	r3, r2
 801168a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801168c:	e04f      	b.n	801172e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011694:	d04b      	beq.n	801172e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011696:	f7f9 fd07 	bl	800b0a8 <HAL_GetTick>
 801169a:	4602      	mov	r2, r0
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	69ba      	ldr	r2, [r7, #24]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d302      	bcc.n	80116ac <UART_WaitOnFlagUntilTimeout+0x30>
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d101      	bne.n	80116b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80116ac:	2303      	movs	r3, #3
 80116ae:	e04e      	b.n	801174e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f003 0304 	and.w	r3, r3, #4
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d037      	beq.n	801172e <UART_WaitOnFlagUntilTimeout+0xb2>
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2b80      	cmp	r3, #128	@ 0x80
 80116c2:	d034      	beq.n	801172e <UART_WaitOnFlagUntilTimeout+0xb2>
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2b40      	cmp	r3, #64	@ 0x40
 80116c8:	d031      	beq.n	801172e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	69db      	ldr	r3, [r3, #28]
 80116d0:	f003 0308 	and.w	r3, r3, #8
 80116d4:	2b08      	cmp	r3, #8
 80116d6:	d110      	bne.n	80116fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2208      	movs	r2, #8
 80116de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f000 f838 	bl	8011756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2208      	movs	r2, #8
 80116ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80116f6:	2301      	movs	r3, #1
 80116f8:	e029      	b.n	801174e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	69db      	ldr	r3, [r3, #28]
 8011700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011708:	d111      	bne.n	801172e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 f81e 	bl	8011756 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2220      	movs	r2, #32
 801171e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2200      	movs	r2, #0
 8011726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801172a:	2303      	movs	r3, #3
 801172c:	e00f      	b.n	801174e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	69da      	ldr	r2, [r3, #28]
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	4013      	ands	r3, r2
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	429a      	cmp	r2, r3
 801173c:	bf0c      	ite	eq
 801173e:	2301      	moveq	r3, #1
 8011740:	2300      	movne	r3, #0
 8011742:	b2db      	uxtb	r3, r3
 8011744:	461a      	mov	r2, r3
 8011746:	79fb      	ldrb	r3, [r7, #7]
 8011748:	429a      	cmp	r2, r3
 801174a:	d0a0      	beq.n	801168e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801174c:	2300      	movs	r3, #0
}
 801174e:	4618      	mov	r0, r3
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}

08011756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011756:	b480      	push	{r7}
 8011758:	b095      	sub	sp, #84	@ 0x54
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011766:	e853 3f00 	ldrex	r3, [r3]
 801176a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	461a      	mov	r2, r3
 801177a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801177c:	643b      	str	r3, [r7, #64]	@ 0x40
 801177e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011780:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011784:	e841 2300 	strex	r3, r2, [r1]
 8011788:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1e6      	bne.n	801175e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	3308      	adds	r3, #8
 8011796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	e853 3f00 	ldrex	r3, [r3]
 801179e:	61fb      	str	r3, [r7, #28]
   return(result);
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80117a6:	f023 0301 	bic.w	r3, r3, #1
 80117aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	3308      	adds	r3, #8
 80117b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80117b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117bc:	e841 2300 	strex	r3, r2, [r1]
 80117c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80117c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1e3      	bne.n	8011790 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d118      	bne.n	8011802 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	e853 3f00 	ldrex	r3, [r3]
 80117dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	f023 0310 	bic.w	r3, r3, #16
 80117e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	461a      	mov	r2, r3
 80117ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117ee:	61bb      	str	r3, [r7, #24]
 80117f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f2:	6979      	ldr	r1, [r7, #20]
 80117f4:	69ba      	ldr	r2, [r7, #24]
 80117f6:	e841 2300 	strex	r3, r2, [r1]
 80117fa:	613b      	str	r3, [r7, #16]
   return(result);
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1e6      	bne.n	80117d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2220      	movs	r2, #32
 8011806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2200      	movs	r2, #0
 8011814:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011816:	bf00      	nop
 8011818:	3754      	adds	r7, #84	@ 0x54
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011822:	b580      	push	{r7, lr}
 8011824:	b084      	sub	sp, #16
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801182e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2200      	movs	r2, #0
 801183c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f7ff fb91 	bl	8010f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011846:	bf00      	nop
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b088      	sub	sp, #32
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	e853 3f00 	ldrex	r3, [r3]
 8011862:	60bb      	str	r3, [r7, #8]
   return(result);
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801186a:	61fb      	str	r3, [r7, #28]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	461a      	mov	r2, r3
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	61bb      	str	r3, [r7, #24]
 8011876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011878:	6979      	ldr	r1, [r7, #20]
 801187a:	69ba      	ldr	r2, [r7, #24]
 801187c:	e841 2300 	strex	r3, r2, [r1]
 8011880:	613b      	str	r3, [r7, #16]
   return(result);
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d1e6      	bne.n	8011856 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2220      	movs	r2, #32
 801188c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2200      	movs	r2, #0
 8011894:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7ff fb5c 	bl	8010f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801189c:	bf00      	nop
 801189e:	3720      	adds	r7, #32
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80118d4:	bf00      	nop
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d101      	bne.n	80118f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80118f2:	2302      	movs	r3, #2
 80118f4:	e027      	b.n	8011946 <HAL_UARTEx_DisableFifoMode+0x66>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2201      	movs	r2, #1
 80118fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2224      	movs	r2, #36	@ 0x24
 8011902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	681a      	ldr	r2, [r3, #0]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f022 0201 	bic.w	r2, r2, #1
 801191c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2220      	movs	r2, #32
 8011938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011944:	2300      	movs	r3, #0
}
 8011946:	4618      	mov	r0, r3
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr

08011952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011962:	2b01      	cmp	r3, #1
 8011964:	d101      	bne.n	801196a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011966:	2302      	movs	r3, #2
 8011968:	e02d      	b.n	80119c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2201      	movs	r2, #1
 801196e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2224      	movs	r2, #36	@ 0x24
 8011976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f022 0201 	bic.w	r2, r2, #1
 8011990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	683a      	ldr	r2, [r7, #0]
 80119a2:	430a      	orrs	r2, r1
 80119a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 f850 	bl	8011a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2220      	movs	r2, #32
 80119b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3710      	adds	r7, #16
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b084      	sub	sp, #16
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
 80119d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d101      	bne.n	80119e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119e2:	2302      	movs	r3, #2
 80119e4:	e02d      	b.n	8011a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2201      	movs	r2, #1
 80119ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2224      	movs	r2, #36	@ 0x24
 80119f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f022 0201 	bic.w	r2, r2, #1
 8011a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	430a      	orrs	r2, r1
 8011a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f812 	bl	8011a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2220      	movs	r2, #32
 8011a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a40:	2300      	movs	r3, #0
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3710      	adds	r7, #16
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
	...

08011a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b085      	sub	sp, #20
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d108      	bne.n	8011a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a6c:	e031      	b.n	8011ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a6e:	2308      	movs	r3, #8
 8011a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a72:	2308      	movs	r3, #8
 8011a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	689b      	ldr	r3, [r3, #8]
 8011a7c:	0e5b      	lsrs	r3, r3, #25
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	f003 0307 	and.w	r3, r3, #7
 8011a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	689b      	ldr	r3, [r3, #8]
 8011a8c:	0f5b      	lsrs	r3, r3, #29
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	f003 0307 	and.w	r3, r3, #7
 8011a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a96:	7bbb      	ldrb	r3, [r7, #14]
 8011a98:	7b3a      	ldrb	r2, [r7, #12]
 8011a9a:	4911      	ldr	r1, [pc, #68]	@ (8011ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8011a9c:	5c8a      	ldrb	r2, [r1, r2]
 8011a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011aa2:	7b3a      	ldrb	r2, [r7, #12]
 8011aa4:	490f      	ldr	r1, [pc, #60]	@ (8011ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8011aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ab4:	7bfb      	ldrb	r3, [r7, #15]
 8011ab6:	7b7a      	ldrb	r2, [r7, #13]
 8011ab8:	4909      	ldr	r1, [pc, #36]	@ (8011ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8011aba:	5c8a      	ldrb	r2, [r1, r2]
 8011abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ac0:	7b7a      	ldrb	r2, [r7, #13]
 8011ac2:	4908      	ldr	r1, [pc, #32]	@ (8011ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8011ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011ad2:	bf00      	nop
 8011ad4:	3714      	adds	r7, #20
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	08019aec 	.word	0x08019aec
 8011ae4:	08019af4 	.word	0x08019af4

08011ae8 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8011af4:	215c      	movs	r1, #92	@ 0x5c
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f005 fb0b 	bl	8017112 <strrchr>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d007      	beq.n	8011b12 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8011b02:	215c      	movs	r1, #92	@ 0x5c
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f005 fb04 	bl	8017112 <strrchr>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	60fb      	str	r3, [r7, #12]
 8011b10:	e00d      	b.n	8011b2e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8011b12:	212f      	movs	r1, #47	@ 0x2f
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f005 fafc 	bl	8017112 <strrchr>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d006      	beq.n	8011b2e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011b20:	212f      	movs	r1, #47	@ 0x2f
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f005 faf5 	bl	8017112 <strrchr>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3710      	adds	r7, #16
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	4603      	mov	r3, r0
 8011b40:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011b42:	4b0f      	ldr	r3, [pc, #60]	@ (8011b80 <OTP_Read+0x48>)
 8011b44:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011b46:	e002      	b.n	8011b4e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	3b08      	subs	r3, #8
 8011b4c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	3307      	adds	r3, #7
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	79fa      	ldrb	r2, [r7, #7]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d003      	beq.n	8011b62 <OTP_Read+0x2a>
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	4a09      	ldr	r2, [pc, #36]	@ (8011b84 <OTP_Read+0x4c>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d1f2      	bne.n	8011b48 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	3307      	adds	r3, #7
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	79fa      	ldrb	r2, [r7, #7]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d001      	beq.n	8011b72 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8011b72:	68fb      	ldr	r3, [r7, #12]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3714      	adds	r7, #20
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7e:	4770      	bx	lr
 8011b80:	1fff73f8 	.word	0x1fff73f8
 8011b84:	1fff7000 	.word	0x1fff7000

08011b88 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b086      	sub	sp, #24
 8011b8c:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011b8e:	1d3b      	adds	r3, r7, #4
 8011b90:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	2200      	movs	r2, #0
 8011b96:	2100      	movs	r1, #0
 8011b98:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 8011b9c:	f000 f920 	bl	8011de0 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	330b      	adds	r3, #11
 8011ba4:	78db      	ldrb	r3, [r3, #3]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3718      	adds	r7, #24
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
	...

08011bb0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b08b      	sub	sp, #44	@ 0x2c
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8011bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8011d04 <SHCI_GetWirelessFwInfo+0x154>)
 8011bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011be0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011bea:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4a44      	ldr	r2, [pc, #272]	@ (8011d08 <SHCI_GetWirelessFwInfo+0x158>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d10f      	bne.n	8011c1c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	695b      	ldr	r3, [r3, #20]
 8011c00:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	69db      	ldr	r3, [r3, #28]
 8011c0c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	691b      	ldr	r3, [r3, #16]
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	e01a      	b.n	8011c52 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011c24:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011c28:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	691b      	ldr	r3, [r3, #16]
 8011c30:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	695b      	ldr	r3, [r3, #20]
 8011c38:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	699b      	ldr	r3, [r3, #24]
 8011c40:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	685b      	ldr	r3, [r3, #4]
 8011c48:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	689b      	ldr	r3, [r3, #8]
 8011c50:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c54:	0e1b      	lsrs	r3, r3, #24
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5e:	0c1b      	lsrs	r3, r3, #16
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c68:	0a1b      	lsrs	r3, r3, #8
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8011c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c72:	091b      	lsrs	r3, r3, #4
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	f003 030f 	and.w	r3, r3, #15
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8011c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	f003 030f 	and.w	r3, r3, #15
 8011c88:	b2da      	uxtb	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011c8e:	6a3b      	ldr	r3, [r7, #32]
 8011c90:	0e1b      	lsrs	r3, r3, #24
 8011c92:	b2da      	uxtb	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011c98:	6a3b      	ldr	r3, [r7, #32]
 8011c9a:	0c1b      	lsrs	r3, r3, #16
 8011c9c:	b2da      	uxtb	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8011ca2:	6a3b      	ldr	r3, [r7, #32]
 8011ca4:	0a1b      	lsrs	r3, r3, #8
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	b2da      	uxtb	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	b2da      	uxtb	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011cbc:	69bb      	ldr	r3, [r7, #24]
 8011cbe:	0e1b      	lsrs	r3, r3, #24
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	0c1b      	lsrs	r3, r3, #16
 8011cca:	b2da      	uxtb	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	0a1b      	lsrs	r3, r3, #8
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	0e1b      	lsrs	r3, r3, #24
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	0c1b      	lsrs	r3, r3, #16
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	b2da      	uxtb	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	372c      	adds	r7, #44	@ 0x2c
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	58004000 	.word	0x58004000
 8011d08:	a94656b9 	.word	0xa94656b9

08011d0c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	4a08      	ldr	r2, [pc, #32]	@ (8011d3c <shci_init+0x30>)
 8011d1c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011d1e:	4a08      	ldr	r2, [pc, #32]	@ (8011d40 <shci_init+0x34>)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011d24:	4806      	ldr	r0, [pc, #24]	@ (8011d40 <shci_init+0x34>)
 8011d26:	f000 f915 	bl	8011f54 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f000 f898 	bl	8011e64 <TlInit>

  return;
 8011d34:	bf00      	nop
}
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	20000554 	.word	0x20000554
 8011d40:	20000534 	.word	0x20000534

08011d44 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011d4a:	4822      	ldr	r0, [pc, #136]	@ (8011dd4 <shci_user_evt_proc+0x90>)
 8011d4c:	f000 f926 	bl	8011f9c <LST_is_empty>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d12b      	bne.n	8011dae <shci_user_evt_proc+0x6a>
 8011d56:	4b20      	ldr	r3, [pc, #128]	@ (8011dd8 <shci_user_evt_proc+0x94>)
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d027      	beq.n	8011dae <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011d5e:	f107 030c 	add.w	r3, r7, #12
 8011d62:	4619      	mov	r1, r3
 8011d64:	481b      	ldr	r0, [pc, #108]	@ (8011dd4 <shci_user_evt_proc+0x90>)
 8011d66:	f000 f9a8 	bl	80120ba <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8011ddc <shci_user_evt_proc+0x98>)
 8011d6c:	69db      	ldr	r3, [r3, #28]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d00c      	beq.n	8011d8c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8011d76:	2301      	movs	r3, #1
 8011d78:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011d7a:	4b18      	ldr	r3, [pc, #96]	@ (8011ddc <shci_user_evt_proc+0x98>)
 8011d7c:	69db      	ldr	r3, [r3, #28]
 8011d7e:	1d3a      	adds	r2, r7, #4
 8011d80:	4610      	mov	r0, r2
 8011d82:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8011d84:	793a      	ldrb	r2, [r7, #4]
 8011d86:	4b14      	ldr	r3, [pc, #80]	@ (8011dd8 <shci_user_evt_proc+0x94>)
 8011d88:	701a      	strb	r2, [r3, #0]
 8011d8a:	e002      	b.n	8011d92 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011d8c:	4b12      	ldr	r3, [pc, #72]	@ (8011dd8 <shci_user_evt_proc+0x94>)
 8011d8e:	2201      	movs	r2, #1
 8011d90:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8011d92:	4b11      	ldr	r3, [pc, #68]	@ (8011dd8 <shci_user_evt_proc+0x94>)
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d004      	beq.n	8011da4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f000 fb49 	bl	8012434 <TL_MM_EvtDone>
 8011da2:	e004      	b.n	8011dae <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	4619      	mov	r1, r3
 8011da8:	480a      	ldr	r0, [pc, #40]	@ (8011dd4 <shci_user_evt_proc+0x90>)
 8011daa:	f000 f919 	bl	8011fe0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011dae:	4809      	ldr	r0, [pc, #36]	@ (8011dd4 <shci_user_evt_proc+0x90>)
 8011db0:	f000 f8f4 	bl	8011f9c <LST_is_empty>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d107      	bne.n	8011dca <shci_user_evt_proc+0x86>
 8011dba:	4b07      	ldr	r3, [pc, #28]	@ (8011dd8 <shci_user_evt_proc+0x94>)
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d003      	beq.n	8011dca <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011dc2:	4804      	ldr	r0, [pc, #16]	@ (8011dd4 <shci_user_evt_proc+0x90>)
 8011dc4:	f7f7 f95e 	bl	8009084 <shci_notify_asynch_evt>
  }


  return;
 8011dc8:	bf00      	nop
 8011dca:	bf00      	nop
}
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	200000f8 	.word	0x200000f8
 8011dd8:	20000108 	.word	0x20000108
 8011ddc:	20000534 	.word	0x20000534

08011de0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60ba      	str	r2, [r7, #8]
 8011de8:	607b      	str	r3, [r7, #4]
 8011dea:	4603      	mov	r3, r0
 8011dec:	81fb      	strh	r3, [r7, #14]
 8011dee:	460b      	mov	r3, r1
 8011df0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011df2:	2000      	movs	r0, #0
 8011df4:	f000 f868 	bl	8011ec8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011df8:	4b17      	ldr	r3, [pc, #92]	@ (8011e58 <shci_send+0x78>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	89fa      	ldrh	r2, [r7, #14]
 8011dfe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011e02:	4b15      	ldr	r3, [pc, #84]	@ (8011e58 <shci_send+0x78>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	7b7a      	ldrb	r2, [r7, #13]
 8011e08:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011e0a:	4b13      	ldr	r3, [pc, #76]	@ (8011e58 <shci_send+0x78>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	330c      	adds	r3, #12
 8011e10:	7b7a      	ldrb	r2, [r7, #13]
 8011e12:	68b9      	ldr	r1, [r7, #8]
 8011e14:	4618      	mov	r0, r3
 8011e16:	f005 fa18 	bl	801724a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011e1a:	4b10      	ldr	r3, [pc, #64]	@ (8011e5c <shci_send+0x7c>)
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011e20:	4b0f      	ldr	r3, [pc, #60]	@ (8011e60 <shci_send+0x80>)
 8011e22:	691b      	ldr	r3, [r3, #16]
 8011e24:	2100      	movs	r1, #0
 8011e26:	2000      	movs	r0, #0
 8011e28:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011e2a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011e2e:	f7f7 f940 	bl	80090b2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f103 0008 	add.w	r0, r3, #8
 8011e38:	4b07      	ldr	r3, [pc, #28]	@ (8011e58 <shci_send+0x78>)
 8011e3a:	6819      	ldr	r1, [r3, #0]
 8011e3c:	4b06      	ldr	r3, [pc, #24]	@ (8011e58 <shci_send+0x78>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	789b      	ldrb	r3, [r3, #2]
 8011e42:	3303      	adds	r3, #3
 8011e44:	461a      	mov	r2, r3
 8011e46:	f005 fa00 	bl	801724a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011e4a:	2001      	movs	r0, #1
 8011e4c:	f000 f83c 	bl	8011ec8 <Cmd_SetStatus>

  return;
 8011e50:	bf00      	nop
}
 8011e52:	3710      	adds	r7, #16
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20000104 	.word	0x20000104
 8011e5c:	20000558 	.word	0x20000558
 8011e60:	20000534 	.word	0x20000534

08011e64 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b086      	sub	sp, #24
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8011e6c:	4a10      	ldr	r2, [pc, #64]	@ (8011eb0 <TlInit+0x4c>)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8011e72:	4810      	ldr	r0, [pc, #64]	@ (8011eb4 <TlInit+0x50>)
 8011e74:	f000 f882 	bl	8011f7c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011e78:	2001      	movs	r0, #1
 8011e7a:	f000 f825 	bl	8011ec8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb8 <TlInit+0x54>)
 8011e80:	2201      	movs	r2, #1
 8011e82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8011e84:	4b0d      	ldr	r3, [pc, #52]	@ (8011ebc <TlInit+0x58>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d00c      	beq.n	8011ea6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8011e90:	4b0b      	ldr	r3, [pc, #44]	@ (8011ec0 <TlInit+0x5c>)
 8011e92:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8011e94:	4b0b      	ldr	r3, [pc, #44]	@ (8011ec4 <TlInit+0x60>)
 8011e96:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8011e98:	4b08      	ldr	r3, [pc, #32]	@ (8011ebc <TlInit+0x58>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f107 020c 	add.w	r2, r7, #12
 8011ea0:	4610      	mov	r0, r2
 8011ea2:	4798      	blx	r3
  }

  return;
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop
}
 8011ea8:	3718      	adds	r7, #24
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	20000104 	.word	0x20000104
 8011eb4:	200000f8 	.word	0x200000f8
 8011eb8:	20000108 	.word	0x20000108
 8011ebc:	20000534 	.word	0x20000534
 8011ec0:	08011f19 	.word	0x08011f19
 8011ec4:	08011f31 	.word	0x08011f31

08011ec8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	4603      	mov	r3, r0
 8011ed0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8011ed2:	79fb      	ldrb	r3, [r7, #7]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d10b      	bne.n	8011ef0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8011ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8011f10 <Cmd_SetStatus+0x48>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8011f10 <Cmd_SetStatus+0x48>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2000      	movs	r0, #0
 8011ee6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8011f14 <Cmd_SetStatus+0x4c>)
 8011eea:	2200      	movs	r2, #0
 8011eec:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011eee:	e00b      	b.n	8011f08 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011ef0:	4b08      	ldr	r3, [pc, #32]	@ (8011f14 <Cmd_SetStatus+0x4c>)
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8011ef6:	4b06      	ldr	r3, [pc, #24]	@ (8011f10 <Cmd_SetStatus+0x48>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d004      	beq.n	8011f08 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011efe:	4b04      	ldr	r3, [pc, #16]	@ (8011f10 <Cmd_SetStatus+0x48>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2001      	movs	r0, #1
 8011f04:	4798      	blx	r3
  return;
 8011f06:	bf00      	nop
 8011f08:	bf00      	nop
}
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	20000554 	.word	0x20000554
 8011f14:	20000100 	.word	0x20000100

08011f18 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011f20:	2000      	movs	r0, #0
 8011f22:	f7f7 f8bb 	bl	800909c <shci_cmd_resp_release>

  return;
 8011f26:	bf00      	nop
}
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
	...

08011f30 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011f38:	6879      	ldr	r1, [r7, #4]
 8011f3a:	4805      	ldr	r0, [pc, #20]	@ (8011f50 <TlUserEvtReceived+0x20>)
 8011f3c:	f000 f876 	bl	801202c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011f40:	4803      	ldr	r0, [pc, #12]	@ (8011f50 <TlUserEvtReceived+0x20>)
 8011f42:	f7f7 f89f 	bl	8009084 <shci_notify_asynch_evt>

  return;
 8011f46:	bf00      	nop
}
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	200000f8 	.word	0x200000f8

08011f54 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	4a05      	ldr	r2, [pc, #20]	@ (8011f74 <shci_register_io_bus+0x20>)
 8011f60:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4a04      	ldr	r2, [pc, #16]	@ (8011f78 <shci_register_io_bus+0x24>)
 8011f66:	611a      	str	r2, [r3, #16]

  return;
 8011f68:	bf00      	nop
}
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr
 8011f74:	080121ed 	.word	0x080121ed
 8011f78:	08012241 	.word	0x08012241

08011f7c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	605a      	str	r2, [r3, #4]
}
 8011f90:	bf00      	nop
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b087      	sub	sp, #28
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8011fa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8011faa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fae:	b672      	cpsid	i
}
 8011fb0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d102      	bne.n	8011fc2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	75fb      	strb	r3, [r7, #23]
 8011fc0:	e001      	b.n	8011fc6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	75fb      	strb	r3, [r7, #23]
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	f383 8810 	msr	PRIMASK, r3
}
 8011fd0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8011fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	371c      	adds	r7, #28
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fea:	f3ef 8310 	mrs	r3, PRIMASK
 8011fee:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ff4:	b672      	cpsid	i
}
 8011ff6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	683a      	ldr	r2, [r7, #0]
 801200a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	605a      	str	r2, [r3, #4]
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	f383 8810 	msr	PRIMASK, r3
}
 801201e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012020:	bf00      	nop
 8012022:	371c      	adds	r7, #28
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801202c:	b480      	push	{r7}
 801202e:	b087      	sub	sp, #28
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012036:	f3ef 8310 	mrs	r3, PRIMASK
 801203a:	60fb      	str	r3, [r7, #12]
  return(result);
 801203c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801203e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012040:	b672      	cpsid	i
}
 8012042:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	683a      	ldr	r2, [r7, #0]
 8012056:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	683a      	ldr	r2, [r7, #0]
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f383 8810 	msr	PRIMASK, r3
}
 801206a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801206c:	bf00      	nop
 801206e:	371c      	adds	r7, #28
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr

08012078 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012078:	b480      	push	{r7}
 801207a:	b087      	sub	sp, #28
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012080:	f3ef 8310 	mrs	r3, PRIMASK
 8012084:	60fb      	str	r3, [r7, #12]
  return(result);
 8012086:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801208a:	b672      	cpsid	i
}
 801208c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	6812      	ldr	r2, [r2, #0]
 8012096:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	6852      	ldr	r2, [r2, #4]
 80120a0:	605a      	str	r2, [r3, #4]
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	f383 8810 	msr	PRIMASK, r3
}
 80120ac:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80120ae:	bf00      	nop
 80120b0:	371c      	adds	r7, #28
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b086      	sub	sp, #24
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120c4:	f3ef 8310 	mrs	r3, PRIMASK
 80120c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80120ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80120cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80120ce:	b672      	cpsid	i
}
 80120d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ff ffca 	bl	8012078 <LST_remove_node>
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	f383 8810 	msr	PRIMASK, r3
}
 80120ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80120f0:	bf00      	nop
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80120fc:	f004 f8a2 	bl	8016244 <HW_IPCC_Enable>

  return;
 8012100:	bf00      	nop
}
 8012102:	bd80      	pop	{r7, pc}

08012104 <TL_Init>:


void TL_Init( void )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012108:	4b10      	ldr	r3, [pc, #64]	@ (801214c <TL_Init+0x48>)
 801210a:	4a11      	ldr	r2, [pc, #68]	@ (8012150 <TL_Init+0x4c>)
 801210c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801210e:	4b0f      	ldr	r3, [pc, #60]	@ (801214c <TL_Init+0x48>)
 8012110:	4a10      	ldr	r2, [pc, #64]	@ (8012154 <TL_Init+0x50>)
 8012112:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012114:	4b0d      	ldr	r3, [pc, #52]	@ (801214c <TL_Init+0x48>)
 8012116:	4a10      	ldr	r2, [pc, #64]	@ (8012158 <TL_Init+0x54>)
 8012118:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801211a:	4b0c      	ldr	r3, [pc, #48]	@ (801214c <TL_Init+0x48>)
 801211c:	4a0f      	ldr	r2, [pc, #60]	@ (801215c <TL_Init+0x58>)
 801211e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8012120:	4b0a      	ldr	r3, [pc, #40]	@ (801214c <TL_Init+0x48>)
 8012122:	4a0f      	ldr	r2, [pc, #60]	@ (8012160 <TL_Init+0x5c>)
 8012124:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012126:	4b09      	ldr	r3, [pc, #36]	@ (801214c <TL_Init+0x48>)
 8012128:	4a0e      	ldr	r2, [pc, #56]	@ (8012164 <TL_Init+0x60>)
 801212a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801212c:	4b07      	ldr	r3, [pc, #28]	@ (801214c <TL_Init+0x48>)
 801212e:	4a0e      	ldr	r2, [pc, #56]	@ (8012168 <TL_Init+0x64>)
 8012130:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012132:	4b06      	ldr	r3, [pc, #24]	@ (801214c <TL_Init+0x48>)
 8012134:	4a0d      	ldr	r2, [pc, #52]	@ (801216c <TL_Init+0x68>)
 8012136:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012138:	4b04      	ldr	r3, [pc, #16]	@ (801214c <TL_Init+0x48>)
 801213a:	4a0d      	ldr	r2, [pc, #52]	@ (8012170 <TL_Init+0x6c>)
 801213c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801213e:	4b03      	ldr	r3, [pc, #12]	@ (801214c <TL_Init+0x48>)
 8012140:	4a0c      	ldr	r2, [pc, #48]	@ (8012174 <TL_Init+0x70>)
 8012142:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012144:	f004 f892 	bl	801626c <HW_IPCC_Init>

  return;
 8012148:	bf00      	nop
}
 801214a:	bd80      	pop	{r7, pc}
 801214c:	20030000 	.word	0x20030000
 8012150:	20030028 	.word	0x20030028
 8012154:	20030048 	.word	0x20030048
 8012158:	20030058 	.word	0x20030058
 801215c:	20030068 	.word	0x20030068
 8012160:	20030070 	.word	0x20030070
 8012164:	20030078 	.word	0x20030078
 8012168:	20030080 	.word	0x20030080
 801216c:	2003009c 	.word	0x2003009c
 8012170:	200300a0 	.word	0x200300a0
 8012174:	200300ac 	.word	0x200300ac

08012178 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801217e:	e01c      	b.n	80121ba <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012180:	1d3b      	adds	r3, r7, #4
 8012182:	4619      	mov	r1, r3
 8012184:	4812      	ldr	r0, [pc, #72]	@ (80121d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8012186:	f7ff ff98 	bl	80120ba <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	7a5b      	ldrb	r3, [r3, #9]
 801218e:	2b0f      	cmp	r3, #15
 8012190:	d003      	beq.n	801219a <HW_IPCC_BLE_RxEvtNot+0x22>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	7a5b      	ldrb	r3, [r3, #9]
 8012196:	2b0e      	cmp	r3, #14
 8012198:	d105      	bne.n	80121a6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4619      	mov	r1, r3
 801219e:	2002      	movs	r0, #2
 80121a0:	f000 f9ac 	bl	80124fc <OutputDbgTrace>
 80121a4:	e004      	b.n	80121b0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4619      	mov	r1, r3
 80121aa:	2003      	movs	r0, #3
 80121ac:	f000 f9a6 	bl	80124fc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80121b0:	4b08      	ldr	r3, [pc, #32]	@ (80121d4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4610      	mov	r0, r2
 80121b8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80121ba:	4805      	ldr	r0, [pc, #20]	@ (80121d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80121bc:	f7ff feee 	bl	8011f9c <LST_is_empty>
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d0dc      	beq.n	8012180 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80121c6:	bf00      	nop
}
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	200300c8 	.word	0x200300c8
 80121d4:	20000564 	.word	0x20000564

080121d8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80121dc:	4b02      	ldr	r3, [pc, #8]	@ (80121e8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4798      	blx	r3

  return;
 80121e2:	bf00      	nop
}
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	20000568 	.word	0x20000568

080121ec <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80121f8:	480d      	ldr	r0, [pc, #52]	@ (8012230 <TL_SYS_Init+0x44>)
 80121fa:	f7ff febf 	bl	8011f7c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80121fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012234 <TL_SYS_Init+0x48>)
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	689a      	ldr	r2, [r3, #8]
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	4a08      	ldr	r2, [pc, #32]	@ (8012230 <TL_SYS_Init+0x44>)
 8012210:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8012212:	f004 f859 	bl	80162c8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4a07      	ldr	r2, [pc, #28]	@ (8012238 <TL_SYS_Init+0x4c>)
 801221c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	4a06      	ldr	r2, [pc, #24]	@ (801223c <TL_SYS_Init+0x50>)
 8012224:	6013      	str	r3, [r2, #0]

  return 0;
 8012226:	2300      	movs	r3, #0
}
 8012228:	4618      	mov	r0, r3
 801222a:	3710      	adds	r7, #16
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	200300d0 	.word	0x200300d0
 8012234:	20030000 	.word	0x20030000
 8012238:	2000056c 	.word	0x2000056c
 801223c:	20000570 	.word	0x20000570

08012240 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	460b      	mov	r3, r1
 801224a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 801224c:	4b09      	ldr	r3, [pc, #36]	@ (8012274 <TL_SYS_SendCmd+0x34>)
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	2210      	movs	r2, #16
 8012254:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8012256:	4b07      	ldr	r3, [pc, #28]	@ (8012274 <TL_SYS_SendCmd+0x34>)
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4619      	mov	r1, r3
 801225e:	2004      	movs	r0, #4
 8012260:	f000 f94c 	bl	80124fc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012264:	f004 f83a 	bl	80162dc <HW_IPCC_SYS_SendCmd>

  return 0;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3708      	adds	r7, #8
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20030000 	.word	0x20030000

08012278 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801227c:	4b07      	ldr	r3, [pc, #28]	@ (801229c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	4619      	mov	r1, r3
 8012284:	2005      	movs	r0, #5
 8012286:	f000 f939 	bl	80124fc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801228a:	4b05      	ldr	r3, [pc, #20]	@ (80122a0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	4a03      	ldr	r2, [pc, #12]	@ (801229c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012290:	68d2      	ldr	r2, [r2, #12]
 8012292:	6812      	ldr	r2, [r2, #0]
 8012294:	4610      	mov	r0, r2
 8012296:	4798      	blx	r3

  return;
 8012298:	bf00      	nop
}
 801229a:	bd80      	pop	{r7, pc}
 801229c:	20030000 	.word	0x20030000
 80122a0:	2000056c 	.word	0x2000056c

080122a4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80122aa:	e00e      	b.n	80122ca <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80122ac:	1d3b      	adds	r3, r7, #4
 80122ae:	4619      	mov	r1, r3
 80122b0:	480b      	ldr	r0, [pc, #44]	@ (80122e0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80122b2:	f7ff ff02 	bl	80120ba <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4619      	mov	r1, r3
 80122ba:	2006      	movs	r0, #6
 80122bc:	f000 f91e 	bl	80124fc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80122c0:	4b08      	ldr	r3, [pc, #32]	@ (80122e4 <HW_IPCC_SYS_EvtNot+0x40>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	4610      	mov	r0, r2
 80122c8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80122ca:	4805      	ldr	r0, [pc, #20]	@ (80122e0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80122cc:	f7ff fe66 	bl	8011f9c <LST_is_empty>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d0ea      	beq.n	80122ac <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80122d6:	bf00      	nop
}
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	200300d0 	.word	0x200300d0
 80122e4:	20000570 	.word	0x20000570

080122e8 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 80122f0:	4b0a      	ldr	r3, [pc, #40]	@ (801231c <TL_ZIGBEE_Init+0x34>)
 80122f2:	69db      	ldr	r3, [r3, #28]
 80122f4:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	685a      	ldr	r2, [r3, #4]
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	689a      	ldr	r2, [r3, #8]
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 801230e:	f004 f80b 	bl	8016328 <HW_IPCC_ZIGBEE_Init>

  return;
 8012312:	bf00      	nop
}
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	20030000 	.word	0x20030000

08012320 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 8012320:	b580      	push	{r7, lr}
 8012322:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8012324:	4b04      	ldr	r3, [pc, #16]	@ (8012338 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8012326:	69db      	ldr	r3, [r3, #28]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	2208      	movs	r2, #8
 801232c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 801232e:	f004 f809 	bl	8016344 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 8012332:	bf00      	nop
}
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20030000 	.word	0x20030000

0801233c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8012340:	4b03      	ldr	r3, [pc, #12]	@ (8012350 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8012342:	69db      	ldr	r3, [r3, #28]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	4618      	mov	r0, r3
 8012348:	f003 fcb8 	bl	8015cbc <TL_ZIGBEE_CmdEvtReceived>

  return;
 801234c:	bf00      	nop
}
 801234e:	bd80      	pop	{r7, pc}
 8012350:	20030000 	.word	0x20030000

08012354 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8012358:	4b03      	ldr	r3, [pc, #12]	@ (8012368 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 801235a:	69db      	ldr	r3, [r3, #28]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4618      	mov	r0, r3
 8012360:	f003 fcb6 	bl	8015cd0 <TL_ZIGBEE_NotReceived>

  return;
 8012364:	bf00      	nop
}
 8012366:	bd80      	pop	{r7, pc}
 8012368:	20030000 	.word	0x20030000

0801236c <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 8012370:	4b04      	ldr	r3, [pc, #16]	@ (8012384 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8012372:	69db      	ldr	r3, [r3, #28]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	220d      	movs	r2, #13
 8012378:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 801237a:	f003 fff1 	bl	8016360 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 801237e:	bf00      	nop
}
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	20030000 	.word	0x20030000

08012388 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 801238c:	4b03      	ldr	r3, [pc, #12]	@ (801239c <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 801238e:	69db      	ldr	r3, [r3, #28]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	4618      	mov	r0, r3
 8012394:	f003 fcd2 	bl	8015d3c <TL_ZIGBEE_M0RequestReceived>

  return;
 8012398:	bf00      	nop
}
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20030000 	.word	0x20030000

080123a0 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80123a4:	4b04      	ldr	r3, [pc, #16]	@ (80123b8 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 80123a6:	69db      	ldr	r3, [r3, #28]
 80123a8:	689b      	ldr	r3, [r3, #8]
 80123aa:	220d      	movs	r2, #13
 80123ac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 80123ae:	f004 f809 	bl	80163c4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 80123b2:	bf00      	nop
}
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	20030000 	.word	0x20030000

080123bc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80123c4:	4817      	ldr	r0, [pc, #92]	@ (8012424 <TL_MM_Init+0x68>)
 80123c6:	f7ff fdd9 	bl	8011f7c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80123ca:	4817      	ldr	r0, [pc, #92]	@ (8012428 <TL_MM_Init+0x6c>)
 80123cc:	f7ff fdd6 	bl	8011f7c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80123d0:	4b16      	ldr	r3, [pc, #88]	@ (801242c <TL_MM_Init+0x70>)
 80123d2:	691b      	ldr	r3, [r3, #16]
 80123d4:	4a16      	ldr	r2, [pc, #88]	@ (8012430 <TL_MM_Init+0x74>)
 80123d6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80123d8:	4b15      	ldr	r3, [pc, #84]	@ (8012430 <TL_MM_Init+0x74>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	6892      	ldr	r2, [r2, #8]
 80123e0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80123e2:	4b13      	ldr	r3, [pc, #76]	@ (8012430 <TL_MM_Init+0x74>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	68d2      	ldr	r2, [r2, #12]
 80123ea:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80123ec:	4b10      	ldr	r3, [pc, #64]	@ (8012430 <TL_MM_Init+0x74>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4a0c      	ldr	r2, [pc, #48]	@ (8012424 <TL_MM_Init+0x68>)
 80123f2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80123f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012430 <TL_MM_Init+0x74>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	6812      	ldr	r2, [r2, #0]
 80123fc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80123fe:	4b0c      	ldr	r3, [pc, #48]	@ (8012430 <TL_MM_Init+0x74>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	6852      	ldr	r2, [r2, #4]
 8012406:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012408:	4b09      	ldr	r3, [pc, #36]	@ (8012430 <TL_MM_Init+0x74>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	6912      	ldr	r2, [r2, #16]
 8012410:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012412:	4b07      	ldr	r3, [pc, #28]	@ (8012430 <TL_MM_Init+0x74>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	687a      	ldr	r2, [r7, #4]
 8012418:	6952      	ldr	r2, [r2, #20]
 801241a:	619a      	str	r2, [r3, #24]

  return;
 801241c:	bf00      	nop
}
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	200300b8 	.word	0x200300b8
 8012428:	2000055c 	.word	0x2000055c
 801242c:	20030000 	.word	0x20030000
 8012430:	20000574 	.word	0x20000574

08012434 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 801243c:	6879      	ldr	r1, [r7, #4]
 801243e:	4807      	ldr	r0, [pc, #28]	@ (801245c <TL_MM_EvtDone+0x28>)
 8012440:	f7ff fdf4 	bl	801202c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	2000      	movs	r0, #0
 8012448:	f000 f858 	bl	80124fc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 801244c:	4804      	ldr	r0, [pc, #16]	@ (8012460 <TL_MM_EvtDone+0x2c>)
 801244e:	f003 ffc7 	bl	80163e0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8012452:	bf00      	nop
}
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	2000055c 	.word	0x2000055c
 8012460:	08012465 	.word	0x08012465

08012464 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801246a:	e00c      	b.n	8012486 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801246c:	1d3b      	adds	r3, r7, #4
 801246e:	4619      	mov	r1, r3
 8012470:	480a      	ldr	r0, [pc, #40]	@ (801249c <SendFreeBuf+0x38>)
 8012472:	f7ff fe22 	bl	80120ba <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8012476:	4b0a      	ldr	r3, [pc, #40]	@ (80124a0 <SendFreeBuf+0x3c>)
 8012478:	691b      	ldr	r3, [r3, #16]
 801247a:	691b      	ldr	r3, [r3, #16]
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	4611      	mov	r1, r2
 8012480:	4618      	mov	r0, r3
 8012482:	f7ff fdd3 	bl	801202c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012486:	4805      	ldr	r0, [pc, #20]	@ (801249c <SendFreeBuf+0x38>)
 8012488:	f7ff fd88 	bl	8011f9c <LST_is_empty>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d0ec      	beq.n	801246c <SendFreeBuf+0x8>
  }

  return;
 8012492:	bf00      	nop
}
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	2000055c 	.word	0x2000055c
 80124a0:	20030000 	.word	0x20030000

080124a4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80124a8:	4805      	ldr	r0, [pc, #20]	@ (80124c0 <TL_TRACES_Init+0x1c>)
 80124aa:	f7ff fd67 	bl	8011f7c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80124ae:	4b05      	ldr	r3, [pc, #20]	@ (80124c4 <TL_TRACES_Init+0x20>)
 80124b0:	695b      	ldr	r3, [r3, #20]
 80124b2:	4a03      	ldr	r2, [pc, #12]	@ (80124c0 <TL_TRACES_Init+0x1c>)
 80124b4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80124b6:	f003 ffc9 	bl	801644c <HW_IPCC_TRACES_Init>

  return;
 80124ba:	bf00      	nop
}
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	200300c0 	.word	0x200300c0
 80124c4:	20030000 	.word	0x20030000

080124c8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80124ce:	e008      	b.n	80124e2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80124d0:	1d3b      	adds	r3, r7, #4
 80124d2:	4619      	mov	r1, r3
 80124d4:	4808      	ldr	r0, [pc, #32]	@ (80124f8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80124d6:	f7ff fdf0 	bl	80120ba <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	f7f6 fdf3 	bl	80090c8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80124e2:	4805      	ldr	r0, [pc, #20]	@ (80124f8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80124e4:	f7ff fd5a 	bl	8011f9c <LST_is_empty>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d0f0      	beq.n	80124d0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80124ee:	bf00      	nop
}
 80124f0:	3708      	adds	r7, #8
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	200300c0 	.word	0x200300c0

080124fc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b085      	sub	sp, #20
 8012500:	af00      	add	r7, sp, #0
 8012502:	4603      	mov	r3, r0
 8012504:	6039      	str	r1, [r7, #0]
 8012506:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8012508:	79fb      	ldrb	r3, [r7, #7]
 801250a:	2b06      	cmp	r3, #6
 801250c:	d845      	bhi.n	801259a <OutputDbgTrace+0x9e>
 801250e:	a201      	add	r2, pc, #4	@ (adr r2, 8012514 <OutputDbgTrace+0x18>)
 8012510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012514:	08012531 	.word	0x08012531
 8012518:	08012555 	.word	0x08012555
 801251c:	0801255b 	.word	0x0801255b
 8012520:	0801256f 	.word	0x0801256f
 8012524:	0801257b 	.word	0x0801257b
 8012528:	08012581 	.word	0x08012581
 801252c:	0801258f 	.word	0x0801258f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	7a5b      	ldrb	r3, [r3, #9]
 8012538:	2bff      	cmp	r3, #255	@ 0xff
 801253a:	d005      	beq.n	8012548 <OutputDbgTrace+0x4c>
 801253c:	2bff      	cmp	r3, #255	@ 0xff
 801253e:	dc05      	bgt.n	801254c <OutputDbgTrace+0x50>
 8012540:	2b0e      	cmp	r3, #14
 8012542:	d005      	beq.n	8012550 <OutputDbgTrace+0x54>
 8012544:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8012546:	e001      	b.n	801254c <OutputDbgTrace+0x50>
          break;
 8012548:	bf00      	nop
 801254a:	e027      	b.n	801259c <OutputDbgTrace+0xa0>
          break;
 801254c:	bf00      	nop
 801254e:	e025      	b.n	801259c <OutputDbgTrace+0xa0>
          break;
 8012550:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8012552:	e023      	b.n	801259c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012558:	e020      	b.n	801259c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	7a5b      	ldrb	r3, [r3, #9]
 8012562:	2b0e      	cmp	r3, #14
 8012564:	d001      	beq.n	801256a <OutputDbgTrace+0x6e>
 8012566:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012568:	e000      	b.n	801256c <OutputDbgTrace+0x70>
          break;
 801256a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801256c:	e016      	b.n	801259c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a5b      	ldrb	r3, [r3, #9]
 8012576:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012578:	e010      	b.n	801259c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801257e:	e00d      	b.n	801259c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	7a5b      	ldrb	r3, [r3, #9]
 8012588:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801258a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801258c:	e006      	b.n	801259c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	7a5b      	ldrb	r3, [r3, #9]
 8012596:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012598:	e000      	b.n	801259c <OutputDbgTrace+0xa0>

    default:
      break;
 801259a:	bf00      	nop
  }

  return;
 801259c:	bf00      	nop
}
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 80125a8:	b480      	push	{r7}
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	bf00      	nop
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr

080125b6 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 80125b6:	b480      	push	{r7}
 80125b8:	b087      	sub	sp, #28
 80125ba:	af00      	add	r7, sp, #0
 80125bc:	60f8      	str	r0, [r7, #12]
 80125be:	60b9      	str	r1, [r7, #8]
 80125c0:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 80125c2:	2300      	movs	r3, #0
 80125c4:	617b      	str	r3, [r7, #20]
 80125c6:	e00a      	b.n	80125de <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 80125c8:	68ba      	ldr	r2, [r7, #8]
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	441a      	add	r2, r3
 80125ce:	68f9      	ldr	r1, [r7, #12]
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	440b      	add	r3, r1
 80125d4:	7812      	ldrb	r2, [r2, #0]
 80125d6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	3301      	adds	r3, #1
 80125dc:	617b      	str	r3, [r7, #20]
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d3f0      	bcc.n	80125c8 <zb_ipc_m4_memcpy2+0x12>
    }
}
 80125e6:	bf00      	nop
 80125e8:	bf00      	nop
 80125ea:	371c      	adds	r7, #28
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 80125fe:	200c      	movs	r0, #12
 8012600:	f004 f9c4 	bl	801698c <malloc>
 8012604:	4603      	mov	r3, r0
 8012606:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00a      	beq.n	8012624 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 801260e:	220c      	movs	r2, #12
 8012610:	2100      	movs	r1, #0
 8012612:	68f8      	ldr	r0, [r7, #12]
 8012614:	f004 fd68 	bl	80170e8 <memset>
        info->callback = callback;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	683a      	ldr	r2, [r7, #0]
 8012622:	605a      	str	r2, [r3, #4]
    }
    return info;
 8012624:	68fb      	ldr	r3, [r7, #12]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 801262e:	b580      	push	{r7, lr}
 8012630:	b082      	sub	sp, #8
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
    free(info);
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f004 f9b0 	bl	801699c <free>
}
 801263c:	bf00      	nop
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801264a:	f003 faef 	bl	8015c2c <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 801264e:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d006      	beq.n	8012666 <zb_ipc_m4_get_retval+0x22>
 8012658:	4b09      	ldr	r3, [pc, #36]	@ (8012680 <zb_ipc_m4_get_retval+0x3c>)
 801265a:	4a0a      	ldr	r2, [pc, #40]	@ (8012684 <zb_ipc_m4_get_retval+0x40>)
 801265c:	f240 1151 	movw	r1, #337	@ 0x151
 8012660:	4809      	ldr	r0, [pc, #36]	@ (8012688 <zb_ipc_m4_get_retval+0x44>)
 8012662:	f004 f975 	bl	8016950 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f103 0108 	add.w	r1, r3, #8
 801266c:	463b      	mov	r3, r7
 801266e:	2204      	movs	r2, #4
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff ffa0 	bl	80125b6 <zb_ipc_m4_memcpy2>
    return retval;
 8012676:	683b      	ldr	r3, [r7, #0]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	08018eac 	.word	0x08018eac
 8012684:	08019d24 	.word	0x08019d24
 8012688:	08018ec0 	.word	0x08018ec0

0801268c <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b086      	sub	sp, #24
 8012690:	af00      	add	r7, sp, #0
 8012692:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
 8012698:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 801269a:	4b25      	ldr	r3, [pc, #148]	@ (8012730 <ZbInit+0xa4>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d001      	beq.n	80126a6 <ZbInit+0x1a>
        return NULL;
 80126a2:	2300      	movs	r3, #0
 80126a4:	e03f      	b.n	8012726 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 80126a6:	f003 fb23 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80126aa:	f003 fab3 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80126ae:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2200      	movs	r2, #0
 80126b4:	f042 020a 	orr.w	r2, r2, #10
 80126b8:	701a      	strb	r2, [r3, #0]
 80126ba:	2200      	movs	r2, #0
 80126bc:	705a      	strb	r2, [r3, #1]
 80126be:	2200      	movs	r2, #0
 80126c0:	709a      	strb	r2, [r3, #2]
 80126c2:	2200      	movs	r2, #0
 80126c4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	2200      	movs	r2, #0
 80126ca:	f042 0204 	orr.w	r2, r2, #4
 80126ce:	711a      	strb	r2, [r3, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	715a      	strb	r2, [r3, #5]
 80126d4:	2200      	movs	r2, #0
 80126d6:	719a      	strb	r2, [r3, #6]
 80126d8:	2200      	movs	r2, #0
 80126da:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	3308      	adds	r3, #8
 80126e0:	f107 0108 	add.w	r1, r7, #8
 80126e4:	2208      	movs	r2, #8
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7ff ff65 	bl	80125b6 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 80126f8:	f003 fabc 	bl	8015c74 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 80126fc:	f7ff ffa2 	bl	8012644 <zb_ipc_m4_get_retval>
 8012700:	4603      	mov	r3, r0
 8012702:	461a      	mov	r2, r3
 8012704:	4b0a      	ldr	r3, [pc, #40]	@ (8012730 <ZbInit+0xa4>)
 8012706:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 8012708:	f7ff ff4e 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d007      	beq.n	8012722 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	4a06      	ldr	r2, [pc, #24]	@ (8012730 <ZbInit+0xa4>)
 8012718:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4a04      	ldr	r2, [pc, #16]	@ (8012730 <ZbInit+0xa4>)
 8012720:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 8012722:	4b03      	ldr	r3, [pc, #12]	@ (8012730 <ZbInit+0xa4>)
 8012724:	681b      	ldr	r3, [r3, #0]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3718      	adds	r7, #24
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	2000058c 	.word	0x2000058c

08012734 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012740:	f003 fad6 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012744:	f003 fa66 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012748:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	2200      	movs	r2, #0
 801274e:	f042 0213 	orr.w	r2, r2, #19
 8012752:	701a      	strb	r2, [r3, #0]
 8012754:	2200      	movs	r2, #0
 8012756:	705a      	strb	r2, [r3, #1]
 8012758:	2200      	movs	r2, #0
 801275a:	709a      	strb	r2, [r3, #2]
 801275c:	2200      	movs	r2, #0
 801275e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	2200      	movs	r2, #0
 8012764:	f042 0202 	orr.w	r2, r2, #2
 8012768:	711a      	strb	r2, [r3, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	715a      	strb	r2, [r3, #5]
 801276e:	2200      	movs	r2, #0
 8012770:	719a      	strb	r2, [r3, #6]
 8012772:	2200      	movs	r2, #0
 8012774:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	68ba      	ldr	r2, [r7, #8]
 801277a:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 801277c:	4b0c      	ldr	r3, [pc, #48]	@ (80127b0 <ZbSetLogging+0x7c>)
 801277e:	7b1b      	ldrb	r3, [r3, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d102      	bne.n	801278a <ZbSetLogging+0x56>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <ZbSetLogging+0x5a>
 801278a:	2201      	movs	r2, #1
 801278c:	e000      	b.n	8012790 <ZbSetLogging+0x5c>
 801278e:	2200      	movs	r2, #0
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012794:	f003 fa6e 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012798:	f7ff ff06 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 801279c:	4a04      	ldr	r2, [pc, #16]	@ (80127b0 <ZbSetLogging+0x7c>)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 80127a2:	4a03      	ldr	r2, [pc, #12]	@ (80127b0 <ZbSetLogging+0x7c>)
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	6093      	str	r3, [r2, #8]
}
 80127a8:	bf00      	nop
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	2000058c 	.word	0x2000058c

080127b4 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b086      	sub	sp, #24
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 80127bc:	f04f 0200 	mov.w	r2, #0
 80127c0:	f04f 0300 	mov.w	r3, #0
 80127c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 80127c8:	f003 fa92 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80127cc:	f003 fa22 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80127d0:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f042 020e 	orr.w	r2, r2, #14
 80127da:	701a      	strb	r2, [r3, #0]
 80127dc:	2200      	movs	r2, #0
 80127de:	705a      	strb	r2, [r3, #1]
 80127e0:	2200      	movs	r2, #0
 80127e2:	709a      	strb	r2, [r3, #2]
 80127e4:	2200      	movs	r2, #0
 80127e6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	2200      	movs	r2, #0
 80127ec:	711a      	strb	r2, [r3, #4]
 80127ee:	2200      	movs	r2, #0
 80127f0:	715a      	strb	r2, [r3, #5]
 80127f2:	2200      	movs	r2, #0
 80127f4:	719a      	strb	r2, [r3, #6]
 80127f6:	2200      	movs	r2, #0
 80127f8:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 80127fa:	f003 fa3b 	bl	8015c74 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 80127fe:	f003 fa15 	bl	8015c2c <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8012802:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	2b02      	cmp	r3, #2
 801280a:	d006      	beq.n	801281a <ZbExtendedAddress+0x66>
 801280c:	4b0c      	ldr	r3, [pc, #48]	@ (8012840 <ZbExtendedAddress+0x8c>)
 801280e:	4a0d      	ldr	r2, [pc, #52]	@ (8012844 <ZbExtendedAddress+0x90>)
 8012810:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8012814:	480c      	ldr	r0, [pc, #48]	@ (8012848 <ZbExtendedAddress+0x94>)
 8012816:	f004 f89b 	bl	8016950 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	f103 0108 	add.w	r1, r3, #8
 8012820:	f107 0308 	add.w	r3, r7, #8
 8012824:	2208      	movs	r2, #8
 8012826:	4618      	mov	r0, r3
 8012828:	f7ff fec5 	bl	80125b6 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 801282c:	f7ff febc 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 8012830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8012834:	4610      	mov	r0, r2
 8012836:	4619      	mov	r1, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	08018f38 	.word	0x08018f38
 8012844:	08019d3c 	.word	0x08019d3c
 8012848:	08018ec0 	.word	0x08018ec0

0801284c <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 8012854:	2300      	movs	r3, #0
 8012856:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 8012858:	f107 020e 	add.w	r2, r7, #14
 801285c:	2302      	movs	r3, #2
 801285e:	2196      	movs	r1, #150	@ 0x96
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 fc1b 	bl	801309c <ZbNwkGet>
    return nwkAddr;
 8012866:	89fb      	ldrh	r3, [r7, #14]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012878:	f003 fa3a 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801287c:	f003 f9ca 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012880:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2200      	movs	r2, #0
 8012886:	f042 021b 	orr.w	r2, r2, #27
 801288a:	701a      	strb	r2, [r3, #0]
 801288c:	2200      	movs	r2, #0
 801288e:	705a      	strb	r2, [r3, #1]
 8012890:	2200      	movs	r2, #0
 8012892:	709a      	strb	r2, [r3, #2]
 8012894:	2200      	movs	r2, #0
 8012896:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2200      	movs	r2, #0
 801289c:	f042 0201 	orr.w	r2, r2, #1
 80128a0:	711a      	strb	r2, [r3, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	715a      	strb	r2, [r3, #5]
 80128a6:	2200      	movs	r2, #0
 80128a8:	719a      	strb	r2, [r3, #6]
 80128aa:	2200      	movs	r2, #0
 80128ac:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80128b4:	f003 f9de 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80128b8:	f7ff fe76 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 80128bc:	bf00      	nop
 80128be:	3710      	adds	r7, #16
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 80128d2:	6839      	ldr	r1, [r7, #0]
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7ff fe8d 	bl	80125f4 <zb_ipc_m4_cb_info_alloc>
 80128da:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d101      	bne.n	80128e6 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 80128e2:	2370      	movs	r3, #112	@ 0x70
 80128e4:	e036      	b.n	8012954 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	461a      	mov	r2, r3
 80128f0:	4b1a      	ldr	r3, [pc, #104]	@ (801295c <ZbStartup+0x98>)
 80128f2:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 80128f4:	f003 f9fc 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80128f8:	f003 f98c 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80128fc:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	2200      	movs	r2, #0
 8012902:	f042 021c 	orr.w	r2, r2, #28
 8012906:	701a      	strb	r2, [r3, #0]
 8012908:	2200      	movs	r2, #0
 801290a:	705a      	strb	r2, [r3, #1]
 801290c:	2200      	movs	r2, #0
 801290e:	709a      	strb	r2, [r3, #2]
 8012910:	2200      	movs	r2, #0
 8012912:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	2200      	movs	r2, #0
 8012918:	f042 0202 	orr.w	r2, r2, #2
 801291c:	711a      	strb	r2, [r3, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	715a      	strb	r2, [r3, #5]
 8012922:	2200      	movs	r2, #0
 8012924:	719a      	strb	r2, [r3, #6]
 8012926:	2200      	movs	r2, #0
 8012928:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8012930:	69fa      	ldr	r2, [r7, #28]
 8012932:	69bb      	ldr	r3, [r7, #24]
 8012934:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012936:	f003 f99d 	bl	8015c74 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801293a:	f7ff fe83 	bl	8012644 <zb_ipc_m4_get_retval>
 801293e:	4603      	mov	r3, r0
 8012940:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8012942:	f7ff fe31 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 8012946:	7dfb      	ldrb	r3, [r7, #23]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d002      	beq.n	8012952 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 801294c:	69f8      	ldr	r0, [r7, #28]
 801294e:	f7ff fe6e 	bl	801262e <zb_ipc_m4_cb_info_free>
    }
    return status;
 8012952:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 8012954:	4618      	mov	r0, r3
 8012956:	3720      	adds	r7, #32
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	20000578 	.word	0x20000578

08012960 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b08c      	sub	sp, #48	@ 0x30
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	607a      	str	r2, [r7, #4]
 801296a:	603b      	str	r3, [r7, #0]
 801296c:	460b      	mov	r3, r1
 801296e:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 8012970:	897b      	ldrh	r3, [r7, #10]
 8012972:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 801297c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297e:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8012980:	f003 f9b6 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012984:	f003 f946 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012988:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 801298a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298c:	2200      	movs	r2, #0
 801298e:	701a      	strb	r2, [r3, #0]
 8012990:	2200      	movs	r2, #0
 8012992:	f042 0202 	orr.w	r2, r2, #2
 8012996:	705a      	strb	r2, [r3, #1]
 8012998:	2200      	movs	r2, #0
 801299a:	709a      	strb	r2, [r3, #2]
 801299c:	2200      	movs	r2, #0
 801299e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80129a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129a2:	2200      	movs	r2, #0
 80129a4:	f042 0202 	orr.w	r2, r2, #2
 80129a8:	711a      	strb	r2, [r3, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	715a      	strb	r2, [r3, #5]
 80129ae:	2200      	movs	r2, #0
 80129b0:	719a      	strb	r2, [r3, #6]
 80129b2:	2200      	movs	r2, #0
 80129b4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 80129b6:	f107 0218 	add.w	r2, r7, #24
 80129ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129bc:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 80129be:	f107 0214 	add.w	r2, r7, #20
 80129c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80129c6:	f003 f955 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80129ca:	f7ff fded 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 80129ce:	7d3b      	ldrb	r3, [r7, #20]
 80129d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 80129d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3730      	adds	r7, #48	@ 0x30
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b088      	sub	sp, #32
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	607a      	str	r2, [r7, #4]
 80129ec:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 80129ee:	6839      	ldr	r1, [r7, #0]
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7ff fdff 	bl	80125f4 <zb_ipc_m4_cb_info_alloc>
 80129f6:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 80129fe:	2370      	movs	r3, #112	@ 0x70
 8012a00:	e031      	b.n	8012a66 <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8012a02:	f003 f975 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012a06:	f003 f905 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012a0a:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f042 0204 	orr.w	r2, r2, #4
 8012a14:	701a      	strb	r2, [r3, #0]
 8012a16:	2200      	movs	r2, #0
 8012a18:	f042 0202 	orr.w	r2, r2, #2
 8012a1c:	705a      	strb	r2, [r3, #1]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	709a      	strb	r2, [r3, #2]
 8012a22:	2200      	movs	r2, #0
 8012a24:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f042 0202 	orr.w	r2, r2, #2
 8012a2e:	711a      	strb	r2, [r3, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	715a      	strb	r2, [r3, #5]
 8012a34:	2200      	movs	r2, #0
 8012a36:	719a      	strb	r2, [r3, #6]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8012a3c:	68ba      	ldr	r2, [r7, #8]
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8012a42:	69fa      	ldr	r2, [r7, #28]
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012a48:	f003 f914 	bl	8015c74 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 8012a4c:	f7ff fdfa 	bl	8012644 <zb_ipc_m4_get_retval>
 8012a50:	4603      	mov	r3, r0
 8012a52:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8012a54:	f7ff fda8 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 8012a58:	7dfb      	ldrb	r3, [r7, #23]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d002      	beq.n	8012a64 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 8012a5e:	69f8      	ldr	r0, [r7, #28]
 8012a60:	f7ff fde5 	bl	801262e <zb_ipc_m4_cb_info_free>
    }
    return status;
 8012a64:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3720      	adds	r7, #32
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}

08012a6e <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b084      	sub	sp, #16
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
 8012a76:	460b      	mov	r3, r1
 8012a78:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 8012a7a:	f003 f939 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012a7e:	f003 f8c9 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012a82:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f042 020d 	orr.w	r2, r2, #13
 8012a8c:	701a      	strb	r2, [r3, #0]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f042 0202 	orr.w	r2, r2, #2
 8012a94:	705a      	strb	r2, [r3, #1]
 8012a96:	2200      	movs	r2, #0
 8012a98:	709a      	strb	r2, [r3, #2]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	f042 0201 	orr.w	r2, r2, #1
 8012aa6:	711a      	strb	r2, [r3, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	715a      	strb	r2, [r3, #5]
 8012aac:	2200      	movs	r2, #0
 8012aae:	719a      	strb	r2, [r3, #6]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8012ab4:	78fa      	ldrb	r2, [r7, #3]
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012aba:	f003 f8db 	bl	8015c74 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8012abe:	f7ff fdc1 	bl	8012644 <zb_ipc_m4_get_retval>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 8012ac6:	f7ff fd6f 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return val_ret;
 8012aca:	897b      	ldrh	r3, [r7, #10]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d101      	bne.n	8012ae8 <ZbApsAddrIsBcast+0x14>
        return true;
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e012      	b.n	8012b0e <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	2b02      	cmp	r3, #2
 8012aee:	d10d      	bne.n	8012b0c <ZbApsAddrIsBcast+0x38>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	88db      	ldrh	r3, [r3, #6]
 8012af4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d907      	bls.n	8012b0c <ZbApsAddrIsBcast+0x38>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	88db      	ldrh	r3, [r3, #6]
 8012b00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d001      	beq.n	8012b0c <ZbApsAddrIsBcast+0x38>
        return true;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	e000      	b.n	8012b0e <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr

08012b1a <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 8012b1a:	b5b0      	push	{r4, r5, r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d10d      	bne.n	8012b48 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f7ff fe3e 	bl	80127b4 <ZbExtendedAddress>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	460b      	mov	r3, r1
 8012b3c:	429d      	cmp	r5, r3
 8012b3e:	bf08      	it	eq
 8012b40:	4294      	cmpeq	r4, r2
 8012b42:	d101      	bne.n	8012b48 <ZbApsAddrIsLocal+0x2e>
            return true;
 8012b44:	2301      	movs	r3, #1
 8012b46:	e00e      	b.n	8012b66 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	2b02      	cmp	r3, #2
 8012b4e:	d109      	bne.n	8012b64 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	88dc      	ldrh	r4, [r3, #6]
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7ff fe79 	bl	801284c <ZbShortAddress>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	429c      	cmp	r4, r3
 8012b5e:	d101      	bne.n	8012b64 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 8012b60:	2301      	movs	r3, #1
 8012b62:	e000      	b.n	8012b66 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 8012b64:	2300      	movs	r3, #0
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3708      	adds	r7, #8
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bdb0      	pop	{r4, r5, r7, pc}

08012b6e <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8012b6e:	b580      	push	{r7, lr}
 8012b70:	b08a      	sub	sp, #40	@ 0x28
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	60f8      	str	r0, [r7, #12]
 8012b76:	607a      	str	r2, [r7, #4]
 8012b78:	603b      	str	r3, [r7, #0]
 8012b7a:	460b      	mov	r3, r1
 8012b7c:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8012b7e:	897b      	ldrh	r3, [r7, #10]
 8012b80:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 8012b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b8c:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8012b8e:	f003 f8af 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012b92:	f003 f83f 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012b96:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 8012b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f042 0210 	orr.w	r2, r2, #16
 8012ba0:	701a      	strb	r2, [r3, #0]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f042 0202 	orr.w	r2, r2, #2
 8012ba8:	705a      	strb	r2, [r3, #1]
 8012baa:	2200      	movs	r2, #0
 8012bac:	709a      	strb	r2, [r3, #2]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	f042 0202 	orr.w	r2, r2, #2
 8012bba:	711a      	strb	r2, [r3, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	715a      	strb	r2, [r3, #5]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	719a      	strb	r2, [r3, #6]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 8012bc8:	f107 0214 	add.w	r2, r7, #20
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bce:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8012bd0:	f107 0210 	add.w	r2, r7, #16
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd6:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012bd8:	f003 f84c 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012bdc:	f7ff fce4 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8012be0:	7c3b      	ldrb	r3, [r7, #16]
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3728      	adds	r7, #40	@ 0x28
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b086      	sub	sp, #24
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	60f8      	str	r0, [r7, #12]
 8012bf2:	60b9      	str	r1, [r7, #8]
 8012bf4:	607a      	str	r2, [r7, #4]
 8012bf6:	f003 f87b 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
 8012bfa:	f003 f80b 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012bfe:	6178      	str	r0, [r7, #20]
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	2200      	movs	r2, #0
 8012c04:	f042 0215 	orr.w	r2, r2, #21
 8012c08:	701a      	strb	r2, [r3, #0]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	f042 0202 	orr.w	r2, r2, #2
 8012c10:	705a      	strb	r2, [r3, #1]
 8012c12:	2200      	movs	r2, #0
 8012c14:	709a      	strb	r2, [r3, #2]
 8012c16:	2200      	movs	r2, #0
 8012c18:	70da      	strb	r2, [r3, #3]
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f042 0202 	orr.w	r2, r2, #2
 8012c22:	711a      	strb	r2, [r3, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	715a      	strb	r2, [r3, #5]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	719a      	strb	r2, [r3, #6]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	71da      	strb	r2, [r3, #7]
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	609a      	str	r2, [r3, #8]
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	60da      	str	r2, [r3, #12]
 8012c3c:	f003 f81a 	bl	8015c74 <ZIGBEE_CmdTransfer>
 8012c40:	f7ff fcb2 	bl	80125a8 <Post_ZigbeeCmdProcessing>
 8012c44:	3718      	adds	r7, #24
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b092      	sub	sp, #72	@ 0x48
 8012c4e:	af02      	add	r7, sp, #8
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	460b      	mov	r3, r1
 8012c54:	70fb      	strb	r3, [r7, #3]
 8012c56:	4613      	mov	r3, r2
 8012c58:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f7ff fdaa 	bl	80127b4 <ZbExtendedAddress>
 8012c60:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 8012c64:	2300      	movs	r3, #0
 8012c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8012c68:	f107 0208 	add.w	r2, r7, #8
 8012c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	2320      	movs	r3, #32
 8012c72:	21c1      	movs	r1, #193	@ 0xc1
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f7ff ff7a 	bl	8012b6e <ZbApsGetIndex>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8012c80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d120      	bne.n	8012cca <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 8012c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012c8c:	4313      	orrs	r3, r2
 8012c8e:	d011      	beq.n	8012cb4 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8012c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012c94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8012c98:	4299      	cmp	r1, r3
 8012c9a:	bf08      	it	eq
 8012c9c:	4290      	cmpeq	r0, r2
 8012c9e:	d10b      	bne.n	8012cb8 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8012ca0:	7c3b      	ldrb	r3, [r7, #16]
 8012ca2:	78fa      	ldrb	r2, [r7, #3]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d109      	bne.n	8012cbc <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 8012ca8:	8a7b      	ldrh	r3, [r7, #18]
 8012caa:	883a      	ldrh	r2, [r7, #0]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d107      	bne.n	8012cc0 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e00c      	b.n	8012cce <ZbApsBindSrcExists+0x84>
            continue;
 8012cb4:	bf00      	nop
 8012cb6:	e004      	b.n	8012cc2 <ZbApsBindSrcExists+0x78>
            continue;
 8012cb8:	bf00      	nop
 8012cba:	e002      	b.n	8012cc2 <ZbApsBindSrcExists+0x78>
            continue;
 8012cbc:	bf00      	nop
 8012cbe:	e000      	b.n	8012cc2 <ZbApsBindSrcExists+0x78>
            continue;
 8012cc0:	bf00      	nop
    for (i = 0;; i++) {
 8012cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8012cc8:	e7ce      	b.n	8012c68 <ZbApsBindSrcExists+0x1e>
            break;
 8012cca:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3740      	adds	r7, #64	@ 0x40
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
	...

08012cd8 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b088      	sub	sp, #32
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	603b      	str	r3, [r7, #0]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8012ce8:	2300      	movs	r3, #0
 8012cea:	61bb      	str	r3, [r7, #24]
 8012cec:	e00e      	b.n	8012d0c <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8012cee:	69ba      	ldr	r2, [r7, #24]
 8012cf0:	4613      	mov	r3, r2
 8012cf2:	005b      	lsls	r3, r3, #1
 8012cf4:	4413      	add	r3, r2
 8012cf6:	009b      	lsls	r3, r3, #2
 8012cf8:	4a28      	ldr	r2, [pc, #160]	@ (8012d9c <ZbMsgFilterRegister+0xc4>)
 8012cfa:	4413      	add	r3, r2
 8012cfc:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d006      	beq.n	8012d14 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8012d06:	69bb      	ldr	r3, [r7, #24]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	61bb      	str	r3, [r7, #24]
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	2b1f      	cmp	r3, #31
 8012d10:	d9ed      	bls.n	8012cee <ZbMsgFilterRegister+0x16>
 8012d12:	e000      	b.n	8012d16 <ZbMsgFilterRegister+0x3e>
            break;
 8012d14:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	2b20      	cmp	r3, #32
 8012d1a:	d101      	bne.n	8012d20 <ZbMsgFilterRegister+0x48>
        return NULL;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	e038      	b.n	8012d92 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 8012d20:	f002 ffe6 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012d24:	f002 ff76 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012d28:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	f042 0210 	orr.w	r2, r2, #16
 8012d32:	701a      	strb	r2, [r3, #0]
 8012d34:	2200      	movs	r2, #0
 8012d36:	705a      	strb	r2, [r3, #1]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	709a      	strb	r2, [r3, #2]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2200      	movs	r2, #0
 8012d44:	f042 0203 	orr.w	r2, r2, #3
 8012d48:	711a      	strb	r2, [r3, #4]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	715a      	strb	r2, [r3, #5]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	719a      	strb	r2, [r3, #6]
 8012d52:	2200      	movs	r2, #0
 8012d54:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8012d5c:	79fa      	ldrb	r2, [r7, #7]
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8012d62:	69fa      	ldr	r2, [r7, #28]
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8012d68:	f002 ff84 	bl	8015c74 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8012d6c:	f7ff fc6a 	bl	8012644 <zb_ipc_m4_get_retval>
 8012d70:	4603      	mov	r3, r0
 8012d72:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 8012d74:	f7ff fc18 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d008      	beq.n	8012d90 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	693a      	ldr	r2, [r7, #16]
 8012d82:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d8e:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8012d90:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3720      	adds	r7, #32
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	200005a0 	.word	0x200005a0

08012da0 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d046      	beq.n	8012e3e <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8012db0:	2300      	movs	r3, #0
 8012db2:	613b      	str	r3, [r7, #16]
 8012db4:	e00f      	b.n	8012dd6 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8012db6:	693a      	ldr	r2, [r7, #16]
 8012db8:	4613      	mov	r3, r2
 8012dba:	005b      	lsls	r3, r3, #1
 8012dbc:	4413      	add	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	4a22      	ldr	r2, [pc, #136]	@ (8012e4c <ZbMsgFilterRemove+0xac>)
 8012dc2:	4413      	add	r3, r2
 8012dc4:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	683a      	ldr	r2, [r7, #0]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d006      	beq.n	8012dde <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	613b      	str	r3, [r7, #16]
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	2b1f      	cmp	r3, #31
 8012dda:	d9ec      	bls.n	8012db6 <ZbMsgFilterRemove+0x16>
 8012ddc:	e000      	b.n	8012de0 <ZbMsgFilterRemove+0x40>
            break;
 8012dde:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	2b20      	cmp	r3, #32
 8012de4:	d02d      	beq.n	8012e42 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8012de6:	f002 ff83 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012dea:	f002 ff13 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012dee:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2200      	movs	r2, #0
 8012df4:	f042 0211 	orr.w	r2, r2, #17
 8012df8:	701a      	strb	r2, [r3, #0]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	705a      	strb	r2, [r3, #1]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	709a      	strb	r2, [r3, #2]
 8012e02:	2200      	movs	r2, #0
 8012e04:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	f042 0201 	orr.w	r2, r2, #1
 8012e0e:	711a      	strb	r2, [r3, #4]
 8012e10:	2200      	movs	r2, #0
 8012e12:	715a      	strb	r2, [r3, #5]
 8012e14:	2200      	movs	r2, #0
 8012e16:	719a      	strb	r2, [r3, #6]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8012e1c:	683a      	ldr	r2, [r7, #0]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012e22:	f002 ff27 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012e26:	f7ff fbbf 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	701a      	strb	r2, [r3, #0]
 8012e30:	2200      	movs	r2, #0
 8012e32:	705a      	strb	r2, [r3, #1]
 8012e34:	2200      	movs	r2, #0
 8012e36:	709a      	strb	r2, [r3, #2]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	70da      	strb	r2, [r3, #3]
 8012e3c:	e002      	b.n	8012e44 <ZbMsgFilterRemove+0xa4>
        return;
 8012e3e:	bf00      	nop
 8012e40:	e000      	b.n	8012e44 <ZbMsgFilterRemove+0xa4>
        return;
 8012e42:	bf00      	nop
}
 8012e44:	3718      	adds	r7, #24
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	200005a0 	.word	0x200005a0

08012e50 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	4a24      	ldr	r2, [pc, #144]	@ (8012ef0 <ZbTimerAlloc+0xa0>)
 8012e60:	210c      	movs	r1, #12
 8012e62:	2000      	movs	r0, #0
 8012e64:	f000 fbe4 	bl	8013630 <zb_heap_alloc>
 8012e68:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d039      	beq.n	8012ee4 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	68ba      	ldr	r2, [r7, #8]
 8012e74:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8012e7c:	f002 ff38 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012e80:	f002 fec8 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012e84:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f042 0214 	orr.w	r2, r2, #20
 8012e8e:	701a      	strb	r2, [r3, #0]
 8012e90:	2200      	movs	r2, #0
 8012e92:	705a      	strb	r2, [r3, #1]
 8012e94:	2200      	movs	r2, #0
 8012e96:	709a      	strb	r2, [r3, #2]
 8012e98:	2200      	movs	r2, #0
 8012e9a:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f042 0201 	orr.w	r2, r2, #1
 8012ea4:	711a      	strb	r2, [r3, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	715a      	strb	r2, [r3, #5]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	719a      	strb	r2, [r3, #6]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8012eb2:	697a      	ldr	r2, [r7, #20]
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8012eb8:	f002 fedc 	bl	8015c74 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8012ebc:	f7ff fbc2 	bl	8012644 <zb_ipc_m4_get_retval>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 8012ec8:	f7ff fb6e 	bl	80125a8 <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d107      	bne.n	8012ee4 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4a06      	ldr	r2, [pc, #24]	@ (8012ef0 <ZbTimerAlloc+0xa0>)
 8012ed8:	6979      	ldr	r1, [r7, #20]
 8012eda:	2000      	movs	r0, #0
 8012edc:	f000 fbb7 	bl	801364e <zb_heap_free>
            timer = NULL;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8012ee4:	697b      	ldr	r3, [r7, #20]
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3718      	adds	r7, #24
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	08018f4c 	.word	0x08018f4c

08012ef4 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8012efc:	f002 fef8 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012f00:	f002 fe88 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012f04:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	f042 0215 	orr.w	r2, r2, #21
 8012f0e:	701a      	strb	r2, [r3, #0]
 8012f10:	2200      	movs	r2, #0
 8012f12:	705a      	strb	r2, [r3, #1]
 8012f14:	2200      	movs	r2, #0
 8012f16:	709a      	strb	r2, [r3, #2]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	f042 0201 	orr.w	r2, r2, #1
 8012f24:	711a      	strb	r2, [r3, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	715a      	strb	r2, [r3, #5]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	719a      	strb	r2, [r3, #6]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	689b      	ldr	r3, [r3, #8]
 8012f36:	461a      	mov	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012f3c:	f002 fe9a 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012f40:	f7ff fb32 	bl	80125a8 <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8012f44:	2300      	movs	r3, #0
 8012f46:	4a04      	ldr	r2, [pc, #16]	@ (8012f58 <ZbTimerFree+0x64>)
 8012f48:	6879      	ldr	r1, [r7, #4]
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	f000 fb7f 	bl	801364e <zb_heap_free>
}
 8012f50:	bf00      	nop
 8012f52:	3710      	adds	r7, #16
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	08018f4c 	.word	0x08018f4c

08012f5c <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012f66:	f002 fec3 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012f6a:	f002 fe53 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012f6e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2200      	movs	r2, #0
 8012f74:	f042 0217 	orr.w	r2, r2, #23
 8012f78:	701a      	strb	r2, [r3, #0]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	705a      	strb	r2, [r3, #1]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	709a      	strb	r2, [r3, #2]
 8012f82:	2200      	movs	r2, #0
 8012f84:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	f042 0202 	orr.w	r2, r2, #2
 8012f8e:	711a      	strb	r2, [r3, #4]
 8012f90:	2200      	movs	r2, #0
 8012f92:	715a      	strb	r2, [r3, #5]
 8012f94:	2200      	movs	r2, #0
 8012f96:	719a      	strb	r2, [r3, #6]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	689b      	ldr	r3, [r3, #8]
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012fac:	f002 fe62 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8012fb0:	f7ff fafa 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 8012fb4:	bf00      	nop
 8012fb6:	3710      	adds	r7, #16
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b085      	sub	sp, #20
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	4a13      	ldr	r2, [pc, #76]	@ (8013018 <ZbTimeoutRemaining+0x5c>)
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	d909      	bls.n	8012fe2 <ZbTimeoutRemaining+0x26>
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012fd4:	d805      	bhi.n	8012fe2 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8012fd6:	683a      	ldr	r2, [r7, #0]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	e014      	b.n	801300c <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8013018 <ZbTimeoutRemaining+0x5c>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d905      	bls.n	8012ff6 <ZbTimeoutRemaining+0x3a>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ff0:	d801      	bhi.n	8012ff6 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	e00a      	b.n	801300c <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d301      	bcc.n	8013002 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8012ffe:	2300      	movs	r3, #0
 8013000:	e004      	b.n	801300c <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8013002:	683a      	ldr	r2, [r7, #0]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 801300a:	68fb      	ldr	r3, [r7, #12]
}
 801300c:	4618      	mov	r0, r3
 801300e:	3714      	adds	r7, #20
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr
 8013018:	bffffffd 	.word	0xbffffffd

0801301c <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b08c      	sub	sp, #48	@ 0x30
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	607a      	str	r2, [r7, #4]
 8013026:	603b      	str	r3, [r7, #0]
 8013028:	460b      	mov	r3, r1
 801302a:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 801302c:	897b      	ldrh	r3, [r7, #10]
 801302e:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 8013038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303a:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 801303c:	f002 fe58 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013040:	f002 fde8 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013044:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8013046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013048:	2200      	movs	r2, #0
 801304a:	701a      	strb	r2, [r3, #0]
 801304c:	2200      	movs	r2, #0
 801304e:	f042 0203 	orr.w	r2, r2, #3
 8013052:	705a      	strb	r2, [r3, #1]
 8013054:	2200      	movs	r2, #0
 8013056:	709a      	strb	r2, [r3, #2]
 8013058:	2200      	movs	r2, #0
 801305a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801305c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801305e:	2200      	movs	r2, #0
 8013060:	f042 0202 	orr.w	r2, r2, #2
 8013064:	711a      	strb	r2, [r3, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	715a      	strb	r2, [r3, #5]
 801306a:	2200      	movs	r2, #0
 801306c:	719a      	strb	r2, [r3, #6]
 801306e:	2200      	movs	r2, #0
 8013070:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 8013072:	f107 0218 	add.w	r2, r7, #24
 8013076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013078:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 801307a:	f107 0214 	add.w	r2, r7, #20
 801307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013080:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013082:	f002 fdf7 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013086:	f7ff fa8f 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 801308a:	7d3b      	ldrb	r3, [r7, #20]
 801308c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8013090:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8013094:	4618      	mov	r0, r3
 8013096:	3730      	adds	r7, #48	@ 0x30
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <ZbNwkGet>:
    return status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b086      	sub	sp, #24
 80130a0:	af02      	add	r7, sp, #8
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	607a      	str	r2, [r7, #4]
 80130a6:	603b      	str	r3, [r7, #0]
 80130a8:	460b      	mov	r3, r1
 80130aa:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 80130ac:	8979      	ldrh	r1, [r7, #10]
 80130ae:	2300      	movs	r3, #0
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	687a      	ldr	r2, [r7, #4]
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f7ff ffb0 	bl	801301c <ZbNwkGetIndex>
 80130bc:	4603      	mov	r3, r0
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3710      	adds	r7, #16
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}

080130c6 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 80130c6:	b580      	push	{r7, lr}
 80130c8:	b086      	sub	sp, #24
 80130ca:	af02      	add	r7, sp, #8
 80130cc:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 80130ce:	f107 020c 	add.w	r2, r7, #12
 80130d2:	2300      	movs	r3, #0
 80130d4:	9300      	str	r3, [sp, #0]
 80130d6:	2304      	movs	r3, #4
 80130d8:	f241 111d 	movw	r1, #4381	@ 0x111d
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7ff fc3f 	bl	8012960 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 80130e2:	68fb      	ldr	r3, [r7, #12]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3710      	adds	r7, #16
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 80130f8:	f002 fdfa 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80130fc:	f002 fd8a 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013100:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	2200      	movs	r2, #0
 8013106:	f042 021d 	orr.w	r2, r2, #29
 801310a:	701a      	strb	r2, [r3, #0]
 801310c:	2200      	movs	r2, #0
 801310e:	f042 0204 	orr.w	r2, r2, #4
 8013112:	705a      	strb	r2, [r3, #1]
 8013114:	2200      	movs	r2, #0
 8013116:	709a      	strb	r2, [r3, #2]
 8013118:	2200      	movs	r2, #0
 801311a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	2200      	movs	r2, #0
 8013120:	f042 0202 	orr.w	r2, r2, #2
 8013124:	711a      	strb	r2, [r3, #4]
 8013126:	2200      	movs	r2, #0
 8013128:	715a      	strb	r2, [r3, #5]
 801312a:	2200      	movs	r2, #0
 801312c:	719a      	strb	r2, [r3, #6]
 801312e:	2200      	movs	r2, #0
 8013130:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 8013132:	68ba      	ldr	r2, [r7, #8]
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801313e:	f002 fd99 	bl	8015c74 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8013142:	f7ff fa7f 	bl	8012644 <zb_ipc_m4_get_retval>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	bf14      	ite	ne
 801314c:	2301      	movne	r3, #1
 801314e:	2300      	moveq	r3, #0
 8013150:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 8013152:	f7ff fa29 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return rc;
 8013156:	7cfb      	ldrb	r3, [r7, #19]
}
 8013158:	4618      	mov	r0, r3
 801315a:	3718      	adds	r7, #24
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <ZbZclBasicServerConfigDefaults>:
    return rc;
}

void
ZbZclBasicServerConfigDefaults(struct ZigBeeT *zb, const struct ZbZclBasicServerDefaults *defaults)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801316a:	f002 fdc1 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801316e:	f002 fd51 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013172:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_BASIC_SERVER_CONFIG_DEFAULTS;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2200      	movs	r2, #0
 8013178:	f042 0221 	orr.w	r2, r2, #33	@ 0x21
 801317c:	701a      	strb	r2, [r3, #0]
 801317e:	2200      	movs	r2, #0
 8013180:	f042 0204 	orr.w	r2, r2, #4
 8013184:	705a      	strb	r2, [r3, #1]
 8013186:	2200      	movs	r2, #0
 8013188:	709a      	strb	r2, [r3, #2]
 801318a:	2200      	movs	r2, #0
 801318c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2200      	movs	r2, #0
 8013192:	f042 0201 	orr.w	r2, r2, #1
 8013196:	711a      	strb	r2, [r3, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	715a      	strb	r2, [r3, #5]
 801319c:	2200      	movs	r2, #0
 801319e:	719a      	strb	r2, [r3, #6]
 80131a0:	2200      	movs	r2, #0
 80131a2:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)defaults;
 80131a4:	683a      	ldr	r2, [r7, #0]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80131aa:	f002 fd63 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80131ae:	f7ff f9fb 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 80131b2:	bf00      	nop
 80131b4:	3710      	adds	r7, #16
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b086      	sub	sp, #24
 80131be:	af00      	add	r7, sp, #0
 80131c0:	60f8      	str	r0, [r7, #12]
 80131c2:	60b9      	str	r1, [r7, #8]
 80131c4:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80131c6:	f002 fd93 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80131ca:	f002 fd23 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80131ce:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	2200      	movs	r2, #0
 80131d4:	701a      	strb	r2, [r3, #0]
 80131d6:	2200      	movs	r2, #0
 80131d8:	f042 0204 	orr.w	r2, r2, #4
 80131dc:	705a      	strb	r2, [r3, #1]
 80131de:	2200      	movs	r2, #0
 80131e0:	709a      	strb	r2, [r3, #2]
 80131e2:	2200      	movs	r2, #0
 80131e4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	2200      	movs	r2, #0
 80131ea:	f042 0202 	orr.w	r2, r2, #2
 80131ee:	711a      	strb	r2, [r3, #4]
 80131f0:	2200      	movs	r2, #0
 80131f2:	715a      	strb	r2, [r3, #5]
 80131f4:	2200      	movs	r2, #0
 80131f6:	719a      	strb	r2, [r3, #6]
 80131f8:	2200      	movs	r2, #0
 80131fa:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 80131fc:	68ba      	ldr	r2, [r7, #8]
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013208:	f002 fd34 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801320c:	f7ff f9cc 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 8013210:	bf00      	nop
 8013212:	3718      	adds	r7, #24
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 801321e:	f002 fd67 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013222:	f002 fcf7 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013226:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2200      	movs	r2, #0
 801322c:	f042 0211 	orr.w	r2, r2, #17
 8013230:	701a      	strb	r2, [r3, #0]
 8013232:	2200      	movs	r2, #0
 8013234:	f042 0204 	orr.w	r2, r2, #4
 8013238:	705a      	strb	r2, [r3, #1]
 801323a:	2200      	movs	r2, #0
 801323c:	709a      	strb	r2, [r3, #2]
 801323e:	2200      	movs	r2, #0
 8013240:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2200      	movs	r2, #0
 8013246:	711a      	strb	r2, [r3, #4]
 8013248:	2200      	movs	r2, #0
 801324a:	715a      	strb	r2, [r3, #5]
 801324c:	2200      	movs	r2, #0
 801324e:	719a      	strb	r2, [r3, #6]
 8013250:	2200      	movs	r2, #0
 8013252:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8013254:	f002 fd0e 	bl	8015c74 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 8013258:	f7ff f9f4 	bl	8012644 <zb_ipc_m4_get_retval>
 801325c:	4603      	mov	r3, r0
 801325e:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8013260:	f7ff f9a2 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return rc;
 8013264:	78fb      	ldrb	r3, [r7, #3]
}
 8013266:	4618      	mov	r0, r3
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b088      	sub	sp, #32
 8013272:	af00      	add	r7, sp, #0
 8013274:	60f8      	str	r0, [r7, #12]
 8013276:	60b9      	str	r1, [r7, #8]
 8013278:	607a      	str	r2, [r7, #4]
 801327a:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 801327c:	2300      	movs	r3, #0
 801327e:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d013      	beq.n	80132ae <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8013286:	6839      	ldr	r1, [r7, #0]
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ff f9b3 	bl	80125f4 <zb_ipc_m4_cb_info_alloc>
 801328e:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d101      	bne.n	801329a <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 8013296:	2389      	movs	r3, #137	@ 0x89
 8013298:	e03e      	b.n	8013318 <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	4618      	mov	r0, r3
 801329e:	f7ff fc19 	bl	8012ad4 <ZbApsAddrIsBcast>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 80132a8:	69fb      	ldr	r3, [r7, #28]
 80132aa:	2201      	movs	r2, #1
 80132ac:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 80132ae:	f002 fd1f 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80132b2:	f002 fcaf 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80132b6:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 80132b8:	69bb      	ldr	r3, [r7, #24]
 80132ba:	2200      	movs	r2, #0
 80132bc:	f042 0212 	orr.w	r2, r2, #18
 80132c0:	701a      	strb	r2, [r3, #0]
 80132c2:	2200      	movs	r2, #0
 80132c4:	f042 0204 	orr.w	r2, r2, #4
 80132c8:	705a      	strb	r2, [r3, #1]
 80132ca:	2200      	movs	r2, #0
 80132cc:	709a      	strb	r2, [r3, #2]
 80132ce:	2200      	movs	r2, #0
 80132d0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	2200      	movs	r2, #0
 80132d6:	f042 0202 	orr.w	r2, r2, #2
 80132da:	711a      	strb	r2, [r3, #4]
 80132dc:	2200      	movs	r2, #0
 80132de:	715a      	strb	r2, [r3, #5]
 80132e0:	2200      	movs	r2, #0
 80132e2:	719a      	strb	r2, [r3, #6]
 80132e4:	2200      	movs	r2, #0
 80132e6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 80132e8:	68ba      	ldr	r2, [r7, #8]
 80132ea:	69bb      	ldr	r3, [r7, #24]
 80132ec:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80132ee:	69fa      	ldr	r2, [r7, #28]
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80132f4:	f002 fcbe 	bl	8015c74 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 80132f8:	f7ff f9a4 	bl	8012644 <zb_ipc_m4_get_retval>
 80132fc:	4603      	mov	r3, r0
 80132fe:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8013300:	f7ff f952 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 8013304:	7dfb      	ldrb	r3, [r7, #23]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d005      	beq.n	8013316 <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d002      	beq.n	8013316 <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 8013310:	69f8      	ldr	r0, [r7, #28]
 8013312:	f7ff f98c 	bl	801262e <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 8013316:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 8013318:	4618      	mov	r0, r3
 801331a:	3720      	adds	r7, #32
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
 801332c:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801332e:	f002 fcdf 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013332:	f002 fc6f 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013336:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2200      	movs	r2, #0
 801333c:	f042 0214 	orr.w	r2, r2, #20
 8013340:	701a      	strb	r2, [r3, #0]
 8013342:	2200      	movs	r2, #0
 8013344:	f042 0204 	orr.w	r2, r2, #4
 8013348:	705a      	strb	r2, [r3, #1]
 801334a:	2200      	movs	r2, #0
 801334c:	709a      	strb	r2, [r3, #2]
 801334e:	2200      	movs	r2, #0
 8013350:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	2200      	movs	r2, #0
 8013356:	f042 0204 	orr.w	r2, r2, #4
 801335a:	711a      	strb	r2, [r3, #4]
 801335c:	2200      	movs	r2, #0
 801335e:	715a      	strb	r2, [r3, #5]
 8013360:	2200      	movs	r2, #0
 8013362:	719a      	strb	r2, [r3, #6]
 8013364:	2200      	movs	r2, #0
 8013366:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8013368:	68fa      	ldr	r2, [r7, #12]
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 801337a:	78fa      	ldrb	r2, [r7, #3]
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8013380:	f002 fc78 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013384:	f7ff f910 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 8013388:	bf00      	nop
 801338a:	3718      	adds	r7, #24
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 8013390:	b590      	push	{r4, r7, lr}
 8013392:	b091      	sub	sp, #68	@ 0x44
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
 801339c:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 801339e:	f107 0310 	add.w	r3, r7, #16
 80133a2:	4619      	mov	r1, r3
 80133a4:	68f8      	ldr	r0, [r7, #12]
 80133a6:	f7f0 fcae 	bl	8003d06 <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	f107 0410 	add.w	r4, r7, #16
 80133b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	7c1b      	ldrb	r3, [r3, #16]
 80133ba:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 80133be:	2301      	movs	r3, #1
 80133c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	8a1b      	ldrh	r3, [r3, #16]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d001      	beq.n	80133d0 <ZbZclClusterCommandReq+0x40>
 80133cc:	2301      	movs	r3, #1
 80133ce:	e000      	b.n	80133d2 <ZbZclClusterCommandReq+0x42>
 80133d0:	2300      	movs	r3, #0
 80133d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	7f1b      	ldrb	r3, [r3, #28]
        ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 80133da:	2b00      	cmp	r3, #0
 80133dc:	bf0c      	ite	eq
 80133de:	2301      	moveq	r3, #1
 80133e0:	2300      	movne	r3, #0
 80133e2:	b2db      	uxtb	r3, r3
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 80133e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	7c5b      	ldrb	r3, [r3, #17]
 80133ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	8a1b      	ldrh	r3, [r3, #16]
 80133f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 80133f6:	f7ff ff0f 	bl	8013218 <ZbZclGetNextSeqnum>
 80133fa:	4603      	mov	r3, r0
 80133fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	695b      	ldr	r3, [r3, #20]
 8013404:	637b      	str	r3, [r7, #52]	@ 0x34
    zcl_req.length = req->length;
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	699b      	ldr	r3, [r3, #24]
 801340a:	63bb      	str	r3, [r7, #56]	@ 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	6898      	ldr	r0, [r3, #8]
 8013410:	f107 0110 	add.w	r1, r7, #16
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	f7ff ff29 	bl	801326e <ZbZclCommandReq>
 801341c:	4603      	mov	r3, r0
}
 801341e:	4618      	mov	r0, r3
 8013420:	3744      	adds	r7, #68	@ 0x44
 8013422:	46bd      	mov	sp, r7
 8013424:	bd90      	pop	{r4, r7, pc}

08013426 <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 8013426:	b580      	push	{r7, lr}
 8013428:	b084      	sub	sp, #16
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 801342e:	f002 fc5f 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013432:	f002 fbef 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013436:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2200      	movs	r2, #0
 801343c:	f042 0202 	orr.w	r2, r2, #2
 8013440:	701a      	strb	r2, [r3, #0]
 8013442:	2200      	movs	r2, #0
 8013444:	f042 0204 	orr.w	r2, r2, #4
 8013448:	705a      	strb	r2, [r3, #1]
 801344a:	2200      	movs	r2, #0
 801344c:	709a      	strb	r2, [r3, #2]
 801344e:	2200      	movs	r2, #0
 8013450:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2200      	movs	r2, #0
 8013456:	f042 0201 	orr.w	r2, r2, #1
 801345a:	711a      	strb	r2, [r3, #4]
 801345c:	2200      	movs	r2, #0
 801345e:	715a      	strb	r2, [r3, #5]
 8013460:	2200      	movs	r2, #0
 8013462:	719a      	strb	r2, [r3, #6]
 8013464:	2200      	movs	r2, #0
 8013466:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801346e:	f002 fc01 	bl	8015c74 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8013472:	f7ff f8e7 	bl	8012644 <zb_ipc_m4_get_retval>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	bf14      	ite	ne
 801347c:	2301      	movne	r3, #1
 801347e:	2300      	moveq	r3, #0
 8013480:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8013482:	f7ff f891 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return rc;
 8013486:	7afb      	ldrb	r3, [r7, #11]
}
 8013488:	4618      	mov	r0, r3
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8013498:	f002 fc2a 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801349c:	f002 fbba 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80134a0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2200      	movs	r2, #0
 80134a6:	f042 0203 	orr.w	r2, r2, #3
 80134aa:	701a      	strb	r2, [r3, #0]
 80134ac:	2200      	movs	r2, #0
 80134ae:	f042 0204 	orr.w	r2, r2, #4
 80134b2:	705a      	strb	r2, [r3, #1]
 80134b4:	2200      	movs	r2, #0
 80134b6:	709a      	strb	r2, [r3, #2]
 80134b8:	2200      	movs	r2, #0
 80134ba:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2200      	movs	r2, #0
 80134c0:	f042 0201 	orr.w	r2, r2, #1
 80134c4:	711a      	strb	r2, [r3, #4]
 80134c6:	2200      	movs	r2, #0
 80134c8:	715a      	strb	r2, [r3, #5]
 80134ca:	2200      	movs	r2, #0
 80134cc:	719a      	strb	r2, [r3, #6]
 80134ce:	2200      	movs	r2, #0
 80134d0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80134d8:	f002 fbcc 	bl	8015c74 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80134dc:	f7ff f8b2 	bl	8012644 <zb_ipc_m4_get_retval>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	bf14      	ite	ne
 80134e6:	2301      	movne	r3, #1
 80134e8:	2300      	moveq	r3, #0
 80134ea:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 80134ec:	f7ff f85c 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return rc;
 80134f0:	7afb      	ldrb	r3, [r7, #11]
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3710      	adds	r7, #16
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}

080134fa <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b084      	sub	sp, #16
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
 8013502:	4608      	mov	r0, r1
 8013504:	4611      	mov	r1, r2
 8013506:	461a      	mov	r2, r3
 8013508:	4603      	mov	r3, r0
 801350a:	70fb      	strb	r3, [r7, #3]
 801350c:	460b      	mov	r3, r1
 801350e:	803b      	strh	r3, [r7, #0]
 8013510:	4613      	mov	r3, r2
 8013512:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 8013514:	f002 fbec 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013518:	f002 fb7c 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801351c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2200      	movs	r2, #0
 8013522:	f042 0204 	orr.w	r2, r2, #4
 8013526:	701a      	strb	r2, [r3, #0]
 8013528:	2200      	movs	r2, #0
 801352a:	f042 0204 	orr.w	r2, r2, #4
 801352e:	705a      	strb	r2, [r3, #1]
 8013530:	2200      	movs	r2, #0
 8013532:	709a      	strb	r2, [r3, #2]
 8013534:	2200      	movs	r2, #0
 8013536:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2200      	movs	r2, #0
 801353c:	f042 0204 	orr.w	r2, r2, #4
 8013540:	711a      	strb	r2, [r3, #4]
 8013542:	2200      	movs	r2, #0
 8013544:	715a      	strb	r2, [r3, #5]
 8013546:	2200      	movs	r2, #0
 8013548:	719a      	strb	r2, [r3, #6]
 801354a:	2200      	movs	r2, #0
 801354c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 8013554:	78fa      	ldrb	r2, [r7, #3]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 801355a:	883a      	ldrh	r2, [r7, #0]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 8013560:	78ba      	ldrb	r2, [r7, #2]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8013566:	f002 fb85 	bl	8015c74 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 801356a:	f7ff f86b 	bl	8012644 <zb_ipc_m4_get_retval>
 801356e:	4603      	mov	r3, r0
 8013570:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8013572:	f7ff f819 	bl	80125a8 <Post_ZigbeeCmdProcessing>
    return status;
 8013576:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 8013578:	4618      	mov	r0, r3
 801357a:	3710      	adds	r7, #16
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b084      	sub	sp, #16
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8013588:	f002 fbb2 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801358c:	f002 fb42 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013590:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2200      	movs	r2, #0
 8013596:	f042 0206 	orr.w	r2, r2, #6
 801359a:	701a      	strb	r2, [r3, #0]
 801359c:	2200      	movs	r2, #0
 801359e:	f042 0204 	orr.w	r2, r2, #4
 80135a2:	705a      	strb	r2, [r3, #1]
 80135a4:	2200      	movs	r2, #0
 80135a6:	709a      	strb	r2, [r3, #2]
 80135a8:	2200      	movs	r2, #0
 80135aa:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2200      	movs	r2, #0
 80135b0:	f042 0201 	orr.w	r2, r2, #1
 80135b4:	711a      	strb	r2, [r3, #4]
 80135b6:	2200      	movs	r2, #0
 80135b8:	715a      	strb	r2, [r3, #5]
 80135ba:	2200      	movs	r2, #0
 80135bc:	719a      	strb	r2, [r3, #6]
 80135be:	2200      	movs	r2, #0
 80135c0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80135c2:	687a      	ldr	r2, [r7, #4]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80135c8:	f002 fb54 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80135cc:	f7fe ffec 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 80135d0:	bf00      	nop
 80135d2:	3710      	adds	r7, #16
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80135e0:	f002 fb86 	bl	8015cf0 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80135e4:	f002 fb16 	bl	8015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80135e8:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2200      	movs	r2, #0
 80135ee:	f042 020b 	orr.w	r2, r2, #11
 80135f2:	701a      	strb	r2, [r3, #0]
 80135f4:	2200      	movs	r2, #0
 80135f6:	f042 0204 	orr.w	r2, r2, #4
 80135fa:	705a      	strb	r2, [r3, #1]
 80135fc:	2200      	movs	r2, #0
 80135fe:	709a      	strb	r2, [r3, #2]
 8013600:	2200      	movs	r2, #0
 8013602:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	f042 0201 	orr.w	r2, r2, #1
 801360c:	711a      	strb	r2, [r3, #4]
 801360e:	2200      	movs	r2, #0
 8013610:	715a      	strb	r2, [r3, #5]
 8013612:	2200      	movs	r2, #0
 8013614:	719a      	strb	r2, [r3, #6]
 8013616:	2200      	movs	r2, #0
 8013618:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013620:	f002 fb28 	bl	8015c74 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013624:	f7fe ffc0 	bl	80125a8 <Post_ZigbeeCmdProcessing>
}
 8013628:	bf00      	nop
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
 801363c:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 801363e:	68b8      	ldr	r0, [r7, #8]
 8013640:	f003 f9a4 	bl	801698c <malloc>
 8013644:	4603      	mov	r3, r0
}
 8013646:	4618      	mov	r0, r3
 8013648:	3710      	adds	r7, #16
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}

0801364e <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 801364e:	b580      	push	{r7, lr}
 8013650:	b084      	sub	sp, #16
 8013652:	af00      	add	r7, sp, #0
 8013654:	60f8      	str	r0, [r7, #12]
 8013656:	60b9      	str	r1, [r7, #8]
 8013658:	607a      	str	r2, [r7, #4]
 801365a:	603b      	str	r3, [r7, #0]
    free(ptr);
 801365c:	68b8      	ldr	r0, [r7, #8]
 801365e:	f003 f99d 	bl	801699c <free>
}
 8013662:	bf00      	nop
 8013664:	3710      	adds	r7, #16
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
	...

0801366c <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 801366c:	b480      	push	{r7}
 801366e:	b087      	sub	sp, #28
 8013670:	af00      	add	r7, sp, #0
 8013672:	4603      	mov	r3, r0
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]
 8013678:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 801367e:	e00e      	b.n	801369e <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 8013680:	89fb      	ldrh	r3, [r7, #14]
 8013682:	0a1b      	lsrs	r3, r3, #8
 8013684:	b29a      	uxth	r2, r3
 8013686:	89fb      	ldrh	r3, [r7, #14]
 8013688:	b2d9      	uxtb	r1, r3
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	1c58      	adds	r0, r3, #1
 801368e:	6178      	str	r0, [r7, #20]
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	404b      	eors	r3, r1
 8013694:	4908      	ldr	r1, [pc, #32]	@ (80136b8 <WpanCrc+0x4c>)
 8013696:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801369a:	4053      	eors	r3, r2
 801369c:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	1e5a      	subs	r2, r3, #1
 80136a2:	607a      	str	r2, [r7, #4]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1eb      	bne.n	8013680 <WpanCrc+0x14>
    }
    return crc;
 80136a8:	89fb      	ldrh	r3, [r7, #14]
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	371c      	adds	r7, #28
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr
 80136b6:	bf00      	nop
 80136b8:	08019b24 	.word	0x08019b24

080136bc <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 80136bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136be:	b0cf      	sub	sp, #316	@ 0x13c
 80136c0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80136c2:	2300      	movs	r3, #0
 80136c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 80136c8:	2300      	movs	r3, #0
 80136ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 80136d4:	f002 fab6 	bl	8015c44 <ZIGBEE_Get_NotificationPayloadBuffer>
 80136d8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 80136dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f240 421c 	movw	r2, #1052	@ 0x41c
 80136e6:	4293      	cmp	r3, r2
 80136e8:	f201 82f0 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 80136ec:	f240 4205 	movw	r2, #1029	@ 0x405
 80136f0:	4293      	cmp	r3, r2
 80136f2:	d22d      	bcs.n	8013750 <Zigbee_CallBackProcessing+0x94>
 80136f4:	f240 321d 	movw	r2, #797	@ 0x31d
 80136f8:	4293      	cmp	r3, r2
 80136fa:	f201 82e7 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 80136fe:	f240 3206 	movw	r2, #774	@ 0x306
 8013702:	4293      	cmp	r3, r2
 8013704:	d25c      	bcs.n	80137c0 <Zigbee_CallBackProcessing+0x104>
 8013706:	f240 2209 	movw	r2, #521	@ 0x209
 801370a:	4293      	cmp	r3, r2
 801370c:	f000 847e 	beq.w	801400c <Zigbee_CallBackProcessing+0x950>
 8013710:	f240 2209 	movw	r2, #521	@ 0x209
 8013714:	4293      	cmp	r3, r2
 8013716:	f201 82d9 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 801371a:	f240 2207 	movw	r2, #519	@ 0x207
 801371e:	4293      	cmp	r3, r2
 8013720:	f000 8443 	beq.w	8013faa <Zigbee_CallBackProcessing+0x8ee>
 8013724:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8013728:	f081 82d0 	bcs.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 801372c:	f240 2205 	movw	r2, #517	@ 0x205
 8013730:	4293      	cmp	r3, r2
 8013732:	f000 840c 	beq.w	8013f4e <Zigbee_CallBackProcessing+0x892>
 8013736:	f240 2205 	movw	r2, #517	@ 0x205
 801373a:	4293      	cmp	r3, r2
 801373c:	f201 82c6 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 8013740:	2b3e      	cmp	r3, #62	@ 0x3e
 8013742:	f200 8133 	bhi.w	80139ac <Zigbee_CallBackProcessing+0x2f0>
 8013746:	2b0d      	cmp	r3, #13
 8013748:	f080 80c4 	bcs.w	80138d4 <Zigbee_CallBackProcessing+0x218>
 801374c:	f001 babe 	b.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 8013750:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 8013754:	2b17      	cmp	r3, #23
 8013756:	f201 82b9 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 801375a:	a201      	add	r2, pc, #4	@ (adr r2, 8013760 <Zigbee_CallBackProcessing+0xa4>)
 801375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013760:	08014963 	.word	0x08014963
 8013764:	08014ccd 	.word	0x08014ccd
 8013768:	08014ccd 	.word	0x08014ccd
 801376c:	08014ccd 	.word	0x08014ccd
 8013770:	08014ccd 	.word	0x08014ccd
 8013774:	080149ab 	.word	0x080149ab
 8013778:	08014ccd 	.word	0x08014ccd
 801377c:	08014ccd 	.word	0x08014ccd
 8013780:	08014ccd 	.word	0x08014ccd
 8013784:	08014ccd 	.word	0x08014ccd
 8013788:	080149f3 	.word	0x080149f3
 801378c:	08014ccd 	.word	0x08014ccd
 8013790:	08014ccd 	.word	0x08014ccd
 8013794:	08014ccd 	.word	0x08014ccd
 8013798:	08014a67 	.word	0x08014a67
 801379c:	08014ccd 	.word	0x08014ccd
 80137a0:	08014ccd 	.word	0x08014ccd
 80137a4:	08014af1 	.word	0x08014af1
 80137a8:	08014ccd 	.word	0x08014ccd
 80137ac:	08014b4b 	.word	0x08014b4b
 80137b0:	08014ccd 	.word	0x08014ccd
 80137b4:	08014ba5 	.word	0x08014ba5
 80137b8:	08014ccd 	.word	0x08014ccd
 80137bc:	08014bff 	.word	0x08014bff
 80137c0:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 80137c4:	2b17      	cmp	r3, #23
 80137c6:	f201 8281 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 80137ca:	a201      	add	r2, pc, #4	@ (adr r2, 80137d0 <Zigbee_CallBackProcessing+0x114>)
 80137cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d0:	0801408d 	.word	0x0801408d
 80137d4:	08014ccd 	.word	0x08014ccd
 80137d8:	08014145 	.word	0x08014145
 80137dc:	08014ccd 	.word	0x08014ccd
 80137e0:	08014ccd 	.word	0x08014ccd
 80137e4:	08014ccd 	.word	0x08014ccd
 80137e8:	080141a1 	.word	0x080141a1
 80137ec:	08014ccd 	.word	0x08014ccd
 80137f0:	080141fd 	.word	0x080141fd
 80137f4:	08014ccd 	.word	0x08014ccd
 80137f8:	08014ccd 	.word	0x08014ccd
 80137fc:	08014ccd 	.word	0x08014ccd
 8013800:	08014ccd 	.word	0x08014ccd
 8013804:	08014ccd 	.word	0x08014ccd
 8013808:	08014ccd 	.word	0x08014ccd
 801380c:	08014ccd 	.word	0x08014ccd
 8013810:	08014ccd 	.word	0x08014ccd
 8013814:	08014ccd 	.word	0x08014ccd
 8013818:	08014ccd 	.word	0x08014ccd
 801381c:	08014ccd 	.word	0x08014ccd
 8013820:	08014ccd 	.word	0x08014ccd
 8013824:	08014ccd 	.word	0x08014ccd
 8013828:	08014ccd 	.word	0x08014ccd
 801382c:	080140e9 	.word	0x080140e9
 8013830:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8013834:	2b24      	cmp	r3, #36	@ 0x24
 8013836:	f201 8249 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 801383a:	a201      	add	r2, pc, #4	@ (adr r2, 8013840 <Zigbee_CallBackProcessing+0x184>)
 801383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013840:	080142fb 	.word	0x080142fb
 8013844:	08014ccd 	.word	0x08014ccd
 8013848:	08014353 	.word	0x08014353
 801384c:	08014ccd 	.word	0x08014ccd
 8013850:	080143c5 	.word	0x080143c5
 8013854:	08014ccd 	.word	0x08014ccd
 8013858:	0801441d 	.word	0x0801441d
 801385c:	08014ccd 	.word	0x08014ccd
 8013860:	08014475 	.word	0x08014475
 8013864:	08014ccd 	.word	0x08014ccd
 8013868:	080144cd 	.word	0x080144cd
 801386c:	08014ccd 	.word	0x08014ccd
 8013870:	08014525 	.word	0x08014525
 8013874:	08014ccd 	.word	0x08014ccd
 8013878:	0801457b 	.word	0x0801457b
 801387c:	08014ccd 	.word	0x08014ccd
 8013880:	08014ccd 	.word	0x08014ccd
 8013884:	08014ccd 	.word	0x08014ccd
 8013888:	08014259 	.word	0x08014259
 801388c:	08014ccd 	.word	0x08014ccd
 8013890:	080145c5 	.word	0x080145c5
 8013894:	08014ccd 	.word	0x08014ccd
 8013898:	0801461f 	.word	0x0801461f
 801389c:	08014ccd 	.word	0x08014ccd
 80138a0:	08014679 	.word	0x08014679
 80138a4:	08014ccd 	.word	0x08014ccd
 80138a8:	080146ed 	.word	0x080146ed
 80138ac:	08014ccd 	.word	0x08014ccd
 80138b0:	08014747 	.word	0x08014747
 80138b4:	08014ccd 	.word	0x08014ccd
 80138b8:	080147a1 	.word	0x080147a1
 80138bc:	08014ccd 	.word	0x08014ccd
 80138c0:	080147fb 	.word	0x080147fb
 80138c4:	08014ccd 	.word	0x08014ccd
 80138c8:	08014855 	.word	0x08014855
 80138cc:	08014ccd 	.word	0x08014ccd
 80138d0:	080148af 	.word	0x080148af
 80138d4:	3b0d      	subs	r3, #13
 80138d6:	2b31      	cmp	r3, #49	@ 0x31
 80138d8:	f201 81f8 	bhi.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 80138dc:	a201      	add	r2, pc, #4	@ (adr r2, 80138e4 <Zigbee_CallBackProcessing+0x228>)
 80138de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138e2:	bf00      	nop
 80138e4:	080139c1 	.word	0x080139c1
 80138e8:	08014ccd 	.word	0x08014ccd
 80138ec:	08014ccd 	.word	0x08014ccd
 80138f0:	08014ccd 	.word	0x08014ccd
 80138f4:	08014ccd 	.word	0x08014ccd
 80138f8:	08013a27 	.word	0x08013a27
 80138fc:	08014ccd 	.word	0x08014ccd
 8013900:	08014ccd 	.word	0x08014ccd
 8013904:	08014ccd 	.word	0x08014ccd
 8013908:	08014ccd 	.word	0x08014ccd
 801390c:	08014ccd 	.word	0x08014ccd
 8013910:	08014ccd 	.word	0x08014ccd
 8013914:	08014ccd 	.word	0x08014ccd
 8013918:	08013a9b 	.word	0x08013a9b
 801391c:	08014ccd 	.word	0x08014ccd
 8013920:	08014ccd 	.word	0x08014ccd
 8013924:	08013af7 	.word	0x08013af7
 8013928:	08014ccd 	.word	0x08014ccd
 801392c:	08013b5f 	.word	0x08013b5f
 8013930:	08014ccd 	.word	0x08014ccd
 8013934:	08013bc7 	.word	0x08013bc7
 8013938:	08014ccd 	.word	0x08014ccd
 801393c:	08013c2f 	.word	0x08013c2f
 8013940:	08014ccd 	.word	0x08014ccd
 8013944:	08014ccd 	.word	0x08014ccd
 8013948:	08013c97 	.word	0x08013c97
 801394c:	08014ccd 	.word	0x08014ccd
 8013950:	08014ccd 	.word	0x08014ccd
 8013954:	08013d19 	.word	0x08013d19
 8013958:	08014ccd 	.word	0x08014ccd
 801395c:	08013d81 	.word	0x08013d81
 8013960:	08014ccd 	.word	0x08014ccd
 8013964:	08014ccd 	.word	0x08014ccd
 8013968:	08014ccd 	.word	0x08014ccd
 801396c:	08013d9f 	.word	0x08013d9f
 8013970:	08014ccd 	.word	0x08014ccd
 8013974:	08014ccd 	.word	0x08014ccd
 8013978:	08014ccd 	.word	0x08014ccd
 801397c:	08013df7 	.word	0x08013df7
 8013980:	08014ccd 	.word	0x08014ccd
 8013984:	08014ccd 	.word	0x08014ccd
 8013988:	08014ccd 	.word	0x08014ccd
 801398c:	08014ccd 	.word	0x08014ccd
 8013990:	08014ccd 	.word	0x08014ccd
 8013994:	08013e47 	.word	0x08013e47
 8013998:	08014ccd 	.word	0x08014ccd
 801399c:	08013e9f 	.word	0x08013e9f
 80139a0:	08014ccd 	.word	0x08014ccd
 80139a4:	08013ef7 	.word	0x08013ef7
 80139a8:	08014c79 	.word	0x08014c79
 80139ac:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80139b0:	f081 818c 	bcs.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
 80139b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139b8:	f63f af3a 	bhi.w	8013830 <Zigbee_CallBackProcessing+0x174>
 80139bc:	f001 b986 	b.w	8014ccc <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 80139c0:	4bbb      	ldr	r3, [pc, #748]	@ (8013cb0 <Zigbee_CallBackProcessing+0x5f4>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 80139c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d006      	beq.n	80139de <Zigbee_CallBackProcessing+0x322>
 80139d0:	4bb8      	ldr	r3, [pc, #736]	@ (8013cb4 <Zigbee_CallBackProcessing+0x5f8>)
 80139d2:	4ab9      	ldr	r2, [pc, #740]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 80139d4:	f640 51ed 	movw	r1, #3565	@ 0xded
 80139d8:	48b8      	ldr	r0, [pc, #736]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 80139da:	f002 ffb9 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 80139de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80139e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	f001 8171 	beq.w	8014cd4 <Zigbee_CallBackProcessing+0x1618>
 80139f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f001 816b 	beq.w	8014cd4 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 80139fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013a0c:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 8013a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	4610      	mov	r0, r2
 8013a20:	4798      	blx	r3
            }
            break;
 8013a22:	f001 b957 	b.w	8014cd4 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 8013a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	d006      	beq.n	8013a3e <Zigbee_CallBackProcessing+0x382>
 8013a30:	4ba3      	ldr	r3, [pc, #652]	@ (8013cc0 <Zigbee_CallBackProcessing+0x604>)
 8013a32:	4aa1      	ldr	r2, [pc, #644]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013a34:	f640 51fc 	movw	r1, #3580	@ 0xdfc
 8013a38:	48a0      	ldr	r0, [pc, #640]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013a3a:	f002 ff89 	bl	8016950 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 8013a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013a42:	691a      	ldr	r2, [r3, #16]
 8013a44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a48:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013a4c:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8013a4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	685d      	ldr	r5, [r3, #4]
 8013a5a:	4b95      	ldr	r3, [pc, #596]	@ (8013cb0 <Zigbee_CallBackProcessing+0x5f4>)
 8013a5c:	6818      	ldr	r0, [r3, #0]
 8013a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013a62:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 8013a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013a68:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8013a6a:	461e      	mov	r6, r3
 8013a6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	689b      	ldr	r3, [r3, #8]
 8013a78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013a7c:	f2a2 141d 	subw	r4, r2, #285	@ 0x11d
 8013a80:	4632      	mov	r2, r6
 8013a82:	47a8      	blx	r5
 8013a84:	4603      	mov	r3, r0
 8013a86:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 8013a88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013a8c:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8013a96:	f001 b980 	b.w	8014d9a <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 8013a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	2b01      	cmp	r3, #1
 8013aa2:	d006      	beq.n	8013ab2 <Zigbee_CallBackProcessing+0x3f6>
 8013aa4:	4b83      	ldr	r3, [pc, #524]	@ (8013cb4 <Zigbee_CallBackProcessing+0x5f8>)
 8013aa6:	4a84      	ldr	r2, [pc, #528]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013aa8:	f640 6108 	movw	r1, #3592	@ 0xe08
 8013aac:	4883      	ldr	r0, [pc, #524]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013aae:	f002 ff4f 	bl	8016950 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 8013ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013ab6:	689a      	ldr	r2, [r3, #8]
 8013ab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013abc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013ac0:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8013ac2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ac6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	f001 8102 	beq.w	8014cd8 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 8013ad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ad8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013ae4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8013ae8:	6812      	ldr	r2, [r2, #0]
 8013aea:	6852      	ldr	r2, [r2, #4]
 8013aec:	4611      	mov	r1, r2
 8013aee:	2000      	movs	r0, #0
 8013af0:	4798      	blx	r3
            }
            break;
 8013af2:	f001 b8f1 	b.w	8014cd8 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8013af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d006      	beq.n	8013b0e <Zigbee_CallBackProcessing+0x452>
 8013b00:	4b70      	ldr	r3, [pc, #448]	@ (8013cc4 <Zigbee_CallBackProcessing+0x608>)
 8013b02:	4a6d      	ldr	r2, [pc, #436]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013b04:	f640 6111 	movw	r1, #3601	@ 0xe11
 8013b08:	486c      	ldr	r0, [pc, #432]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013b0a:	f002 ff21 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013b12:	68db      	ldr	r3, [r3, #12]
 8013b14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f001 80dd 	beq.w	8014cdc <Zigbee_CallBackProcessing+0x1620>
 8013b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	f001 80d7 	beq.w	8014cdc <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8013b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013b3c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8013b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	b2da      	uxtb	r2, r3
 8013b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b4a:	6859      	ldr	r1, [r3, #4]
 8013b4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	4610      	mov	r0, r2
 8013b58:	4798      	blx	r3
            }
            break;
 8013b5a:	f001 b8bf 	b.w	8014cdc <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8013b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	2b02      	cmp	r3, #2
 8013b66:	d006      	beq.n	8013b76 <Zigbee_CallBackProcessing+0x4ba>
 8013b68:	4b56      	ldr	r3, [pc, #344]	@ (8013cc4 <Zigbee_CallBackProcessing+0x608>)
 8013b6a:	4a53      	ldr	r2, [pc, #332]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013b6c:	f640 611c 	movw	r1, #3612	@ 0xe1c
 8013b70:	4852      	ldr	r0, [pc, #328]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013b72:	f002 feed 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	f001 80ab 	beq.w	8014ce0 <Zigbee_CallBackProcessing+0x1624>
 8013b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	f001 80a5 	beq.w	8014ce0 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 8013b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013b9a:	681a      	ldr	r2, [r3, #0]
 8013b9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013ba0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013ba4:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 8013ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013baa:	689b      	ldr	r3, [r3, #8]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013bb2:	685a      	ldr	r2, [r3, #4]
 8013bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013bb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4611      	mov	r1, r2
 8013bc0:	4798      	blx	r3
            }
            break;
 8013bc2:	f001 b88d 	b.w	8014ce0 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8013bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	d006      	beq.n	8013bde <Zigbee_CallBackProcessing+0x522>
 8013bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8013cc4 <Zigbee_CallBackProcessing+0x608>)
 8013bd2:	4a39      	ldr	r2, [pc, #228]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013bd4:	f640 6127 	movw	r1, #3623	@ 0xe27
 8013bd8:	4838      	ldr	r0, [pc, #224]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013bda:	f002 feb9 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f001 8079 	beq.w	8014ce4 <Zigbee_CallBackProcessing+0x1628>
 8013bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f001 8073 	beq.w	8014ce4 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8013bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013c0c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8013c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013c12:	689b      	ldr	r3, [r3, #8]
 8013c14:	b2da      	uxtb	r2, r3
 8013c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c1a:	6859      	ldr	r1, [r3, #4]
 8013c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	4610      	mov	r0, r2
 8013c28:	4798      	blx	r3
            }
            break;
 8013c2a:	f001 b85b 	b.w	8014ce4 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 8013c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	2b02      	cmp	r3, #2
 8013c36:	d006      	beq.n	8013c46 <Zigbee_CallBackProcessing+0x58a>
 8013c38:	4b22      	ldr	r3, [pc, #136]	@ (8013cc4 <Zigbee_CallBackProcessing+0x608>)
 8013c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013c3c:	f640 6132 	movw	r1, #3634	@ 0xe32
 8013c40:	481e      	ldr	r0, [pc, #120]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013c42:	f002 fe85 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f001 8047 	beq.w	8014ce8 <Zigbee_CallBackProcessing+0x162c>
 8013c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f001 8041 	beq.w	8014ce8 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8013c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013c74:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8013c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	b2da      	uxtb	r2, r3
 8013c7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013c82:	6859      	ldr	r1, [r3, #4]
 8013c84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	4610      	mov	r0, r2
 8013c90:	4798      	blx	r3
            }
            break;
 8013c92:	f001 b829 	b.w	8014ce8 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8013c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	2b02      	cmp	r3, #2
 8013c9e:	d013      	beq.n	8013cc8 <Zigbee_CallBackProcessing+0x60c>
 8013ca0:	4b08      	ldr	r3, [pc, #32]	@ (8013cc4 <Zigbee_CallBackProcessing+0x608>)
 8013ca2:	4a05      	ldr	r2, [pc, #20]	@ (8013cb8 <Zigbee_CallBackProcessing+0x5fc>)
 8013ca4:	f640 613d 	movw	r1, #3645	@ 0xe3d
 8013ca8:	4804      	ldr	r0, [pc, #16]	@ (8013cbc <Zigbee_CallBackProcessing+0x600>)
 8013caa:	f002 fe51 	bl	8016950 <__assert_func>
 8013cae:	bf00      	nop
 8013cb0:	2000058c 	.word	0x2000058c
 8013cb4:	08018f50 	.word	0x08018f50
 8013cb8:	08019d50 	.word	0x08019d50
 8013cbc:	08018ec0 	.word	0x08018ec0
 8013cc0:	08018f6c 	.word	0x08018f6c
 8013cc4:	08018f88 	.word	0x08018f88
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	f001 8008 	beq.w	8014cec <Zigbee_CallBackProcessing+0x1630>
 8013cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	f001 8002 	beq.w	8014cec <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8013ce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013cf6:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8013cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013cfc:	689b      	ldr	r3, [r3, #8]
 8013cfe:	b2da      	uxtb	r2, r3
 8013d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d04:	6859      	ldr	r1, [r3, #4]
 8013d06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	4610      	mov	r0, r2
 8013d12:	4798      	blx	r3
            }
            break;
 8013d14:	f000 bfea 	b.w	8014cec <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8013d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	2b02      	cmp	r3, #2
 8013d20:	d006      	beq.n	8013d30 <Zigbee_CallBackProcessing+0x674>
 8013d22:	4bc2      	ldr	r3, [pc, #776]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013d24:	4ac2      	ldr	r2, [pc, #776]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013d26:	f640 6148 	movw	r1, #3656	@ 0xe48
 8013d2a:	48c2      	ldr	r0, [pc, #776]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013d2c:	f002 fe10 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	f000 87d6 	beq.w	8014cf0 <Zigbee_CallBackProcessing+0x1634>
 8013d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	f000 87d0 	beq.w	8014cf0 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8013d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d5a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013d5e:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8013d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013d64:	689b      	ldr	r3, [r3, #8]
 8013d66:	b2da      	uxtb	r2, r3
 8013d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013d6c:	6859      	ldr	r1, [r3, #4]
 8013d6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013d72:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4610      	mov	r0, r2
 8013d7a:	4798      	blx	r3
            }
            break;
 8013d7c:	f000 bfb8 	b.w	8014cf0 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8013d80:	4bad      	ldr	r3, [pc, #692]	@ (8014038 <Zigbee_CallBackProcessing+0x97c>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f000 87b5 	beq.w	8014cf4 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8013d8a:	4bab      	ldr	r3, [pc, #684]	@ (8014038 <Zigbee_CallBackProcessing+0x97c>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4aab      	ldr	r2, [pc, #684]	@ (801403c <Zigbee_CallBackProcessing+0x980>)
 8013d90:	6812      	ldr	r2, [r2, #0]
 8013d92:	49ab      	ldr	r1, [pc, #684]	@ (8014040 <Zigbee_CallBackProcessing+0x984>)
 8013d94:	6809      	ldr	r1, [r1, #0]
 8013d96:	4610      	mov	r0, r2
 8013d98:	4798      	blx	r3
            }
            break;
 8013d9a:	f000 bfab 	b.w	8014cf4 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8013d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	2b02      	cmp	r3, #2
 8013da6:	d006      	beq.n	8013db6 <Zigbee_CallBackProcessing+0x6fa>
 8013da8:	4ba0      	ldr	r3, [pc, #640]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013daa:	4aa1      	ldr	r2, [pc, #644]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013dac:	f640 6159 	movw	r1, #3673	@ 0xe59
 8013db0:	48a0      	ldr	r0, [pc, #640]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013db2:	f002 fdcd 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f000 8797 	beq.w	8014cf8 <Zigbee_CallBackProcessing+0x163c>
 8013dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	f000 8791 	beq.w	8014cf8 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8013dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	637b      	str	r3, [r7, #52]	@ 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8013dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013de2:	689b      	ldr	r3, [r3, #8]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013dea:	685a      	ldr	r2, [r3, #4]
 8013dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dee:	4611      	mov	r1, r2
 8013df0:	4798      	blx	r3
            }
            break;
 8013df2:	f000 bf81 	b.w	8014cf8 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8013df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d006      	beq.n	8013e0e <Zigbee_CallBackProcessing+0x752>
 8013e00:	4b90      	ldr	r3, [pc, #576]	@ (8014044 <Zigbee_CallBackProcessing+0x988>)
 8013e02:	4a8b      	ldr	r2, [pc, #556]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013e04:	f640 6164 	movw	r1, #3684	@ 0xe64
 8013e08:	488a      	ldr	r0, [pc, #552]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013e0a:	f002 fda1 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8013e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f000 876d 	beq.w	8014cfc <Zigbee_CallBackProcessing+0x1640>
 8013e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f000 8767 	beq.w	8014cfc <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8013e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback(info->arg);
 8013e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e3a:	685a      	ldr	r2, [r3, #4]
 8013e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3e:	4610      	mov	r0, r2
 8013e40:	4798      	blx	r3
            }
            break;
 8013e42:	f000 bf5b 	b.w	8014cfc <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8013e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	2b02      	cmp	r3, #2
 8013e4e:	d006      	beq.n	8013e5e <Zigbee_CallBackProcessing+0x7a2>
 8013e50:	4b76      	ldr	r3, [pc, #472]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013e52:	4a77      	ldr	r2, [pc, #476]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013e54:	f44f 6167 	mov.w	r1, #3696	@ 0xe70
 8013e58:	4876      	ldr	r0, [pc, #472]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013e5a:	f002 fd79 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f000 8747 	beq.w	8014d00 <Zigbee_CallBackProcessing+0x1644>
 8013e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 8741 	beq.w	8014d00 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8013e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8013e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013e8a:	689b      	ldr	r3, [r3, #8]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e92:	685a      	ldr	r2, [r3, #4]
 8013e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e96:	4611      	mov	r1, r2
 8013e98:	4798      	blx	r3
            }
            break;
 8013e9a:	f000 bf31 	b.w	8014d00 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8013e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	2b02      	cmp	r3, #2
 8013ea6:	d006      	beq.n	8013eb6 <Zigbee_CallBackProcessing+0x7fa>
 8013ea8:	4b60      	ldr	r3, [pc, #384]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013eaa:	4a61      	ldr	r2, [pc, #388]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013eac:	f640 617c 	movw	r1, #3708	@ 0xe7c
 8013eb0:	4860      	ldr	r0, [pc, #384]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013eb2:	f002 fd4d 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f000 871d 	beq.w	8014d04 <Zigbee_CallBackProcessing+0x1648>
 8013eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f000 8717 	beq.w	8014d04 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8013ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8013ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013ee2:	689b      	ldr	r3, [r3, #8]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013eea:	685a      	ldr	r2, [r3, #4]
 8013eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013eee:	4611      	mov	r1, r2
 8013ef0:	4798      	blx	r3
            }
            break;
 8013ef2:	f000 bf07 	b.w	8014d04 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8013ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013efa:	685b      	ldr	r3, [r3, #4]
 8013efc:	2b02      	cmp	r3, #2
 8013efe:	d006      	beq.n	8013f0e <Zigbee_CallBackProcessing+0x852>
 8013f00:	4b4a      	ldr	r3, [pc, #296]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013f02:	4a4b      	ldr	r2, [pc, #300]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013f04:	f640 6188 	movw	r1, #3720	@ 0xe88
 8013f08:	484a      	ldr	r0, [pc, #296]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013f0a:	f002 fd21 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013f12:	68db      	ldr	r3, [r3, #12]
 8013f14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	f000 86f3 	beq.w	8014d08 <Zigbee_CallBackProcessing+0x164c>
 8013f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 86ed 	beq.w	8014d08 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8013f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	647b      	str	r3, [r7, #68]	@ 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 8013f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013f3a:	689b      	ldr	r3, [r3, #8]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f42:	685a      	ldr	r2, [r3, #4]
 8013f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f46:	4611      	mov	r1, r2
 8013f48:	4798      	blx	r3
            }
            break;
 8013f4a:	f000 bedd 	b.w	8014d08 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8013f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	2b02      	cmp	r3, #2
 8013f56:	d006      	beq.n	8013f66 <Zigbee_CallBackProcessing+0x8aa>
 8013f58:	4b34      	ldr	r3, [pc, #208]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013f5a:	4a35      	ldr	r2, [pc, #212]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013f5c:	f640 6193 	movw	r1, #3731	@ 0xe93
 8013f60:	4834      	ldr	r0, [pc, #208]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013f62:	f002 fcf5 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f000 86c9 	beq.w	8014d0c <Zigbee_CallBackProcessing+0x1650>
 8013f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f000 86c3 	beq.w	8014d0c <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8013f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8013f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013f94:	689b      	ldr	r3, [r3, #8]
 8013f96:	4618      	mov	r0, r3
 8013f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f9c:	685a      	ldr	r2, [r3, #4]
 8013f9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4798      	blx	r3
            }
            break;
 8013fa6:	f000 beb1 	b.w	8014d0c <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8013faa:	2300      	movs	r3, #0
 8013fac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 8013fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d006      	beq.n	8013fc8 <Zigbee_CallBackProcessing+0x90c>
 8013fba:	4b1c      	ldr	r3, [pc, #112]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 8013fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8013fbe:	f640 61a3 	movw	r1, #3747	@ 0xea3
 8013fc2:	481c      	ldr	r0, [pc, #112]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8013fc4:	f002 fcc4 	bl	8016950 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8013fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013fcc:	689b      	ldr	r3, [r3, #8]
 8013fce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8013fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013fd6:	68db      	ldr	r3, [r3, #12]
 8013fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 8013fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00b      	beq.n	8013ffe <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8013fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8013ff0:	6892      	ldr	r2, [r2, #8]
 8013ff2:	4611      	mov	r1, r2
 8013ff4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8013ff8:	4798      	blx	r3
 8013ffa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013ffe:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8014002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014006:	60da      	str	r2, [r3, #12]
            break;
 8014008:	f000 bec7 	b.w	8014d9a <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 801400c:	2300      	movs	r3, #0
 801400e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 8014012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014016:	685b      	ldr	r3, [r3, #4]
 8014018:	2b02      	cmp	r3, #2
 801401a:	d015      	beq.n	8014048 <Zigbee_CallBackProcessing+0x98c>
 801401c:	4b03      	ldr	r3, [pc, #12]	@ (801402c <Zigbee_CallBackProcessing+0x970>)
 801401e:	4a04      	ldr	r2, [pc, #16]	@ (8014030 <Zigbee_CallBackProcessing+0x974>)
 8014020:	f640 61b4 	movw	r1, #3764	@ 0xeb4
 8014024:	4803      	ldr	r0, [pc, #12]	@ (8014034 <Zigbee_CallBackProcessing+0x978>)
 8014026:	f002 fc93 	bl	8016950 <__assert_func>
 801402a:	bf00      	nop
 801402c:	08018f88 	.word	0x08018f88
 8014030:	08019d50 	.word	0x08019d50
 8014034:	08018ec0 	.word	0x08018ec0
 8014038:	2000057c 	.word	0x2000057c
 801403c:	2000058c 	.word	0x2000058c
 8014040:	20000580 	.word	0x20000580
 8014044:	08018f50 	.word	0x08018f50
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8014048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8014052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 801405c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00b      	beq.n	801407e <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8014066:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8014070:	6892      	ldr	r2, [r2, #8]
 8014072:	4611      	mov	r1, r2
 8014074:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8014078:	4798      	blx	r3
 801407a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801407e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8014082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014086:	60da      	str	r2, [r3, #12]
            break;
 8014088:	f000 be87 	b.w	8014d9a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 801408c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	2b02      	cmp	r3, #2
 8014094:	d006      	beq.n	80140a4 <Zigbee_CallBackProcessing+0x9e8>
 8014096:	4bc5      	ldr	r3, [pc, #788]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 8014098:	4ac5      	ldr	r2, [pc, #788]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 801409a:	f44f 616c 	mov.w	r1, #3776	@ 0xec0
 801409e:	48c5      	ldr	r0, [pc, #788]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 80140a0:	f002 fc56 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80140a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80140a8:	68db      	ldr	r3, [r3, #12]
 80140aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80140ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	f000 862c 	beq.w	8014d10 <Zigbee_CallBackProcessing+0x1654>
 80140b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	f000 8626 	beq.w	8014d10 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 80140c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 80140ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140da:	685a      	ldr	r2, [r3, #4]
 80140dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80140e0:	4611      	mov	r1, r2
 80140e2:	4798      	blx	r3
            }
            break;
 80140e4:	f000 be14 	b.w	8014d10 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 80140e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	d006      	beq.n	8014100 <Zigbee_CallBackProcessing+0xa44>
 80140f2:	4bae      	ldr	r3, [pc, #696]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 80140f4:	4aae      	ldr	r2, [pc, #696]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 80140f6:	f640 61cc 	movw	r1, #3788	@ 0xecc
 80140fa:	48ae      	ldr	r0, [pc, #696]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 80140fc:	f002 fc28 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801410a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801410e:	2b00      	cmp	r3, #0
 8014110:	f000 8600 	beq.w	8014d14 <Zigbee_CallBackProcessing+0x1658>
 8014114:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	f000 85fa 	beq.w	8014d14 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 8014120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 801412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801412e:	689b      	ldr	r3, [r3, #8]
 8014130:	4618      	mov	r0, r3
 8014132:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014136:	685a      	ldr	r2, [r3, #4]
 8014138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801413c:	4611      	mov	r1, r2
 801413e:	4798      	blx	r3
            }
            break;
 8014140:	f000 bde8 	b.w	8014d14 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 8014144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	2b02      	cmp	r3, #2
 801414c:	d006      	beq.n	801415c <Zigbee_CallBackProcessing+0xaa0>
 801414e:	4b97      	ldr	r3, [pc, #604]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 8014150:	4a97      	ldr	r2, [pc, #604]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 8014152:	f640 61d8 	movw	r1, #3800	@ 0xed8
 8014156:	4897      	ldr	r0, [pc, #604]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 8014158:	f002 fbfa 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014166:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 85d4 	beq.w	8014d18 <Zigbee_CallBackProcessing+0x165c>
 8014170:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	f000 85ce 	beq.w	8014d18 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 801417c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8014186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	4618      	mov	r0, r3
 801418e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014192:	685a      	ldr	r2, [r3, #4]
 8014194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014198:	4611      	mov	r1, r2
 801419a:	4798      	blx	r3
            }
            break;
 801419c:	f000 bdbc 	b.w	8014d18 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 80141a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80141a4:	685b      	ldr	r3, [r3, #4]
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	d006      	beq.n	80141b8 <Zigbee_CallBackProcessing+0xafc>
 80141aa:	4b80      	ldr	r3, [pc, #512]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 80141ac:	4a80      	ldr	r2, [pc, #512]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 80141ae:	f640 61e3 	movw	r1, #3811	@ 0xee3
 80141b2:	4880      	ldr	r0, [pc, #512]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 80141b4:	f002 fbcc 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80141b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80141c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	f000 85a8 	beq.w	8014d1c <Zigbee_CallBackProcessing+0x1660>
 80141cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	f000 85a2 	beq.w	8014d1c <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 80141d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 80141e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141ee:	685a      	ldr	r2, [r3, #4]
 80141f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80141f4:	4611      	mov	r1, r2
 80141f6:	4798      	blx	r3
            }
            break;
 80141f8:	f000 bd90 	b.w	8014d1c <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 80141fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	2b02      	cmp	r3, #2
 8014204:	d006      	beq.n	8014214 <Zigbee_CallBackProcessing+0xb58>
 8014206:	4b69      	ldr	r3, [pc, #420]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 8014208:	4a69      	ldr	r2, [pc, #420]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 801420a:	f640 61ee 	movw	r1, #3822	@ 0xeee
 801420e:	4869      	ldr	r0, [pc, #420]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 8014210:	f002 fb9e 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801421e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 857c 	beq.w	8014d20 <Zigbee_CallBackProcessing+0x1664>
 8014228:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	f000 8576 	beq.w	8014d20 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 8014234:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 801423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	4618      	mov	r0, r3
 8014246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801424a:	685a      	ldr	r2, [r3, #4]
 801424c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8014250:	4611      	mov	r1, r2
 8014252:	4798      	blx	r3
            }
            break;
 8014254:	f000 bd64 	b.w	8014d20 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8014258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	2b03      	cmp	r3, #3
 8014260:	d006      	beq.n	8014270 <Zigbee_CallBackProcessing+0xbb4>
 8014262:	4b55      	ldr	r3, [pc, #340]	@ (80143b8 <Zigbee_CallBackProcessing+0xcfc>)
 8014264:	4a52      	ldr	r2, [pc, #328]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 8014266:	f640 61fc 	movw	r1, #3836	@ 0xefc
 801426a:	4852      	ldr	r0, [pc, #328]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 801426c:	f002 fb70 	bl	8016950 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8014270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014274:	691b      	ldr	r3, [r3, #16]
 8014276:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8014278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801427a:	2b00      	cmp	r3, #0
 801427c:	f000 8552 	beq.w	8014d24 <Zigbee_CallBackProcessing+0x1668>
 8014280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	2b00      	cmp	r3, #0
 8014286:	f000 854d 	beq.w	8014d24 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801428a:	2300      	movs	r3, #0
 801428c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8014290:	e02a      	b.n	80142e8 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8014292:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8014296:	4613      	mov	r3, r2
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	4413      	add	r3, r2
 801429c:	009b      	lsls	r3, r3, #2
 801429e:	4a47      	ldr	r2, [pc, #284]	@ (80143bc <Zigbee_CallBackProcessing+0xd00>)
 80142a0:	4413      	add	r3, r2
 80142a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d119      	bne.n	80142dc <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 80142a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d021      	beq.n	80142f4 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 80142b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80142b4:	689b      	ldr	r3, [r3, #8]
 80142b6:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 80142b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 80142c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80142c8:	4b3d      	ldr	r3, [pc, #244]	@ (80143c0 <Zigbee_CallBackProcessing+0xd04>)
 80142ca:	6818      	ldr	r0, [r3, #0]
 80142cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142ce:	689b      	ldr	r3, [r3, #8]
 80142d0:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80142d4:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 80142d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80142d8:	47a0      	blx	r4
                    break;
 80142da:	e00c      	b.n	80142f6 <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 80142dc:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80142de:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80142e2:	3301      	adds	r3, #1
 80142e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80142e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80142ec:	2b07      	cmp	r3, #7
 80142ee:	d9d0      	bls.n	8014292 <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 80142f0:	f000 bd18 	b.w	8014d24 <Zigbee_CallBackProcessing+0x1668>
                        break;
 80142f4:	bf00      	nop
            break;
 80142f6:	f000 bd15 	b.w	8014d24 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 80142fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	2b02      	cmp	r3, #2
 8014302:	d006      	beq.n	8014312 <Zigbee_CallBackProcessing+0xc56>
 8014304:	4b29      	ldr	r3, [pc, #164]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 8014306:	4a2a      	ldr	r2, [pc, #168]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 8014308:	f640 7119 	movw	r1, #3865	@ 0xf19
 801430c:	4829      	ldr	r0, [pc, #164]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 801430e:	f002 fb1f 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801431c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 8501 	beq.w	8014d28 <Zigbee_CallBackProcessing+0x166c>
 8014326:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	f000 84fb 	beq.w	8014d28 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 8014332:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 801433a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801433e:	689b      	ldr	r3, [r3, #8]
 8014340:	4618      	mov	r0, r3
 8014342:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014346:	685a      	ldr	r2, [r3, #4]
 8014348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801434a:	4611      	mov	r1, r2
 801434c:	4798      	blx	r3
            }
            break;
 801434e:	f000 bceb 	b.w	8014d28 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 8014352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	2b02      	cmp	r3, #2
 801435a:	d006      	beq.n	801436a <Zigbee_CallBackProcessing+0xcae>
 801435c:	4b13      	ldr	r3, [pc, #76]	@ (80143ac <Zigbee_CallBackProcessing+0xcf0>)
 801435e:	4a14      	ldr	r2, [pc, #80]	@ (80143b0 <Zigbee_CallBackProcessing+0xcf4>)
 8014360:	f640 7124 	movw	r1, #3876	@ 0xf24
 8014364:	4813      	ldr	r0, [pc, #76]	@ (80143b4 <Zigbee_CallBackProcessing+0xcf8>)
 8014366:	f002 faf3 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801436a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014374:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014378:	2b00      	cmp	r3, #0
 801437a:	f000 84d7 	beq.w	8014d2c <Zigbee_CallBackProcessing+0x1670>
 801437e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	f000 84d1 	beq.w	8014d2c <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 801438a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8014392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014396:	689b      	ldr	r3, [r3, #8]
 8014398:	4618      	mov	r0, r3
 801439a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801439e:	685a      	ldr	r2, [r3, #4]
 80143a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143a2:	4611      	mov	r1, r2
 80143a4:	4798      	blx	r3
            }
            break;
 80143a6:	f000 bcc1 	b.w	8014d2c <Zigbee_CallBackProcessing+0x1670>
 80143aa:	bf00      	nop
 80143ac:	08018f88 	.word	0x08018f88
 80143b0:	08019d50 	.word	0x08019d50
 80143b4:	08018ec0 	.word	0x08018ec0
 80143b8:	08018f6c 	.word	0x08018f6c
 80143bc:	20000720 	.word	0x20000720
 80143c0:	2000058c 	.word	0x2000058c

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 80143c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80143c8:	685b      	ldr	r3, [r3, #4]
 80143ca:	2b02      	cmp	r3, #2
 80143cc:	d006      	beq.n	80143dc <Zigbee_CallBackProcessing+0xd20>
 80143ce:	4bc1      	ldr	r3, [pc, #772]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 80143d0:	4ac1      	ldr	r2, [pc, #772]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 80143d2:	f640 712f 	movw	r1, #3887	@ 0xf2f
 80143d6:	48c1      	ldr	r0, [pc, #772]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 80143d8:	f002 faba 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80143dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80143e0:	68db      	ldr	r3, [r3, #12]
 80143e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80143e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f000 84a0 	beq.w	8014d30 <Zigbee_CallBackProcessing+0x1674>
 80143f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	f000 849a 	beq.w	8014d30 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 80143fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 8014404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014408:	689b      	ldr	r3, [r3, #8]
 801440a:	4618      	mov	r0, r3
 801440c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014410:	685a      	ldr	r2, [r3, #4]
 8014412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014414:	4611      	mov	r1, r2
 8014416:	4798      	blx	r3
            }
            break;
 8014418:	f000 bc8a 	b.w	8014d30 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 801441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	2b02      	cmp	r3, #2
 8014424:	d006      	beq.n	8014434 <Zigbee_CallBackProcessing+0xd78>
 8014426:	4bab      	ldr	r3, [pc, #684]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 8014428:	4aab      	ldr	r2, [pc, #684]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 801442a:	f640 713a 	movw	r1, #3898	@ 0xf3a
 801442e:	48ab      	ldr	r0, [pc, #684]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 8014430:	f002 fa8e 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014438:	68db      	ldr	r3, [r3, #12]
 801443a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801443e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014442:	2b00      	cmp	r3, #0
 8014444:	f000 8476 	beq.w	8014d34 <Zigbee_CallBackProcessing+0x1678>
 8014448:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	f000 8470 	beq.w	8014d34 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 8014454:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 801445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014460:	689b      	ldr	r3, [r3, #8]
 8014462:	4618      	mov	r0, r3
 8014464:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014468:	685a      	ldr	r2, [r3, #4]
 801446a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801446c:	4611      	mov	r1, r2
 801446e:	4798      	blx	r3
            }
            break;
 8014470:	f000 bc60 	b.w	8014d34 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 8014474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	2b02      	cmp	r3, #2
 801447c:	d006      	beq.n	801448c <Zigbee_CallBackProcessing+0xdd0>
 801447e:	4b95      	ldr	r3, [pc, #596]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 8014480:	4a95      	ldr	r2, [pc, #596]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 8014482:	f640 7145 	movw	r1, #3909	@ 0xf45
 8014486:	4895      	ldr	r0, [pc, #596]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 8014488:	f002 fa62 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014490:	68db      	ldr	r3, [r3, #12]
 8014492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801449a:	2b00      	cmp	r3, #0
 801449c:	f000 844c 	beq.w	8014d38 <Zigbee_CallBackProcessing+0x167c>
 80144a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	f000 8446 	beq.w	8014d38 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 80144ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 80144b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80144b8:	689b      	ldr	r3, [r3, #8]
 80144ba:	4618      	mov	r0, r3
 80144bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144c0:	685a      	ldr	r2, [r3, #4]
 80144c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80144c4:	4611      	mov	r1, r2
 80144c6:	4798      	blx	r3
            }
            break;
 80144c8:	f000 bc36 	b.w	8014d38 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 80144cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	2b02      	cmp	r3, #2
 80144d4:	d006      	beq.n	80144e4 <Zigbee_CallBackProcessing+0xe28>
 80144d6:	4b7f      	ldr	r3, [pc, #508]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 80144d8:	4a7f      	ldr	r2, [pc, #508]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 80144da:	f44f 6175 	mov.w	r1, #3920	@ 0xf50
 80144de:	487f      	ldr	r0, [pc, #508]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 80144e0:	f002 fa36 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80144e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80144ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f000 8422 	beq.w	8014d3c <Zigbee_CallBackProcessing+0x1680>
 80144f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	f000 841c 	beq.w	8014d3c <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 8014504:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 801450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014510:	689b      	ldr	r3, [r3, #8]
 8014512:	4618      	mov	r0, r3
 8014514:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014518:	685a      	ldr	r2, [r3, #4]
 801451a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801451c:	4611      	mov	r1, r2
 801451e:	4798      	blx	r3
            }
            break;
 8014520:	f000 bc0c 	b.w	8014d3c <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 8014524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	2b02      	cmp	r3, #2
 801452c:	d006      	beq.n	801453c <Zigbee_CallBackProcessing+0xe80>
 801452e:	4b69      	ldr	r3, [pc, #420]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 8014530:	4a69      	ldr	r2, [pc, #420]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 8014532:	f640 715b 	movw	r1, #3931	@ 0xf5b
 8014536:	4869      	ldr	r0, [pc, #420]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 8014538:	f002 fa0a 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801453c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014546:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801454a:	2b00      	cmp	r3, #0
 801454c:	f000 83f8 	beq.w	8014d40 <Zigbee_CallBackProcessing+0x1684>
 8014550:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	f000 83f2 	beq.w	8014d40 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 801455c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 8014564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014568:	689b      	ldr	r3, [r3, #8]
 801456a:	4618      	mov	r0, r3
 801456c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014570:	685a      	ldr	r2, [r3, #4]
 8014572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014574:	4611      	mov	r1, r2
 8014576:	4798      	blx	r3
            }
            break;
 8014578:	e3e2      	b.n	8014d40 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 801457a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801457e:	685b      	ldr	r3, [r3, #4]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d006      	beq.n	8014592 <Zigbee_CallBackProcessing+0xed6>
 8014584:	4b56      	ldr	r3, [pc, #344]	@ (80146e0 <Zigbee_CallBackProcessing+0x1024>)
 8014586:	4a54      	ldr	r2, [pc, #336]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 8014588:	f640 7168 	movw	r1, #3944	@ 0xf68
 801458c:	4853      	ldr	r0, [pc, #332]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 801458e:	f002 f9df 	bl	8016950 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8014592:	4b54      	ldr	r3, [pc, #336]	@ (80146e4 <Zigbee_CallBackProcessing+0x1028>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	f000 83d4 	beq.w	8014d44 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 801459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 80145a4:	4b4f      	ldr	r3, [pc, #316]	@ (80146e4 <Zigbee_CallBackProcessing+0x1028>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	4a4f      	ldr	r2, [pc, #316]	@ (80146e8 <Zigbee_CallBackProcessing+0x102c>)
 80145aa:	6812      	ldr	r2, [r2, #0]
 80145ac:	4611      	mov	r1, r2
 80145ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80145b0:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 80145b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80145b4:	781b      	ldrb	r3, [r3, #0]
 80145b6:	2b85      	cmp	r3, #133	@ 0x85
 80145b8:	f040 83c4 	bne.w	8014d44 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 80145bc:	4b49      	ldr	r3, [pc, #292]	@ (80146e4 <Zigbee_CallBackProcessing+0x1028>)
 80145be:	2200      	movs	r2, #0
 80145c0:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 80145c2:	e3bf      	b.n	8014d44 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 80145c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	2b02      	cmp	r3, #2
 80145cc:	d006      	beq.n	80145dc <Zigbee_CallBackProcessing+0xf20>
 80145ce:	4b41      	ldr	r3, [pc, #260]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 80145d0:	4a41      	ldr	r2, [pc, #260]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 80145d2:	f640 7176 	movw	r1, #3958	@ 0xf76
 80145d6:	4841      	ldr	r0, [pc, #260]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 80145d8:	f002 f9ba 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80145dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80145e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	f000 83ac 	beq.w	8014d48 <Zigbee_CallBackProcessing+0x168c>
 80145f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	f000 83a6 	beq.w	8014d48 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80145fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8014606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	4618      	mov	r0, r3
 801460e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014612:	685a      	ldr	r2, [r3, #4]
 8014614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014618:	4611      	mov	r1, r2
 801461a:	4798      	blx	r3
            }
            break;
 801461c:	e394      	b.n	8014d48 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 801461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	2b02      	cmp	r3, #2
 8014626:	d006      	beq.n	8014636 <Zigbee_CallBackProcessing+0xf7a>
 8014628:	4b2a      	ldr	r3, [pc, #168]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 801462a:	4a2b      	ldr	r2, [pc, #172]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 801462c:	f640 7181 	movw	r1, #3969	@ 0xf81
 8014630:	482a      	ldr	r0, [pc, #168]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 8014632:	f002 f98d 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801463a:	68db      	ldr	r3, [r3, #12]
 801463c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014640:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 8381 	beq.w	8014d4c <Zigbee_CallBackProcessing+0x1690>
 801464a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	f000 837b 	beq.w	8014d4c <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 8014656:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8014660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014664:	689b      	ldr	r3, [r3, #8]
 8014666:	4618      	mov	r0, r3
 8014668:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801466c:	685a      	ldr	r2, [r3, #4]
 801466e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014672:	4611      	mov	r1, r2
 8014674:	4798      	blx	r3
            }
            break;
 8014676:	e369      	b.n	8014d4c <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 8014678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	2b02      	cmp	r3, #2
 8014680:	d006      	beq.n	8014690 <Zigbee_CallBackProcessing+0xfd4>
 8014682:	4b14      	ldr	r3, [pc, #80]	@ (80146d4 <Zigbee_CallBackProcessing+0x1018>)
 8014684:	4a14      	ldr	r2, [pc, #80]	@ (80146d8 <Zigbee_CallBackProcessing+0x101c>)
 8014686:	f640 718c 	movw	r1, #3980	@ 0xf8c
 801468a:	4814      	ldr	r0, [pc, #80]	@ (80146dc <Zigbee_CallBackProcessing+0x1020>)
 801468c:	f002 f960 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801469a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801469e:	2b00      	cmp	r3, #0
 80146a0:	f000 8356 	beq.w	8014d50 <Zigbee_CallBackProcessing+0x1694>
 80146a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	f000 8350 	beq.w	8014d50 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 80146b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 80146ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80146be:	689b      	ldr	r3, [r3, #8]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80146c6:	685a      	ldr	r2, [r3, #4]
 80146c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80146cc:	4611      	mov	r1, r2
 80146ce:	4798      	blx	r3
            }
            break;
 80146d0:	e33e      	b.n	8014d50 <Zigbee_CallBackProcessing+0x1694>
 80146d2:	bf00      	nop
 80146d4:	08018f88 	.word	0x08018f88
 80146d8:	08019d50 	.word	0x08019d50
 80146dc:	08018ec0 	.word	0x08018ec0
 80146e0:	08018f50 	.word	0x08018f50
 80146e4:	20000584 	.word	0x20000584
 80146e8:	20000588 	.word	0x20000588

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 80146ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80146f0:	685b      	ldr	r3, [r3, #4]
 80146f2:	2b02      	cmp	r3, #2
 80146f4:	d006      	beq.n	8014704 <Zigbee_CallBackProcessing+0x1048>
 80146f6:	4bc5      	ldr	r3, [pc, #788]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 80146f8:	4ac5      	ldr	r2, [pc, #788]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 80146fa:	f640 7197 	movw	r1, #3991	@ 0xf97
 80146fe:	48c5      	ldr	r0, [pc, #788]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 8014700:	f002 f926 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801470e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 831e 	beq.w	8014d54 <Zigbee_CallBackProcessing+0x1698>
 8014718:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	f000 8318 	beq.w	8014d54 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 8014724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 801472e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	4618      	mov	r0, r3
 8014736:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801473a:	685a      	ldr	r2, [r3, #4]
 801473c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014740:	4611      	mov	r1, r2
 8014742:	4798      	blx	r3
            }
            break;
 8014744:	e306      	b.n	8014d54 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 8014746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	2b02      	cmp	r3, #2
 801474e:	d006      	beq.n	801475e <Zigbee_CallBackProcessing+0x10a2>
 8014750:	4bae      	ldr	r3, [pc, #696]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 8014752:	4aaf      	ldr	r2, [pc, #700]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 8014754:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 8014758:	48ae      	ldr	r0, [pc, #696]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 801475a:	f002 f8f9 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801475e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014768:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801476c:	2b00      	cmp	r3, #0
 801476e:	f000 82f3 	beq.w	8014d58 <Zigbee_CallBackProcessing+0x169c>
 8014772:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	f000 82ed 	beq.w	8014d58 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 801477e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 8014788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801478c:	689b      	ldr	r3, [r3, #8]
 801478e:	4618      	mov	r0, r3
 8014790:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014794:	685a      	ldr	r2, [r3, #4]
 8014796:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801479a:	4611      	mov	r1, r2
 801479c:	4798      	blx	r3
            }
            break;
 801479e:	e2db      	b.n	8014d58 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 80147a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d006      	beq.n	80147b8 <Zigbee_CallBackProcessing+0x10fc>
 80147aa:	4b98      	ldr	r3, [pc, #608]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 80147ac:	4a98      	ldr	r2, [pc, #608]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 80147ae:	f640 71ad 	movw	r1, #4013	@ 0xfad
 80147b2:	4898      	ldr	r0, [pc, #608]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 80147b4:	f002 f8cc 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80147b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80147c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	f000 82c8 	beq.w	8014d5c <Zigbee_CallBackProcessing+0x16a0>
 80147cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	f000 82c2 	beq.w	8014d5c <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 80147d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 80147e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80147e6:	689b      	ldr	r3, [r3, #8]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80147ee:	685a      	ldr	r2, [r3, #4]
 80147f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80147f4:	4611      	mov	r1, r2
 80147f6:	4798      	blx	r3
            }
            break;
 80147f8:	e2b0      	b.n	8014d5c <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 80147fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	2b02      	cmp	r3, #2
 8014802:	d006      	beq.n	8014812 <Zigbee_CallBackProcessing+0x1156>
 8014804:	4b81      	ldr	r3, [pc, #516]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 8014806:	4a82      	ldr	r2, [pc, #520]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 8014808:	f640 71b8 	movw	r1, #4024	@ 0xfb8
 801480c:	4881      	ldr	r0, [pc, #516]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 801480e:	f002 f89f 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014816:	68db      	ldr	r3, [r3, #12]
 8014818:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801481c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014820:	2b00      	cmp	r3, #0
 8014822:	f000 829d 	beq.w	8014d60 <Zigbee_CallBackProcessing+0x16a4>
 8014826:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	f000 8297 	beq.w	8014d60 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 8014832:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 801483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014840:	689b      	ldr	r3, [r3, #8]
 8014842:	4618      	mov	r0, r3
 8014844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014848:	685a      	ldr	r2, [r3, #4]
 801484a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801484e:	4611      	mov	r1, r2
 8014850:	4798      	blx	r3
            }
            break;
 8014852:	e285      	b.n	8014d60 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 8014854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014858:	685b      	ldr	r3, [r3, #4]
 801485a:	2b02      	cmp	r3, #2
 801485c:	d006      	beq.n	801486c <Zigbee_CallBackProcessing+0x11b0>
 801485e:	4b6b      	ldr	r3, [pc, #428]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 8014860:	4a6b      	ldr	r2, [pc, #428]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 8014862:	f640 71c3 	movw	r1, #4035	@ 0xfc3
 8014866:	486b      	ldr	r0, [pc, #428]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 8014868:	f002 f872 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014870:	68db      	ldr	r3, [r3, #12]
 8014872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014876:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801487a:	2b00      	cmp	r3, #0
 801487c:	f000 8272 	beq.w	8014d64 <Zigbee_CallBackProcessing+0x16a8>
 8014880:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	f000 826c 	beq.w	8014d64 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 801488c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 8014896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801489a:	689b      	ldr	r3, [r3, #8]
 801489c:	4618      	mov	r0, r3
 801489e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80148a2:	685a      	ldr	r2, [r3, #4]
 80148a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80148a8:	4611      	mov	r1, r2
 80148aa:	4798      	blx	r3
            }
            break;
 80148ac:	e25a      	b.n	8014d64 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 80148ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80148b2:	685b      	ldr	r3, [r3, #4]
 80148b4:	2b03      	cmp	r3, #3
 80148b6:	d006      	beq.n	80148c6 <Zigbee_CallBackProcessing+0x120a>
 80148b8:	4b57      	ldr	r3, [pc, #348]	@ (8014a18 <Zigbee_CallBackProcessing+0x135c>)
 80148ba:	4a55      	ldr	r2, [pc, #340]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 80148bc:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 80148c0:	4854      	ldr	r0, [pc, #336]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 80148c2:	f002 f845 	bl	8016950 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 80148c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80148ca:	691b      	ldr	r3, [r3, #16]
 80148cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 80148d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f000 8247 	beq.w	8014d68 <Zigbee_CallBackProcessing+0x16ac>
 80148da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f000 8241 	beq.w	8014d68 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80148e6:	2300      	movs	r3, #0
 80148e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80148ec:	e032      	b.n	8014954 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 80148ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80148f2:	4613      	mov	r3, r2
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	4413      	add	r3, r2
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	4a48      	ldr	r2, [pc, #288]	@ (8014a1c <Zigbee_CallBackProcessing+0x1360>)
 80148fc:	4413      	add	r3, r2
 80148fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014902:	429a      	cmp	r2, r3
 8014904:	d120      	bne.n	8014948 <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8014906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d026      	beq.n	801495e <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 8014910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 801491a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 8014924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 801492e:	4b3c      	ldr	r3, [pc, #240]	@ (8014a20 <Zigbee_CallBackProcessing+0x1364>)
 8014930:	6818      	ldr	r0, [r3, #0]
 8014932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014936:	689b      	ldr	r3, [r3, #8]
 8014938:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 801493c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8014940:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8014944:	47a0      	blx	r4
                    break;
 8014946:	e00b      	b.n	8014960 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 8014948:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801494e:	3301      	adds	r3, #1
 8014950:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8014954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014958:	2b07      	cmp	r3, #7
 801495a:	d9c8      	bls.n	80148ee <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 801495c:	e204      	b.n	8014d68 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 801495e:	bf00      	nop
            break;
 8014960:	e202      	b.n	8014d68 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8014962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014966:	685b      	ldr	r3, [r3, #4]
 8014968:	2b02      	cmp	r3, #2
 801496a:	d006      	beq.n	801497a <Zigbee_CallBackProcessing+0x12be>
 801496c:	4b27      	ldr	r3, [pc, #156]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 801496e:	4a28      	ldr	r2, [pc, #160]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 8014970:	f640 71f2 	movw	r1, #4082	@ 0xff2
 8014974:	4827      	ldr	r0, [pc, #156]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 8014976:	f001 ffeb 	bl	8016950 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 801497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801497e:	689b      	ldr	r3, [r3, #8]
 8014980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 8014984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 801498e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8014992:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8014996:	f7f1 fc6f 	bl	8006278 <zcl_cluster_data_ind>
 801499a:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801499e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80149a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149a6:	60da      	str	r2, [r3, #12]
            break;
 80149a8:	e1f7      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 80149aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	2b02      	cmp	r3, #2
 80149b2:	d006      	beq.n	80149c2 <Zigbee_CallBackProcessing+0x1306>
 80149b4:	4b15      	ldr	r3, [pc, #84]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 80149b6:	4a16      	ldr	r2, [pc, #88]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 80149b8:	f241 0101 	movw	r1, #4097	@ 0x1001
 80149bc:	4815      	ldr	r0, [pc, #84]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 80149be:	f001 ffc7 	bl	8016950 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80149c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149c6:	689b      	ldr	r3, [r3, #8]
 80149c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 80149cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 80149d6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80149da:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80149de:	f7f1 fc65 	bl	80062ac <zcl_cluster_alarm_data_ind>
 80149e2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 80149e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80149ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149ee:	60da      	str	r2, [r3, #12]
            break;
 80149f0:	e1d3      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 80149f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	2b02      	cmp	r3, #2
 80149fa:	d013      	beq.n	8014a24 <Zigbee_CallBackProcessing+0x1368>
 80149fc:	4b03      	ldr	r3, [pc, #12]	@ (8014a0c <Zigbee_CallBackProcessing+0x1350>)
 80149fe:	4a04      	ldr	r2, [pc, #16]	@ (8014a10 <Zigbee_CallBackProcessing+0x1354>)
 8014a00:	f241 010b 	movw	r1, #4107	@ 0x100b
 8014a04:	4803      	ldr	r0, [pc, #12]	@ (8014a14 <Zigbee_CallBackProcessing+0x1358>)
 8014a06:	f001 ffa3 	bl	8016950 <__assert_func>
 8014a0a:	bf00      	nop
 8014a0c:	08018f88 	.word	0x08018f88
 8014a10:	08019d50 	.word	0x08019d50
 8014a14:	08018ec0 	.word	0x08018ec0
 8014a18:	08018f6c 	.word	0x08018f6c
 8014a1c:	20000720 	.word	0x20000720
 8014a20:	2000058c 	.word	0x2000058c
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a28:	68db      	ldr	r3, [r3, #12]
 8014a2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f000 81a8 	beq.w	8014d88 <Zigbee_CallBackProcessing+0x16cc>
 8014a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	f000 81a2 	beq.w	8014d88 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8014a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8014a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a52:	689b      	ldr	r3, [r3, #8]
 8014a54:	4618      	mov	r0, r3
 8014a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a5a:	685a      	ldr	r2, [r3, #4]
 8014a5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8014a60:	4611      	mov	r1, r2
 8014a62:	4798      	blx	r3
            }
            break;
 8014a64:	e190      	b.n	8014d88 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 8014a66:	2300      	movs	r3, #0
 8014a68:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 8014a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	2b02      	cmp	r3, #2
 8014a74:	d006      	beq.n	8014a84 <Zigbee_CallBackProcessing+0x13c8>
 8014a76:	4bbd      	ldr	r3, [pc, #756]	@ (8014d6c <Zigbee_CallBackProcessing+0x16b0>)
 8014a78:	4abd      	ldr	r2, [pc, #756]	@ (8014d70 <Zigbee_CallBackProcessing+0x16b4>)
 8014a7a:	f241 0119 	movw	r1, #4121	@ 0x1019
 8014a7e:	48bd      	ldr	r0, [pc, #756]	@ (8014d74 <Zigbee_CallBackProcessing+0x16b8>)
 8014a80:	f001 ff66 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8014a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d026      	beq.n	8014ae4 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 8014a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 8014aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d00f      	beq.n	8014aca <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8014aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 8014ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ab8:	685a      	ldr	r2, [r3, #4]
 8014aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014abe:	4611      	mov	r1, r2
 8014ac0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8014ac4:	4798      	blx	r3
 8014ac6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8014aca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ace:	7a1b      	ldrb	r3, [r3, #8]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d007      	beq.n	8014ae4 <Zigbee_CallBackProcessing+0x1428>
 8014ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8014ad8:	785b      	ldrb	r3, [r3, #1]
 8014ada:	2b94      	cmp	r3, #148	@ 0x94
 8014adc:	d002      	beq.n	8014ae4 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8014ae4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8014ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014aec:	60da      	str	r2, [r3, #12]
            break;
 8014aee:	e154      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8014af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	2b02      	cmp	r3, #2
 8014af8:	d006      	beq.n	8014b08 <Zigbee_CallBackProcessing+0x144c>
 8014afa:	4b9c      	ldr	r3, [pc, #624]	@ (8014d6c <Zigbee_CallBackProcessing+0x16b0>)
 8014afc:	4a9c      	ldr	r2, [pc, #624]	@ (8014d70 <Zigbee_CallBackProcessing+0x16b4>)
 8014afe:	f241 0131 	movw	r1, #4145	@ 0x1031
 8014b02:	489c      	ldr	r0, [pc, #624]	@ (8014d74 <Zigbee_CallBackProcessing+0x16b8>)
 8014b04:	f001 ff24 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	f000 8138 	beq.w	8014d8c <Zigbee_CallBackProcessing+0x16d0>
 8014b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f000 8132 	beq.w	8014d8c <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8014b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 8014b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b36:	689b      	ldr	r3, [r3, #8]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b3e:	685a      	ldr	r2, [r3, #4]
 8014b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014b44:	4611      	mov	r1, r2
 8014b46:	4798      	blx	r3
            }
            break;
 8014b48:	e120      	b.n	8014d8c <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8014b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d006      	beq.n	8014b62 <Zigbee_CallBackProcessing+0x14a6>
 8014b54:	4b85      	ldr	r3, [pc, #532]	@ (8014d6c <Zigbee_CallBackProcessing+0x16b0>)
 8014b56:	4a86      	ldr	r2, [pc, #536]	@ (8014d70 <Zigbee_CallBackProcessing+0x16b4>)
 8014b58:	f241 013c 	movw	r1, #4156	@ 0x103c
 8014b5c:	4885      	ldr	r0, [pc, #532]	@ (8014d74 <Zigbee_CallBackProcessing+0x16b8>)
 8014b5e:	f001 fef7 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b66:	68db      	ldr	r3, [r3, #12]
 8014b68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f000 810d 	beq.w	8014d90 <Zigbee_CallBackProcessing+0x16d4>
 8014b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	f000 8107 	beq.w	8014d90 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8014b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8014b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b90:	689b      	ldr	r3, [r3, #8]
 8014b92:	4618      	mov	r0, r3
 8014b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b98:	685a      	ldr	r2, [r3, #4]
 8014b9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8014b9e:	4611      	mov	r1, r2
 8014ba0:	4798      	blx	r3
            }
            break;
 8014ba2:	e0f5      	b.n	8014d90 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8014ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d006      	beq.n	8014bbc <Zigbee_CallBackProcessing+0x1500>
 8014bae:	4b6f      	ldr	r3, [pc, #444]	@ (8014d6c <Zigbee_CallBackProcessing+0x16b0>)
 8014bb0:	4a6f      	ldr	r2, [pc, #444]	@ (8014d70 <Zigbee_CallBackProcessing+0x16b4>)
 8014bb2:	f241 0147 	movw	r1, #4167	@ 0x1047
 8014bb6:	486f      	ldr	r0, [pc, #444]	@ (8014d74 <Zigbee_CallBackProcessing+0x16b8>)
 8014bb8:	f001 feca 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014bc0:	68db      	ldr	r3, [r3, #12]
 8014bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	f000 80e2 	beq.w	8014d94 <Zigbee_CallBackProcessing+0x16d8>
 8014bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f000 80dc 	beq.w	8014d94 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8014bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8014be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	4618      	mov	r0, r3
 8014bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bf2:	685a      	ldr	r2, [r3, #4]
 8014bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8014bf8:	4611      	mov	r1, r2
 8014bfa:	4798      	blx	r3
            }
            break;
 8014bfc:	e0ca      	b.n	8014d94 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8014bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c02:	685b      	ldr	r3, [r3, #4]
 8014c04:	2b05      	cmp	r3, #5
 8014c06:	d006      	beq.n	8014c16 <Zigbee_CallBackProcessing+0x155a>
 8014c08:	4b5b      	ldr	r3, [pc, #364]	@ (8014d78 <Zigbee_CallBackProcessing+0x16bc>)
 8014c0a:	4a59      	ldr	r2, [pc, #356]	@ (8014d70 <Zigbee_CallBackProcessing+0x16b4>)
 8014c0c:	f241 0152 	movw	r1, #4178	@ 0x1052
 8014c10:	4858      	ldr	r0, [pc, #352]	@ (8014d74 <Zigbee_CallBackProcessing+0x16b8>)
 8014c12:	f001 fe9d 	bl	8016950 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8014c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c1a:	699b      	ldr	r3, [r3, #24]
 8014c1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 80b7 	beq.w	8014d98 <Zigbee_CallBackProcessing+0x16dc>
 8014c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	f000 80b1 	beq.w	8014d98 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8014c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c3a:	f103 0108 	add.w	r1, r3, #8
 8014c3e:	463b      	mov	r3, r7
 8014c40:	2208      	movs	r2, #8
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7fd fcb7 	bl	80125b6 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8014c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 8014c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c5a:	691b      	ldr	r3, [r3, #16]
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c62:	695b      	ldr	r3, [r3, #20]
 8014c64:	b2dd      	uxtb	r5, r3
 8014c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	9300      	str	r3, [sp, #0]
 8014c6e:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8014c72:	462b      	mov	r3, r5
 8014c74:	47a0      	blx	r4
            }
            break;
 8014c76:	e08f      	b.n	8014d98 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8014c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d006      	beq.n	8014c90 <Zigbee_CallBackProcessing+0x15d4>
 8014c82:	4b3e      	ldr	r3, [pc, #248]	@ (8014d7c <Zigbee_CallBackProcessing+0x16c0>)
 8014c84:	4a3a      	ldr	r2, [pc, #232]	@ (8014d70 <Zigbee_CallBackProcessing+0x16b4>)
 8014c86:	f241 0163 	movw	r1, #4195	@ 0x1063
 8014c8a:	483a      	ldr	r0, [pc, #232]	@ (8014d74 <Zigbee_CallBackProcessing+0x16b8>)
 8014c8c:	f001 fe60 	bl	8016950 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8014c90:	4b3b      	ldr	r3, [pc, #236]	@ (8014d80 <Zigbee_CallBackProcessing+0x16c4>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d103      	bne.n	8014ca0 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8014c98:	2381      	movs	r3, #129	@ 0x81
 8014c9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 8014c9e:	e07c      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8014ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ca4:	689b      	ldr	r3, [r3, #8]
 8014ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8014ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	64bb      	str	r3, [r7, #72]	@ 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8014cb0:	4b33      	ldr	r3, [pc, #204]	@ (8014d80 <Zigbee_CallBackProcessing+0x16c4>)
 8014cb2:	681c      	ldr	r4, [r3, #0]
 8014cb4:	4b33      	ldr	r3, [pc, #204]	@ (8014d84 <Zigbee_CallBackProcessing+0x16c8>)
 8014cb6:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8014cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014cbc:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8014cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014cc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014cc2:	47a0      	blx	r4
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8014cca:	e066      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8014ccc:	2301      	movs	r3, #1
 8014cce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8014cd2:	e062      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cd4:	bf00      	nop
 8014cd6:	e060      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cd8:	bf00      	nop
 8014cda:	e05e      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cdc:	bf00      	nop
 8014cde:	e05c      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014ce0:	bf00      	nop
 8014ce2:	e05a      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014ce4:	bf00      	nop
 8014ce6:	e058      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014ce8:	bf00      	nop
 8014cea:	e056      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cec:	bf00      	nop
 8014cee:	e054      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cf0:	bf00      	nop
 8014cf2:	e052      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cf4:	bf00      	nop
 8014cf6:	e050      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cf8:	bf00      	nop
 8014cfa:	e04e      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014cfc:	bf00      	nop
 8014cfe:	e04c      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d00:	bf00      	nop
 8014d02:	e04a      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d04:	bf00      	nop
 8014d06:	e048      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d08:	bf00      	nop
 8014d0a:	e046      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d0c:	bf00      	nop
 8014d0e:	e044      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d10:	bf00      	nop
 8014d12:	e042      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d14:	bf00      	nop
 8014d16:	e040      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d18:	bf00      	nop
 8014d1a:	e03e      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d1c:	bf00      	nop
 8014d1e:	e03c      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d20:	bf00      	nop
 8014d22:	e03a      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d24:	bf00      	nop
 8014d26:	e038      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d28:	bf00      	nop
 8014d2a:	e036      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d2c:	bf00      	nop
 8014d2e:	e034      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d30:	bf00      	nop
 8014d32:	e032      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d34:	bf00      	nop
 8014d36:	e030      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d38:	bf00      	nop
 8014d3a:	e02e      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d3c:	bf00      	nop
 8014d3e:	e02c      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d40:	bf00      	nop
 8014d42:	e02a      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d44:	bf00      	nop
 8014d46:	e028      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d48:	bf00      	nop
 8014d4a:	e026      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d4c:	bf00      	nop
 8014d4e:	e024      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d50:	bf00      	nop
 8014d52:	e022      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d54:	bf00      	nop
 8014d56:	e020      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d58:	bf00      	nop
 8014d5a:	e01e      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d5c:	bf00      	nop
 8014d5e:	e01c      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d60:	bf00      	nop
 8014d62:	e01a      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d64:	bf00      	nop
 8014d66:	e018      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d68:	bf00      	nop
 8014d6a:	e016      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
 8014d6c:	08018f88 	.word	0x08018f88
 8014d70:	08019d50 	.word	0x08019d50
 8014d74:	08018ec0 	.word	0x08018ec0
 8014d78:	08018fa4 	.word	0x08018fa4
 8014d7c:	08018f6c 	.word	0x08018f6c
 8014d80:	20000578 	.word	0x20000578
 8014d84:	2000058c 	.word	0x2000058c
            break;
 8014d88:	bf00      	nop
 8014d8a:	e006      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d8c:	bf00      	nop
 8014d8e:	e004      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d90:	bf00      	nop
 8014d92:	e002      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d94:	bf00      	nop
 8014d96:	e000      	b.n	8014d9a <Zigbee_CallBackProcessing+0x16de>
            break;
 8014d98:	bf00      	nop
    }

    if (info != NULL) {
 8014d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 8014da2:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8014da6:	f7fd fc42 	bl	801262e <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8014daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014dae:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8014db2:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8014db4:	f7fd fada 	bl	801236c <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8014db8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dc6:	bf00      	nop

08014dc8 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8014dc8:	b590      	push	{r4, r7, lr}
 8014dca:	b089      	sub	sp, #36	@ 0x24
 8014dcc:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8014dd2:	f000 ff43 	bl	8015c5c <ZIGBEE_Get_M0RequestPayloadBuffer>
 8014dd6:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	2b09      	cmp	r3, #9
 8014dde:	d046      	beq.n	8014e6e <Zigbee_M0RequestProcessing+0xa6>
 8014de0:	2b09      	cmp	r3, #9
 8014de2:	d864      	bhi.n	8014eae <Zigbee_M0RequestProcessing+0xe6>
 8014de4:	2b07      	cmp	r3, #7
 8014de6:	d002      	beq.n	8014dee <Zigbee_M0RequestProcessing+0x26>
 8014de8:	2b08      	cmp	r3, #8
 8014dea:	d01e      	beq.n	8014e2a <Zigbee_M0RequestProcessing+0x62>
 8014dec:	e05f      	b.n	8014eae <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	2b01      	cmp	r3, #1
 8014df4:	d006      	beq.n	8014e04 <Zigbee_M0RequestProcessing+0x3c>
 8014df6:	4b33      	ldr	r3, [pc, #204]	@ (8014ec4 <Zigbee_M0RequestProcessing+0xfc>)
 8014df8:	4a33      	ldr	r2, [pc, #204]	@ (8014ec8 <Zigbee_M0RequestProcessing+0x100>)
 8014dfa:	f241 018a 	movw	r1, #4234	@ 0x108a
 8014dfe:	4833      	ldr	r0, [pc, #204]	@ (8014ecc <Zigbee_M0RequestProcessing+0x104>)
 8014e00:	f001 fda6 	bl	8016950 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	689b      	ldr	r3, [r3, #8]
 8014e08:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8014e0a:	4b31      	ldr	r3, [pc, #196]	@ (8014ed0 <Zigbee_M0RequestProcessing+0x108>)
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d050      	beq.n	8014eb4 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8014e12:	4b2f      	ldr	r3, [pc, #188]	@ (8014ed0 <Zigbee_M0RequestProcessing+0x108>)
 8014e14:	685c      	ldr	r4, [r3, #4]
 8014e16:	4b2e      	ldr	r3, [pc, #184]	@ (8014ed0 <Zigbee_M0RequestProcessing+0x108>)
 8014e18:	6818      	ldr	r0, [r3, #0]
 8014e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8014ed4 <Zigbee_M0RequestProcessing+0x10c>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	9300      	str	r3, [sp, #0]
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	2200      	movs	r2, #0
 8014e24:	2100      	movs	r1, #0
 8014e26:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8014e28:	e044      	b.n	8014eb4 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	d006      	beq.n	8014e40 <Zigbee_M0RequestProcessing+0x78>
 8014e32:	4b24      	ldr	r3, [pc, #144]	@ (8014ec4 <Zigbee_M0RequestProcessing+0xfc>)
 8014e34:	4a24      	ldr	r2, [pc, #144]	@ (8014ec8 <Zigbee_M0RequestProcessing+0x100>)
 8014e36:	f241 019a 	movw	r1, #4250	@ 0x109a
 8014e3a:	4824      	ldr	r0, [pc, #144]	@ (8014ecc <Zigbee_M0RequestProcessing+0x104>)
 8014e3c:	f001 fd88 	bl	8016950 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f001 fd9d 	bl	801698c <malloc>
 8014e52:	4603      	mov	r3, r0
 8014e54:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d004      	beq.n	8014e66 <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8014e5c:	6879      	ldr	r1, [r7, #4]
 8014e5e:	6938      	ldr	r0, [r7, #16]
 8014e60:	f000 f83c 	bl	8014edc <zb_malloc_track>
 8014e64:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8014e66:	693a      	ldr	r2, [r7, #16]
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	60da      	str	r2, [r3, #12]
            break;
 8014e6c:	e023      	b.n	8014eb6 <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	2b01      	cmp	r3, #1
 8014e74:	d006      	beq.n	8014e84 <Zigbee_M0RequestProcessing+0xbc>
 8014e76:	4b13      	ldr	r3, [pc, #76]	@ (8014ec4 <Zigbee_M0RequestProcessing+0xfc>)
 8014e78:	4a13      	ldr	r2, [pc, #76]	@ (8014ec8 <Zigbee_M0RequestProcessing+0x100>)
 8014e7a:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8014e7e:	4813      	ldr	r0, [pc, #76]	@ (8014ecc <Zigbee_M0RequestProcessing+0x104>)
 8014e80:	f001 fd66 	bl	8016950 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d106      	bne.n	8014e9e <Zigbee_M0RequestProcessing+0xd6>
 8014e90:	4b11      	ldr	r3, [pc, #68]	@ (8014ed8 <Zigbee_M0RequestProcessing+0x110>)
 8014e92:	4a0d      	ldr	r2, [pc, #52]	@ (8014ec8 <Zigbee_M0RequestProcessing+0x100>)
 8014e94:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8014e98:	480c      	ldr	r0, [pc, #48]	@ (8014ecc <Zigbee_M0RequestProcessing+0x104>)
 8014e9a:	f001 fd59 	bl	8016950 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8014e9e:	68b8      	ldr	r0, [r7, #8]
 8014ea0:	f000 f838 	bl	8014f14 <zb_malloc_untrack>
 8014ea4:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8014ea6:	68b8      	ldr	r0, [r7, #8]
 8014ea8:	f001 fd78 	bl	801699c <free>
            break;
 8014eac:	e003      	b.n	8014eb6 <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	75fb      	strb	r3, [r7, #23]
            break;
 8014eb2:	e000      	b.n	8014eb6 <Zigbee_M0RequestProcessing+0xee>
            break;
 8014eb4:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8014eb6:	f7fd fa73 	bl	80123a0 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8014eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	371c      	adds	r7, #28
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd90      	pop	{r4, r7, pc}
 8014ec4:	08018fc0 	.word	0x08018fc0
 8014ec8:	08019d6c 	.word	0x08019d6c
 8014ecc:	08018ec0 	.word	0x08018ec0
 8014ed0:	2000058c 	.word	0x2000058c
 8014ed4:	08019b20 	.word	0x08019b20
 8014ed8:	08018fd8 	.word	0x08018fd8

08014edc <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b085      	sub	sp, #20
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	683a      	ldr	r2, [r7, #0]
 8014eea:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	3304      	adds	r3, #4
 8014ef0:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8014ef2:	4b07      	ldr	r3, [pc, #28]	@ (8014f10 <zb_malloc_track+0x34>)
 8014ef4:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	4413      	add	r3, r2
 8014efc:	4a04      	ldr	r2, [pc, #16]	@ (8014f10 <zb_malloc_track+0x34>)
 8014efe:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8014f02:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3714      	adds	r7, #20
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr
 8014f10:	2000058c 	.word	0x2000058c

08014f14 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8014f14:	b480      	push	{r7}
 8014f16:	b085      	sub	sp, #20
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3b04      	subs	r3, #4
 8014f20:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8014f28:	4b07      	ldr	r3, [pc, #28]	@ (8014f48 <zb_malloc_untrack+0x34>)
 8014f2a:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	1ad3      	subs	r3, r2, r3
 8014f32:	4a05      	ldr	r2, [pc, #20]	@ (8014f48 <zb_malloc_untrack+0x34>)
 8014f34:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8014f38:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3714      	adds	r7, #20
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr
 8014f46:	bf00      	nop
 8014f48:	2000058c 	.word	0x2000058c

08014f4c <onOff_server_1_off>:
/* USER CODE END PV */
/* Functions Definition ------------------------------------------------------*/

/* OnOff server off 1 command callback */
static enum ZclStatusCodeT onOff_server_1_off(struct ZbZclClusterT *cluster, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b086      	sub	sp, #24
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 OnOff server 1 off 1 */
	uint8_t endpoint;
	  //ZbZclAttrIntegerWrite(zigbee_app_info.water_content_client_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, test1--);


	  endpoint = ZbZclClusterGetEndpoint(cluster);
 8014f58:	68f8      	ldr	r0, [r7, #12]
 8014f5a:	f7ee fd8f 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	75fb      	strb	r3, [r7, #23]
	  if (endpoint == SW1_ENDPOINT)
 8014f62:	7dfb      	ldrb	r3, [r7, #23]
 8014f64:	2b14      	cmp	r3, #20
 8014f66:	d11a      	bne.n	8014f9e <onOff_server_1_off+0x52>
	  {
	    APP_DBG("LED_RED OFF");
 8014f68:	480f      	ldr	r0, [pc, #60]	@ (8014fa8 <onOff_server_1_off+0x5c>)
 8014f6a:	f7fc fdbd 	bl	8011ae8 <DbgTraceGetFileName>
 8014f6e:	4601      	mov	r1, r0
 8014f70:	23c5      	movs	r3, #197	@ 0xc5
 8014f72:	4a0e      	ldr	r2, [pc, #56]	@ (8014fac <onOff_server_1_off+0x60>)
 8014f74:	480e      	ldr	r0, [pc, #56]	@ (8014fb0 <onOff_server_1_off+0x64>)
 8014f76:	f001 fe9b 	bl	8016cb0 <iprintf>
 8014f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8014fb4 <onOff_server_1_off+0x68>)
 8014f7c:	2101      	movs	r1, #1
 8014f7e:	2000      	movs	r0, #0
 8014f80:	f7f5 f86a 	bl	800a058 <logApplication>
	    RGB_turn_off(&OBJ_RGB_LED);
 8014f84:	480c      	ldr	r0, [pc, #48]	@ (8014fb8 <onOff_server_1_off+0x6c>)
 8014f86:	f7f5 fc8e 	bl	800a8a6 <RGB_turn_off>
		(void)ZbZclAttrIntegerWrite(cluster, ZCL_ONOFF_ATTR_ONOFF, 0);
 8014f8a:	f04f 0200 	mov.w	r2, #0
 8014f8e:	f04f 0300 	mov.w	r3, #0
 8014f92:	2100      	movs	r1, #0
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f7ec fd64 	bl	8001a62 <ZbZclAttrIntegerWrite>
	  else
	  {
	    /* Unknown endpoint */
	    return ZCL_STATUS_FAILURE;
	  }
	  return ZCL_STATUS_SUCCESS;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	e000      	b.n	8014fa0 <onOff_server_1_off+0x54>
	    return ZCL_STATUS_FAILURE;
 8014f9e:	2301      	movs	r3, #1
  /* USER CODE END 0 OnOff server 1 off 1 */
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3718      	adds	r7, #24
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	08018fe4 	.word	0x08018fe4
 8014fac:	08019d88 	.word	0x08019d88
 8014fb0:	08019004 	.word	0x08019004
 8014fb4:	08019014 	.word	0x08019014
 8014fb8:	200004c4 	.word	0x200004c4

08014fbc <onOff_server_1_on>:

/* OnOff server on 1 command callback */
static enum ZclStatusCodeT onOff_server_1_on(struct ZbZclClusterT *cluster, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b086      	sub	sp, #24
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	60f8      	str	r0, [r7, #12]
 8014fc4:	60b9      	str	r1, [r7, #8]
 8014fc6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 1 OnOff server 1 on 1 */
	uint8_t endpoint;

	  endpoint = ZbZclClusterGetEndpoint(cluster);
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f7ee fd57 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	75fb      	strb	r3, [r7, #23]
	  if (endpoint == SW1_ENDPOINT)
 8014fd2:	7dfb      	ldrb	r3, [r7, #23]
 8014fd4:	2b14      	cmp	r3, #20
 8014fd6:	d11a      	bne.n	801500e <onOff_server_1_on+0x52>
	  {
	    APP_DBG("LED_RED ON");
 8014fd8:	480f      	ldr	r0, [pc, #60]	@ (8015018 <onOff_server_1_on+0x5c>)
 8014fda:	f7fc fd85 	bl	8011ae8 <DbgTraceGetFileName>
 8014fde:	4601      	mov	r1, r0
 8014fe0:	23db      	movs	r3, #219	@ 0xdb
 8014fe2:	4a0e      	ldr	r2, [pc, #56]	@ (801501c <onOff_server_1_on+0x60>)
 8014fe4:	480e      	ldr	r0, [pc, #56]	@ (8015020 <onOff_server_1_on+0x64>)
 8014fe6:	f001 fe63 	bl	8016cb0 <iprintf>
 8014fea:	4a0e      	ldr	r2, [pc, #56]	@ (8015024 <onOff_server_1_on+0x68>)
 8014fec:	2101      	movs	r1, #1
 8014fee:	2000      	movs	r0, #0
 8014ff0:	f7f5 f832 	bl	800a058 <logApplication>
	    RGB_turn_on(&OBJ_RGB_LED);
 8014ff4:	480c      	ldr	r0, [pc, #48]	@ (8015028 <onOff_server_1_on+0x6c>)
 8014ff6:	f7f5 fc6d 	bl	800a8d4 <RGB_turn_on>
	    (void)ZbZclAttrIntegerWrite(cluster, ZCL_ONOFF_ATTR_ONOFF, 1);
 8014ffa:	f04f 0201 	mov.w	r2, #1
 8014ffe:	f04f 0300 	mov.w	r3, #0
 8015002:	2100      	movs	r1, #0
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7ec fd2c 	bl	8001a62 <ZbZclAttrIntegerWrite>
	  else
	  {
	    /* Unknown endpoint */
	    return ZCL_STATUS_FAILURE;
	  }
	  return ZCL_STATUS_SUCCESS;
 801500a:	2300      	movs	r3, #0
 801500c:	e000      	b.n	8015010 <onOff_server_1_on+0x54>
	    return ZCL_STATUS_FAILURE;
 801500e:	2301      	movs	r3, #1
  /* USER CODE END 1 OnOff server 1 on 1 */
}
 8015010:	4618      	mov	r0, r3
 8015012:	3718      	adds	r7, #24
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	08018fe4 	.word	0x08018fe4
 801501c:	08019d9c 	.word	0x08019d9c
 8015020:	08019004 	.word	0x08019004
 8015024:	08019020 	.word	0x08019020
 8015028:	200004c4 	.word	0x200004c4

0801502c <onOff_server_1_toggle>:

/* OnOff server toggle 1 command callback */
static enum ZclStatusCodeT onOff_server_1_toggle(struct ZbZclClusterT *cluster, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b088      	sub	sp, #32
 8015030:	af02      	add	r7, sp, #8
 8015032:	60f8      	str	r0, [r7, #12]
 8015034:	60b9      	str	r1, [r7, #8]
 8015036:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 2 OnOff server 1 toggle 1 */
	uint8_t attrVal;

	  if (ZbZclAttrRead(cluster, ZCL_ONOFF_ATTR_ONOFF, NULL,
 8015038:	f107 0317 	add.w	r3, r7, #23
 801503c:	2200      	movs	r2, #0
 801503e:	9201      	str	r2, [sp, #4]
 8015040:	2201      	movs	r2, #1
 8015042:	9200      	str	r2, [sp, #0]
 8015044:	2200      	movs	r2, #0
 8015046:	2100      	movs	r1, #0
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7eb f9cc 	bl	80003e6 <ZbZclAttrRead>
 801504e:	4603      	mov	r3, r0
 8015050:	2b00      	cmp	r3, #0
 8015052:	d001      	beq.n	8015058 <onOff_server_1_toggle+0x2c>
	            &attrVal, sizeof(attrVal), false) != ZCL_STATUS_SUCCESS)
	  {
	    return ZCL_STATUS_FAILURE;
 8015054:	2301      	movs	r3, #1
 8015056:	e00f      	b.n	8015078 <onOff_server_1_toggle+0x4c>
	  }

	  if (attrVal != 0)
 8015058:	7dfb      	ldrb	r3, [r7, #23]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d006      	beq.n	801506c <onOff_server_1_toggle+0x40>
	  {
	    return onOff_server_1_off(cluster, srcInfo, arg);
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	68b9      	ldr	r1, [r7, #8]
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	f7ff ff72 	bl	8014f4c <onOff_server_1_off>
 8015068:	4603      	mov	r3, r0
 801506a:	e005      	b.n	8015078 <onOff_server_1_toggle+0x4c>
	  }
	  else
	  {
	    return onOff_server_1_on(cluster, srcInfo, arg);
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	68b9      	ldr	r1, [r7, #8]
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f7ff ffa3 	bl	8014fbc <onOff_server_1_on>
 8015076:	4603      	mov	r3, r0
	  }
  /* USER CODE END 2 OnOff server 1 toggle 1 */
}
 8015078:	4618      	mov	r0, r3
 801507a:	3718      	adds	r7, #24
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <colorControl_server_1_move_to_color_xy>:

/* ColorControl server move_to_color_xy 1 command callback */
static enum ZclStatusCodeT colorControl_server_1_move_to_color_xy(struct ZbZclClusterT *cluster, struct ZbZclColorClientMoveToColorXYReqT *req, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8015080:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015084:	b086      	sub	sp, #24
 8015086:	af00      	add	r7, sp, #0
 8015088:	60f8      	str	r0, [r7, #12]
 801508a:	60b9      	str	r1, [r7, #8]
 801508c:	607a      	str	r2, [r7, #4]
 801508e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 3 ColorControl server 1 move_to_color_xy 1 */
	uint8_t endpoint;

	      endpoint = ZbZclClusterGetEndpoint(cluster);
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f7ee fcf3 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8015096:	4603      	mov	r3, r0
 8015098:	75fb      	strb	r3, [r7, #23]
	      if (endpoint == SW1_ENDPOINT)
 801509a:	7dfb      	ldrb	r3, [r7, #23]
 801509c:	2b14      	cmp	r3, #20
 801509e:	d121      	bne.n	80150e4 <colorControl_server_1_move_to_color_xy+0x64>
	      {
	    	RGB_set_xy(&OBJ_RGB_LED, req->color_x, req->color_y);
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	8819      	ldrh	r1, [r3, #0]
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	885b      	ldrh	r3, [r3, #2]
 80150a8:	461a      	mov	r2, r3
 80150aa:	4811      	ldr	r0, [pc, #68]	@ (80150f0 <colorControl_server_1_move_to_color_xy+0x70>)
 80150ac:	f7f5 fb83 	bl	800a7b6 <RGB_set_xy>
	        (void)ZbZclAttrIntegerWrite(cluster, ZCL_COLOR_ATTR_CURRENT_X, req->color_x);
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	2200      	movs	r2, #0
 80150b8:	4698      	mov	r8, r3
 80150ba:	4691      	mov	r9, r2
 80150bc:	4642      	mov	r2, r8
 80150be:	464b      	mov	r3, r9
 80150c0:	2103      	movs	r1, #3
 80150c2:	68f8      	ldr	r0, [r7, #12]
 80150c4:	f7ec fccd 	bl	8001a62 <ZbZclAttrIntegerWrite>
	        (void)ZbZclAttrIntegerWrite(cluster, ZCL_COLOR_ATTR_CURRENT_Y, req->color_y);
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	885b      	ldrh	r3, [r3, #2]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	2200      	movs	r2, #0
 80150d0:	461c      	mov	r4, r3
 80150d2:	4615      	mov	r5, r2
 80150d4:	4622      	mov	r2, r4
 80150d6:	462b      	mov	r3, r5
 80150d8:	2104      	movs	r1, #4
 80150da:	68f8      	ldr	r0, [r7, #12]
 80150dc:	f7ec fcc1 	bl	8001a62 <ZbZclAttrIntegerWrite>
	      else
	      {
	        /* Unknown endpoint */
	        return ZCL_STATUS_FAILURE;
	      }
	      return ZCL_STATUS_SUCCESS;
 80150e0:	2300      	movs	r3, #0
 80150e2:	e000      	b.n	80150e6 <colorControl_server_1_move_to_color_xy+0x66>
	        return ZCL_STATUS_FAILURE;
 80150e4:	2301      	movs	r3, #1
  /* USER CODE END 3 ColorControl server 1 move_to_color_xy 1 */
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3718      	adds	r7, #24
 80150ea:	46bd      	mov	sp, r7
 80150ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80150f0:	200004c4 	.word	0x200004c4

080150f4 <levelControl_server_1_move_to_level>:

/* LevelControl server move_to_level 1 command callback */
static enum ZclStatusCodeT levelControl_server_1_move_to_level(struct ZbZclClusterT *cluster, struct ZbZclLevelClientMoveToLevelReqT *req, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 80150f4:	b5b0      	push	{r4, r5, r7, lr}
 80150f6:	b086      	sub	sp, #24
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
 8015100:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 4 LevelControl server 1 move_to_level 1 */
	uint8_t endpoint;

	  endpoint = ZbZclClusterGetEndpoint(cluster);
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f7ee fcba 	bl	8003a7c <ZbZclClusterGetEndpoint>
 8015108:	4603      	mov	r3, r0
 801510a:	75fb      	strb	r3, [r7, #23]
	  if (endpoint == SW1_ENDPOINT)
 801510c:	7dfb      	ldrb	r3, [r7, #23]
 801510e:	2b14      	cmp	r3, #20
 8015110:	d113      	bne.n	801513a <levelControl_server_1_move_to_level+0x46>
	  {
		RGB_set_brightness(&OBJ_RGB_LED, req->level);
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	785b      	ldrb	r3, [r3, #1]
 8015116:	4619      	mov	r1, r3
 8015118:	480a      	ldr	r0, [pc, #40]	@ (8015144 <levelControl_server_1_move_to_level+0x50>)
 801511a:	f7f5 fb61 	bl	800a7e0 <RGB_set_brightness>
		(void)ZbZclAttrIntegerWrite(cluster, ZCL_LEVEL_ATTR_CURRLEVEL, req->level);
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	785b      	ldrb	r3, [r3, #1]
 8015122:	b2db      	uxtb	r3, r3
 8015124:	2200      	movs	r2, #0
 8015126:	461c      	mov	r4, r3
 8015128:	4615      	mov	r5, r2
 801512a:	4622      	mov	r2, r4
 801512c:	462b      	mov	r3, r5
 801512e:	2100      	movs	r1, #0
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	f7ec fc96 	bl	8001a62 <ZbZclAttrIntegerWrite>
	  else
	  {
		/* Unknown endpoint */
		return ZCL_STATUS_FAILURE;
	  }
	  return ZCL_STATUS_SUCCESS;
 8015136:	2300      	movs	r3, #0
 8015138:	e000      	b.n	801513c <levelControl_server_1_move_to_level+0x48>
		return ZCL_STATUS_FAILURE;
 801513a:	2301      	movs	r3, #1
  /* USER CODE END 4 LevelControl server 1 move_to_level 1 */
}
 801513c:	4618      	mov	r0, r3
 801513e:	3718      	adds	r7, #24
 8015140:	46bd      	mov	sp, r7
 8015142:	bdb0      	pop	{r4, r5, r7, pc}
 8015144:	200004c4 	.word	0x200004c4

08015148 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 801514e:	4817      	ldr	r0, [pc, #92]	@ (80151ac <APP_ZIGBEE_Init+0x64>)
 8015150:	f7fc fcca 	bl	8011ae8 <DbgTraceGetFileName>
 8015154:	4601      	mov	r1, r0
 8015156:	f240 1335 	movw	r3, #309	@ 0x135
 801515a:	4a15      	ldr	r2, [pc, #84]	@ (80151b0 <APP_ZIGBEE_Init+0x68>)
 801515c:	4815      	ldr	r0, [pc, #84]	@ (80151b4 <APP_ZIGBEE_Init+0x6c>)
 801515e:	f001 fda7 	bl	8016cb0 <iprintf>
 8015162:	4a15      	ldr	r2, [pc, #84]	@ (80151b8 <APP_ZIGBEE_Init+0x70>)
 8015164:	2101      	movs	r1, #1
 8015166:	2000      	movs	r0, #0
 8015168:	f7f4 ff76 	bl	800a058 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 801516c:	f000 fb86 	bl	801587c <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8015170:	4812      	ldr	r0, [pc, #72]	@ (80151bc <APP_ZIGBEE_Init+0x74>)
 8015172:	f000 fd3f 	bl	8015bf4 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8015176:	f000 fdf9 	bl	8015d6c <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 801517a:	4a11      	ldr	r2, [pc, #68]	@ (80151c0 <APP_ZIGBEE_Init+0x78>)
 801517c:	2100      	movs	r1, #0
 801517e:	2001      	movs	r0, #1
 8015180:	f001 fae8 	bl	8016754 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8015184:	4a0f      	ldr	r2, [pc, #60]	@ (80151c4 <APP_ZIGBEE_Init+0x7c>)
 8015186:	2100      	movs	r1, #0
 8015188:	2002      	movs	r0, #2
 801518a:	f001 fae3 	bl	8016754 <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 801518e:	4a0e      	ldr	r2, [pc, #56]	@ (80151c8 <APP_ZIGBEE_Init+0x80>)
 8015190:	2100      	movs	r1, #0
 8015192:	2004      	movs	r0, #4
 8015194:	f001 fade 	bl	8016754 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8015198:	f7fc fcf6 	bl	8011b88 <SHCI_C2_ZIGBEE_Init>
 801519c:	4603      	mov	r3, r0
 801519e:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 80151a0:	f000 f814 	bl	80151cc <APP_ZIGBEE_StackLayersInit>

}
 80151a4:	bf00      	nop
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	08018fe4 	.word	0x08018fe4
 80151b0:	08019db0 	.word	0x08019db0
 80151b4:	08019004 	.word	0x08019004
 80151b8:	0801902c 	.word	0x0801902c
 80151bc:	20030838 	.word	0x20030838
 80151c0:	08015d9d 	.word	0x08015d9d
 80151c4:	08015dbd 	.word	0x08015dbd
 80151c8:	080155f5 	.word	0x080155f5

080151cc <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 80151d0:	481e      	ldr	r0, [pc, #120]	@ (801524c <APP_ZIGBEE_StackLayersInit+0x80>)
 80151d2:	f7fc fc89 	bl	8011ae8 <DbgTraceGetFileName>
 80151d6:	4601      	mov	r1, r0
 80151d8:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 80151dc:	4a1c      	ldr	r2, [pc, #112]	@ (8015250 <APP_ZIGBEE_StackLayersInit+0x84>)
 80151de:	481d      	ldr	r0, [pc, #116]	@ (8015254 <APP_ZIGBEE_StackLayersInit+0x88>)
 80151e0:	f001 fd66 	bl	8016cb0 <iprintf>
 80151e4:	4a1c      	ldr	r2, [pc, #112]	@ (8015258 <APP_ZIGBEE_StackLayersInit+0x8c>)
 80151e6:	2101      	movs	r1, #1
 80151e8:	2000      	movs	r0, #0
 80151ea:	f7f4 ff35 	bl	800a058 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 80151ee:	2300      	movs	r3, #0
 80151f0:	2200      	movs	r2, #0
 80151f2:	f04f 0000 	mov.w	r0, #0
 80151f6:	f04f 0100 	mov.w	r1, #0
 80151fa:	f7fd fa47 	bl	801268c <ZbInit>
 80151fe:	4603      	mov	r3, r0
 8015200:	4a16      	ldr	r2, [pc, #88]	@ (801525c <APP_ZIGBEE_StackLayersInit+0x90>)
 8015202:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 8015204:	4b15      	ldr	r3, [pc, #84]	@ (801525c <APP_ZIGBEE_StackLayersInit+0x90>)
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d106      	bne.n	801521a <APP_ZIGBEE_StackLayersInit+0x4e>
 801520c:	4b14      	ldr	r3, [pc, #80]	@ (8015260 <APP_ZIGBEE_StackLayersInit+0x94>)
 801520e:	4a15      	ldr	r2, [pc, #84]	@ (8015264 <APP_ZIGBEE_StackLayersInit+0x98>)
 8015210:	f240 115f 	movw	r1, #351	@ 0x15f
 8015214:	480d      	ldr	r0, [pc, #52]	@ (801524c <APP_ZIGBEE_StackLayersInit+0x80>)
 8015216:	f001 fb9b 	bl	8016950 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 801521a:	f000 f825 	bl	8015268 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  APP_ZIGBEE_ConfigBasicServer();
 801521e:	f000 fe07 	bl	8015e30 <APP_ZIGBEE_ConfigBasicServer>

  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 8015222:	4b0e      	ldr	r3, [pc, #56]	@ (801525c <APP_ZIGBEE_StackLayersInit+0x90>)
 8015224:	2201      	movs	r2, #1
 8015226:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8015228:	f7f5 ff3e 	bl	800b0a8 <HAL_GetTick>
 801522c:	4603      	mov	r3, r0
 801522e:	4a0b      	ldr	r2, [pc, #44]	@ (801525c <APP_ZIGBEE_StackLayersInit+0x90>)
 8015230:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeJoin;
 8015232:	4b0a      	ldr	r3, [pc, #40]	@ (801525c <APP_ZIGBEE_StackLayersInit+0x90>)
 8015234:	2203      	movs	r2, #3
 8015236:	721a      	strb	r2, [r3, #8]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8015238:	4b08      	ldr	r3, [pc, #32]	@ (801525c <APP_ZIGBEE_StackLayersInit+0x90>)
 801523a:	2201      	movs	r2, #1
 801523c:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 801523e:	2100      	movs	r1, #0
 8015240:	2004      	movs	r0, #4
 8015242:	f001 faa9 	bl	8016798 <UTIL_SEQ_SetTask>
}
 8015246:	bf00      	nop
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	08018fe4 	.word	0x08018fe4
 8015250:	08019dc0 	.word	0x08019dc0
 8015254:	08019004 	.word	0x08019004
 8015258:	0801903c 	.word	0x0801903c
 801525c:	20000794 	.word	0x20000794
 8015260:	08019058 	.word	0x08019058
 8015264:	08019ddc 	.word	0x08019ddc

08015268 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 8015268:	b5b0      	push	{r4, r5, r7, lr}
 801526a:	b0a0      	sub	sp, #128	@ 0x80
 801526c:	af04      	add	r7, sp, #16
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 801526e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8015272:	2218      	movs	r2, #24
 8015274:	2100      	movs	r1, #0
 8015276:	4618      	mov	r0, r3
 8015278:	f001 ff36 	bl	80170e8 <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 801527c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8015280:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  req.deviceId = ZCL_DEVICE_ONOFF_SWITCH;
 8015284:	2300      	movs	r3, #0
 8015286:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  req.endpoint = SW1_ENDPOINT;
 801528a:	2314      	movs	r3, #20
 801528c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8015290:	4bac      	ldr	r3, [pc, #688]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8015298:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801529c:	4618      	mov	r0, r3
 801529e:	f7fd ff8c 	bl	80131ba <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 80152a2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d006      	beq.n	80152b8 <APP_ZIGBEE_ConfigEndpoints+0x50>
 80152aa:	4ba7      	ldr	r3, [pc, #668]	@ (8015548 <APP_ZIGBEE_ConfigEndpoints+0x2e0>)
 80152ac:	4aa7      	ldr	r2, [pc, #668]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 80152ae:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80152b2:	48a7      	ldr	r0, [pc, #668]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 80152b4:	f001 fb4c 	bl	8016950 <__assert_func>

  /* Basic client/server */
  zigbee_app_info.basic_client_1 = ZbZclBasicClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 80152b8:	4ba2      	ldr	r3, [pc, #648]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80152ba:	685b      	ldr	r3, [r3, #4]
 80152bc:	2114      	movs	r1, #20
 80152be:	4618      	mov	r0, r3
 80152c0:	f7ee fb90 	bl	80039e4 <ZbZclBasicClientAlloc>
 80152c4:	4603      	mov	r3, r0
 80152c6:	4a9f      	ldr	r2, [pc, #636]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80152c8:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.basic_client_1 != NULL);
 80152ca:	4b9e      	ldr	r3, [pc, #632]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80152cc:	695b      	ldr	r3, [r3, #20]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d106      	bne.n	80152e0 <APP_ZIGBEE_ConfigEndpoints+0x78>
 80152d2:	4ba0      	ldr	r3, [pc, #640]	@ (8015554 <APP_ZIGBEE_ConfigEndpoints+0x2ec>)
 80152d4:	4a9d      	ldr	r2, [pc, #628]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 80152d6:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80152da:	489d      	ldr	r0, [pc, #628]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 80152dc:	f001 fb38 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.basic_client_1);
 80152e0:	4b98      	ldr	r3, [pc, #608]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80152e2:	695b      	ldr	r3, [r3, #20]
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7fe f89e 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* OnOff server */
  zigbee_app_info.onOff_server_1 = ZbZclOnOffServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &OnOffServerCallbacks_1, NULL);
 80152ea:	4b96      	ldr	r3, [pc, #600]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80152ec:	6858      	ldr	r0, [r3, #4]
 80152ee:	2300      	movs	r3, #0
 80152f0:	4a99      	ldr	r2, [pc, #612]	@ (8015558 <APP_ZIGBEE_ConfigEndpoints+0x2f0>)
 80152f2:	2114      	movs	r1, #20
 80152f4:	f7f1 fc0a 	bl	8006b0c <ZbZclOnOffServerAlloc>
 80152f8:	4603      	mov	r3, r0
 80152fa:	4a92      	ldr	r2, [pc, #584]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80152fc:	6193      	str	r3, [r2, #24]
  assert(zigbee_app_info.onOff_server_1 != NULL);
 80152fe:	4b91      	ldr	r3, [pc, #580]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015300:	699b      	ldr	r3, [r3, #24]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d106      	bne.n	8015314 <APP_ZIGBEE_ConfigEndpoints+0xac>
 8015306:	4b95      	ldr	r3, [pc, #596]	@ (801555c <APP_ZIGBEE_ConfigEndpoints+0x2f4>)
 8015308:	4a90      	ldr	r2, [pc, #576]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 801530a:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 801530e:	4890      	ldr	r0, [pc, #576]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 8015310:	f001 fb1e 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.onOff_server_1);
 8015314:	4b8b      	ldr	r3, [pc, #556]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015316:	699b      	ldr	r3, [r3, #24]
 8015318:	4618      	mov	r0, r3
 801531a:	f7fe f884 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* ColorControl server */
  struct ZbColorClusterConfig colorServerConfig_1 = {
 801531e:	4a90      	ldr	r2, [pc, #576]	@ (8015560 <APP_ZIGBEE_ConfigEndpoints+0x2f8>)
 8015320:	1d3b      	adds	r3, r7, #4
 8015322:	4611      	mov	r1, r2
 8015324:	224c      	movs	r2, #76	@ 0x4c
 8015326:	4618      	mov	r0, r3
 8015328:	f001 ff8f 	bl	801724a <memcpy>
 801532c:	2308      	movs	r3, #8
 801532e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    /* USER CODE BEGIN Color Server Config (endpoint1) */
	.capabilities = ZCL_COLOR_CAP_XY,

    /* USER CODE END Color Server Config (endpoint1) */
  };
  zigbee_app_info.colorControl_server_1 = ZbZclColorServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, zigbee_app_info.onOff_server_1, NULL, 0, &colorServerConfig_1, NULL);
 8015332:	4b84      	ldr	r3, [pc, #528]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015334:	6858      	ldr	r0, [r3, #4]
 8015336:	4b83      	ldr	r3, [pc, #524]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015338:	699a      	ldr	r2, [r3, #24]
 801533a:	2300      	movs	r3, #0
 801533c:	9302      	str	r3, [sp, #8]
 801533e:	1d3b      	adds	r3, r7, #4
 8015340:	9301      	str	r3, [sp, #4]
 8015342:	2300      	movs	r3, #0
 8015344:	9300      	str	r3, [sp, #0]
 8015346:	2300      	movs	r3, #0
 8015348:	2114      	movs	r1, #20
 801534a:	f7ef f82b 	bl	80043a4 <ZbZclColorServerAlloc>
 801534e:	4603      	mov	r3, r0
 8015350:	4a7c      	ldr	r2, [pc, #496]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015352:	61d3      	str	r3, [r2, #28]
  assert(zigbee_app_info.colorControl_server_1 != NULL);
 8015354:	4b7b      	ldr	r3, [pc, #492]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015356:	69db      	ldr	r3, [r3, #28]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d106      	bne.n	801536a <APP_ZIGBEE_ConfigEndpoints+0x102>
 801535c:	4b81      	ldr	r3, [pc, #516]	@ (8015564 <APP_ZIGBEE_ConfigEndpoints+0x2fc>)
 801535e:	4a7b      	ldr	r2, [pc, #492]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 8015360:	f240 119d 	movw	r1, #413	@ 0x19d
 8015364:	487a      	ldr	r0, [pc, #488]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 8015366:	f001 faf3 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.colorControl_server_1);
 801536a:	4b76      	ldr	r3, [pc, #472]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801536c:	69db      	ldr	r3, [r3, #28]
 801536e:	4618      	mov	r0, r3
 8015370:	f7fe f859 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* LevelControl server */
  zigbee_app_info.levelControl_server_1 = ZbZclLevelServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, zigbee_app_info.onOff_server_1, &LevelServerCallbacks_1, NULL);
 8015374:	4b73      	ldr	r3, [pc, #460]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015376:	6858      	ldr	r0, [r3, #4]
 8015378:	4b72      	ldr	r3, [pc, #456]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801537a:	699a      	ldr	r2, [r3, #24]
 801537c:	2300      	movs	r3, #0
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	4b79      	ldr	r3, [pc, #484]	@ (8015568 <APP_ZIGBEE_ConfigEndpoints+0x300>)
 8015382:	2114      	movs	r1, #20
 8015384:	f7f1 f93c 	bl	8006600 <ZbZclLevelServerAlloc>
 8015388:	4603      	mov	r3, r0
 801538a:	4a6e      	ldr	r2, [pc, #440]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801538c:	6213      	str	r3, [r2, #32]
  assert(zigbee_app_info.levelControl_server_1 != NULL);
 801538e:	4b6d      	ldr	r3, [pc, #436]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015390:	6a1b      	ldr	r3, [r3, #32]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d106      	bne.n	80153a4 <APP_ZIGBEE_ConfigEndpoints+0x13c>
 8015396:	4b75      	ldr	r3, [pc, #468]	@ (801556c <APP_ZIGBEE_ConfigEndpoints+0x304>)
 8015398:	4a6c      	ldr	r2, [pc, #432]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 801539a:	f240 11a1 	movw	r1, #417	@ 0x1a1
 801539e:	486c      	ldr	r0, [pc, #432]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 80153a0:	f001 fad6 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.levelControl_server_1);
 80153a4:	4b67      	ldr	r3, [pc, #412]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80153a6:	6a1b      	ldr	r3, [r3, #32]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fe f83c 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* Endpoint: SW2_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 80153ae:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80153b2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  req.deviceId = ZCL_DEVICE_SIMPLE_SENSOR;
 80153b6:	230c      	movs	r3, #12
 80153b8:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  req.endpoint = SW2_ENDPOINT;
 80153bc:	2315      	movs	r3, #21
 80153be:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 80153c2:	4b60      	ldr	r3, [pc, #384]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80153c4:	685b      	ldr	r3, [r3, #4]
 80153c6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80153ca:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fd fef3 	bl	80131ba <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 80153d4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d006      	beq.n	80153ea <APP_ZIGBEE_ConfigEndpoints+0x182>
 80153dc:	4b5a      	ldr	r3, [pc, #360]	@ (8015548 <APP_ZIGBEE_ConfigEndpoints+0x2e0>)
 80153de:	4a5b      	ldr	r2, [pc, #364]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 80153e0:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 80153e4:	485a      	ldr	r0, [pc, #360]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 80153e6:	f001 fab3 	bl	8016950 <__assert_func>

  /* Basic client/server */
  zigbee_app_info.basic_client_2 = ZbZclBasicClientAlloc(zigbee_app_info.zb, SW2_ENDPOINT);
 80153ea:	4b56      	ldr	r3, [pc, #344]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	2115      	movs	r1, #21
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7ee faf7 	bl	80039e4 <ZbZclBasicClientAlloc>
 80153f6:	4603      	mov	r3, r0
 80153f8:	4a52      	ldr	r2, [pc, #328]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80153fa:	6253      	str	r3, [r2, #36]	@ 0x24
  assert(zigbee_app_info.basic_client_2 != NULL);
 80153fc:	4b51      	ldr	r3, [pc, #324]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80153fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015400:	2b00      	cmp	r3, #0
 8015402:	d106      	bne.n	8015412 <APP_ZIGBEE_ConfigEndpoints+0x1aa>
 8015404:	4b5a      	ldr	r3, [pc, #360]	@ (8015570 <APP_ZIGBEE_ConfigEndpoints+0x308>)
 8015406:	4a51      	ldr	r2, [pc, #324]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 8015408:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 801540c:	4850      	ldr	r0, [pc, #320]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 801540e:	f001 fa9f 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.basic_client_2);
 8015412:	4b4c      	ldr	r3, [pc, #304]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015416:	4618      	mov	r0, r3
 8015418:	f7fe f805 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* Temperature meas server */
  zigbee_app_info.temperature_meas_server_2 = ZbZclTempMeasServerAlloc(zigbee_app_info.zb, SW2_ENDPOINT, TEMP_MIN_2, TEMP_MAX_2, TEMP_TOLERANCE_2);
 801541c:	4b49      	ldr	r3, [pc, #292]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801541e:	6858      	ldr	r0, [r3, #4]
 8015420:	2301      	movs	r3, #1
 8015422:	9300      	str	r3, [sp, #0]
 8015424:	2364      	movs	r3, #100	@ 0x64
 8015426:	f06f 0213 	mvn.w	r2, #19
 801542a:	2115      	movs	r1, #21
 801542c:	f7f1 fcb2 	bl	8006d94 <ZbZclTempMeasServerAlloc>
 8015430:	4603      	mov	r3, r0
 8015432:	4a44      	ldr	r2, [pc, #272]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015434:	6293      	str	r3, [r2, #40]	@ 0x28
  assert(zigbee_app_info.temperature_meas_server_2 != NULL);
 8015436:	4b43      	ldr	r3, [pc, #268]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801543a:	2b00      	cmp	r3, #0
 801543c:	d106      	bne.n	801544c <APP_ZIGBEE_ConfigEndpoints+0x1e4>
 801543e:	4b4d      	ldr	r3, [pc, #308]	@ (8015574 <APP_ZIGBEE_ConfigEndpoints+0x30c>)
 8015440:	4a42      	ldr	r2, [pc, #264]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 8015442:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8015446:	4842      	ldr	r0, [pc, #264]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 8015448:	f001 fa82 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.temperature_meas_server_2);
 801544c:	4b3d      	ldr	r3, [pc, #244]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015450:	4618      	mov	r0, r3
 8015452:	f7fd ffe8 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* Water content server */
  zigbee_app_info.water_content_server_2 = ZbZclWaterContentMeasServerAlloc(zigbee_app_info.zb, SW2_ENDPOINT, ZCL_CLUSTER_MEAS_HUMIDITY, HUMIDITY_MIN_2, HUMIDITY_MAX_2);
 8015456:	4b3b      	ldr	r3, [pc, #236]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015458:	6858      	ldr	r0, [r3, #4]
 801545a:	2364      	movs	r3, #100	@ 0x64
 801545c:	9300      	str	r3, [sp, #0]
 801545e:	2300      	movs	r3, #0
 8015460:	f240 4205 	movw	r2, #1029	@ 0x405
 8015464:	2115      	movs	r1, #21
 8015466:	f7f1 fd6f 	bl	8006f48 <ZbZclWaterContentMeasServerAlloc>
 801546a:	4603      	mov	r3, r0
 801546c:	4a35      	ldr	r2, [pc, #212]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801546e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  assert(zigbee_app_info.water_content_server_2 != NULL);
 8015470:	4b34      	ldr	r3, [pc, #208]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015474:	2b00      	cmp	r3, #0
 8015476:	d106      	bne.n	8015486 <APP_ZIGBEE_ConfigEndpoints+0x21e>
 8015478:	4b3f      	ldr	r3, [pc, #252]	@ (8015578 <APP_ZIGBEE_ConfigEndpoints+0x310>)
 801547a:	4a34      	ldr	r2, [pc, #208]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 801547c:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8015480:	4833      	ldr	r0, [pc, #204]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 8015482:	f001 fa65 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.water_content_server_2);
 8015486:	4b2f      	ldr	r3, [pc, #188]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 8015488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801548a:	4618      	mov	r0, r3
 801548c:	f7fd ffcb 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* Endpoint: SW3_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8015490:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8015494:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  req.deviceId = ZCL_DEVICE_SIMPLE_SENSOR;
 8015498:	230c      	movs	r3, #12
 801549a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  req.endpoint = SW3_ENDPOINT;
 801549e:	2316      	movs	r3, #22
 80154a0:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 80154a4:	4b27      	ldr	r3, [pc, #156]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80154ac:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80154b0:	4618      	mov	r0, r3
 80154b2:	f7fd fe82 	bl	80131ba <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 80154b6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d006      	beq.n	80154cc <APP_ZIGBEE_ConfigEndpoints+0x264>
 80154be:	4b22      	ldr	r3, [pc, #136]	@ (8015548 <APP_ZIGBEE_ConfigEndpoints+0x2e0>)
 80154c0:	4a22      	ldr	r2, [pc, #136]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 80154c2:	f240 11bb 	movw	r1, #443	@ 0x1bb
 80154c6:	4822      	ldr	r0, [pc, #136]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 80154c8:	f001 fa42 	bl	8016950 <__assert_func>

  /* Water content server */
  zigbee_app_info.water_content_server_3 = ZbZclWaterContentMeasServerAlloc(zigbee_app_info.zb, SW3_ENDPOINT, ZCL_CLUSTER_MEAS_SOIL_MOISTURE, HUMIDITY_MIN_3, HUMIDITY_MAX_3);
 80154cc:	4b1d      	ldr	r3, [pc, #116]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80154ce:	6858      	ldr	r0, [r3, #4]
 80154d0:	2364      	movs	r3, #100	@ 0x64
 80154d2:	9300      	str	r3, [sp, #0]
 80154d4:	2300      	movs	r3, #0
 80154d6:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80154da:	2116      	movs	r1, #22
 80154dc:	f7f1 fd34 	bl	8006f48 <ZbZclWaterContentMeasServerAlloc>
 80154e0:	4603      	mov	r3, r0
 80154e2:	4a18      	ldr	r2, [pc, #96]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80154e4:	6313      	str	r3, [r2, #48]	@ 0x30
  assert(zigbee_app_info.water_content_server_3 != NULL);
 80154e6:	4b17      	ldr	r3, [pc, #92]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80154e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d106      	bne.n	80154fc <APP_ZIGBEE_ConfigEndpoints+0x294>
 80154ee:	4b23      	ldr	r3, [pc, #140]	@ (801557c <APP_ZIGBEE_ConfigEndpoints+0x314>)
 80154f0:	4a16      	ldr	r2, [pc, #88]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 80154f2:	f240 11bf 	movw	r1, #447	@ 0x1bf
 80154f6:	4816      	ldr	r0, [pc, #88]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 80154f8:	f001 fa2a 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.water_content_server_3);
 80154fc:	4b11      	ldr	r3, [pc, #68]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 80154fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015500:	4618      	mov	r0, r3
 8015502:	f7fd ff90 	bl	8013426 <ZbZclClusterEndpointRegister>
  /* Endpoint: SW4_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8015506:	f44f 7382 	mov.w	r3, #260	@ 0x104
 801550a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
  req.deviceId = ZCL_DEVICE_SIMPLE_SENSOR;
 801550e:	230c      	movs	r3, #12
 8015510:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  req.endpoint = SW4_ENDPOINT;
 8015514:	2317      	movs	r3, #23
 8015516:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 801551a:	4b0a      	ldr	r3, [pc, #40]	@ (8015544 <APP_ZIGBEE_ConfigEndpoints+0x2dc>)
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8015522:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8015526:	4618      	mov	r0, r3
 8015528:	f7fd fe47 	bl	80131ba <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 801552c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015530:	2b00      	cmp	r3, #0
 8015532:	d025      	beq.n	8015580 <APP_ZIGBEE_ConfigEndpoints+0x318>
 8015534:	4b04      	ldr	r3, [pc, #16]	@ (8015548 <APP_ZIGBEE_ConfigEndpoints+0x2e0>)
 8015536:	4a05      	ldr	r2, [pc, #20]	@ (801554c <APP_ZIGBEE_ConfigEndpoints+0x2e4>)
 8015538:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 801553c:	4804      	ldr	r0, [pc, #16]	@ (8015550 <APP_ZIGBEE_ConfigEndpoints+0x2e8>)
 801553e:	f001 fa07 	bl	8016950 <__assert_func>
 8015542:	bf00      	nop
 8015544:	20000794 	.word	0x20000794
 8015548:	08019074 	.word	0x08019074
 801554c:	08019df8 	.word	0x08019df8
 8015550:	08018fe4 	.word	0x08018fe4
 8015554:	08019098 	.word	0x08019098
 8015558:	20000018 	.word	0x20000018
 801555c:	080190c0 	.word	0x080190c0
 8015560:	20000024 	.word	0x20000024
 8015564:	080190e8 	.word	0x080190e8
 8015568:	20000070 	.word	0x20000070
 801556c:	08019118 	.word	0x08019118
 8015570:	08019148 	.word	0x08019148
 8015574:	08019170 	.word	0x08019170
 8015578:	080191a4 	.word	0x080191a4
 801557c:	080191d4 	.word	0x080191d4

  /* Water content server */
  zigbee_app_info.water_content_server_4 = ZbZclWaterContentMeasServerAlloc(zigbee_app_info.zb, SW4_ENDPOINT, ZCL_CLUSTER_MEAS_SOIL_MOISTURE, HUMIDITY_MIN_4, HUMIDITY_MAX_4);
 8015580:	4b17      	ldr	r3, [pc, #92]	@ (80155e0 <APP_ZIGBEE_ConfigEndpoints+0x378>)
 8015582:	6858      	ldr	r0, [r3, #4]
 8015584:	2364      	movs	r3, #100	@ 0x64
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	2300      	movs	r3, #0
 801558a:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 801558e:	2117      	movs	r1, #23
 8015590:	f7f1 fcda 	bl	8006f48 <ZbZclWaterContentMeasServerAlloc>
 8015594:	4603      	mov	r3, r0
 8015596:	4a12      	ldr	r2, [pc, #72]	@ (80155e0 <APP_ZIGBEE_ConfigEndpoints+0x378>)
 8015598:	6353      	str	r3, [r2, #52]	@ 0x34
  assert(zigbee_app_info.water_content_server_4 != NULL);
 801559a:	4b11      	ldr	r3, [pc, #68]	@ (80155e0 <APP_ZIGBEE_ConfigEndpoints+0x378>)
 801559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d106      	bne.n	80155b0 <APP_ZIGBEE_ConfigEndpoints+0x348>
 80155a2:	4b10      	ldr	r3, [pc, #64]	@ (80155e4 <APP_ZIGBEE_ConfigEndpoints+0x37c>)
 80155a4:	4a10      	ldr	r2, [pc, #64]	@ (80155e8 <APP_ZIGBEE_ConfigEndpoints+0x380>)
 80155a6:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 80155aa:	4810      	ldr	r0, [pc, #64]	@ (80155ec <APP_ZIGBEE_ConfigEndpoints+0x384>)
 80155ac:	f001 f9d0 	bl	8016950 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.water_content_server_4);
 80155b0:	4b0b      	ldr	r3, [pc, #44]	@ (80155e0 <APP_ZIGBEE_ConfigEndpoints+0x378>)
 80155b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7fd ff36 	bl	8013426 <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, test++);
 80155ba:	4b09      	ldr	r3, [pc, #36]	@ (80155e0 <APP_ZIGBEE_ConfigEndpoints+0x378>)
 80155bc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80155be:	4b0c      	ldr	r3, [pc, #48]	@ (80155f0 <APP_ZIGBEE_ConfigEndpoints+0x388>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	1c5a      	adds	r2, r3, #1
 80155c4:	490a      	ldr	r1, [pc, #40]	@ (80155f0 <APP_ZIGBEE_ConfigEndpoints+0x388>)
 80155c6:	600a      	str	r2, [r1, #0]
 80155c8:	17da      	asrs	r2, r3, #31
 80155ca:	461c      	mov	r4, r3
 80155cc:	4615      	mov	r5, r2
 80155ce:	4622      	mov	r2, r4
 80155d0:	462b      	mov	r3, r5
 80155d2:	2100      	movs	r1, #0
 80155d4:	f7ec fa45 	bl	8001a62 <ZbZclAttrIntegerWrite>

  /* USER CODE END CONFIG_ENDPOINT */
}
 80155d8:	bf00      	nop
 80155da:	3770      	adds	r7, #112	@ 0x70
 80155dc:	46bd      	mov	sp, r7
 80155de:	bdb0      	pop	{r4, r5, r7, pc}
 80155e0:	20000794 	.word	0x20000794
 80155e4:	08019204 	.word	0x08019204
 80155e8:	08019df8 	.word	0x08019df8
 80155ec:	08018fe4 	.word	0x08018fe4
 80155f0:	200007cc 	.word	0x200007cc

080155f4 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 80155f4:	b590      	push	{r4, r7, lr}
 80155f6:	b0f9      	sub	sp, #484	@ 0x1e4
 80155f8:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 80155fa:	4b56      	ldr	r3, [pc, #344]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 80155fc:	7a5b      	ldrb	r3, [r3, #9]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	f000 809b 	beq.w	801573a <APP_ZIGBEE_NwkForm+0x146>
 8015604:	f7f5 fd50 	bl	800b0a8 <HAL_GetTick>
 8015608:	4602      	mov	r2, r0
 801560a:	4b52      	ldr	r3, [pc, #328]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	429a      	cmp	r2, r3
 8015610:	f0c0 8093 	bcc.w	801573a <APP_ZIGBEE_NwkForm+0x146>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 8015614:	4b4f      	ldr	r3, [pc, #316]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	2200      	movs	r2, #0
 801561a:	211f      	movs	r1, #31
 801561c:	4618      	mov	r0, r3
 801561e:	f7fd f889 	bl	8012734 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 8015622:	463b      	mov	r3, r7
 8015624:	4618      	mov	r0, r3
 8015626:	f7fd f923 	bl	8012870 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_ROUTER");
 801562a:	484b      	ldr	r0, [pc, #300]	@ (8015758 <APP_ZIGBEE_NwkForm+0x164>)
 801562c:	f7fc fa5c 	bl	8011ae8 <DbgTraceGetFileName>
 8015630:	4601      	mov	r1, r0
 8015632:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 8015636:	4a49      	ldr	r2, [pc, #292]	@ (801575c <APP_ZIGBEE_NwkForm+0x168>)
 8015638:	4849      	ldr	r0, [pc, #292]	@ (8015760 <APP_ZIGBEE_NwkForm+0x16c>)
 801563a:	f001 fb39 	bl	8016cb0 <iprintf>
 801563e:	4a49      	ldr	r2, [pc, #292]	@ (8015764 <APP_ZIGBEE_NwkForm+0x170>)
 8015640:	2101      	movs	r1, #1
 8015642:	2000      	movs	r0, #0
 8015644:	f7f4 fd08 	bl	800a058 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 8015648:	4b42      	ldr	r3, [pc, #264]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 801564a:	7a1a      	ldrb	r2, [r3, #8]
 801564c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8015650:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015654:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 8015658:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801565c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015660:	4a41      	ldr	r2, [pc, #260]	@ (8015768 <APP_ZIGBEE_NwkForm+0x174>)
 8015662:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8015666:	4613      	mov	r3, r2
 8015668:	6818      	ldr	r0, [r3, #0]
 801566a:	6859      	ldr	r1, [r3, #4]
 801566c:	689a      	ldr	r2, [r3, #8]
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 8015672:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8015676:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801567a:	2201      	movs	r2, #1
 801567c:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 801567e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8015682:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015686:	2200      	movs	r2, #0
 8015688:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 801568a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801568e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015696:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 8015698:	4b2e      	ldr	r3, [pc, #184]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 801569a:	685b      	ldr	r3, [r3, #4]
 801569c:	463a      	mov	r2, r7
 801569e:	4611      	mov	r1, r2
 80156a0:	4618      	mov	r0, r3
 80156a2:	f000 f87f 	bl	80157a4 <ZbStartupWait>
 80156a6:	4603      	mov	r3, r0
 80156a8:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 80156ac:	482a      	ldr	r0, [pc, #168]	@ (8015758 <APP_ZIGBEE_NwkForm+0x164>)
 80156ae:	f7fc fa1b 	bl	8011ae8 <DbgTraceGetFileName>
 80156b2:	4601      	mov	r1, r0
 80156b4:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80156b8:	4a28      	ldr	r2, [pc, #160]	@ (801575c <APP_ZIGBEE_NwkForm+0x168>)
 80156ba:	4829      	ldr	r0, [pc, #164]	@ (8015760 <APP_ZIGBEE_NwkForm+0x16c>)
 80156bc:	f001 faf8 	bl	8016cb0 <iprintf>
 80156c0:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80156c4:	4a29      	ldr	r2, [pc, #164]	@ (801576c <APP_ZIGBEE_NwkForm+0x178>)
 80156c6:	2101      	movs	r1, #1
 80156c8:	2000      	movs	r0, #0
 80156ca:	f7f4 fcc5 	bl	800a058 <logApplication>
    zigbee_app_info.join_status = status;
 80156ce:	4a21      	ldr	r2, [pc, #132]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 80156d0:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80156d4:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 80156d6:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d115      	bne.n	801570a <APP_ZIGBEE_NwkForm+0x116>
    {
      zigbee_app_info.join_delay = 0U;
 80156de:	4b1d      	ldr	r3, [pc, #116]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 80156e0:	2200      	movs	r2, #0
 80156e2:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 80156e4:	4b1b      	ldr	r3, [pc, #108]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 80156e6:	2201      	movs	r2, #1
 80156e8:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 80156ea:	481b      	ldr	r0, [pc, #108]	@ (8015758 <APP_ZIGBEE_NwkForm+0x164>)
 80156ec:	f7fc f9fc 	bl	8011ae8 <DbgTraceGetFileName>
 80156f0:	4601      	mov	r1, r0
 80156f2:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 80156f6:	4a19      	ldr	r2, [pc, #100]	@ (801575c <APP_ZIGBEE_NwkForm+0x168>)
 80156f8:	4819      	ldr	r0, [pc, #100]	@ (8015760 <APP_ZIGBEE_NwkForm+0x16c>)
 80156fa:	f001 fad9 	bl	8016cb0 <iprintf>
 80156fe:	4a1c      	ldr	r2, [pc, #112]	@ (8015770 <APP_ZIGBEE_NwkForm+0x17c>)
 8015700:	2101      	movs	r1, #1
 8015702:	2000      	movs	r0, #0
 8015704:	f7f4 fca8 	bl	800a058 <logApplication>
 8015708:	e017      	b.n	801573a <APP_ZIGBEE_NwkForm+0x146>

      /* USER CODE END 5 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 801570a:	4813      	ldr	r0, [pc, #76]	@ (8015758 <APP_ZIGBEE_NwkForm+0x164>)
 801570c:	f7fc f9ec 	bl	8011ae8 <DbgTraceGetFileName>
 8015710:	4601      	mov	r1, r0
 8015712:	f240 2301 	movw	r3, #513	@ 0x201
 8015716:	4a11      	ldr	r2, [pc, #68]	@ (801575c <APP_ZIGBEE_NwkForm+0x168>)
 8015718:	4811      	ldr	r0, [pc, #68]	@ (8015760 <APP_ZIGBEE_NwkForm+0x16c>)
 801571a:	f001 fac9 	bl	8016cb0 <iprintf>
 801571e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015722:	4a14      	ldr	r2, [pc, #80]	@ (8015774 <APP_ZIGBEE_NwkForm+0x180>)
 8015724:	2101      	movs	r1, #1
 8015726:	2000      	movs	r0, #0
 8015728:	f7f4 fc96 	bl	800a058 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 801572c:	f7f5 fcbc 	bl	800b0a8 <HAL_GetTick>
 8015730:	4603      	mov	r3, r0
 8015732:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8015736:	4a07      	ldr	r2, [pc, #28]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 8015738:	60d3      	str	r3, [r2, #12]
      /* USER CODE END 6 */
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 801573a:	4b06      	ldr	r3, [pc, #24]	@ (8015754 <APP_ZIGBEE_NwkForm+0x160>)
 801573c:	7a5b      	ldrb	r3, [r3, #9]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d003      	beq.n	801574a <APP_ZIGBEE_NwkForm+0x156>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8015742:	2100      	movs	r1, #0
 8015744:	2004      	movs	r0, #4
 8015746:	f001 f827 	bl	8016798 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN NW_FORM */
  /* USER CODE END NW_FORM */
}
 801574a:	bf00      	nop
 801574c:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 8015750:	46bd      	mov	sp, r7
 8015752:	bd90      	pop	{r4, r7, pc}
 8015754:	20000794 	.word	0x20000794
 8015758:	08018fe4 	.word	0x08018fe4
 801575c:	08019e14 	.word	0x08019e14
 8015760:	08019004 	.word	0x08019004
 8015764:	08019234 	.word	0x08019234
 8015768:	08019afc 	.word	0x08019afc
 801576c:	08019264 	.word	0x08019264
 8015770:	0801928c 	.word	0x0801928c
 8015774:	0801929c 	.word	0x0801929c

08015778 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b084      	sub	sp, #16
 801577c:	af00      	add	r7, sp, #0
 801577e:	4603      	mov	r3, r0
 8015780:	6039      	str	r1, [r7, #0]
 8015782:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	60fb      	str	r3, [r7, #12]

  info->status = status;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	79fa      	ldrb	r2, [r7, #7]
 801578c:	705a      	strb	r2, [r3, #1]
  info->active = false;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	2200      	movs	r2, #0
 8015792:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8015794:	2008      	movs	r0, #8
 8015796:	f001 f82b 	bl	80167f0 <UTIL_SEQ_SetEvt>
}
 801579a:	bf00      	nop
 801579c:	3710      	adds	r7, #16
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
	...

080157a4 <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 80157ae:	2002      	movs	r0, #2
 80157b0:	f001 f8ec 	bl	801698c <malloc>
 80157b4:	4603      	mov	r3, r0
 80157b6:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d101      	bne.n	80157c2 <ZbStartupWait+0x1e>
  {
    return ZB_STATUS_ALLOC_FAIL;
 80157be:	2370      	movs	r3, #112	@ 0x70
 80157c0:	e021      	b.n	8015806 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 80157c2:	2202      	movs	r2, #2
 80157c4:	2100      	movs	r1, #0
 80157c6:	68f8      	ldr	r0, [r7, #12]
 80157c8:	f001 fc8e 	bl	80170e8 <memset>

  info->active = true;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	2201      	movs	r2, #1
 80157d0:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	4a0e      	ldr	r2, [pc, #56]	@ (8015810 <ZbStartupWait+0x6c>)
 80157d6:	6839      	ldr	r1, [r7, #0]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f7fd f873 	bl	80128c4 <ZbStartup>
 80157de:	4603      	mov	r3, r0
 80157e0:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 80157e2:	7afb      	ldrb	r3, [r7, #11]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d004      	beq.n	80157f2 <ZbStartupWait+0x4e>
  {
    free(info);
 80157e8:	68f8      	ldr	r0, [r7, #12]
 80157ea:	f001 f8d7 	bl	801699c <free>
    return status;
 80157ee:	7afb      	ldrb	r3, [r7, #11]
 80157f0:	e009      	b.n	8015806 <ZbStartupWait+0x62>
  }

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 80157f2:	2008      	movs	r0, #8
 80157f4:	f001 f81c 	bl	8016830 <UTIL_SEQ_WaitEvt>
  status = info->status;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	785b      	ldrb	r3, [r3, #1]
 80157fc:	72fb      	strb	r3, [r7, #11]
  free(info);
 80157fe:	68f8      	ldr	r0, [r7, #12]
 8015800:	f001 f8cc 	bl	801699c <free>
  return status;
 8015804:	7afb      	ldrb	r3, [r7, #11]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	08015779 	.word	0x08015779

08015814 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 801581e:	2100      	movs	r1, #0
 8015820:	4803      	ldr	r0, [pc, #12]	@ (8015830 <APP_ZIGBEE_Error+0x1c>)
 8015822:	f000 f807 	bl	8015834 <APP_ZIGBEE_TraceError>
      break;
 8015826:	bf00      	nop
  }
}
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}
 8015830:	080192dc 	.word	0x080192dc

08015834 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af02      	add	r7, sp, #8
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 801583e:	480b      	ldr	r0, [pc, #44]	@ (801586c <APP_ZIGBEE_TraceError+0x38>)
 8015840:	f7fc f952 	bl	8011ae8 <DbgTraceGetFileName>
 8015844:	4601      	mov	r1, r0
 8015846:	f240 235d 	movw	r3, #605	@ 0x25d
 801584a:	4a09      	ldr	r2, [pc, #36]	@ (8015870 <APP_ZIGBEE_TraceError+0x3c>)
 801584c:	4809      	ldr	r0, [pc, #36]	@ (8015874 <APP_ZIGBEE_TraceError+0x40>)
 801584e:	f001 fa2f 	bl	8016cb0 <iprintf>
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	9300      	str	r3, [sp, #0]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	4a07      	ldr	r2, [pc, #28]	@ (8015878 <APP_ZIGBEE_TraceError+0x44>)
 801585a:	2101      	movs	r1, #1
 801585c:	2000      	movs	r0, #0
 801585e:	f7f4 fbfb 	bl	800a058 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  /* USER CODE END TRACE_ERROR */

}
 8015862:	bf00      	nop
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	08018fe4 	.word	0x08018fe4
 8015870:	08019e28 	.word	0x08019e28
 8015874:	08019004 	.word	0x08019004
 8015878:	080192ec 	.word	0x080192ec

0801587c <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b098      	sub	sp, #96	@ 0x60
 8015880:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8015882:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015886:	653b      	str	r3, [r7, #80]	@ 0x50

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8015888:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801588a:	f7fc f991 	bl	8011bb0 <SHCI_GetWirelessFwInfo>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d004      	beq.n	801589e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8015894:	2101      	movs	r1, #1
 8015896:	2001      	movs	r0, #1
 8015898:	f7ff ffbc 	bl	8015814 <APP_ZIGBEE_Error>
    APP_DBG("water_content Server on Endpoint %d", SW2_ENDPOINT);
    APP_DBG("water_content Server on Endpoint %d", SW3_ENDPOINT);
    APP_DBG("water_content Server on Endpoint %d", SW4_ENDPOINT);
    APP_DBG("**********************************************************");
  }
}
 801589c:	e17b      	b.n	8015b96 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x31a>
    APP_DBG("**********************************************************");
 801589e:	48c0      	ldr	r0, [pc, #768]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 80158a0:	f7fc f922 	bl	8011ae8 <DbgTraceGetFileName>
 80158a4:	4601      	mov	r1, r0
 80158a6:	f44f 731d 	mov.w	r3, #628	@ 0x274
 80158aa:	4abe      	ldr	r2, [pc, #760]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 80158ac:	48be      	ldr	r0, [pc, #760]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 80158ae:	f001 f9ff 	bl	8016cb0 <iprintf>
 80158b2:	4abe      	ldr	r2, [pc, #760]	@ (8015bac <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x330>)
 80158b4:	2101      	movs	r1, #1
 80158b6:	2000      	movs	r0, #0
 80158b8:	f7f4 fbce 	bl	800a058 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80158bc:	48b8      	ldr	r0, [pc, #736]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 80158be:	f7fc f913 	bl	8011ae8 <DbgTraceGetFileName>
 80158c2:	4601      	mov	r1, r0
 80158c4:	f240 2375 	movw	r3, #629	@ 0x275
 80158c8:	4ab6      	ldr	r2, [pc, #728]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 80158ca:	48b7      	ldr	r0, [pc, #732]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 80158cc:	f001 f9f0 	bl	8016cb0 <iprintf>
 80158d0:	4ab7      	ldr	r2, [pc, #732]	@ (8015bb0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x334>)
 80158d2:	2101      	movs	r1, #1
 80158d4:	2000      	movs	r0, #0
 80158d6:	f7f4 fbbf 	bl	800a058 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80158da:	48b1      	ldr	r0, [pc, #708]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 80158dc:	f7fc f904 	bl	8011ae8 <DbgTraceGetFileName>
 80158e0:	4601      	mov	r1, r0
 80158e2:	f240 2377 	movw	r3, #631	@ 0x277
 80158e6:	4aaf      	ldr	r2, [pc, #700]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 80158e8:	48af      	ldr	r0, [pc, #700]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 80158ea:	f001 f9e1 	bl	8016cb0 <iprintf>
 80158ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	4619      	mov	r1, r3
 80158f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158f6:	785b      	ldrb	r3, [r3, #1]
 80158f8:	461a      	mov	r2, r3
 80158fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80158fc:	789b      	ldrb	r3, [r3, #2]
 80158fe:	9301      	str	r3, [sp, #4]
 8015900:	9200      	str	r2, [sp, #0]
 8015902:	460b      	mov	r3, r1
 8015904:	4aab      	ldr	r2, [pc, #684]	@ (8015bb4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x338>)
 8015906:	2101      	movs	r1, #1
 8015908:	2000      	movs	r0, #0
 801590a:	f7f4 fba5 	bl	800a058 <logApplication>
    switch (p_wireless_info->StackType)
 801590e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015910:	7a5b      	ldrb	r3, [r3, #9]
 8015912:	2b30      	cmp	r3, #48	@ 0x30
 8015914:	d002      	beq.n	801591c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xa0>
 8015916:	2b31      	cmp	r3, #49	@ 0x31
 8015918:	d010      	beq.n	801593c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xc0>
 801591a:	e01f      	b.n	801595c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xe0>
        APP_DBG("FW Type : FFD Zigbee stack");
 801591c:	48a0      	ldr	r0, [pc, #640]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 801591e:	f7fc f8e3 	bl	8011ae8 <DbgTraceGetFileName>
 8015922:	4601      	mov	r1, r0
 8015924:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 8015928:	4a9e      	ldr	r2, [pc, #632]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 801592a:	489f      	ldr	r0, [pc, #636]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 801592c:	f001 f9c0 	bl	8016cb0 <iprintf>
 8015930:	4aa1      	ldr	r2, [pc, #644]	@ (8015bb8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x33c>)
 8015932:	2101      	movs	r1, #1
 8015934:	2000      	movs	r0, #0
 8015936:	f7f4 fb8f 	bl	800a058 <logApplication>
        break;
 801593a:	e014      	b.n	8015966 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xea>
        APP_DBG("FW Type : RFD Zigbee stack");
 801593c:	4898      	ldr	r0, [pc, #608]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 801593e:	f7fc f8d3 	bl	8011ae8 <DbgTraceGetFileName>
 8015942:	4601      	mov	r1, r0
 8015944:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8015948:	4a96      	ldr	r2, [pc, #600]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 801594a:	4897      	ldr	r0, [pc, #604]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 801594c:	f001 f9b0 	bl	8016cb0 <iprintf>
 8015950:	4a9a      	ldr	r2, [pc, #616]	@ (8015bbc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x340>)
 8015952:	2101      	movs	r1, #1
 8015954:	2000      	movs	r0, #0
 8015956:	f7f4 fb7f 	bl	800a058 <logApplication>
        break;
 801595a:	e004      	b.n	8015966 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xea>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 801595c:	2101      	movs	r1, #1
 801595e:	2001      	movs	r0, #1
 8015960:	f7ff ff58 	bl	8015814 <APP_ZIGBEE_Error>
        break;
 8015964:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 8015966:	4b8e      	ldr	r3, [pc, #568]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015968:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *pdel = NULL;
 801596a:	2300      	movs	r3, #0
 801596c:	64bb      	str	r3, [r7, #72]	@ 0x48
      pdel = strchr(__PathProject__, '/');
 801596e:	212f      	movs	r1, #47	@ 0x2f
 8015970:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8015972:	f001 fbc1 	bl	80170f8 <strchr>
 8015976:	64b8      	str	r0, [r7, #72]	@ 0x48
    int index = (int)(pdel - __PathProject__);
 8015978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801597a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801597c:	1ad3      	subs	r3, r2, r3
 801597e:	647b      	str	r3, [r7, #68]	@ 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 8015980:	4887      	ldr	r0, [pc, #540]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015982:	f7fc f8b1 	bl	8011ae8 <DbgTraceGetFileName>
 8015986:	4601      	mov	r1, r0
 8015988:	f240 2396 	movw	r3, #662	@ 0x296
 801598c:	4a85      	ldr	r2, [pc, #532]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 801598e:	4886      	ldr	r0, [pc, #536]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015990:	f001 f98e 	bl	8016cb0 <iprintf>
 8015994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801599e:	4a88      	ldr	r2, [pc, #544]	@ (8015bc0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x344>)
 80159a0:	2101      	movs	r1, #1
 80159a2:	2000      	movs	r0, #0
 80159a4:	f7f4 fb58 	bl	800a058 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 80159a8:	487d      	ldr	r0, [pc, #500]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 80159aa:	f7fc f89d 	bl	8011ae8 <DbgTraceGetFileName>
 80159ae:	4601      	mov	r1, r0
 80159b0:	f240 2399 	movw	r3, #665	@ 0x299
 80159b4:	4a7b      	ldr	r2, [pc, #492]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 80159b6:	487c      	ldr	r0, [pc, #496]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 80159b8:	f001 f97a 	bl	8016cb0 <iprintf>
 80159bc:	230b      	movs	r3, #11
 80159be:	4a81      	ldr	r2, [pc, #516]	@ (8015bc4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x348>)
 80159c0:	2101      	movs	r1, #1
 80159c2:	2000      	movs	r0, #0
 80159c4:	f7f4 fb48 	bl	800a058 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 80159c8:	4875      	ldr	r0, [pc, #468]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 80159ca:	f7fc f88d 	bl	8011ae8 <DbgTraceGetFileName>
 80159ce:	4601      	mov	r1, r0
 80159d0:	f240 239b 	movw	r3, #667	@ 0x29b
 80159d4:	4a73      	ldr	r2, [pc, #460]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 80159d6:	4874      	ldr	r0, [pc, #464]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 80159d8:	f001 f96a 	bl	8016cb0 <iprintf>
 80159dc:	4b7a      	ldr	r3, [pc, #488]	@ (8015bc8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x34c>)
 80159de:	4a7b      	ldr	r2, [pc, #492]	@ (8015bcc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x350>)
 80159e0:	2101      	movs	r1, #1
 80159e2:	2000      	movs	r0, #0
 80159e4:	f7f4 fb38 	bl	800a058 <logApplication>
    Z09_LL_string[0] = 0;
 80159e8:	2300      	movs	r3, #0
 80159ea:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 80159ec:	2300      	movs	r3, #0
 80159ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80159f0:	e010      	b.n	8015a14 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x198>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 80159f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80159f4:	4613      	mov	r3, r2
 80159f6:	005b      	lsls	r3, r3, #1
 80159f8:	4413      	add	r3, r2
 80159fa:	463a      	mov	r2, r7
 80159fc:	18d0      	adds	r0, r2, r3
 80159fe:	4a72      	ldr	r2, [pc, #456]	@ (8015bc8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x34c>)
 8015a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a02:	4413      	add	r3, r2
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	461a      	mov	r2, r3
 8015a08:	4971      	ldr	r1, [pc, #452]	@ (8015bd0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x354>)
 8015a0a:	f001 fa75 	bl	8016ef8 <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 8015a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a10:	3301      	adds	r3, #1
 8015a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8015a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015a16:	2b0f      	cmp	r3, #15
 8015a18:	d9eb      	bls.n	80159f2 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x176>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 8015a1a:	4861      	ldr	r0, [pc, #388]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015a1c:	f7fc f864 	bl	8011ae8 <DbgTraceGetFileName>
 8015a20:	4601      	mov	r1, r0
 8015a22:	f44f 7329 	mov.w	r3, #676	@ 0x2a4
 8015a26:	4a5f      	ldr	r2, [pc, #380]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015a28:	485f      	ldr	r0, [pc, #380]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015a2a:	f001 f941 	bl	8016cb0 <iprintf>
 8015a2e:	463b      	mov	r3, r7
 8015a30:	4a68      	ldr	r2, [pc, #416]	@ (8015bd4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x358>)
 8015a32:	2101      	movs	r1, #1
 8015a34:	2000      	movs	r0, #0
 8015a36:	f7f4 fb0f 	bl	800a058 <logApplication>
    APP_DBG("Clusters allocated are:");
 8015a3a:	4859      	ldr	r0, [pc, #356]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015a3c:	f7fc f854 	bl	8011ae8 <DbgTraceGetFileName>
 8015a40:	4601      	mov	r1, r0
 8015a42:	f240 23a6 	movw	r3, #678	@ 0x2a6
 8015a46:	4a57      	ldr	r2, [pc, #348]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015a48:	4857      	ldr	r0, [pc, #348]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015a4a:	f001 f931 	bl	8016cb0 <iprintf>
 8015a4e:	4a62      	ldr	r2, [pc, #392]	@ (8015bd8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x35c>)
 8015a50:	2101      	movs	r1, #1
 8015a52:	2000      	movs	r0, #0
 8015a54:	f7f4 fb00 	bl	800a058 <logApplication>
    APP_DBG("basic Client on Endpoint %d", SW1_ENDPOINT);
 8015a58:	4851      	ldr	r0, [pc, #324]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015a5a:	f7fc f845 	bl	8011ae8 <DbgTraceGetFileName>
 8015a5e:	4601      	mov	r1, r0
 8015a60:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8015a64:	4a4f      	ldr	r2, [pc, #316]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015a66:	4850      	ldr	r0, [pc, #320]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015a68:	f001 f922 	bl	8016cb0 <iprintf>
 8015a6c:	2314      	movs	r3, #20
 8015a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8015bdc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x360>)
 8015a70:	2101      	movs	r1, #1
 8015a72:	2000      	movs	r0, #0
 8015a74:	f7f4 faf0 	bl	800a058 <logApplication>
    APP_DBG("onOff Server on Endpoint %d", SW1_ENDPOINT);
 8015a78:	4849      	ldr	r0, [pc, #292]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015a7a:	f7fc f835 	bl	8011ae8 <DbgTraceGetFileName>
 8015a7e:	4601      	mov	r1, r0
 8015a80:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8015a84:	4a47      	ldr	r2, [pc, #284]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015a86:	4848      	ldr	r0, [pc, #288]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015a88:	f001 f912 	bl	8016cb0 <iprintf>
 8015a8c:	2314      	movs	r3, #20
 8015a8e:	4a54      	ldr	r2, [pc, #336]	@ (8015be0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x364>)
 8015a90:	2101      	movs	r1, #1
 8015a92:	2000      	movs	r0, #0
 8015a94:	f7f4 fae0 	bl	800a058 <logApplication>
    APP_DBG("colorControl Server on Endpoint %d", SW1_ENDPOINT);
 8015a98:	4841      	ldr	r0, [pc, #260]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015a9a:	f7fc f825 	bl	8011ae8 <DbgTraceGetFileName>
 8015a9e:	4601      	mov	r1, r0
 8015aa0:	f240 23a9 	movw	r3, #681	@ 0x2a9
 8015aa4:	4a3f      	ldr	r2, [pc, #252]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015aa6:	4840      	ldr	r0, [pc, #256]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015aa8:	f001 f902 	bl	8016cb0 <iprintf>
 8015aac:	2314      	movs	r3, #20
 8015aae:	4a4d      	ldr	r2, [pc, #308]	@ (8015be4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x368>)
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	2000      	movs	r0, #0
 8015ab4:	f7f4 fad0 	bl	800a058 <logApplication>
    APP_DBG("levelControl Server on Endpoint %d", SW1_ENDPOINT);
 8015ab8:	4839      	ldr	r0, [pc, #228]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015aba:	f7fc f815 	bl	8011ae8 <DbgTraceGetFileName>
 8015abe:	4601      	mov	r1, r0
 8015ac0:	f240 23aa 	movw	r3, #682	@ 0x2aa
 8015ac4:	4a37      	ldr	r2, [pc, #220]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015ac6:	4838      	ldr	r0, [pc, #224]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015ac8:	f001 f8f2 	bl	8016cb0 <iprintf>
 8015acc:	2314      	movs	r3, #20
 8015ace:	4a46      	ldr	r2, [pc, #280]	@ (8015be8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x36c>)
 8015ad0:	2101      	movs	r1, #1
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	f7f4 fac0 	bl	800a058 <logApplication>
    APP_DBG("basic Client on Endpoint %d", SW2_ENDPOINT);
 8015ad8:	4831      	ldr	r0, [pc, #196]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015ada:	f7fc f805 	bl	8011ae8 <DbgTraceGetFileName>
 8015ade:	4601      	mov	r1, r0
 8015ae0:	f240 23ab 	movw	r3, #683	@ 0x2ab
 8015ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015ae6:	4830      	ldr	r0, [pc, #192]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015ae8:	f001 f8e2 	bl	8016cb0 <iprintf>
 8015aec:	2315      	movs	r3, #21
 8015aee:	4a3b      	ldr	r2, [pc, #236]	@ (8015bdc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x360>)
 8015af0:	2101      	movs	r1, #1
 8015af2:	2000      	movs	r0, #0
 8015af4:	f7f4 fab0 	bl	800a058 <logApplication>
    APP_DBG("temperature_meas Server on Endpoint %d", SW2_ENDPOINT);
 8015af8:	4829      	ldr	r0, [pc, #164]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015afa:	f7fb fff5 	bl	8011ae8 <DbgTraceGetFileName>
 8015afe:	4601      	mov	r1, r0
 8015b00:	f44f 732b 	mov.w	r3, #684	@ 0x2ac
 8015b04:	4a27      	ldr	r2, [pc, #156]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015b06:	4828      	ldr	r0, [pc, #160]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015b08:	f001 f8d2 	bl	8016cb0 <iprintf>
 8015b0c:	2315      	movs	r3, #21
 8015b0e:	4a37      	ldr	r2, [pc, #220]	@ (8015bec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x370>)
 8015b10:	2101      	movs	r1, #1
 8015b12:	2000      	movs	r0, #0
 8015b14:	f7f4 faa0 	bl	800a058 <logApplication>
    APP_DBG("water_content Server on Endpoint %d", SW2_ENDPOINT);
 8015b18:	4821      	ldr	r0, [pc, #132]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015b1a:	f7fb ffe5 	bl	8011ae8 <DbgTraceGetFileName>
 8015b1e:	4601      	mov	r1, r0
 8015b20:	f240 23ad 	movw	r3, #685	@ 0x2ad
 8015b24:	4a1f      	ldr	r2, [pc, #124]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015b26:	4820      	ldr	r0, [pc, #128]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015b28:	f001 f8c2 	bl	8016cb0 <iprintf>
 8015b2c:	2315      	movs	r3, #21
 8015b2e:	4a30      	ldr	r2, [pc, #192]	@ (8015bf0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x374>)
 8015b30:	2101      	movs	r1, #1
 8015b32:	2000      	movs	r0, #0
 8015b34:	f7f4 fa90 	bl	800a058 <logApplication>
    APP_DBG("water_content Server on Endpoint %d", SW3_ENDPOINT);
 8015b38:	4819      	ldr	r0, [pc, #100]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015b3a:	f7fb ffd5 	bl	8011ae8 <DbgTraceGetFileName>
 8015b3e:	4601      	mov	r1, r0
 8015b40:	f240 23ae 	movw	r3, #686	@ 0x2ae
 8015b44:	4a17      	ldr	r2, [pc, #92]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015b46:	4818      	ldr	r0, [pc, #96]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015b48:	f001 f8b2 	bl	8016cb0 <iprintf>
 8015b4c:	2316      	movs	r3, #22
 8015b4e:	4a28      	ldr	r2, [pc, #160]	@ (8015bf0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x374>)
 8015b50:	2101      	movs	r1, #1
 8015b52:	2000      	movs	r0, #0
 8015b54:	f7f4 fa80 	bl	800a058 <logApplication>
    APP_DBG("water_content Server on Endpoint %d", SW4_ENDPOINT);
 8015b58:	4811      	ldr	r0, [pc, #68]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015b5a:	f7fb ffc5 	bl	8011ae8 <DbgTraceGetFileName>
 8015b5e:	4601      	mov	r1, r0
 8015b60:	f240 23af 	movw	r3, #687	@ 0x2af
 8015b64:	4a0f      	ldr	r2, [pc, #60]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015b66:	4810      	ldr	r0, [pc, #64]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015b68:	f001 f8a2 	bl	8016cb0 <iprintf>
 8015b6c:	2317      	movs	r3, #23
 8015b6e:	4a20      	ldr	r2, [pc, #128]	@ (8015bf0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x374>)
 8015b70:	2101      	movs	r1, #1
 8015b72:	2000      	movs	r0, #0
 8015b74:	f7f4 fa70 	bl	800a058 <logApplication>
    APP_DBG("**********************************************************");
 8015b78:	4809      	ldr	r0, [pc, #36]	@ (8015ba0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x324>)
 8015b7a:	f7fb ffb5 	bl	8011ae8 <DbgTraceGetFileName>
 8015b7e:	4601      	mov	r1, r0
 8015b80:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8015b84:	4a07      	ldr	r2, [pc, #28]	@ (8015ba4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x328>)
 8015b86:	4808      	ldr	r0, [pc, #32]	@ (8015ba8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x32c>)
 8015b88:	f001 f892 	bl	8016cb0 <iprintf>
 8015b8c:	4a07      	ldr	r2, [pc, #28]	@ (8015bac <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x330>)
 8015b8e:	2101      	movs	r1, #1
 8015b90:	2000      	movs	r0, #0
 8015b92:	f7f4 fa61 	bl	800a058 <logApplication>
}
 8015b96:	bf00      	nop
 8015b98:	3758      	adds	r7, #88	@ 0x58
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	08018fe4 	.word	0x08018fe4
 8015ba4:	08019e40 	.word	0x08019e40
 8015ba8:	08019004 	.word	0x08019004
 8015bac:	08019310 	.word	0x08019310
 8015bb0:	0801934c 	.word	0x0801934c
 8015bb4:	08019368 	.word	0x08019368
 8015bb8:	08019380 	.word	0x08019380
 8015bbc:	0801939c 	.word	0x0801939c
 8015bc0:	080193b8 	.word	0x080193b8
 8015bc4:	080193d4 	.word	0x080193d4
 8015bc8:	08019afc 	.word	0x08019afc
 8015bcc:	080193e8 	.word	0x080193e8
 8015bd0:	080193f8 	.word	0x080193f8
 8015bd4:	08019400 	.word	0x08019400
 8015bd8:	08019414 	.word	0x08019414
 8015bdc:	0801942c 	.word	0x0801942c
 8015be0:	08019448 	.word	0x08019448
 8015be4:	08019464 	.word	0x08019464
 8015be8:	08019488 	.word	0x08019488
 8015bec:	080194ac 	.word	0x080194ac
 8015bf0:	080194d4 	.word	0x080194d4

08015bf4 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 8015bfc:	4a04      	ldr	r2, [pc, #16]	@ (8015c10 <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6013      	str	r3, [r2, #0]
}
 8015c02:	bf00      	nop
 8015c04:	370c      	adds	r7, #12
 8015c06:	46bd      	mov	sp, r7
 8015c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0c:	4770      	bx	lr
 8015c0e:	bf00      	nop
 8015c10:	20000780 	.word	0x20000780

08015c14 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 8015c14:	b480      	push	{r7}
 8015c16:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8015c18:	4b03      	ldr	r3, [pc, #12]	@ (8015c28 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	330c      	adds	r3, #12
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	46bd      	mov	sp, r7
 8015c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c26:	4770      	bx	lr
 8015c28:	20000780 	.word	0x20000780

08015c2c <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 8015c30:	4b03      	ldr	r3, [pc, #12]	@ (8015c40 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	330b      	adds	r3, #11
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3e:	4770      	bx	lr
 8015c40:	20000780 	.word	0x20000780

08015c44 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 8015c44:	b480      	push	{r7}
 8015c46:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8015c48:	4b03      	ldr	r3, [pc, #12]	@ (8015c58 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	330b      	adds	r3, #11
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	46bd      	mov	sp, r7
 8015c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c56:	4770      	bx	lr
 8015c58:	20000784 	.word	0x20000784

08015c5c <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 8015c60:	4b03      	ldr	r3, [pc, #12]	@ (8015c70 <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	330b      	adds	r3, #11
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6e:	4770      	bx	lr
 8015c70:	20000788 	.word	0x20000788

08015c74 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8015c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8015cb8 <ZIGBEE_CmdTransfer+0x44>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	330c      	adds	r3, #12
 8015c80:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8015c82:	4b0d      	ldr	r3, [pc, #52]	@ (8015cb8 <ZIGBEE_CmdTransfer+0x44>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	2200      	movs	r2, #0
 8015c88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8015c8c:	725a      	strb	r2, [r3, #9]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	f042 0202 	orr.w	r2, r2, #2
 8015c94:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	3302      	adds	r3, #2
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	4b06      	ldr	r3, [pc, #24]	@ (8015cb8 <ZIGBEE_CmdTransfer+0x44>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	0092      	lsls	r2, r2, #2
 8015ca4:	b2d2      	uxtb	r2, r2
 8015ca6:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 8015ca8:	f7fc fb3a 	bl	8012320 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8015cac:	f000 f827 	bl	8015cfe <Wait_Getting_Ack_From_M0>
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	20000780 	.word	0x20000780

08015cbc <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8015cc4:	f000 f822 	bl	8015d0c <Receive_Ack_From_M0>
}
 8015cc8:	bf00      	nop
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8015cd8:	4a04      	ldr	r2, [pc, #16]	@ (8015cec <TL_ZIGBEE_NotReceived+0x1c>)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8015cde:	f000 f81d 	bl	8015d1c <Receive_Notification_From_M0>
}
 8015ce2:	bf00      	nop
 8015ce4:	3708      	adds	r7, #8
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	20000784 	.word	0x20000784

08015cf0 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8015cf4:	2004      	movs	r0, #4
 8015cf6:	f000 fd9b 	bl	8016830 <UTIL_SEQ_WaitEvt>
}
 8015cfa:	bf00      	nop
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 8015cfe:	b580      	push	{r7, lr}
 8015d00:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8015d02:	2002      	movs	r0, #2
 8015d04:	f000 fd94 	bl	8016830 <UTIL_SEQ_WaitEvt>
}
 8015d08:	bf00      	nop
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8015d10:	2002      	movs	r0, #2
 8015d12:	f000 fd6d 	bl	80167f0 <UTIL_SEQ_SetEvt>
}
 8015d16:	bf00      	nop
 8015d18:	bd80      	pop	{r7, pc}
	...

08015d1c <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 8015d20:	4b05      	ldr	r3, [pc, #20]	@ (8015d38 <Receive_Notification_From_M0+0x1c>)
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	3301      	adds	r3, #1
 8015d26:	4a04      	ldr	r2, [pc, #16]	@ (8015d38 <Receive_Notification_From_M0+0x1c>)
 8015d28:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8015d2a:	2100      	movs	r1, #0
 8015d2c:	2001      	movs	r0, #1
 8015d2e:	f000 fd33 	bl	8016798 <UTIL_SEQ_SetTask>
}
 8015d32:	bf00      	nop
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	2000078c 	.word	0x2000078c

08015d3c <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8015d44:	4a07      	ldr	r2, [pc, #28]	@ (8015d64 <TL_ZIGBEE_M0RequestReceived+0x28>)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 8015d4a:	4b07      	ldr	r3, [pc, #28]	@ (8015d68 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	3301      	adds	r3, #1
 8015d50:	4a05      	ldr	r2, [pc, #20]	@ (8015d68 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8015d52:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8015d54:	2100      	movs	r1, #0
 8015d56:	2002      	movs	r0, #2
 8015d58:	f000 fd1e 	bl	8016798 <UTIL_SEQ_SetTask>
}
 8015d5c:	bf00      	nop
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	20000788 	.word	0x20000788
 8015d68:	20000790 	.word	0x20000790

08015d6c <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 8015d70:	4b06      	ldr	r3, [pc, #24]	@ (8015d8c <APP_ZIGBEE_TL_INIT+0x20>)
 8015d72:	4a07      	ldr	r2, [pc, #28]	@ (8015d90 <APP_ZIGBEE_TL_INIT+0x24>)
 8015d74:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 8015d76:	4b05      	ldr	r3, [pc, #20]	@ (8015d8c <APP_ZIGBEE_TL_INIT+0x20>)
 8015d78:	4a06      	ldr	r2, [pc, #24]	@ (8015d94 <APP_ZIGBEE_TL_INIT+0x28>)
 8015d7a:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 8015d7c:	4b03      	ldr	r3, [pc, #12]	@ (8015d8c <APP_ZIGBEE_TL_INIT+0x20>)
 8015d7e:	4a06      	ldr	r2, [pc, #24]	@ (8015d98 <APP_ZIGBEE_TL_INIT+0x2c>)
 8015d80:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 8015d82:	4802      	ldr	r0, [pc, #8]	@ (8015d8c <APP_ZIGBEE_TL_INIT+0x20>)
 8015d84:	f7fc fab0 	bl	80122e8 <TL_ZIGBEE_Init>
}
 8015d88:	bf00      	nop
 8015d8a:	bd80      	pop	{r7, pc}
 8015d8c:	200300d8 	.word	0x200300d8
 8015d90:	20030838 	.word	0x20030838
 8015d94:	20030944 	.word	0x20030944
 8015d98:	20030a50 	.word	0x20030a50

08015d9c <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 8015da0:	4b05      	ldr	r3, [pc, #20]	@ (8015db8 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d004      	beq.n	8015db2 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 8015da8:	4b03      	ldr	r3, [pc, #12]	@ (8015db8 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 8015daa:	2200      	movs	r2, #0
 8015dac:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 8015dae:	f7fd fc85 	bl	80136bc <Zigbee_CallBackProcessing>
  }
}
 8015db2:	bf00      	nop
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	bf00      	nop
 8015db8:	2000078c 	.word	0x2000078c

08015dbc <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	af00      	add	r7, sp, #0
  if (CptReceiveRequestFromM0 != 0)
 8015dc0:	4b05      	ldr	r3, [pc, #20]	@ (8015dd8 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d004      	beq.n	8015dd2 <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
  {
    CptReceiveRequestFromM0 = 0;
 8015dc8:	4b03      	ldr	r3, [pc, #12]	@ (8015dd8 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 8015dca:	2200      	movs	r2, #0
 8015dcc:	601a      	str	r2, [r3, #0]
    Zigbee_M0RequestProcessing();
 8015dce:	f7fe fffb 	bl	8014dc8 <Zigbee_M0RequestProcessing>
  }
}
 8015dd2:	bf00      	nop
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	20000790 	.word	0x20000790

08015ddc <APP_ZIGBEE_cyclic_reporting>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

void APP_ZIGBEE_cyclic_reporting(struct APP_ZIGBEE_cyclic_data *data){
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
  ZbZclAttrIntegerWrite(zigbee_app_info.temperature_meas_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->temperature);
 8015de4:	4b11      	ldr	r3, [pc, #68]	@ (8015e2c <APP_ZIGBEE_cyclic_reporting+0x50>)
 8015de6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dee:	2100      	movs	r1, #0
 8015df0:	f7eb fe37 	bl	8001a62 <ZbZclAttrIntegerWrite>
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_2, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->humidity);
 8015df4:	4b0d      	ldr	r3, [pc, #52]	@ (8015e2c <APP_ZIGBEE_cyclic_reporting+0x50>)
 8015df6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015dfe:	2100      	movs	r1, #0
 8015e00:	f7eb fe2f 	bl	8001a62 <ZbZclAttrIntegerWrite>
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_3, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->soil_moisture_1);
 8015e04:	4b09      	ldr	r3, [pc, #36]	@ (8015e2c <APP_ZIGBEE_cyclic_reporting+0x50>)
 8015e06:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015e0e:	2100      	movs	r1, #0
 8015e10:	f7eb fe27 	bl	8001a62 <ZbZclAttrIntegerWrite>
  ZbZclAttrIntegerWrite(zigbee_app_info.water_content_server_4, ZCL_WC_MEAS_ATTR_MEAS_VAL, data->soil_moisture_2);
 8015e14:	4b05      	ldr	r3, [pc, #20]	@ (8015e2c <APP_ZIGBEE_cyclic_reporting+0x50>)
 8015e16:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015e1e:	2100      	movs	r1, #0
 8015e20:	f7eb fe1f 	bl	8001a62 <ZbZclAttrIntegerWrite>
}
 8015e24:	bf00      	nop
 8015e26:	3708      	adds	r7, #8
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	20000794 	.word	0x20000794

08015e30 <APP_ZIGBEE_ConfigBasicServer>:
 * @brief  Configure Zigbee Basic Server Cluster
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_ConfigBasicServer(void)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	af00      	add	r7, sp, #0
  static struct ZbZclBasicServerDefaults   stBasicServerDefaults;

  /* Initialize Basic Server Cluster 'defaults' information */
  memset( &stBasicServerDefaults, 0x00, sizeof(stBasicServerDefaults) );
 8015e34:	2268      	movs	r2, #104	@ 0x68
 8015e36:	2100      	movs	r1, #0
 8015e38:	481d      	ldr	r0, [pc, #116]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e3a:	f001 f955 	bl	80170e8 <memset>

  stBasicServerDefaults.mfr_name[0] = sizeof( APP_ZIGBEE_MFR_NAME );
 8015e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e40:	2209      	movs	r2, #9
 8015e42:	70da      	strb	r2, [r3, #3]
  memcpy( &stBasicServerDefaults.mfr_name[1], APP_ZIGBEE_MFR_NAME, sizeof( APP_ZIGBEE_MFR_NAME ) );
 8015e44:	2209      	movs	r2, #9
 8015e46:	491b      	ldr	r1, [pc, #108]	@ (8015eb4 <APP_ZIGBEE_ConfigBasicServer+0x84>)
 8015e48:	481b      	ldr	r0, [pc, #108]	@ (8015eb8 <APP_ZIGBEE_ConfigBasicServer+0x88>)
 8015e4a:	f001 f9fe 	bl	801724a <memcpy>

  stBasicServerDefaults.model_name[0] = sizeof( APP_ZIGBEE_CHIP_NAME );
 8015e4e:	4b18      	ldr	r3, [pc, #96]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e50:	220b      	movs	r2, #11
 8015e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  memcpy( &stBasicServerDefaults.model_name[1], APP_ZIGBEE_CHIP_NAME, sizeof( APP_ZIGBEE_CHIP_NAME ) );
 8015e56:	220b      	movs	r2, #11
 8015e58:	4918      	ldr	r1, [pc, #96]	@ (8015ebc <APP_ZIGBEE_ConfigBasicServer+0x8c>)
 8015e5a:	4819      	ldr	r0, [pc, #100]	@ (8015ec0 <APP_ZIGBEE_ConfigBasicServer+0x90>)
 8015e5c:	f001 f9f5 	bl	801724a <memcpy>

  stBasicServerDefaults.date_code[0] = sizeof( APP_ZIGBEE_APP_DATE_CODE );
 8015e60:	4b13      	ldr	r3, [pc, #76]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e62:	2209      	movs	r2, #9
 8015e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  memcpy( &stBasicServerDefaults.date_code[1], APP_ZIGBEE_APP_DATE_CODE, sizeof( APP_ZIGBEE_APP_DATE_CODE ) );
 8015e68:	2209      	movs	r2, #9
 8015e6a:	4916      	ldr	r1, [pc, #88]	@ (8015ec4 <APP_ZIGBEE_ConfigBasicServer+0x94>)
 8015e6c:	4816      	ldr	r0, [pc, #88]	@ (8015ec8 <APP_ZIGBEE_ConfigBasicServer+0x98>)
 8015e6e:	f001 f9ec 	bl	801724a <memcpy>

  stBasicServerDefaults.sw_build_id[0] = sizeof( APP_ZIGBEE_APP_BUILD_ID );
 8015e72:	4b0f      	ldr	r3, [pc, #60]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e74:	2209      	movs	r2, #9
 8015e76:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
  memcpy( &stBasicServerDefaults.sw_build_id[1], APP_ZIGBEE_APP_BUILD_ID, sizeof( APP_ZIGBEE_APP_BUILD_ID ) );
 8015e7a:	2209      	movs	r2, #9
 8015e7c:	4913      	ldr	r1, [pc, #76]	@ (8015ecc <APP_ZIGBEE_ConfigBasicServer+0x9c>)
 8015e7e:	4814      	ldr	r0, [pc, #80]	@ (8015ed0 <APP_ZIGBEE_ConfigBasicServer+0xa0>)
 8015e80:	f001 f9e3 	bl	801724a <memcpy>

  /* Version are on 8 bits : 3 bits for Major version and 5 bits for Minor version */
  stBasicServerDefaults.app_version = (uint8_t)( ( APP_ZIGBEE_APP_VERSION & 0x70u ) << 1u ) | ( APP_ZIGBEE_APP_VERSION & 0x0Fu );
 8015e84:	4b0a      	ldr	r3, [pc, #40]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e86:	2220      	movs	r2, #32
 8015e88:	701a      	strb	r2, [r3, #0]
  stBasicServerDefaults.stack_version = (uint8_t)( ( APP_ZIGBEE_STACK_VERSION & 0x70u ) << 1u ) | ( APP_ZIGBEE_STACK_VERSION & 0x0Fu );
 8015e8a:	4b09      	ldr	r3, [pc, #36]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e8c:	2220      	movs	r2, #32
 8015e8e:	705a      	strb	r2, [r3, #1]
  stBasicServerDefaults.hw_version = (uint8_t)( ( APP_ZIGBEE_CHIP_VERSION & 0x70u ) << 1u ) | ( APP_ZIGBEE_CHIP_VERSION & 0x0Fu );
 8015e90:	4b07      	ldr	r3, [pc, #28]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e92:	2220      	movs	r2, #32
 8015e94:	709a      	strb	r2, [r3, #2]

  stBasicServerDefaults.power_source = APP_ZIGBEE_BOARD_POWER;
 8015e96:	4b06      	ldr	r3, [pc, #24]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015e98:	2200      	movs	r2, #0
 8015e9a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56

  /* Configure default Basic Server */
  ZbZclBasicServerConfigDefaults( zigbee_app_info.zb , &stBasicServerDefaults );
 8015e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed4 <APP_ZIGBEE_ConfigBasicServer+0xa4>)
 8015ea0:	685b      	ldr	r3, [r3, #4]
 8015ea2:	4903      	ldr	r1, [pc, #12]	@ (8015eb0 <APP_ZIGBEE_ConfigBasicServer+0x80>)
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7fd f95b 	bl	8013160 <ZbZclBasicServerConfigDefaults>
}
 8015eaa:	bf00      	nop
 8015eac:	bd80      	pop	{r7, pc}
 8015eae:	bf00      	nop
 8015eb0:	200007d0 	.word	0x200007d0
 8015eb4:	080194f8 	.word	0x080194f8
 8015eb8:	200007d4 	.word	0x200007d4
 8015ebc:	08019504 	.word	0x08019504
 8015ec0:	200007f5 	.word	0x200007f5
 8015ec4:	08019510 	.word	0x08019510
 8015ec8:	20000816 	.word	0x20000816
 8015ecc:	0801951c 	.word	0x0801951c
 8015ed0:	20000828 	.word	0x20000828
 8015ed4:	20000794 	.word	0x20000794

08015ed8 <LL_PWR_EnableBootC2>:
{
 8015ed8:	b480      	push	{r7}
 8015eda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8015edc:	4b05      	ldr	r3, [pc, #20]	@ (8015ef4 <LL_PWR_EnableBootC2+0x1c>)
 8015ede:	68db      	ldr	r3, [r3, #12]
 8015ee0:	4a04      	ldr	r2, [pc, #16]	@ (8015ef4 <LL_PWR_EnableBootC2+0x1c>)
 8015ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015ee6:	60d3      	str	r3, [r2, #12]
}
 8015ee8:	bf00      	nop
 8015eea:	46bd      	mov	sp, r7
 8015eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef0:	4770      	bx	lr
 8015ef2:	bf00      	nop
 8015ef4:	58000400 	.word	0x58000400

08015ef8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8015ef8:	b480      	push	{r7}
 8015efa:	b083      	sub	sp, #12
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8015f00:	4b06      	ldr	r3, [pc, #24]	@ (8015f1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015f02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8015f06:	4905      	ldr	r1, [pc, #20]	@ (8015f1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	4313      	orrs	r3, r2
 8015f0c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8015f10:	bf00      	nop
 8015f12:	370c      	adds	r7, #12
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr
 8015f1c:	58000800 	.word	0x58000800

08015f20 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8015f20:	b480      	push	{r7}
 8015f22:	b083      	sub	sp, #12
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8015f28:	4b05      	ldr	r3, [pc, #20]	@ (8015f40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015f2a:	6a1a      	ldr	r2, [r3, #32]
 8015f2c:	4904      	ldr	r1, [pc, #16]	@ (8015f40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	4313      	orrs	r3, r2
 8015f32:	620b      	str	r3, [r1, #32]
}
 8015f34:	bf00      	nop
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr
 8015f40:	58000800 	.word	0x58000800

08015f44 <LL_AHB3_GRP1_EnableClock>:
{
 8015f44:	b480      	push	{r7}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8015f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	4313      	orrs	r3, r2
 8015f5a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8015f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	4013      	ands	r3, r2
 8015f66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015f68:	68fb      	ldr	r3, [r7, #12]
}
 8015f6a:	bf00      	nop
 8015f6c:	3714      	adds	r7, #20
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f74:	4770      	bx	lr

08015f76 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8015f76:	b480      	push	{r7}
 8015f78:	b085      	sub	sp, #20
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8015f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f82:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8015f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4313      	orrs	r3, r2
 8015f8e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8015f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015f96:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	4013      	ands	r3, r2
 8015f9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
}
 8015fa2:	bf00      	nop
 8015fa4:	3714      	adds	r7, #20
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr

08015fae <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8015fae:	b480      	push	{r7}
 8015fb0:	b083      	sub	sp, #12
 8015fb2:	af00      	add	r7, sp, #0
 8015fb4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	601a      	str	r2, [r3, #0]
}
 8015fc2:	bf00      	nop
 8015fc4:	370c      	adds	r7, #12
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr

08015fce <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8015fce:	b480      	push	{r7}
 8015fd0:	b083      	sub	sp, #12
 8015fd2:	af00      	add	r7, sp, #0
 8015fd4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	f043 0201 	orr.w	r2, r3, #1
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	601a      	str	r2, [r3, #0]
}
 8015fe2:	bf00      	nop
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8015fee:	b480      	push	{r7}
 8015ff0:	b083      	sub	sp, #12
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	6078      	str	r0, [r7, #4]
 8015ff6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	685a      	ldr	r2, [r3, #4]
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	041b      	lsls	r3, r3, #16
 8016000:	43db      	mvns	r3, r3
 8016002:	401a      	ands	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	605a      	str	r2, [r3, #4]
}
 8016008:	bf00      	nop
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016012:	4770      	bx	lr

08016014 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
 801601c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	685a      	ldr	r2, [r3, #4]
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	041b      	lsls	r3, r3, #16
 8016026:	431a      	orrs	r2, r3
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	605a      	str	r2, [r3, #4]
}
 801602c:	bf00      	nop
 801602e:	370c      	adds	r7, #12
 8016030:	46bd      	mov	sp, r7
 8016032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016036:	4770      	bx	lr

08016038 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016038:	b480      	push	{r7}
 801603a:	b083      	sub	sp, #12
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	685a      	ldr	r2, [r3, #4]
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	43db      	mvns	r3, r3
 801604a:	401a      	ands	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	605a      	str	r2, [r3, #4]
}
 8016050:	bf00      	nop
 8016052:	370c      	adds	r7, #12
 8016054:	46bd      	mov	sp, r7
 8016056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605a:	4770      	bx	lr

0801605c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801605c:	b480      	push	{r7}
 801605e:	b083      	sub	sp, #12
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	685a      	ldr	r2, [r3, #4]
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	431a      	orrs	r2, r3
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	605a      	str	r2, [r3, #4]
}
 8016072:	bf00      	nop
 8016074:	370c      	adds	r7, #12
 8016076:	46bd      	mov	sp, r7
 8016078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607c:	4770      	bx	lr

0801607e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801607e:	b480      	push	{r7}
 8016080:	b083      	sub	sp, #12
 8016082:	af00      	add	r7, sp, #0
 8016084:	6078      	str	r0, [r7, #4]
 8016086:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	683a      	ldr	r2, [r7, #0]
 801608c:	609a      	str	r2, [r3, #8]
}
 801608e:	bf00      	nop
 8016090:	370c      	adds	r7, #12
 8016092:	46bd      	mov	sp, r7
 8016094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016098:	4770      	bx	lr

0801609a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801609a:	b480      	push	{r7}
 801609c:	b083      	sub	sp, #12
 801609e:	af00      	add	r7, sp, #0
 80160a0:	6078      	str	r0, [r7, #4]
 80160a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	041a      	lsls	r2, r3, #16
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	609a      	str	r2, [r3, #8]
}
 80160ac:	bf00      	nop
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr

080160b8 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80160b8:	b480      	push	{r7}
 80160ba:	b083      	sub	sp, #12
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	68da      	ldr	r2, [r3, #12]
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	4013      	ands	r3, r2
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d101      	bne.n	80160d4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80160d0:	2301      	movs	r3, #1
 80160d2:	e000      	b.n	80160d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	370c      	adds	r7, #12
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr

080160e2 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80160e2:	b480      	push	{r7}
 80160e4:	b083      	sub	sp, #12
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	6078      	str	r0, [r7, #4]
 80160ea:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	69da      	ldr	r2, [r3, #28]
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	4013      	ands	r3, r2
 80160f4:	683a      	ldr	r2, [r7, #0]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d101      	bne.n	80160fe <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80160fa:	2301      	movs	r3, #1
 80160fc:	e000      	b.n	8016100 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80160fe:	2300      	movs	r3, #0
}
 8016100:	4618      	mov	r0, r3
 8016102:	370c      	adds	r7, #12
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr

0801610c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801610c:	b580      	push	{r7, lr}
 801610e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8016110:	2102      	movs	r1, #2
 8016112:	4828      	ldr	r0, [pc, #160]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016114:	f7ff ffe5 	bl	80160e2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016118:	4603      	mov	r3, r0
 801611a:	2b00      	cmp	r3, #0
 801611c:	d008      	beq.n	8016130 <HW_IPCC_Rx_Handler+0x24>
 801611e:	4b25      	ldr	r3, [pc, #148]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	f003 0302 	and.w	r3, r3, #2
 8016126:	2b00      	cmp	r3, #0
 8016128:	d102      	bne.n	8016130 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801612a:	f000 f8f1 	bl	8016310 <HW_IPCC_SYS_EvtHandler>
 801612e:	e03e      	b.n	80161ae <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 8016130:	2104      	movs	r1, #4
 8016132:	4820      	ldr	r0, [pc, #128]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016134:	f7ff ffd5 	bl	80160e2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d008      	beq.n	8016150 <HW_IPCC_Rx_Handler+0x44>
 801613e:	4b1d      	ldr	r3, [pc, #116]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	f003 0304 	and.w	r3, r3, #4
 8016146:	2b00      	cmp	r3, #0
 8016148:	d102      	bne.n	8016150 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 801614a:	f000 f923 	bl	8016394 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 801614e:	e02e      	b.n	80161ae <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 8016150:	2110      	movs	r1, #16
 8016152:	4818      	ldr	r0, [pc, #96]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016154:	f7ff ffc5 	bl	80160e2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016158:	4603      	mov	r3, r0
 801615a:	2b00      	cmp	r3, #0
 801615c:	d008      	beq.n	8016170 <HW_IPCC_Rx_Handler+0x64>
 801615e:	4b15      	ldr	r3, [pc, #84]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	f003 0310 	and.w	r3, r3, #16
 8016166:	2b00      	cmp	r3, #0
 8016168:	d102      	bne.n	8016170 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 801616a:	f000 f91f 	bl	80163ac <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 801616e:	e01e      	b.n	80161ae <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8016170:	2101      	movs	r1, #1
 8016172:	4810      	ldr	r0, [pc, #64]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016174:	f7ff ffb5 	bl	80160e2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016178:	4603      	mov	r3, r0
 801617a:	2b00      	cmp	r3, #0
 801617c:	d008      	beq.n	8016190 <HW_IPCC_Rx_Handler+0x84>
 801617e:	4b0d      	ldr	r3, [pc, #52]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	f003 0301 	and.w	r3, r3, #1
 8016186:	2b00      	cmp	r3, #0
 8016188:	d102      	bne.n	8016190 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 801618a:	f000 f885 	bl	8016298 <HW_IPCC_BLE_EvtHandler>
 801618e:	e00e      	b.n	80161ae <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8016190:	2108      	movs	r1, #8
 8016192:	4808      	ldr	r0, [pc, #32]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 8016194:	f7ff ffa5 	bl	80160e2 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d008      	beq.n	80161b0 <HW_IPCC_Rx_Handler+0xa4>
 801619e:	4b05      	ldr	r3, [pc, #20]	@ (80161b4 <HW_IPCC_Rx_Handler+0xa8>)
 80161a0:	685b      	ldr	r3, [r3, #4]
 80161a2:	f003 0308 	and.w	r3, r3, #8
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d102      	bne.n	80161b0 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 80161aa:	f000 f959 	bl	8016460 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80161ae:	bf00      	nop
 80161b0:	bf00      	nop
}
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	58000c00 	.word	0x58000c00

080161b8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80161bc:	2102      	movs	r1, #2
 80161be:	4820      	ldr	r0, [pc, #128]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 80161c0:	f7ff ff7a 	bl	80160b8 <LL_C1_IPCC_IsActiveFlag_CHx>
 80161c4:	4603      	mov	r3, r0
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d107      	bne.n	80161da <HW_IPCC_Tx_Handler+0x22>
 80161ca:	4b1d      	ldr	r3, [pc, #116]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 80161cc:	685b      	ldr	r3, [r3, #4]
 80161ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d101      	bne.n	80161da <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80161d6:	f000 f88f 	bl	80162f8 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 80161da:	2104      	movs	r1, #4
 80161dc:	4818      	ldr	r0, [pc, #96]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 80161de:	f7ff ff6b 	bl	80160b8 <LL_C1_IPCC_IsActiveFlag_CHx>
 80161e2:	4603      	mov	r3, r0
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d108      	bne.n	80161fa <HW_IPCC_Tx_Handler+0x42>
 80161e8:	4b15      	ldr	r3, [pc, #84]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 80161ea:	685b      	ldr	r3, [r3, #4]
 80161ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d102      	bne.n	80161fa <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 80161f4:	f000 f8c2 	bl	801637c <HW_IPCC_ZIGBEE_CmdEvtHandler>
 80161f8:	e01e      	b.n	8016238 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80161fa:	2108      	movs	r1, #8
 80161fc:	4810      	ldr	r0, [pc, #64]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 80161fe:	f7ff ff5b 	bl	80160b8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8016202:	4603      	mov	r3, r0
 8016204:	2b00      	cmp	r3, #0
 8016206:	d108      	bne.n	801621a <HW_IPCC_Tx_Handler+0x62>
 8016208:	4b0d      	ldr	r3, [pc, #52]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8016210:	2b00      	cmp	r3, #0
 8016212:	d102      	bne.n	801621a <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8016214:	f000 f906 	bl	8016424 <HW_IPCC_MM_FreeBufHandler>
 8016218:	e00e      	b.n	8016238 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801621a:	2120      	movs	r1, #32
 801621c:	4808      	ldr	r0, [pc, #32]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 801621e:	f7ff ff4b 	bl	80160b8 <LL_C1_IPCC_IsActiveFlag_CHx>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	d108      	bne.n	801623a <HW_IPCC_Tx_Handler+0x82>
 8016228:	4b05      	ldr	r3, [pc, #20]	@ (8016240 <HW_IPCC_Tx_Handler+0x88>)
 801622a:	685b      	ldr	r3, [r3, #4]
 801622c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016230:	2b00      	cmp	r3, #0
 8016232:	d102      	bne.n	801623a <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8016234:	f000 f83c 	bl	80162b0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8016238:	bf00      	nop
 801623a:	bf00      	nop
}
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	58000c00 	.word	0x58000c00

08016244 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8016244:	b580      	push	{r7, lr}
 8016246:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8016248:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801624c:	f7ff fe93 	bl	8015f76 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8016250:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8016254:	f7ff fe64 	bl	8015f20 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8016258:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801625c:	f7ff fe4c 	bl	8015ef8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8016260:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8016262:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8016264:	f7ff fe38 	bl	8015ed8 <LL_PWR_EnableBootC2>

  return;
 8016268:	bf00      	nop
}
 801626a:	bd80      	pop	{r7, pc}

0801626c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801626c:	b580      	push	{r7, lr}
 801626e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8016270:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8016274:	f7ff fe66 	bl	8015f44 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8016278:	4806      	ldr	r0, [pc, #24]	@ (8016294 <HW_IPCC_Init+0x28>)
 801627a:	f7ff fea8 	bl	8015fce <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801627e:	4805      	ldr	r0, [pc, #20]	@ (8016294 <HW_IPCC_Init+0x28>)
 8016280:	f7ff fe95 	bl	8015fae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8016284:	202c      	movs	r0, #44	@ 0x2c
 8016286:	f7f6 f8ee 	bl	800c466 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801628a:	202d      	movs	r0, #45	@ 0x2d
 801628c:	f7f6 f8eb 	bl	800c466 <HAL_NVIC_EnableIRQ>

  return;
 8016290:	bf00      	nop
}
 8016292:	bd80      	pop	{r7, pc}
 8016294:	58000c00 	.word	0x58000c00

08016298 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801629c:	f7fb ff6c 	bl	8012178 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80162a0:	2101      	movs	r1, #1
 80162a2:	4802      	ldr	r0, [pc, #8]	@ (80162ac <HW_IPCC_BLE_EvtHandler+0x14>)
 80162a4:	f7ff feeb 	bl	801607e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80162a8:	bf00      	nop
}
 80162aa:	bd80      	pop	{r7, pc}
 80162ac:	58000c00 	.word	0x58000c00

080162b0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80162b4:	2120      	movs	r1, #32
 80162b6:	4803      	ldr	r0, [pc, #12]	@ (80162c4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80162b8:	f7ff feac 	bl	8016014 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80162bc:	f7fb ff8c 	bl	80121d8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80162c0:	bf00      	nop
}
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	58000c00 	.word	0x58000c00

080162c8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80162cc:	2102      	movs	r1, #2
 80162ce:	4802      	ldr	r0, [pc, #8]	@ (80162d8 <HW_IPCC_SYS_Init+0x10>)
 80162d0:	f7ff feb2 	bl	8016038 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80162d4:	bf00      	nop
}
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	58000c00 	.word	0x58000c00

080162dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80162e0:	2102      	movs	r1, #2
 80162e2:	4804      	ldr	r0, [pc, #16]	@ (80162f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80162e4:	f7ff fed9 	bl	801609a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80162e8:	2102      	movs	r1, #2
 80162ea:	4802      	ldr	r0, [pc, #8]	@ (80162f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80162ec:	f7ff fe7f 	bl	8015fee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80162f0:	bf00      	nop
}
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	58000c00 	.word	0x58000c00

080162f8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80162fc:	2102      	movs	r1, #2
 80162fe:	4803      	ldr	r0, [pc, #12]	@ (801630c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8016300:	f7ff fe88 	bl	8016014 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8016304:	f7fb ffb8 	bl	8012278 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8016308:	bf00      	nop
}
 801630a:	bd80      	pop	{r7, pc}
 801630c:	58000c00 	.word	0x58000c00

08016310 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8016310:	b580      	push	{r7, lr}
 8016312:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8016314:	f7fb ffc6 	bl	80122a4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8016318:	2102      	movs	r1, #2
 801631a:	4802      	ldr	r0, [pc, #8]	@ (8016324 <HW_IPCC_SYS_EvtHandler+0x14>)
 801631c:	f7ff feaf 	bl	801607e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8016320:	bf00      	nop
}
 8016322:	bd80      	pop	{r7, pc}
 8016324:	58000c00 	.word	0x58000c00

08016328 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 8016328:	b580      	push	{r7, lr}
 801632a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 801632c:	2104      	movs	r1, #4
 801632e:	4804      	ldr	r0, [pc, #16]	@ (8016340 <HW_IPCC_ZIGBEE_Init+0x18>)
 8016330:	f7ff fe82 	bl	8016038 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8016334:	2110      	movs	r1, #16
 8016336:	4802      	ldr	r0, [pc, #8]	@ (8016340 <HW_IPCC_ZIGBEE_Init+0x18>)
 8016338:	f7ff fe7e 	bl	8016038 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801633c:	bf00      	nop
}
 801633e:	bd80      	pop	{r7, pc}
 8016340:	58000c00 	.word	0x58000c00

08016344 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 8016344:	b580      	push	{r7, lr}
 8016346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8016348:	2104      	movs	r1, #4
 801634a:	4804      	ldr	r0, [pc, #16]	@ (801635c <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 801634c:	f7ff fea5 	bl	801609a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8016350:	2104      	movs	r1, #4
 8016352:	4802      	ldr	r0, [pc, #8]	@ (801635c <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8016354:	f7ff fe4b 	bl	8015fee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8016358:	bf00      	nop
}
 801635a:	bd80      	pop	{r7, pc}
 801635c:	58000c00 	.word	0x58000c00

08016360 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8016364:	2104      	movs	r1, #4
 8016366:	4804      	ldr	r0, [pc, #16]	@ (8016378 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8016368:	f7ff fe89 	bl	801607e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 801636c:	2104      	movs	r1, #4
 801636e:	4802      	ldr	r0, [pc, #8]	@ (8016378 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8016370:	f7ff fe62 	bl	8016038 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8016374:	bf00      	nop
}
 8016376:	bd80      	pop	{r7, pc}
 8016378:	58000c00 	.word	0x58000c00

0801637c <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 801637c:	b580      	push	{r7, lr}
 801637e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8016380:	2104      	movs	r1, #4
 8016382:	4803      	ldr	r0, [pc, #12]	@ (8016390 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8016384:	f7ff fe46 	bl	8016014 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8016388:	f7fb ffd8 	bl	801233c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 801638c:	bf00      	nop
}
 801638e:	bd80      	pop	{r7, pc}
 8016390:	58000c00 	.word	0x58000c00

08016394 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8016398:	2104      	movs	r1, #4
 801639a:	4803      	ldr	r0, [pc, #12]	@ (80163a8 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 801639c:	f7ff fe5e 	bl	801605c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 80163a0:	f7fb ffd8 	bl	8012354 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 80163a4:	bf00      	nop
}
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	58000c00 	.word	0x58000c00

080163ac <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80163b0:	2110      	movs	r1, #16
 80163b2:	4803      	ldr	r0, [pc, #12]	@ (80163c0 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 80163b4:	f7ff fe52 	bl	801605c <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 80163b8:	f7fb ffe6 	bl	8012388 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 80163bc:	bf00      	nop
}
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	58000c00 	.word	0x58000c00

080163c4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80163c8:	2110      	movs	r1, #16
 80163ca:	4804      	ldr	r0, [pc, #16]	@ (80163dc <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 80163cc:	f7ff fe57 	bl	801607e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80163d0:	2110      	movs	r1, #16
 80163d2:	4802      	ldr	r0, [pc, #8]	@ (80163dc <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 80163d4:	f7ff fe30 	bl	8016038 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80163d8:	bf00      	nop
}
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	58000c00 	.word	0x58000c00

080163e0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80163e8:	2108      	movs	r1, #8
 80163ea:	480c      	ldr	r0, [pc, #48]	@ (801641c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80163ec:	f7ff fe64 	bl	80160b8 <LL_C1_IPCC_IsActiveFlag_CHx>
 80163f0:	4603      	mov	r3, r0
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d007      	beq.n	8016406 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80163f6:	4a0a      	ldr	r2, [pc, #40]	@ (8016420 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80163fc:	2108      	movs	r1, #8
 80163fe:	4807      	ldr	r0, [pc, #28]	@ (801641c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8016400:	f7ff fdf5 	bl	8015fee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8016404:	e006      	b.n	8016414 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801640a:	2108      	movs	r1, #8
 801640c:	4803      	ldr	r0, [pc, #12]	@ (801641c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801640e:	f7ff fe44 	bl	801609a <LL_C1_IPCC_SetFlag_CHx>
  return;
 8016412:	bf00      	nop
}
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	58000c00 	.word	0x58000c00
 8016420:	20000838 	.word	0x20000838

08016424 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8016424:	b580      	push	{r7, lr}
 8016426:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8016428:	2108      	movs	r1, #8
 801642a:	4806      	ldr	r0, [pc, #24]	@ (8016444 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801642c:	f7ff fdf2 	bl	8016014 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8016430:	4b05      	ldr	r3, [pc, #20]	@ (8016448 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8016436:	2108      	movs	r1, #8
 8016438:	4802      	ldr	r0, [pc, #8]	@ (8016444 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801643a:	f7ff fe2e 	bl	801609a <LL_C1_IPCC_SetFlag_CHx>

  return;
 801643e:	bf00      	nop
}
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	58000c00 	.word	0x58000c00
 8016448:	20000838 	.word	0x20000838

0801644c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801644c:	b580      	push	{r7, lr}
 801644e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8016450:	2108      	movs	r1, #8
 8016452:	4802      	ldr	r0, [pc, #8]	@ (801645c <HW_IPCC_TRACES_Init+0x10>)
 8016454:	f7ff fdf0 	bl	8016038 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8016458:	bf00      	nop
}
 801645a:	bd80      	pop	{r7, pc}
 801645c:	58000c00 	.word	0x58000c00

08016460 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8016460:	b580      	push	{r7, lr}
 8016462:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8016464:	f7fc f830 	bl	80124c8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8016468:	2108      	movs	r1, #8
 801646a:	4802      	ldr	r0, [pc, #8]	@ (8016474 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801646c:	f7ff fe07 	bl	801607e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8016470:	bf00      	nop
}
 8016472:	bd80      	pop	{r7, pc}
 8016474:	58000c00 	.word	0x58000c00

08016478 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8016478:	b480      	push	{r7}
 801647a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801647c:	4b05      	ldr	r3, [pc, #20]	@ (8016494 <UTIL_LPM_Init+0x1c>)
 801647e:	2200      	movs	r2, #0
 8016480:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016482:	4b05      	ldr	r3, [pc, #20]	@ (8016498 <UTIL_LPM_Init+0x20>)
 8016484:	2200      	movs	r2, #0
 8016486:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016488:	bf00      	nop
 801648a:	46bd      	mov	sp, r7
 801648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop
 8016494:	2000083c 	.word	0x2000083c
 8016498:	20000840 	.word	0x20000840

0801649c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801649c:	b480      	push	{r7}
 801649e:	b087      	sub	sp, #28
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	460b      	mov	r3, r1
 80164a6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164a8:	f3ef 8310 	mrs	r3, PRIMASK
 80164ac:	613b      	str	r3, [r7, #16]
  return(result);
 80164ae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80164b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80164b2:	b672      	cpsid	i
}
 80164b4:	bf00      	nop
  
  switch( state )
 80164b6:	78fb      	ldrb	r3, [r7, #3]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d008      	beq.n	80164ce <UTIL_LPM_SetStopMode+0x32>
 80164bc:	2b01      	cmp	r3, #1
 80164be:	d10e      	bne.n	80164de <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80164c0:	4b0d      	ldr	r3, [pc, #52]	@ (80164f8 <UTIL_LPM_SetStopMode+0x5c>)
 80164c2:	681a      	ldr	r2, [r3, #0]
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	4313      	orrs	r3, r2
 80164c8:	4a0b      	ldr	r2, [pc, #44]	@ (80164f8 <UTIL_LPM_SetStopMode+0x5c>)
 80164ca:	6013      	str	r3, [r2, #0]
      break;
 80164cc:	e008      	b.n	80164e0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	43da      	mvns	r2, r3
 80164d2:	4b09      	ldr	r3, [pc, #36]	@ (80164f8 <UTIL_LPM_SetStopMode+0x5c>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	4013      	ands	r3, r2
 80164d8:	4a07      	ldr	r2, [pc, #28]	@ (80164f8 <UTIL_LPM_SetStopMode+0x5c>)
 80164da:	6013      	str	r3, [r2, #0]
      break;
 80164dc:	e000      	b.n	80164e0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80164de:	bf00      	nop
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f383 8810 	msr	PRIMASK, r3
}
 80164ea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80164ec:	bf00      	nop
 80164ee:	371c      	adds	r7, #28
 80164f0:	46bd      	mov	sp, r7
 80164f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f6:	4770      	bx	lr
 80164f8:	2000083c 	.word	0x2000083c

080164fc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80164fc:	b480      	push	{r7}
 80164fe:	b087      	sub	sp, #28
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	460b      	mov	r3, r1
 8016506:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016508:	f3ef 8310 	mrs	r3, PRIMASK
 801650c:	613b      	str	r3, [r7, #16]
  return(result);
 801650e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016512:	b672      	cpsid	i
}
 8016514:	bf00      	nop
  
  switch(state)
 8016516:	78fb      	ldrb	r3, [r7, #3]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d008      	beq.n	801652e <UTIL_LPM_SetOffMode+0x32>
 801651c:	2b01      	cmp	r3, #1
 801651e:	d10e      	bne.n	801653e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016520:	4b0d      	ldr	r3, [pc, #52]	@ (8016558 <UTIL_LPM_SetOffMode+0x5c>)
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	4313      	orrs	r3, r2
 8016528:	4a0b      	ldr	r2, [pc, #44]	@ (8016558 <UTIL_LPM_SetOffMode+0x5c>)
 801652a:	6013      	str	r3, [r2, #0]
      break;
 801652c:	e008      	b.n	8016540 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	43da      	mvns	r2, r3
 8016532:	4b09      	ldr	r3, [pc, #36]	@ (8016558 <UTIL_LPM_SetOffMode+0x5c>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	4013      	ands	r3, r2
 8016538:	4a07      	ldr	r2, [pc, #28]	@ (8016558 <UTIL_LPM_SetOffMode+0x5c>)
 801653a:	6013      	str	r3, [r2, #0]
      break;
 801653c:	e000      	b.n	8016540 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801653e:	bf00      	nop
 8016540:	697b      	ldr	r3, [r7, #20]
 8016542:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	f383 8810 	msr	PRIMASK, r3
}
 801654a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801654c:	bf00      	nop
 801654e:	371c      	adds	r7, #28
 8016550:	46bd      	mov	sp, r7
 8016552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016556:	4770      	bx	lr
 8016558:	20000840 	.word	0x20000840

0801655c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b090      	sub	sp, #64	@ 0x40
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8016564:	4b73      	ldr	r3, [pc, #460]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801656a:	4b72      	ldr	r3, [pc, #456]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 801656c:	681a      	ldr	r2, [r3, #0]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	4013      	ands	r3, r2
 8016572:	4a70      	ldr	r2, [pc, #448]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 8016574:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8016576:	4b70      	ldr	r3, [pc, #448]	@ (8016738 <UTIL_SEQ_Run+0x1dc>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801657c:	4b6f      	ldr	r3, [pc, #444]	@ (801673c <UTIL_SEQ_Run+0x1e0>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8016582:	4b6f      	ldr	r3, [pc, #444]	@ (8016740 <UTIL_SEQ_Run+0x1e4>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8016588:	4b6e      	ldr	r3, [pc, #440]	@ (8016744 <UTIL_SEQ_Run+0x1e8>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801658e:	e08d      	b.n	80166ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8016590:	2300      	movs	r3, #0
 8016592:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016594:	e002      	b.n	801659c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8016596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016598:	3301      	adds	r3, #1
 801659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801659c:	4a6a      	ldr	r2, [pc, #424]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 801659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80165a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80165a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165a6:	401a      	ands	r2, r3
 80165a8:	4b62      	ldr	r3, [pc, #392]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	4013      	ands	r3, r2
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d0f1      	beq.n	8016596 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80165b2:	4a65      	ldr	r2, [pc, #404]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 80165b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80165b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80165ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165bc:	401a      	ands	r2, r3
 80165be:	4b5d      	ldr	r3, [pc, #372]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	4013      	ands	r3, r2
 80165c4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80165c6:	4a60      	ldr	r2, [pc, #384]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 80165c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80165ca:	00db      	lsls	r3, r3, #3
 80165cc:	4413      	add	r3, r2
 80165ce:	685a      	ldr	r2, [r3, #4]
 80165d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165d2:	4013      	ands	r3, r2
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d106      	bne.n	80165e6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80165d8:	4a5b      	ldr	r2, [pc, #364]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 80165da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80165dc:	00db      	lsls	r3, r3, #3
 80165de:	4413      	add	r3, r2
 80165e0:	f04f 32ff 	mov.w	r2, #4294967295
 80165e4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80165e6:	4a58      	ldr	r2, [pc, #352]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 80165e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80165ea:	00db      	lsls	r3, r3, #3
 80165ec:	4413      	add	r3, r2
 80165ee:	685a      	ldr	r2, [r3, #4]
 80165f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f2:	4013      	ands	r3, r2
 80165f4:	4618      	mov	r0, r3
 80165f6:	f000 f973 	bl	80168e0 <SEQ_BitPosition>
 80165fa:	4603      	mov	r3, r0
 80165fc:	461a      	mov	r2, r3
 80165fe:	4b53      	ldr	r3, [pc, #332]	@ (801674c <UTIL_SEQ_Run+0x1f0>)
 8016600:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016602:	4a51      	ldr	r2, [pc, #324]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 8016604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016606:	00db      	lsls	r3, r3, #3
 8016608:	4413      	add	r3, r2
 801660a:	685a      	ldr	r2, [r3, #4]
 801660c:	4b4f      	ldr	r3, [pc, #316]	@ (801674c <UTIL_SEQ_Run+0x1f0>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	2101      	movs	r1, #1
 8016612:	fa01 f303 	lsl.w	r3, r1, r3
 8016616:	43db      	mvns	r3, r3
 8016618:	401a      	ands	r2, r3
 801661a:	494b      	ldr	r1, [pc, #300]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 801661c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801661e:	00db      	lsls	r3, r3, #3
 8016620:	440b      	add	r3, r1
 8016622:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016624:	f3ef 8310 	mrs	r3, PRIMASK
 8016628:	61bb      	str	r3, [r7, #24]
  return(result);
 801662a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801662c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801662e:	b672      	cpsid	i
}
 8016630:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016632:	4b46      	ldr	r3, [pc, #280]	@ (801674c <UTIL_SEQ_Run+0x1f0>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	2201      	movs	r2, #1
 8016638:	fa02 f303 	lsl.w	r3, r2, r3
 801663c:	43da      	mvns	r2, r3
 801663e:	4b3e      	ldr	r3, [pc, #248]	@ (8016738 <UTIL_SEQ_Run+0x1dc>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	4013      	ands	r3, r2
 8016644:	4a3c      	ldr	r2, [pc, #240]	@ (8016738 <UTIL_SEQ_Run+0x1dc>)
 8016646:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016648:	2302      	movs	r3, #2
 801664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801664c:	e013      	b.n	8016676 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801664e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016650:	3b01      	subs	r3, #1
 8016652:	4a3d      	ldr	r2, [pc, #244]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 8016654:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016658:	4b3c      	ldr	r3, [pc, #240]	@ (801674c <UTIL_SEQ_Run+0x1f0>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	2201      	movs	r2, #1
 801665e:	fa02 f303 	lsl.w	r3, r2, r3
 8016662:	43da      	mvns	r2, r3
 8016664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016666:	3b01      	subs	r3, #1
 8016668:	400a      	ands	r2, r1
 801666a:	4937      	ldr	r1, [pc, #220]	@ (8016748 <UTIL_SEQ_Run+0x1ec>)
 801666c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016672:	3b01      	subs	r3, #1
 8016674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016678:	2b00      	cmp	r3, #0
 801667a:	d1e8      	bne.n	801664e <UTIL_SEQ_Run+0xf2>
 801667c:	6a3b      	ldr	r3, [r7, #32]
 801667e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	f383 8810 	msr	PRIMASK, r3
}
 8016686:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8016688:	4b30      	ldr	r3, [pc, #192]	@ (801674c <UTIL_SEQ_Run+0x1f0>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	4a30      	ldr	r2, [pc, #192]	@ (8016750 <UTIL_SEQ_Run+0x1f4>)
 801668e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016692:	4798      	blx	r3

    local_taskset = TaskSet;
 8016694:	4b28      	ldr	r3, [pc, #160]	@ (8016738 <UTIL_SEQ_Run+0x1dc>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801669a:	4b28      	ldr	r3, [pc, #160]	@ (801673c <UTIL_SEQ_Run+0x1e0>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80166a0:	4b27      	ldr	r3, [pc, #156]	@ (8016740 <UTIL_SEQ_Run+0x1e4>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80166a6:	4b27      	ldr	r3, [pc, #156]	@ (8016744 <UTIL_SEQ_Run+0x1e8>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80166ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80166ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166b0:	401a      	ands	r2, r3
 80166b2:	4b20      	ldr	r3, [pc, #128]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	4013      	ands	r3, r2
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d005      	beq.n	80166c8 <UTIL_SEQ_Run+0x16c>
 80166bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80166be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c0:	4013      	ands	r3, r2
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	f43f af64 	beq.w	8016590 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80166c8:	4b20      	ldr	r3, [pc, #128]	@ (801674c <UTIL_SEQ_Run+0x1f0>)
 80166ca:	f04f 32ff 	mov.w	r2, #4294967295
 80166ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80166d0:	f000 f8f8 	bl	80168c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166d4:	f3ef 8310 	mrs	r3, PRIMASK
 80166d8:	613b      	str	r3, [r7, #16]
  return(result);
 80166da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80166dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80166de:	b672      	cpsid	i
}
 80166e0:	bf00      	nop
  local_taskset = TaskSet;
 80166e2:	4b15      	ldr	r3, [pc, #84]	@ (8016738 <UTIL_SEQ_Run+0x1dc>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80166e8:	4b14      	ldr	r3, [pc, #80]	@ (801673c <UTIL_SEQ_Run+0x1e0>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80166ee:	4b14      	ldr	r3, [pc, #80]	@ (8016740 <UTIL_SEQ_Run+0x1e4>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80166f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80166f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166f8:	401a      	ands	r2, r3
 80166fa:	4b0e      	ldr	r3, [pc, #56]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4013      	ands	r3, r2
 8016700:	2b00      	cmp	r3, #0
 8016702:	d107      	bne.n	8016714 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8016704:	4b0f      	ldr	r3, [pc, #60]	@ (8016744 <UTIL_SEQ_Run+0x1e8>)
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801670a:	4013      	ands	r3, r2
 801670c:	2b00      	cmp	r3, #0
 801670e:	d101      	bne.n	8016714 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016710:	f7f2 fc91 	bl	8009036 <UTIL_SEQ_Idle>
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	f383 8810 	msr	PRIMASK, r3
}
 801671e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016720:	f000 f8d7 	bl	80168d2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8016724:	4a03      	ldr	r2, [pc, #12]	@ (8016734 <UTIL_SEQ_Run+0x1d8>)
 8016726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016728:	6013      	str	r3, [r2, #0]

  return;
 801672a:	bf00      	nop
}
 801672c:	3740      	adds	r7, #64	@ 0x40
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	20000084 	.word	0x20000084
 8016738:	20000844 	.word	0x20000844
 801673c:	20000848 	.word	0x20000848
 8016740:	20000080 	.word	0x20000080
 8016744:	2000084c 	.word	0x2000084c
 8016748:	200008d4 	.word	0x200008d4
 801674c:	20000850 	.word	0x20000850
 8016750:	20000854 	.word	0x20000854

08016754 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b088      	sub	sp, #32
 8016758:	af00      	add	r7, sp, #0
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016760:	f3ef 8310 	mrs	r3, PRIMASK
 8016764:	617b      	str	r3, [r7, #20]
  return(result);
 8016766:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801676a:	b672      	cpsid	i
}
 801676c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801676e:	68f8      	ldr	r0, [r7, #12]
 8016770:	f000 f8b6 	bl	80168e0 <SEQ_BitPosition>
 8016774:	4603      	mov	r3, r0
 8016776:	4619      	mov	r1, r3
 8016778:	4a06      	ldr	r2, [pc, #24]	@ (8016794 <UTIL_SEQ_RegTask+0x40>)
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016784:	69bb      	ldr	r3, [r7, #24]
 8016786:	f383 8810 	msr	PRIMASK, r3
}
 801678a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801678c:	bf00      	nop
}
 801678e:	3720      	adds	r7, #32
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}
 8016794:	20000854 	.word	0x20000854

08016798 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016798:	b480      	push	{r7}
 801679a:	b087      	sub	sp, #28
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167a2:	f3ef 8310 	mrs	r3, PRIMASK
 80167a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80167a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80167aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80167ac:	b672      	cpsid	i
}
 80167ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 80167b0:	4b0d      	ldr	r3, [pc, #52]	@ (80167e8 <UTIL_SEQ_SetTask+0x50>)
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	4313      	orrs	r3, r2
 80167b8:	4a0b      	ldr	r2, [pc, #44]	@ (80167e8 <UTIL_SEQ_SetTask+0x50>)
 80167ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80167bc:	4a0b      	ldr	r2, [pc, #44]	@ (80167ec <UTIL_SEQ_SetTask+0x54>)
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	431a      	orrs	r2, r3
 80167c8:	4908      	ldr	r1, [pc, #32]	@ (80167ec <UTIL_SEQ_SetTask+0x54>)
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	f383 8810 	msr	PRIMASK, r3
}
 80167da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80167dc:	bf00      	nop
}
 80167de:	371c      	adds	r7, #28
 80167e0:	46bd      	mov	sp, r7
 80167e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e6:	4770      	bx	lr
 80167e8:	20000844 	.word	0x20000844
 80167ec:	200008d4 	.word	0x200008d4

080167f0 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80167f0:	b480      	push	{r7}
 80167f2:	b087      	sub	sp, #28
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167f8:	f3ef 8310 	mrs	r3, PRIMASK
 80167fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80167fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016802:	b672      	cpsid	i
}
 8016804:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016806:	4b09      	ldr	r3, [pc, #36]	@ (801682c <UTIL_SEQ_SetEvt+0x3c>)
 8016808:	681a      	ldr	r2, [r3, #0]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	4313      	orrs	r3, r2
 801680e:	4a07      	ldr	r2, [pc, #28]	@ (801682c <UTIL_SEQ_SetEvt+0x3c>)
 8016810:	6013      	str	r3, [r2, #0]
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	f383 8810 	msr	PRIMASK, r3
}
 801681c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801681e:	bf00      	nop
}
 8016820:	371c      	adds	r7, #28
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr
 801682a:	bf00      	nop
 801682c:	20000848 	.word	0x20000848

08016830 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b088      	sub	sp, #32
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016838:	4b1f      	ldr	r3, [pc, #124]	@ (80168b8 <UTIL_SEQ_WaitEvt+0x88>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801683e:	4b1e      	ldr	r3, [pc, #120]	@ (80168b8 <UTIL_SEQ_WaitEvt+0x88>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016846:	d102      	bne.n	801684e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016848:	2300      	movs	r3, #0
 801684a:	61fb      	str	r3, [r7, #28]
 801684c:	e005      	b.n	801685a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801684e:	4b1a      	ldr	r3, [pc, #104]	@ (80168b8 <UTIL_SEQ_WaitEvt+0x88>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2201      	movs	r2, #1
 8016854:	fa02 f303 	lsl.w	r3, r2, r3
 8016858:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801685a:	4b18      	ldr	r3, [pc, #96]	@ (80168bc <UTIL_SEQ_WaitEvt+0x8c>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016860:	4a16      	ldr	r2, [pc, #88]	@ (80168bc <UTIL_SEQ_WaitEvt+0x8c>)
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8016866:	e003      	b.n	8016870 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016868:	6879      	ldr	r1, [r7, #4]
 801686a:	69f8      	ldr	r0, [r7, #28]
 801686c:	f7f2 fbea 	bl	8009044 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016870:	4b13      	ldr	r3, [pc, #76]	@ (80168c0 <UTIL_SEQ_WaitEvt+0x90>)
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	4013      	ands	r3, r2
 8016878:	2b00      	cmp	r3, #0
 801687a:	d0f5      	beq.n	8016868 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801687c:	4a0e      	ldr	r2, [pc, #56]	@ (80168b8 <UTIL_SEQ_WaitEvt+0x88>)
 801687e:	69bb      	ldr	r3, [r7, #24]
 8016880:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016882:	f3ef 8310 	mrs	r3, PRIMASK
 8016886:	60bb      	str	r3, [r7, #8]
  return(result);
 8016888:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801688a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801688c:	b672      	cpsid	i
}
 801688e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	43da      	mvns	r2, r3
 8016894:	4b0a      	ldr	r3, [pc, #40]	@ (80168c0 <UTIL_SEQ_WaitEvt+0x90>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	4013      	ands	r3, r2
 801689a:	4a09      	ldr	r2, [pc, #36]	@ (80168c0 <UTIL_SEQ_WaitEvt+0x90>)
 801689c:	6013      	str	r3, [r2, #0]
 801689e:	693b      	ldr	r3, [r7, #16]
 80168a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	f383 8810 	msr	PRIMASK, r3
}
 80168a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80168aa:	4a04      	ldr	r2, [pc, #16]	@ (80168bc <UTIL_SEQ_WaitEvt+0x8c>)
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	6013      	str	r3, [r2, #0]
  return;
 80168b0:	bf00      	nop
}
 80168b2:	3720      	adds	r7, #32
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}
 80168b8:	20000850 	.word	0x20000850
 80168bc:	2000084c 	.word	0x2000084c
 80168c0:	20000848 	.word	0x20000848

080168c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80168c4:	b480      	push	{r7}
 80168c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80168c8:	bf00      	nop
}
 80168ca:	46bd      	mov	sp, r7
 80168cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d0:	4770      	bx	lr

080168d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80168d2:	b480      	push	{r7}
 80168d4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80168d6:	bf00      	nop
}
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr

080168e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b085      	sub	sp, #20
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80168e8:	2300      	movs	r3, #0
 80168ea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80168f6:	d204      	bcs.n	8016902 <SEQ_BitPosition+0x22>
 80168f8:	2310      	movs	r3, #16
 80168fa:	73fb      	strb	r3, [r7, #15]
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	041b      	lsls	r3, r3, #16
 8016900:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016908:	d205      	bcs.n	8016916 <SEQ_BitPosition+0x36>
 801690a:	7bfb      	ldrb	r3, [r7, #15]
 801690c:	3308      	adds	r3, #8
 801690e:	73fb      	strb	r3, [r7, #15]
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	021b      	lsls	r3, r3, #8
 8016914:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801691c:	d205      	bcs.n	801692a <SEQ_BitPosition+0x4a>
 801691e:	7bfb      	ldrb	r3, [r7, #15]
 8016920:	3304      	adds	r3, #4
 8016922:	73fb      	strb	r3, [r7, #15]
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	011b      	lsls	r3, r3, #4
 8016928:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	0f1b      	lsrs	r3, r3, #28
 801692e:	4a07      	ldr	r2, [pc, #28]	@ (801694c <SEQ_BitPosition+0x6c>)
 8016930:	5cd2      	ldrb	r2, [r2, r3]
 8016932:	7bfb      	ldrb	r3, [r7, #15]
 8016934:	4413      	add	r3, r2
 8016936:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8016938:	7bfb      	ldrb	r3, [r7, #15]
 801693a:	f1c3 031f 	rsb	r3, r3, #31
 801693e:	b2db      	uxtb	r3, r3
}
 8016940:	4618      	mov	r0, r3
 8016942:	3714      	adds	r7, #20
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr
 801694c:	08019e68 	.word	0x08019e68

08016950 <__assert_func>:
 8016950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016952:	4614      	mov	r4, r2
 8016954:	461a      	mov	r2, r3
 8016956:	4b09      	ldr	r3, [pc, #36]	@ (801697c <__assert_func+0x2c>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	4605      	mov	r5, r0
 801695c:	68d8      	ldr	r0, [r3, #12]
 801695e:	b954      	cbnz	r4, 8016976 <__assert_func+0x26>
 8016960:	4b07      	ldr	r3, [pc, #28]	@ (8016980 <__assert_func+0x30>)
 8016962:	461c      	mov	r4, r3
 8016964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016968:	9100      	str	r1, [sp, #0]
 801696a:	462b      	mov	r3, r5
 801696c:	4905      	ldr	r1, [pc, #20]	@ (8016984 <__assert_func+0x34>)
 801696e:	f000 f96f 	bl	8016c50 <fiprintf>
 8016972:	f000 fc78 	bl	8017266 <abort>
 8016976:	4b04      	ldr	r3, [pc, #16]	@ (8016988 <__assert_func+0x38>)
 8016978:	e7f4      	b.n	8016964 <__assert_func+0x14>
 801697a:	bf00      	nop
 801697c:	20000094 	.word	0x20000094
 8016980:	08019eb3 	.word	0x08019eb3
 8016984:	08019e85 	.word	0x08019e85
 8016988:	08019e78 	.word	0x08019e78

0801698c <malloc>:
 801698c:	4b02      	ldr	r3, [pc, #8]	@ (8016998 <malloc+0xc>)
 801698e:	4601      	mov	r1, r0
 8016990:	6818      	ldr	r0, [r3, #0]
 8016992:	f000 b82d 	b.w	80169f0 <_malloc_r>
 8016996:	bf00      	nop
 8016998:	20000094 	.word	0x20000094

0801699c <free>:
 801699c:	4b02      	ldr	r3, [pc, #8]	@ (80169a8 <free+0xc>)
 801699e:	4601      	mov	r1, r0
 80169a0:	6818      	ldr	r0, [r3, #0]
 80169a2:	f000 bc67 	b.w	8017274 <_free_r>
 80169a6:	bf00      	nop
 80169a8:	20000094 	.word	0x20000094

080169ac <sbrk_aligned>:
 80169ac:	b570      	push	{r4, r5, r6, lr}
 80169ae:	4e0f      	ldr	r6, [pc, #60]	@ (80169ec <sbrk_aligned+0x40>)
 80169b0:	460c      	mov	r4, r1
 80169b2:	6831      	ldr	r1, [r6, #0]
 80169b4:	4605      	mov	r5, r0
 80169b6:	b911      	cbnz	r1, 80169be <sbrk_aligned+0x12>
 80169b8:	f000 fbf6 	bl	80171a8 <_sbrk_r>
 80169bc:	6030      	str	r0, [r6, #0]
 80169be:	4621      	mov	r1, r4
 80169c0:	4628      	mov	r0, r5
 80169c2:	f000 fbf1 	bl	80171a8 <_sbrk_r>
 80169c6:	1c43      	adds	r3, r0, #1
 80169c8:	d103      	bne.n	80169d2 <sbrk_aligned+0x26>
 80169ca:	f04f 34ff 	mov.w	r4, #4294967295
 80169ce:	4620      	mov	r0, r4
 80169d0:	bd70      	pop	{r4, r5, r6, pc}
 80169d2:	1cc4      	adds	r4, r0, #3
 80169d4:	f024 0403 	bic.w	r4, r4, #3
 80169d8:	42a0      	cmp	r0, r4
 80169da:	d0f8      	beq.n	80169ce <sbrk_aligned+0x22>
 80169dc:	1a21      	subs	r1, r4, r0
 80169de:	4628      	mov	r0, r5
 80169e0:	f000 fbe2 	bl	80171a8 <_sbrk_r>
 80169e4:	3001      	adds	r0, #1
 80169e6:	d1f2      	bne.n	80169ce <sbrk_aligned+0x22>
 80169e8:	e7ef      	b.n	80169ca <sbrk_aligned+0x1e>
 80169ea:	bf00      	nop
 80169ec:	200008e4 	.word	0x200008e4

080169f0 <_malloc_r>:
 80169f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169f4:	1ccd      	adds	r5, r1, #3
 80169f6:	f025 0503 	bic.w	r5, r5, #3
 80169fa:	3508      	adds	r5, #8
 80169fc:	2d0c      	cmp	r5, #12
 80169fe:	bf38      	it	cc
 8016a00:	250c      	movcc	r5, #12
 8016a02:	2d00      	cmp	r5, #0
 8016a04:	4606      	mov	r6, r0
 8016a06:	db01      	blt.n	8016a0c <_malloc_r+0x1c>
 8016a08:	42a9      	cmp	r1, r5
 8016a0a:	d904      	bls.n	8016a16 <_malloc_r+0x26>
 8016a0c:	230c      	movs	r3, #12
 8016a0e:	6033      	str	r3, [r6, #0]
 8016a10:	2000      	movs	r0, #0
 8016a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016aec <_malloc_r+0xfc>
 8016a1a:	f000 f869 	bl	8016af0 <__malloc_lock>
 8016a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8016a22:	461c      	mov	r4, r3
 8016a24:	bb44      	cbnz	r4, 8016a78 <_malloc_r+0x88>
 8016a26:	4629      	mov	r1, r5
 8016a28:	4630      	mov	r0, r6
 8016a2a:	f7ff ffbf 	bl	80169ac <sbrk_aligned>
 8016a2e:	1c43      	adds	r3, r0, #1
 8016a30:	4604      	mov	r4, r0
 8016a32:	d158      	bne.n	8016ae6 <_malloc_r+0xf6>
 8016a34:	f8d8 4000 	ldr.w	r4, [r8]
 8016a38:	4627      	mov	r7, r4
 8016a3a:	2f00      	cmp	r7, #0
 8016a3c:	d143      	bne.n	8016ac6 <_malloc_r+0xd6>
 8016a3e:	2c00      	cmp	r4, #0
 8016a40:	d04b      	beq.n	8016ada <_malloc_r+0xea>
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	4639      	mov	r1, r7
 8016a46:	4630      	mov	r0, r6
 8016a48:	eb04 0903 	add.w	r9, r4, r3
 8016a4c:	f000 fbac 	bl	80171a8 <_sbrk_r>
 8016a50:	4581      	cmp	r9, r0
 8016a52:	d142      	bne.n	8016ada <_malloc_r+0xea>
 8016a54:	6821      	ldr	r1, [r4, #0]
 8016a56:	1a6d      	subs	r5, r5, r1
 8016a58:	4629      	mov	r1, r5
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	f7ff ffa6 	bl	80169ac <sbrk_aligned>
 8016a60:	3001      	adds	r0, #1
 8016a62:	d03a      	beq.n	8016ada <_malloc_r+0xea>
 8016a64:	6823      	ldr	r3, [r4, #0]
 8016a66:	442b      	add	r3, r5
 8016a68:	6023      	str	r3, [r4, #0]
 8016a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8016a6e:	685a      	ldr	r2, [r3, #4]
 8016a70:	bb62      	cbnz	r2, 8016acc <_malloc_r+0xdc>
 8016a72:	f8c8 7000 	str.w	r7, [r8]
 8016a76:	e00f      	b.n	8016a98 <_malloc_r+0xa8>
 8016a78:	6822      	ldr	r2, [r4, #0]
 8016a7a:	1b52      	subs	r2, r2, r5
 8016a7c:	d420      	bmi.n	8016ac0 <_malloc_r+0xd0>
 8016a7e:	2a0b      	cmp	r2, #11
 8016a80:	d917      	bls.n	8016ab2 <_malloc_r+0xc2>
 8016a82:	1961      	adds	r1, r4, r5
 8016a84:	42a3      	cmp	r3, r4
 8016a86:	6025      	str	r5, [r4, #0]
 8016a88:	bf18      	it	ne
 8016a8a:	6059      	strne	r1, [r3, #4]
 8016a8c:	6863      	ldr	r3, [r4, #4]
 8016a8e:	bf08      	it	eq
 8016a90:	f8c8 1000 	streq.w	r1, [r8]
 8016a94:	5162      	str	r2, [r4, r5]
 8016a96:	604b      	str	r3, [r1, #4]
 8016a98:	4630      	mov	r0, r6
 8016a9a:	f000 f82f 	bl	8016afc <__malloc_unlock>
 8016a9e:	f104 000b 	add.w	r0, r4, #11
 8016aa2:	1d23      	adds	r3, r4, #4
 8016aa4:	f020 0007 	bic.w	r0, r0, #7
 8016aa8:	1ac2      	subs	r2, r0, r3
 8016aaa:	bf1c      	itt	ne
 8016aac:	1a1b      	subne	r3, r3, r0
 8016aae:	50a3      	strne	r3, [r4, r2]
 8016ab0:	e7af      	b.n	8016a12 <_malloc_r+0x22>
 8016ab2:	6862      	ldr	r2, [r4, #4]
 8016ab4:	42a3      	cmp	r3, r4
 8016ab6:	bf0c      	ite	eq
 8016ab8:	f8c8 2000 	streq.w	r2, [r8]
 8016abc:	605a      	strne	r2, [r3, #4]
 8016abe:	e7eb      	b.n	8016a98 <_malloc_r+0xa8>
 8016ac0:	4623      	mov	r3, r4
 8016ac2:	6864      	ldr	r4, [r4, #4]
 8016ac4:	e7ae      	b.n	8016a24 <_malloc_r+0x34>
 8016ac6:	463c      	mov	r4, r7
 8016ac8:	687f      	ldr	r7, [r7, #4]
 8016aca:	e7b6      	b.n	8016a3a <_malloc_r+0x4a>
 8016acc:	461a      	mov	r2, r3
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	42a3      	cmp	r3, r4
 8016ad2:	d1fb      	bne.n	8016acc <_malloc_r+0xdc>
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	6053      	str	r3, [r2, #4]
 8016ad8:	e7de      	b.n	8016a98 <_malloc_r+0xa8>
 8016ada:	230c      	movs	r3, #12
 8016adc:	6033      	str	r3, [r6, #0]
 8016ade:	4630      	mov	r0, r6
 8016ae0:	f000 f80c 	bl	8016afc <__malloc_unlock>
 8016ae4:	e794      	b.n	8016a10 <_malloc_r+0x20>
 8016ae6:	6005      	str	r5, [r0, #0]
 8016ae8:	e7d6      	b.n	8016a98 <_malloc_r+0xa8>
 8016aea:	bf00      	nop
 8016aec:	200008e8 	.word	0x200008e8

08016af0 <__malloc_lock>:
 8016af0:	4801      	ldr	r0, [pc, #4]	@ (8016af8 <__malloc_lock+0x8>)
 8016af2:	f000 bba6 	b.w	8017242 <__retarget_lock_acquire_recursive>
 8016af6:	bf00      	nop
 8016af8:	20000a2c 	.word	0x20000a2c

08016afc <__malloc_unlock>:
 8016afc:	4801      	ldr	r0, [pc, #4]	@ (8016b04 <__malloc_unlock+0x8>)
 8016afe:	f000 bba1 	b.w	8017244 <__retarget_lock_release_recursive>
 8016b02:	bf00      	nop
 8016b04:	20000a2c 	.word	0x20000a2c

08016b08 <std>:
 8016b08:	2300      	movs	r3, #0
 8016b0a:	b510      	push	{r4, lr}
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8016b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b16:	6083      	str	r3, [r0, #8]
 8016b18:	8181      	strh	r1, [r0, #12]
 8016b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8016b1c:	81c2      	strh	r2, [r0, #14]
 8016b1e:	6183      	str	r3, [r0, #24]
 8016b20:	4619      	mov	r1, r3
 8016b22:	2208      	movs	r2, #8
 8016b24:	305c      	adds	r0, #92	@ 0x5c
 8016b26:	f000 fadf 	bl	80170e8 <memset>
 8016b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8016b60 <std+0x58>)
 8016b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8016b64 <std+0x5c>)
 8016b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016b32:	4b0d      	ldr	r3, [pc, #52]	@ (8016b68 <std+0x60>)
 8016b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016b36:	4b0d      	ldr	r3, [pc, #52]	@ (8016b6c <std+0x64>)
 8016b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8016b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8016b70 <std+0x68>)
 8016b3c:	6224      	str	r4, [r4, #32]
 8016b3e:	429c      	cmp	r4, r3
 8016b40:	d006      	beq.n	8016b50 <std+0x48>
 8016b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016b46:	4294      	cmp	r4, r2
 8016b48:	d002      	beq.n	8016b50 <std+0x48>
 8016b4a:	33d0      	adds	r3, #208	@ 0xd0
 8016b4c:	429c      	cmp	r4, r3
 8016b4e:	d105      	bne.n	8016b5c <std+0x54>
 8016b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b58:	f000 bb72 	b.w	8017240 <__retarget_lock_init_recursive>
 8016b5c:	bd10      	pop	{r4, pc}
 8016b5e:	bf00      	nop
 8016b60:	08016f39 	.word	0x08016f39
 8016b64:	08016f5b 	.word	0x08016f5b
 8016b68:	08016f93 	.word	0x08016f93
 8016b6c:	08016fb7 	.word	0x08016fb7
 8016b70:	200008ec 	.word	0x200008ec

08016b74 <stdio_exit_handler>:
 8016b74:	4a02      	ldr	r2, [pc, #8]	@ (8016b80 <stdio_exit_handler+0xc>)
 8016b76:	4903      	ldr	r1, [pc, #12]	@ (8016b84 <stdio_exit_handler+0x10>)
 8016b78:	4803      	ldr	r0, [pc, #12]	@ (8016b88 <stdio_exit_handler+0x14>)
 8016b7a:	f000 b87b 	b.w	8016c74 <_fwalk_sglue>
 8016b7e:	bf00      	nop
 8016b80:	20000088 	.word	0x20000088
 8016b84:	08017c61 	.word	0x08017c61
 8016b88:	20000098 	.word	0x20000098

08016b8c <cleanup_stdio>:
 8016b8c:	6841      	ldr	r1, [r0, #4]
 8016b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8016bc0 <cleanup_stdio+0x34>)
 8016b90:	4299      	cmp	r1, r3
 8016b92:	b510      	push	{r4, lr}
 8016b94:	4604      	mov	r4, r0
 8016b96:	d001      	beq.n	8016b9c <cleanup_stdio+0x10>
 8016b98:	f001 f862 	bl	8017c60 <_fflush_r>
 8016b9c:	68a1      	ldr	r1, [r4, #8]
 8016b9e:	4b09      	ldr	r3, [pc, #36]	@ (8016bc4 <cleanup_stdio+0x38>)
 8016ba0:	4299      	cmp	r1, r3
 8016ba2:	d002      	beq.n	8016baa <cleanup_stdio+0x1e>
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f001 f85b 	bl	8017c60 <_fflush_r>
 8016baa:	68e1      	ldr	r1, [r4, #12]
 8016bac:	4b06      	ldr	r3, [pc, #24]	@ (8016bc8 <cleanup_stdio+0x3c>)
 8016bae:	4299      	cmp	r1, r3
 8016bb0:	d004      	beq.n	8016bbc <cleanup_stdio+0x30>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bb8:	f001 b852 	b.w	8017c60 <_fflush_r>
 8016bbc:	bd10      	pop	{r4, pc}
 8016bbe:	bf00      	nop
 8016bc0:	200008ec 	.word	0x200008ec
 8016bc4:	20000954 	.word	0x20000954
 8016bc8:	200009bc 	.word	0x200009bc

08016bcc <global_stdio_init.part.0>:
 8016bcc:	b510      	push	{r4, lr}
 8016bce:	4b0b      	ldr	r3, [pc, #44]	@ (8016bfc <global_stdio_init.part.0+0x30>)
 8016bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8016c00 <global_stdio_init.part.0+0x34>)
 8016bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8016c04 <global_stdio_init.part.0+0x38>)
 8016bd4:	601a      	str	r2, [r3, #0]
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	2200      	movs	r2, #0
 8016bda:	2104      	movs	r1, #4
 8016bdc:	f7ff ff94 	bl	8016b08 <std>
 8016be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016be4:	2201      	movs	r2, #1
 8016be6:	2109      	movs	r1, #9
 8016be8:	f7ff ff8e 	bl	8016b08 <std>
 8016bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016bf0:	2202      	movs	r2, #2
 8016bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bf6:	2112      	movs	r1, #18
 8016bf8:	f7ff bf86 	b.w	8016b08 <std>
 8016bfc:	20000a24 	.word	0x20000a24
 8016c00:	200008ec 	.word	0x200008ec
 8016c04:	08016b75 	.word	0x08016b75

08016c08 <__sfp_lock_acquire>:
 8016c08:	4801      	ldr	r0, [pc, #4]	@ (8016c10 <__sfp_lock_acquire+0x8>)
 8016c0a:	f000 bb1a 	b.w	8017242 <__retarget_lock_acquire_recursive>
 8016c0e:	bf00      	nop
 8016c10:	20000a2d 	.word	0x20000a2d

08016c14 <__sfp_lock_release>:
 8016c14:	4801      	ldr	r0, [pc, #4]	@ (8016c1c <__sfp_lock_release+0x8>)
 8016c16:	f000 bb15 	b.w	8017244 <__retarget_lock_release_recursive>
 8016c1a:	bf00      	nop
 8016c1c:	20000a2d 	.word	0x20000a2d

08016c20 <__sinit>:
 8016c20:	b510      	push	{r4, lr}
 8016c22:	4604      	mov	r4, r0
 8016c24:	f7ff fff0 	bl	8016c08 <__sfp_lock_acquire>
 8016c28:	6a23      	ldr	r3, [r4, #32]
 8016c2a:	b11b      	cbz	r3, 8016c34 <__sinit+0x14>
 8016c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c30:	f7ff bff0 	b.w	8016c14 <__sfp_lock_release>
 8016c34:	4b04      	ldr	r3, [pc, #16]	@ (8016c48 <__sinit+0x28>)
 8016c36:	6223      	str	r3, [r4, #32]
 8016c38:	4b04      	ldr	r3, [pc, #16]	@ (8016c4c <__sinit+0x2c>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d1f5      	bne.n	8016c2c <__sinit+0xc>
 8016c40:	f7ff ffc4 	bl	8016bcc <global_stdio_init.part.0>
 8016c44:	e7f2      	b.n	8016c2c <__sinit+0xc>
 8016c46:	bf00      	nop
 8016c48:	08016b8d 	.word	0x08016b8d
 8016c4c:	20000a24 	.word	0x20000a24

08016c50 <fiprintf>:
 8016c50:	b40e      	push	{r1, r2, r3}
 8016c52:	b503      	push	{r0, r1, lr}
 8016c54:	4601      	mov	r1, r0
 8016c56:	ab03      	add	r3, sp, #12
 8016c58:	4805      	ldr	r0, [pc, #20]	@ (8016c70 <fiprintf+0x20>)
 8016c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c5e:	6800      	ldr	r0, [r0, #0]
 8016c60:	9301      	str	r3, [sp, #4]
 8016c62:	f000 fcd3 	bl	801760c <_vfiprintf_r>
 8016c66:	b002      	add	sp, #8
 8016c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c6c:	b003      	add	sp, #12
 8016c6e:	4770      	bx	lr
 8016c70:	20000094 	.word	0x20000094

08016c74 <_fwalk_sglue>:
 8016c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c78:	4607      	mov	r7, r0
 8016c7a:	4688      	mov	r8, r1
 8016c7c:	4614      	mov	r4, r2
 8016c7e:	2600      	movs	r6, #0
 8016c80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c84:	f1b9 0901 	subs.w	r9, r9, #1
 8016c88:	d505      	bpl.n	8016c96 <_fwalk_sglue+0x22>
 8016c8a:	6824      	ldr	r4, [r4, #0]
 8016c8c:	2c00      	cmp	r4, #0
 8016c8e:	d1f7      	bne.n	8016c80 <_fwalk_sglue+0xc>
 8016c90:	4630      	mov	r0, r6
 8016c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c96:	89ab      	ldrh	r3, [r5, #12]
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	d907      	bls.n	8016cac <_fwalk_sglue+0x38>
 8016c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	d003      	beq.n	8016cac <_fwalk_sglue+0x38>
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	47c0      	blx	r8
 8016caa:	4306      	orrs	r6, r0
 8016cac:	3568      	adds	r5, #104	@ 0x68
 8016cae:	e7e9      	b.n	8016c84 <_fwalk_sglue+0x10>

08016cb0 <iprintf>:
 8016cb0:	b40f      	push	{r0, r1, r2, r3}
 8016cb2:	b507      	push	{r0, r1, r2, lr}
 8016cb4:	4906      	ldr	r1, [pc, #24]	@ (8016cd0 <iprintf+0x20>)
 8016cb6:	ab04      	add	r3, sp, #16
 8016cb8:	6808      	ldr	r0, [r1, #0]
 8016cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cbe:	6881      	ldr	r1, [r0, #8]
 8016cc0:	9301      	str	r3, [sp, #4]
 8016cc2:	f000 fca3 	bl	801760c <_vfiprintf_r>
 8016cc6:	b003      	add	sp, #12
 8016cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ccc:	b004      	add	sp, #16
 8016cce:	4770      	bx	lr
 8016cd0:	20000094 	.word	0x20000094

08016cd4 <_puts_r>:
 8016cd4:	6a03      	ldr	r3, [r0, #32]
 8016cd6:	b570      	push	{r4, r5, r6, lr}
 8016cd8:	6884      	ldr	r4, [r0, #8]
 8016cda:	4605      	mov	r5, r0
 8016cdc:	460e      	mov	r6, r1
 8016cde:	b90b      	cbnz	r3, 8016ce4 <_puts_r+0x10>
 8016ce0:	f7ff ff9e 	bl	8016c20 <__sinit>
 8016ce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ce6:	07db      	lsls	r3, r3, #31
 8016ce8:	d405      	bmi.n	8016cf6 <_puts_r+0x22>
 8016cea:	89a3      	ldrh	r3, [r4, #12]
 8016cec:	0598      	lsls	r0, r3, #22
 8016cee:	d402      	bmi.n	8016cf6 <_puts_r+0x22>
 8016cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016cf2:	f000 faa6 	bl	8017242 <__retarget_lock_acquire_recursive>
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	0719      	lsls	r1, r3, #28
 8016cfa:	d502      	bpl.n	8016d02 <_puts_r+0x2e>
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d135      	bne.n	8016d6e <_puts_r+0x9a>
 8016d02:	4621      	mov	r1, r4
 8016d04:	4628      	mov	r0, r5
 8016d06:	f000 f999 	bl	801703c <__swsetup_r>
 8016d0a:	b380      	cbz	r0, 8016d6e <_puts_r+0x9a>
 8016d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8016d10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d12:	07da      	lsls	r2, r3, #31
 8016d14:	d405      	bmi.n	8016d22 <_puts_r+0x4e>
 8016d16:	89a3      	ldrh	r3, [r4, #12]
 8016d18:	059b      	lsls	r3, r3, #22
 8016d1a:	d402      	bmi.n	8016d22 <_puts_r+0x4e>
 8016d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d1e:	f000 fa91 	bl	8017244 <__retarget_lock_release_recursive>
 8016d22:	4628      	mov	r0, r5
 8016d24:	bd70      	pop	{r4, r5, r6, pc}
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	da04      	bge.n	8016d34 <_puts_r+0x60>
 8016d2a:	69a2      	ldr	r2, [r4, #24]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	dc17      	bgt.n	8016d60 <_puts_r+0x8c>
 8016d30:	290a      	cmp	r1, #10
 8016d32:	d015      	beq.n	8016d60 <_puts_r+0x8c>
 8016d34:	6823      	ldr	r3, [r4, #0]
 8016d36:	1c5a      	adds	r2, r3, #1
 8016d38:	6022      	str	r2, [r4, #0]
 8016d3a:	7019      	strb	r1, [r3, #0]
 8016d3c:	68a3      	ldr	r3, [r4, #8]
 8016d3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d42:	3b01      	subs	r3, #1
 8016d44:	60a3      	str	r3, [r4, #8]
 8016d46:	2900      	cmp	r1, #0
 8016d48:	d1ed      	bne.n	8016d26 <_puts_r+0x52>
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	da11      	bge.n	8016d72 <_puts_r+0x9e>
 8016d4e:	4622      	mov	r2, r4
 8016d50:	210a      	movs	r1, #10
 8016d52:	4628      	mov	r0, r5
 8016d54:	f000 f933 	bl	8016fbe <__swbuf_r>
 8016d58:	3001      	adds	r0, #1
 8016d5a:	d0d7      	beq.n	8016d0c <_puts_r+0x38>
 8016d5c:	250a      	movs	r5, #10
 8016d5e:	e7d7      	b.n	8016d10 <_puts_r+0x3c>
 8016d60:	4622      	mov	r2, r4
 8016d62:	4628      	mov	r0, r5
 8016d64:	f000 f92b 	bl	8016fbe <__swbuf_r>
 8016d68:	3001      	adds	r0, #1
 8016d6a:	d1e7      	bne.n	8016d3c <_puts_r+0x68>
 8016d6c:	e7ce      	b.n	8016d0c <_puts_r+0x38>
 8016d6e:	3e01      	subs	r6, #1
 8016d70:	e7e4      	b.n	8016d3c <_puts_r+0x68>
 8016d72:	6823      	ldr	r3, [r4, #0]
 8016d74:	1c5a      	adds	r2, r3, #1
 8016d76:	6022      	str	r2, [r4, #0]
 8016d78:	220a      	movs	r2, #10
 8016d7a:	701a      	strb	r2, [r3, #0]
 8016d7c:	e7ee      	b.n	8016d5c <_puts_r+0x88>
	...

08016d80 <puts>:
 8016d80:	4b02      	ldr	r3, [pc, #8]	@ (8016d8c <puts+0xc>)
 8016d82:	4601      	mov	r1, r0
 8016d84:	6818      	ldr	r0, [r3, #0]
 8016d86:	f7ff bfa5 	b.w	8016cd4 <_puts_r>
 8016d8a:	bf00      	nop
 8016d8c:	20000094 	.word	0x20000094

08016d90 <setvbuf>:
 8016d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016d94:	461d      	mov	r5, r3
 8016d96:	4b57      	ldr	r3, [pc, #348]	@ (8016ef4 <setvbuf+0x164>)
 8016d98:	681f      	ldr	r7, [r3, #0]
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	460e      	mov	r6, r1
 8016d9e:	4690      	mov	r8, r2
 8016da0:	b127      	cbz	r7, 8016dac <setvbuf+0x1c>
 8016da2:	6a3b      	ldr	r3, [r7, #32]
 8016da4:	b913      	cbnz	r3, 8016dac <setvbuf+0x1c>
 8016da6:	4638      	mov	r0, r7
 8016da8:	f7ff ff3a 	bl	8016c20 <__sinit>
 8016dac:	f1b8 0f02 	cmp.w	r8, #2
 8016db0:	d006      	beq.n	8016dc0 <setvbuf+0x30>
 8016db2:	f1b8 0f01 	cmp.w	r8, #1
 8016db6:	f200 809a 	bhi.w	8016eee <setvbuf+0x15e>
 8016dba:	2d00      	cmp	r5, #0
 8016dbc:	f2c0 8097 	blt.w	8016eee <setvbuf+0x15e>
 8016dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016dc2:	07d9      	lsls	r1, r3, #31
 8016dc4:	d405      	bmi.n	8016dd2 <setvbuf+0x42>
 8016dc6:	89a3      	ldrh	r3, [r4, #12]
 8016dc8:	059a      	lsls	r2, r3, #22
 8016dca:	d402      	bmi.n	8016dd2 <setvbuf+0x42>
 8016dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016dce:	f000 fa38 	bl	8017242 <__retarget_lock_acquire_recursive>
 8016dd2:	4621      	mov	r1, r4
 8016dd4:	4638      	mov	r0, r7
 8016dd6:	f000 ff43 	bl	8017c60 <_fflush_r>
 8016dda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ddc:	b141      	cbz	r1, 8016df0 <setvbuf+0x60>
 8016dde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016de2:	4299      	cmp	r1, r3
 8016de4:	d002      	beq.n	8016dec <setvbuf+0x5c>
 8016de6:	4638      	mov	r0, r7
 8016de8:	f000 fa44 	bl	8017274 <_free_r>
 8016dec:	2300      	movs	r3, #0
 8016dee:	6363      	str	r3, [r4, #52]	@ 0x34
 8016df0:	2300      	movs	r3, #0
 8016df2:	61a3      	str	r3, [r4, #24]
 8016df4:	6063      	str	r3, [r4, #4]
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	061b      	lsls	r3, r3, #24
 8016dfa:	d503      	bpl.n	8016e04 <setvbuf+0x74>
 8016dfc:	6921      	ldr	r1, [r4, #16]
 8016dfe:	4638      	mov	r0, r7
 8016e00:	f000 fa38 	bl	8017274 <_free_r>
 8016e04:	89a3      	ldrh	r3, [r4, #12]
 8016e06:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8016e0a:	f023 0303 	bic.w	r3, r3, #3
 8016e0e:	f1b8 0f02 	cmp.w	r8, #2
 8016e12:	81a3      	strh	r3, [r4, #12]
 8016e14:	d061      	beq.n	8016eda <setvbuf+0x14a>
 8016e16:	ab01      	add	r3, sp, #4
 8016e18:	466a      	mov	r2, sp
 8016e1a:	4621      	mov	r1, r4
 8016e1c:	4638      	mov	r0, r7
 8016e1e:	f000 ff47 	bl	8017cb0 <__swhatbuf_r>
 8016e22:	89a3      	ldrh	r3, [r4, #12]
 8016e24:	4318      	orrs	r0, r3
 8016e26:	81a0      	strh	r0, [r4, #12]
 8016e28:	bb2d      	cbnz	r5, 8016e76 <setvbuf+0xe6>
 8016e2a:	9d00      	ldr	r5, [sp, #0]
 8016e2c:	4628      	mov	r0, r5
 8016e2e:	f7ff fdad 	bl	801698c <malloc>
 8016e32:	4606      	mov	r6, r0
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d152      	bne.n	8016ede <setvbuf+0x14e>
 8016e38:	f8dd 9000 	ldr.w	r9, [sp]
 8016e3c:	45a9      	cmp	r9, r5
 8016e3e:	d140      	bne.n	8016ec2 <setvbuf+0x132>
 8016e40:	f04f 35ff 	mov.w	r5, #4294967295
 8016e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e48:	f043 0202 	orr.w	r2, r3, #2
 8016e4c:	81a2      	strh	r2, [r4, #12]
 8016e4e:	2200      	movs	r2, #0
 8016e50:	60a2      	str	r2, [r4, #8]
 8016e52:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8016e56:	6022      	str	r2, [r4, #0]
 8016e58:	6122      	str	r2, [r4, #16]
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	6162      	str	r2, [r4, #20]
 8016e5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016e60:	07d6      	lsls	r6, r2, #31
 8016e62:	d404      	bmi.n	8016e6e <setvbuf+0xde>
 8016e64:	0598      	lsls	r0, r3, #22
 8016e66:	d402      	bmi.n	8016e6e <setvbuf+0xde>
 8016e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016e6a:	f000 f9eb 	bl	8017244 <__retarget_lock_release_recursive>
 8016e6e:	4628      	mov	r0, r5
 8016e70:	b003      	add	sp, #12
 8016e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e76:	2e00      	cmp	r6, #0
 8016e78:	d0d8      	beq.n	8016e2c <setvbuf+0x9c>
 8016e7a:	6a3b      	ldr	r3, [r7, #32]
 8016e7c:	b913      	cbnz	r3, 8016e84 <setvbuf+0xf4>
 8016e7e:	4638      	mov	r0, r7
 8016e80:	f7ff fece 	bl	8016c20 <__sinit>
 8016e84:	f1b8 0f01 	cmp.w	r8, #1
 8016e88:	bf08      	it	eq
 8016e8a:	89a3      	ldrheq	r3, [r4, #12]
 8016e8c:	6026      	str	r6, [r4, #0]
 8016e8e:	bf04      	itt	eq
 8016e90:	f043 0301 	orreq.w	r3, r3, #1
 8016e94:	81a3      	strheq	r3, [r4, #12]
 8016e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e9a:	f013 0208 	ands.w	r2, r3, #8
 8016e9e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016ea2:	d01e      	beq.n	8016ee2 <setvbuf+0x152>
 8016ea4:	07d9      	lsls	r1, r3, #31
 8016ea6:	bf41      	itttt	mi
 8016ea8:	2200      	movmi	r2, #0
 8016eaa:	426d      	negmi	r5, r5
 8016eac:	60a2      	strmi	r2, [r4, #8]
 8016eae:	61a5      	strmi	r5, [r4, #24]
 8016eb0:	bf58      	it	pl
 8016eb2:	60a5      	strpl	r5, [r4, #8]
 8016eb4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016eb6:	07d2      	lsls	r2, r2, #31
 8016eb8:	d401      	bmi.n	8016ebe <setvbuf+0x12e>
 8016eba:	059b      	lsls	r3, r3, #22
 8016ebc:	d513      	bpl.n	8016ee6 <setvbuf+0x156>
 8016ebe:	2500      	movs	r5, #0
 8016ec0:	e7d5      	b.n	8016e6e <setvbuf+0xde>
 8016ec2:	4648      	mov	r0, r9
 8016ec4:	f7ff fd62 	bl	801698c <malloc>
 8016ec8:	4606      	mov	r6, r0
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	d0b8      	beq.n	8016e40 <setvbuf+0xb0>
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016ed4:	81a3      	strh	r3, [r4, #12]
 8016ed6:	464d      	mov	r5, r9
 8016ed8:	e7cf      	b.n	8016e7a <setvbuf+0xea>
 8016eda:	2500      	movs	r5, #0
 8016edc:	e7b2      	b.n	8016e44 <setvbuf+0xb4>
 8016ede:	46a9      	mov	r9, r5
 8016ee0:	e7f5      	b.n	8016ece <setvbuf+0x13e>
 8016ee2:	60a2      	str	r2, [r4, #8]
 8016ee4:	e7e6      	b.n	8016eb4 <setvbuf+0x124>
 8016ee6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ee8:	f000 f9ac 	bl	8017244 <__retarget_lock_release_recursive>
 8016eec:	e7e7      	b.n	8016ebe <setvbuf+0x12e>
 8016eee:	f04f 35ff 	mov.w	r5, #4294967295
 8016ef2:	e7bc      	b.n	8016e6e <setvbuf+0xde>
 8016ef4:	20000094 	.word	0x20000094

08016ef8 <siprintf>:
 8016ef8:	b40e      	push	{r1, r2, r3}
 8016efa:	b500      	push	{lr}
 8016efc:	b09c      	sub	sp, #112	@ 0x70
 8016efe:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f00:	9002      	str	r0, [sp, #8]
 8016f02:	9006      	str	r0, [sp, #24]
 8016f04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f08:	4809      	ldr	r0, [pc, #36]	@ (8016f30 <siprintf+0x38>)
 8016f0a:	9107      	str	r1, [sp, #28]
 8016f0c:	9104      	str	r1, [sp, #16]
 8016f0e:	4909      	ldr	r1, [pc, #36]	@ (8016f34 <siprintf+0x3c>)
 8016f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f14:	9105      	str	r1, [sp, #20]
 8016f16:	6800      	ldr	r0, [r0, #0]
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	a902      	add	r1, sp, #8
 8016f1c:	f000 fa50 	bl	80173c0 <_svfiprintf_r>
 8016f20:	9b02      	ldr	r3, [sp, #8]
 8016f22:	2200      	movs	r2, #0
 8016f24:	701a      	strb	r2, [r3, #0]
 8016f26:	b01c      	add	sp, #112	@ 0x70
 8016f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f2c:	b003      	add	sp, #12
 8016f2e:	4770      	bx	lr
 8016f30:	20000094 	.word	0x20000094
 8016f34:	ffff0208 	.word	0xffff0208

08016f38 <__sread>:
 8016f38:	b510      	push	{r4, lr}
 8016f3a:	460c      	mov	r4, r1
 8016f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f40:	f000 f920 	bl	8017184 <_read_r>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	bfab      	itete	ge
 8016f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8016f4c:	181b      	addge	r3, r3, r0
 8016f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f52:	bfac      	ite	ge
 8016f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f56:	81a3      	strhlt	r3, [r4, #12]
 8016f58:	bd10      	pop	{r4, pc}

08016f5a <__swrite>:
 8016f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5e:	461f      	mov	r7, r3
 8016f60:	898b      	ldrh	r3, [r1, #12]
 8016f62:	05db      	lsls	r3, r3, #23
 8016f64:	4605      	mov	r5, r0
 8016f66:	460c      	mov	r4, r1
 8016f68:	4616      	mov	r6, r2
 8016f6a:	d505      	bpl.n	8016f78 <__swrite+0x1e>
 8016f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f70:	2302      	movs	r3, #2
 8016f72:	2200      	movs	r2, #0
 8016f74:	f000 f8f4 	bl	8017160 <_lseek_r>
 8016f78:	89a3      	ldrh	r3, [r4, #12]
 8016f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f82:	81a3      	strh	r3, [r4, #12]
 8016f84:	4632      	mov	r2, r6
 8016f86:	463b      	mov	r3, r7
 8016f88:	4628      	mov	r0, r5
 8016f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8e:	f000 b91b 	b.w	80171c8 <_write_r>

08016f92 <__sseek>:
 8016f92:	b510      	push	{r4, lr}
 8016f94:	460c      	mov	r4, r1
 8016f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f9a:	f000 f8e1 	bl	8017160 <_lseek_r>
 8016f9e:	1c43      	adds	r3, r0, #1
 8016fa0:	89a3      	ldrh	r3, [r4, #12]
 8016fa2:	bf15      	itete	ne
 8016fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016fae:	81a3      	strheq	r3, [r4, #12]
 8016fb0:	bf18      	it	ne
 8016fb2:	81a3      	strhne	r3, [r4, #12]
 8016fb4:	bd10      	pop	{r4, pc}

08016fb6 <__sclose>:
 8016fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fba:	f000 b8c1 	b.w	8017140 <_close_r>

08016fbe <__swbuf_r>:
 8016fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc0:	460e      	mov	r6, r1
 8016fc2:	4614      	mov	r4, r2
 8016fc4:	4605      	mov	r5, r0
 8016fc6:	b118      	cbz	r0, 8016fd0 <__swbuf_r+0x12>
 8016fc8:	6a03      	ldr	r3, [r0, #32]
 8016fca:	b90b      	cbnz	r3, 8016fd0 <__swbuf_r+0x12>
 8016fcc:	f7ff fe28 	bl	8016c20 <__sinit>
 8016fd0:	69a3      	ldr	r3, [r4, #24]
 8016fd2:	60a3      	str	r3, [r4, #8]
 8016fd4:	89a3      	ldrh	r3, [r4, #12]
 8016fd6:	071a      	lsls	r2, r3, #28
 8016fd8:	d501      	bpl.n	8016fde <__swbuf_r+0x20>
 8016fda:	6923      	ldr	r3, [r4, #16]
 8016fdc:	b943      	cbnz	r3, 8016ff0 <__swbuf_r+0x32>
 8016fde:	4621      	mov	r1, r4
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	f000 f82b 	bl	801703c <__swsetup_r>
 8016fe6:	b118      	cbz	r0, 8016ff0 <__swbuf_r+0x32>
 8016fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8016fec:	4638      	mov	r0, r7
 8016fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ff0:	6823      	ldr	r3, [r4, #0]
 8016ff2:	6922      	ldr	r2, [r4, #16]
 8016ff4:	1a98      	subs	r0, r3, r2
 8016ff6:	6963      	ldr	r3, [r4, #20]
 8016ff8:	b2f6      	uxtb	r6, r6
 8016ffa:	4283      	cmp	r3, r0
 8016ffc:	4637      	mov	r7, r6
 8016ffe:	dc05      	bgt.n	801700c <__swbuf_r+0x4e>
 8017000:	4621      	mov	r1, r4
 8017002:	4628      	mov	r0, r5
 8017004:	f000 fe2c 	bl	8017c60 <_fflush_r>
 8017008:	2800      	cmp	r0, #0
 801700a:	d1ed      	bne.n	8016fe8 <__swbuf_r+0x2a>
 801700c:	68a3      	ldr	r3, [r4, #8]
 801700e:	3b01      	subs	r3, #1
 8017010:	60a3      	str	r3, [r4, #8]
 8017012:	6823      	ldr	r3, [r4, #0]
 8017014:	1c5a      	adds	r2, r3, #1
 8017016:	6022      	str	r2, [r4, #0]
 8017018:	701e      	strb	r6, [r3, #0]
 801701a:	6962      	ldr	r2, [r4, #20]
 801701c:	1c43      	adds	r3, r0, #1
 801701e:	429a      	cmp	r2, r3
 8017020:	d004      	beq.n	801702c <__swbuf_r+0x6e>
 8017022:	89a3      	ldrh	r3, [r4, #12]
 8017024:	07db      	lsls	r3, r3, #31
 8017026:	d5e1      	bpl.n	8016fec <__swbuf_r+0x2e>
 8017028:	2e0a      	cmp	r6, #10
 801702a:	d1df      	bne.n	8016fec <__swbuf_r+0x2e>
 801702c:	4621      	mov	r1, r4
 801702e:	4628      	mov	r0, r5
 8017030:	f000 fe16 	bl	8017c60 <_fflush_r>
 8017034:	2800      	cmp	r0, #0
 8017036:	d0d9      	beq.n	8016fec <__swbuf_r+0x2e>
 8017038:	e7d6      	b.n	8016fe8 <__swbuf_r+0x2a>
	...

0801703c <__swsetup_r>:
 801703c:	b538      	push	{r3, r4, r5, lr}
 801703e:	4b29      	ldr	r3, [pc, #164]	@ (80170e4 <__swsetup_r+0xa8>)
 8017040:	4605      	mov	r5, r0
 8017042:	6818      	ldr	r0, [r3, #0]
 8017044:	460c      	mov	r4, r1
 8017046:	b118      	cbz	r0, 8017050 <__swsetup_r+0x14>
 8017048:	6a03      	ldr	r3, [r0, #32]
 801704a:	b90b      	cbnz	r3, 8017050 <__swsetup_r+0x14>
 801704c:	f7ff fde8 	bl	8016c20 <__sinit>
 8017050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017054:	0719      	lsls	r1, r3, #28
 8017056:	d422      	bmi.n	801709e <__swsetup_r+0x62>
 8017058:	06da      	lsls	r2, r3, #27
 801705a:	d407      	bmi.n	801706c <__swsetup_r+0x30>
 801705c:	2209      	movs	r2, #9
 801705e:	602a      	str	r2, [r5, #0]
 8017060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017064:	81a3      	strh	r3, [r4, #12]
 8017066:	f04f 30ff 	mov.w	r0, #4294967295
 801706a:	e033      	b.n	80170d4 <__swsetup_r+0x98>
 801706c:	0758      	lsls	r0, r3, #29
 801706e:	d512      	bpl.n	8017096 <__swsetup_r+0x5a>
 8017070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017072:	b141      	cbz	r1, 8017086 <__swsetup_r+0x4a>
 8017074:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017078:	4299      	cmp	r1, r3
 801707a:	d002      	beq.n	8017082 <__swsetup_r+0x46>
 801707c:	4628      	mov	r0, r5
 801707e:	f000 f8f9 	bl	8017274 <_free_r>
 8017082:	2300      	movs	r3, #0
 8017084:	6363      	str	r3, [r4, #52]	@ 0x34
 8017086:	89a3      	ldrh	r3, [r4, #12]
 8017088:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801708c:	81a3      	strh	r3, [r4, #12]
 801708e:	2300      	movs	r3, #0
 8017090:	6063      	str	r3, [r4, #4]
 8017092:	6923      	ldr	r3, [r4, #16]
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	89a3      	ldrh	r3, [r4, #12]
 8017098:	f043 0308 	orr.w	r3, r3, #8
 801709c:	81a3      	strh	r3, [r4, #12]
 801709e:	6923      	ldr	r3, [r4, #16]
 80170a0:	b94b      	cbnz	r3, 80170b6 <__swsetup_r+0x7a>
 80170a2:	89a3      	ldrh	r3, [r4, #12]
 80170a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80170a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80170ac:	d003      	beq.n	80170b6 <__swsetup_r+0x7a>
 80170ae:	4621      	mov	r1, r4
 80170b0:	4628      	mov	r0, r5
 80170b2:	f000 fe23 	bl	8017cfc <__smakebuf_r>
 80170b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170ba:	f013 0201 	ands.w	r2, r3, #1
 80170be:	d00a      	beq.n	80170d6 <__swsetup_r+0x9a>
 80170c0:	2200      	movs	r2, #0
 80170c2:	60a2      	str	r2, [r4, #8]
 80170c4:	6962      	ldr	r2, [r4, #20]
 80170c6:	4252      	negs	r2, r2
 80170c8:	61a2      	str	r2, [r4, #24]
 80170ca:	6922      	ldr	r2, [r4, #16]
 80170cc:	b942      	cbnz	r2, 80170e0 <__swsetup_r+0xa4>
 80170ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80170d2:	d1c5      	bne.n	8017060 <__swsetup_r+0x24>
 80170d4:	bd38      	pop	{r3, r4, r5, pc}
 80170d6:	0799      	lsls	r1, r3, #30
 80170d8:	bf58      	it	pl
 80170da:	6962      	ldrpl	r2, [r4, #20]
 80170dc:	60a2      	str	r2, [r4, #8]
 80170de:	e7f4      	b.n	80170ca <__swsetup_r+0x8e>
 80170e0:	2000      	movs	r0, #0
 80170e2:	e7f7      	b.n	80170d4 <__swsetup_r+0x98>
 80170e4:	20000094 	.word	0x20000094

080170e8 <memset>:
 80170e8:	4402      	add	r2, r0
 80170ea:	4603      	mov	r3, r0
 80170ec:	4293      	cmp	r3, r2
 80170ee:	d100      	bne.n	80170f2 <memset+0xa>
 80170f0:	4770      	bx	lr
 80170f2:	f803 1b01 	strb.w	r1, [r3], #1
 80170f6:	e7f9      	b.n	80170ec <memset+0x4>

080170f8 <strchr>:
 80170f8:	b2c9      	uxtb	r1, r1
 80170fa:	4603      	mov	r3, r0
 80170fc:	4618      	mov	r0, r3
 80170fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017102:	b112      	cbz	r2, 801710a <strchr+0x12>
 8017104:	428a      	cmp	r2, r1
 8017106:	d1f9      	bne.n	80170fc <strchr+0x4>
 8017108:	4770      	bx	lr
 801710a:	2900      	cmp	r1, #0
 801710c:	bf18      	it	ne
 801710e:	2000      	movne	r0, #0
 8017110:	4770      	bx	lr

08017112 <strrchr>:
 8017112:	b538      	push	{r3, r4, r5, lr}
 8017114:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8017118:	4603      	mov	r3, r0
 801711a:	d10e      	bne.n	801713a <strrchr+0x28>
 801711c:	4621      	mov	r1, r4
 801711e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017122:	f7ff bfe9 	b.w	80170f8 <strchr>
 8017126:	1c43      	adds	r3, r0, #1
 8017128:	4605      	mov	r5, r0
 801712a:	4621      	mov	r1, r4
 801712c:	4618      	mov	r0, r3
 801712e:	f7ff ffe3 	bl	80170f8 <strchr>
 8017132:	2800      	cmp	r0, #0
 8017134:	d1f7      	bne.n	8017126 <strrchr+0x14>
 8017136:	4628      	mov	r0, r5
 8017138:	bd38      	pop	{r3, r4, r5, pc}
 801713a:	2500      	movs	r5, #0
 801713c:	e7f5      	b.n	801712a <strrchr+0x18>
	...

08017140 <_close_r>:
 8017140:	b538      	push	{r3, r4, r5, lr}
 8017142:	4d06      	ldr	r5, [pc, #24]	@ (801715c <_close_r+0x1c>)
 8017144:	2300      	movs	r3, #0
 8017146:	4604      	mov	r4, r0
 8017148:	4608      	mov	r0, r1
 801714a:	602b      	str	r3, [r5, #0]
 801714c:	f7f2 fff0 	bl	800a130 <_close>
 8017150:	1c43      	adds	r3, r0, #1
 8017152:	d102      	bne.n	801715a <_close_r+0x1a>
 8017154:	682b      	ldr	r3, [r5, #0]
 8017156:	b103      	cbz	r3, 801715a <_close_r+0x1a>
 8017158:	6023      	str	r3, [r4, #0]
 801715a:	bd38      	pop	{r3, r4, r5, pc}
 801715c:	20000a28 	.word	0x20000a28

08017160 <_lseek_r>:
 8017160:	b538      	push	{r3, r4, r5, lr}
 8017162:	4d07      	ldr	r5, [pc, #28]	@ (8017180 <_lseek_r+0x20>)
 8017164:	4604      	mov	r4, r0
 8017166:	4608      	mov	r0, r1
 8017168:	4611      	mov	r1, r2
 801716a:	2200      	movs	r2, #0
 801716c:	602a      	str	r2, [r5, #0]
 801716e:	461a      	mov	r2, r3
 8017170:	f7f3 f805 	bl	800a17e <_lseek>
 8017174:	1c43      	adds	r3, r0, #1
 8017176:	d102      	bne.n	801717e <_lseek_r+0x1e>
 8017178:	682b      	ldr	r3, [r5, #0]
 801717a:	b103      	cbz	r3, 801717e <_lseek_r+0x1e>
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	bd38      	pop	{r3, r4, r5, pc}
 8017180:	20000a28 	.word	0x20000a28

08017184 <_read_r>:
 8017184:	b538      	push	{r3, r4, r5, lr}
 8017186:	4d07      	ldr	r5, [pc, #28]	@ (80171a4 <_read_r+0x20>)
 8017188:	4604      	mov	r4, r0
 801718a:	4608      	mov	r0, r1
 801718c:	4611      	mov	r1, r2
 801718e:	2200      	movs	r2, #0
 8017190:	602a      	str	r2, [r5, #0]
 8017192:	461a      	mov	r2, r3
 8017194:	f7f2 ff93 	bl	800a0be <_read>
 8017198:	1c43      	adds	r3, r0, #1
 801719a:	d102      	bne.n	80171a2 <_read_r+0x1e>
 801719c:	682b      	ldr	r3, [r5, #0]
 801719e:	b103      	cbz	r3, 80171a2 <_read_r+0x1e>
 80171a0:	6023      	str	r3, [r4, #0]
 80171a2:	bd38      	pop	{r3, r4, r5, pc}
 80171a4:	20000a28 	.word	0x20000a28

080171a8 <_sbrk_r>:
 80171a8:	b538      	push	{r3, r4, r5, lr}
 80171aa:	4d06      	ldr	r5, [pc, #24]	@ (80171c4 <_sbrk_r+0x1c>)
 80171ac:	2300      	movs	r3, #0
 80171ae:	4604      	mov	r4, r0
 80171b0:	4608      	mov	r0, r1
 80171b2:	602b      	str	r3, [r5, #0]
 80171b4:	f7f2 fff0 	bl	800a198 <_sbrk>
 80171b8:	1c43      	adds	r3, r0, #1
 80171ba:	d102      	bne.n	80171c2 <_sbrk_r+0x1a>
 80171bc:	682b      	ldr	r3, [r5, #0]
 80171be:	b103      	cbz	r3, 80171c2 <_sbrk_r+0x1a>
 80171c0:	6023      	str	r3, [r4, #0]
 80171c2:	bd38      	pop	{r3, r4, r5, pc}
 80171c4:	20000a28 	.word	0x20000a28

080171c8 <_write_r>:
 80171c8:	b538      	push	{r3, r4, r5, lr}
 80171ca:	4d07      	ldr	r5, [pc, #28]	@ (80171e8 <_write_r+0x20>)
 80171cc:	4604      	mov	r4, r0
 80171ce:	4608      	mov	r0, r1
 80171d0:	4611      	mov	r1, r2
 80171d2:	2200      	movs	r2, #0
 80171d4:	602a      	str	r2, [r5, #0]
 80171d6:	461a      	mov	r2, r3
 80171d8:	f7f2 ff8e 	bl	800a0f8 <_write>
 80171dc:	1c43      	adds	r3, r0, #1
 80171de:	d102      	bne.n	80171e6 <_write_r+0x1e>
 80171e0:	682b      	ldr	r3, [r5, #0]
 80171e2:	b103      	cbz	r3, 80171e6 <_write_r+0x1e>
 80171e4:	6023      	str	r3, [r4, #0]
 80171e6:	bd38      	pop	{r3, r4, r5, pc}
 80171e8:	20000a28 	.word	0x20000a28

080171ec <__errno>:
 80171ec:	4b01      	ldr	r3, [pc, #4]	@ (80171f4 <__errno+0x8>)
 80171ee:	6818      	ldr	r0, [r3, #0]
 80171f0:	4770      	bx	lr
 80171f2:	bf00      	nop
 80171f4:	20000094 	.word	0x20000094

080171f8 <__libc_init_array>:
 80171f8:	b570      	push	{r4, r5, r6, lr}
 80171fa:	4d0d      	ldr	r5, [pc, #52]	@ (8017230 <__libc_init_array+0x38>)
 80171fc:	4c0d      	ldr	r4, [pc, #52]	@ (8017234 <__libc_init_array+0x3c>)
 80171fe:	1b64      	subs	r4, r4, r5
 8017200:	10a4      	asrs	r4, r4, #2
 8017202:	2600      	movs	r6, #0
 8017204:	42a6      	cmp	r6, r4
 8017206:	d109      	bne.n	801721c <__libc_init_array+0x24>
 8017208:	4d0b      	ldr	r5, [pc, #44]	@ (8017238 <__libc_init_array+0x40>)
 801720a:	4c0c      	ldr	r4, [pc, #48]	@ (801723c <__libc_init_array+0x44>)
 801720c:	f001 fdc6 	bl	8018d9c <_init>
 8017210:	1b64      	subs	r4, r4, r5
 8017212:	10a4      	asrs	r4, r4, #2
 8017214:	2600      	movs	r6, #0
 8017216:	42a6      	cmp	r6, r4
 8017218:	d105      	bne.n	8017226 <__libc_init_array+0x2e>
 801721a:	bd70      	pop	{r4, r5, r6, pc}
 801721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017220:	4798      	blx	r3
 8017222:	3601      	adds	r6, #1
 8017224:	e7ee      	b.n	8017204 <__libc_init_array+0xc>
 8017226:	f855 3b04 	ldr.w	r3, [r5], #4
 801722a:	4798      	blx	r3
 801722c:	3601      	adds	r6, #1
 801722e:	e7f2      	b.n	8017216 <__libc_init_array+0x1e>
 8017230:	08019f20 	.word	0x08019f20
 8017234:	08019f20 	.word	0x08019f20
 8017238:	08019f20 	.word	0x08019f20
 801723c:	08019f24 	.word	0x08019f24

08017240 <__retarget_lock_init_recursive>:
 8017240:	4770      	bx	lr

08017242 <__retarget_lock_acquire_recursive>:
 8017242:	4770      	bx	lr

08017244 <__retarget_lock_release_recursive>:
 8017244:	4770      	bx	lr

08017246 <__aeabi_memcpy>:
 8017246:	f000 b800 	b.w	801724a <memcpy>

0801724a <memcpy>:
 801724a:	440a      	add	r2, r1
 801724c:	4291      	cmp	r1, r2
 801724e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017252:	d100      	bne.n	8017256 <memcpy+0xc>
 8017254:	4770      	bx	lr
 8017256:	b510      	push	{r4, lr}
 8017258:	f811 4b01 	ldrb.w	r4, [r1], #1
 801725c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017260:	4291      	cmp	r1, r2
 8017262:	d1f9      	bne.n	8017258 <memcpy+0xe>
 8017264:	bd10      	pop	{r4, pc}

08017266 <abort>:
 8017266:	b508      	push	{r3, lr}
 8017268:	2006      	movs	r0, #6
 801726a:	f000 fdc5 	bl	8017df8 <raise>
 801726e:	2001      	movs	r0, #1
 8017270:	f7f2 ff1a 	bl	800a0a8 <_exit>

08017274 <_free_r>:
 8017274:	b538      	push	{r3, r4, r5, lr}
 8017276:	4605      	mov	r5, r0
 8017278:	2900      	cmp	r1, #0
 801727a:	d041      	beq.n	8017300 <_free_r+0x8c>
 801727c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017280:	1f0c      	subs	r4, r1, #4
 8017282:	2b00      	cmp	r3, #0
 8017284:	bfb8      	it	lt
 8017286:	18e4      	addlt	r4, r4, r3
 8017288:	f7ff fc32 	bl	8016af0 <__malloc_lock>
 801728c:	4a1d      	ldr	r2, [pc, #116]	@ (8017304 <_free_r+0x90>)
 801728e:	6813      	ldr	r3, [r2, #0]
 8017290:	b933      	cbnz	r3, 80172a0 <_free_r+0x2c>
 8017292:	6063      	str	r3, [r4, #4]
 8017294:	6014      	str	r4, [r2, #0]
 8017296:	4628      	mov	r0, r5
 8017298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801729c:	f7ff bc2e 	b.w	8016afc <__malloc_unlock>
 80172a0:	42a3      	cmp	r3, r4
 80172a2:	d908      	bls.n	80172b6 <_free_r+0x42>
 80172a4:	6820      	ldr	r0, [r4, #0]
 80172a6:	1821      	adds	r1, r4, r0
 80172a8:	428b      	cmp	r3, r1
 80172aa:	bf01      	itttt	eq
 80172ac:	6819      	ldreq	r1, [r3, #0]
 80172ae:	685b      	ldreq	r3, [r3, #4]
 80172b0:	1809      	addeq	r1, r1, r0
 80172b2:	6021      	streq	r1, [r4, #0]
 80172b4:	e7ed      	b.n	8017292 <_free_r+0x1e>
 80172b6:	461a      	mov	r2, r3
 80172b8:	685b      	ldr	r3, [r3, #4]
 80172ba:	b10b      	cbz	r3, 80172c0 <_free_r+0x4c>
 80172bc:	42a3      	cmp	r3, r4
 80172be:	d9fa      	bls.n	80172b6 <_free_r+0x42>
 80172c0:	6811      	ldr	r1, [r2, #0]
 80172c2:	1850      	adds	r0, r2, r1
 80172c4:	42a0      	cmp	r0, r4
 80172c6:	d10b      	bne.n	80172e0 <_free_r+0x6c>
 80172c8:	6820      	ldr	r0, [r4, #0]
 80172ca:	4401      	add	r1, r0
 80172cc:	1850      	adds	r0, r2, r1
 80172ce:	4283      	cmp	r3, r0
 80172d0:	6011      	str	r1, [r2, #0]
 80172d2:	d1e0      	bne.n	8017296 <_free_r+0x22>
 80172d4:	6818      	ldr	r0, [r3, #0]
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	6053      	str	r3, [r2, #4]
 80172da:	4408      	add	r0, r1
 80172dc:	6010      	str	r0, [r2, #0]
 80172de:	e7da      	b.n	8017296 <_free_r+0x22>
 80172e0:	d902      	bls.n	80172e8 <_free_r+0x74>
 80172e2:	230c      	movs	r3, #12
 80172e4:	602b      	str	r3, [r5, #0]
 80172e6:	e7d6      	b.n	8017296 <_free_r+0x22>
 80172e8:	6820      	ldr	r0, [r4, #0]
 80172ea:	1821      	adds	r1, r4, r0
 80172ec:	428b      	cmp	r3, r1
 80172ee:	bf04      	itt	eq
 80172f0:	6819      	ldreq	r1, [r3, #0]
 80172f2:	685b      	ldreq	r3, [r3, #4]
 80172f4:	6063      	str	r3, [r4, #4]
 80172f6:	bf04      	itt	eq
 80172f8:	1809      	addeq	r1, r1, r0
 80172fa:	6021      	streq	r1, [r4, #0]
 80172fc:	6054      	str	r4, [r2, #4]
 80172fe:	e7ca      	b.n	8017296 <_free_r+0x22>
 8017300:	bd38      	pop	{r3, r4, r5, pc}
 8017302:	bf00      	nop
 8017304:	200008e8 	.word	0x200008e8

08017308 <__ssputs_r>:
 8017308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801730c:	688e      	ldr	r6, [r1, #8]
 801730e:	461f      	mov	r7, r3
 8017310:	42be      	cmp	r6, r7
 8017312:	680b      	ldr	r3, [r1, #0]
 8017314:	4682      	mov	sl, r0
 8017316:	460c      	mov	r4, r1
 8017318:	4690      	mov	r8, r2
 801731a:	d82d      	bhi.n	8017378 <__ssputs_r+0x70>
 801731c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017320:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017324:	d026      	beq.n	8017374 <__ssputs_r+0x6c>
 8017326:	6965      	ldr	r5, [r4, #20]
 8017328:	6909      	ldr	r1, [r1, #16]
 801732a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801732e:	eba3 0901 	sub.w	r9, r3, r1
 8017332:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017336:	1c7b      	adds	r3, r7, #1
 8017338:	444b      	add	r3, r9
 801733a:	106d      	asrs	r5, r5, #1
 801733c:	429d      	cmp	r5, r3
 801733e:	bf38      	it	cc
 8017340:	461d      	movcc	r5, r3
 8017342:	0553      	lsls	r3, r2, #21
 8017344:	d527      	bpl.n	8017396 <__ssputs_r+0x8e>
 8017346:	4629      	mov	r1, r5
 8017348:	f7ff fb52 	bl	80169f0 <_malloc_r>
 801734c:	4606      	mov	r6, r0
 801734e:	b360      	cbz	r0, 80173aa <__ssputs_r+0xa2>
 8017350:	6921      	ldr	r1, [r4, #16]
 8017352:	464a      	mov	r2, r9
 8017354:	f7ff ff79 	bl	801724a <memcpy>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801735e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017362:	81a3      	strh	r3, [r4, #12]
 8017364:	6126      	str	r6, [r4, #16]
 8017366:	6165      	str	r5, [r4, #20]
 8017368:	444e      	add	r6, r9
 801736a:	eba5 0509 	sub.w	r5, r5, r9
 801736e:	6026      	str	r6, [r4, #0]
 8017370:	60a5      	str	r5, [r4, #8]
 8017372:	463e      	mov	r6, r7
 8017374:	42be      	cmp	r6, r7
 8017376:	d900      	bls.n	801737a <__ssputs_r+0x72>
 8017378:	463e      	mov	r6, r7
 801737a:	6820      	ldr	r0, [r4, #0]
 801737c:	4632      	mov	r2, r6
 801737e:	4641      	mov	r1, r8
 8017380:	f000 fcf8 	bl	8017d74 <memmove>
 8017384:	68a3      	ldr	r3, [r4, #8]
 8017386:	1b9b      	subs	r3, r3, r6
 8017388:	60a3      	str	r3, [r4, #8]
 801738a:	6823      	ldr	r3, [r4, #0]
 801738c:	4433      	add	r3, r6
 801738e:	6023      	str	r3, [r4, #0]
 8017390:	2000      	movs	r0, #0
 8017392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017396:	462a      	mov	r2, r5
 8017398:	f000 fd6c 	bl	8017e74 <_realloc_r>
 801739c:	4606      	mov	r6, r0
 801739e:	2800      	cmp	r0, #0
 80173a0:	d1e0      	bne.n	8017364 <__ssputs_r+0x5c>
 80173a2:	6921      	ldr	r1, [r4, #16]
 80173a4:	4650      	mov	r0, sl
 80173a6:	f7ff ff65 	bl	8017274 <_free_r>
 80173aa:	230c      	movs	r3, #12
 80173ac:	f8ca 3000 	str.w	r3, [sl]
 80173b0:	89a3      	ldrh	r3, [r4, #12]
 80173b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173b6:	81a3      	strh	r3, [r4, #12]
 80173b8:	f04f 30ff 	mov.w	r0, #4294967295
 80173bc:	e7e9      	b.n	8017392 <__ssputs_r+0x8a>
	...

080173c0 <_svfiprintf_r>:
 80173c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173c4:	4698      	mov	r8, r3
 80173c6:	898b      	ldrh	r3, [r1, #12]
 80173c8:	061b      	lsls	r3, r3, #24
 80173ca:	b09d      	sub	sp, #116	@ 0x74
 80173cc:	4607      	mov	r7, r0
 80173ce:	460d      	mov	r5, r1
 80173d0:	4614      	mov	r4, r2
 80173d2:	d510      	bpl.n	80173f6 <_svfiprintf_r+0x36>
 80173d4:	690b      	ldr	r3, [r1, #16]
 80173d6:	b973      	cbnz	r3, 80173f6 <_svfiprintf_r+0x36>
 80173d8:	2140      	movs	r1, #64	@ 0x40
 80173da:	f7ff fb09 	bl	80169f0 <_malloc_r>
 80173de:	6028      	str	r0, [r5, #0]
 80173e0:	6128      	str	r0, [r5, #16]
 80173e2:	b930      	cbnz	r0, 80173f2 <_svfiprintf_r+0x32>
 80173e4:	230c      	movs	r3, #12
 80173e6:	603b      	str	r3, [r7, #0]
 80173e8:	f04f 30ff 	mov.w	r0, #4294967295
 80173ec:	b01d      	add	sp, #116	@ 0x74
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	2340      	movs	r3, #64	@ 0x40
 80173f4:	616b      	str	r3, [r5, #20]
 80173f6:	2300      	movs	r3, #0
 80173f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80173fa:	2320      	movs	r3, #32
 80173fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017400:	f8cd 800c 	str.w	r8, [sp, #12]
 8017404:	2330      	movs	r3, #48	@ 0x30
 8017406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80175a4 <_svfiprintf_r+0x1e4>
 801740a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801740e:	f04f 0901 	mov.w	r9, #1
 8017412:	4623      	mov	r3, r4
 8017414:	469a      	mov	sl, r3
 8017416:	f813 2b01 	ldrb.w	r2, [r3], #1
 801741a:	b10a      	cbz	r2, 8017420 <_svfiprintf_r+0x60>
 801741c:	2a25      	cmp	r2, #37	@ 0x25
 801741e:	d1f9      	bne.n	8017414 <_svfiprintf_r+0x54>
 8017420:	ebba 0b04 	subs.w	fp, sl, r4
 8017424:	d00b      	beq.n	801743e <_svfiprintf_r+0x7e>
 8017426:	465b      	mov	r3, fp
 8017428:	4622      	mov	r2, r4
 801742a:	4629      	mov	r1, r5
 801742c:	4638      	mov	r0, r7
 801742e:	f7ff ff6b 	bl	8017308 <__ssputs_r>
 8017432:	3001      	adds	r0, #1
 8017434:	f000 80a7 	beq.w	8017586 <_svfiprintf_r+0x1c6>
 8017438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801743a:	445a      	add	r2, fp
 801743c:	9209      	str	r2, [sp, #36]	@ 0x24
 801743e:	f89a 3000 	ldrb.w	r3, [sl]
 8017442:	2b00      	cmp	r3, #0
 8017444:	f000 809f 	beq.w	8017586 <_svfiprintf_r+0x1c6>
 8017448:	2300      	movs	r3, #0
 801744a:	f04f 32ff 	mov.w	r2, #4294967295
 801744e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017452:	f10a 0a01 	add.w	sl, sl, #1
 8017456:	9304      	str	r3, [sp, #16]
 8017458:	9307      	str	r3, [sp, #28]
 801745a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801745e:	931a      	str	r3, [sp, #104]	@ 0x68
 8017460:	4654      	mov	r4, sl
 8017462:	2205      	movs	r2, #5
 8017464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017468:	484e      	ldr	r0, [pc, #312]	@ (80175a4 <_svfiprintf_r+0x1e4>)
 801746a:	f7f0 fca9 	bl	8007dc0 <memchr>
 801746e:	9a04      	ldr	r2, [sp, #16]
 8017470:	b9d8      	cbnz	r0, 80174aa <_svfiprintf_r+0xea>
 8017472:	06d0      	lsls	r0, r2, #27
 8017474:	bf44      	itt	mi
 8017476:	2320      	movmi	r3, #32
 8017478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801747c:	0711      	lsls	r1, r2, #28
 801747e:	bf44      	itt	mi
 8017480:	232b      	movmi	r3, #43	@ 0x2b
 8017482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017486:	f89a 3000 	ldrb.w	r3, [sl]
 801748a:	2b2a      	cmp	r3, #42	@ 0x2a
 801748c:	d015      	beq.n	80174ba <_svfiprintf_r+0xfa>
 801748e:	9a07      	ldr	r2, [sp, #28]
 8017490:	4654      	mov	r4, sl
 8017492:	2000      	movs	r0, #0
 8017494:	f04f 0c0a 	mov.w	ip, #10
 8017498:	4621      	mov	r1, r4
 801749a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801749e:	3b30      	subs	r3, #48	@ 0x30
 80174a0:	2b09      	cmp	r3, #9
 80174a2:	d94b      	bls.n	801753c <_svfiprintf_r+0x17c>
 80174a4:	b1b0      	cbz	r0, 80174d4 <_svfiprintf_r+0x114>
 80174a6:	9207      	str	r2, [sp, #28]
 80174a8:	e014      	b.n	80174d4 <_svfiprintf_r+0x114>
 80174aa:	eba0 0308 	sub.w	r3, r0, r8
 80174ae:	fa09 f303 	lsl.w	r3, r9, r3
 80174b2:	4313      	orrs	r3, r2
 80174b4:	9304      	str	r3, [sp, #16]
 80174b6:	46a2      	mov	sl, r4
 80174b8:	e7d2      	b.n	8017460 <_svfiprintf_r+0xa0>
 80174ba:	9b03      	ldr	r3, [sp, #12]
 80174bc:	1d19      	adds	r1, r3, #4
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	9103      	str	r1, [sp, #12]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	bfbb      	ittet	lt
 80174c6:	425b      	neglt	r3, r3
 80174c8:	f042 0202 	orrlt.w	r2, r2, #2
 80174cc:	9307      	strge	r3, [sp, #28]
 80174ce:	9307      	strlt	r3, [sp, #28]
 80174d0:	bfb8      	it	lt
 80174d2:	9204      	strlt	r2, [sp, #16]
 80174d4:	7823      	ldrb	r3, [r4, #0]
 80174d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80174d8:	d10a      	bne.n	80174f0 <_svfiprintf_r+0x130>
 80174da:	7863      	ldrb	r3, [r4, #1]
 80174dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80174de:	d132      	bne.n	8017546 <_svfiprintf_r+0x186>
 80174e0:	9b03      	ldr	r3, [sp, #12]
 80174e2:	1d1a      	adds	r2, r3, #4
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	9203      	str	r2, [sp, #12]
 80174e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174ec:	3402      	adds	r4, #2
 80174ee:	9305      	str	r3, [sp, #20]
 80174f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80175b4 <_svfiprintf_r+0x1f4>
 80174f4:	7821      	ldrb	r1, [r4, #0]
 80174f6:	2203      	movs	r2, #3
 80174f8:	4650      	mov	r0, sl
 80174fa:	f7f0 fc61 	bl	8007dc0 <memchr>
 80174fe:	b138      	cbz	r0, 8017510 <_svfiprintf_r+0x150>
 8017500:	9b04      	ldr	r3, [sp, #16]
 8017502:	eba0 000a 	sub.w	r0, r0, sl
 8017506:	2240      	movs	r2, #64	@ 0x40
 8017508:	4082      	lsls	r2, r0
 801750a:	4313      	orrs	r3, r2
 801750c:	3401      	adds	r4, #1
 801750e:	9304      	str	r3, [sp, #16]
 8017510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017514:	4824      	ldr	r0, [pc, #144]	@ (80175a8 <_svfiprintf_r+0x1e8>)
 8017516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801751a:	2206      	movs	r2, #6
 801751c:	f7f0 fc50 	bl	8007dc0 <memchr>
 8017520:	2800      	cmp	r0, #0
 8017522:	d036      	beq.n	8017592 <_svfiprintf_r+0x1d2>
 8017524:	4b21      	ldr	r3, [pc, #132]	@ (80175ac <_svfiprintf_r+0x1ec>)
 8017526:	bb1b      	cbnz	r3, 8017570 <_svfiprintf_r+0x1b0>
 8017528:	9b03      	ldr	r3, [sp, #12]
 801752a:	3307      	adds	r3, #7
 801752c:	f023 0307 	bic.w	r3, r3, #7
 8017530:	3308      	adds	r3, #8
 8017532:	9303      	str	r3, [sp, #12]
 8017534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017536:	4433      	add	r3, r6
 8017538:	9309      	str	r3, [sp, #36]	@ 0x24
 801753a:	e76a      	b.n	8017412 <_svfiprintf_r+0x52>
 801753c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017540:	460c      	mov	r4, r1
 8017542:	2001      	movs	r0, #1
 8017544:	e7a8      	b.n	8017498 <_svfiprintf_r+0xd8>
 8017546:	2300      	movs	r3, #0
 8017548:	3401      	adds	r4, #1
 801754a:	9305      	str	r3, [sp, #20]
 801754c:	4619      	mov	r1, r3
 801754e:	f04f 0c0a 	mov.w	ip, #10
 8017552:	4620      	mov	r0, r4
 8017554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017558:	3a30      	subs	r2, #48	@ 0x30
 801755a:	2a09      	cmp	r2, #9
 801755c:	d903      	bls.n	8017566 <_svfiprintf_r+0x1a6>
 801755e:	2b00      	cmp	r3, #0
 8017560:	d0c6      	beq.n	80174f0 <_svfiprintf_r+0x130>
 8017562:	9105      	str	r1, [sp, #20]
 8017564:	e7c4      	b.n	80174f0 <_svfiprintf_r+0x130>
 8017566:	fb0c 2101 	mla	r1, ip, r1, r2
 801756a:	4604      	mov	r4, r0
 801756c:	2301      	movs	r3, #1
 801756e:	e7f0      	b.n	8017552 <_svfiprintf_r+0x192>
 8017570:	ab03      	add	r3, sp, #12
 8017572:	9300      	str	r3, [sp, #0]
 8017574:	462a      	mov	r2, r5
 8017576:	4b0e      	ldr	r3, [pc, #56]	@ (80175b0 <_svfiprintf_r+0x1f0>)
 8017578:	a904      	add	r1, sp, #16
 801757a:	4638      	mov	r0, r7
 801757c:	f3af 8000 	nop.w
 8017580:	1c42      	adds	r2, r0, #1
 8017582:	4606      	mov	r6, r0
 8017584:	d1d6      	bne.n	8017534 <_svfiprintf_r+0x174>
 8017586:	89ab      	ldrh	r3, [r5, #12]
 8017588:	065b      	lsls	r3, r3, #25
 801758a:	f53f af2d 	bmi.w	80173e8 <_svfiprintf_r+0x28>
 801758e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017590:	e72c      	b.n	80173ec <_svfiprintf_r+0x2c>
 8017592:	ab03      	add	r3, sp, #12
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	462a      	mov	r2, r5
 8017598:	4b05      	ldr	r3, [pc, #20]	@ (80175b0 <_svfiprintf_r+0x1f0>)
 801759a:	a904      	add	r1, sp, #16
 801759c:	4638      	mov	r0, r7
 801759e:	f000 f9bb 	bl	8017918 <_printf_i>
 80175a2:	e7ed      	b.n	8017580 <_svfiprintf_r+0x1c0>
 80175a4:	08019eb4 	.word	0x08019eb4
 80175a8:	08019ebe 	.word	0x08019ebe
 80175ac:	00000000 	.word	0x00000000
 80175b0:	08017309 	.word	0x08017309
 80175b4:	08019eba 	.word	0x08019eba

080175b8 <__sfputc_r>:
 80175b8:	6893      	ldr	r3, [r2, #8]
 80175ba:	3b01      	subs	r3, #1
 80175bc:	2b00      	cmp	r3, #0
 80175be:	b410      	push	{r4}
 80175c0:	6093      	str	r3, [r2, #8]
 80175c2:	da08      	bge.n	80175d6 <__sfputc_r+0x1e>
 80175c4:	6994      	ldr	r4, [r2, #24]
 80175c6:	42a3      	cmp	r3, r4
 80175c8:	db01      	blt.n	80175ce <__sfputc_r+0x16>
 80175ca:	290a      	cmp	r1, #10
 80175cc:	d103      	bne.n	80175d6 <__sfputc_r+0x1e>
 80175ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175d2:	f7ff bcf4 	b.w	8016fbe <__swbuf_r>
 80175d6:	6813      	ldr	r3, [r2, #0]
 80175d8:	1c58      	adds	r0, r3, #1
 80175da:	6010      	str	r0, [r2, #0]
 80175dc:	7019      	strb	r1, [r3, #0]
 80175de:	4608      	mov	r0, r1
 80175e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175e4:	4770      	bx	lr

080175e6 <__sfputs_r>:
 80175e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e8:	4606      	mov	r6, r0
 80175ea:	460f      	mov	r7, r1
 80175ec:	4614      	mov	r4, r2
 80175ee:	18d5      	adds	r5, r2, r3
 80175f0:	42ac      	cmp	r4, r5
 80175f2:	d101      	bne.n	80175f8 <__sfputs_r+0x12>
 80175f4:	2000      	movs	r0, #0
 80175f6:	e007      	b.n	8017608 <__sfputs_r+0x22>
 80175f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175fc:	463a      	mov	r2, r7
 80175fe:	4630      	mov	r0, r6
 8017600:	f7ff ffda 	bl	80175b8 <__sfputc_r>
 8017604:	1c43      	adds	r3, r0, #1
 8017606:	d1f3      	bne.n	80175f0 <__sfputs_r+0xa>
 8017608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801760c <_vfiprintf_r>:
 801760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017610:	460d      	mov	r5, r1
 8017612:	b09d      	sub	sp, #116	@ 0x74
 8017614:	4614      	mov	r4, r2
 8017616:	4698      	mov	r8, r3
 8017618:	4606      	mov	r6, r0
 801761a:	b118      	cbz	r0, 8017624 <_vfiprintf_r+0x18>
 801761c:	6a03      	ldr	r3, [r0, #32]
 801761e:	b90b      	cbnz	r3, 8017624 <_vfiprintf_r+0x18>
 8017620:	f7ff fafe 	bl	8016c20 <__sinit>
 8017624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017626:	07d9      	lsls	r1, r3, #31
 8017628:	d405      	bmi.n	8017636 <_vfiprintf_r+0x2a>
 801762a:	89ab      	ldrh	r3, [r5, #12]
 801762c:	059a      	lsls	r2, r3, #22
 801762e:	d402      	bmi.n	8017636 <_vfiprintf_r+0x2a>
 8017630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017632:	f7ff fe06 	bl	8017242 <__retarget_lock_acquire_recursive>
 8017636:	89ab      	ldrh	r3, [r5, #12]
 8017638:	071b      	lsls	r3, r3, #28
 801763a:	d501      	bpl.n	8017640 <_vfiprintf_r+0x34>
 801763c:	692b      	ldr	r3, [r5, #16]
 801763e:	b99b      	cbnz	r3, 8017668 <_vfiprintf_r+0x5c>
 8017640:	4629      	mov	r1, r5
 8017642:	4630      	mov	r0, r6
 8017644:	f7ff fcfa 	bl	801703c <__swsetup_r>
 8017648:	b170      	cbz	r0, 8017668 <_vfiprintf_r+0x5c>
 801764a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801764c:	07dc      	lsls	r4, r3, #31
 801764e:	d504      	bpl.n	801765a <_vfiprintf_r+0x4e>
 8017650:	f04f 30ff 	mov.w	r0, #4294967295
 8017654:	b01d      	add	sp, #116	@ 0x74
 8017656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801765a:	89ab      	ldrh	r3, [r5, #12]
 801765c:	0598      	lsls	r0, r3, #22
 801765e:	d4f7      	bmi.n	8017650 <_vfiprintf_r+0x44>
 8017660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017662:	f7ff fdef 	bl	8017244 <__retarget_lock_release_recursive>
 8017666:	e7f3      	b.n	8017650 <_vfiprintf_r+0x44>
 8017668:	2300      	movs	r3, #0
 801766a:	9309      	str	r3, [sp, #36]	@ 0x24
 801766c:	2320      	movs	r3, #32
 801766e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017672:	f8cd 800c 	str.w	r8, [sp, #12]
 8017676:	2330      	movs	r3, #48	@ 0x30
 8017678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017828 <_vfiprintf_r+0x21c>
 801767c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017680:	f04f 0901 	mov.w	r9, #1
 8017684:	4623      	mov	r3, r4
 8017686:	469a      	mov	sl, r3
 8017688:	f813 2b01 	ldrb.w	r2, [r3], #1
 801768c:	b10a      	cbz	r2, 8017692 <_vfiprintf_r+0x86>
 801768e:	2a25      	cmp	r2, #37	@ 0x25
 8017690:	d1f9      	bne.n	8017686 <_vfiprintf_r+0x7a>
 8017692:	ebba 0b04 	subs.w	fp, sl, r4
 8017696:	d00b      	beq.n	80176b0 <_vfiprintf_r+0xa4>
 8017698:	465b      	mov	r3, fp
 801769a:	4622      	mov	r2, r4
 801769c:	4629      	mov	r1, r5
 801769e:	4630      	mov	r0, r6
 80176a0:	f7ff ffa1 	bl	80175e6 <__sfputs_r>
 80176a4:	3001      	adds	r0, #1
 80176a6:	f000 80a7 	beq.w	80177f8 <_vfiprintf_r+0x1ec>
 80176aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176ac:	445a      	add	r2, fp
 80176ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80176b0:	f89a 3000 	ldrb.w	r3, [sl]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	f000 809f 	beq.w	80177f8 <_vfiprintf_r+0x1ec>
 80176ba:	2300      	movs	r3, #0
 80176bc:	f04f 32ff 	mov.w	r2, #4294967295
 80176c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176c4:	f10a 0a01 	add.w	sl, sl, #1
 80176c8:	9304      	str	r3, [sp, #16]
 80176ca:	9307      	str	r3, [sp, #28]
 80176cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80176d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80176d2:	4654      	mov	r4, sl
 80176d4:	2205      	movs	r2, #5
 80176d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176da:	4853      	ldr	r0, [pc, #332]	@ (8017828 <_vfiprintf_r+0x21c>)
 80176dc:	f7f0 fb70 	bl	8007dc0 <memchr>
 80176e0:	9a04      	ldr	r2, [sp, #16]
 80176e2:	b9d8      	cbnz	r0, 801771c <_vfiprintf_r+0x110>
 80176e4:	06d1      	lsls	r1, r2, #27
 80176e6:	bf44      	itt	mi
 80176e8:	2320      	movmi	r3, #32
 80176ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80176ee:	0713      	lsls	r3, r2, #28
 80176f0:	bf44      	itt	mi
 80176f2:	232b      	movmi	r3, #43	@ 0x2b
 80176f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80176f8:	f89a 3000 	ldrb.w	r3, [sl]
 80176fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80176fe:	d015      	beq.n	801772c <_vfiprintf_r+0x120>
 8017700:	9a07      	ldr	r2, [sp, #28]
 8017702:	4654      	mov	r4, sl
 8017704:	2000      	movs	r0, #0
 8017706:	f04f 0c0a 	mov.w	ip, #10
 801770a:	4621      	mov	r1, r4
 801770c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017710:	3b30      	subs	r3, #48	@ 0x30
 8017712:	2b09      	cmp	r3, #9
 8017714:	d94b      	bls.n	80177ae <_vfiprintf_r+0x1a2>
 8017716:	b1b0      	cbz	r0, 8017746 <_vfiprintf_r+0x13a>
 8017718:	9207      	str	r2, [sp, #28]
 801771a:	e014      	b.n	8017746 <_vfiprintf_r+0x13a>
 801771c:	eba0 0308 	sub.w	r3, r0, r8
 8017720:	fa09 f303 	lsl.w	r3, r9, r3
 8017724:	4313      	orrs	r3, r2
 8017726:	9304      	str	r3, [sp, #16]
 8017728:	46a2      	mov	sl, r4
 801772a:	e7d2      	b.n	80176d2 <_vfiprintf_r+0xc6>
 801772c:	9b03      	ldr	r3, [sp, #12]
 801772e:	1d19      	adds	r1, r3, #4
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	9103      	str	r1, [sp, #12]
 8017734:	2b00      	cmp	r3, #0
 8017736:	bfbb      	ittet	lt
 8017738:	425b      	neglt	r3, r3
 801773a:	f042 0202 	orrlt.w	r2, r2, #2
 801773e:	9307      	strge	r3, [sp, #28]
 8017740:	9307      	strlt	r3, [sp, #28]
 8017742:	bfb8      	it	lt
 8017744:	9204      	strlt	r2, [sp, #16]
 8017746:	7823      	ldrb	r3, [r4, #0]
 8017748:	2b2e      	cmp	r3, #46	@ 0x2e
 801774a:	d10a      	bne.n	8017762 <_vfiprintf_r+0x156>
 801774c:	7863      	ldrb	r3, [r4, #1]
 801774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017750:	d132      	bne.n	80177b8 <_vfiprintf_r+0x1ac>
 8017752:	9b03      	ldr	r3, [sp, #12]
 8017754:	1d1a      	adds	r2, r3, #4
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	9203      	str	r2, [sp, #12]
 801775a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801775e:	3402      	adds	r4, #2
 8017760:	9305      	str	r3, [sp, #20]
 8017762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017838 <_vfiprintf_r+0x22c>
 8017766:	7821      	ldrb	r1, [r4, #0]
 8017768:	2203      	movs	r2, #3
 801776a:	4650      	mov	r0, sl
 801776c:	f7f0 fb28 	bl	8007dc0 <memchr>
 8017770:	b138      	cbz	r0, 8017782 <_vfiprintf_r+0x176>
 8017772:	9b04      	ldr	r3, [sp, #16]
 8017774:	eba0 000a 	sub.w	r0, r0, sl
 8017778:	2240      	movs	r2, #64	@ 0x40
 801777a:	4082      	lsls	r2, r0
 801777c:	4313      	orrs	r3, r2
 801777e:	3401      	adds	r4, #1
 8017780:	9304      	str	r3, [sp, #16]
 8017782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017786:	4829      	ldr	r0, [pc, #164]	@ (801782c <_vfiprintf_r+0x220>)
 8017788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801778c:	2206      	movs	r2, #6
 801778e:	f7f0 fb17 	bl	8007dc0 <memchr>
 8017792:	2800      	cmp	r0, #0
 8017794:	d03f      	beq.n	8017816 <_vfiprintf_r+0x20a>
 8017796:	4b26      	ldr	r3, [pc, #152]	@ (8017830 <_vfiprintf_r+0x224>)
 8017798:	bb1b      	cbnz	r3, 80177e2 <_vfiprintf_r+0x1d6>
 801779a:	9b03      	ldr	r3, [sp, #12]
 801779c:	3307      	adds	r3, #7
 801779e:	f023 0307 	bic.w	r3, r3, #7
 80177a2:	3308      	adds	r3, #8
 80177a4:	9303      	str	r3, [sp, #12]
 80177a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177a8:	443b      	add	r3, r7
 80177aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80177ac:	e76a      	b.n	8017684 <_vfiprintf_r+0x78>
 80177ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80177b2:	460c      	mov	r4, r1
 80177b4:	2001      	movs	r0, #1
 80177b6:	e7a8      	b.n	801770a <_vfiprintf_r+0xfe>
 80177b8:	2300      	movs	r3, #0
 80177ba:	3401      	adds	r4, #1
 80177bc:	9305      	str	r3, [sp, #20]
 80177be:	4619      	mov	r1, r3
 80177c0:	f04f 0c0a 	mov.w	ip, #10
 80177c4:	4620      	mov	r0, r4
 80177c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177ca:	3a30      	subs	r2, #48	@ 0x30
 80177cc:	2a09      	cmp	r2, #9
 80177ce:	d903      	bls.n	80177d8 <_vfiprintf_r+0x1cc>
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d0c6      	beq.n	8017762 <_vfiprintf_r+0x156>
 80177d4:	9105      	str	r1, [sp, #20]
 80177d6:	e7c4      	b.n	8017762 <_vfiprintf_r+0x156>
 80177d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80177dc:	4604      	mov	r4, r0
 80177de:	2301      	movs	r3, #1
 80177e0:	e7f0      	b.n	80177c4 <_vfiprintf_r+0x1b8>
 80177e2:	ab03      	add	r3, sp, #12
 80177e4:	9300      	str	r3, [sp, #0]
 80177e6:	462a      	mov	r2, r5
 80177e8:	4b12      	ldr	r3, [pc, #72]	@ (8017834 <_vfiprintf_r+0x228>)
 80177ea:	a904      	add	r1, sp, #16
 80177ec:	4630      	mov	r0, r6
 80177ee:	f3af 8000 	nop.w
 80177f2:	4607      	mov	r7, r0
 80177f4:	1c78      	adds	r0, r7, #1
 80177f6:	d1d6      	bne.n	80177a6 <_vfiprintf_r+0x19a>
 80177f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177fa:	07d9      	lsls	r1, r3, #31
 80177fc:	d405      	bmi.n	801780a <_vfiprintf_r+0x1fe>
 80177fe:	89ab      	ldrh	r3, [r5, #12]
 8017800:	059a      	lsls	r2, r3, #22
 8017802:	d402      	bmi.n	801780a <_vfiprintf_r+0x1fe>
 8017804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017806:	f7ff fd1d 	bl	8017244 <__retarget_lock_release_recursive>
 801780a:	89ab      	ldrh	r3, [r5, #12]
 801780c:	065b      	lsls	r3, r3, #25
 801780e:	f53f af1f 	bmi.w	8017650 <_vfiprintf_r+0x44>
 8017812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017814:	e71e      	b.n	8017654 <_vfiprintf_r+0x48>
 8017816:	ab03      	add	r3, sp, #12
 8017818:	9300      	str	r3, [sp, #0]
 801781a:	462a      	mov	r2, r5
 801781c:	4b05      	ldr	r3, [pc, #20]	@ (8017834 <_vfiprintf_r+0x228>)
 801781e:	a904      	add	r1, sp, #16
 8017820:	4630      	mov	r0, r6
 8017822:	f000 f879 	bl	8017918 <_printf_i>
 8017826:	e7e4      	b.n	80177f2 <_vfiprintf_r+0x1e6>
 8017828:	08019eb4 	.word	0x08019eb4
 801782c:	08019ebe 	.word	0x08019ebe
 8017830:	00000000 	.word	0x00000000
 8017834:	080175e7 	.word	0x080175e7
 8017838:	08019eba 	.word	0x08019eba

0801783c <_printf_common>:
 801783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017840:	4616      	mov	r6, r2
 8017842:	4698      	mov	r8, r3
 8017844:	688a      	ldr	r2, [r1, #8]
 8017846:	690b      	ldr	r3, [r1, #16]
 8017848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801784c:	4293      	cmp	r3, r2
 801784e:	bfb8      	it	lt
 8017850:	4613      	movlt	r3, r2
 8017852:	6033      	str	r3, [r6, #0]
 8017854:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017858:	4607      	mov	r7, r0
 801785a:	460c      	mov	r4, r1
 801785c:	b10a      	cbz	r2, 8017862 <_printf_common+0x26>
 801785e:	3301      	adds	r3, #1
 8017860:	6033      	str	r3, [r6, #0]
 8017862:	6823      	ldr	r3, [r4, #0]
 8017864:	0699      	lsls	r1, r3, #26
 8017866:	bf42      	ittt	mi
 8017868:	6833      	ldrmi	r3, [r6, #0]
 801786a:	3302      	addmi	r3, #2
 801786c:	6033      	strmi	r3, [r6, #0]
 801786e:	6825      	ldr	r5, [r4, #0]
 8017870:	f015 0506 	ands.w	r5, r5, #6
 8017874:	d106      	bne.n	8017884 <_printf_common+0x48>
 8017876:	f104 0a19 	add.w	sl, r4, #25
 801787a:	68e3      	ldr	r3, [r4, #12]
 801787c:	6832      	ldr	r2, [r6, #0]
 801787e:	1a9b      	subs	r3, r3, r2
 8017880:	42ab      	cmp	r3, r5
 8017882:	dc26      	bgt.n	80178d2 <_printf_common+0x96>
 8017884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017888:	6822      	ldr	r2, [r4, #0]
 801788a:	3b00      	subs	r3, #0
 801788c:	bf18      	it	ne
 801788e:	2301      	movne	r3, #1
 8017890:	0692      	lsls	r2, r2, #26
 8017892:	d42b      	bmi.n	80178ec <_printf_common+0xb0>
 8017894:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017898:	4641      	mov	r1, r8
 801789a:	4638      	mov	r0, r7
 801789c:	47c8      	blx	r9
 801789e:	3001      	adds	r0, #1
 80178a0:	d01e      	beq.n	80178e0 <_printf_common+0xa4>
 80178a2:	6823      	ldr	r3, [r4, #0]
 80178a4:	6922      	ldr	r2, [r4, #16]
 80178a6:	f003 0306 	and.w	r3, r3, #6
 80178aa:	2b04      	cmp	r3, #4
 80178ac:	bf02      	ittt	eq
 80178ae:	68e5      	ldreq	r5, [r4, #12]
 80178b0:	6833      	ldreq	r3, [r6, #0]
 80178b2:	1aed      	subeq	r5, r5, r3
 80178b4:	68a3      	ldr	r3, [r4, #8]
 80178b6:	bf0c      	ite	eq
 80178b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178bc:	2500      	movne	r5, #0
 80178be:	4293      	cmp	r3, r2
 80178c0:	bfc4      	itt	gt
 80178c2:	1a9b      	subgt	r3, r3, r2
 80178c4:	18ed      	addgt	r5, r5, r3
 80178c6:	2600      	movs	r6, #0
 80178c8:	341a      	adds	r4, #26
 80178ca:	42b5      	cmp	r5, r6
 80178cc:	d11a      	bne.n	8017904 <_printf_common+0xc8>
 80178ce:	2000      	movs	r0, #0
 80178d0:	e008      	b.n	80178e4 <_printf_common+0xa8>
 80178d2:	2301      	movs	r3, #1
 80178d4:	4652      	mov	r2, sl
 80178d6:	4641      	mov	r1, r8
 80178d8:	4638      	mov	r0, r7
 80178da:	47c8      	blx	r9
 80178dc:	3001      	adds	r0, #1
 80178de:	d103      	bne.n	80178e8 <_printf_common+0xac>
 80178e0:	f04f 30ff 	mov.w	r0, #4294967295
 80178e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e8:	3501      	adds	r5, #1
 80178ea:	e7c6      	b.n	801787a <_printf_common+0x3e>
 80178ec:	18e1      	adds	r1, r4, r3
 80178ee:	1c5a      	adds	r2, r3, #1
 80178f0:	2030      	movs	r0, #48	@ 0x30
 80178f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80178f6:	4422      	add	r2, r4
 80178f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80178fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017900:	3302      	adds	r3, #2
 8017902:	e7c7      	b.n	8017894 <_printf_common+0x58>
 8017904:	2301      	movs	r3, #1
 8017906:	4622      	mov	r2, r4
 8017908:	4641      	mov	r1, r8
 801790a:	4638      	mov	r0, r7
 801790c:	47c8      	blx	r9
 801790e:	3001      	adds	r0, #1
 8017910:	d0e6      	beq.n	80178e0 <_printf_common+0xa4>
 8017912:	3601      	adds	r6, #1
 8017914:	e7d9      	b.n	80178ca <_printf_common+0x8e>
	...

08017918 <_printf_i>:
 8017918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801791c:	7e0f      	ldrb	r7, [r1, #24]
 801791e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017920:	2f78      	cmp	r7, #120	@ 0x78
 8017922:	4691      	mov	r9, r2
 8017924:	4680      	mov	r8, r0
 8017926:	460c      	mov	r4, r1
 8017928:	469a      	mov	sl, r3
 801792a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801792e:	d807      	bhi.n	8017940 <_printf_i+0x28>
 8017930:	2f62      	cmp	r7, #98	@ 0x62
 8017932:	d80a      	bhi.n	801794a <_printf_i+0x32>
 8017934:	2f00      	cmp	r7, #0
 8017936:	f000 80d2 	beq.w	8017ade <_printf_i+0x1c6>
 801793a:	2f58      	cmp	r7, #88	@ 0x58
 801793c:	f000 80b9 	beq.w	8017ab2 <_printf_i+0x19a>
 8017940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017948:	e03a      	b.n	80179c0 <_printf_i+0xa8>
 801794a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801794e:	2b15      	cmp	r3, #21
 8017950:	d8f6      	bhi.n	8017940 <_printf_i+0x28>
 8017952:	a101      	add	r1, pc, #4	@ (adr r1, 8017958 <_printf_i+0x40>)
 8017954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017958:	080179b1 	.word	0x080179b1
 801795c:	080179c5 	.word	0x080179c5
 8017960:	08017941 	.word	0x08017941
 8017964:	08017941 	.word	0x08017941
 8017968:	08017941 	.word	0x08017941
 801796c:	08017941 	.word	0x08017941
 8017970:	080179c5 	.word	0x080179c5
 8017974:	08017941 	.word	0x08017941
 8017978:	08017941 	.word	0x08017941
 801797c:	08017941 	.word	0x08017941
 8017980:	08017941 	.word	0x08017941
 8017984:	08017ac5 	.word	0x08017ac5
 8017988:	080179ef 	.word	0x080179ef
 801798c:	08017a7f 	.word	0x08017a7f
 8017990:	08017941 	.word	0x08017941
 8017994:	08017941 	.word	0x08017941
 8017998:	08017ae7 	.word	0x08017ae7
 801799c:	08017941 	.word	0x08017941
 80179a0:	080179ef 	.word	0x080179ef
 80179a4:	08017941 	.word	0x08017941
 80179a8:	08017941 	.word	0x08017941
 80179ac:	08017a87 	.word	0x08017a87
 80179b0:	6833      	ldr	r3, [r6, #0]
 80179b2:	1d1a      	adds	r2, r3, #4
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	6032      	str	r2, [r6, #0]
 80179b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80179bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80179c0:	2301      	movs	r3, #1
 80179c2:	e09d      	b.n	8017b00 <_printf_i+0x1e8>
 80179c4:	6833      	ldr	r3, [r6, #0]
 80179c6:	6820      	ldr	r0, [r4, #0]
 80179c8:	1d19      	adds	r1, r3, #4
 80179ca:	6031      	str	r1, [r6, #0]
 80179cc:	0606      	lsls	r6, r0, #24
 80179ce:	d501      	bpl.n	80179d4 <_printf_i+0xbc>
 80179d0:	681d      	ldr	r5, [r3, #0]
 80179d2:	e003      	b.n	80179dc <_printf_i+0xc4>
 80179d4:	0645      	lsls	r5, r0, #25
 80179d6:	d5fb      	bpl.n	80179d0 <_printf_i+0xb8>
 80179d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80179dc:	2d00      	cmp	r5, #0
 80179de:	da03      	bge.n	80179e8 <_printf_i+0xd0>
 80179e0:	232d      	movs	r3, #45	@ 0x2d
 80179e2:	426d      	negs	r5, r5
 80179e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80179e8:	4859      	ldr	r0, [pc, #356]	@ (8017b50 <_printf_i+0x238>)
 80179ea:	230a      	movs	r3, #10
 80179ec:	e011      	b.n	8017a12 <_printf_i+0xfa>
 80179ee:	6821      	ldr	r1, [r4, #0]
 80179f0:	6833      	ldr	r3, [r6, #0]
 80179f2:	0608      	lsls	r0, r1, #24
 80179f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80179f8:	d402      	bmi.n	8017a00 <_printf_i+0xe8>
 80179fa:	0649      	lsls	r1, r1, #25
 80179fc:	bf48      	it	mi
 80179fe:	b2ad      	uxthmi	r5, r5
 8017a00:	2f6f      	cmp	r7, #111	@ 0x6f
 8017a02:	4853      	ldr	r0, [pc, #332]	@ (8017b50 <_printf_i+0x238>)
 8017a04:	6033      	str	r3, [r6, #0]
 8017a06:	bf14      	ite	ne
 8017a08:	230a      	movne	r3, #10
 8017a0a:	2308      	moveq	r3, #8
 8017a0c:	2100      	movs	r1, #0
 8017a0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017a12:	6866      	ldr	r6, [r4, #4]
 8017a14:	60a6      	str	r6, [r4, #8]
 8017a16:	2e00      	cmp	r6, #0
 8017a18:	bfa2      	ittt	ge
 8017a1a:	6821      	ldrge	r1, [r4, #0]
 8017a1c:	f021 0104 	bicge.w	r1, r1, #4
 8017a20:	6021      	strge	r1, [r4, #0]
 8017a22:	b90d      	cbnz	r5, 8017a28 <_printf_i+0x110>
 8017a24:	2e00      	cmp	r6, #0
 8017a26:	d04b      	beq.n	8017ac0 <_printf_i+0x1a8>
 8017a28:	4616      	mov	r6, r2
 8017a2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8017a2e:	fb03 5711 	mls	r7, r3, r1, r5
 8017a32:	5dc7      	ldrb	r7, [r0, r7]
 8017a34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017a38:	462f      	mov	r7, r5
 8017a3a:	42bb      	cmp	r3, r7
 8017a3c:	460d      	mov	r5, r1
 8017a3e:	d9f4      	bls.n	8017a2a <_printf_i+0x112>
 8017a40:	2b08      	cmp	r3, #8
 8017a42:	d10b      	bne.n	8017a5c <_printf_i+0x144>
 8017a44:	6823      	ldr	r3, [r4, #0]
 8017a46:	07df      	lsls	r7, r3, #31
 8017a48:	d508      	bpl.n	8017a5c <_printf_i+0x144>
 8017a4a:	6923      	ldr	r3, [r4, #16]
 8017a4c:	6861      	ldr	r1, [r4, #4]
 8017a4e:	4299      	cmp	r1, r3
 8017a50:	bfde      	ittt	le
 8017a52:	2330      	movle	r3, #48	@ 0x30
 8017a54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017a5c:	1b92      	subs	r2, r2, r6
 8017a5e:	6122      	str	r2, [r4, #16]
 8017a60:	f8cd a000 	str.w	sl, [sp]
 8017a64:	464b      	mov	r3, r9
 8017a66:	aa03      	add	r2, sp, #12
 8017a68:	4621      	mov	r1, r4
 8017a6a:	4640      	mov	r0, r8
 8017a6c:	f7ff fee6 	bl	801783c <_printf_common>
 8017a70:	3001      	adds	r0, #1
 8017a72:	d14a      	bne.n	8017b0a <_printf_i+0x1f2>
 8017a74:	f04f 30ff 	mov.w	r0, #4294967295
 8017a78:	b004      	add	sp, #16
 8017a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	f043 0320 	orr.w	r3, r3, #32
 8017a84:	6023      	str	r3, [r4, #0]
 8017a86:	4833      	ldr	r0, [pc, #204]	@ (8017b54 <_printf_i+0x23c>)
 8017a88:	2778      	movs	r7, #120	@ 0x78
 8017a8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017a8e:	6823      	ldr	r3, [r4, #0]
 8017a90:	6831      	ldr	r1, [r6, #0]
 8017a92:	061f      	lsls	r7, r3, #24
 8017a94:	f851 5b04 	ldr.w	r5, [r1], #4
 8017a98:	d402      	bmi.n	8017aa0 <_printf_i+0x188>
 8017a9a:	065f      	lsls	r7, r3, #25
 8017a9c:	bf48      	it	mi
 8017a9e:	b2ad      	uxthmi	r5, r5
 8017aa0:	6031      	str	r1, [r6, #0]
 8017aa2:	07d9      	lsls	r1, r3, #31
 8017aa4:	bf44      	itt	mi
 8017aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8017aaa:	6023      	strmi	r3, [r4, #0]
 8017aac:	b11d      	cbz	r5, 8017ab6 <_printf_i+0x19e>
 8017aae:	2310      	movs	r3, #16
 8017ab0:	e7ac      	b.n	8017a0c <_printf_i+0xf4>
 8017ab2:	4827      	ldr	r0, [pc, #156]	@ (8017b50 <_printf_i+0x238>)
 8017ab4:	e7e9      	b.n	8017a8a <_printf_i+0x172>
 8017ab6:	6823      	ldr	r3, [r4, #0]
 8017ab8:	f023 0320 	bic.w	r3, r3, #32
 8017abc:	6023      	str	r3, [r4, #0]
 8017abe:	e7f6      	b.n	8017aae <_printf_i+0x196>
 8017ac0:	4616      	mov	r6, r2
 8017ac2:	e7bd      	b.n	8017a40 <_printf_i+0x128>
 8017ac4:	6833      	ldr	r3, [r6, #0]
 8017ac6:	6825      	ldr	r5, [r4, #0]
 8017ac8:	6961      	ldr	r1, [r4, #20]
 8017aca:	1d18      	adds	r0, r3, #4
 8017acc:	6030      	str	r0, [r6, #0]
 8017ace:	062e      	lsls	r6, r5, #24
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	d501      	bpl.n	8017ad8 <_printf_i+0x1c0>
 8017ad4:	6019      	str	r1, [r3, #0]
 8017ad6:	e002      	b.n	8017ade <_printf_i+0x1c6>
 8017ad8:	0668      	lsls	r0, r5, #25
 8017ada:	d5fb      	bpl.n	8017ad4 <_printf_i+0x1bc>
 8017adc:	8019      	strh	r1, [r3, #0]
 8017ade:	2300      	movs	r3, #0
 8017ae0:	6123      	str	r3, [r4, #16]
 8017ae2:	4616      	mov	r6, r2
 8017ae4:	e7bc      	b.n	8017a60 <_printf_i+0x148>
 8017ae6:	6833      	ldr	r3, [r6, #0]
 8017ae8:	1d1a      	adds	r2, r3, #4
 8017aea:	6032      	str	r2, [r6, #0]
 8017aec:	681e      	ldr	r6, [r3, #0]
 8017aee:	6862      	ldr	r2, [r4, #4]
 8017af0:	2100      	movs	r1, #0
 8017af2:	4630      	mov	r0, r6
 8017af4:	f7f0 f964 	bl	8007dc0 <memchr>
 8017af8:	b108      	cbz	r0, 8017afe <_printf_i+0x1e6>
 8017afa:	1b80      	subs	r0, r0, r6
 8017afc:	6060      	str	r0, [r4, #4]
 8017afe:	6863      	ldr	r3, [r4, #4]
 8017b00:	6123      	str	r3, [r4, #16]
 8017b02:	2300      	movs	r3, #0
 8017b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b08:	e7aa      	b.n	8017a60 <_printf_i+0x148>
 8017b0a:	6923      	ldr	r3, [r4, #16]
 8017b0c:	4632      	mov	r2, r6
 8017b0e:	4649      	mov	r1, r9
 8017b10:	4640      	mov	r0, r8
 8017b12:	47d0      	blx	sl
 8017b14:	3001      	adds	r0, #1
 8017b16:	d0ad      	beq.n	8017a74 <_printf_i+0x15c>
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	079b      	lsls	r3, r3, #30
 8017b1c:	d413      	bmi.n	8017b46 <_printf_i+0x22e>
 8017b1e:	68e0      	ldr	r0, [r4, #12]
 8017b20:	9b03      	ldr	r3, [sp, #12]
 8017b22:	4298      	cmp	r0, r3
 8017b24:	bfb8      	it	lt
 8017b26:	4618      	movlt	r0, r3
 8017b28:	e7a6      	b.n	8017a78 <_printf_i+0x160>
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	4632      	mov	r2, r6
 8017b2e:	4649      	mov	r1, r9
 8017b30:	4640      	mov	r0, r8
 8017b32:	47d0      	blx	sl
 8017b34:	3001      	adds	r0, #1
 8017b36:	d09d      	beq.n	8017a74 <_printf_i+0x15c>
 8017b38:	3501      	adds	r5, #1
 8017b3a:	68e3      	ldr	r3, [r4, #12]
 8017b3c:	9903      	ldr	r1, [sp, #12]
 8017b3e:	1a5b      	subs	r3, r3, r1
 8017b40:	42ab      	cmp	r3, r5
 8017b42:	dcf2      	bgt.n	8017b2a <_printf_i+0x212>
 8017b44:	e7eb      	b.n	8017b1e <_printf_i+0x206>
 8017b46:	2500      	movs	r5, #0
 8017b48:	f104 0619 	add.w	r6, r4, #25
 8017b4c:	e7f5      	b.n	8017b3a <_printf_i+0x222>
 8017b4e:	bf00      	nop
 8017b50:	08019ec5 	.word	0x08019ec5
 8017b54:	08019ed6 	.word	0x08019ed6

08017b58 <__sflush_r>:
 8017b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b60:	0716      	lsls	r6, r2, #28
 8017b62:	4605      	mov	r5, r0
 8017b64:	460c      	mov	r4, r1
 8017b66:	d454      	bmi.n	8017c12 <__sflush_r+0xba>
 8017b68:	684b      	ldr	r3, [r1, #4]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	dc02      	bgt.n	8017b74 <__sflush_r+0x1c>
 8017b6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	dd48      	ble.n	8017c06 <__sflush_r+0xae>
 8017b74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b76:	2e00      	cmp	r6, #0
 8017b78:	d045      	beq.n	8017c06 <__sflush_r+0xae>
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017b80:	682f      	ldr	r7, [r5, #0]
 8017b82:	6a21      	ldr	r1, [r4, #32]
 8017b84:	602b      	str	r3, [r5, #0]
 8017b86:	d030      	beq.n	8017bea <__sflush_r+0x92>
 8017b88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017b8a:	89a3      	ldrh	r3, [r4, #12]
 8017b8c:	0759      	lsls	r1, r3, #29
 8017b8e:	d505      	bpl.n	8017b9c <__sflush_r+0x44>
 8017b90:	6863      	ldr	r3, [r4, #4]
 8017b92:	1ad2      	subs	r2, r2, r3
 8017b94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b96:	b10b      	cbz	r3, 8017b9c <__sflush_r+0x44>
 8017b98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017b9a:	1ad2      	subs	r2, r2, r3
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ba0:	6a21      	ldr	r1, [r4, #32]
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	47b0      	blx	r6
 8017ba6:	1c43      	adds	r3, r0, #1
 8017ba8:	89a3      	ldrh	r3, [r4, #12]
 8017baa:	d106      	bne.n	8017bba <__sflush_r+0x62>
 8017bac:	6829      	ldr	r1, [r5, #0]
 8017bae:	291d      	cmp	r1, #29
 8017bb0:	d82b      	bhi.n	8017c0a <__sflush_r+0xb2>
 8017bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8017c5c <__sflush_r+0x104>)
 8017bb4:	410a      	asrs	r2, r1
 8017bb6:	07d6      	lsls	r6, r2, #31
 8017bb8:	d427      	bmi.n	8017c0a <__sflush_r+0xb2>
 8017bba:	2200      	movs	r2, #0
 8017bbc:	6062      	str	r2, [r4, #4]
 8017bbe:	04d9      	lsls	r1, r3, #19
 8017bc0:	6922      	ldr	r2, [r4, #16]
 8017bc2:	6022      	str	r2, [r4, #0]
 8017bc4:	d504      	bpl.n	8017bd0 <__sflush_r+0x78>
 8017bc6:	1c42      	adds	r2, r0, #1
 8017bc8:	d101      	bne.n	8017bce <__sflush_r+0x76>
 8017bca:	682b      	ldr	r3, [r5, #0]
 8017bcc:	b903      	cbnz	r3, 8017bd0 <__sflush_r+0x78>
 8017bce:	6560      	str	r0, [r4, #84]	@ 0x54
 8017bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bd2:	602f      	str	r7, [r5, #0]
 8017bd4:	b1b9      	cbz	r1, 8017c06 <__sflush_r+0xae>
 8017bd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017bda:	4299      	cmp	r1, r3
 8017bdc:	d002      	beq.n	8017be4 <__sflush_r+0x8c>
 8017bde:	4628      	mov	r0, r5
 8017be0:	f7ff fb48 	bl	8017274 <_free_r>
 8017be4:	2300      	movs	r3, #0
 8017be6:	6363      	str	r3, [r4, #52]	@ 0x34
 8017be8:	e00d      	b.n	8017c06 <__sflush_r+0xae>
 8017bea:	2301      	movs	r3, #1
 8017bec:	4628      	mov	r0, r5
 8017bee:	47b0      	blx	r6
 8017bf0:	4602      	mov	r2, r0
 8017bf2:	1c50      	adds	r0, r2, #1
 8017bf4:	d1c9      	bne.n	8017b8a <__sflush_r+0x32>
 8017bf6:	682b      	ldr	r3, [r5, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d0c6      	beq.n	8017b8a <__sflush_r+0x32>
 8017bfc:	2b1d      	cmp	r3, #29
 8017bfe:	d001      	beq.n	8017c04 <__sflush_r+0xac>
 8017c00:	2b16      	cmp	r3, #22
 8017c02:	d11e      	bne.n	8017c42 <__sflush_r+0xea>
 8017c04:	602f      	str	r7, [r5, #0]
 8017c06:	2000      	movs	r0, #0
 8017c08:	e022      	b.n	8017c50 <__sflush_r+0xf8>
 8017c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c0e:	b21b      	sxth	r3, r3
 8017c10:	e01b      	b.n	8017c4a <__sflush_r+0xf2>
 8017c12:	690f      	ldr	r7, [r1, #16]
 8017c14:	2f00      	cmp	r7, #0
 8017c16:	d0f6      	beq.n	8017c06 <__sflush_r+0xae>
 8017c18:	0793      	lsls	r3, r2, #30
 8017c1a:	680e      	ldr	r6, [r1, #0]
 8017c1c:	bf08      	it	eq
 8017c1e:	694b      	ldreq	r3, [r1, #20]
 8017c20:	600f      	str	r7, [r1, #0]
 8017c22:	bf18      	it	ne
 8017c24:	2300      	movne	r3, #0
 8017c26:	eba6 0807 	sub.w	r8, r6, r7
 8017c2a:	608b      	str	r3, [r1, #8]
 8017c2c:	f1b8 0f00 	cmp.w	r8, #0
 8017c30:	dde9      	ble.n	8017c06 <__sflush_r+0xae>
 8017c32:	6a21      	ldr	r1, [r4, #32]
 8017c34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017c36:	4643      	mov	r3, r8
 8017c38:	463a      	mov	r2, r7
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	47b0      	blx	r6
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	dc08      	bgt.n	8017c54 <__sflush_r+0xfc>
 8017c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c4a:	81a3      	strh	r3, [r4, #12]
 8017c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c54:	4407      	add	r7, r0
 8017c56:	eba8 0800 	sub.w	r8, r8, r0
 8017c5a:	e7e7      	b.n	8017c2c <__sflush_r+0xd4>
 8017c5c:	dfbffffe 	.word	0xdfbffffe

08017c60 <_fflush_r>:
 8017c60:	b538      	push	{r3, r4, r5, lr}
 8017c62:	690b      	ldr	r3, [r1, #16]
 8017c64:	4605      	mov	r5, r0
 8017c66:	460c      	mov	r4, r1
 8017c68:	b913      	cbnz	r3, 8017c70 <_fflush_r+0x10>
 8017c6a:	2500      	movs	r5, #0
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	bd38      	pop	{r3, r4, r5, pc}
 8017c70:	b118      	cbz	r0, 8017c7a <_fflush_r+0x1a>
 8017c72:	6a03      	ldr	r3, [r0, #32]
 8017c74:	b90b      	cbnz	r3, 8017c7a <_fflush_r+0x1a>
 8017c76:	f7fe ffd3 	bl	8016c20 <__sinit>
 8017c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d0f3      	beq.n	8017c6a <_fflush_r+0xa>
 8017c82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c84:	07d0      	lsls	r0, r2, #31
 8017c86:	d404      	bmi.n	8017c92 <_fflush_r+0x32>
 8017c88:	0599      	lsls	r1, r3, #22
 8017c8a:	d402      	bmi.n	8017c92 <_fflush_r+0x32>
 8017c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c8e:	f7ff fad8 	bl	8017242 <__retarget_lock_acquire_recursive>
 8017c92:	4628      	mov	r0, r5
 8017c94:	4621      	mov	r1, r4
 8017c96:	f7ff ff5f 	bl	8017b58 <__sflush_r>
 8017c9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c9c:	07da      	lsls	r2, r3, #31
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	d4e4      	bmi.n	8017c6c <_fflush_r+0xc>
 8017ca2:	89a3      	ldrh	r3, [r4, #12]
 8017ca4:	059b      	lsls	r3, r3, #22
 8017ca6:	d4e1      	bmi.n	8017c6c <_fflush_r+0xc>
 8017ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017caa:	f7ff facb 	bl	8017244 <__retarget_lock_release_recursive>
 8017cae:	e7dd      	b.n	8017c6c <_fflush_r+0xc>

08017cb0 <__swhatbuf_r>:
 8017cb0:	b570      	push	{r4, r5, r6, lr}
 8017cb2:	460c      	mov	r4, r1
 8017cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb8:	2900      	cmp	r1, #0
 8017cba:	b096      	sub	sp, #88	@ 0x58
 8017cbc:	4615      	mov	r5, r2
 8017cbe:	461e      	mov	r6, r3
 8017cc0:	da0d      	bge.n	8017cde <__swhatbuf_r+0x2e>
 8017cc2:	89a3      	ldrh	r3, [r4, #12]
 8017cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017cc8:	f04f 0100 	mov.w	r1, #0
 8017ccc:	bf14      	ite	ne
 8017cce:	2340      	movne	r3, #64	@ 0x40
 8017cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017cd4:	2000      	movs	r0, #0
 8017cd6:	6031      	str	r1, [r6, #0]
 8017cd8:	602b      	str	r3, [r5, #0]
 8017cda:	b016      	add	sp, #88	@ 0x58
 8017cdc:	bd70      	pop	{r4, r5, r6, pc}
 8017cde:	466a      	mov	r2, sp
 8017ce0:	f000 f892 	bl	8017e08 <_fstat_r>
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	dbec      	blt.n	8017cc2 <__swhatbuf_r+0x12>
 8017ce8:	9901      	ldr	r1, [sp, #4]
 8017cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017cf2:	4259      	negs	r1, r3
 8017cf4:	4159      	adcs	r1, r3
 8017cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017cfa:	e7eb      	b.n	8017cd4 <__swhatbuf_r+0x24>

08017cfc <__smakebuf_r>:
 8017cfc:	898b      	ldrh	r3, [r1, #12]
 8017cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d00:	079d      	lsls	r5, r3, #30
 8017d02:	4606      	mov	r6, r0
 8017d04:	460c      	mov	r4, r1
 8017d06:	d507      	bpl.n	8017d18 <__smakebuf_r+0x1c>
 8017d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d0c:	6023      	str	r3, [r4, #0]
 8017d0e:	6123      	str	r3, [r4, #16]
 8017d10:	2301      	movs	r3, #1
 8017d12:	6163      	str	r3, [r4, #20]
 8017d14:	b003      	add	sp, #12
 8017d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d18:	ab01      	add	r3, sp, #4
 8017d1a:	466a      	mov	r2, sp
 8017d1c:	f7ff ffc8 	bl	8017cb0 <__swhatbuf_r>
 8017d20:	9f00      	ldr	r7, [sp, #0]
 8017d22:	4605      	mov	r5, r0
 8017d24:	4639      	mov	r1, r7
 8017d26:	4630      	mov	r0, r6
 8017d28:	f7fe fe62 	bl	80169f0 <_malloc_r>
 8017d2c:	b948      	cbnz	r0, 8017d42 <__smakebuf_r+0x46>
 8017d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d32:	059a      	lsls	r2, r3, #22
 8017d34:	d4ee      	bmi.n	8017d14 <__smakebuf_r+0x18>
 8017d36:	f023 0303 	bic.w	r3, r3, #3
 8017d3a:	f043 0302 	orr.w	r3, r3, #2
 8017d3e:	81a3      	strh	r3, [r4, #12]
 8017d40:	e7e2      	b.n	8017d08 <__smakebuf_r+0xc>
 8017d42:	89a3      	ldrh	r3, [r4, #12]
 8017d44:	6020      	str	r0, [r4, #0]
 8017d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d4a:	81a3      	strh	r3, [r4, #12]
 8017d4c:	9b01      	ldr	r3, [sp, #4]
 8017d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017d52:	b15b      	cbz	r3, 8017d6c <__smakebuf_r+0x70>
 8017d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f000 f867 	bl	8017e2c <_isatty_r>
 8017d5e:	b128      	cbz	r0, 8017d6c <__smakebuf_r+0x70>
 8017d60:	89a3      	ldrh	r3, [r4, #12]
 8017d62:	f023 0303 	bic.w	r3, r3, #3
 8017d66:	f043 0301 	orr.w	r3, r3, #1
 8017d6a:	81a3      	strh	r3, [r4, #12]
 8017d6c:	89a3      	ldrh	r3, [r4, #12]
 8017d6e:	431d      	orrs	r5, r3
 8017d70:	81a5      	strh	r5, [r4, #12]
 8017d72:	e7cf      	b.n	8017d14 <__smakebuf_r+0x18>

08017d74 <memmove>:
 8017d74:	4288      	cmp	r0, r1
 8017d76:	b510      	push	{r4, lr}
 8017d78:	eb01 0402 	add.w	r4, r1, r2
 8017d7c:	d902      	bls.n	8017d84 <memmove+0x10>
 8017d7e:	4284      	cmp	r4, r0
 8017d80:	4623      	mov	r3, r4
 8017d82:	d807      	bhi.n	8017d94 <memmove+0x20>
 8017d84:	1e43      	subs	r3, r0, #1
 8017d86:	42a1      	cmp	r1, r4
 8017d88:	d008      	beq.n	8017d9c <memmove+0x28>
 8017d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d92:	e7f8      	b.n	8017d86 <memmove+0x12>
 8017d94:	4402      	add	r2, r0
 8017d96:	4601      	mov	r1, r0
 8017d98:	428a      	cmp	r2, r1
 8017d9a:	d100      	bne.n	8017d9e <memmove+0x2a>
 8017d9c:	bd10      	pop	{r4, pc}
 8017d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017da6:	e7f7      	b.n	8017d98 <memmove+0x24>

08017da8 <_raise_r>:
 8017da8:	291f      	cmp	r1, #31
 8017daa:	b538      	push	{r3, r4, r5, lr}
 8017dac:	4605      	mov	r5, r0
 8017dae:	460c      	mov	r4, r1
 8017db0:	d904      	bls.n	8017dbc <_raise_r+0x14>
 8017db2:	2316      	movs	r3, #22
 8017db4:	6003      	str	r3, [r0, #0]
 8017db6:	f04f 30ff 	mov.w	r0, #4294967295
 8017dba:	bd38      	pop	{r3, r4, r5, pc}
 8017dbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017dbe:	b112      	cbz	r2, 8017dc6 <_raise_r+0x1e>
 8017dc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017dc4:	b94b      	cbnz	r3, 8017dda <_raise_r+0x32>
 8017dc6:	4628      	mov	r0, r5
 8017dc8:	f000 f852 	bl	8017e70 <_getpid_r>
 8017dcc:	4622      	mov	r2, r4
 8017dce:	4601      	mov	r1, r0
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dd6:	f000 b839 	b.w	8017e4c <_kill_r>
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d00a      	beq.n	8017df4 <_raise_r+0x4c>
 8017dde:	1c59      	adds	r1, r3, #1
 8017de0:	d103      	bne.n	8017dea <_raise_r+0x42>
 8017de2:	2316      	movs	r3, #22
 8017de4:	6003      	str	r3, [r0, #0]
 8017de6:	2001      	movs	r0, #1
 8017de8:	e7e7      	b.n	8017dba <_raise_r+0x12>
 8017dea:	2100      	movs	r1, #0
 8017dec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017df0:	4620      	mov	r0, r4
 8017df2:	4798      	blx	r3
 8017df4:	2000      	movs	r0, #0
 8017df6:	e7e0      	b.n	8017dba <_raise_r+0x12>

08017df8 <raise>:
 8017df8:	4b02      	ldr	r3, [pc, #8]	@ (8017e04 <raise+0xc>)
 8017dfa:	4601      	mov	r1, r0
 8017dfc:	6818      	ldr	r0, [r3, #0]
 8017dfe:	f7ff bfd3 	b.w	8017da8 <_raise_r>
 8017e02:	bf00      	nop
 8017e04:	20000094 	.word	0x20000094

08017e08 <_fstat_r>:
 8017e08:	b538      	push	{r3, r4, r5, lr}
 8017e0a:	4d07      	ldr	r5, [pc, #28]	@ (8017e28 <_fstat_r+0x20>)
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	4604      	mov	r4, r0
 8017e10:	4608      	mov	r0, r1
 8017e12:	4611      	mov	r1, r2
 8017e14:	602b      	str	r3, [r5, #0]
 8017e16:	f7f2 f997 	bl	800a148 <_fstat>
 8017e1a:	1c43      	adds	r3, r0, #1
 8017e1c:	d102      	bne.n	8017e24 <_fstat_r+0x1c>
 8017e1e:	682b      	ldr	r3, [r5, #0]
 8017e20:	b103      	cbz	r3, 8017e24 <_fstat_r+0x1c>
 8017e22:	6023      	str	r3, [r4, #0]
 8017e24:	bd38      	pop	{r3, r4, r5, pc}
 8017e26:	bf00      	nop
 8017e28:	20000a28 	.word	0x20000a28

08017e2c <_isatty_r>:
 8017e2c:	b538      	push	{r3, r4, r5, lr}
 8017e2e:	4d06      	ldr	r5, [pc, #24]	@ (8017e48 <_isatty_r+0x1c>)
 8017e30:	2300      	movs	r3, #0
 8017e32:	4604      	mov	r4, r0
 8017e34:	4608      	mov	r0, r1
 8017e36:	602b      	str	r3, [r5, #0]
 8017e38:	f7f2 f996 	bl	800a168 <_isatty>
 8017e3c:	1c43      	adds	r3, r0, #1
 8017e3e:	d102      	bne.n	8017e46 <_isatty_r+0x1a>
 8017e40:	682b      	ldr	r3, [r5, #0]
 8017e42:	b103      	cbz	r3, 8017e46 <_isatty_r+0x1a>
 8017e44:	6023      	str	r3, [r4, #0]
 8017e46:	bd38      	pop	{r3, r4, r5, pc}
 8017e48:	20000a28 	.word	0x20000a28

08017e4c <_kill_r>:
 8017e4c:	b538      	push	{r3, r4, r5, lr}
 8017e4e:	4d07      	ldr	r5, [pc, #28]	@ (8017e6c <_kill_r+0x20>)
 8017e50:	2300      	movs	r3, #0
 8017e52:	4604      	mov	r4, r0
 8017e54:	4608      	mov	r0, r1
 8017e56:	4611      	mov	r1, r2
 8017e58:	602b      	str	r3, [r5, #0]
 8017e5a:	f7f2 f915 	bl	800a088 <_kill>
 8017e5e:	1c43      	adds	r3, r0, #1
 8017e60:	d102      	bne.n	8017e68 <_kill_r+0x1c>
 8017e62:	682b      	ldr	r3, [r5, #0]
 8017e64:	b103      	cbz	r3, 8017e68 <_kill_r+0x1c>
 8017e66:	6023      	str	r3, [r4, #0]
 8017e68:	bd38      	pop	{r3, r4, r5, pc}
 8017e6a:	bf00      	nop
 8017e6c:	20000a28 	.word	0x20000a28

08017e70 <_getpid_r>:
 8017e70:	f7f2 b902 	b.w	800a078 <_getpid>

08017e74 <_realloc_r>:
 8017e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e78:	4680      	mov	r8, r0
 8017e7a:	4615      	mov	r5, r2
 8017e7c:	460c      	mov	r4, r1
 8017e7e:	b921      	cbnz	r1, 8017e8a <_realloc_r+0x16>
 8017e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e84:	4611      	mov	r1, r2
 8017e86:	f7fe bdb3 	b.w	80169f0 <_malloc_r>
 8017e8a:	b92a      	cbnz	r2, 8017e98 <_realloc_r+0x24>
 8017e8c:	f7ff f9f2 	bl	8017274 <_free_r>
 8017e90:	2400      	movs	r4, #0
 8017e92:	4620      	mov	r0, r4
 8017e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e98:	f000 f81a 	bl	8017ed0 <_malloc_usable_size_r>
 8017e9c:	4285      	cmp	r5, r0
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	d802      	bhi.n	8017ea8 <_realloc_r+0x34>
 8017ea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017ea6:	d8f4      	bhi.n	8017e92 <_realloc_r+0x1e>
 8017ea8:	4629      	mov	r1, r5
 8017eaa:	4640      	mov	r0, r8
 8017eac:	f7fe fda0 	bl	80169f0 <_malloc_r>
 8017eb0:	4607      	mov	r7, r0
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d0ec      	beq.n	8017e90 <_realloc_r+0x1c>
 8017eb6:	42b5      	cmp	r5, r6
 8017eb8:	462a      	mov	r2, r5
 8017eba:	4621      	mov	r1, r4
 8017ebc:	bf28      	it	cs
 8017ebe:	4632      	movcs	r2, r6
 8017ec0:	f7ff f9c3 	bl	801724a <memcpy>
 8017ec4:	4621      	mov	r1, r4
 8017ec6:	4640      	mov	r0, r8
 8017ec8:	f7ff f9d4 	bl	8017274 <_free_r>
 8017ecc:	463c      	mov	r4, r7
 8017ece:	e7e0      	b.n	8017e92 <_realloc_r+0x1e>

08017ed0 <_malloc_usable_size_r>:
 8017ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ed4:	1f18      	subs	r0, r3, #4
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	bfbc      	itt	lt
 8017eda:	580b      	ldrlt	r3, [r1, r0]
 8017edc:	18c0      	addlt	r0, r0, r3
 8017ede:	4770      	bx	lr

08017ee0 <pow>:
 8017ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee2:	ed2d 8b02 	vpush	{d8}
 8017ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8017eea:	eef0 8a60 	vmov.f32	s17, s1
 8017eee:	ec55 4b11 	vmov	r4, r5, d1
 8017ef2:	f000 f871 	bl	8017fd8 <__ieee754_pow>
 8017ef6:	4622      	mov	r2, r4
 8017ef8:	462b      	mov	r3, r5
 8017efa:	4620      	mov	r0, r4
 8017efc:	4629      	mov	r1, r5
 8017efe:	ec57 6b10 	vmov	r6, r7, d0
 8017f02:	f7f0 fc0f 	bl	8008724 <__aeabi_dcmpun>
 8017f06:	2800      	cmp	r0, #0
 8017f08:	d13b      	bne.n	8017f82 <pow+0xa2>
 8017f0a:	ec51 0b18 	vmov	r0, r1, d8
 8017f0e:	2200      	movs	r2, #0
 8017f10:	2300      	movs	r3, #0
 8017f12:	f7f0 fbd5 	bl	80086c0 <__aeabi_dcmpeq>
 8017f16:	b1b8      	cbz	r0, 8017f48 <pow+0x68>
 8017f18:	2200      	movs	r2, #0
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	4629      	mov	r1, r5
 8017f20:	f7f0 fbce 	bl	80086c0 <__aeabi_dcmpeq>
 8017f24:	2800      	cmp	r0, #0
 8017f26:	d146      	bne.n	8017fb6 <pow+0xd6>
 8017f28:	ec45 4b10 	vmov	d0, r4, r5
 8017f2c:	f000 f848 	bl	8017fc0 <finite>
 8017f30:	b338      	cbz	r0, 8017f82 <pow+0xa2>
 8017f32:	2200      	movs	r2, #0
 8017f34:	2300      	movs	r3, #0
 8017f36:	4620      	mov	r0, r4
 8017f38:	4629      	mov	r1, r5
 8017f3a:	f7f0 fbcb 	bl	80086d4 <__aeabi_dcmplt>
 8017f3e:	b300      	cbz	r0, 8017f82 <pow+0xa2>
 8017f40:	f7ff f954 	bl	80171ec <__errno>
 8017f44:	2322      	movs	r3, #34	@ 0x22
 8017f46:	e01b      	b.n	8017f80 <pow+0xa0>
 8017f48:	ec47 6b10 	vmov	d0, r6, r7
 8017f4c:	f000 f838 	bl	8017fc0 <finite>
 8017f50:	b9e0      	cbnz	r0, 8017f8c <pow+0xac>
 8017f52:	eeb0 0a48 	vmov.f32	s0, s16
 8017f56:	eef0 0a68 	vmov.f32	s1, s17
 8017f5a:	f000 f831 	bl	8017fc0 <finite>
 8017f5e:	b1a8      	cbz	r0, 8017f8c <pow+0xac>
 8017f60:	ec45 4b10 	vmov	d0, r4, r5
 8017f64:	f000 f82c 	bl	8017fc0 <finite>
 8017f68:	b180      	cbz	r0, 8017f8c <pow+0xac>
 8017f6a:	4632      	mov	r2, r6
 8017f6c:	463b      	mov	r3, r7
 8017f6e:	4630      	mov	r0, r6
 8017f70:	4639      	mov	r1, r7
 8017f72:	f7f0 fbd7 	bl	8008724 <__aeabi_dcmpun>
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d0e2      	beq.n	8017f40 <pow+0x60>
 8017f7a:	f7ff f937 	bl	80171ec <__errno>
 8017f7e:	2321      	movs	r3, #33	@ 0x21
 8017f80:	6003      	str	r3, [r0, #0]
 8017f82:	ecbd 8b02 	vpop	{d8}
 8017f86:	ec47 6b10 	vmov	d0, r6, r7
 8017f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	2300      	movs	r3, #0
 8017f90:	4630      	mov	r0, r6
 8017f92:	4639      	mov	r1, r7
 8017f94:	f7f0 fb94 	bl	80086c0 <__aeabi_dcmpeq>
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d0f2      	beq.n	8017f82 <pow+0xa2>
 8017f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8017fa0:	eef0 0a68 	vmov.f32	s1, s17
 8017fa4:	f000 f80c 	bl	8017fc0 <finite>
 8017fa8:	2800      	cmp	r0, #0
 8017faa:	d0ea      	beq.n	8017f82 <pow+0xa2>
 8017fac:	ec45 4b10 	vmov	d0, r4, r5
 8017fb0:	f000 f806 	bl	8017fc0 <finite>
 8017fb4:	e7c3      	b.n	8017f3e <pow+0x5e>
 8017fb6:	4f01      	ldr	r7, [pc, #4]	@ (8017fbc <pow+0xdc>)
 8017fb8:	2600      	movs	r6, #0
 8017fba:	e7e2      	b.n	8017f82 <pow+0xa2>
 8017fbc:	3ff00000 	.word	0x3ff00000

08017fc0 <finite>:
 8017fc0:	b082      	sub	sp, #8
 8017fc2:	ed8d 0b00 	vstr	d0, [sp]
 8017fc6:	9801      	ldr	r0, [sp, #4]
 8017fc8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8017fcc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8017fd0:	0fc0      	lsrs	r0, r0, #31
 8017fd2:	b002      	add	sp, #8
 8017fd4:	4770      	bx	lr
	...

08017fd8 <__ieee754_pow>:
 8017fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fdc:	b091      	sub	sp, #68	@ 0x44
 8017fde:	ed8d 1b00 	vstr	d1, [sp]
 8017fe2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8017fe6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8017fea:	ea5a 0001 	orrs.w	r0, sl, r1
 8017fee:	ec57 6b10 	vmov	r6, r7, d0
 8017ff2:	d113      	bne.n	801801c <__ieee754_pow+0x44>
 8017ff4:	19b3      	adds	r3, r6, r6
 8017ff6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8017ffa:	4152      	adcs	r2, r2
 8017ffc:	4298      	cmp	r0, r3
 8017ffe:	4b98      	ldr	r3, [pc, #608]	@ (8018260 <__ieee754_pow+0x288>)
 8018000:	4193      	sbcs	r3, r2
 8018002:	f080 84ea 	bcs.w	80189da <__ieee754_pow+0xa02>
 8018006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801800a:	4630      	mov	r0, r6
 801800c:	4639      	mov	r1, r7
 801800e:	f7ef ff39 	bl	8007e84 <__adddf3>
 8018012:	ec41 0b10 	vmov	d0, r0, r1
 8018016:	b011      	add	sp, #68	@ 0x44
 8018018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801801c:	4a91      	ldr	r2, [pc, #580]	@ (8018264 <__ieee754_pow+0x28c>)
 801801e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8018022:	4590      	cmp	r8, r2
 8018024:	463d      	mov	r5, r7
 8018026:	4633      	mov	r3, r6
 8018028:	d806      	bhi.n	8018038 <__ieee754_pow+0x60>
 801802a:	d101      	bne.n	8018030 <__ieee754_pow+0x58>
 801802c:	2e00      	cmp	r6, #0
 801802e:	d1ea      	bne.n	8018006 <__ieee754_pow+0x2e>
 8018030:	4592      	cmp	sl, r2
 8018032:	d801      	bhi.n	8018038 <__ieee754_pow+0x60>
 8018034:	d10e      	bne.n	8018054 <__ieee754_pow+0x7c>
 8018036:	b169      	cbz	r1, 8018054 <__ieee754_pow+0x7c>
 8018038:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801803c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8018040:	431d      	orrs	r5, r3
 8018042:	d1e0      	bne.n	8018006 <__ieee754_pow+0x2e>
 8018044:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018048:	18db      	adds	r3, r3, r3
 801804a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801804e:	4152      	adcs	r2, r2
 8018050:	429d      	cmp	r5, r3
 8018052:	e7d4      	b.n	8017ffe <__ieee754_pow+0x26>
 8018054:	2d00      	cmp	r5, #0
 8018056:	46c3      	mov	fp, r8
 8018058:	da3a      	bge.n	80180d0 <__ieee754_pow+0xf8>
 801805a:	4a83      	ldr	r2, [pc, #524]	@ (8018268 <__ieee754_pow+0x290>)
 801805c:	4592      	cmp	sl, r2
 801805e:	d84d      	bhi.n	80180fc <__ieee754_pow+0x124>
 8018060:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8018064:	4592      	cmp	sl, r2
 8018066:	f240 84c7 	bls.w	80189f8 <__ieee754_pow+0xa20>
 801806a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801806e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8018072:	2a14      	cmp	r2, #20
 8018074:	dd0f      	ble.n	8018096 <__ieee754_pow+0xbe>
 8018076:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801807a:	fa21 f402 	lsr.w	r4, r1, r2
 801807e:	fa04 f202 	lsl.w	r2, r4, r2
 8018082:	428a      	cmp	r2, r1
 8018084:	f040 84b8 	bne.w	80189f8 <__ieee754_pow+0xa20>
 8018088:	f004 0401 	and.w	r4, r4, #1
 801808c:	f1c4 0402 	rsb	r4, r4, #2
 8018090:	2900      	cmp	r1, #0
 8018092:	d158      	bne.n	8018146 <__ieee754_pow+0x16e>
 8018094:	e00e      	b.n	80180b4 <__ieee754_pow+0xdc>
 8018096:	2900      	cmp	r1, #0
 8018098:	d154      	bne.n	8018144 <__ieee754_pow+0x16c>
 801809a:	f1c2 0214 	rsb	r2, r2, #20
 801809e:	fa4a f402 	asr.w	r4, sl, r2
 80180a2:	fa04 f202 	lsl.w	r2, r4, r2
 80180a6:	4552      	cmp	r2, sl
 80180a8:	f040 84a3 	bne.w	80189f2 <__ieee754_pow+0xa1a>
 80180ac:	f004 0401 	and.w	r4, r4, #1
 80180b0:	f1c4 0402 	rsb	r4, r4, #2
 80180b4:	4a6d      	ldr	r2, [pc, #436]	@ (801826c <__ieee754_pow+0x294>)
 80180b6:	4592      	cmp	sl, r2
 80180b8:	d12e      	bne.n	8018118 <__ieee754_pow+0x140>
 80180ba:	f1b9 0f00 	cmp.w	r9, #0
 80180be:	f280 8494 	bge.w	80189ea <__ieee754_pow+0xa12>
 80180c2:	496a      	ldr	r1, [pc, #424]	@ (801826c <__ieee754_pow+0x294>)
 80180c4:	4632      	mov	r2, r6
 80180c6:	463b      	mov	r3, r7
 80180c8:	2000      	movs	r0, #0
 80180ca:	f7f0 f9bb 	bl	8008444 <__aeabi_ddiv>
 80180ce:	e7a0      	b.n	8018012 <__ieee754_pow+0x3a>
 80180d0:	2400      	movs	r4, #0
 80180d2:	bbc1      	cbnz	r1, 8018146 <__ieee754_pow+0x16e>
 80180d4:	4a63      	ldr	r2, [pc, #396]	@ (8018264 <__ieee754_pow+0x28c>)
 80180d6:	4592      	cmp	sl, r2
 80180d8:	d1ec      	bne.n	80180b4 <__ieee754_pow+0xdc>
 80180da:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80180de:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80180e2:	431a      	orrs	r2, r3
 80180e4:	f000 8479 	beq.w	80189da <__ieee754_pow+0xa02>
 80180e8:	4b61      	ldr	r3, [pc, #388]	@ (8018270 <__ieee754_pow+0x298>)
 80180ea:	4598      	cmp	r8, r3
 80180ec:	d908      	bls.n	8018100 <__ieee754_pow+0x128>
 80180ee:	f1b9 0f00 	cmp.w	r9, #0
 80180f2:	f2c0 8476 	blt.w	80189e2 <__ieee754_pow+0xa0a>
 80180f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180fa:	e78a      	b.n	8018012 <__ieee754_pow+0x3a>
 80180fc:	2402      	movs	r4, #2
 80180fe:	e7e8      	b.n	80180d2 <__ieee754_pow+0xfa>
 8018100:	f1b9 0f00 	cmp.w	r9, #0
 8018104:	f04f 0000 	mov.w	r0, #0
 8018108:	f04f 0100 	mov.w	r1, #0
 801810c:	da81      	bge.n	8018012 <__ieee754_pow+0x3a>
 801810e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018112:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8018116:	e77c      	b.n	8018012 <__ieee754_pow+0x3a>
 8018118:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801811c:	d106      	bne.n	801812c <__ieee754_pow+0x154>
 801811e:	4632      	mov	r2, r6
 8018120:	463b      	mov	r3, r7
 8018122:	4630      	mov	r0, r6
 8018124:	4639      	mov	r1, r7
 8018126:	f7f0 f863 	bl	80081f0 <__aeabi_dmul>
 801812a:	e772      	b.n	8018012 <__ieee754_pow+0x3a>
 801812c:	4a51      	ldr	r2, [pc, #324]	@ (8018274 <__ieee754_pow+0x29c>)
 801812e:	4591      	cmp	r9, r2
 8018130:	d109      	bne.n	8018146 <__ieee754_pow+0x16e>
 8018132:	2d00      	cmp	r5, #0
 8018134:	db07      	blt.n	8018146 <__ieee754_pow+0x16e>
 8018136:	ec47 6b10 	vmov	d0, r6, r7
 801813a:	b011      	add	sp, #68	@ 0x44
 801813c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018140:	f000 bd52 	b.w	8018be8 <__ieee754_sqrt>
 8018144:	2400      	movs	r4, #0
 8018146:	ec47 6b10 	vmov	d0, r6, r7
 801814a:	9302      	str	r3, [sp, #8]
 801814c:	f000 fc88 	bl	8018a60 <fabs>
 8018150:	9b02      	ldr	r3, [sp, #8]
 8018152:	ec51 0b10 	vmov	r0, r1, d0
 8018156:	bb53      	cbnz	r3, 80181ae <__ieee754_pow+0x1d6>
 8018158:	4b44      	ldr	r3, [pc, #272]	@ (801826c <__ieee754_pow+0x294>)
 801815a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801815e:	429a      	cmp	r2, r3
 8018160:	d002      	beq.n	8018168 <__ieee754_pow+0x190>
 8018162:	f1b8 0f00 	cmp.w	r8, #0
 8018166:	d122      	bne.n	80181ae <__ieee754_pow+0x1d6>
 8018168:	f1b9 0f00 	cmp.w	r9, #0
 801816c:	da05      	bge.n	801817a <__ieee754_pow+0x1a2>
 801816e:	4602      	mov	r2, r0
 8018170:	460b      	mov	r3, r1
 8018172:	2000      	movs	r0, #0
 8018174:	493d      	ldr	r1, [pc, #244]	@ (801826c <__ieee754_pow+0x294>)
 8018176:	f7f0 f965 	bl	8008444 <__aeabi_ddiv>
 801817a:	2d00      	cmp	r5, #0
 801817c:	f6bf af49 	bge.w	8018012 <__ieee754_pow+0x3a>
 8018180:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8018184:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8018188:	ea58 0804 	orrs.w	r8, r8, r4
 801818c:	d108      	bne.n	80181a0 <__ieee754_pow+0x1c8>
 801818e:	4602      	mov	r2, r0
 8018190:	460b      	mov	r3, r1
 8018192:	4610      	mov	r0, r2
 8018194:	4619      	mov	r1, r3
 8018196:	f7ef fe73 	bl	8007e80 <__aeabi_dsub>
 801819a:	4602      	mov	r2, r0
 801819c:	460b      	mov	r3, r1
 801819e:	e794      	b.n	80180ca <__ieee754_pow+0xf2>
 80181a0:	2c01      	cmp	r4, #1
 80181a2:	f47f af36 	bne.w	8018012 <__ieee754_pow+0x3a>
 80181a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80181aa:	4619      	mov	r1, r3
 80181ac:	e731      	b.n	8018012 <__ieee754_pow+0x3a>
 80181ae:	0feb      	lsrs	r3, r5, #31
 80181b0:	3b01      	subs	r3, #1
 80181b2:	ea53 0204 	orrs.w	r2, r3, r4
 80181b6:	d102      	bne.n	80181be <__ieee754_pow+0x1e6>
 80181b8:	4632      	mov	r2, r6
 80181ba:	463b      	mov	r3, r7
 80181bc:	e7e9      	b.n	8018192 <__ieee754_pow+0x1ba>
 80181be:	3c01      	subs	r4, #1
 80181c0:	431c      	orrs	r4, r3
 80181c2:	d016      	beq.n	80181f2 <__ieee754_pow+0x21a>
 80181c4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8018250 <__ieee754_pow+0x278>
 80181c8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80181cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80181d0:	f240 8112 	bls.w	80183f8 <__ieee754_pow+0x420>
 80181d4:	4b28      	ldr	r3, [pc, #160]	@ (8018278 <__ieee754_pow+0x2a0>)
 80181d6:	459a      	cmp	sl, r3
 80181d8:	4b25      	ldr	r3, [pc, #148]	@ (8018270 <__ieee754_pow+0x298>)
 80181da:	d916      	bls.n	801820a <__ieee754_pow+0x232>
 80181dc:	4598      	cmp	r8, r3
 80181de:	d80b      	bhi.n	80181f8 <__ieee754_pow+0x220>
 80181e0:	f1b9 0f00 	cmp.w	r9, #0
 80181e4:	da0b      	bge.n	80181fe <__ieee754_pow+0x226>
 80181e6:	2000      	movs	r0, #0
 80181e8:	b011      	add	sp, #68	@ 0x44
 80181ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181ee:	f000 bcf3 	b.w	8018bd8 <__math_oflow>
 80181f2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8018258 <__ieee754_pow+0x280>
 80181f6:	e7e7      	b.n	80181c8 <__ieee754_pow+0x1f0>
 80181f8:	f1b9 0f00 	cmp.w	r9, #0
 80181fc:	dcf3      	bgt.n	80181e6 <__ieee754_pow+0x20e>
 80181fe:	2000      	movs	r0, #0
 8018200:	b011      	add	sp, #68	@ 0x44
 8018202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018206:	f000 bcdf 	b.w	8018bc8 <__math_uflow>
 801820a:	4598      	cmp	r8, r3
 801820c:	d20c      	bcs.n	8018228 <__ieee754_pow+0x250>
 801820e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018212:	2200      	movs	r2, #0
 8018214:	2300      	movs	r3, #0
 8018216:	f7f0 fa5d 	bl	80086d4 <__aeabi_dcmplt>
 801821a:	3800      	subs	r0, #0
 801821c:	bf18      	it	ne
 801821e:	2001      	movne	r0, #1
 8018220:	f1b9 0f00 	cmp.w	r9, #0
 8018224:	daec      	bge.n	8018200 <__ieee754_pow+0x228>
 8018226:	e7df      	b.n	80181e8 <__ieee754_pow+0x210>
 8018228:	4b10      	ldr	r3, [pc, #64]	@ (801826c <__ieee754_pow+0x294>)
 801822a:	4598      	cmp	r8, r3
 801822c:	f04f 0200 	mov.w	r2, #0
 8018230:	d924      	bls.n	801827c <__ieee754_pow+0x2a4>
 8018232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018236:	2300      	movs	r3, #0
 8018238:	f7f0 fa4c 	bl	80086d4 <__aeabi_dcmplt>
 801823c:	3800      	subs	r0, #0
 801823e:	bf18      	it	ne
 8018240:	2001      	movne	r0, #1
 8018242:	f1b9 0f00 	cmp.w	r9, #0
 8018246:	dccf      	bgt.n	80181e8 <__ieee754_pow+0x210>
 8018248:	e7da      	b.n	8018200 <__ieee754_pow+0x228>
 801824a:	bf00      	nop
 801824c:	f3af 8000 	nop.w
 8018250:	00000000 	.word	0x00000000
 8018254:	3ff00000 	.word	0x3ff00000
 8018258:	00000000 	.word	0x00000000
 801825c:	bff00000 	.word	0xbff00000
 8018260:	fff00000 	.word	0xfff00000
 8018264:	7ff00000 	.word	0x7ff00000
 8018268:	433fffff 	.word	0x433fffff
 801826c:	3ff00000 	.word	0x3ff00000
 8018270:	3fefffff 	.word	0x3fefffff
 8018274:	3fe00000 	.word	0x3fe00000
 8018278:	43f00000 	.word	0x43f00000
 801827c:	4b5a      	ldr	r3, [pc, #360]	@ (80183e8 <__ieee754_pow+0x410>)
 801827e:	f7ef fdff 	bl	8007e80 <__aeabi_dsub>
 8018282:	a351      	add	r3, pc, #324	@ (adr r3, 80183c8 <__ieee754_pow+0x3f0>)
 8018284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018288:	4604      	mov	r4, r0
 801828a:	460d      	mov	r5, r1
 801828c:	f7ef ffb0 	bl	80081f0 <__aeabi_dmul>
 8018290:	a34f      	add	r3, pc, #316	@ (adr r3, 80183d0 <__ieee754_pow+0x3f8>)
 8018292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018296:	4606      	mov	r6, r0
 8018298:	460f      	mov	r7, r1
 801829a:	4620      	mov	r0, r4
 801829c:	4629      	mov	r1, r5
 801829e:	f7ef ffa7 	bl	80081f0 <__aeabi_dmul>
 80182a2:	4b52      	ldr	r3, [pc, #328]	@ (80183ec <__ieee754_pow+0x414>)
 80182a4:	4682      	mov	sl, r0
 80182a6:	468b      	mov	fp, r1
 80182a8:	2200      	movs	r2, #0
 80182aa:	4620      	mov	r0, r4
 80182ac:	4629      	mov	r1, r5
 80182ae:	f7ef ff9f 	bl	80081f0 <__aeabi_dmul>
 80182b2:	4602      	mov	r2, r0
 80182b4:	460b      	mov	r3, r1
 80182b6:	a148      	add	r1, pc, #288	@ (adr r1, 80183d8 <__ieee754_pow+0x400>)
 80182b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182bc:	f7ef fde0 	bl	8007e80 <__aeabi_dsub>
 80182c0:	4622      	mov	r2, r4
 80182c2:	462b      	mov	r3, r5
 80182c4:	f7ef ff94 	bl	80081f0 <__aeabi_dmul>
 80182c8:	4602      	mov	r2, r0
 80182ca:	460b      	mov	r3, r1
 80182cc:	2000      	movs	r0, #0
 80182ce:	4948      	ldr	r1, [pc, #288]	@ (80183f0 <__ieee754_pow+0x418>)
 80182d0:	f7ef fdd6 	bl	8007e80 <__aeabi_dsub>
 80182d4:	4622      	mov	r2, r4
 80182d6:	4680      	mov	r8, r0
 80182d8:	4689      	mov	r9, r1
 80182da:	462b      	mov	r3, r5
 80182dc:	4620      	mov	r0, r4
 80182de:	4629      	mov	r1, r5
 80182e0:	f7ef ff86 	bl	80081f0 <__aeabi_dmul>
 80182e4:	4602      	mov	r2, r0
 80182e6:	460b      	mov	r3, r1
 80182e8:	4640      	mov	r0, r8
 80182ea:	4649      	mov	r1, r9
 80182ec:	f7ef ff80 	bl	80081f0 <__aeabi_dmul>
 80182f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80183e0 <__ieee754_pow+0x408>)
 80182f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182f6:	f7ef ff7b 	bl	80081f0 <__aeabi_dmul>
 80182fa:	4602      	mov	r2, r0
 80182fc:	460b      	mov	r3, r1
 80182fe:	4650      	mov	r0, sl
 8018300:	4659      	mov	r1, fp
 8018302:	f7ef fdbd 	bl	8007e80 <__aeabi_dsub>
 8018306:	4602      	mov	r2, r0
 8018308:	460b      	mov	r3, r1
 801830a:	4680      	mov	r8, r0
 801830c:	4689      	mov	r9, r1
 801830e:	4630      	mov	r0, r6
 8018310:	4639      	mov	r1, r7
 8018312:	f7ef fdb7 	bl	8007e84 <__adddf3>
 8018316:	2400      	movs	r4, #0
 8018318:	4632      	mov	r2, r6
 801831a:	463b      	mov	r3, r7
 801831c:	4620      	mov	r0, r4
 801831e:	460d      	mov	r5, r1
 8018320:	f7ef fdae 	bl	8007e80 <__aeabi_dsub>
 8018324:	4602      	mov	r2, r0
 8018326:	460b      	mov	r3, r1
 8018328:	4640      	mov	r0, r8
 801832a:	4649      	mov	r1, r9
 801832c:	f7ef fda8 	bl	8007e80 <__aeabi_dsub>
 8018330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018338:	2300      	movs	r3, #0
 801833a:	9304      	str	r3, [sp, #16]
 801833c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018340:	4606      	mov	r6, r0
 8018342:	460f      	mov	r7, r1
 8018344:	4652      	mov	r2, sl
 8018346:	465b      	mov	r3, fp
 8018348:	e9dd 0100 	ldrd	r0, r1, [sp]
 801834c:	f7ef fd98 	bl	8007e80 <__aeabi_dsub>
 8018350:	4622      	mov	r2, r4
 8018352:	462b      	mov	r3, r5
 8018354:	f7ef ff4c 	bl	80081f0 <__aeabi_dmul>
 8018358:	e9dd 2300 	ldrd	r2, r3, [sp]
 801835c:	4680      	mov	r8, r0
 801835e:	4689      	mov	r9, r1
 8018360:	4630      	mov	r0, r6
 8018362:	4639      	mov	r1, r7
 8018364:	f7ef ff44 	bl	80081f0 <__aeabi_dmul>
 8018368:	4602      	mov	r2, r0
 801836a:	460b      	mov	r3, r1
 801836c:	4640      	mov	r0, r8
 801836e:	4649      	mov	r1, r9
 8018370:	f7ef fd88 	bl	8007e84 <__adddf3>
 8018374:	4652      	mov	r2, sl
 8018376:	465b      	mov	r3, fp
 8018378:	4606      	mov	r6, r0
 801837a:	460f      	mov	r7, r1
 801837c:	4620      	mov	r0, r4
 801837e:	4629      	mov	r1, r5
 8018380:	f7ef ff36 	bl	80081f0 <__aeabi_dmul>
 8018384:	460b      	mov	r3, r1
 8018386:	4602      	mov	r2, r0
 8018388:	4680      	mov	r8, r0
 801838a:	4689      	mov	r9, r1
 801838c:	4630      	mov	r0, r6
 801838e:	4639      	mov	r1, r7
 8018390:	f7ef fd78 	bl	8007e84 <__adddf3>
 8018394:	4b17      	ldr	r3, [pc, #92]	@ (80183f4 <__ieee754_pow+0x41c>)
 8018396:	4299      	cmp	r1, r3
 8018398:	4604      	mov	r4, r0
 801839a:	460d      	mov	r5, r1
 801839c:	468a      	mov	sl, r1
 801839e:	468b      	mov	fp, r1
 80183a0:	f340 82ef 	ble.w	8018982 <__ieee754_pow+0x9aa>
 80183a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80183a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80183ac:	4303      	orrs	r3, r0
 80183ae:	f000 81e8 	beq.w	8018782 <__ieee754_pow+0x7aa>
 80183b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183b6:	2200      	movs	r2, #0
 80183b8:	2300      	movs	r3, #0
 80183ba:	f7f0 f98b 	bl	80086d4 <__aeabi_dcmplt>
 80183be:	3800      	subs	r0, #0
 80183c0:	bf18      	it	ne
 80183c2:	2001      	movne	r0, #1
 80183c4:	e710      	b.n	80181e8 <__ieee754_pow+0x210>
 80183c6:	bf00      	nop
 80183c8:	60000000 	.word	0x60000000
 80183cc:	3ff71547 	.word	0x3ff71547
 80183d0:	f85ddf44 	.word	0xf85ddf44
 80183d4:	3e54ae0b 	.word	0x3e54ae0b
 80183d8:	55555555 	.word	0x55555555
 80183dc:	3fd55555 	.word	0x3fd55555
 80183e0:	652b82fe 	.word	0x652b82fe
 80183e4:	3ff71547 	.word	0x3ff71547
 80183e8:	3ff00000 	.word	0x3ff00000
 80183ec:	3fd00000 	.word	0x3fd00000
 80183f0:	3fe00000 	.word	0x3fe00000
 80183f4:	408fffff 	.word	0x408fffff
 80183f8:	4bd5      	ldr	r3, [pc, #852]	@ (8018750 <__ieee754_pow+0x778>)
 80183fa:	402b      	ands	r3, r5
 80183fc:	2200      	movs	r2, #0
 80183fe:	b92b      	cbnz	r3, 801840c <__ieee754_pow+0x434>
 8018400:	4bd4      	ldr	r3, [pc, #848]	@ (8018754 <__ieee754_pow+0x77c>)
 8018402:	f7ef fef5 	bl	80081f0 <__aeabi_dmul>
 8018406:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801840a:	468b      	mov	fp, r1
 801840c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8018410:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018414:	4413      	add	r3, r2
 8018416:	930a      	str	r3, [sp, #40]	@ 0x28
 8018418:	4bcf      	ldr	r3, [pc, #828]	@ (8018758 <__ieee754_pow+0x780>)
 801841a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801841e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8018422:	459b      	cmp	fp, r3
 8018424:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018428:	dd08      	ble.n	801843c <__ieee754_pow+0x464>
 801842a:	4bcc      	ldr	r3, [pc, #816]	@ (801875c <__ieee754_pow+0x784>)
 801842c:	459b      	cmp	fp, r3
 801842e:	f340 81a5 	ble.w	801877c <__ieee754_pow+0x7a4>
 8018432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018434:	3301      	adds	r3, #1
 8018436:	930a      	str	r3, [sp, #40]	@ 0x28
 8018438:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801843c:	f04f 0a00 	mov.w	sl, #0
 8018440:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018444:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018446:	4bc6      	ldr	r3, [pc, #792]	@ (8018760 <__ieee754_pow+0x788>)
 8018448:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801844c:	ed93 7b00 	vldr	d7, [r3]
 8018450:	4629      	mov	r1, r5
 8018452:	ec53 2b17 	vmov	r2, r3, d7
 8018456:	ed8d 7b06 	vstr	d7, [sp, #24]
 801845a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801845e:	f7ef fd0f 	bl	8007e80 <__aeabi_dsub>
 8018462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018466:	4606      	mov	r6, r0
 8018468:	460f      	mov	r7, r1
 801846a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801846e:	f7ef fd09 	bl	8007e84 <__adddf3>
 8018472:	4602      	mov	r2, r0
 8018474:	460b      	mov	r3, r1
 8018476:	2000      	movs	r0, #0
 8018478:	49ba      	ldr	r1, [pc, #744]	@ (8018764 <__ieee754_pow+0x78c>)
 801847a:	f7ef ffe3 	bl	8008444 <__aeabi_ddiv>
 801847e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8018482:	4602      	mov	r2, r0
 8018484:	460b      	mov	r3, r1
 8018486:	4630      	mov	r0, r6
 8018488:	4639      	mov	r1, r7
 801848a:	f7ef feb1 	bl	80081f0 <__aeabi_dmul>
 801848e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018492:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8018496:	106d      	asrs	r5, r5, #1
 8018498:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801849c:	f04f 0b00 	mov.w	fp, #0
 80184a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80184a4:	4661      	mov	r1, ip
 80184a6:	2200      	movs	r2, #0
 80184a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80184ac:	4658      	mov	r0, fp
 80184ae:	46e1      	mov	r9, ip
 80184b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80184b4:	4614      	mov	r4, r2
 80184b6:	461d      	mov	r5, r3
 80184b8:	f7ef fe9a 	bl	80081f0 <__aeabi_dmul>
 80184bc:	4602      	mov	r2, r0
 80184be:	460b      	mov	r3, r1
 80184c0:	4630      	mov	r0, r6
 80184c2:	4639      	mov	r1, r7
 80184c4:	f7ef fcdc 	bl	8007e80 <__aeabi_dsub>
 80184c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80184cc:	4606      	mov	r6, r0
 80184ce:	460f      	mov	r7, r1
 80184d0:	4620      	mov	r0, r4
 80184d2:	4629      	mov	r1, r5
 80184d4:	f7ef fcd4 	bl	8007e80 <__aeabi_dsub>
 80184d8:	4602      	mov	r2, r0
 80184da:	460b      	mov	r3, r1
 80184dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80184e0:	f7ef fcce 	bl	8007e80 <__aeabi_dsub>
 80184e4:	465a      	mov	r2, fp
 80184e6:	464b      	mov	r3, r9
 80184e8:	f7ef fe82 	bl	80081f0 <__aeabi_dmul>
 80184ec:	4602      	mov	r2, r0
 80184ee:	460b      	mov	r3, r1
 80184f0:	4630      	mov	r0, r6
 80184f2:	4639      	mov	r1, r7
 80184f4:	f7ef fcc4 	bl	8007e80 <__aeabi_dsub>
 80184f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80184fc:	f7ef fe78 	bl	80081f0 <__aeabi_dmul>
 8018500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018508:	4610      	mov	r0, r2
 801850a:	4619      	mov	r1, r3
 801850c:	f7ef fe70 	bl	80081f0 <__aeabi_dmul>
 8018510:	a37d      	add	r3, pc, #500	@ (adr r3, 8018708 <__ieee754_pow+0x730>)
 8018512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018516:	4604      	mov	r4, r0
 8018518:	460d      	mov	r5, r1
 801851a:	f7ef fe69 	bl	80081f0 <__aeabi_dmul>
 801851e:	a37c      	add	r3, pc, #496	@ (adr r3, 8018710 <__ieee754_pow+0x738>)
 8018520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018524:	f7ef fcae 	bl	8007e84 <__adddf3>
 8018528:	4622      	mov	r2, r4
 801852a:	462b      	mov	r3, r5
 801852c:	f7ef fe60 	bl	80081f0 <__aeabi_dmul>
 8018530:	a379      	add	r3, pc, #484	@ (adr r3, 8018718 <__ieee754_pow+0x740>)
 8018532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018536:	f7ef fca5 	bl	8007e84 <__adddf3>
 801853a:	4622      	mov	r2, r4
 801853c:	462b      	mov	r3, r5
 801853e:	f7ef fe57 	bl	80081f0 <__aeabi_dmul>
 8018542:	a377      	add	r3, pc, #476	@ (adr r3, 8018720 <__ieee754_pow+0x748>)
 8018544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018548:	f7ef fc9c 	bl	8007e84 <__adddf3>
 801854c:	4622      	mov	r2, r4
 801854e:	462b      	mov	r3, r5
 8018550:	f7ef fe4e 	bl	80081f0 <__aeabi_dmul>
 8018554:	a374      	add	r3, pc, #464	@ (adr r3, 8018728 <__ieee754_pow+0x750>)
 8018556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801855a:	f7ef fc93 	bl	8007e84 <__adddf3>
 801855e:	4622      	mov	r2, r4
 8018560:	462b      	mov	r3, r5
 8018562:	f7ef fe45 	bl	80081f0 <__aeabi_dmul>
 8018566:	a372      	add	r3, pc, #456	@ (adr r3, 8018730 <__ieee754_pow+0x758>)
 8018568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801856c:	f7ef fc8a 	bl	8007e84 <__adddf3>
 8018570:	4622      	mov	r2, r4
 8018572:	4606      	mov	r6, r0
 8018574:	460f      	mov	r7, r1
 8018576:	462b      	mov	r3, r5
 8018578:	4620      	mov	r0, r4
 801857a:	4629      	mov	r1, r5
 801857c:	f7ef fe38 	bl	80081f0 <__aeabi_dmul>
 8018580:	4602      	mov	r2, r0
 8018582:	460b      	mov	r3, r1
 8018584:	4630      	mov	r0, r6
 8018586:	4639      	mov	r1, r7
 8018588:	f7ef fe32 	bl	80081f0 <__aeabi_dmul>
 801858c:	465a      	mov	r2, fp
 801858e:	4604      	mov	r4, r0
 8018590:	460d      	mov	r5, r1
 8018592:	464b      	mov	r3, r9
 8018594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018598:	f7ef fc74 	bl	8007e84 <__adddf3>
 801859c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80185a0:	f7ef fe26 	bl	80081f0 <__aeabi_dmul>
 80185a4:	4622      	mov	r2, r4
 80185a6:	462b      	mov	r3, r5
 80185a8:	f7ef fc6c 	bl	8007e84 <__adddf3>
 80185ac:	465a      	mov	r2, fp
 80185ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80185b2:	464b      	mov	r3, r9
 80185b4:	4658      	mov	r0, fp
 80185b6:	4649      	mov	r1, r9
 80185b8:	f7ef fe1a 	bl	80081f0 <__aeabi_dmul>
 80185bc:	4b6a      	ldr	r3, [pc, #424]	@ (8018768 <__ieee754_pow+0x790>)
 80185be:	2200      	movs	r2, #0
 80185c0:	4606      	mov	r6, r0
 80185c2:	460f      	mov	r7, r1
 80185c4:	f7ef fc5e 	bl	8007e84 <__adddf3>
 80185c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80185cc:	f7ef fc5a 	bl	8007e84 <__adddf3>
 80185d0:	46d8      	mov	r8, fp
 80185d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80185d6:	460d      	mov	r5, r1
 80185d8:	465a      	mov	r2, fp
 80185da:	460b      	mov	r3, r1
 80185dc:	4640      	mov	r0, r8
 80185de:	4649      	mov	r1, r9
 80185e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80185e4:	f7ef fe04 	bl	80081f0 <__aeabi_dmul>
 80185e8:	465c      	mov	r4, fp
 80185ea:	4680      	mov	r8, r0
 80185ec:	4689      	mov	r9, r1
 80185ee:	4b5e      	ldr	r3, [pc, #376]	@ (8018768 <__ieee754_pow+0x790>)
 80185f0:	2200      	movs	r2, #0
 80185f2:	4620      	mov	r0, r4
 80185f4:	4629      	mov	r1, r5
 80185f6:	f7ef fc43 	bl	8007e80 <__aeabi_dsub>
 80185fa:	4632      	mov	r2, r6
 80185fc:	463b      	mov	r3, r7
 80185fe:	f7ef fc3f 	bl	8007e80 <__aeabi_dsub>
 8018602:	4602      	mov	r2, r0
 8018604:	460b      	mov	r3, r1
 8018606:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801860a:	f7ef fc39 	bl	8007e80 <__aeabi_dsub>
 801860e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018612:	f7ef fded 	bl	80081f0 <__aeabi_dmul>
 8018616:	4622      	mov	r2, r4
 8018618:	4606      	mov	r6, r0
 801861a:	460f      	mov	r7, r1
 801861c:	462b      	mov	r3, r5
 801861e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018622:	f7ef fde5 	bl	80081f0 <__aeabi_dmul>
 8018626:	4602      	mov	r2, r0
 8018628:	460b      	mov	r3, r1
 801862a:	4630      	mov	r0, r6
 801862c:	4639      	mov	r1, r7
 801862e:	f7ef fc29 	bl	8007e84 <__adddf3>
 8018632:	4606      	mov	r6, r0
 8018634:	460f      	mov	r7, r1
 8018636:	4602      	mov	r2, r0
 8018638:	460b      	mov	r3, r1
 801863a:	4640      	mov	r0, r8
 801863c:	4649      	mov	r1, r9
 801863e:	f7ef fc21 	bl	8007e84 <__adddf3>
 8018642:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8018646:	a33c      	add	r3, pc, #240	@ (adr r3, 8018738 <__ieee754_pow+0x760>)
 8018648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801864c:	4658      	mov	r0, fp
 801864e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8018652:	460d      	mov	r5, r1
 8018654:	f7ef fdcc 	bl	80081f0 <__aeabi_dmul>
 8018658:	465c      	mov	r4, fp
 801865a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801865e:	4642      	mov	r2, r8
 8018660:	464b      	mov	r3, r9
 8018662:	4620      	mov	r0, r4
 8018664:	4629      	mov	r1, r5
 8018666:	f7ef fc0b 	bl	8007e80 <__aeabi_dsub>
 801866a:	4602      	mov	r2, r0
 801866c:	460b      	mov	r3, r1
 801866e:	4630      	mov	r0, r6
 8018670:	4639      	mov	r1, r7
 8018672:	f7ef fc05 	bl	8007e80 <__aeabi_dsub>
 8018676:	a332      	add	r3, pc, #200	@ (adr r3, 8018740 <__ieee754_pow+0x768>)
 8018678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801867c:	f7ef fdb8 	bl	80081f0 <__aeabi_dmul>
 8018680:	a331      	add	r3, pc, #196	@ (adr r3, 8018748 <__ieee754_pow+0x770>)
 8018682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018686:	4606      	mov	r6, r0
 8018688:	460f      	mov	r7, r1
 801868a:	4620      	mov	r0, r4
 801868c:	4629      	mov	r1, r5
 801868e:	f7ef fdaf 	bl	80081f0 <__aeabi_dmul>
 8018692:	4602      	mov	r2, r0
 8018694:	460b      	mov	r3, r1
 8018696:	4630      	mov	r0, r6
 8018698:	4639      	mov	r1, r7
 801869a:	f7ef fbf3 	bl	8007e84 <__adddf3>
 801869e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80186a0:	4b32      	ldr	r3, [pc, #200]	@ (801876c <__ieee754_pow+0x794>)
 80186a2:	4413      	add	r3, r2
 80186a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186a8:	f7ef fbec 	bl	8007e84 <__adddf3>
 80186ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80186b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80186b2:	f7ef fd33 	bl	800811c <__aeabi_i2d>
 80186b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80186b8:	4b2d      	ldr	r3, [pc, #180]	@ (8018770 <__ieee754_pow+0x798>)
 80186ba:	4413      	add	r3, r2
 80186bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80186c0:	4606      	mov	r6, r0
 80186c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80186c6:	460f      	mov	r7, r1
 80186c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80186cc:	f7ef fbda 	bl	8007e84 <__adddf3>
 80186d0:	4642      	mov	r2, r8
 80186d2:	464b      	mov	r3, r9
 80186d4:	f7ef fbd6 	bl	8007e84 <__adddf3>
 80186d8:	4632      	mov	r2, r6
 80186da:	463b      	mov	r3, r7
 80186dc:	f7ef fbd2 	bl	8007e84 <__adddf3>
 80186e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80186e4:	4632      	mov	r2, r6
 80186e6:	463b      	mov	r3, r7
 80186e8:	4658      	mov	r0, fp
 80186ea:	460d      	mov	r5, r1
 80186ec:	f7ef fbc8 	bl	8007e80 <__aeabi_dsub>
 80186f0:	4642      	mov	r2, r8
 80186f2:	464b      	mov	r3, r9
 80186f4:	f7ef fbc4 	bl	8007e80 <__aeabi_dsub>
 80186f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80186fc:	f7ef fbc0 	bl	8007e80 <__aeabi_dsub>
 8018700:	465c      	mov	r4, fp
 8018702:	4602      	mov	r2, r0
 8018704:	e036      	b.n	8018774 <__ieee754_pow+0x79c>
 8018706:	bf00      	nop
 8018708:	4a454eef 	.word	0x4a454eef
 801870c:	3fca7e28 	.word	0x3fca7e28
 8018710:	93c9db65 	.word	0x93c9db65
 8018714:	3fcd864a 	.word	0x3fcd864a
 8018718:	a91d4101 	.word	0xa91d4101
 801871c:	3fd17460 	.word	0x3fd17460
 8018720:	518f264d 	.word	0x518f264d
 8018724:	3fd55555 	.word	0x3fd55555
 8018728:	db6fabff 	.word	0xdb6fabff
 801872c:	3fdb6db6 	.word	0x3fdb6db6
 8018730:	33333303 	.word	0x33333303
 8018734:	3fe33333 	.word	0x3fe33333
 8018738:	e0000000 	.word	0xe0000000
 801873c:	3feec709 	.word	0x3feec709
 8018740:	dc3a03fd 	.word	0xdc3a03fd
 8018744:	3feec709 	.word	0x3feec709
 8018748:	145b01f5 	.word	0x145b01f5
 801874c:	be3e2fe0 	.word	0xbe3e2fe0
 8018750:	7ff00000 	.word	0x7ff00000
 8018754:	43400000 	.word	0x43400000
 8018758:	0003988e 	.word	0x0003988e
 801875c:	000bb679 	.word	0x000bb679
 8018760:	08019f08 	.word	0x08019f08
 8018764:	3ff00000 	.word	0x3ff00000
 8018768:	40080000 	.word	0x40080000
 801876c:	08019ee8 	.word	0x08019ee8
 8018770:	08019ef8 	.word	0x08019ef8
 8018774:	460b      	mov	r3, r1
 8018776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801877a:	e5d7      	b.n	801832c <__ieee754_pow+0x354>
 801877c:	f04f 0a01 	mov.w	sl, #1
 8018780:	e65e      	b.n	8018440 <__ieee754_pow+0x468>
 8018782:	a3b4      	add	r3, pc, #720	@ (adr r3, 8018a54 <__ieee754_pow+0xa7c>)
 8018784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018788:	4630      	mov	r0, r6
 801878a:	4639      	mov	r1, r7
 801878c:	f7ef fb7a 	bl	8007e84 <__adddf3>
 8018790:	4642      	mov	r2, r8
 8018792:	e9cd 0100 	strd	r0, r1, [sp]
 8018796:	464b      	mov	r3, r9
 8018798:	4620      	mov	r0, r4
 801879a:	4629      	mov	r1, r5
 801879c:	f7ef fb70 	bl	8007e80 <__aeabi_dsub>
 80187a0:	4602      	mov	r2, r0
 80187a2:	460b      	mov	r3, r1
 80187a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187a8:	f7ef ffb2 	bl	8008710 <__aeabi_dcmpgt>
 80187ac:	2800      	cmp	r0, #0
 80187ae:	f47f ae00 	bne.w	80183b2 <__ieee754_pow+0x3da>
 80187b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80187b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80187ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80187be:	fa43 fa0a 	asr.w	sl, r3, sl
 80187c2:	44da      	add	sl, fp
 80187c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80187c8:	489d      	ldr	r0, [pc, #628]	@ (8018a40 <__ieee754_pow+0xa68>)
 80187ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80187ce:	4108      	asrs	r0, r1
 80187d0:	ea00 030a 	and.w	r3, r0, sl
 80187d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80187d8:	f1c1 0114 	rsb	r1, r1, #20
 80187dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80187e0:	fa4a fa01 	asr.w	sl, sl, r1
 80187e4:	f1bb 0f00 	cmp.w	fp, #0
 80187e8:	4640      	mov	r0, r8
 80187ea:	4649      	mov	r1, r9
 80187ec:	f04f 0200 	mov.w	r2, #0
 80187f0:	bfb8      	it	lt
 80187f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80187f6:	f7ef fb43 	bl	8007e80 <__aeabi_dsub>
 80187fa:	4680      	mov	r8, r0
 80187fc:	4689      	mov	r9, r1
 80187fe:	4632      	mov	r2, r6
 8018800:	463b      	mov	r3, r7
 8018802:	4640      	mov	r0, r8
 8018804:	4649      	mov	r1, r9
 8018806:	f7ef fb3d 	bl	8007e84 <__adddf3>
 801880a:	2400      	movs	r4, #0
 801880c:	a37c      	add	r3, pc, #496	@ (adr r3, 8018a00 <__ieee754_pow+0xa28>)
 801880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018812:	4620      	mov	r0, r4
 8018814:	460d      	mov	r5, r1
 8018816:	f7ef fceb 	bl	80081f0 <__aeabi_dmul>
 801881a:	4642      	mov	r2, r8
 801881c:	e9cd 0100 	strd	r0, r1, [sp]
 8018820:	464b      	mov	r3, r9
 8018822:	4620      	mov	r0, r4
 8018824:	4629      	mov	r1, r5
 8018826:	f7ef fb2b 	bl	8007e80 <__aeabi_dsub>
 801882a:	4602      	mov	r2, r0
 801882c:	460b      	mov	r3, r1
 801882e:	4630      	mov	r0, r6
 8018830:	4639      	mov	r1, r7
 8018832:	f7ef fb25 	bl	8007e80 <__aeabi_dsub>
 8018836:	a374      	add	r3, pc, #464	@ (adr r3, 8018a08 <__ieee754_pow+0xa30>)
 8018838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801883c:	f7ef fcd8 	bl	80081f0 <__aeabi_dmul>
 8018840:	a373      	add	r3, pc, #460	@ (adr r3, 8018a10 <__ieee754_pow+0xa38>)
 8018842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018846:	4680      	mov	r8, r0
 8018848:	4689      	mov	r9, r1
 801884a:	4620      	mov	r0, r4
 801884c:	4629      	mov	r1, r5
 801884e:	f7ef fccf 	bl	80081f0 <__aeabi_dmul>
 8018852:	4602      	mov	r2, r0
 8018854:	460b      	mov	r3, r1
 8018856:	4640      	mov	r0, r8
 8018858:	4649      	mov	r1, r9
 801885a:	f7ef fb13 	bl	8007e84 <__adddf3>
 801885e:	4604      	mov	r4, r0
 8018860:	460d      	mov	r5, r1
 8018862:	4602      	mov	r2, r0
 8018864:	460b      	mov	r3, r1
 8018866:	e9dd 0100 	ldrd	r0, r1, [sp]
 801886a:	f7ef fb0b 	bl	8007e84 <__adddf3>
 801886e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018872:	4680      	mov	r8, r0
 8018874:	4689      	mov	r9, r1
 8018876:	f7ef fb03 	bl	8007e80 <__aeabi_dsub>
 801887a:	4602      	mov	r2, r0
 801887c:	460b      	mov	r3, r1
 801887e:	4620      	mov	r0, r4
 8018880:	4629      	mov	r1, r5
 8018882:	f7ef fafd 	bl	8007e80 <__aeabi_dsub>
 8018886:	4642      	mov	r2, r8
 8018888:	4606      	mov	r6, r0
 801888a:	460f      	mov	r7, r1
 801888c:	464b      	mov	r3, r9
 801888e:	4640      	mov	r0, r8
 8018890:	4649      	mov	r1, r9
 8018892:	f7ef fcad 	bl	80081f0 <__aeabi_dmul>
 8018896:	a360      	add	r3, pc, #384	@ (adr r3, 8018a18 <__ieee754_pow+0xa40>)
 8018898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801889c:	4604      	mov	r4, r0
 801889e:	460d      	mov	r5, r1
 80188a0:	f7ef fca6 	bl	80081f0 <__aeabi_dmul>
 80188a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8018a20 <__ieee754_pow+0xa48>)
 80188a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188aa:	f7ef fae9 	bl	8007e80 <__aeabi_dsub>
 80188ae:	4622      	mov	r2, r4
 80188b0:	462b      	mov	r3, r5
 80188b2:	f7ef fc9d 	bl	80081f0 <__aeabi_dmul>
 80188b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8018a28 <__ieee754_pow+0xa50>)
 80188b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188bc:	f7ef fae2 	bl	8007e84 <__adddf3>
 80188c0:	4622      	mov	r2, r4
 80188c2:	462b      	mov	r3, r5
 80188c4:	f7ef fc94 	bl	80081f0 <__aeabi_dmul>
 80188c8:	a359      	add	r3, pc, #356	@ (adr r3, 8018a30 <__ieee754_pow+0xa58>)
 80188ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ce:	f7ef fad7 	bl	8007e80 <__aeabi_dsub>
 80188d2:	4622      	mov	r2, r4
 80188d4:	462b      	mov	r3, r5
 80188d6:	f7ef fc8b 	bl	80081f0 <__aeabi_dmul>
 80188da:	a357      	add	r3, pc, #348	@ (adr r3, 8018a38 <__ieee754_pow+0xa60>)
 80188dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188e0:	f7ef fad0 	bl	8007e84 <__adddf3>
 80188e4:	4622      	mov	r2, r4
 80188e6:	462b      	mov	r3, r5
 80188e8:	f7ef fc82 	bl	80081f0 <__aeabi_dmul>
 80188ec:	4602      	mov	r2, r0
 80188ee:	460b      	mov	r3, r1
 80188f0:	4640      	mov	r0, r8
 80188f2:	4649      	mov	r1, r9
 80188f4:	f7ef fac4 	bl	8007e80 <__aeabi_dsub>
 80188f8:	4604      	mov	r4, r0
 80188fa:	460d      	mov	r5, r1
 80188fc:	4602      	mov	r2, r0
 80188fe:	460b      	mov	r3, r1
 8018900:	4640      	mov	r0, r8
 8018902:	4649      	mov	r1, r9
 8018904:	f7ef fc74 	bl	80081f0 <__aeabi_dmul>
 8018908:	2200      	movs	r2, #0
 801890a:	e9cd 0100 	strd	r0, r1, [sp]
 801890e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018912:	4620      	mov	r0, r4
 8018914:	4629      	mov	r1, r5
 8018916:	f7ef fab3 	bl	8007e80 <__aeabi_dsub>
 801891a:	4602      	mov	r2, r0
 801891c:	460b      	mov	r3, r1
 801891e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018922:	f7ef fd8f 	bl	8008444 <__aeabi_ddiv>
 8018926:	4632      	mov	r2, r6
 8018928:	4604      	mov	r4, r0
 801892a:	460d      	mov	r5, r1
 801892c:	463b      	mov	r3, r7
 801892e:	4640      	mov	r0, r8
 8018930:	4649      	mov	r1, r9
 8018932:	f7ef fc5d 	bl	80081f0 <__aeabi_dmul>
 8018936:	4632      	mov	r2, r6
 8018938:	463b      	mov	r3, r7
 801893a:	f7ef faa3 	bl	8007e84 <__adddf3>
 801893e:	4602      	mov	r2, r0
 8018940:	460b      	mov	r3, r1
 8018942:	4620      	mov	r0, r4
 8018944:	4629      	mov	r1, r5
 8018946:	f7ef fa9b 	bl	8007e80 <__aeabi_dsub>
 801894a:	4642      	mov	r2, r8
 801894c:	464b      	mov	r3, r9
 801894e:	f7ef fa97 	bl	8007e80 <__aeabi_dsub>
 8018952:	460b      	mov	r3, r1
 8018954:	4602      	mov	r2, r0
 8018956:	493b      	ldr	r1, [pc, #236]	@ (8018a44 <__ieee754_pow+0xa6c>)
 8018958:	2000      	movs	r0, #0
 801895a:	f7ef fa91 	bl	8007e80 <__aeabi_dsub>
 801895e:	ec41 0b10 	vmov	d0, r0, r1
 8018962:	ee10 3a90 	vmov	r3, s1
 8018966:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801896a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801896e:	da30      	bge.n	80189d2 <__ieee754_pow+0x9fa>
 8018970:	4650      	mov	r0, sl
 8018972:	f000 f87d 	bl	8018a70 <scalbn>
 8018976:	ec51 0b10 	vmov	r0, r1, d0
 801897a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801897e:	f7ff bbd2 	b.w	8018126 <__ieee754_pow+0x14e>
 8018982:	4c31      	ldr	r4, [pc, #196]	@ (8018a48 <__ieee754_pow+0xa70>)
 8018984:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018988:	42a3      	cmp	r3, r4
 801898a:	d91a      	bls.n	80189c2 <__ieee754_pow+0x9ea>
 801898c:	4b2f      	ldr	r3, [pc, #188]	@ (8018a4c <__ieee754_pow+0xa74>)
 801898e:	440b      	add	r3, r1
 8018990:	4303      	orrs	r3, r0
 8018992:	d009      	beq.n	80189a8 <__ieee754_pow+0x9d0>
 8018994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018998:	2200      	movs	r2, #0
 801899a:	2300      	movs	r3, #0
 801899c:	f7ef fe9a 	bl	80086d4 <__aeabi_dcmplt>
 80189a0:	3800      	subs	r0, #0
 80189a2:	bf18      	it	ne
 80189a4:	2001      	movne	r0, #1
 80189a6:	e42b      	b.n	8018200 <__ieee754_pow+0x228>
 80189a8:	4642      	mov	r2, r8
 80189aa:	464b      	mov	r3, r9
 80189ac:	f7ef fa68 	bl	8007e80 <__aeabi_dsub>
 80189b0:	4632      	mov	r2, r6
 80189b2:	463b      	mov	r3, r7
 80189b4:	f7ef fea2 	bl	80086fc <__aeabi_dcmpge>
 80189b8:	2800      	cmp	r0, #0
 80189ba:	d1eb      	bne.n	8018994 <__ieee754_pow+0x9bc>
 80189bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8018a5c <__ieee754_pow+0xa84>
 80189c0:	e6f7      	b.n	80187b2 <__ieee754_pow+0x7da>
 80189c2:	469a      	mov	sl, r3
 80189c4:	4b22      	ldr	r3, [pc, #136]	@ (8018a50 <__ieee754_pow+0xa78>)
 80189c6:	459a      	cmp	sl, r3
 80189c8:	f63f aef3 	bhi.w	80187b2 <__ieee754_pow+0x7da>
 80189cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80189d0:	e715      	b.n	80187fe <__ieee754_pow+0x826>
 80189d2:	ec51 0b10 	vmov	r0, r1, d0
 80189d6:	4619      	mov	r1, r3
 80189d8:	e7cf      	b.n	801897a <__ieee754_pow+0x9a2>
 80189da:	491a      	ldr	r1, [pc, #104]	@ (8018a44 <__ieee754_pow+0xa6c>)
 80189dc:	2000      	movs	r0, #0
 80189de:	f7ff bb18 	b.w	8018012 <__ieee754_pow+0x3a>
 80189e2:	2000      	movs	r0, #0
 80189e4:	2100      	movs	r1, #0
 80189e6:	f7ff bb14 	b.w	8018012 <__ieee754_pow+0x3a>
 80189ea:	4630      	mov	r0, r6
 80189ec:	4639      	mov	r1, r7
 80189ee:	f7ff bb10 	b.w	8018012 <__ieee754_pow+0x3a>
 80189f2:	460c      	mov	r4, r1
 80189f4:	f7ff bb5e 	b.w	80180b4 <__ieee754_pow+0xdc>
 80189f8:	2400      	movs	r4, #0
 80189fa:	f7ff bb49 	b.w	8018090 <__ieee754_pow+0xb8>
 80189fe:	bf00      	nop
 8018a00:	00000000 	.word	0x00000000
 8018a04:	3fe62e43 	.word	0x3fe62e43
 8018a08:	fefa39ef 	.word	0xfefa39ef
 8018a0c:	3fe62e42 	.word	0x3fe62e42
 8018a10:	0ca86c39 	.word	0x0ca86c39
 8018a14:	be205c61 	.word	0xbe205c61
 8018a18:	72bea4d0 	.word	0x72bea4d0
 8018a1c:	3e663769 	.word	0x3e663769
 8018a20:	c5d26bf1 	.word	0xc5d26bf1
 8018a24:	3ebbbd41 	.word	0x3ebbbd41
 8018a28:	af25de2c 	.word	0xaf25de2c
 8018a2c:	3f11566a 	.word	0x3f11566a
 8018a30:	16bebd93 	.word	0x16bebd93
 8018a34:	3f66c16c 	.word	0x3f66c16c
 8018a38:	5555553e 	.word	0x5555553e
 8018a3c:	3fc55555 	.word	0x3fc55555
 8018a40:	fff00000 	.word	0xfff00000
 8018a44:	3ff00000 	.word	0x3ff00000
 8018a48:	4090cbff 	.word	0x4090cbff
 8018a4c:	3f6f3400 	.word	0x3f6f3400
 8018a50:	3fe00000 	.word	0x3fe00000
 8018a54:	652b82fe 	.word	0x652b82fe
 8018a58:	3c971547 	.word	0x3c971547
 8018a5c:	4090cc00 	.word	0x4090cc00

08018a60 <fabs>:
 8018a60:	ec51 0b10 	vmov	r0, r1, d0
 8018a64:	4602      	mov	r2, r0
 8018a66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018a6a:	ec43 2b10 	vmov	d0, r2, r3
 8018a6e:	4770      	bx	lr

08018a70 <scalbn>:
 8018a70:	b570      	push	{r4, r5, r6, lr}
 8018a72:	ec55 4b10 	vmov	r4, r5, d0
 8018a76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018a7a:	4606      	mov	r6, r0
 8018a7c:	462b      	mov	r3, r5
 8018a7e:	b991      	cbnz	r1, 8018aa6 <scalbn+0x36>
 8018a80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8018a84:	4323      	orrs	r3, r4
 8018a86:	d03d      	beq.n	8018b04 <scalbn+0x94>
 8018a88:	4b35      	ldr	r3, [pc, #212]	@ (8018b60 <scalbn+0xf0>)
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	4629      	mov	r1, r5
 8018a8e:	2200      	movs	r2, #0
 8018a90:	f7ef fbae 	bl	80081f0 <__aeabi_dmul>
 8018a94:	4b33      	ldr	r3, [pc, #204]	@ (8018b64 <scalbn+0xf4>)
 8018a96:	429e      	cmp	r6, r3
 8018a98:	4604      	mov	r4, r0
 8018a9a:	460d      	mov	r5, r1
 8018a9c:	da0f      	bge.n	8018abe <scalbn+0x4e>
 8018a9e:	a328      	add	r3, pc, #160	@ (adr r3, 8018b40 <scalbn+0xd0>)
 8018aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa4:	e01e      	b.n	8018ae4 <scalbn+0x74>
 8018aa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018aaa:	4291      	cmp	r1, r2
 8018aac:	d10b      	bne.n	8018ac6 <scalbn+0x56>
 8018aae:	4622      	mov	r2, r4
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	4629      	mov	r1, r5
 8018ab4:	f7ef f9e6 	bl	8007e84 <__adddf3>
 8018ab8:	4604      	mov	r4, r0
 8018aba:	460d      	mov	r5, r1
 8018abc:	e022      	b.n	8018b04 <scalbn+0x94>
 8018abe:	460b      	mov	r3, r1
 8018ac0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018ac4:	3936      	subs	r1, #54	@ 0x36
 8018ac6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018aca:	4296      	cmp	r6, r2
 8018acc:	dd0d      	ble.n	8018aea <scalbn+0x7a>
 8018ace:	2d00      	cmp	r5, #0
 8018ad0:	a11d      	add	r1, pc, #116	@ (adr r1, 8018b48 <scalbn+0xd8>)
 8018ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ad6:	da02      	bge.n	8018ade <scalbn+0x6e>
 8018ad8:	a11d      	add	r1, pc, #116	@ (adr r1, 8018b50 <scalbn+0xe0>)
 8018ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ade:	a31a      	add	r3, pc, #104	@ (adr r3, 8018b48 <scalbn+0xd8>)
 8018ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ae4:	f7ef fb84 	bl	80081f0 <__aeabi_dmul>
 8018ae8:	e7e6      	b.n	8018ab8 <scalbn+0x48>
 8018aea:	1872      	adds	r2, r6, r1
 8018aec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018af0:	428a      	cmp	r2, r1
 8018af2:	dcec      	bgt.n	8018ace <scalbn+0x5e>
 8018af4:	2a00      	cmp	r2, #0
 8018af6:	dd08      	ble.n	8018b0a <scalbn+0x9a>
 8018af8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018afc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018b00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b04:	ec45 4b10 	vmov	d0, r4, r5
 8018b08:	bd70      	pop	{r4, r5, r6, pc}
 8018b0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018b0e:	da08      	bge.n	8018b22 <scalbn+0xb2>
 8018b10:	2d00      	cmp	r5, #0
 8018b12:	a10b      	add	r1, pc, #44	@ (adr r1, 8018b40 <scalbn+0xd0>)
 8018b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b18:	dac1      	bge.n	8018a9e <scalbn+0x2e>
 8018b1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8018b58 <scalbn+0xe8>)
 8018b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b20:	e7bd      	b.n	8018a9e <scalbn+0x2e>
 8018b22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018b26:	3236      	adds	r2, #54	@ 0x36
 8018b28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018b2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b30:	4620      	mov	r0, r4
 8018b32:	4b0d      	ldr	r3, [pc, #52]	@ (8018b68 <scalbn+0xf8>)
 8018b34:	4629      	mov	r1, r5
 8018b36:	2200      	movs	r2, #0
 8018b38:	e7d4      	b.n	8018ae4 <scalbn+0x74>
 8018b3a:	bf00      	nop
 8018b3c:	f3af 8000 	nop.w
 8018b40:	c2f8f359 	.word	0xc2f8f359
 8018b44:	01a56e1f 	.word	0x01a56e1f
 8018b48:	8800759c 	.word	0x8800759c
 8018b4c:	7e37e43c 	.word	0x7e37e43c
 8018b50:	8800759c 	.word	0x8800759c
 8018b54:	fe37e43c 	.word	0xfe37e43c
 8018b58:	c2f8f359 	.word	0xc2f8f359
 8018b5c:	81a56e1f 	.word	0x81a56e1f
 8018b60:	43500000 	.word	0x43500000
 8018b64:	ffff3cb0 	.word	0xffff3cb0
 8018b68:	3c900000 	.word	0x3c900000

08018b6c <with_errno>:
 8018b6c:	b510      	push	{r4, lr}
 8018b6e:	ed2d 8b02 	vpush	{d8}
 8018b72:	eeb0 8a40 	vmov.f32	s16, s0
 8018b76:	eef0 8a60 	vmov.f32	s17, s1
 8018b7a:	4604      	mov	r4, r0
 8018b7c:	f7fe fb36 	bl	80171ec <__errno>
 8018b80:	eeb0 0a48 	vmov.f32	s0, s16
 8018b84:	eef0 0a68 	vmov.f32	s1, s17
 8018b88:	ecbd 8b02 	vpop	{d8}
 8018b8c:	6004      	str	r4, [r0, #0]
 8018b8e:	bd10      	pop	{r4, pc}

08018b90 <xflow>:
 8018b90:	4603      	mov	r3, r0
 8018b92:	b507      	push	{r0, r1, r2, lr}
 8018b94:	ec51 0b10 	vmov	r0, r1, d0
 8018b98:	b183      	cbz	r3, 8018bbc <xflow+0x2c>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8018ba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ba8:	f7ef fb22 	bl	80081f0 <__aeabi_dmul>
 8018bac:	ec41 0b10 	vmov	d0, r0, r1
 8018bb0:	2022      	movs	r0, #34	@ 0x22
 8018bb2:	b003      	add	sp, #12
 8018bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bb8:	f7ff bfd8 	b.w	8018b6c <with_errno>
 8018bbc:	4602      	mov	r2, r0
 8018bbe:	460b      	mov	r3, r1
 8018bc0:	e7ee      	b.n	8018ba0 <xflow+0x10>
 8018bc2:	0000      	movs	r0, r0
 8018bc4:	0000      	movs	r0, r0
	...

08018bc8 <__math_uflow>:
 8018bc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018bd0 <__math_uflow+0x8>
 8018bcc:	f7ff bfe0 	b.w	8018b90 <xflow>
 8018bd0:	00000000 	.word	0x00000000
 8018bd4:	10000000 	.word	0x10000000

08018bd8 <__math_oflow>:
 8018bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018be0 <__math_oflow+0x8>
 8018bdc:	f7ff bfd8 	b.w	8018b90 <xflow>
 8018be0:	00000000 	.word	0x00000000
 8018be4:	70000000 	.word	0x70000000

08018be8 <__ieee754_sqrt>:
 8018be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bec:	4a68      	ldr	r2, [pc, #416]	@ (8018d90 <__ieee754_sqrt+0x1a8>)
 8018bee:	ec55 4b10 	vmov	r4, r5, d0
 8018bf2:	43aa      	bics	r2, r5
 8018bf4:	462b      	mov	r3, r5
 8018bf6:	4621      	mov	r1, r4
 8018bf8:	d110      	bne.n	8018c1c <__ieee754_sqrt+0x34>
 8018bfa:	4622      	mov	r2, r4
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	4629      	mov	r1, r5
 8018c00:	f7ef faf6 	bl	80081f0 <__aeabi_dmul>
 8018c04:	4602      	mov	r2, r0
 8018c06:	460b      	mov	r3, r1
 8018c08:	4620      	mov	r0, r4
 8018c0a:	4629      	mov	r1, r5
 8018c0c:	f7ef f93a 	bl	8007e84 <__adddf3>
 8018c10:	4604      	mov	r4, r0
 8018c12:	460d      	mov	r5, r1
 8018c14:	ec45 4b10 	vmov	d0, r4, r5
 8018c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c1c:	2d00      	cmp	r5, #0
 8018c1e:	dc0e      	bgt.n	8018c3e <__ieee754_sqrt+0x56>
 8018c20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8018c24:	4322      	orrs	r2, r4
 8018c26:	d0f5      	beq.n	8018c14 <__ieee754_sqrt+0x2c>
 8018c28:	b19d      	cbz	r5, 8018c52 <__ieee754_sqrt+0x6a>
 8018c2a:	4622      	mov	r2, r4
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	4629      	mov	r1, r5
 8018c30:	f7ef f926 	bl	8007e80 <__aeabi_dsub>
 8018c34:	4602      	mov	r2, r0
 8018c36:	460b      	mov	r3, r1
 8018c38:	f7ef fc04 	bl	8008444 <__aeabi_ddiv>
 8018c3c:	e7e8      	b.n	8018c10 <__ieee754_sqrt+0x28>
 8018c3e:	152a      	asrs	r2, r5, #20
 8018c40:	d115      	bne.n	8018c6e <__ieee754_sqrt+0x86>
 8018c42:	2000      	movs	r0, #0
 8018c44:	e009      	b.n	8018c5a <__ieee754_sqrt+0x72>
 8018c46:	0acb      	lsrs	r3, r1, #11
 8018c48:	3a15      	subs	r2, #21
 8018c4a:	0549      	lsls	r1, r1, #21
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d0fa      	beq.n	8018c46 <__ieee754_sqrt+0x5e>
 8018c50:	e7f7      	b.n	8018c42 <__ieee754_sqrt+0x5a>
 8018c52:	462a      	mov	r2, r5
 8018c54:	e7fa      	b.n	8018c4c <__ieee754_sqrt+0x64>
 8018c56:	005b      	lsls	r3, r3, #1
 8018c58:	3001      	adds	r0, #1
 8018c5a:	02dc      	lsls	r4, r3, #11
 8018c5c:	d5fb      	bpl.n	8018c56 <__ieee754_sqrt+0x6e>
 8018c5e:	1e44      	subs	r4, r0, #1
 8018c60:	1b12      	subs	r2, r2, r4
 8018c62:	f1c0 0420 	rsb	r4, r0, #32
 8018c66:	fa21 f404 	lsr.w	r4, r1, r4
 8018c6a:	4323      	orrs	r3, r4
 8018c6c:	4081      	lsls	r1, r0
 8018c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018c72:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8018c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018c7a:	07d2      	lsls	r2, r2, #31
 8018c7c:	bf5c      	itt	pl
 8018c7e:	005b      	lslpl	r3, r3, #1
 8018c80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8018c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018c88:	bf58      	it	pl
 8018c8a:	0049      	lslpl	r1, r1, #1
 8018c8c:	2600      	movs	r6, #0
 8018c8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8018c92:	106d      	asrs	r5, r5, #1
 8018c94:	0049      	lsls	r1, r1, #1
 8018c96:	2016      	movs	r0, #22
 8018c98:	4632      	mov	r2, r6
 8018c9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8018c9e:	1917      	adds	r7, r2, r4
 8018ca0:	429f      	cmp	r7, r3
 8018ca2:	bfde      	ittt	le
 8018ca4:	193a      	addle	r2, r7, r4
 8018ca6:	1bdb      	suble	r3, r3, r7
 8018ca8:	1936      	addle	r6, r6, r4
 8018caa:	0fcf      	lsrs	r7, r1, #31
 8018cac:	3801      	subs	r0, #1
 8018cae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018cb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018cb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018cba:	d1f0      	bne.n	8018c9e <__ieee754_sqrt+0xb6>
 8018cbc:	4604      	mov	r4, r0
 8018cbe:	2720      	movs	r7, #32
 8018cc0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	eb00 0e0c 	add.w	lr, r0, ip
 8018cca:	db02      	blt.n	8018cd2 <__ieee754_sqrt+0xea>
 8018ccc:	d113      	bne.n	8018cf6 <__ieee754_sqrt+0x10e>
 8018cce:	458e      	cmp	lr, r1
 8018cd0:	d811      	bhi.n	8018cf6 <__ieee754_sqrt+0x10e>
 8018cd2:	f1be 0f00 	cmp.w	lr, #0
 8018cd6:	eb0e 000c 	add.w	r0, lr, ip
 8018cda:	da42      	bge.n	8018d62 <__ieee754_sqrt+0x17a>
 8018cdc:	2800      	cmp	r0, #0
 8018cde:	db40      	blt.n	8018d62 <__ieee754_sqrt+0x17a>
 8018ce0:	f102 0801 	add.w	r8, r2, #1
 8018ce4:	1a9b      	subs	r3, r3, r2
 8018ce6:	458e      	cmp	lr, r1
 8018ce8:	bf88      	it	hi
 8018cea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8018cee:	eba1 010e 	sub.w	r1, r1, lr
 8018cf2:	4464      	add	r4, ip
 8018cf4:	4642      	mov	r2, r8
 8018cf6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8018cfa:	3f01      	subs	r7, #1
 8018cfc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8018d00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018d04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8018d08:	d1dc      	bne.n	8018cc4 <__ieee754_sqrt+0xdc>
 8018d0a:	4319      	orrs	r1, r3
 8018d0c:	d01b      	beq.n	8018d46 <__ieee754_sqrt+0x15e>
 8018d0e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8018d94 <__ieee754_sqrt+0x1ac>
 8018d12:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8018d98 <__ieee754_sqrt+0x1b0>
 8018d16:	e9da 0100 	ldrd	r0, r1, [sl]
 8018d1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8018d1e:	f7ef f8af 	bl	8007e80 <__aeabi_dsub>
 8018d22:	e9da 8900 	ldrd	r8, r9, [sl]
 8018d26:	4602      	mov	r2, r0
 8018d28:	460b      	mov	r3, r1
 8018d2a:	4640      	mov	r0, r8
 8018d2c:	4649      	mov	r1, r9
 8018d2e:	f7ef fcdb 	bl	80086e8 <__aeabi_dcmple>
 8018d32:	b140      	cbz	r0, 8018d46 <__ieee754_sqrt+0x15e>
 8018d34:	f1b4 3fff 	cmp.w	r4, #4294967295
 8018d38:	e9da 0100 	ldrd	r0, r1, [sl]
 8018d3c:	e9db 2300 	ldrd	r2, r3, [fp]
 8018d40:	d111      	bne.n	8018d66 <__ieee754_sqrt+0x17e>
 8018d42:	3601      	adds	r6, #1
 8018d44:	463c      	mov	r4, r7
 8018d46:	1072      	asrs	r2, r6, #1
 8018d48:	0863      	lsrs	r3, r4, #1
 8018d4a:	07f1      	lsls	r1, r6, #31
 8018d4c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8018d50:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8018d54:	bf48      	it	mi
 8018d56:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8018d5a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8018d5e:	4618      	mov	r0, r3
 8018d60:	e756      	b.n	8018c10 <__ieee754_sqrt+0x28>
 8018d62:	4690      	mov	r8, r2
 8018d64:	e7be      	b.n	8018ce4 <__ieee754_sqrt+0xfc>
 8018d66:	f7ef f88d 	bl	8007e84 <__adddf3>
 8018d6a:	e9da 8900 	ldrd	r8, r9, [sl]
 8018d6e:	4602      	mov	r2, r0
 8018d70:	460b      	mov	r3, r1
 8018d72:	4640      	mov	r0, r8
 8018d74:	4649      	mov	r1, r9
 8018d76:	f7ef fcad 	bl	80086d4 <__aeabi_dcmplt>
 8018d7a:	b120      	cbz	r0, 8018d86 <__ieee754_sqrt+0x19e>
 8018d7c:	1ca0      	adds	r0, r4, #2
 8018d7e:	bf08      	it	eq
 8018d80:	3601      	addeq	r6, #1
 8018d82:	3402      	adds	r4, #2
 8018d84:	e7df      	b.n	8018d46 <__ieee754_sqrt+0x15e>
 8018d86:	1c63      	adds	r3, r4, #1
 8018d88:	f023 0401 	bic.w	r4, r3, #1
 8018d8c:	e7db      	b.n	8018d46 <__ieee754_sqrt+0x15e>
 8018d8e:	bf00      	nop
 8018d90:	7ff00000 	.word	0x7ff00000
 8018d94:	200000f0 	.word	0x200000f0
 8018d98:	200000e8 	.word	0x200000e8

08018d9c <_init>:
 8018d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d9e:	bf00      	nop
 8018da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018da2:	bc08      	pop	{r3}
 8018da4:	469e      	mov	lr, r3
 8018da6:	4770      	bx	lr

08018da8 <_fini>:
 8018da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018daa:	bf00      	nop
 8018dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dae:	bc08      	pop	{r3}
 8018db0:	469e      	mov	lr, r3
 8018db2:	4770      	bx	lr
