
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009388  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080094c8  080094c8  0000a4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009620  08009620  0000a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009628  08009628  0000a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800962c  0800962c  0000a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  08009630  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004bc  20000070  08009698  0000b070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000052c  08009698  0000b52c  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 11 MB_MEM1       000000b0  20030028  20030028  0000c000  2**2
                  ALLOC
 12 .debug_info   000283f8  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f8d  00000000  00000000  0003349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027d8  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e9e  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab33  00000000  00000000  0003caa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002caba  00000000  00000000  000675d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001125c7  00000000  00000000  00094093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a665a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b104  00000000  00000000  001a66a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b17a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080094b0 	.word	0x080094b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080094b0 	.word	0x080094b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800051e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800052a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	cafecafe 	.word	0xcafecafe

0800054c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000556:	f023 0304 	bic.w	r3, r3, #4
 800055a:	6113      	str	r3, [r2, #16]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <MX_APPE_Config+0x18>)
 8000572:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000576:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000578:	f000 f806 	bl	8000588 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800057c:	f000 f80b 	bl	8000596 <Config_HSE>

  return;
 8000580:	bf00      	nop
}
 8000582:	bd80      	pop	{r7, pc}
 8000584:	58004000 	.word	0x58004000

08000588 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800058c:	bf00      	nop
}
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f007 fb09 	bl	8007bb4 <OTP_Read>
 80005a2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffae 	bl	8000510 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c6:	f001 fa1b 	bl	8001a00 <HAL_GetTick>
 80005ca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d00a      	beq.n	80005ee <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80005d8:	f001 fa2a 	bl	8001a30 <HAL_GetTickFreq>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e6:	e002      	b.n	80005ee <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005e8:	f7ff ffb0 	bl	800054c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80005ec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	f001 fa07 	bl	8001a00 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f4      	bhi.n	80005e8 <HAL_Delay+0x2a>
  }
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f007 fc15 	bl	8007e40 <TL_MM_EvtDone>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800062a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800062c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800063a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800065c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800065e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800066c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000674:	68fb      	ldr	r3, [r7, #12]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <__io_putchar>:
#define HAL_SMALL_WAIT  50

// check if necessary
// Define serial output function using UART2
int __io_putchar(int ch)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	2332      	movs	r3, #50	@ 0x32
 8000690:	2201      	movs	r2, #1
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <__io_putchar+0x20>)
 8000694:	f006 f8f4 	bl	8006880 <HAL_UART_Transmit>
    return 1;
 8000698:	2301      	movs	r3, #1
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002e8 	.word	0x200002e8

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f001 f93a 	bl	8001924 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80006b0:	f7ff ff5c 	bl	800056c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f858 	bl	8000768 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b8:	f000 f8c6 	bl	8000848 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80006bc:	f000 f9aa 	bl	8000a14 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fb40 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c4:	f000 fb2c 	bl	8000d20 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fade 	bl	8000c88 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80006cc:	f000 f9be 	bl	8000a4c <MX_RTC_Init>
  MX_I2C1_Init();
 80006d0:	f000 f960 	bl	8000994 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006d4:	f000 fa42 	bl	8000b5c <MX_TIM2_Init>
  MX_TIM16_Init();
 80006d8:	f000 fab0 	bl	8000c3c <MX_TIM16_Init>
  MX_ADC1_Init();
 80006dc:	f000 f8d4 	bl	8000888 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006e0:	f000 f9e8 	bl	8000ab4 <MX_TIM1_Init>
  MX_RF_Init();
 80006e4:	f000 f9aa 	bl	8000a3c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  // check if anything else necessary and to put to header/source
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <main+0xa0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6898      	ldr	r0, [r3, #8]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2202      	movs	r2, #2
 80006f2:	2100      	movs	r1, #0
 80006f4:	f008 f87a 	bl	80087ec <setvbuf>
  printf("\n\n\nNew start\n");
 80006f8:	4814      	ldr	r0, [pc, #80]	@ (800074c <main+0xa4>)
 80006fa:	f008 f86f 	bl	80087dc <puts>

  // init DHT11
  init_dht11(&dht11, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000704:	4912      	ldr	r1, [pc, #72]	@ (8000750 <main+0xa8>)
 8000706:	4813      	ldr	r0, [pc, #76]	@ (8000754 <main+0xac>)
 8000708:	f000 ff43 	bl	8001592 <init_dht11>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 800070c:	2203      	movs	r2, #3
 800070e:	4912      	ldr	r1, [pc, #72]	@ (8000758 <main+0xb0>)
 8000710:	4812      	ldr	r0, [pc, #72]	@ (800075c <main+0xb4>)
 8000712:	f001 fcad 	bl	8002070 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */
//    MX_APPE_Process();

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071a:	f7ff ff50 	bl	80005be <HAL_Delay>
	// read temp sens
	readDHT11(&dht11);
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <main+0xac>)
 8000720:	f000 ff88 	bl	8001634 <readDHT11>
//  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//  value_adc = HAL_ADC_GetValue(&hadc1);
//	  printf("ADC: %d\n", value_adc);

  	// toggle LED
  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8000724:	2110      	movs	r1, #16
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <main+0xb8>)
 8000728:	f002 fffa 	bl	8003720 <HAL_GPIO_TogglePin>
    // printf
  printf("ADC1: %d, ADC2: %d, ADC3: %d\n", adc_buffer[0], adc_buffer[1], adc_buffer[2]);
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <main+0xb0>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <main+0xb0>)
 8000734:	885b      	ldrh	r3, [r3, #2]
 8000736:	461a      	mov	r2, r3
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <main+0xb0>)
 800073a:	889b      	ldrh	r3, [r3, #4]
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <main+0xbc>)
 800073e:	f007 ffe5 	bl	800870c <iprintf>
	HAL_Delay(500);
 8000742:	bf00      	nop
 8000744:	e7e7      	b.n	8000716 <main+0x6e>
 8000746:	bf00      	nop
 8000748:	20000020 	.word	0x20000020
 800074c:	080094c8 	.word	0x080094c8
 8000750:	2000029c 	.word	0x2000029c
 8000754:	20000384 	.word	0x20000384
 8000758:	2000037c 	.word	0x2000037c
 800075c:	2000008c 	.word	0x2000008c
 8000760:	48001000 	.word	0x48001000
 8000764:	080094d8 	.word	0x080094d8

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09a      	sub	sp, #104	@ 0x68
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2248      	movs	r2, #72	@ 0x48
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f008 f9c4 	bl	8008b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800079c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f023 0303 	bic.w	r3, r3, #3
 80007a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b2:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <SystemClock_Config+0xdc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007ba:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <SystemClock_Config+0xdc>)
 80007bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <SystemClock_Config+0xdc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80007ce:	232b      	movs	r3, #43	@ 0x2b
 80007d0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ea:	2360      	movs	r3, #96	@ 0x60
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ee:	2305      	movs	r3, #5
 80007f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fd1a 	bl	8004234 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000806:	f000 faf1 	bl	8000dec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800080a:	236f      	movs	r3, #111	@ 0x6f
 800080c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800080e:	2302      	movs	r3, #2
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f876 	bl	800491c <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000836:	f000 fad9 	bl	8000dec <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3768      	adds	r7, #104	@ 0x68
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58000400 	.word	0x58000400

08000848 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2250      	movs	r2, #80	@ 0x50
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f008 f955 	bl	8008b04 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800085a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800085e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000860:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000864:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000866:	2300      	movs	r3, #0
 8000868:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800086a:	2310      	movs	r3, #16
 800086c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fc90 	bl	8005196 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800087c:	f000 fab6 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000880:	bf00      	nop
 8000882:	3750      	adds	r7, #80	@ 0x50
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008a0:	4a38      	ldr	r2, [pc, #224]	@ (8000984 <MX_ADC1_Init+0xfc>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80008a4:	4b36      	ldr	r3, [pc, #216]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008a6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80008aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ac:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b2:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b8:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008be:	4b30      	ldr	r3, [pc, #192]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008c0:	2208      	movs	r2, #8
 80008c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80008d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008d2:	2203      	movs	r2, #3
 80008d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008de:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e4:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008ea:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_ADC1_Init+0xf8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000902:	481f      	ldr	r0, [pc, #124]	@ (8000980 <MX_ADC1_Init+0xf8>)
 8000904:	f001 fa68 	bl	8001dd8 <HAL_ADC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800090e:	f000 fa6d 	bl	8000dec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000912:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_ADC1_Init+0x100>)
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000916:	2306      	movs	r3, #6
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091e:	237f      	movs	r3, #127	@ 0x7f
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <MX_ADC1_Init+0xf8>)
 8000930:	f001 fc40 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800093a:	f000 fa57 	bl	8000dec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_ADC1_Init+0x104>)
 8000940:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000942:	230c      	movs	r3, #12
 8000944:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_ADC1_Init+0xf8>)
 800094c:	f001 fc32 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000956:	f000 fa49 	bl	8000dec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_ADC1_Init+0x108>)
 800095c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800095e:	2312      	movs	r3, #18
 8000960:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_ADC1_Init+0xf8>)
 8000968:	f001 fc24 	bl	80021b4 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000972:	f000 fa3b 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000008c 	.word	0x2000008c
 8000984:	50040000 	.word	0x50040000
 8000988:	25b00200 	.word	0x25b00200
 800098c:	2a000400 	.word	0x2a000400
 8000990:	2e300800 	.word	0x2e300800

08000994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a4:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ce:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009d0:	f002 fee4 	bl	800379c <HAL_I2C_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009da:	f000 fa07 	bl	8000dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	4809      	ldr	r0, [pc, #36]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009e2:	f002 ff76 	bl	80038d2 <HAL_I2CEx_ConfigAnalogFilter>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ec:	f000 f9fe 	bl	8000dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2C1_Init+0x74>)
 80009f4:	f002 ffb8 	bl	8003968 <HAL_I2CEx_ConfigDigitalFilter>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f9f5 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000150 	.word	0x20000150
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	00b07cb4 	.word	0x00b07cb4

08000a14 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_IPCC_Init+0x20>)
 8000a1a:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <MX_IPCC_Init+0x24>)
 8000a1c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_IPCC_Init+0x20>)
 8000a20:	f002 ffee 	bl	8003a00 <HAL_IPCC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000a2a:	f000 f9df 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001a4 	.word	0x200001a4
 8000a38:	58000c00 	.word	0x58000c00

08000a3c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a52:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <MX_RTC_Init+0x64>)
 8000a54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a5e:	220f      	movs	r2, #15
 8000a60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a64:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a82:	480a      	ldr	r0, [pc, #40]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a84:	f004 fe0e 	bl	80056a4 <HAL_RTC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f9ad 	bl	8000dec <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_RTC_Init+0x60>)
 8000a98:	f004 ff04 	bl	80058a4 <HAL_RTCEx_SetWakeUpTimer>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000aa2:	f000 f9a3 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001e0 	.word	0x200001e0
 8000ab0:	40002800 	.word	0x40002800

08000ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000ad4:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <MX_TIM1_Init+0xa4>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0xFFFF;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFF;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000ae8:	22ff      	movs	r2, #255	@ 0xff
 8000aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000afe:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000b00:	f004 ff6b 	bl	80059da <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b0a:	f000 f96f 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000b1c:	f005 f98c 	bl	8005e38 <HAL_TIM_ConfigClockSource>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b26:	f000 f961 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_TIM1_Init+0xa0>)
 8000b3c:	f005 fdd0 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b46:	f000 f951 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000204 	.word	0x20000204
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
 8000b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b80:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000b8a:	f240 123f 	movw	r2, #319	@ 0x13f
 8000b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b96:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000baa:	4823      	ldr	r0, [pc, #140]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000bac:	f004 ffd9 	bl	8005b62 <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000bb6:	f000 f919 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481b      	ldr	r0, [pc, #108]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000bca:	f005 fd89 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f90a 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	2360      	movs	r3, #96	@ 0x60
 8000bda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000bf0:	f005 f80e 	bl	8005c10 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000bfa:	f000 f8f7 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2208      	movs	r2, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000c06:	f005 f803 	bl	8005c10 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000c10:	f000 f8ec 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	220c      	movs	r2, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000c1c:	f004 fff8 	bl	8005c10 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000c26:	f000 f8e1 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c2a:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <MX_TIM2_Init+0xdc>)
 8000c2c:	f000 fab4 	bl	8001198 <HAL_TIM_MspPostInit>

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	@ 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000250 	.word	0x20000250

08000c3c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <MX_TIM16_Init+0x48>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c48:	221f      	movs	r2, #31
 8000c4a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c58:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_TIM16_Init+0x44>)
 8000c6e:	f004 feb4 	bl	80059da <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000c78:	f000 f8b8 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000029c 	.word	0x2000029c
 8000c84:	40014400 	.word	0x40014400

08000c88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	@ (8000d1c <MX_USART1_UART_Init+0x94>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cd2:	f005 fd85 	bl	80067e0 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f886 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000ce4:	f006 fe9b 	bl	8007a1e <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cee:	f000 f87d 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000cf6:	f006 fed0 	bl	8007a9a <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 f874 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <MX_USART1_UART_Init+0x90>)
 8000d06:	f006 fe51 	bl	80079ac <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 f86c 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200002e8 	.word	0x200002e8
 8000d1c:	40013800 	.word	0x40013800

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d24:	2004      	movs	r0, #4
 8000d26:	f7ff fc7a 	bl	800061e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fc77 	bl	800061e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	200b      	movs	r0, #11
 8000d36:	f001 ffec 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d3a:	200b      	movs	r0, #11
 8000d3c:	f002 f803 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f7ff fc79 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f7ff fc76 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff fc73 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	2010      	movs	r0, #16
 8000d6c:	f7ff fc70 	bl	8000650 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2110      	movs	r1, #16
 8000d74:	481b      	ldr	r0, [pc, #108]	@ (8000de4 <MX_GPIO_Init+0xa0>)
 8000d76:	f002 fcbb 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f002 fb27 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_HUMID_Pin */
  GPIO_InitStruct.Pin = TEMP_HUMID_Pin;
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEMP_HUMID_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f002 fb1b 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000daa:	2310      	movs	r3, #16
 8000dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <MX_GPIO_Init+0xa0>)
 8000dc0:	f002 fb0e 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <MX_GPIO_Init+0xa4>)
 8000dd6:	f002 fb03 	bl	80033e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	48001000 	.word	0x48001000
 8000de8:	48000400 	.word	0x48000400

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <Error_Handler+0x8>

08000df8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_AHB2_GRP1_EnableClock>:
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e70:	68fb      	ldr	r3, [r7, #12]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b085      	sub	sp, #20
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ebc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ecc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000ee6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000eea:	f7ff ffaf 	bl	8000e4c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	202e      	movs	r0, #46	@ 0x2e
 8000ef4:	f001 ff0d 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000ef8:	202e      	movs	r0, #46	@ 0x2e
 8000efa:	f001 ff24 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09c      	sub	sp, #112	@ 0x70
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2250      	movs	r2, #80	@ 0x50
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f007 fded 	bl	8008b04 <memset>
  if(hadc->Instance==ADC1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a32      	ldr	r2, [pc, #200]	@ (8000ff8 <HAL_ADC_MspInit+0xf4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d15c      	bne.n	8000fee <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f38:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000f3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f4a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000f50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f54:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 f918 	bl	8005196 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000f6c:	f7ff ff3e 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f74:	f7ff ff51 	bl	8000e1a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff ff4e 	bl	8000e1a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8000f7e:	2370      	movs	r3, #112	@ 0x70
 8000f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f94:	f002 fa24 	bl	80033e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000f9a:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_ADC_MspInit+0xfc>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fb2:	2280      	movs	r2, #128	@ 0x80
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fc8:	2220      	movs	r2, #32
 8000fca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fd4:	f001 fed2 	bl	8002d7c <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000fde:	f7ff ff05 	bl	8000dec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <HAL_ADC_MspInit+0xf8>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fee:	bf00      	nop
 8000ff0:	3770      	adds	r7, #112	@ 0x70
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	50040000 	.word	0x50040000
 8000ffc:	200000f0 	.word	0x200000f0
 8001000:	40020008 	.word	0x40020008

08001004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09c      	sub	sp, #112	@ 0x70
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2250      	movs	r2, #80	@ 0x50
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f007 fd6d 	bl	8008b04 <memset>
  if(hi2c->Instance==I2C1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a17      	ldr	r2, [pc, #92]	@ (800108c <HAL_I2C_MspInit+0x88>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d126      	bne.n	8001082 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001034:	2304      	movs	r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001038:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f8a7 	bl	8005196 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800104e:	f7ff fecd 	bl	8000dec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2002      	movs	r0, #2
 8001054:	f7ff fee1 	bl	8000e1a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001058:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105e:	2312      	movs	r3, #18
 8001060:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800106a:	2304      	movs	r3, #4
 800106c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001072:	4619      	mov	r1, r3
 8001074:	4806      	ldr	r0, [pc, #24]	@ (8001090 <HAL_I2C_MspInit+0x8c>)
 8001076:	f002 f9b3 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800107a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800107e:	f7ff fefe 	bl	8000e7e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001082:	bf00      	nop
 8001084:	3770      	adds	r7, #112	@ 0x70
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005400 	.word	0x40005400
 8001090:	48000400 	.word	0x48000400

08001094 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <HAL_IPCC_MspInit+0x44>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d113      	bne.n	80010ce <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80010a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80010aa:	f7ff fecf 	bl	8000e4c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	202c      	movs	r0, #44	@ 0x2c
 80010b4:	f001 fe2d 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80010b8:	202c      	movs	r0, #44	@ 0x2c
 80010ba:	f001 fe44 	bl	8002d46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	202d      	movs	r0, #45	@ 0x2d
 80010c4:	f001 fe25 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80010c8:	202d      	movs	r0, #45	@ 0x2d
 80010ca:	f001 fe3c 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	58000c00 	.word	0x58000c00

080010dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b096      	sub	sp, #88	@ 0x58
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2250      	movs	r2, #80	@ 0x50
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f007 fd09 	bl	8008b04 <memset>
  if(hrtc->Instance==RTC)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <HAL_RTC_MspInit+0x58>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d117      	bne.n	800112c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80010fc:	f002 fd06 	bl	8003b0c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001100:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001104:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800110a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4618      	mov	r0, r3
 8001112:	f004 f840 	bl	8005196 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 800111c:	f7ff fe66 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001120:	f7ff fe6a 	bl	8000df8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001124:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001128:	f7ff fea9 	bl	8000e7e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800112c:	bf00      	nop
 800112e:	3758      	adds	r7, #88	@ 0x58
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40002800 	.word	0x40002800

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_TIM_Base_MspInit+0x38>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d104      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800114a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800114e:	f7ff feaf 	bl	8000eb0 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001152:	e008      	b.n	8001166 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM16)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <HAL_TIM_Base_MspInit+0x3c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d103      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800115e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001162:	f7ff fea5 	bl	8000eb0 <LL_APB2_GRP1_EnableClock>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40012c00 	.word	0x40012c00
 8001174:	40014400 	.word	0x40014400

08001178 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001188:	d102      	bne.n	8001190 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fe77 	bl	8000e7e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b8:	d113      	bne.n	80011e2 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fe2d 	bl	8000e1a <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 80011c0:	230d      	movs	r3, #13
 80011c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c8:	2302      	movs	r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011de:	f002 f8ff 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09c      	sub	sp, #112	@ 0x70
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2250      	movs	r2, #80	@ 0x50
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f007 fc79 	bl	8008b04 <memset>
  if(huart->Instance==USART1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <HAL_UART_MspInit+0x98>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d12e      	bne.n	800127a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800121c:	2301      	movs	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4618      	mov	r0, r3
 800122a:	f003 ffb4 	bl	8005196 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001234:	f7ff fdda 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001238:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800123c:	f7ff fe38 	bl	8000eb0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff fdea 	bl	8000e1a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001246:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800124a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001258:	2307      	movs	r3, #7
 800125a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001266:	f002 f8bb 	bl	80033e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2024      	movs	r0, #36	@ 0x24
 8001270:	f001 fd4f 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001274:	2024      	movs	r0, #36	@ 0x24
 8001276:	f001 fd66 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800127a:	bf00      	nop
 800127c:	3770      	adds	r7, #112	@ 0x70
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40013800 	.word	0x40013800

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <MemManage_Handler+0x4>

080012a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <UsageFault_Handler+0x4>

080012b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012de:	f000 fb7b 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <DMA1_Channel1_IRQHandler+0x10>)
 80012ee:	f001 ff26 	bl	800313e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200000f0 	.word	0x200000f0

080012fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <USART1_IRQHandler+0x10>)
 8001302:	f005 fb4b 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200002e8 	.word	0x200002e8

08001310 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001314:	f006 ff04 	bl	8008120 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001320:	f006 ff54 	bl	80081cc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800132c:	f002 fa12 	bl	8003754 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e00a      	b.n	800135c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001346:	f3af 8000 	nop.w
 800134a:	4601      	mov	r1, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf0      	blt.n	8001346 <_read+0x12>
  }

  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e009      	b.n	8001394 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f97b 	bl	8000684 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf1      	blt.n	8001380 <_write+0x12>
  }
  return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_close>:

int _close(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_isatty>:

int _isatty(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	@ (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f007 fbbe 	bl	8008bc0 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20030000 	.word	0x20030000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000394 	.word	0x20000394
 8001478:	20000530 	.word	0x20000530

0800147c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <SystemInit+0x98>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <SystemInit+0x98>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80014a8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <SystemInit+0x9c>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014c6:	f023 0305 	bic.w	r3, r3, #5
 80014ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80014e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e6:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <SystemInit+0xa0>)
 80014e8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ee:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <SystemInit+0xa0>)
 80014f0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001500:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	faf6fefb 	.word	0xfaf6fefb
 800151c:	22041000 	.word	0x22041000

08001520 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001520:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001522:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001524:	3304      	adds	r3, #4

08001526 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001526:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001528:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800152a:	d3f9      	bcc.n	8001520 <CopyDataInit>
  bx lr
 800152c:	4770      	bx	lr

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800152e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001530:	3004      	adds	r0, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001532:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>
  bx lr
 8001536:	4770      	bx	lr

08001538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800153a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800153c:	f7ff ff9e 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001540:	480b      	ldr	r0, [pc, #44]	@ (8001570 <LoopForever+0x6>)
 8001542:	490c      	ldr	r1, [pc, #48]	@ (8001574 <LoopForever+0xa>)
 8001544:	4a0c      	ldr	r2, [pc, #48]	@ (8001578 <LoopForever+0xe>)
 8001546:	2300      	movs	r3, #0
 8001548:	f7ff ffed 	bl	8001526 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800154c:	480b      	ldr	r0, [pc, #44]	@ (800157c <LoopForever+0x12>)
 800154e:	490c      	ldr	r1, [pc, #48]	@ (8001580 <LoopForever+0x16>)
 8001550:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <LoopForever+0x1a>)
 8001552:	2300      	movs	r3, #0
 8001554:	f7ff ffe7 	bl	8001526 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <LoopForever+0x1e>)
 800155a:	490c      	ldr	r1, [pc, #48]	@ (800158c <LoopForever+0x22>)
 800155c:	2300      	movs	r3, #0
 800155e:	f7ff ffe8 	bl	8001532 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001562:	f007 fb33 	bl	8008bcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001566:	f7ff f89f 	bl	80006a8 <main>

0800156a <LoopForever>:

LoopForever:
  b LoopForever
 800156a:	e7fe      	b.n	800156a <LoopForever>
  ldr   r0, =_estack
 800156c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001570:	20000008 	.word	0x20000008
 8001574:	20000070 	.word	0x20000070
 8001578:	08009630 	.word	0x08009630
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800157c:	200300d8 	.word	0x200300d8
 8001580:	200300d8 	.word	0x200300d8
 8001584:	08009698 	.word	0x08009698
  INIT_BSS _sbss, _ebss
 8001588:	20000070 	.word	0x20000070
 800158c:	2000052c 	.word	0x2000052c

08001590 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_IRQHandler>

08001592 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	809a      	strh	r2, [r3, #4]
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b088      	sub	sp, #32
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d111      	bne.n	8001604 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f107 020c 	add.w	r2, r7, #12
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 feef 	bl	80033e0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8001602:	e013      	b.n	800162c <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d110      	bne.n	800162c <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f107 020c 	add.w	r2, r7, #12
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f001 feda 	bl	80033e0 <HAL_GPIO_Init>
}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	@ 0x50
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001640:	2300      	movs	r3, #0
 8001642:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001644:	2300      	movs	r3, #0
 8001646:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8001650:	2300      	movs	r3, #0
 8001652:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8001656:	2300      	movs	r3, #0
 8001658:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8001662:	2101      	movs	r1, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffaa 	bl	80015be <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	889b      	ldrh	r3, [r3, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	f002 f83b 	bl	80036f0 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 800167a:	2012      	movs	r0, #18
 800167c:	f7fe ff9f 	bl	80005be <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4618      	mov	r0, r3
 800168a:	f004 f9fd 	bl	8005a88 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 800168e:	2100      	movs	r1, #0
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff94 	bl	80015be <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016a0:	e00b      	b.n	80016ba <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016b0:	d903      	bls.n	80016ba <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 80016b2:	b662      	cpsie	i
}
 80016b4:	bf00      	nop
			__enable_irq();
			return 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e130      	b.n	800191c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f001 fffb 	bl	80036c0 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d0e8      	beq.n	80016a2 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80016da:	e00b      	b.n	80016f4 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016ea:	d903      	bls.n	80016f4 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 80016ec:	b662      	cpsie	i
}
 80016ee:	bf00      	nop
			__enable_irq();
			return 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e113      	b.n	800191c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	889b      	ldrh	r3, [r3, #4]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f001 ffde 	bl	80036c0 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0e8      	beq.n	80016dc <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800171e:	e00b      	b.n	8001738 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	b29b      	uxth	r3, r3
 800172a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800172e:	d903      	bls.n	8001738 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8001730:	b662      	cpsie	i
}
 8001732:	bf00      	nop
			__enable_irq();
			return 0;
 8001734:	2300      	movs	r3, #0
 8001736:	e0f1      	b.n	800191c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	889b      	ldrh	r3, [r3, #4]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f001 ffbc 	bl	80036c0 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d0e8      	beq.n	8001720 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8001758:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800175a:	2b4a      	cmp	r3, #74	@ 0x4a
 800175c:	d80c      	bhi.n	8001778 <readDHT11+0x144>
 800175e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001760:	2b55      	cmp	r3, #85	@ 0x55
 8001762:	d909      	bls.n	8001778 <readDHT11+0x144>
 8001764:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001766:	2b4a      	cmp	r3, #74	@ 0x4a
 8001768:	d806      	bhi.n	8001778 <readDHT11+0x144>
 800176a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800176c:	2b55      	cmp	r3, #85	@ 0x55
 800176e:	d903      	bls.n	8001778 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 8001770:	b662      	cpsie	i
}
 8001772:	bf00      	nop
	{
		__enable_irq();
		return 0;
 8001774:	2300      	movs	r3, #0
 8001776:	e0d1      	b.n	800191c <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
 800177c:	e05d      	b.n	800183a <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001788:	e00b      	b.n	80017a2 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	b29b      	uxth	r3, r3
 8001794:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001798:	d903      	bls.n	80017a2 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 800179a:	b662      	cpsie	i
}
 800179c:	bf00      	nop
				__enable_irq();
				return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e0bc      	b.n	800191c <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f001 ff87 	bl	80036c0 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0e8      	beq.n	800178a <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80017c2:	e00b      	b.n	80017dc <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017d2:	d903      	bls.n	80017dc <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 80017d4:	b662      	cpsie	i
}
 80017d6:	bf00      	nop
				__enable_irq();
				return 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	e09f      	b.n	800191c <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f001 ff6a 	bl	80036c0 <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d0e8      	beq.n	80017c4 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80017fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80017fe:	2b14      	cmp	r3, #20
 8001800:	d906      	bls.n	8001810 <readDHT11+0x1dc>
 8001802:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001804:	2b1d      	cmp	r3, #29
 8001806:	d803      	bhi.n	8001810 <readDHT11+0x1dc>
		{
			mBit = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800180e:	e008      	b.n	8001822 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8001810:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001812:	2b3c      	cmp	r3, #60	@ 0x3c
 8001814:	d905      	bls.n	8001822 <readDHT11+0x1ee>
 8001816:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001818:	2b4f      	cmp	r3, #79	@ 0x4f
 800181a:	d802      	bhi.n	8001822 <readDHT11+0x1ee>
		{
			 mBit = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8001822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001826:	b2d9      	uxtb	r1, r3
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800182e:	4413      	add	r3, r2
 8001830:	460a      	mov	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8001834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001836:	3301      	adds	r3, #1
 8001838:	647b      	str	r3, [r7, #68]	@ 0x44
 800183a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800183c:	2b27      	cmp	r3, #39	@ 0x27
 800183e:	dd9e      	ble.n	800177e <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 f965 	bl	8005b14 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 800184a:	b662      	cpsie	i
}
 800184c:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800184e:	2300      	movs	r3, #0
 8001850:	643b      	str	r3, [r7, #64]	@ 0x40
 8001852:	e011      	b.n	8001878 <readDHT11+0x244>
	{
		humVal += mData[i];
 8001854:	f107 0208 	add.w	r2, r7, #8
 8001858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800185a:	4413      	add	r3, r2
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001862:	4413      	add	r3, r2
 8001864:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 8001868:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 8001872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001874:	3301      	adds	r3, #1
 8001876:	643b      	str	r3, [r7, #64]	@ 0x40
 8001878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800187a:	2b07      	cmp	r3, #7
 800187c:	ddea      	ble.n	8001854 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 800187e:	2310      	movs	r3, #16
 8001880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001882:	e011      	b.n	80018a8 <readDHT11+0x274>
	{
		tempVal += mData[i];
 8001884:	f107 0208 	add.w	r2, r7, #8
 8001888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188a:	4413      	add	r3, r2
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001892:	4413      	add	r3, r2
 8001894:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 8001898:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 80018a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018a4:	3301      	adds	r3, #1
 80018a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018aa:	2b17      	cmp	r3, #23
 80018ac:	ddea      	ble.n	8001884 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 80018ae:	2320      	movs	r3, #32
 80018b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018b2:	e011      	b.n	80018d8 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 80018b4:	f107 0208 	add.w	r2, r7, #8
 80018b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ba:	4413      	add	r3, r2
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018c2:	4413      	add	r3, r2
 80018c4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 80018c8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 80018d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d4:	3301      	adds	r3, #1
 80018d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018da:	2b27      	cmp	r3, #39	@ 0x27
 80018dc:	ddea      	ble.n	80018b4 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 80018de:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 80018e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 80018f2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 80018fc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001900:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001904:	4413      	add	r3, r2
 8001906:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001910:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001918:	735a      	strb	r2, [r3, #13]


	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3750      	adds	r7, #80	@ 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <HAL_Init+0x3c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_Init+0x3c>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193a:	2003      	movs	r0, #3
 800193c:	f001 f9de 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001940:	200f      	movs	r0, #15
 8001942:	f000 f80f 	bl	8001964 <HAL_InitTick>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	e001      	b.n	8001956 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001952:	f7ff fac6 	bl	8000ee2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001956:	79fb      	ldrb	r3, [r7, #7]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58004000 	.word	0x58004000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <HAL_InitTick+0x6c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001978:	f003 f97c 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_InitTick+0x6c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001988:	fbb3 f3f1 	udiv	r3, r3, r1
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f001 f9e6 	bl	8002d62 <HAL_SYSTICK_Config>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10f      	bne.n	80019bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	d809      	bhi.n	80019b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a2:	2200      	movs	r2, #0
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	f04f 30ff 	mov.w	r0, #4294967295
 80019aa:	f001 f9b2 	bl	8002d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ae:	4a09      	ldr	r2, [pc, #36]	@ (80019d4 <HAL_InitTick+0x70>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e007      	b.n	80019c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e004      	b.n	80019c6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e001      	b.n	80019c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000010 	.word	0x20000010
 80019d4:	2000000c 	.word	0x2000000c

080019d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000010 	.word	0x20000010
 80019fc:	20000398 	.word	0x20000398

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000398 	.word	0x20000398

08001a18 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <HAL_GetTickPrio+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_GetTickFreq+0x14>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000010 	.word	0x20000010

08001a48 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3360      	adds	r3, #96	@ 0x60
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <LL_ADC_SetOffset+0x44>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ae8:	bf00      	nop
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	03fff000 	.word	0x03fff000

08001af8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3360      	adds	r3, #96	@ 0x60
 8001b06:	461a      	mov	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3360      	adds	r3, #96	@ 0x60
 8001b34:	461a      	mov	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b72:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3330      	adds	r3, #48	@ 0x30
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	211f      	movs	r1, #31
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 011f 	and.w	r1, r3, #31
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3314      	adds	r3, #20
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0e5b      	lsrs	r3, r3, #25
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	0d1b      	lsrs	r3, r3, #20
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2107      	movs	r1, #7
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	0d1b      	lsrs	r3, r3, #20
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0318 	and.w	r3, r3, #24
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	0007ffff 	.word	0x0007ffff

08001c78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6093      	str	r3, [r2, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cb0:	d101      	bne.n	8001cb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_IsEnabled+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_IsEnabled+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d76:	f043 0204 	orr.w	r2, r3, #4
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e12e      	b.n	8002054 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff f87d 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff3d 	bl	8001c9c <LL_ADC_IsDeepPowerDownEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff23 	bl	8001c78 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff58 	bl	8001cec <LL_ADC_IsInternalRegulatorEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff3c 	bl	8001cc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e4c:	4b83      	ldr	r3, [pc, #524]	@ (800205c <HAL_ADC_Init+0x284>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	4a83      	ldr	r2, [pc, #524]	@ (8002060 <HAL_ADC_Init+0x288>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f9      	bne.n	8001e62 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff3a 	bl	8001cec <LL_ADC_IsInternalRegulatorEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	f043 0210 	orr.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff73 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80c7 	bne.w	8002042 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 80c3 	bne.w	8002042 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ec4:	f043 0202 	orr.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff33 	bl	8001d3c <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001edc:	4861      	ldr	r0, [pc, #388]	@ (8002064 <HAL_ADC_Init+0x28c>)
 8001ede:	f7ff ff2d 	bl	8001d3c <LL_ADC_IsEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	485e      	ldr	r0, [pc, #376]	@ (8002068 <HAL_ADC_Init+0x290>)
 8001ef0:	f7ff fdaa 	bl	8001a48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7e5b      	ldrb	r3, [r3, #25]
 8001ef8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f12:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001f14:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	045b      	lsls	r3, r3, #17
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	4b45      	ldr	r3, [pc, #276]	@ (800206c <HAL_ADC_Init+0x294>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff0e 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 8001f6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff1b 	bl	8001db0 <LL_ADC_INJ_IsConversionOngoing>
 8001f7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13d      	bne.n	8001ffe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d13a      	bne.n	8001ffe <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f8c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f94:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fa4:	f023 0302 	bic.w	r3, r3, #2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d118      	bne.n	8001fee <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fc6:	f023 0304 	bic.w	r3, r3, #4
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	e007      	b.n	8001ffe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10c      	bne.n	8002020 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	f023 010f 	bic.w	r1, r3, #15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	631a      	str	r2, [r3, #48]	@ 0x30
 800201e:	e007      	b.n	8002030 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020f 	bic.w	r2, r2, #15
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f023 0303 	bic.w	r3, r3, #3
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002040:	e007      	b.n	8002052 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002052:	7ffb      	ldrb	r3, [r7, #31]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000008 	.word	0x20000008
 8002060:	053e2d63 	.word	0x053e2d63
 8002064:	50040000 	.word	0x50040000
 8002068:	50040300 	.word	0x50040300
 800206c:	fff0c007 	.word	0xfff0c007

08002070 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fe82 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d167      	bne.n	800215c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_Start_DMA+0x2a>
 8002096:	2302      	movs	r3, #2
 8002098:	e063      	b.n	8002162 <HAL_ADC_Start_DMA+0xf2>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fc4c 	bl	8002940 <ADC_Enable>
 80020a8:	4603      	mov	r3, r0
 80020aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d14f      	bne.n	8002152 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f023 0206 	bic.w	r2, r3, #6
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80020de:	e002      	b.n	80020e6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	4a20      	ldr	r2, [pc, #128]	@ (800216c <HAL_ADC_Start_DMA+0xfc>)
 80020ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_ADC_Start_DMA+0x100>)
 80020f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_ADC_Start_DMA+0x104>)
 80020fc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	221c      	movs	r2, #28
 8002104:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0210 	orr.w	r2, r2, #16
 800211c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3340      	adds	r3, #64	@ 0x40
 8002138:	4619      	mov	r1, r3
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f000 fec5 	bl	8002ecc <HAL_DMA_Start_IT>
 8002142:	4603      	mov	r3, r0
 8002144:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fe09 	bl	8001d62 <LL_ADC_REG_StartConversion>
 8002150:	e006      	b.n	8002160 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800215a:	e001      	b.n	8002160 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002160:	7dfb      	ldrb	r3, [r7, #23]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08002a35 	.word	0x08002a35
 8002170:	08002b0d 	.word	0x08002b0d
 8002174:	08002b29 	.word	0x08002b29

08002178 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0b6      	sub	sp, #216	@ 0xd8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x22>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e39f      	b.n	8002916 <HAL_ADC_ConfigChannel+0x762>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fdd1 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8384 	bne.w	80028f8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff fcbf 	bl	8001b80 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fdbf 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 800220c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fdcb 	bl	8001db0 <LL_ADC_INJ_IsConversionOngoing>
 800221a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800221e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 81a6 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 81a1 	bne.w	8002574 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	461a      	mov	r2, r3
 8002240:	f7ff fcca 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b04      	cmp	r3, #4
 8002264:	d00a      	beq.n	800227c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6919      	ldr	r1, [r3, #16]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002276:	f7ff fc1b 	bl	8001ab0 <LL_ADC_SetOffset>
 800227a:	e17b      	b.n	8002574 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fc38 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0xf4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fc2d 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	e01e      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x132>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fc22 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80022da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x14a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	e018      	b.n	8002330 <HAL_ADC_ConfigChannel+0x17c>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800231a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	429a      	cmp	r2, r3
 8002332:	d106      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fbf1 	bl	8001b24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fbd5 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <HAL_ADC_ConfigChannel+0x1ba>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fbca 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	e01e      	b.n	80023ac <HAL_ADC_ConfigChannel+0x1f8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fbbf 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800238c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e004      	b.n	80023aa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80023a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x210>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	e018      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x242>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80023ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d106      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	2101      	movs	r1, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fb8e 	bl	8001b24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2102      	movs	r1, #2
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fb72 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x280>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2102      	movs	r1, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fb67 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	f003 021f 	and.w	r2, r3, #31
 8002432:	e01e      	b.n	8002472 <HAL_ADC_ConfigChannel+0x2be>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fb5c 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800245a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002462:	2320      	movs	r3, #32
 8002464:	e004      	b.n	8002470 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002466:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_ADC_ConfigChannel+0x2d6>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	e016      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x304>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800249c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800249e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80024a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e004      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80024ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d106      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2102      	movs	r1, #2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fb2d 	bl	8001b24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2103      	movs	r1, #3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fb11 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x342>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2103      	movs	r1, #3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fb06 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	e017      	b.n	8002526 <HAL_ADC_ConfigChannel+0x372>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2103      	movs	r1, #3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fafb 	bl	8001af8 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800250e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002510:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800251c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_ADC_ConfigChannel+0x38a>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	e011      	b.n	8002562 <HAL_ADC_ConfigChannel+0x3ae>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800254c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800254e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800255a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	429a      	cmp	r2, r3
 8002564:	d106      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	2103      	movs	r1, #3
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fad8 	bl	8001b24 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fbdf 	bl	8001d3c <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 81c2 	bne.w	800290a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	461a      	mov	r2, r3
 8002594:	f7ff fb4c 	bl	8001c30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a8e      	ldr	r2, [pc, #568]	@ (80027d8 <HAL_ADC_ConfigChannel+0x624>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 8130 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x418>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0e9b      	lsrs	r3, r3, #26
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2b09      	cmp	r3, #9
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e019      	b.n	8002600 <HAL_ADC_ConfigChannel+0x44c>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e003      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80025e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b09      	cmp	r3, #9
 80025f8:	bf94      	ite	ls
 80025fa:	2301      	movls	r3, #1
 80025fc:	2300      	movhi	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002600:	2b00      	cmp	r3, #0
 8002602:	d079      	beq.n	80026f8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x46c>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	069b      	lsls	r3, r3, #26
 800261a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800261e:	e015      	b.n	800264c <HAL_ADC_ConfigChannel+0x498>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800262e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002630:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800263c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	069b      	lsls	r3, r3, #26
 8002648:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_ConfigChannel+0x4b8>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e9b      	lsrs	r3, r3, #26
 800265e:	3301      	adds	r3, #1
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	e017      	b.n	800269c <HAL_ADC_ConfigChannel+0x4e8>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800267a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800267c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800267e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	ea42 0103 	orr.w	r1, r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x50e>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	051b      	lsls	r3, r3, #20
 80026c0:	e018      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x540>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e003      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f4:	430b      	orrs	r3, r1
 80026f6:	e080      	b.n	80027fa <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x560>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	3301      	adds	r3, #1
 800270c:	069b      	lsls	r3, r3, #26
 800270e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002712:	e015      	b.n	8002740 <HAL_ADC_ConfigChannel+0x58c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002724:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	069b      	lsls	r3, r3, #26
 800273c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x5ac>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	3301      	adds	r3, #1
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	e017      	b.n	8002790 <HAL_ADC_ConfigChannel+0x5dc>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	61fb      	str	r3, [r7, #28]
  return result;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002778:	2320      	movs	r3, #32
 800277a:	e003      	b.n	8002784 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	ea42 0103 	orr.w	r1, r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10d      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x608>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	3301      	adds	r3, #1
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	3b1e      	subs	r3, #30
 80027b4:	051b      	lsls	r3, r3, #20
 80027b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	e01d      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x644>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	613b      	str	r3, [r7, #16]
  return result;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e005      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x630>
 80027d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 021f 	and.w	r2, r3, #31
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	3b1e      	subs	r3, #30
 80027f2:	051b      	lsls	r3, r3, #20
 80027f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fe:	4619      	mov	r1, r3
 8002800:	f7ff f9ea 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b45      	ldr	r3, [pc, #276]	@ (8002920 <HAL_ADC_ConfigChannel+0x76c>)
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d07c      	beq.n	800290a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002810:	4844      	ldr	r0, [pc, #272]	@ (8002924 <HAL_ADC_ConfigChannel+0x770>)
 8002812:	f7ff f93f 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 8002816:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800281a:	4843      	ldr	r0, [pc, #268]	@ (8002928 <HAL_ADC_ConfigChannel+0x774>)
 800281c:	f7ff fa8e 	bl	8001d3c <LL_ADC_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d15e      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a40      	ldr	r2, [pc, #256]	@ (800292c <HAL_ADC_ConfigChannel+0x778>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d127      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x6cc>
 8002830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d121      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a39      	ldr	r2, [pc, #228]	@ (8002928 <HAL_ADC_ConfigChannel+0x774>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d161      	bne.n	800290a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800284a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800284e:	4619      	mov	r1, r3
 8002850:	4834      	ldr	r0, [pc, #208]	@ (8002924 <HAL_ADC_ConfigChannel+0x770>)
 8002852:	f7ff f90c 	bl	8001a6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002856:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_ADC_ConfigChannel+0x77c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	4a35      	ldr	r2, [pc, #212]	@ (8002934 <HAL_ADC_ConfigChannel+0x780>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002870:	e002      	b.n	8002878 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b01      	subs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800287e:	e044      	b.n	800290a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2c      	ldr	r2, [pc, #176]	@ (8002938 <HAL_ADC_ConfigChannel+0x784>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d113      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x6fe>
 800288a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800288e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a23      	ldr	r2, [pc, #140]	@ (8002928 <HAL_ADC_ConfigChannel+0x774>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d134      	bne.n	800290a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028a8:	4619      	mov	r1, r3
 80028aa:	481e      	ldr	r0, [pc, #120]	@ (8002924 <HAL_ADC_ConfigChannel+0x770>)
 80028ac:	f7ff f8df 	bl	8001a6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b0:	e02b      	b.n	800290a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a21      	ldr	r2, [pc, #132]	@ (800293c <HAL_ADC_ConfigChannel+0x788>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d126      	bne.n	800290a <HAL_ADC_ConfigChannel+0x756>
 80028bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d120      	bne.n	800290a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <HAL_ADC_ConfigChannel+0x774>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11b      	bne.n	800290a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028da:	4619      	mov	r1, r3
 80028dc:	4811      	ldr	r0, [pc, #68]	@ (8002924 <HAL_ADC_ConfigChannel+0x770>)
 80028de:	f7ff f8c6 	bl	8001a6e <LL_ADC_SetCommonPathInternalCh>
 80028e2:	e012      	b.n	800290a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80028f6:	e008      	b.n	800290a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002912:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002916:	4618      	mov	r0, r3
 8002918:	37d8      	adds	r7, #216	@ 0xd8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	80080000 	.word	0x80080000
 8002924:	50040300 	.word	0x50040300
 8002928:	50040000 	.word	0x50040000
 800292c:	c7520000 	.word	0xc7520000
 8002930:	20000008 	.word	0x20000008
 8002934:	053e2d63 	.word	0x053e2d63
 8002938:	cb840000 	.word	0xcb840000
 800293c:	80000001 	.word	0x80000001

08002940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f9f3 	bl	8001d3c <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d15e      	bne.n	8002a1a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <ADC_Enable+0xe4>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e04a      	b.n	8002a1c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f9c2 	bl	8001d14 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002990:	4825      	ldr	r0, [pc, #148]	@ (8002a28 <ADC_Enable+0xe8>)
 8002992:	f7ff f87f 	bl	8001a94 <LL_ADC_GetCommonPathInternalCh>
 8002996:	4603      	mov	r3, r0
 8002998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00f      	beq.n	80029c0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a0:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <ADC_Enable+0xec>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	4a22      	ldr	r2, [pc, #136]	@ (8002a30 <ADC_Enable+0xf0>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	3301      	adds	r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80029b2:	e002      	b.n	80029ba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80029c0:	f7ff f81e 	bl	8001a00 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c6:	e021      	b.n	8002a0c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f9b5 	bl	8001d3c <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f999 	bl	8001d14 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029e2:	f7ff f80d 	bl	8001a00 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d90d      	bls.n	8002a0c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f4:	f043 0210 	orr.w	r2, r3, #16
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d1d6      	bne.n	80029c8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	8000003f 	.word	0x8000003f
 8002a28:	50040300 	.word	0x50040300
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	053e2d63 	.word	0x053e2d63

08002a34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d14b      	bne.n	8002ae6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d021      	beq.n	8002aac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f874 	bl	8001b5a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d032      	beq.n	8002ade <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d12b      	bne.n	8002ade <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11f      	bne.n	8002ade <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aaa:	e018      	b.n	8002ade <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d111      	bne.n	8002ade <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff fb4a 	bl	8002178 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ae4:	e00e      	b.n	8002b04 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff fb54 	bl	80021a0 <HAL_ADC_ErrorCallback>
}
 8002af8:	e004      	b.n	8002b04 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff fb36 	bl	800218c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7ff fb26 	bl	80021a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0b      	blt.n	8002bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4907      	ldr	r1, [pc, #28]	@ (8002bf8 <__NVIC_EnableIRQ+0x38>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	@ (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	@ (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	@ 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	@ 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff29 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff40 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff90 	bl	8002c50 <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5f 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff33 	bl	8002bc0 <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa4 	bl	8002cb8 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e08e      	b.n	8002eac <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b47      	ldr	r3, [pc, #284]	@ (8002eb4 <HAL_DMA_Init+0x138>)
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d80f      	bhi.n	8002dba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b45      	ldr	r3, [pc, #276]	@ (8002eb8 <HAL_DMA_Init+0x13c>)
 8002da2:	4413      	add	r3, r2
 8002da4:	4a45      	ldr	r2, [pc, #276]	@ (8002ebc <HAL_DMA_Init+0x140>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a42      	ldr	r2, [pc, #264]	@ (8002ec0 <HAL_DMA_Init+0x144>)
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002db8:	e00e      	b.n	8002dd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b40      	ldr	r3, [pc, #256]	@ (8002ec4 <HAL_DMA_Init+0x148>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8002ebc <HAL_DMA_Init+0x140>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ec8 <HAL_DMA_Init+0x14c>)
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa74 	bl	8003318 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e38:	d102      	bne.n	8002e40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e48:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e56:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <HAL_DMA_Init+0x106>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d80c      	bhi.n	8002e82 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fa93 	bl	8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	e008      	b.n	8002e94 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40020407 	.word	0x40020407
 8002eb8:	bffdfff8 	.word	0xbffdfff8
 8002ebc:	cccccccd 	.word	0xcccccccd
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	bffdfbf8 	.word	0xbffdfbf8
 8002ec8:	40020400 	.word	0x40020400

08002ecc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_DMA_Start_IT+0x20>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e066      	b.n	8002fba <HAL_DMA_Start_IT+0xee>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d155      	bne.n	8002fac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f9b9 	bl	800329c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 020e 	orr.w	r2, r2, #14
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00f      	b.n	8002f64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 020a 	orr.w	r2, r2, #10
 8002f62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e005      	b.n	8002fb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e04f      	b.n	8003074 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e040      	b.n	8003074 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 020e 	bic.w	r2, r2, #14
 8003000:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003010:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	f003 021c 	and.w	r2, r3, #28
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800303e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003056:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003060:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d005      	beq.n	80030a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2204      	movs	r2, #4
 800309c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	e047      	b.n	8003134 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020e 	bic.w	r2, r2, #14
 80030b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	f003 021c 	and.w	r2, r3, #28
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003108:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003112:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
    }
  }
  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f003 031c 	and.w	r3, r3, #28
 800315e:	2204      	movs	r2, #4
 8003160:	409a      	lsls	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d026      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7a>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d021      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0204 	bic.w	r2, r2, #4
 8003190:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f003 021c 	and.w	r2, r3, #28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2104      	movs	r1, #4
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d071      	beq.n	8003292 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031b6:	e06c      	b.n	8003292 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	f003 031c 	and.w	r3, r3, #28
 80031c0:	2202      	movs	r2, #2
 80031c2:	409a      	lsls	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02e      	beq.n	800322a <HAL_DMA_IRQHandler+0xec>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d029      	beq.n	800322a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 020a 	bic.w	r2, r2, #10
 80031f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003200:	f003 021c 	and.w	r2, r3, #28
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	2102      	movs	r1, #2
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d038      	beq.n	8003292 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003228:	e033      	b.n	8003292 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f003 031c 	and.w	r3, r3, #28
 8003232:	2208      	movs	r2, #8
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d025      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020e 	bic.w	r2, r2, #14
 8003256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	f003 021c 	and.w	r2, r3, #28
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003292:	bf00      	nop
 8003294:	bf00      	nop
}
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f003 021c 	and.w	r2, r3, #28
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d108      	bne.n	80032fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032fa:	e007      	b.n	800330c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b17      	ldr	r3, [pc, #92]	@ (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003328:	429a      	cmp	r2, r3
 800332a:	d80a      	bhi.n	8003342 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003338:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003340:	e007      	b.n	8003352 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800334c:	4413      	add	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3b08      	subs	r3, #8
 800335a:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003368:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40020407 	.word	0x40020407
 8003388:	4002081c 	.word	0x4002081c
 800338c:	cccccccd 	.word	0xcccccccd
 8003390:	40020880 	.word	0x40020880

08003394 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a09      	ldr	r2, [pc, #36]	@ (80033dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80033b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b01      	subs	r3, #1
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	1000823f 	.word	0x1000823f
 80033dc:	40020940 	.word	0x40020940

080033e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	e14c      	b.n	800368a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	4013      	ands	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 813e 	beq.w	8003684 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d005      	beq.n	8003420 <HAL_GPIO_Init+0x40>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d130      	bne.n	8003482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003456:	2201      	movs	r2, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 0201 	and.w	r2, r3, #1
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b03      	cmp	r3, #3
 800348c:	d017      	beq.n	80034be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d123      	bne.n	8003512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	220f      	movs	r2, #15
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	6939      	ldr	r1, [r7, #16]
 800350e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0203 	and.w	r2, r3, #3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8098 	beq.w	8003684 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003554:	4a54      	ldr	r2, [pc, #336]	@ (80036a8 <HAL_GPIO_Init+0x2c8>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	220f      	movs	r2, #15
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800357e:	d019      	beq.n	80035b4 <HAL_GPIO_Init+0x1d4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a4a      	ldr	r2, [pc, #296]	@ (80036ac <HAL_GPIO_Init+0x2cc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_GPIO_Init+0x1d0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a49      	ldr	r2, [pc, #292]	@ (80036b0 <HAL_GPIO_Init+0x2d0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <HAL_GPIO_Init+0x1cc>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a48      	ldr	r2, [pc, #288]	@ (80036b4 <HAL_GPIO_Init+0x2d4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <HAL_GPIO_Init+0x1c8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a47      	ldr	r2, [pc, #284]	@ (80036b8 <HAL_GPIO_Init+0x2d8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_GPIO_Init+0x1c4>
 80035a0:	2304      	movs	r3, #4
 80035a2:	e008      	b.n	80035b6 <HAL_GPIO_Init+0x1d6>
 80035a4:	2307      	movs	r3, #7
 80035a6:	e006      	b.n	80035b6 <HAL_GPIO_Init+0x1d6>
 80035a8:	2303      	movs	r3, #3
 80035aa:	e004      	b.n	80035b6 <HAL_GPIO_Init+0x1d6>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e002      	b.n	80035b6 <HAL_GPIO_Init+0x1d6>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_GPIO_Init+0x1d6>
 80035b4:	2300      	movs	r3, #0
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	f002 0203 	and.w	r2, r2, #3
 80035bc:	0092      	lsls	r2, r2, #2
 80035be:	4093      	lsls	r3, r2
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035c6:	4938      	ldr	r1, [pc, #224]	@ (80036a8 <HAL_GPIO_Init+0x2c8>)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035d4:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035f8:	4a30      	ldr	r2, [pc, #192]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035fe:	4b2f      	ldr	r3, [pc, #188]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43db      	mvns	r3, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003622:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003628:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 800362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800364e:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003656:	4b19      	ldr	r3, [pc, #100]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800367c:	4a0f      	ldr	r2, [pc, #60]	@ (80036bc <HAL_GPIO_Init+0x2dc>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f aeab 	bne.w	80033f0 <HAL_GPIO_Init+0x10>
  }
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40010000 	.word	0x40010000
 80036ac:	48000400 	.word	0x48000400
 80036b0:	48000800 	.word	0x48000800
 80036b4:	48000c00 	.word	0x48000c00
 80036b8:	48001000 	.word	0x48001000
 80036bc:	58000800 	.word	0x58000800

080036c0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e001      	b.n	80036e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800370c:	e002      	b.n	8003714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43d9      	mvns	r1, r3
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	400b      	ands	r3, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800375a:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <HAL_HSEM_IRQHandler+0x30>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_HSEM_IRQHandler+0x30>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	43db      	mvns	r3, r3
 8003768:	4906      	ldr	r1, [pc, #24]	@ (8003784 <HAL_HSEM_IRQHandler+0x30>)
 800376a:	4013      	ands	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800376e:	4a05      	ldr	r2, [pc, #20]	@ (8003784 <HAL_HSEM_IRQHandler+0x30>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f807 	bl	8003788 <HAL_HSEM_FreeCallback>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	58001500 	.word	0x58001500

08003788 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e08d      	b.n	80038ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fc1e 	bl	8001004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	@ 0x24
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	e006      	b.n	8003824 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003822:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d108      	bne.n	800383e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e007      	b.n	800384e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800384c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800385c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69d9      	ldr	r1, [r3, #28]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d138      	bne.n	800395a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e032      	b.n	800395c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2224      	movs	r2, #36	@ 0x24
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003924:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b20      	cmp	r3, #32
 800397c:	d139      	bne.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003988:	2302      	movs	r3, #2
 800398a:	e033      	b.n	80039f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	@ 0x24
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01e      	beq.n	8003a50 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_IPCC_Init+0x60>)
 8003a14:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fb36 	bl	8001094 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003a28:	68b8      	ldr	r0, [r7, #8]
 8003a2a:	f000 f85b 	bl	8003ae4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f82c 	bl	8003a98 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003a4e:	e001      	b.n	8003a54 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	58000c00 	.word	0x58000c00

08003a64 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e00f      	b.n	8003ac6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	4a0b      	ldr	r2, [pc, #44]	@ (8003adc <IPCC_SetDefaultCallbacks+0x44>)
 8003ab0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	4a08      	ldr	r2, [pc, #32]	@ (8003ae0 <IPCC_SetDefaultCallbacks+0x48>)
 8003abe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b05      	cmp	r3, #5
 8003aca:	d9ec      	bls.n	8003aa6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	08003a65 	.word	0x08003a65
 8003ae0:	08003a7f 	.word	0x08003a7f

08003ae4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003af8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	223f      	movs	r2, #63	@ 0x3f
 8003afe:	609a      	str	r2, [r3, #8]
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	58000400 	.word	0x58000400

08003b2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003b30:	4b04      	ldr	r3, [pc, #16]	@ (8003b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	58000400 	.word	0x58000400

08003b48 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b5a:	d101      	bne.n	8003b60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_RCC_HSE_Enable>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_HSE_Disable>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_HSE_IsReady>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bba:	d101      	bne.n	8003bc0 <LL_RCC_HSE_IsReady+0x18>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <LL_RCC_HSE_IsReady+0x1a>
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_HSI_Enable>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_HSI_Disable>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_HSI_IsReady>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d101      	bne.n	8003c20 <LL_RCC_HSI_IsReady+0x18>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <LL_RCC_HSI_IsReady+0x1a>
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_HSI48_Enable>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_RCC_HSI48_Disable>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_RCC_HSI48_IsReady>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d101      	bne.n	8003cb2 <LL_RCC_HSI48_IsReady+0x18>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <LL_RCC_HSI48_IsReady+0x1a>
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_LSE_Enable>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_RCC_LSE_Disable>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_RCC_LSE_EnableBypass>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_LSE_DisableBypass>:
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_RCC_LSE_IsReady>:
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d101      	bne.n	8003d5e <LL_RCC_LSE_IsReady+0x18>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_RCC_LSE_IsReady+0x1a>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_LSI1_Enable>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d82:	bf00      	nop
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_LSI1_Disable>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_LSI1_IsReady>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d101      	bne.n	8003dc6 <LL_RCC_LSI1_IsReady+0x18>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <LL_RCC_LSI1_IsReady+0x1a>
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_LSI2_Enable>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_LSI2_Disable>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_LSI2_IsReady>:
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d101      	bne.n	8003e2e <LL_RCC_LSI2_IsReady+0x18>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <LL_RCC_LSI2_IsReady+0x1a>
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_LSI2_SetTrimming>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <LL_RCC_MSI_Enable>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_RCC_MSI_Disable>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6013      	str	r3, [r2, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_MSI_IsReady>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d101      	bne.n	8003eba <LL_RCC_MSI_IsReady+0x16>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <LL_RCC_MSI_IsReady+0x18>
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_MSI_SetRange>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_RCC_MSI_GetRange>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2bb0      	cmp	r3, #176	@ 0xb0
 8003f04:	d901      	bls.n	8003f0a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f06:	23b0      	movs	r3, #176	@ 0xb0
 8003f08:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003f0a:	687b      	ldr	r3, [r7, #4]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f32:	4313      	orrs	r3, r2
 8003f34:	604b      	str	r3, [r1, #4]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_SetSysClkSource>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 0203 	bic.w	r2, r3, #3
 8003f54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <LL_RCC_GetSysClkSource>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_RCC_SetAHBPrescaler>:
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_C2_RCC_SetAHBPrescaler>:
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_SetAHB4Prescaler>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_RCC_SetAPB1Prescaler>:
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_RCC_SetAPB2Prescaler>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800403e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_GetAHBPrescaler>:
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_RCC_GetAHB4Prescaler>:
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004074:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800407e:	4618      	mov	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_GetAPB1Prescaler>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_GetAPB2Prescaler>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80040bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e8:	6013      	str	r3, [r2, #0]
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004106:	d101      	bne.n	800410c <LL_RCC_PLL_IsReady+0x18>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <LL_RCC_PLL_IsReady+0x1a>
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0303 	and.w	r3, r3, #3
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418c:	d101      	bne.n	8004192 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b2:	d101      	bne.n	80041b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80041c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d101      	bne.n	80041de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041fc:	d101      	bne.n	8004202 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800421c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004220:	d101      	bne.n	8004226 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b08d      	sub	sp, #52	@ 0x34
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e363      	b.n	800490e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 808d 	beq.w	800436e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004254:	f7ff fe89 	bl	8003f6a <LL_RCC_GetSysClkSource>
 8004258:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800425a:	f7ff ff82 	bl	8004162 <LL_RCC_PLL_GetMainSource>
 800425e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCC_OscConfig+0x3e>
 8004266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d147      	bne.n	80042fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	2b01      	cmp	r3, #1
 8004270:	d144      	bne.n	80042fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e347      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004282:	f7ff fe34 	bl	8003eee <LL_RCC_MSI_GetRange>
 8004286:	4603      	mov	r3, r0
 8004288:	429c      	cmp	r4, r3
 800428a:	d914      	bls.n	80042b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fd2f 	bl	8004cf4 <RCC_SetFlashLatencyFromMSIRange>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e336      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fe0e 	bl	8003ec6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fe32 	bl	8003f18 <LL_RCC_MSI_SetCalibTrimming>
 80042b4:	e013      	b.n	80042de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fe03 	bl	8003ec6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fe27 	bl	8003f18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fd10 	bl	8004cf4 <RCC_SetFlashLatencyFromMSIRange>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e317      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042de:	f000 fcc9 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4aa4      	ldr	r2, [pc, #656]	@ (8004578 <HAL_RCC_OscConfig+0x344>)
 80042e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042e8:	4ba4      	ldr	r3, [pc, #656]	@ (800457c <HAL_RCC_OscConfig+0x348>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fd fb39 	bl	8001964 <HAL_InitTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d039      	beq.n	800436c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e308      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01e      	beq.n	8004342 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004304:	f7ff fdb0 	bl	8003e68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004308:	f7fd fb7a 	bl	8001a00 <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004310:	f7fd fb76 	bl	8001a00 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e2f5      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004322:	f7ff fdbf 	bl	8003ea4 <LL_RCC_MSI_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f1      	beq.n	8004310 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fdc8 	bl	8003ec6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fdec 	bl	8003f18 <LL_RCC_MSI_SetCalibTrimming>
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004342:	f7ff fda0 	bl	8003e86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004346:	f7fd fb5b 	bl	8001a00 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434e:	f7fd fb57 	bl	8001a00 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e2d6      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004360:	f7ff fda0 	bl	8003ea4 <LL_RCC_MSI_IsReady>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f1      	bne.n	800434e <HAL_RCC_OscConfig+0x11a>
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800436c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d047      	beq.n	800440a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	f7ff fdf6 	bl	8003f6a <LL_RCC_GetSysClkSource>
 800437e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004380:	f7ff feef 	bl	8004162 <LL_RCC_PLL_GetMainSource>
 8004384:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x164>
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d108      	bne.n	80043a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d105      	bne.n	80043a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d134      	bne.n	800440a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e2b4      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_OscConfig+0x180>
 80043ae:	f7ff fbdd 	bl	8003b6c <LL_RCC_HSE_Enable>
 80043b2:	e001      	b.n	80043b8 <HAL_RCC_OscConfig+0x184>
 80043b4:	f7ff fbe9 	bl	8003b8a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d012      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fb1e 	bl	8001a00 <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd fb1a 	bl	8001a00 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	@ 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e299      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80043da:	f7ff fbe5 	bl	8003ba8 <LL_RCC_HSE_IsReady>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f1      	beq.n	80043c8 <HAL_RCC_OscConfig+0x194>
 80043e4:	e011      	b.n	800440a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fd fb0b 	bl	8001a00 <HAL_GetTick>
 80043ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ee:	f7fd fb07 	bl	8001a00 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b64      	cmp	r3, #100	@ 0x64
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e286      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004400:	f7ff fbd2 	bl	8003ba8 <LL_RCC_HSE_IsReady>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f1      	bne.n	80043ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004416:	f7ff fda8 	bl	8003f6a <LL_RCC_GetSysClkSource>
 800441a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800441c:	f7ff fea1 	bl	8004162 <LL_RCC_PLL_GetMainSource>
 8004420:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d005      	beq.n	8004434 <HAL_RCC_OscConfig+0x200>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d10e      	bne.n	800444c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d10b      	bne.n	800444c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e266      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fbf1 	bl	8003c2c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800444a:	e031      	b.n	80044b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	f7ff fbba 	bl	8003bcc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fad2 	bl	8001a00 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004460:	f7fd face 	bl	8001a00 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e24d      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004472:	f7ff fbc9 	bl	8003c08 <LL_RCC_HSI_IsReady>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f1      	beq.n	8004460 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fbd3 	bl	8003c2c <LL_RCC_HSI_SetCalibTrimming>
 8004486:	e013      	b.n	80044b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004488:	f7ff fbaf 	bl	8003bea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fd fab8 	bl	8001a00 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004494:	f7fd fab4 	bl	8001a00 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e233      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044a6:	f7ff fbaf 	bl	8003c08 <LL_RCC_HSI_IsReady>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f1      	bne.n	8004494 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a3 	beq.w	8004610 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d076      	beq.n	80045c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d046      	beq.n	800456c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80044de:	f7ff fc66 	bl	8003dae <LL_RCC_LSI1_IsReady>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80044e8:	f7ff fc3f 	bl	8003d6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ec:	f7fd fa88 	bl	8001a00 <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044f4:	f7fd fa84 	bl	8001a00 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e203      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004506:	f7ff fc52 	bl	8003dae <LL_RCC_LSI1_IsReady>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f1      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004510:	f7ff fc5f 	bl	8003dd2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd fa74 	bl	8001a00 <HAL_GetTick>
 8004518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800451c:	f7fd fa70 	bl	8001a00 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b03      	cmp	r3, #3
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1ef      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800452e:	f7ff fc72 	bl	8003e16 <LL_RCC_LSI2_IsReady>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f1      	beq.n	800451c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fc7c 	bl	8003e3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004542:	f7ff fc23 	bl	8003d8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fd fa5b 	bl	8001a00 <HAL_GetTick>
 800454a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800454e:	f7fd fa57 	bl	8001a00 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e1d6      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004560:	f7ff fc25 	bl	8003dae <LL_RCC_LSI1_IsReady>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f1      	bne.n	800454e <HAL_RCC_OscConfig+0x31a>
 800456a:	e051      	b.n	8004610 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800456c:	f7ff fbfd 	bl	8003d6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd fa46 	bl	8001a00 <HAL_GetTick>
 8004574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004576:	e00c      	b.n	8004592 <HAL_RCC_OscConfig+0x35e>
 8004578:	20000008 	.word	0x20000008
 800457c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004580:	f7fd fa3e 	bl	8001a00 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1bd      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004592:	f7ff fc0c 	bl	8003dae <LL_RCC_LSI1_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f1      	beq.n	8004580 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800459c:	f7ff fc2a 	bl	8003df4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045a2:	f7fd fa2d 	bl	8001a00 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e1ac      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045b4:	f7ff fc2f 	bl	8003e16 <LL_RCC_LSI2_IsReady>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f1      	bne.n	80045a2 <HAL_RCC_OscConfig+0x36e>
 80045be:	e027      	b.n	8004610 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80045c0:	f7ff fc18 	bl	8003df4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd fa1c 	bl	8001a00 <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045cc:	f7fd fa18 	bl	8001a00 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e197      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045de:	f7ff fc1a 	bl	8003e16 <LL_RCC_LSI2_IsReady>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f1      	bne.n	80045cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80045e8:	f7ff fbd0 	bl	8003d8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd fa08 	bl	8001a00 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045f4:	f7fd fa04 	bl	8001a00 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e183      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004606:	f7ff fbd2 	bl	8003dae <LL_RCC_LSI1_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f1      	bne.n	80045f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05b      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461c:	4ba7      	ldr	r3, [pc, #668]	@ (80048bc <HAL_RCC_OscConfig+0x688>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d114      	bne.n	8004652 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004628:	f7ff fa70 	bl	8003b0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462c:	f7fd f9e8 	bl	8001a00 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004634:	f7fd f9e4 	bl	8001a00 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e163      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004646:	4b9d      	ldr	r3, [pc, #628]	@ (80048bc <HAL_RCC_OscConfig+0x688>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d102      	bne.n	8004660 <HAL_RCC_OscConfig+0x42c>
 800465a:	f7ff fb30 	bl	8003cbe <LL_RCC_LSE_Enable>
 800465e:	e00c      	b.n	800467a <HAL_RCC_OscConfig+0x446>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b05      	cmp	r3, #5
 8004666:	d104      	bne.n	8004672 <HAL_RCC_OscConfig+0x43e>
 8004668:	f7ff fb4b 	bl	8003d02 <LL_RCC_LSE_EnableBypass>
 800466c:	f7ff fb27 	bl	8003cbe <LL_RCC_LSE_Enable>
 8004670:	e003      	b.n	800467a <HAL_RCC_OscConfig+0x446>
 8004672:	f7ff fb35 	bl	8003ce0 <LL_RCC_LSE_Disable>
 8004676:	f7ff fb55 	bl	8003d24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d014      	beq.n	80046ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fd f9bd 	bl	8001a00 <HAL_GetTick>
 8004686:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fd f9b9 	bl	8001a00 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e136      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80046a0:	f7ff fb51 	bl	8003d46 <LL_RCC_LSE_IsReady>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ef      	beq.n	800468a <HAL_RCC_OscConfig+0x456>
 80046aa:	e013      	b.n	80046d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fd f9a8 	bl	8001a00 <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd f9a4 	bl	8001a00 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e121      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80046ca:	f7ff fb3c 	bl	8003d46 <LL_RCC_LSE_IsReady>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ef      	bne.n	80046b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02c      	beq.n	800473a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d014      	beq.n	8004712 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046e8:	f7ff fab5 	bl	8003c56 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd f988 	bl	8001a00 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f4:	f7fd f984 	bl	8001a00 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e103      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004706:	f7ff fac8 	bl	8003c9a <LL_RCC_HSI48_IsReady>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f1      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4c0>
 8004710:	e013      	b.n	800473a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004712:	f7ff fab1 	bl	8003c78 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004716:	f7fd f973 	bl	8001a00 <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800471e:	f7fd f96f 	bl	8001a00 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0ee      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004730:	f7ff fab3 	bl	8003c9a <LL_RCC_HSI48_IsReady>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f1      	bne.n	800471e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80e4 	beq.w	800490c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004744:	f7ff fc11 	bl	8003f6a <LL_RCC_GetSysClkSource>
 8004748:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	2b02      	cmp	r3, #2
 8004758:	f040 80b4 	bne.w	80048c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0203 	and.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	429a      	cmp	r2, r3
 8004768:	d123      	bne.n	80047b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d11c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d114      	bne.n	80047b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d10d      	bne.n	80047b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d05d      	beq.n	800486e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d058      	beq.n	800486a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0a1      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047ca:	f7ff fc84 	bl	80040d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047ce:	f7fd f917 	bl	8001a00 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fd f913 	bl	8001a00 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e092      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4b30      	ldr	r3, [pc, #192]	@ (80048c0 <HAL_RCC_OscConfig+0x68c>)
 80047fe:	4013      	ands	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800480e:	0212      	lsls	r2, r2, #8
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004822:	430a      	orrs	r2, r1
 8004824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004828:	4313      	orrs	r3, r2
 800482a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800482c:	f7ff fc44 	bl	80040b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004840:	f7fd f8de 	bl	8001a00 <HAL_GetTick>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004848:	f7fd f8da 	bl	8001a00 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e059      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0ef      	beq.n	8004848 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004868:	e050      	b.n	800490c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e04f      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d147      	bne.n	800490c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800487c:	f7ff fc1c 	bl	80040b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004890:	f7fd f8b6 	bl	8001a00 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd f8b2 	bl	8001a00 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e031      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ef      	beq.n	8004898 <HAL_RCC_OscConfig+0x664>
 80048b8:	e028      	b.n	800490c <HAL_RCC_OscConfig+0x6d8>
 80048ba:	bf00      	nop
 80048bc:	58000400 	.word	0x58000400
 80048c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d01e      	beq.n	8004908 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	f7ff fc04 	bl	80040d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fd f897 	bl	8001a00 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fd f893 	bl	8001a00 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e012      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ef      	bne.n	80048d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCC_OscConfig+0x6e4>)
 8004902:	4013      	ands	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
 8004906:	e001      	b.n	800490c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3734      	adds	r7, #52	@ 0x34
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}
 8004916:	bf00      	nop
 8004918:	eefefffc 	.word	0xeefefffc

0800491c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e12d      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b98      	ldr	r3, [pc, #608]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d91b      	bls.n	8004976 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b95      	ldr	r3, [pc, #596]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 0207 	bic.w	r2, r3, #7
 8004946:	4993      	ldr	r1, [pc, #588]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fd f857 	bl	8001a00 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004954:	e008      	b.n	8004968 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004956:	f7fd f853 	bl	8001a00 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e111      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004968:	4b8a      	ldr	r3, [pc, #552]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d1ef      	bne.n	8004956 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fafb 	bl	8003f82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800498c:	f7fd f838 	bl	8001a00 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004994:	f7fd f834 	bl	8001a00 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e0f2      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049a6:	f7ff fbe8 	bl	800417a <LL_RCC_IsActiveFlag_HPRE>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f1      	beq.n	8004994 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff faf2 	bl	8003faa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049c6:	f7fd f81b 	bl	8001a00 <HAL_GetTick>
 80049ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049ce:	f7fd f817 	bl	8001a00 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0d5      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049e0:	f7ff fbdd 	bl	800419e <LL_RCC_IsActiveFlag_C2HPRE>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f1      	beq.n	80049ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff faeb 	bl	8003fd6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a00:	f7fc fffe 	bl	8001a00 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a08:	f7fc fffa 	bl	8001a00 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0b8      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a1a:	f7ff fbd3 	bl	80041c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f1      	beq.n	8004a08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fae5 	bl	8004004 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a3a:	f7fc ffe1 	bl	8001a00 <HAL_GetTick>
 8004a3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a42:	f7fc ffdd 	bl	8001a00 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e09b      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a54:	f7ff fbc9 	bl	80041ea <LL_RCC_IsActiveFlag_PPRE1>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f1      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d017      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fadb 	bl	800402c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a76:	f7fc ffc3 	bl	8001a00 <HAL_GetTick>
 8004a7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a7e:	f7fc ffbf 	bl	8001a00 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e07d      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a90:	f7ff fbbd 	bl	800420e <LL_RCC_IsActiveFlag_PPRE2>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f1      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d043      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d106      	bne.n	8004abc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004aae:	f7ff f87b 	bl	8003ba8 <LL_RCC_HSE_IsReady>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d11e      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e067      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ac4:	f7ff fb16 	bl	80040f4 <LL_RCC_PLL_IsReady>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d113      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e05c      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004ada:	f7ff f9e3 	bl	8003ea4 <LL_RCC_MSI_IsReady>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e051      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ae8:	f7ff f88e 	bl	8003c08 <LL_RCC_HSI_IsReady>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e04a      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fa21 	bl	8003f42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fc ff7e 	bl	8001a00 <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b08:	f7fc ff7a 	bl	8001a00 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e036      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	f7ff fa24 	bl	8003f6a <LL_RCC_GetSysClkSource>
 8004b22:	4602      	mov	r2, r0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d1ec      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2e:	4b19      	ldr	r3, [pc, #100]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d21b      	bcs.n	8004b74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3c:	4b15      	ldr	r3, [pc, #84]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 0207 	bic.w	r2, r3, #7
 8004b44:	4913      	ldr	r1, [pc, #76]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fc ff58 	bl	8001a00 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b54:	f7fc ff54 	bl	8001a00 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e012      	b.n	8004b8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_RCC_ClockConfig+0x278>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1ef      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b74:	f000 f87e 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4a07      	ldr	r2, [pc, #28]	@ (8004b98 <HAL_RCC_ClockConfig+0x27c>)
 8004b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004b7e:	f7fc ff4b 	bl	8001a18 <HAL_GetTickPrio>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fc feed 	bl	8001964 <HAL_InitTick>
 8004b8a:	4603      	mov	r3, r0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58004000 	.word	0x58004000
 8004b98:	20000008 	.word	0x20000008

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	f7ff f9e2 	bl	8003f6a <LL_RCC_GetSysClkSource>
 8004ba6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004bae:	f7ff f99e 	bl	8003eee <LL_RCC_MSI_GetRange>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	4a2b      	ldr	r2, [pc, #172]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e04b      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bca:	4b28      	ldr	r3, [pc, #160]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e045      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d10a      	bne.n	8004bec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bd6:	f7fe ffb7 	bl	8003b48 <LL_RCC_HSE_IsEnabledDiv2>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004be0:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e03a      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004be6:	4b22      	ldr	r3, [pc, #136]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e037      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004bec:	f7ff fab9 	bl	8004162 <LL_RCC_PLL_GetMainSource>
 8004bf0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x64>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x6a>
 8004bfe:	e00d      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c02:	60bb      	str	r3, [r7, #8]
        break;
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c06:	f7fe ff9f 	bl	8003b48 <LL_RCC_HSE_IsEnabledDiv2>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c10:	4b16      	ldr	r3, [pc, #88]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c14:	e00d      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004c16:	4b16      	ldr	r3, [pc, #88]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c18:	60bb      	str	r3, [r7, #8]
        break;
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c1c:	f7ff f967 	bl	8003eee <LL_RCC_MSI_GetRange>
 8004c20:	4603      	mov	r3, r0
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	4a0f      	ldr	r2, [pc, #60]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2e:	60bb      	str	r3, [r7, #8]
        break;
 8004c30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004c32:	f7ff fa71 	bl	8004118 <LL_RCC_PLL_GetN>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	fb03 f402 	mul.w	r4, r3, r2
 8004c3e:	f7ff fa84 	bl	800414a <LL_RCC_PLL_GetDivider>
 8004c42:	4603      	mov	r3, r0
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	3301      	adds	r3, #1
 8004c48:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c4c:	f7ff fa71 	bl	8004132 <LL_RCC_PLL_GetR>
 8004c50:	4603      	mov	r3, r0
 8004c52:	0f5b      	lsrs	r3, r3, #29
 8004c54:	3301      	adds	r3, #1
 8004c56:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c5a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}
 8004c66:	bf00      	nop
 8004c68:	08009584 	.word	0x08009584
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	01e84800 	.word	0x01e84800

08004c74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b598      	push	{r3, r4, r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c78:	f7ff ff90 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	f7ff f9e9 	bl	8004054 <LL_RCC_GetAHBPrescaler>
 8004c82:	4603      	mov	r3, r0
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	4a03      	ldr	r2, [pc, #12]	@ (8004c98 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	bd98      	pop	{r3, r4, r7, pc}
 8004c98:	08009524 	.word	0x08009524

08004c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c9c:	b598      	push	{r3, r4, r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ca0:	f7ff ffe8 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	f7ff f9ef 	bl	8004088 <LL_RCC_GetAPB1Prescaler>
 8004caa:	4603      	mov	r3, r0
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd98      	pop	{r3, r4, r7, pc}
 8004cc4:	08009564 	.word	0x08009564

08004cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc8:	b598      	push	{r3, r4, r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004ccc:	f7ff ffd2 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	f7ff f9e5 	bl	80040a0 <LL_RCC_GetAPB2Prescaler>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	0adb      	lsrs	r3, r3, #11
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	4a04      	ldr	r2, [pc, #16]	@ (8004cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd98      	pop	{r3, r4, r7, pc}
 8004cf0:	08009564 	.word	0x08009564

08004cf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2bb0      	cmp	r3, #176	@ 0xb0
 8004d00:	d903      	bls.n	8004d0a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d02:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e007      	b.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	4a11      	ldr	r2, [pc, #68]	@ (8004d58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d1a:	f7ff f9a7 	bl	800406c <LL_RCC_GetAHB4Prescaler>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a0d      	ldr	r2, [pc, #52]	@ (8004d5c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	0c9c      	lsrs	r4, r3, #18
 8004d3e:	f7fe fef5 	bl	8003b2c <HAL_PWREx_GetVoltageRange>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4619      	mov	r1, r3
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 f80c 	bl	8004d64 <RCC_SetFlashLatency>
 8004d4c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd90      	pop	{r4, r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08009584 	.word	0x08009584
 8004d5c:	08009524 	.word	0x08009524
 8004d60:	431bde83 	.word	0x431bde83

08004d64 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b093      	sub	sp, #76	@ 0x4c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004d6e:	4b37      	ldr	r3, [pc, #220]	@ (8004e4c <RCC_SetFlashLatency+0xe8>)
 8004d70:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004d7a:	4a35      	ldr	r2, [pc, #212]	@ (8004e50 <RCC_SetFlashLatency+0xec>)
 8004d7c:	f107 031c 	add.w	r3, r7, #28
 8004d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004d86:	4b33      	ldr	r3, [pc, #204]	@ (8004e54 <RCC_SetFlashLatency+0xf0>)
 8004d88:	f107 040c 	add.w	r4, r7, #12
 8004d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004d92:	2300      	movs	r3, #0
 8004d94:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9c:	d11a      	bne.n	8004dd4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da2:	e013      	b.n	8004dcc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	3348      	adds	r3, #72	@ 0x48
 8004daa:	443b      	add	r3, r7
 8004dac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d807      	bhi.n	8004dc6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3348      	adds	r3, #72	@ 0x48
 8004dbc:	443b      	add	r3, r7
 8004dbe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004dc2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004dc4:	e020      	b.n	8004e08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc8:	3301      	adds	r3, #1
 8004dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d9e8      	bls.n	8004da4 <RCC_SetFlashLatency+0x40>
 8004dd2:	e019      	b.n	8004e08 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd8:	e013      	b.n	8004e02 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	3348      	adds	r3, #72	@ 0x48
 8004de0:	443b      	add	r3, r7
 8004de2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d807      	bhi.n	8004dfc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	3348      	adds	r3, #72	@ 0x48
 8004df2:	443b      	add	r3, r7
 8004df4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004df8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004dfa:	e005      	b.n	8004e08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfe:	3301      	adds	r3, #1
 8004e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d9e8      	bls.n	8004dda <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004e08:	4b13      	ldr	r3, [pc, #76]	@ (8004e58 <RCC_SetFlashLatency+0xf4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0207 	bic.w	r2, r3, #7
 8004e10:	4911      	ldr	r1, [pc, #68]	@ (8004e58 <RCC_SetFlashLatency+0xf4>)
 8004e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e18:	f7fc fdf2 	bl	8001a00 <HAL_GetTick>
 8004e1c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e1e:	e008      	b.n	8004e32 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e20:	f7fc fdee 	bl	8001a00 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e007      	b.n	8004e42 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e32:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <RCC_SetFlashLatency+0xf4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1ef      	bne.n	8004e20 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	374c      	adds	r7, #76	@ 0x4c
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	080094f8 	.word	0x080094f8
 8004e50:	08009508 	.word	0x08009508
 8004e54:	08009514 	.word	0x08009514
 8004e58:	58004000 	.word	0x58004000

08004e5c <LL_RCC_LSE_IsEnabled>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <LL_RCC_LSE_IsEnabled+0x18>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <LL_RCC_LSE_IsEnabled+0x1a>
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_RCC_LSE_IsReady>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d101      	bne.n	8004e98 <LL_RCC_LSE_IsReady+0x18>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <LL_RCC_LSE_IsReady+0x1a>
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <LL_RCC_SetRFWKPClockSource>:
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_RCC_SetSMPSClockSource>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_SetSMPSPrescaler>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_SetUSARTClockSource>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f023 0203 	bic.w	r2, r3, #3
 8004f34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_RCC_SetLPUARTClockSource>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <LL_RCC_SetI2CClockSource>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004f9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_SetLPTIMClockSource>:
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_SetSAIClockSource>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ffa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <LL_RCC_SetRNGClockSource>:
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <LL_RCC_SetCLK48ClockSource>:
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <LL_RCC_SetUSBClockSource>:
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff ffe3 	bl	800503e <LL_RCC_SetCLK48ClockSource>
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <LL_RCC_SetADCClockSource>:
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005094:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <LL_RCC_SetRTCClockSource>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <LL_RCC_GetRTCClockSource>:
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80050dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_ForceBackupDomainReset>:
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800510a:	bf00      	nop
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_RCC_PLLSAI1_Enable>:
{
 8005136:	b480      	push	{r7}
 8005138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005144:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	bf00      	nop
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_RCC_PLLSAI1_Disable>:
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_PLLSAI1_IsReady>:
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005184:	d101      	bne.n	800518a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b088      	sub	sp, #32
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800519e:	2300      	movs	r3, #0
 80051a0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051a2:	2300      	movs	r3, #0
 80051a4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d034      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051ba:	d021      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80051bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051c0:	d81b      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051c6:	d01d      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80051c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051cc:	d815      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x54>
 80051d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051d6:	d110      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80051e8:	e00d      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f947 	bl	8005482 <RCCEx_PLLSAI1_ConfigNP>
 80051f4:	4603      	mov	r3, r0
 80051f6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051f8:	e005      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	77fb      	strb	r3, [r7, #31]
        break;
 80051fe:	e002      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005200:	bf00      	nop
 8005202:	e000      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d105      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fee8 	bl	8004fe6 <LL_RCC_SetSAIClockSource>
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7ffb      	ldrb	r3, [r7, #31]
 800521a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005224:	2b00      	cmp	r3, #0
 8005226:	d046      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005228:	f7ff ff56 	bl	80050d8 <LL_RCC_GetRTCClockSource>
 800522c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	429a      	cmp	r2, r3
 8005236:	d03c      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005238:	f7fe fc68 	bl	8003b0c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff30 	bl	80050ac <LL_RCC_SetRTCClockSource>
 800524c:	e02e      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005258:	f7ff ff4b 	bl	80050f2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800525c:	f7ff ff5a 	bl	8005114 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800526e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005278:	f7ff fdf0 	bl	8004e5c <LL_RCC_LSE_IsEnabled>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d114      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005282:	f7fc fbbd 	bl	8001a00 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005288:	e00b      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528a:	f7fc fbb9 	bl	8001a00 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005298:	4293      	cmp	r3, r2
 800529a:	d902      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	77fb      	strb	r3, [r7, #31]
              break;
 80052a0:	e004      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80052a2:	f7ff fded 	bl	8004e80 <LL_RCC_LSE_IsReady>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d1ee      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	77bb      	strb	r3, [r7, #30]
 80052b0:	e001      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fe2a 	bl	8004f20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fe35 	bl	8004f4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fe5d 	bl	8004fb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fe52 	bl	8004fb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fe2a 	bl	8004f78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fe1f 	bl	8004f78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d022      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fe8d 	bl	800506a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005354:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005358:	d107      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005364:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005368:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005372:	d10b      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f8dd 	bl	8005538 <RCCEx_PLLSAI1_ConfigNQ>
 800537e:	4603      	mov	r3, r0
 8005380:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005388:	7ffb      	ldrb	r3, [r7, #31]
 800538a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a0:	d008      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053aa:	d003      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fe2a 	bl	8005012 <LL_RCC_SetRNGClockSource>
 80053be:	e00a      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7ff fe21 	bl	8005012 <LL_RCC_SetRNGClockSource>
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fe34 	bl	800503e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80053de:	d107      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d022      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fe3d 	bl	8005080 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800540e:	d107      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800541a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005428:	d10b      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f8dd 	bl	80055ee <RCCEx_PLLSAI1_ConfigNR>
 8005434:	4603      	mov	r3, r0
 8005436:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005438:	7ffb      	ldrb	r3, [r7, #31]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800543e:	7ffb      	ldrb	r3, [r7, #31]
 8005440:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fd26 	bl	8004ea4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fd45 	bl	8004ef8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fd2c 	bl	8004ed0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005478:	7fbb      	ldrb	r3, [r7, #30]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800548e:	f7ff fe61 	bl	8005154 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005492:	f7fc fab5 	bl	8001a00 <HAL_GetTick>
 8005496:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005498:	e009      	b.n	80054ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800549a:	f7fc fab1 	bl	8001a00 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d902      	bls.n	80054ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	73fb      	strb	r3, [r7, #15]
      break;
 80054ac:	e004      	b.n	80054b8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054ae:	f7ff fe60 	bl	8005172 <LL_RCC_PLLSAI1_IsReady>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d137      	bne.n	800552e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054d2:	4313      	orrs	r3, r2
 80054d4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054ec:	f7ff fe23 	bl	8005136 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f0:	f7fc fa86 	bl	8001a00 <HAL_GetTick>
 80054f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054f6:	e009      	b.n	800550c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054f8:	f7fc fa82 	bl	8001a00 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d902      	bls.n	800550c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	73fb      	strb	r3, [r7, #15]
        break;
 800550a:	e004      	b.n	8005516 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800550c:	f7ff fe31 	bl	8005172 <LL_RCC_PLLSAI1_IsReady>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d1f0      	bne.n	80054f8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d108      	bne.n	800552e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800552a:	4313      	orrs	r3, r2
 800552c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005544:	f7ff fe06 	bl	8005154 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005548:	f7fc fa5a 	bl	8001a00 <HAL_GetTick>
 800554c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800554e:	e009      	b.n	8005564 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005550:	f7fc fa56 	bl	8001a00 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	73fb      	strb	r3, [r7, #15]
      break;
 8005562:	e004      	b.n	800556e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005564:	f7ff fe05 	bl	8005172 <LL_RCC_PLLSAI1_IsReady>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d137      	bne.n	80055e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005588:	4313      	orrs	r3, r2
 800558a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800559e:	4313      	orrs	r3, r2
 80055a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80055a2:	f7ff fdc8 	bl	8005136 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a6:	f7fc fa2b 	bl	8001a00 <HAL_GetTick>
 80055aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055ac:	e009      	b.n	80055c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ae:	f7fc fa27 	bl	8001a00 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d902      	bls.n	80055c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	73fb      	strb	r3, [r7, #15]
        break;
 80055c0:	e004      	b.n	80055cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055c2:	f7ff fdd6 	bl	8005172 <LL_RCC_PLLSAI1_IsReady>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d1f0      	bne.n	80055ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055e0:	4313      	orrs	r3, r2
 80055e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055fa:	f7ff fdab 	bl	8005154 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055fe:	f7fc f9ff 	bl	8001a00 <HAL_GetTick>
 8005602:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005604:	e009      	b.n	800561a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005606:	f7fc f9fb 	bl	8001a00 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d902      	bls.n	800561a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e004      	b.n	8005624 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800561a:	f7ff fdaa 	bl	8005172 <LL_RCC_PLLSAI1_IsReady>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f0      	bne.n	8005606 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d137      	bne.n	800569a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800562a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800563e:	4313      	orrs	r3, r2
 8005640:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005654:	4313      	orrs	r3, r2
 8005656:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005658:	f7ff fd6d 	bl	8005136 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565c:	f7fc f9d0 	bl	8001a00 <HAL_GetTick>
 8005660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005662:	e009      	b.n	8005678 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005664:	f7fc f9cc 	bl	8001a00 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d902      	bls.n	8005678 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	73fb      	strb	r3, [r7, #15]
        break;
 8005676:	e004      	b.n	8005682 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005678:	f7ff fd7b 	bl	8005172 <LL_RCC_PLLSAI1_IsReady>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d1f0      	bne.n	8005664 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005696:	4313      	orrs	r3, r2
 8005698:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e09f      	b.n	80057f6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fb fd06 	bl	80010dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80056d8:	4b49      	ldr	r3, [pc, #292]	@ (8005800 <HAL_RTC_Init+0x15c>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d07e      	beq.n	80057e2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	22ca      	movs	r2, #202	@ 0xca
 80056ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2253      	movs	r2, #83	@ 0x53
 80056f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f8ab 	bl	8005850 <RTC_EnterInitMode>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	22ff      	movs	r2, #255	@ 0xff
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2204      	movs	r2, #4
 800570c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
 8005714:	e067      	b.n	80057e6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005728:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6899      	ldr	r1, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68d2      	ldr	r2, [r2, #12]
 8005750:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6919      	ldr	r1, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	041a      	lsls	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005774:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0203 	bic.w	r2, r2, #3
 8005784:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d113      	bne.n	80057d4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f829 	bl	8005804 <HAL_RTC_WaitForSynchro>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00d      	beq.n	80057d4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	22ff      	movs	r2, #255	@ 0xff
 80057be:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e010      	b.n	80057f6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	22ff      	movs	r2, #255	@ 0xff
 80057da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	e001      	b.n	80057e6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40002800 	.word	0x40002800

08005804 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800581a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800581c:	f7fc f8f0 	bl	8001a00 <HAL_GetTick>
 8005820:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005822:	e009      	b.n	8005838 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005824:	f7fc f8ec 	bl	8001a00 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005832:	d901      	bls.n	8005838 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e007      	b.n	8005848 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0ee      	beq.n	8005824 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d119      	bne.n	800589a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005870:	f7fc f8c6 	bl	8001a00 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005876:	e009      	b.n	800588c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005878:	f7fc f8c2 	bl	8001a00 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005886:	d901      	bls.n	800588c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e007      	b.n	800589c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0ee      	beq.n	8005878 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e089      	b.n	80059d2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	22ca      	movs	r2, #202	@ 0xca
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2253      	movs	r2, #83	@ 0x53
 80058dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d020      	beq.n	800592e <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80058ec:	f7fc f888 	bl	8001a00 <HAL_GetTick>
 80058f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80058f2:	e015      	b.n	8005920 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058f4:	f7fc f884 	bl	8001a00 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005902:	d90d      	bls.n	8005920 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	22ff      	movs	r2, #255	@ 0xff
 800590a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2203      	movs	r2, #3
 8005910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e058      	b.n	80059d2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e2      	bne.n	80058f4 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800593e:	f7fc f85f 	bl	8001a00 <HAL_GetTick>
 8005942:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005944:	e015      	b.n	8005972 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005946:	f7fc f85b 	bl	8001a00 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005954:	d90d      	bls.n	8005972 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	22ff      	movs	r2, #255	@ 0xff
 800595c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2203      	movs	r2, #3
 8005962:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e02f      	b.n	80059d2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0e2      	beq.n	8005946 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0207 	bic.w	r2, r2, #7
 800598e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6899      	ldr	r1, [r3, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	430a      	orrs	r2, r1
 800599e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059b6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	22ff      	movs	r2, #255	@ 0xff
 80059be:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e049      	b.n	8005a80 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fb fb99 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fad7 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e02e      	b.n	8005afe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a17      	ldr	r2, [pc, #92]	@ (8005b0c <HAL_TIM_Base_Start+0x84>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIM_Base_Start+0x34>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aba:	d115      	bne.n	8005ae8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	4b13      	ldr	r3, [pc, #76]	@ (8005b10 <HAL_TIM_Base_Start+0x88>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b06      	cmp	r3, #6
 8005acc:	d015      	beq.n	8005afa <HAL_TIM_Base_Start+0x72>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad4:	d011      	beq.n	8005afa <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae6:	e008      	b.n	8005afa <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e000      	b.n	8005afc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	00010007 	.word	0x00010007

08005b14 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b26:	4013      	ands	r3, r2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10f      	bne.n	8005b4c <HAL_TIM_Base_Stop+0x38>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_Base_Stop+0x38>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e049      	b.n	8005c08 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fb faf5 	bl	8001178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f000 fa13 	bl	8005fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e0ff      	b.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b14      	cmp	r3, #20
 8005c3a:	f200 80f0 	bhi.w	8005e1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005e1f 	.word	0x08005e1f
 8005c4c:	08005e1f 	.word	0x08005e1f
 8005c50:	08005e1f 	.word	0x08005e1f
 8005c54:	08005cd9 	.word	0x08005cd9
 8005c58:	08005e1f 	.word	0x08005e1f
 8005c5c:	08005e1f 	.word	0x08005e1f
 8005c60:	08005e1f 	.word	0x08005e1f
 8005c64:	08005d1b 	.word	0x08005d1b
 8005c68:	08005e1f 	.word	0x08005e1f
 8005c6c:	08005e1f 	.word	0x08005e1f
 8005c70:	08005e1f 	.word	0x08005e1f
 8005c74:	08005d5b 	.word	0x08005d5b
 8005c78:	08005e1f 	.word	0x08005e1f
 8005c7c:	08005e1f 	.word	0x08005e1f
 8005c80:	08005e1f 	.word	0x08005e1f
 8005c84:	08005d9d 	.word	0x08005d9d
 8005c88:	08005e1f 	.word	0x08005e1f
 8005c8c:	08005e1f 	.word	0x08005e1f
 8005c90:	08005e1f 	.word	0x08005e1f
 8005c94:	08005ddd 	.word	0x08005ddd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fa04 	bl	80060ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0208 	orr.w	r2, r2, #8
 8005cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0204 	bic.w	r2, r2, #4
 8005cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6999      	ldr	r1, [r3, #24]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	619a      	str	r2, [r3, #24]
      break;
 8005cd6:	e0a5      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fa60 	bl	80061a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	021a      	lsls	r2, r3, #8
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	619a      	str	r2, [r3, #24]
      break;
 8005d18:	e084      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fab9 	bl	8006298 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0208 	orr.w	r2, r2, #8
 8005d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0204 	bic.w	r2, r2, #4
 8005d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	61da      	str	r2, [r3, #28]
      break;
 8005d58:	e064      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb11 	bl	8006388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	021a      	lsls	r2, r3, #8
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	61da      	str	r2, [r3, #28]
      break;
 8005d9a:	e043      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fb4e 	bl	8006444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0208 	orr.w	r2, r2, #8
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0204 	bic.w	r2, r2, #4
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dda:	e023      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fb86 	bl	80064f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	021a      	lsls	r2, r3, #8
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e1c:	e002      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	75fb      	strb	r3, [r7, #23]
      break;
 8005e22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop

08005e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIM_ConfigClockSource+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0b6      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x18a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005e72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e90:	d03e      	beq.n	8005f10 <HAL_TIM_ConfigClockSource+0xd8>
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e96:	f200 8087 	bhi.w	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9e:	f000 8086 	beq.w	8005fae <HAL_TIM_ConfigClockSource+0x176>
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea6:	d87f      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005ea8:	2b70      	cmp	r3, #112	@ 0x70
 8005eaa:	d01a      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0xaa>
 8005eac:	2b70      	cmp	r3, #112	@ 0x70
 8005eae:	d87b      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b60      	cmp	r3, #96	@ 0x60
 8005eb2:	d050      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x11e>
 8005eb4:	2b60      	cmp	r3, #96	@ 0x60
 8005eb6:	d877      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b50      	cmp	r3, #80	@ 0x50
 8005eba:	d03c      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0xfe>
 8005ebc:	2b50      	cmp	r3, #80	@ 0x50
 8005ebe:	d873      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005ec0:	2b40      	cmp	r3, #64	@ 0x40
 8005ec2:	d058      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x13e>
 8005ec4:	2b40      	cmp	r3, #64	@ 0x40
 8005ec6:	d86f      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005ec8:	2b30      	cmp	r3, #48	@ 0x30
 8005eca:	d064      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15e>
 8005ecc:	2b30      	cmp	r3, #48	@ 0x30
 8005ece:	d86b      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d060      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15e>
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d867      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d05c      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15e>
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d05a      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15e>
 8005ee0:	e062      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ef2:	f000 fbd5 	bl	80066a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	609a      	str	r2, [r3, #8]
      break;
 8005f0e:	e04f      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f20:	f000 fbbe 	bl	80066a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f32:	609a      	str	r2, [r3, #8]
      break;
 8005f34:	e03c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 fb30 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2150      	movs	r1, #80	@ 0x50
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fb89 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005f54:	e02c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f62:	461a      	mov	r2, r3
 8005f64:	f000 fb4f 	bl	8006606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2160      	movs	r1, #96	@ 0x60
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fb79 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005f74:	e01c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 fb10 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2140      	movs	r1, #64	@ 0x40
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fb69 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e00c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f000 fb60 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005fa6:	e003      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e000      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a30      	ldr	r2, [pc, #192]	@ (80060a0 <TIM_Base_SetConfig+0xd4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0x20>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fea:	d108      	bne.n	8005ffe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a27      	ldr	r2, [pc, #156]	@ (80060a0 <TIM_Base_SetConfig+0xd4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_Base_SetConfig+0x52>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600c:	d007      	beq.n	800601e <TIM_Base_SetConfig+0x52>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a24      	ldr	r2, [pc, #144]	@ (80060a4 <TIM_Base_SetConfig+0xd8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_Base_SetConfig+0x52>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a23      	ldr	r2, [pc, #140]	@ (80060a8 <TIM_Base_SetConfig+0xdc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a12      	ldr	r2, [pc, #72]	@ (80060a0 <TIM_Base_SetConfig+0xd4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <TIM_Base_SetConfig+0xa0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a11      	ldr	r2, [pc, #68]	@ (80060a4 <TIM_Base_SetConfig+0xd8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_Base_SetConfig+0xa0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a10      	ldr	r2, [pc, #64]	@ (80060a8 <TIM_Base_SetConfig+0xdc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d103      	bne.n	8006074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b01      	cmp	r3, #1
 8006084:	d105      	bne.n	8006092 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f023 0201 	bic.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	611a      	str	r2, [r3, #16]
  }
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800

080060ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f023 0201 	bic.w	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0303 	bic.w	r3, r3, #3
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 0302 	bic.w	r3, r3, #2
 80060f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a24      	ldr	r2, [pc, #144]	@ (8006198 <TIM_OC1_SetConfig+0xec>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_OC1_SetConfig+0x70>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a23      	ldr	r2, [pc, #140]	@ (800619c <TIM_OC1_SetConfig+0xf0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC1_SetConfig+0x70>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a22      	ldr	r2, [pc, #136]	@ (80061a0 <TIM_OC1_SetConfig+0xf4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d10c      	bne.n	8006136 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0308 	bic.w	r3, r3, #8
 8006122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a17      	ldr	r2, [pc, #92]	@ (8006198 <TIM_OC1_SetConfig+0xec>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_OC1_SetConfig+0xa2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a17      	ldr	r2, [pc, #92]	@ (80061a0 <TIM_OC1_SetConfig+0xf4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC1_SetConfig+0xa2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <TIM_OC1_SetConfig+0xf0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40014800 	.word	0x40014800
 80061a0:	40014400 	.word	0x40014400

080061a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f023 0210 	bic.w	r2, r3, #16
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0320 	bic.w	r3, r3, #32
 80061f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a22      	ldr	r2, [pc, #136]	@ (800628c <TIM_OC2_SetConfig+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10d      	bne.n	8006224 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a19      	ldr	r2, [pc, #100]	@ (800628c <TIM_OC2_SetConfig+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_OC2_SetConfig+0x98>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a18      	ldr	r2, [pc, #96]	@ (8006290 <TIM_OC2_SetConfig+0xec>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_OC2_SetConfig+0x98>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a17      	ldr	r2, [pc, #92]	@ (8006294 <TIM_OC2_SetConfig+0xf0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d113      	bne.n	8006264 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a21      	ldr	r2, [pc, #132]	@ (800637c <TIM_OC3_SetConfig+0xe4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10d      	bne.n	8006316 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <TIM_OC3_SetConfig+0xe4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_OC3_SetConfig+0x96>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <TIM_OC3_SetConfig+0xe8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_OC3_SetConfig+0x96>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a16      	ldr	r2, [pc, #88]	@ (8006384 <TIM_OC3_SetConfig+0xec>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d113      	bne.n	8006356 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800

08006388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a14      	ldr	r2, [pc, #80]	@ (8006438 <TIM_OC4_SetConfig+0xb0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_OC4_SetConfig+0x74>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a13      	ldr	r2, [pc, #76]	@ (800643c <TIM_OC4_SetConfig+0xb4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC4_SetConfig+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a12      	ldr	r2, [pc, #72]	@ (8006440 <TIM_OC4_SetConfig+0xb8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d109      	bne.n	8006410 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800

08006444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a13      	ldr	r2, [pc, #76]	@ (80064e8 <TIM_OC5_SetConfig+0xa4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_OC5_SetConfig+0x6a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <TIM_OC5_SetConfig+0xa8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC5_SetConfig+0x6a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a11      	ldr	r2, [pc, #68]	@ (80064f0 <TIM_OC5_SetConfig+0xac>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40014400 	.word	0x40014400
 80064f0:	40014800 	.word	0x40014800

080064f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800653a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a14      	ldr	r2, [pc, #80]	@ (800659c <TIM_OC6_SetConfig+0xa8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC6_SetConfig+0x6c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <TIM_OC6_SetConfig+0xac>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC6_SetConfig+0x6c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a12      	ldr	r2, [pc, #72]	@ (80065a4 <TIM_OC6_SetConfig+0xb0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d109      	bne.n	8006574 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	029b      	lsls	r3, r3, #10
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800

080065a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 030a 	bic.w	r3, r3, #10
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f023 0210 	bic.w	r2, r3, #16
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006642:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800667c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	f043 0307 	orr.w	r3, r3, #7
 800668c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e04a      	b.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1f      	ldr	r2, [pc, #124]	@ (800679c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d108      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006728:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a12      	ldr	r2, [pc, #72]	@ (800679c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d004      	beq.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006760:	d10c      	bne.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4313      	orrs	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00

080067a0 <LL_RCC_GetUSARTClockSource>:
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80067a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4013      	ands	r3, r2
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_RCC_GetLPUARTClockSource>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80067c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4013      	ands	r3, r2
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e042      	b.n	8006878 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fa fcf1 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2224      	movs	r2, #36	@ 0x24
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fe40 	bl	80074b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fc15 	bl	8007060 <UART_SetConfig>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e01b      	b.n	8006878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800684e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800685e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 febf 	bl	80075f4 <UART_CheckIdleState>
 8006876:	4603      	mov	r3, r0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	@ 0x28
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006896:	2b20      	cmp	r3, #32
 8006898:	d17b      	bne.n	8006992 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_UART_Transmit+0x26>
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e074      	b.n	8006994 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2221      	movs	r2, #33	@ 0x21
 80068b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ba:	f7fb f8a1 	bl	8001a00 <HAL_GetTick>
 80068be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d8:	d108      	bne.n	80068ec <HAL_UART_Transmit+0x6c>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e003      	b.n	80068f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068f4:	e030      	b.n	8006958 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2200      	movs	r2, #0
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 ff21 	bl	8007748 <UART_WaitOnFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e03d      	b.n	8006994 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	3302      	adds	r3, #2
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e007      	b.n	8006946 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	3301      	adds	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1c8      	bne.n	80068f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2200      	movs	r2, #0
 800696c:	2140      	movs	r1, #64	@ 0x40
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 feea 	bl	8007748 <UART_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e006      	b.n	8006994 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b0ba      	sub	sp, #232	@ 0xe8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069ca:	4013      	ands	r3, r2
 80069cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80069d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11b      	bne.n	8006a10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d015      	beq.n	8006a10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8300 	beq.w	8007006 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
      }
      return;
 8006a0e:	e2fa      	b.n	8007006 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8123 	beq.w	8006c60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a1e:	4b8d      	ldr	r3, [pc, #564]	@ (8006c54 <HAL_UART_IRQHandler+0x2b8>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a2a:	4b8b      	ldr	r3, [pc, #556]	@ (8006c58 <HAL_UART_IRQHandler+0x2bc>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 8116 	beq.w	8006c60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d011      	beq.n	8006a64 <HAL_UART_IRQHandler+0xc8>
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2201      	movs	r2, #1
 8006a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5a:	f043 0201 	orr.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d011      	beq.n	8006a94 <HAL_UART_IRQHandler+0xf8>
 8006a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2202      	movs	r2, #2
 8006a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8a:	f043 0204 	orr.w	r2, r3, #4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x128>
 8006aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aba:	f043 0202 	orr.w	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d017      	beq.n	8006b00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006adc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8006c54 <HAL_UART_IRQHandler+0x2b8>)
 8006ae2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2208      	movs	r2, #8
 8006aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af6:	f043 0208 	orr.w	r2, r3, #8
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d012      	beq.n	8006b32 <HAL_UART_IRQHandler+0x196>
 8006b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00c      	beq.n	8006b32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b28:	f043 0220 	orr.w	r2, r3, #32
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8266 	beq.w	800700a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d013      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b86:	2b40      	cmp	r3, #64	@ 0x40
 8006b88:	d005      	beq.n	8006b96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d054      	beq.n	8006c40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fe43 	bl	8007822 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba6:	2b40      	cmp	r3, #64	@ 0x40
 8006ba8:	d146      	bne.n	8006c38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1d9      	bne.n	8006baa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c06:	4a15      	ldr	r2, [pc, #84]	@ (8006c5c <HAL_UART_IRQHandler+0x2c0>)
 8006c08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fc fa35 	bl	8003080 <HAL_DMA_Abort_IT>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d019      	beq.n	8006c50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2e:	e00f      	b.n	8006c50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f9ff 	bl	8007034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c36:	e00b      	b.n	8006c50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9fb 	bl	8007034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3e:	e007      	b.n	8006c50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f9f7 	bl	8007034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c4e:	e1dc      	b.n	800700a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c50:	bf00      	nop
    return;
 8006c52:	e1da      	b.n	800700a <HAL_UART_IRQHandler+0x66e>
 8006c54:	10000001 	.word	0x10000001
 8006c58:	04000120 	.word	0x04000120
 8006c5c:	080078ef 	.word	0x080078ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f040 8170 	bne.w	8006f4a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8169 	beq.w	8006f4a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8162 	beq.w	8006f4a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c98:	2b40      	cmp	r3, #64	@ 0x40
 8006c9a:	f040 80d8 	bne.w	8006e4e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80af 	beq.w	8006e14 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	f080 80a7 	bcs.w	8006e14 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8087 	bne.w	8006df2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1da      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e1      	bne.n	8006d2e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3308      	adds	r3, #8
 8006d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e3      	bne.n	8006d6a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc0:	f023 0310 	bic.w	r3, r3, #16
 8006dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e4      	bne.n	8006db0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fc f8e8 	bl	8002fc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f91b 	bl	8007048 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e12:	e0fc      	b.n	800700e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	f040 80f5 	bne.w	800700e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	f040 80eb 	bne.w	800700e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8fe 	bl	8007048 <HAL_UARTEx_RxEventCallback>
      return;
 8006e4c:	e0df      	b.n	800700e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80d1 	beq.w	8007012 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80cc 	beq.w	8007012 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e4      	bne.n	8006e7a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ed8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e1      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f023 0310 	bic.w	r3, r3, #16
 8006f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e4      	bne.n	8006f00 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f880 	bl	8007048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f48:	e063      	b.n	8007012 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00e      	beq.n	8006f74 <HAL_UART_IRQHandler+0x5d8>
 8006f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fcff 	bl	8007970 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f72:	e051      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d014      	beq.n	8006faa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d03a      	beq.n	8007016 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
    }
    return;
 8006fa8:	e035      	b.n	8007016 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <HAL_UART_IRQHandler+0x62e>
 8006fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fca9 	bl	800791a <UART_EndTransmit_IT>
    return;
 8006fc8:	e026      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <HAL_UART_IRQHandler+0x64e>
 8006fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fda:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcd8 	bl	8007998 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fe8:	e016      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <HAL_UART_IRQHandler+0x67c>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da0c      	bge.n	8007018 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fcc0 	bl	8007984 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007004:	e008      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
      return;
 8007006:	bf00      	nop
 8007008:	e006      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
    return;
 800700a:	bf00      	nop
 800700c:	e004      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
      return;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
      return;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_UART_IRQHandler+0x67c>
    return;
 8007016:	bf00      	nop
  }
}
 8007018:	37e8      	adds	r7, #232	@ 0xe8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b08c      	sub	sp, #48	@ 0x30
 8007066:	af00      	add	r7, sp, #0
 8007068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	431a      	orrs	r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	431a      	orrs	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4313      	orrs	r3, r2
 8007086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4baf      	ldr	r3, [pc, #700]	@ (800734c <UART_SetConfig+0x2ec>)
 8007090:	4013      	ands	r3, r2
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007098:	430b      	orrs	r3, r1
 800709a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4aa4      	ldr	r2, [pc, #656]	@ (8007350 <UART_SetConfig+0x2f0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d004      	beq.n	80070cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070c8:	4313      	orrs	r3, r2
 80070ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80070d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	f023 010f 	bic.w	r1, r3, #15
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a95      	ldr	r2, [pc, #596]	@ (8007354 <UART_SetConfig+0x2f4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d125      	bne.n	8007150 <UART_SetConfig+0xf0>
 8007104:	2003      	movs	r0, #3
 8007106:	f7ff fb4b 	bl	80067a0 <LL_RCC_GetUSARTClockSource>
 800710a:	4603      	mov	r3, r0
 800710c:	2b03      	cmp	r3, #3
 800710e:	d81b      	bhi.n	8007148 <UART_SetConfig+0xe8>
 8007110:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <UART_SetConfig+0xb8>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	08007129 	.word	0x08007129
 800711c:	08007139 	.word	0x08007139
 8007120:	08007131 	.word	0x08007131
 8007124:	08007141 	.word	0x08007141
 8007128:	2301      	movs	r3, #1
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e042      	b.n	80071b6 <UART_SetConfig+0x156>
 8007130:	2302      	movs	r3, #2
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e03e      	b.n	80071b6 <UART_SetConfig+0x156>
 8007138:	2304      	movs	r3, #4
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713e:	e03a      	b.n	80071b6 <UART_SetConfig+0x156>
 8007140:	2308      	movs	r3, #8
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007146:	e036      	b.n	80071b6 <UART_SetConfig+0x156>
 8007148:	2310      	movs	r3, #16
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714e:	e032      	b.n	80071b6 <UART_SetConfig+0x156>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a7e      	ldr	r2, [pc, #504]	@ (8007350 <UART_SetConfig+0x2f0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d12a      	bne.n	80071b0 <UART_SetConfig+0x150>
 800715a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800715e:	f7ff fb2f 	bl	80067c0 <LL_RCC_GetLPUARTClockSource>
 8007162:	4603      	mov	r3, r0
 8007164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007168:	d01a      	beq.n	80071a0 <UART_SetConfig+0x140>
 800716a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800716e:	d81b      	bhi.n	80071a8 <UART_SetConfig+0x148>
 8007170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007174:	d00c      	beq.n	8007190 <UART_SetConfig+0x130>
 8007176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800717a:	d815      	bhi.n	80071a8 <UART_SetConfig+0x148>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <UART_SetConfig+0x128>
 8007180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007184:	d008      	beq.n	8007198 <UART_SetConfig+0x138>
 8007186:	e00f      	b.n	80071a8 <UART_SetConfig+0x148>
 8007188:	2300      	movs	r3, #0
 800718a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718e:	e012      	b.n	80071b6 <UART_SetConfig+0x156>
 8007190:	2302      	movs	r3, #2
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007196:	e00e      	b.n	80071b6 <UART_SetConfig+0x156>
 8007198:	2304      	movs	r3, #4
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719e:	e00a      	b.n	80071b6 <UART_SetConfig+0x156>
 80071a0:	2308      	movs	r3, #8
 80071a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a6:	e006      	b.n	80071b6 <UART_SetConfig+0x156>
 80071a8:	2310      	movs	r3, #16
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ae:	e002      	b.n	80071b6 <UART_SetConfig+0x156>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a65      	ldr	r2, [pc, #404]	@ (8007350 <UART_SetConfig+0x2f0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	f040 8097 	bne.w	80072f0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d823      	bhi.n	8007212 <UART_SetConfig+0x1b2>
 80071ca:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <UART_SetConfig+0x170>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071f5 	.word	0x080071f5
 80071d4:	08007213 	.word	0x08007213
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	08007213 	.word	0x08007213
 80071e0:	08007203 	.word	0x08007203
 80071e4:	08007213 	.word	0x08007213
 80071e8:	08007213 	.word	0x08007213
 80071ec:	08007213 	.word	0x08007213
 80071f0:	0800720b 	.word	0x0800720b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f4:	f7fd fd52 	bl	8004c9c <HAL_RCC_GetPCLK1Freq>
 80071f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071fa:	e010      	b.n	800721e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071fc:	4b56      	ldr	r3, [pc, #344]	@ (8007358 <UART_SetConfig+0x2f8>)
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007200:	e00d      	b.n	800721e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007202:	f7fd fccb 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8007206:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007208:	e009      	b.n	800721e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800720a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800720e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007210:	e005      	b.n	800721e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800721c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 812b 	beq.w	800747c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722a:	4a4c      	ldr	r2, [pc, #304]	@ (800735c <UART_SetConfig+0x2fc>)
 800722c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007230:	461a      	mov	r2, r3
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	fbb3 f3f2 	udiv	r3, r3, r2
 8007238:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	4413      	add	r3, r2
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	d305      	bcc.n	8007256 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	429a      	cmp	r2, r3
 8007254:	d903      	bls.n	800725e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800725c:	e10e      	b.n	800747c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	2200      	movs	r2, #0
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	60fa      	str	r2, [r7, #12]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	4a3c      	ldr	r2, [pc, #240]	@ (800735c <UART_SetConfig+0x2fc>)
 800726c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007270:	b29b      	uxth	r3, r3
 8007272:	2200      	movs	r2, #0
 8007274:	603b      	str	r3, [r7, #0]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800727c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007280:	f7f8 ffce 	bl	8000220 <__aeabi_uldivmod>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4610      	mov	r0, r2
 800728a:	4619      	mov	r1, r3
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	020b      	lsls	r3, r1, #8
 8007296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800729a:	0202      	lsls	r2, r0, #8
 800729c:	6979      	ldr	r1, [r7, #20]
 800729e:	6849      	ldr	r1, [r1, #4]
 80072a0:	0849      	lsrs	r1, r1, #1
 80072a2:	2000      	movs	r0, #0
 80072a4:	460c      	mov	r4, r1
 80072a6:	4605      	mov	r5, r0
 80072a8:	eb12 0804 	adds.w	r8, r2, r4
 80072ac:	eb43 0905 	adc.w	r9, r3, r5
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	469a      	mov	sl, r3
 80072b8:	4693      	mov	fp, r2
 80072ba:	4652      	mov	r2, sl
 80072bc:	465b      	mov	r3, fp
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f7f8 ffad 	bl	8000220 <__aeabi_uldivmod>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4613      	mov	r3, r2
 80072cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072d4:	d308      	bcc.n	80072e8 <UART_SetConfig+0x288>
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072dc:	d204      	bcs.n	80072e8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6a3a      	ldr	r2, [r7, #32]
 80072e4:	60da      	str	r2, [r3, #12]
 80072e6:	e0c9      	b.n	800747c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072ee:	e0c5      	b.n	800747c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f8:	d16d      	bne.n	80073d6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80072fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	3b01      	subs	r3, #1
 8007300:	2b07      	cmp	r3, #7
 8007302:	d82d      	bhi.n	8007360 <UART_SetConfig+0x300>
 8007304:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <UART_SetConfig+0x2ac>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	0800732d 	.word	0x0800732d
 8007310:	08007335 	.word	0x08007335
 8007314:	08007361 	.word	0x08007361
 8007318:	0800733b 	.word	0x0800733b
 800731c:	08007361 	.word	0x08007361
 8007320:	08007361 	.word	0x08007361
 8007324:	08007361 	.word	0x08007361
 8007328:	08007343 	.word	0x08007343
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800732c:	f7fd fccc 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 8007330:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007332:	e01b      	b.n	800736c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007334:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <UART_SetConfig+0x2f8>)
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007338:	e018      	b.n	800736c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800733a:	f7fd fc2f 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 800733e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007340:	e014      	b.n	800736c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007348:	e010      	b.n	800736c <UART_SetConfig+0x30c>
 800734a:	bf00      	nop
 800734c:	cfff69f3 	.word	0xcfff69f3
 8007350:	40008000 	.word	0x40008000
 8007354:	40013800 	.word	0x40013800
 8007358:	00f42400 	.word	0x00f42400
 800735c:	080095c4 	.word	0x080095c4
      default:
        pclk = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800736a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 8084 	beq.w	800747c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	4a4b      	ldr	r2, [pc, #300]	@ (80074a8 <UART_SetConfig+0x448>)
 800737a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800737e:	461a      	mov	r2, r3
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	fbb3 f3f2 	udiv	r3, r3, r2
 8007386:	005a      	lsls	r2, r3, #1
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	441a      	add	r2, r3
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d916      	bls.n	80073ce <UART_SetConfig+0x36e>
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a6:	d212      	bcs.n	80073ce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f023 030f 	bic.w	r3, r3, #15
 80073b0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	b29a      	uxth	r2, r3
 80073be:	8bfb      	ldrh	r3, [r7, #30]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	8bfa      	ldrh	r2, [r7, #30]
 80073ca:	60da      	str	r2, [r3, #12]
 80073cc:	e056      	b.n	800747c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073d4:	e052      	b.n	800747c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b07      	cmp	r3, #7
 80073de:	d822      	bhi.n	8007426 <UART_SetConfig+0x3c6>
 80073e0:	a201      	add	r2, pc, #4	@ (adr r2, 80073e8 <UART_SetConfig+0x388>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	08007409 	.word	0x08007409
 80073ec:	08007411 	.word	0x08007411
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007417 	.word	0x08007417
 80073f8:	08007427 	.word	0x08007427
 80073fc:	08007427 	.word	0x08007427
 8007400:	08007427 	.word	0x08007427
 8007404:	0800741f 	.word	0x0800741f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fd fc5e 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 800740c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800740e:	e010      	b.n	8007432 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007410:	4b26      	ldr	r3, [pc, #152]	@ (80074ac <UART_SetConfig+0x44c>)
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007414:	e00d      	b.n	8007432 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007416:	f7fd fbc1 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800741c:	e009      	b.n	8007432 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007430:	bf00      	nop
    }

    if (pclk != 0U)
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d021      	beq.n	800747c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	4a1a      	ldr	r2, [pc, #104]	@ (80074a8 <UART_SetConfig+0x448>)
 800743e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007442:	461a      	mov	r2, r3
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	fbb3 f2f2 	udiv	r2, r3, r2
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	441a      	add	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	2b0f      	cmp	r3, #15
 8007460:	d909      	bls.n	8007476 <UART_SetConfig+0x416>
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007468:	d205      	bcs.n	8007476 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	b29a      	uxth	r2, r3
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e002      	b.n	800747c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2201      	movs	r2, #1
 8007488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2200      	movs	r2, #0
 8007490:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007498:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800749c:	4618      	mov	r0, r3
 800749e:	3730      	adds	r7, #48	@ 0x30
 80074a0:	46bd      	mov	sp, r7
 80074a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a6:	bf00      	nop
 80074a8:	080095c4 	.word	0x080095c4
 80074ac:	00f42400 	.word	0x00f42400

080074b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00a      	beq.n	8007562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01a      	beq.n	80075c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ae:	d10a      	bne.n	80075c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  }
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b098      	sub	sp, #96	@ 0x60
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007604:	f7fa f9fc 	bl	8001a00 <HAL_GetTick>
 8007608:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b08      	cmp	r3, #8
 8007616:	d12f      	bne.n	8007678 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007620:	2200      	movs	r2, #0
 8007622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f88e 	bl	8007748 <UART_WaitOnFlagUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d022      	beq.n	8007678 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007646:	653b      	str	r3, [r7, #80]	@ 0x50
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007650:	647b      	str	r3, [r7, #68]	@ 0x44
 8007652:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800765e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e063      	b.n	8007740 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b04      	cmp	r3, #4
 8007684:	d149      	bne.n	800771a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007686:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768e:	2200      	movs	r2, #0
 8007690:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f857 	bl	8007748 <UART_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d03c      	beq.n	800771a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	623b      	str	r3, [r7, #32]
   return(result);
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076be:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e6      	bne.n	80076a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f2:	61fa      	str	r2, [r7, #28]
 80076f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	69b9      	ldr	r1, [r7, #24]
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e5      	bne.n	80076d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e012      	b.n	8007740 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3758      	adds	r7, #88	@ 0x58
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007758:	e04f      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d04b      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007762:	f7fa f94d 	bl	8001a00 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <UART_WaitOnFlagUntilTimeout+0x30>
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e04e      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d037      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b80      	cmp	r3, #128	@ 0x80
 800778e:	d034      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b40      	cmp	r3, #64	@ 0x40
 8007794:	d031      	beq.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d110      	bne.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2208      	movs	r2, #8
 80077aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f838 	bl	8007822 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2208      	movs	r2, #8
 80077b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e029      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077d4:	d111      	bne.n	80077fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f81e 	bl	8007822 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e00f      	b.n	800781a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4013      	ands	r3, r2
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	bf0c      	ite	eq
 800780a:	2301      	moveq	r3, #1
 800780c:	2300      	movne	r3, #0
 800780e:	b2db      	uxtb	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	429a      	cmp	r2, r3
 8007816:	d0a0      	beq.n	800775a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007822:	b480      	push	{r7}
 8007824:	b095      	sub	sp, #84	@ 0x54
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007848:	643b      	str	r3, [r7, #64]	@ 0x40
 800784a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800784e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e6      	bne.n	800782a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	61fb      	str	r3, [r7, #28]
   return(result);
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007872:	f023 0301 	bic.w	r3, r3, #1
 8007876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3308      	adds	r3, #8
 800787e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e3      	bne.n	800785c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d118      	bne.n	80078ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f023 0310 	bic.w	r3, r3, #16
 80078b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6979      	ldr	r1, [r7, #20]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	613b      	str	r3, [r7, #16]
   return(result);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e6      	bne.n	800789c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078e2:	bf00      	nop
 80078e4:	3754      	adds	r7, #84	@ 0x54
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f7ff fb91 	bl	8007034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b088      	sub	sp, #32
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6979      	ldr	r1, [r7, #20]
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	613b      	str	r3, [r7, #16]
   return(result);
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e6      	bne.n	8007922 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fb5c 	bl	8007020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007968:	bf00      	nop
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80079be:	2302      	movs	r3, #2
 80079c0:	e027      	b.n	8007a12 <HAL_UARTEx_DisableFifoMode+0x66>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2224      	movs	r2, #36	@ 0x24
 80079ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e02d      	b.n	8007a92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2224      	movs	r2, #36	@ 0x24
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f850 	bl	8007b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e02d      	b.n	8007b0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2224      	movs	r2, #36	@ 0x24
 8007abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f812 	bl	8007b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d108      	bne.n	8007b3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b38:	e031      	b.n	8007b9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b3e:	2308      	movs	r3, #8
 8007b40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	0e5b      	lsrs	r3, r3, #25
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	0f5b      	lsrs	r3, r3, #29
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	7b3a      	ldrb	r2, [r7, #12]
 8007b66:	4911      	ldr	r1, [pc, #68]	@ (8007bac <UARTEx_SetNbDataToProcess+0x94>)
 8007b68:	5c8a      	ldrb	r2, [r1, r2]
 8007b6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b6e:	7b3a      	ldrb	r2, [r7, #12]
 8007b70:	490f      	ldr	r1, [pc, #60]	@ (8007bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	7b7a      	ldrb	r2, [r7, #13]
 8007b84:	4909      	ldr	r1, [pc, #36]	@ (8007bac <UARTEx_SetNbDataToProcess+0x94>)
 8007b86:	5c8a      	ldrb	r2, [r1, r2]
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b8c:	7b7a      	ldrb	r2, [r7, #13]
 8007b8e:	4908      	ldr	r1, [pc, #32]	@ (8007bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8007b90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	080095dc 	.word	0x080095dc
 8007bb0:	080095e4 	.word	0x080095e4

08007bb4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007bfc <OTP_Read+0x48>)
 8007bc0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007bc2:	e002      	b.n	8007bca <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3b08      	subs	r3, #8
 8007bc8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	79fa      	ldrb	r2, [r7, #7]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d003      	beq.n	8007bde <OTP_Read+0x2a>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a09      	ldr	r2, [pc, #36]	@ (8007c00 <OTP_Read+0x4c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d1f2      	bne.n	8007bc4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3307      	adds	r3, #7
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	79fa      	ldrb	r2, [r7, #7]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d001      	beq.n	8007bee <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	1fff73f8 	.word	0x1fff73f8
 8007c00:	1fff7000 	.word	0x1fff7000

08007c04 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c16:	b672      	cpsid	i
}
 8007c18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d102      	bne.n	8007c2a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
 8007c28:	e001      	b.n	8007c2e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f383 8810 	msr	PRIMASK, r3
}
 8007c38:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c52:	f3ef 8310 	mrs	r3, PRIMASK
 8007c56:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c58:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c5c:	b672      	cpsid	i
}
 8007c5e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f383 8810 	msr	PRIMASK, r3
}
 8007c86:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007c88:	bf00      	nop
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ca6:	b672      	cpsid	i
}
 8007ca8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6852      	ldr	r2, [r2, #4]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f383 8810 	msr	PRIMASK, r3
}
 8007cc8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007cca:	bf00      	nop
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ce8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cea:	b672      	cpsid	i
}
 8007cec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ffca 	bl	8007c94 <LST_remove_node>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f383 8810 	msr	PRIMASK, r3
}
 8007d0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007d0c:	bf00      	nop
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007d1a:	e01c      	b.n	8007d56 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007d1c:	1d3b      	adds	r3, r7, #4
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4812      	ldr	r0, [pc, #72]	@ (8007d6c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007d22:	f7ff ffd8 	bl	8007cd6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	7a5b      	ldrb	r3, [r3, #9]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d003      	beq.n	8007d36 <HW_IPCC_BLE_RxEvtNot+0x22>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7a5b      	ldrb	r3, [r3, #9]
 8007d32:	2b0e      	cmp	r3, #14
 8007d34:	d105      	bne.n	8007d42 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	2002      	movs	r0, #2
 8007d3c:	f000 f8d2 	bl	8007ee4 <OutputDbgTrace>
 8007d40:	e004      	b.n	8007d4c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4619      	mov	r1, r3
 8007d46:	2003      	movs	r0, #3
 8007d48:	f000 f8cc 	bl	8007ee4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007d4c:	4b08      	ldr	r3, [pc, #32]	@ (8007d70 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007d56:	4805      	ldr	r0, [pc, #20]	@ (8007d6c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007d58:	f7ff ff54 	bl	8007c04 <LST_is_empty>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0dc      	beq.n	8007d1c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007d62:	bf00      	nop
}
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	200300c8 	.word	0x200300c8
 8007d70:	200003a4 	.word	0x200003a4

08007d74 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007d78:	4b02      	ldr	r3, [pc, #8]	@ (8007d84 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4798      	blx	r3

  return;
 8007d7e:	bf00      	nop
}
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	200003a8 	.word	0x200003a8

08007d88 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007d8c:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4619      	mov	r1, r3
 8007d94:	2005      	movs	r0, #5
 8007d96:	f000 f8a5 	bl	8007ee4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007d9a:	4b05      	ldr	r3, [pc, #20]	@ (8007db0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a03      	ldr	r2, [pc, #12]	@ (8007dac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007da0:	68d2      	ldr	r2, [r2, #12]
 8007da2:	6812      	ldr	r2, [r2, #0]
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3

  return;
 8007da8:	bf00      	nop
}
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20030000 	.word	0x20030000
 8007db0:	200003ac 	.word	0x200003ac

08007db4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007dba:	e00e      	b.n	8007dda <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007dbc:	1d3b      	adds	r3, r7, #4
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	480b      	ldr	r0, [pc, #44]	@ (8007df0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007dc2:	f7ff ff88 	bl	8007cd6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	2006      	movs	r0, #6
 8007dcc:	f000 f88a 	bl	8007ee4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007dd0:	4b08      	ldr	r3, [pc, #32]	@ (8007df4 <HW_IPCC_SYS_EvtNot+0x40>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007dda:	4805      	ldr	r0, [pc, #20]	@ (8007df0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007ddc:	f7ff ff12 	bl	8007c04 <LST_is_empty>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ea      	beq.n	8007dbc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007de6:	bf00      	nop
}
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200300d0 	.word	0x200300d0
 8007df4:	200003b0 	.word	0x200003b0

08007df8 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:
  return;
}

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8007dfc:	4b03      	ldr	r3, [pc, #12]	@ (8007e0c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f8c4 	bl	8007f90 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8007e08:	bf00      	nop
}
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20030000 	.word	0x20030000

08007e10 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8007e14:	4b03      	ldr	r3, [pc, #12]	@ (8007e24 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f8c2 	bl	8007fa4 <TL_ZIGBEE_NotReceived>

  return;
 8007e20:	bf00      	nop
}
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20030000 	.word	0x20030000

08007e28 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:
  return;
}

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8007e2c:	4b03      	ldr	r3, [pc, #12]	@ (8007e3c <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f8de 	bl	8007ff4 <TL_ZIGBEE_M0RequestReceived>

  return;
 8007e38:	bf00      	nop
}
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20030000 	.word	0x20030000

08007e40 <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4807      	ldr	r0, [pc, #28]	@ (8007e68 <TL_MM_EvtDone+0x28>)
 8007e4c:	f7ff fefc 	bl	8007c48 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	2000      	movs	r0, #0
 8007e54:	f000 f846 	bl	8007ee4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007e58:	4804      	ldr	r0, [pc, #16]	@ (8007e6c <TL_MM_EvtDone+0x2c>)
 8007e5a:	f000 fa51 	bl	8008300 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007e5e:	bf00      	nop
}
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000039c 	.word	0x2000039c
 8007e6c:	08007e71 	.word	0x08007e71

08007e70 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007e76:	e00c      	b.n	8007e92 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007e78:	1d3b      	adds	r3, r7, #4
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	480a      	ldr	r0, [pc, #40]	@ (8007ea8 <SendFreeBuf+0x38>)
 8007e7e:	f7ff ff2a 	bl	8007cd6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007e82:	4b0a      	ldr	r3, [pc, #40]	@ (8007eac <SendFreeBuf+0x3c>)
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fedb 	bl	8007c48 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007e92:	4805      	ldr	r0, [pc, #20]	@ (8007ea8 <SendFreeBuf+0x38>)
 8007e94:	f7ff feb6 	bl	8007c04 <LST_is_empty>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0ec      	beq.n	8007e78 <SendFreeBuf+0x8>
  }

  return;
 8007e9e:	bf00      	nop
}
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	2000039c 	.word	0x2000039c
 8007eac:	20030000 	.word	0x20030000

08007eb0 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007eb6:	e008      	b.n	8007eca <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4808      	ldr	r0, [pc, #32]	@ (8007ee0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007ebe:	f7ff ff0a 	bl	8007cd6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7f8 fb9f 	bl	8000608 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007eca:	4805      	ldr	r0, [pc, #20]	@ (8007ee0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007ecc:	f7ff fe9a 	bl	8007c04 <LST_is_empty>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007ed6:	bf00      	nop
}
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	200300c0 	.word	0x200300c0

08007ee4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b06      	cmp	r3, #6
 8007ef4:	d845      	bhi.n	8007f82 <OutputDbgTrace+0x9e>
 8007ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8007efc <OutputDbgTrace+0x18>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f43 	.word	0x08007f43
 8007f08:	08007f57 	.word	0x08007f57
 8007f0c:	08007f63 	.word	0x08007f63
 8007f10:	08007f69 	.word	0x08007f69
 8007f14:	08007f77 	.word	0x08007f77
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7a5b      	ldrb	r3, [r3, #9]
 8007f20:	2bff      	cmp	r3, #255	@ 0xff
 8007f22:	d005      	beq.n	8007f30 <OutputDbgTrace+0x4c>
 8007f24:	2bff      	cmp	r3, #255	@ 0xff
 8007f26:	dc05      	bgt.n	8007f34 <OutputDbgTrace+0x50>
 8007f28:	2b0e      	cmp	r3, #14
 8007f2a:	d005      	beq.n	8007f38 <OutputDbgTrace+0x54>
 8007f2c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007f2e:	e001      	b.n	8007f34 <OutputDbgTrace+0x50>
          break;
 8007f30:	bf00      	nop
 8007f32:	e027      	b.n	8007f84 <OutputDbgTrace+0xa0>
          break;
 8007f34:	bf00      	nop
 8007f36:	e025      	b.n	8007f84 <OutputDbgTrace+0xa0>
          break;
 8007f38:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007f3a:	e023      	b.n	8007f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007f40:	e020      	b.n	8007f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	7a5b      	ldrb	r3, [r3, #9]
 8007f4a:	2b0e      	cmp	r3, #14
 8007f4c:	d001      	beq.n	8007f52 <OutputDbgTrace+0x6e>
 8007f4e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007f50:	e000      	b.n	8007f54 <OutputDbgTrace+0x70>
          break;
 8007f52:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007f54:	e016      	b.n	8007f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	7a5b      	ldrb	r3, [r3, #9]
 8007f5e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007f60:	e010      	b.n	8007f84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007f66:	e00d      	b.n	8007f84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	7a5b      	ldrb	r3, [r3, #9]
 8007f70:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007f72:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007f74:	e006      	b.n	8007f84 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	7a5b      	ldrb	r3, [r3, #9]
 8007f7e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007f80:	e000      	b.n	8007f84 <OutputDbgTrace+0xa0>

    default:
      break;
 8007f82:	bf00      	nop
  }

  return;
 8007f84:	bf00      	nop
}
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8007f98:	f000 f814 	bl	8007fc4 <Receive_Ack_From_M0>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8007fac:	4a04      	ldr	r2, [pc, #16]	@ (8007fc0 <TL_ZIGBEE_NotReceived+0x1c>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8007fb2:	f000 f80f 	bl	8007fd4 <Receive_Notification_From_M0>
}
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	200003b4 	.word	0x200003b4

08007fc4 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8007fc8:	2002      	movs	r0, #2
 8007fca:	f000 fa07 	bl	80083dc <UTIL_SEQ_SetEvt>
}
 8007fce:	bf00      	nop
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 8007fd8:	4b05      	ldr	r3, [pc, #20]	@ (8007ff0 <Receive_Notification_From_M0+0x1c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a04      	ldr	r2, [pc, #16]	@ (8007ff0 <Receive_Notification_From_M0+0x1c>)
 8007fe0:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	f000 f9cd 	bl	8008384 <UTIL_SEQ_SetTask>
}
 8007fea:	bf00      	nop
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	200003bc 	.word	0x200003bc

08007ff4 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8007ffc:	4a07      	ldr	r2, [pc, #28]	@ (800801c <TL_ZIGBEE_M0RequestReceived+0x28>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 8008002:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3301      	adds	r3, #1
 8008008:	4a05      	ldr	r2, [pc, #20]	@ (8008020 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800800a:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800800c:	2100      	movs	r1, #0
 800800e:	2002      	movs	r0, #2
 8008010:	f000 f9b8 	bl	8008384 <UTIL_SEQ_SetTask>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200003b8 	.word	0x200003b8
 8008020:	200003c0 	.word	0x200003c0

08008024 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	041b      	lsls	r3, r3, #16
 8008036:	43db      	mvns	r3, r3
 8008038:	401a      	ands	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	605a      	str	r2, [r3, #4]
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	605a      	str	r2, [r3, #4]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	041a      	lsls	r2, r3, #16
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	609a      	str	r2, [r3, #8]
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	4013      	ands	r3, r2
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d101      	bne.n	80080e6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69da      	ldr	r2, [r3, #28]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	4013      	ands	r3, r2
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d101      	bne.n	8008110 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008124:	2102      	movs	r1, #2
 8008126:	4828      	ldr	r0, [pc, #160]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008128:	f7ff ffe4 	bl	80080f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <HW_IPCC_Rx_Handler+0x24>
 8008132:	4b25      	ldr	r3, [pc, #148]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800813e:	f000 f8af 	bl	80082a0 <HW_IPCC_SYS_EvtHandler>
 8008142:	e03e      	b.n	80081c2 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 8008144:	2104      	movs	r1, #4
 8008146:	4820      	ldr	r0, [pc, #128]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008148:	f7ff ffd4 	bl	80080f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <HW_IPCC_Rx_Handler+0x44>
 8008152:	4b1d      	ldr	r3, [pc, #116]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800815e:	f000 f8b7 	bl	80082d0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 8008162:	e02e      	b.n	80081c2 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 8008164:	2110      	movs	r1, #16
 8008166:	4818      	ldr	r0, [pc, #96]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008168:	f7ff ffc4 	bl	80080f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d008      	beq.n	8008184 <HW_IPCC_Rx_Handler+0x64>
 8008172:	4b15      	ldr	r3, [pc, #84]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800817e:	f000 f8b3 	bl	80082e8 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 8008182:	e01e      	b.n	80081c2 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008184:	2101      	movs	r1, #1
 8008186:	4810      	ldr	r0, [pc, #64]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008188:	f7ff ffb4 	bl	80080f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d008      	beq.n	80081a4 <HW_IPCC_Rx_Handler+0x84>
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800819e:	f000 f85b 	bl	8008258 <HW_IPCC_BLE_EvtHandler>
 80081a2:	e00e      	b.n	80081c2 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80081a4:	2108      	movs	r1, #8
 80081a6:	4808      	ldr	r0, [pc, #32]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 80081a8:	f7ff ffa4 	bl	80080f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HW_IPCC_Rx_Handler+0xa4>
 80081b2:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <HW_IPCC_Rx_Handler+0xa8>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 80081be:	f000 f8d5 	bl	800836c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
}
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	58000c00 	.word	0x58000c00

080081cc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80081d0:	2102      	movs	r1, #2
 80081d2:	4820      	ldr	r0, [pc, #128]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 80081d4:	f7ff ff79 	bl	80080ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <HW_IPCC_Tx_Handler+0x22>
 80081de:	4b1d      	ldr	r3, [pc, #116]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80081ea:	f000 f84d 	bl	8008288 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 80081ee:	2104      	movs	r1, #4
 80081f0:	4818      	ldr	r0, [pc, #96]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 80081f2:	f7ff ff6a 	bl	80080ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d108      	bne.n	800820e <HW_IPCC_Tx_Handler+0x42>
 80081fc:	4b15      	ldr	r3, [pc, #84]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 8008208:	f000 f856 	bl	80082b8 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 800820c:	e01e      	b.n	800824c <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800820e:	2108      	movs	r1, #8
 8008210:	4810      	ldr	r0, [pc, #64]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 8008212:	f7ff ff5a 	bl	80080ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d108      	bne.n	800822e <HW_IPCC_Tx_Handler+0x62>
 800821c:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008228:	f000 f88c 	bl	8008344 <HW_IPCC_MM_FreeBufHandler>
 800822c:	e00e      	b.n	800824c <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800822e:	2120      	movs	r1, #32
 8008230:	4808      	ldr	r0, [pc, #32]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 8008232:	f7ff ff4a 	bl	80080ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d108      	bne.n	800824e <HW_IPCC_Tx_Handler+0x82>
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <HW_IPCC_Tx_Handler+0x88>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d102      	bne.n	800824e <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008248:	f000 f812 	bl	8008270 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800824c:	bf00      	nop
 800824e:	bf00      	nop
}
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	58000c00 	.word	0x58000c00

08008258 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800825c:	f7ff fd5a 	bl	8007d14 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008260:	2101      	movs	r1, #1
 8008262:	4802      	ldr	r0, [pc, #8]	@ (800826c <HW_IPCC_BLE_EvtHandler+0x14>)
 8008264:	f7ff ff14 	bl	8008090 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008268:	bf00      	nop
}
 800826a:	bd80      	pop	{r7, pc}
 800826c:	58000c00 	.word	0x58000c00

08008270 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008274:	2120      	movs	r1, #32
 8008276:	4803      	ldr	r0, [pc, #12]	@ (8008284 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008278:	f7ff fee7 	bl	800804a <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800827c:	f7ff fd7a 	bl	8007d74 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008280:	bf00      	nop
}
 8008282:	bd80      	pop	{r7, pc}
 8008284:	58000c00 	.word	0x58000c00

08008288 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800828c:	2102      	movs	r1, #2
 800828e:	4803      	ldr	r0, [pc, #12]	@ (800829c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008290:	f7ff fedb 	bl	800804a <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008294:	f7ff fd78 	bl	8007d88 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008298:	bf00      	nop
}
 800829a:	bd80      	pop	{r7, pc}
 800829c:	58000c00 	.word	0x58000c00

080082a0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80082a4:	f7ff fd86 	bl	8007db4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80082a8:	2102      	movs	r1, #2
 80082aa:	4802      	ldr	r0, [pc, #8]	@ (80082b4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80082ac:	f7ff fef0 	bl	8008090 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80082b0:	bf00      	nop
}
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	58000c00 	.word	0x58000c00

080082b8 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

  return;
}

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 80082bc:	2104      	movs	r1, #4
 80082be:	4803      	ldr	r0, [pc, #12]	@ (80082cc <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 80082c0:	f7ff fec3 	bl	800804a <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 80082c4:	f7ff fd98 	bl	8007df8 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 80082c8:	bf00      	nop
}
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	58000c00 	.word	0x58000c00

080082d0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 80082d4:	2104      	movs	r1, #4
 80082d6:	4803      	ldr	r0, [pc, #12]	@ (80082e4 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 80082d8:	f7ff fec9 	bl	800806e <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 80082dc:	f7ff fd98 	bl	8007e10 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 80082e0:	bf00      	nop
}
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	58000c00 	.word	0x58000c00

080082e8 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80082ec:	2110      	movs	r1, #16
 80082ee:	4803      	ldr	r0, [pc, #12]	@ (80082fc <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 80082f0:	f7ff febd 	bl	800806e <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 80082f4:	f7ff fd98 	bl	8007e28 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 80082f8:	bf00      	nop
}
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58000c00 	.word	0x58000c00

08008300 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008308:	2108      	movs	r1, #8
 800830a:	480c      	ldr	r0, [pc, #48]	@ (800833c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800830c:	f7ff fedd 	bl	80080ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008316:	4a0a      	ldr	r2, [pc, #40]	@ (8008340 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800831c:	2108      	movs	r1, #8
 800831e:	4807      	ldr	r0, [pc, #28]	@ (800833c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008320:	f7ff fe80 	bl	8008024 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008324:	e006      	b.n	8008334 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800832a:	2108      	movs	r1, #8
 800832c:	4803      	ldr	r0, [pc, #12]	@ (800833c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800832e:	f7ff febd 	bl	80080ac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008332:	bf00      	nop
}
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	58000c00 	.word	0x58000c00
 8008340:	200003c4 	.word	0x200003c4

08008344 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008348:	2108      	movs	r1, #8
 800834a:	4806      	ldr	r0, [pc, #24]	@ (8008364 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800834c:	f7ff fe7d 	bl	800804a <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008350:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008356:	2108      	movs	r1, #8
 8008358:	4802      	ldr	r0, [pc, #8]	@ (8008364 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800835a:	f7ff fea7 	bl	80080ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800835e:	bf00      	nop
}
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	58000c00 	.word	0x58000c00
 8008368:	200003c4 	.word	0x200003c4

0800836c <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008370:	f7ff fd9e 	bl	8007eb0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008374:	2108      	movs	r1, #8
 8008376:	4802      	ldr	r0, [pc, #8]	@ (8008380 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008378:	f7ff fe8a 	bl	8008090 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800837c:	bf00      	nop
}
 800837e:	bd80      	pop	{r7, pc}
 8008380:	58000c00 	.word	0x58000c00

08008384 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800838e:	f3ef 8310 	mrs	r3, PRIMASK
 8008392:	60fb      	str	r3, [r7, #12]
  return(result);
 8008394:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008396:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008398:	b672      	cpsid	i
}
 800839a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800839c:	4b0d      	ldr	r3, [pc, #52]	@ (80083d4 <UTIL_SEQ_SetTask+0x50>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	4a0b      	ldr	r2, [pc, #44]	@ (80083d4 <UTIL_SEQ_SetTask+0x50>)
 80083a6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80083a8:	4a0b      	ldr	r2, [pc, #44]	@ (80083d8 <UTIL_SEQ_SetTask+0x54>)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	4908      	ldr	r1, [pc, #32]	@ (80083d8 <UTIL_SEQ_SetTask+0x54>)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80083c8:	bf00      	nop
}
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	200003c8 	.word	0x200003c8
 80083d8:	200003d0 	.word	0x200003d0

080083dc <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e4:	f3ef 8310 	mrs	r3, PRIMASK
 80083e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80083ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80083ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083ee:	b672      	cpsid	i
}
 80083f0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80083f2:	4b09      	ldr	r3, [pc, #36]	@ (8008418 <UTIL_SEQ_SetEvt+0x3c>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	4a07      	ldr	r2, [pc, #28]	@ (8008418 <UTIL_SEQ_SetEvt+0x3c>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f383 8810 	msr	PRIMASK, r3
}
 8008408:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800840a:	bf00      	nop
}
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	200003cc 	.word	0x200003cc

0800841c <malloc>:
 800841c:	4b02      	ldr	r3, [pc, #8]	@ (8008428 <malloc+0xc>)
 800841e:	4601      	mov	r1, r0
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	f000 b825 	b.w	8008470 <_malloc_r>
 8008426:	bf00      	nop
 8008428:	20000020 	.word	0x20000020

0800842c <sbrk_aligned>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4e0f      	ldr	r6, [pc, #60]	@ (800846c <sbrk_aligned+0x40>)
 8008430:	460c      	mov	r4, r1
 8008432:	6831      	ldr	r1, [r6, #0]
 8008434:	4605      	mov	r5, r0
 8008436:	b911      	cbnz	r1, 800843e <sbrk_aligned+0x12>
 8008438:	f000 fba0 	bl	8008b7c <_sbrk_r>
 800843c:	6030      	str	r0, [r6, #0]
 800843e:	4621      	mov	r1, r4
 8008440:	4628      	mov	r0, r5
 8008442:	f000 fb9b 	bl	8008b7c <_sbrk_r>
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	d103      	bne.n	8008452 <sbrk_aligned+0x26>
 800844a:	f04f 34ff 	mov.w	r4, #4294967295
 800844e:	4620      	mov	r0, r4
 8008450:	bd70      	pop	{r4, r5, r6, pc}
 8008452:	1cc4      	adds	r4, r0, #3
 8008454:	f024 0403 	bic.w	r4, r4, #3
 8008458:	42a0      	cmp	r0, r4
 800845a:	d0f8      	beq.n	800844e <sbrk_aligned+0x22>
 800845c:	1a21      	subs	r1, r4, r0
 800845e:	4628      	mov	r0, r5
 8008460:	f000 fb8c 	bl	8008b7c <_sbrk_r>
 8008464:	3001      	adds	r0, #1
 8008466:	d1f2      	bne.n	800844e <sbrk_aligned+0x22>
 8008468:	e7ef      	b.n	800844a <sbrk_aligned+0x1e>
 800846a:	bf00      	nop
 800846c:	200003e0 	.word	0x200003e0

08008470 <_malloc_r>:
 8008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008474:	1ccd      	adds	r5, r1, #3
 8008476:	f025 0503 	bic.w	r5, r5, #3
 800847a:	3508      	adds	r5, #8
 800847c:	2d0c      	cmp	r5, #12
 800847e:	bf38      	it	cc
 8008480:	250c      	movcc	r5, #12
 8008482:	2d00      	cmp	r5, #0
 8008484:	4606      	mov	r6, r0
 8008486:	db01      	blt.n	800848c <_malloc_r+0x1c>
 8008488:	42a9      	cmp	r1, r5
 800848a:	d904      	bls.n	8008496 <_malloc_r+0x26>
 800848c:	230c      	movs	r3, #12
 800848e:	6033      	str	r3, [r6, #0]
 8008490:	2000      	movs	r0, #0
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800856c <_malloc_r+0xfc>
 800849a:	f000 f869 	bl	8008570 <__malloc_lock>
 800849e:	f8d8 3000 	ldr.w	r3, [r8]
 80084a2:	461c      	mov	r4, r3
 80084a4:	bb44      	cbnz	r4, 80084f8 <_malloc_r+0x88>
 80084a6:	4629      	mov	r1, r5
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff ffbf 	bl	800842c <sbrk_aligned>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	4604      	mov	r4, r0
 80084b2:	d158      	bne.n	8008566 <_malloc_r+0xf6>
 80084b4:	f8d8 4000 	ldr.w	r4, [r8]
 80084b8:	4627      	mov	r7, r4
 80084ba:	2f00      	cmp	r7, #0
 80084bc:	d143      	bne.n	8008546 <_malloc_r+0xd6>
 80084be:	2c00      	cmp	r4, #0
 80084c0:	d04b      	beq.n	800855a <_malloc_r+0xea>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	4639      	mov	r1, r7
 80084c6:	4630      	mov	r0, r6
 80084c8:	eb04 0903 	add.w	r9, r4, r3
 80084cc:	f000 fb56 	bl	8008b7c <_sbrk_r>
 80084d0:	4581      	cmp	r9, r0
 80084d2:	d142      	bne.n	800855a <_malloc_r+0xea>
 80084d4:	6821      	ldr	r1, [r4, #0]
 80084d6:	1a6d      	subs	r5, r5, r1
 80084d8:	4629      	mov	r1, r5
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ffa6 	bl	800842c <sbrk_aligned>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d03a      	beq.n	800855a <_malloc_r+0xea>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	442b      	add	r3, r5
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	f8d8 3000 	ldr.w	r3, [r8]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	bb62      	cbnz	r2, 800854c <_malloc_r+0xdc>
 80084f2:	f8c8 7000 	str.w	r7, [r8]
 80084f6:	e00f      	b.n	8008518 <_malloc_r+0xa8>
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	1b52      	subs	r2, r2, r5
 80084fc:	d420      	bmi.n	8008540 <_malloc_r+0xd0>
 80084fe:	2a0b      	cmp	r2, #11
 8008500:	d917      	bls.n	8008532 <_malloc_r+0xc2>
 8008502:	1961      	adds	r1, r4, r5
 8008504:	42a3      	cmp	r3, r4
 8008506:	6025      	str	r5, [r4, #0]
 8008508:	bf18      	it	ne
 800850a:	6059      	strne	r1, [r3, #4]
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	bf08      	it	eq
 8008510:	f8c8 1000 	streq.w	r1, [r8]
 8008514:	5162      	str	r2, [r4, r5]
 8008516:	604b      	str	r3, [r1, #4]
 8008518:	4630      	mov	r0, r6
 800851a:	f000 f82f 	bl	800857c <__malloc_unlock>
 800851e:	f104 000b 	add.w	r0, r4, #11
 8008522:	1d23      	adds	r3, r4, #4
 8008524:	f020 0007 	bic.w	r0, r0, #7
 8008528:	1ac2      	subs	r2, r0, r3
 800852a:	bf1c      	itt	ne
 800852c:	1a1b      	subne	r3, r3, r0
 800852e:	50a3      	strne	r3, [r4, r2]
 8008530:	e7af      	b.n	8008492 <_malloc_r+0x22>
 8008532:	6862      	ldr	r2, [r4, #4]
 8008534:	42a3      	cmp	r3, r4
 8008536:	bf0c      	ite	eq
 8008538:	f8c8 2000 	streq.w	r2, [r8]
 800853c:	605a      	strne	r2, [r3, #4]
 800853e:	e7eb      	b.n	8008518 <_malloc_r+0xa8>
 8008540:	4623      	mov	r3, r4
 8008542:	6864      	ldr	r4, [r4, #4]
 8008544:	e7ae      	b.n	80084a4 <_malloc_r+0x34>
 8008546:	463c      	mov	r4, r7
 8008548:	687f      	ldr	r7, [r7, #4]
 800854a:	e7b6      	b.n	80084ba <_malloc_r+0x4a>
 800854c:	461a      	mov	r2, r3
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	42a3      	cmp	r3, r4
 8008552:	d1fb      	bne.n	800854c <_malloc_r+0xdc>
 8008554:	2300      	movs	r3, #0
 8008556:	6053      	str	r3, [r2, #4]
 8008558:	e7de      	b.n	8008518 <_malloc_r+0xa8>
 800855a:	230c      	movs	r3, #12
 800855c:	6033      	str	r3, [r6, #0]
 800855e:	4630      	mov	r0, r6
 8008560:	f000 f80c 	bl	800857c <__malloc_unlock>
 8008564:	e794      	b.n	8008490 <_malloc_r+0x20>
 8008566:	6005      	str	r5, [r0, #0]
 8008568:	e7d6      	b.n	8008518 <_malloc_r+0xa8>
 800856a:	bf00      	nop
 800856c:	200003e4 	.word	0x200003e4

08008570 <__malloc_lock>:
 8008570:	4801      	ldr	r0, [pc, #4]	@ (8008578 <__malloc_lock+0x8>)
 8008572:	f000 bb50 	b.w	8008c16 <__retarget_lock_acquire_recursive>
 8008576:	bf00      	nop
 8008578:	20000528 	.word	0x20000528

0800857c <__malloc_unlock>:
 800857c:	4801      	ldr	r0, [pc, #4]	@ (8008584 <__malloc_unlock+0x8>)
 800857e:	f000 bb4b 	b.w	8008c18 <__retarget_lock_release_recursive>
 8008582:	bf00      	nop
 8008584:	20000528 	.word	0x20000528

08008588 <std>:
 8008588:	2300      	movs	r3, #0
 800858a:	b510      	push	{r4, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	e9c0 3300 	strd	r3, r3, [r0]
 8008592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008596:	6083      	str	r3, [r0, #8]
 8008598:	8181      	strh	r1, [r0, #12]
 800859a:	6643      	str	r3, [r0, #100]	@ 0x64
 800859c:	81c2      	strh	r2, [r0, #14]
 800859e:	6183      	str	r3, [r0, #24]
 80085a0:	4619      	mov	r1, r3
 80085a2:	2208      	movs	r2, #8
 80085a4:	305c      	adds	r0, #92	@ 0x5c
 80085a6:	f000 faad 	bl	8008b04 <memset>
 80085aa:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <std+0x58>)
 80085ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <std+0x5c>)
 80085b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <std+0x60>)
 80085b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085b6:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <std+0x64>)
 80085b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80085ba:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <std+0x68>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	429c      	cmp	r4, r3
 80085c0:	d006      	beq.n	80085d0 <std+0x48>
 80085c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085c6:	4294      	cmp	r4, r2
 80085c8:	d002      	beq.n	80085d0 <std+0x48>
 80085ca:	33d0      	adds	r3, #208	@ 0xd0
 80085cc:	429c      	cmp	r4, r3
 80085ce:	d105      	bne.n	80085dc <std+0x54>
 80085d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d8:	f000 bb1c 	b.w	8008c14 <__retarget_lock_init_recursive>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	bf00      	nop
 80085e0:	08008955 	.word	0x08008955
 80085e4:	08008977 	.word	0x08008977
 80085e8:	080089af 	.word	0x080089af
 80085ec:	080089d3 	.word	0x080089d3
 80085f0:	200003e8 	.word	0x200003e8

080085f4 <stdio_exit_handler>:
 80085f4:	4a02      	ldr	r2, [pc, #8]	@ (8008600 <stdio_exit_handler+0xc>)
 80085f6:	4903      	ldr	r1, [pc, #12]	@ (8008604 <stdio_exit_handler+0x10>)
 80085f8:	4803      	ldr	r0, [pc, #12]	@ (8008608 <stdio_exit_handler+0x14>)
 80085fa:	f000 b869 	b.w	80086d0 <_fwalk_sglue>
 80085fe:	bf00      	nop
 8008600:	20000014 	.word	0x20000014
 8008604:	08009359 	.word	0x08009359
 8008608:	20000024 	.word	0x20000024

0800860c <cleanup_stdio>:
 800860c:	6841      	ldr	r1, [r0, #4]
 800860e:	4b0c      	ldr	r3, [pc, #48]	@ (8008640 <cleanup_stdio+0x34>)
 8008610:	4299      	cmp	r1, r3
 8008612:	b510      	push	{r4, lr}
 8008614:	4604      	mov	r4, r0
 8008616:	d001      	beq.n	800861c <cleanup_stdio+0x10>
 8008618:	f000 fe9e 	bl	8009358 <_fflush_r>
 800861c:	68a1      	ldr	r1, [r4, #8]
 800861e:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <cleanup_stdio+0x38>)
 8008620:	4299      	cmp	r1, r3
 8008622:	d002      	beq.n	800862a <cleanup_stdio+0x1e>
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fe97 	bl	8009358 <_fflush_r>
 800862a:	68e1      	ldr	r1, [r4, #12]
 800862c:	4b06      	ldr	r3, [pc, #24]	@ (8008648 <cleanup_stdio+0x3c>)
 800862e:	4299      	cmp	r1, r3
 8008630:	d004      	beq.n	800863c <cleanup_stdio+0x30>
 8008632:	4620      	mov	r0, r4
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f000 be8e 	b.w	8009358 <_fflush_r>
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	200003e8 	.word	0x200003e8
 8008644:	20000450 	.word	0x20000450
 8008648:	200004b8 	.word	0x200004b8

0800864c <global_stdio_init.part.0>:
 800864c:	b510      	push	{r4, lr}
 800864e:	4b0b      	ldr	r3, [pc, #44]	@ (800867c <global_stdio_init.part.0+0x30>)
 8008650:	4c0b      	ldr	r4, [pc, #44]	@ (8008680 <global_stdio_init.part.0+0x34>)
 8008652:	4a0c      	ldr	r2, [pc, #48]	@ (8008684 <global_stdio_init.part.0+0x38>)
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	4620      	mov	r0, r4
 8008658:	2200      	movs	r2, #0
 800865a:	2104      	movs	r1, #4
 800865c:	f7ff ff94 	bl	8008588 <std>
 8008660:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008664:	2201      	movs	r2, #1
 8008666:	2109      	movs	r1, #9
 8008668:	f7ff ff8e 	bl	8008588 <std>
 800866c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008670:	2202      	movs	r2, #2
 8008672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008676:	2112      	movs	r1, #18
 8008678:	f7ff bf86 	b.w	8008588 <std>
 800867c:	20000520 	.word	0x20000520
 8008680:	200003e8 	.word	0x200003e8
 8008684:	080085f5 	.word	0x080085f5

08008688 <__sfp_lock_acquire>:
 8008688:	4801      	ldr	r0, [pc, #4]	@ (8008690 <__sfp_lock_acquire+0x8>)
 800868a:	f000 bac4 	b.w	8008c16 <__retarget_lock_acquire_recursive>
 800868e:	bf00      	nop
 8008690:	20000529 	.word	0x20000529

08008694 <__sfp_lock_release>:
 8008694:	4801      	ldr	r0, [pc, #4]	@ (800869c <__sfp_lock_release+0x8>)
 8008696:	f000 babf 	b.w	8008c18 <__retarget_lock_release_recursive>
 800869a:	bf00      	nop
 800869c:	20000529 	.word	0x20000529

080086a0 <__sinit>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	4604      	mov	r4, r0
 80086a4:	f7ff fff0 	bl	8008688 <__sfp_lock_acquire>
 80086a8:	6a23      	ldr	r3, [r4, #32]
 80086aa:	b11b      	cbz	r3, 80086b4 <__sinit+0x14>
 80086ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b0:	f7ff bff0 	b.w	8008694 <__sfp_lock_release>
 80086b4:	4b04      	ldr	r3, [pc, #16]	@ (80086c8 <__sinit+0x28>)
 80086b6:	6223      	str	r3, [r4, #32]
 80086b8:	4b04      	ldr	r3, [pc, #16]	@ (80086cc <__sinit+0x2c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1f5      	bne.n	80086ac <__sinit+0xc>
 80086c0:	f7ff ffc4 	bl	800864c <global_stdio_init.part.0>
 80086c4:	e7f2      	b.n	80086ac <__sinit+0xc>
 80086c6:	bf00      	nop
 80086c8:	0800860d 	.word	0x0800860d
 80086cc:	20000520 	.word	0x20000520

080086d0 <_fwalk_sglue>:
 80086d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d4:	4607      	mov	r7, r0
 80086d6:	4688      	mov	r8, r1
 80086d8:	4614      	mov	r4, r2
 80086da:	2600      	movs	r6, #0
 80086dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086e0:	f1b9 0901 	subs.w	r9, r9, #1
 80086e4:	d505      	bpl.n	80086f2 <_fwalk_sglue+0x22>
 80086e6:	6824      	ldr	r4, [r4, #0]
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	d1f7      	bne.n	80086dc <_fwalk_sglue+0xc>
 80086ec:	4630      	mov	r0, r6
 80086ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f2:	89ab      	ldrh	r3, [r5, #12]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d907      	bls.n	8008708 <_fwalk_sglue+0x38>
 80086f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086fc:	3301      	adds	r3, #1
 80086fe:	d003      	beq.n	8008708 <_fwalk_sglue+0x38>
 8008700:	4629      	mov	r1, r5
 8008702:	4638      	mov	r0, r7
 8008704:	47c0      	blx	r8
 8008706:	4306      	orrs	r6, r0
 8008708:	3568      	adds	r5, #104	@ 0x68
 800870a:	e7e9      	b.n	80086e0 <_fwalk_sglue+0x10>

0800870c <iprintf>:
 800870c:	b40f      	push	{r0, r1, r2, r3}
 800870e:	b507      	push	{r0, r1, r2, lr}
 8008710:	4906      	ldr	r1, [pc, #24]	@ (800872c <iprintf+0x20>)
 8008712:	ab04      	add	r3, sp, #16
 8008714:	6808      	ldr	r0, [r1, #0]
 8008716:	f853 2b04 	ldr.w	r2, [r3], #4
 800871a:	6881      	ldr	r1, [r0, #8]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	f000 faf1 	bl	8008d04 <_vfiprintf_r>
 8008722:	b003      	add	sp, #12
 8008724:	f85d eb04 	ldr.w	lr, [sp], #4
 8008728:	b004      	add	sp, #16
 800872a:	4770      	bx	lr
 800872c:	20000020 	.word	0x20000020

08008730 <_puts_r>:
 8008730:	6a03      	ldr	r3, [r0, #32]
 8008732:	b570      	push	{r4, r5, r6, lr}
 8008734:	6884      	ldr	r4, [r0, #8]
 8008736:	4605      	mov	r5, r0
 8008738:	460e      	mov	r6, r1
 800873a:	b90b      	cbnz	r3, 8008740 <_puts_r+0x10>
 800873c:	f7ff ffb0 	bl	80086a0 <__sinit>
 8008740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008742:	07db      	lsls	r3, r3, #31
 8008744:	d405      	bmi.n	8008752 <_puts_r+0x22>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	0598      	lsls	r0, r3, #22
 800874a:	d402      	bmi.n	8008752 <_puts_r+0x22>
 800874c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800874e:	f000 fa62 	bl	8008c16 <__retarget_lock_acquire_recursive>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	0719      	lsls	r1, r3, #28
 8008756:	d502      	bpl.n	800875e <_puts_r+0x2e>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d135      	bne.n	80087ca <_puts_r+0x9a>
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f979 	bl	8008a58 <__swsetup_r>
 8008766:	b380      	cbz	r0, 80087ca <_puts_r+0x9a>
 8008768:	f04f 35ff 	mov.w	r5, #4294967295
 800876c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800876e:	07da      	lsls	r2, r3, #31
 8008770:	d405      	bmi.n	800877e <_puts_r+0x4e>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	059b      	lsls	r3, r3, #22
 8008776:	d402      	bmi.n	800877e <_puts_r+0x4e>
 8008778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800877a:	f000 fa4d 	bl	8008c18 <__retarget_lock_release_recursive>
 800877e:	4628      	mov	r0, r5
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	2b00      	cmp	r3, #0
 8008784:	da04      	bge.n	8008790 <_puts_r+0x60>
 8008786:	69a2      	ldr	r2, [r4, #24]
 8008788:	429a      	cmp	r2, r3
 800878a:	dc17      	bgt.n	80087bc <_puts_r+0x8c>
 800878c:	290a      	cmp	r1, #10
 800878e:	d015      	beq.n	80087bc <_puts_r+0x8c>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	7019      	strb	r1, [r3, #0]
 8008798:	68a3      	ldr	r3, [r4, #8]
 800879a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800879e:	3b01      	subs	r3, #1
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	2900      	cmp	r1, #0
 80087a4:	d1ed      	bne.n	8008782 <_puts_r+0x52>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da11      	bge.n	80087ce <_puts_r+0x9e>
 80087aa:	4622      	mov	r2, r4
 80087ac:	210a      	movs	r1, #10
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 f913 	bl	80089da <__swbuf_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d0d7      	beq.n	8008768 <_puts_r+0x38>
 80087b8:	250a      	movs	r5, #10
 80087ba:	e7d7      	b.n	800876c <_puts_r+0x3c>
 80087bc:	4622      	mov	r2, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f90b 	bl	80089da <__swbuf_r>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d1e7      	bne.n	8008798 <_puts_r+0x68>
 80087c8:	e7ce      	b.n	8008768 <_puts_r+0x38>
 80087ca:	3e01      	subs	r6, #1
 80087cc:	e7e4      	b.n	8008798 <_puts_r+0x68>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	6022      	str	r2, [r4, #0]
 80087d4:	220a      	movs	r2, #10
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	e7ee      	b.n	80087b8 <_puts_r+0x88>
	...

080087dc <puts>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	@ (80087e8 <puts+0xc>)
 80087de:	4601      	mov	r1, r0
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f7ff bfa5 	b.w	8008730 <_puts_r>
 80087e6:	bf00      	nop
 80087e8:	20000020 	.word	0x20000020

080087ec <setvbuf>:
 80087ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087f0:	461d      	mov	r5, r3
 80087f2:	4b57      	ldr	r3, [pc, #348]	@ (8008950 <setvbuf+0x164>)
 80087f4:	681f      	ldr	r7, [r3, #0]
 80087f6:	4604      	mov	r4, r0
 80087f8:	460e      	mov	r6, r1
 80087fa:	4690      	mov	r8, r2
 80087fc:	b127      	cbz	r7, 8008808 <setvbuf+0x1c>
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	b913      	cbnz	r3, 8008808 <setvbuf+0x1c>
 8008802:	4638      	mov	r0, r7
 8008804:	f7ff ff4c 	bl	80086a0 <__sinit>
 8008808:	f1b8 0f02 	cmp.w	r8, #2
 800880c:	d006      	beq.n	800881c <setvbuf+0x30>
 800880e:	f1b8 0f01 	cmp.w	r8, #1
 8008812:	f200 809a 	bhi.w	800894a <setvbuf+0x15e>
 8008816:	2d00      	cmp	r5, #0
 8008818:	f2c0 8097 	blt.w	800894a <setvbuf+0x15e>
 800881c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800881e:	07d9      	lsls	r1, r3, #31
 8008820:	d405      	bmi.n	800882e <setvbuf+0x42>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	059a      	lsls	r2, r3, #22
 8008826:	d402      	bmi.n	800882e <setvbuf+0x42>
 8008828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800882a:	f000 f9f4 	bl	8008c16 <__retarget_lock_acquire_recursive>
 800882e:	4621      	mov	r1, r4
 8008830:	4638      	mov	r0, r7
 8008832:	f000 fd91 	bl	8009358 <_fflush_r>
 8008836:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008838:	b141      	cbz	r1, 800884c <setvbuf+0x60>
 800883a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800883e:	4299      	cmp	r1, r3
 8008840:	d002      	beq.n	8008848 <setvbuf+0x5c>
 8008842:	4638      	mov	r0, r7
 8008844:	f000 f9ea 	bl	8008c1c <_free_r>
 8008848:	2300      	movs	r3, #0
 800884a:	6363      	str	r3, [r4, #52]	@ 0x34
 800884c:	2300      	movs	r3, #0
 800884e:	61a3      	str	r3, [r4, #24]
 8008850:	6063      	str	r3, [r4, #4]
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	d503      	bpl.n	8008860 <setvbuf+0x74>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	4638      	mov	r0, r7
 800885c:	f000 f9de 	bl	8008c1c <_free_r>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	f1b8 0f02 	cmp.w	r8, #2
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	d061      	beq.n	8008936 <setvbuf+0x14a>
 8008872:	ab01      	add	r3, sp, #4
 8008874:	466a      	mov	r2, sp
 8008876:	4621      	mov	r1, r4
 8008878:	4638      	mov	r0, r7
 800887a:	f000 fd95 	bl	80093a8 <__swhatbuf_r>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	4318      	orrs	r0, r3
 8008882:	81a0      	strh	r0, [r4, #12]
 8008884:	bb2d      	cbnz	r5, 80088d2 <setvbuf+0xe6>
 8008886:	9d00      	ldr	r5, [sp, #0]
 8008888:	4628      	mov	r0, r5
 800888a:	f7ff fdc7 	bl	800841c <malloc>
 800888e:	4606      	mov	r6, r0
 8008890:	2800      	cmp	r0, #0
 8008892:	d152      	bne.n	800893a <setvbuf+0x14e>
 8008894:	f8dd 9000 	ldr.w	r9, [sp]
 8008898:	45a9      	cmp	r9, r5
 800889a:	d140      	bne.n	800891e <setvbuf+0x132>
 800889c:	f04f 35ff 	mov.w	r5, #4294967295
 80088a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a4:	f043 0202 	orr.w	r2, r3, #2
 80088a8:	81a2      	strh	r2, [r4, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	60a2      	str	r2, [r4, #8]
 80088ae:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80088b2:	6022      	str	r2, [r4, #0]
 80088b4:	6122      	str	r2, [r4, #16]
 80088b6:	2201      	movs	r2, #1
 80088b8:	6162      	str	r2, [r4, #20]
 80088ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088bc:	07d6      	lsls	r6, r2, #31
 80088be:	d404      	bmi.n	80088ca <setvbuf+0xde>
 80088c0:	0598      	lsls	r0, r3, #22
 80088c2:	d402      	bmi.n	80088ca <setvbuf+0xde>
 80088c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088c6:	f000 f9a7 	bl	8008c18 <__retarget_lock_release_recursive>
 80088ca:	4628      	mov	r0, r5
 80088cc:	b003      	add	sp, #12
 80088ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	d0d8      	beq.n	8008888 <setvbuf+0x9c>
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	b913      	cbnz	r3, 80088e0 <setvbuf+0xf4>
 80088da:	4638      	mov	r0, r7
 80088dc:	f7ff fee0 	bl	80086a0 <__sinit>
 80088e0:	f1b8 0f01 	cmp.w	r8, #1
 80088e4:	bf08      	it	eq
 80088e6:	89a3      	ldrheq	r3, [r4, #12]
 80088e8:	6026      	str	r6, [r4, #0]
 80088ea:	bf04      	itt	eq
 80088ec:	f043 0301 	orreq.w	r3, r3, #1
 80088f0:	81a3      	strheq	r3, [r4, #12]
 80088f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f6:	f013 0208 	ands.w	r2, r3, #8
 80088fa:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80088fe:	d01e      	beq.n	800893e <setvbuf+0x152>
 8008900:	07d9      	lsls	r1, r3, #31
 8008902:	bf41      	itttt	mi
 8008904:	2200      	movmi	r2, #0
 8008906:	426d      	negmi	r5, r5
 8008908:	60a2      	strmi	r2, [r4, #8]
 800890a:	61a5      	strmi	r5, [r4, #24]
 800890c:	bf58      	it	pl
 800890e:	60a5      	strpl	r5, [r4, #8]
 8008910:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008912:	07d2      	lsls	r2, r2, #31
 8008914:	d401      	bmi.n	800891a <setvbuf+0x12e>
 8008916:	059b      	lsls	r3, r3, #22
 8008918:	d513      	bpl.n	8008942 <setvbuf+0x156>
 800891a:	2500      	movs	r5, #0
 800891c:	e7d5      	b.n	80088ca <setvbuf+0xde>
 800891e:	4648      	mov	r0, r9
 8008920:	f7ff fd7c 	bl	800841c <malloc>
 8008924:	4606      	mov	r6, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	d0b8      	beq.n	800889c <setvbuf+0xb0>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	464d      	mov	r5, r9
 8008934:	e7cf      	b.n	80088d6 <setvbuf+0xea>
 8008936:	2500      	movs	r5, #0
 8008938:	e7b2      	b.n	80088a0 <setvbuf+0xb4>
 800893a:	46a9      	mov	r9, r5
 800893c:	e7f5      	b.n	800892a <setvbuf+0x13e>
 800893e:	60a2      	str	r2, [r4, #8]
 8008940:	e7e6      	b.n	8008910 <setvbuf+0x124>
 8008942:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008944:	f000 f968 	bl	8008c18 <__retarget_lock_release_recursive>
 8008948:	e7e7      	b.n	800891a <setvbuf+0x12e>
 800894a:	f04f 35ff 	mov.w	r5, #4294967295
 800894e:	e7bc      	b.n	80088ca <setvbuf+0xde>
 8008950:	20000020 	.word	0x20000020

08008954 <__sread>:
 8008954:	b510      	push	{r4, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	f000 f8fc 	bl	8008b58 <_read_r>
 8008960:	2800      	cmp	r0, #0
 8008962:	bfab      	itete	ge
 8008964:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008966:	89a3      	ldrhlt	r3, [r4, #12]
 8008968:	181b      	addge	r3, r3, r0
 800896a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800896e:	bfac      	ite	ge
 8008970:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008972:	81a3      	strhlt	r3, [r4, #12]
 8008974:	bd10      	pop	{r4, pc}

08008976 <__swrite>:
 8008976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	461f      	mov	r7, r3
 800897c:	898b      	ldrh	r3, [r1, #12]
 800897e:	05db      	lsls	r3, r3, #23
 8008980:	4605      	mov	r5, r0
 8008982:	460c      	mov	r4, r1
 8008984:	4616      	mov	r6, r2
 8008986:	d505      	bpl.n	8008994 <__swrite+0x1e>
 8008988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898c:	2302      	movs	r3, #2
 800898e:	2200      	movs	r2, #0
 8008990:	f000 f8d0 	bl	8008b34 <_lseek_r>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800899a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	4632      	mov	r2, r6
 80089a2:	463b      	mov	r3, r7
 80089a4:	4628      	mov	r0, r5
 80089a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	f000 b8f7 	b.w	8008b9c <_write_r>

080089ae <__sseek>:
 80089ae:	b510      	push	{r4, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b6:	f000 f8bd 	bl	8008b34 <_lseek_r>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	bf15      	itete	ne
 80089c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089ca:	81a3      	strheq	r3, [r4, #12]
 80089cc:	bf18      	it	ne
 80089ce:	81a3      	strhne	r3, [r4, #12]
 80089d0:	bd10      	pop	{r4, pc}

080089d2 <__sclose>:
 80089d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d6:	f000 b89d 	b.w	8008b14 <_close_r>

080089da <__swbuf_r>:
 80089da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089dc:	460e      	mov	r6, r1
 80089de:	4614      	mov	r4, r2
 80089e0:	4605      	mov	r5, r0
 80089e2:	b118      	cbz	r0, 80089ec <__swbuf_r+0x12>
 80089e4:	6a03      	ldr	r3, [r0, #32]
 80089e6:	b90b      	cbnz	r3, 80089ec <__swbuf_r+0x12>
 80089e8:	f7ff fe5a 	bl	80086a0 <__sinit>
 80089ec:	69a3      	ldr	r3, [r4, #24]
 80089ee:	60a3      	str	r3, [r4, #8]
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	071a      	lsls	r2, r3, #28
 80089f4:	d501      	bpl.n	80089fa <__swbuf_r+0x20>
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	b943      	cbnz	r3, 8008a0c <__swbuf_r+0x32>
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f000 f82b 	bl	8008a58 <__swsetup_r>
 8008a02:	b118      	cbz	r0, 8008a0c <__swbuf_r+0x32>
 8008a04:	f04f 37ff 	mov.w	r7, #4294967295
 8008a08:	4638      	mov	r0, r7
 8008a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	6922      	ldr	r2, [r4, #16]
 8008a10:	1a98      	subs	r0, r3, r2
 8008a12:	6963      	ldr	r3, [r4, #20]
 8008a14:	b2f6      	uxtb	r6, r6
 8008a16:	4283      	cmp	r3, r0
 8008a18:	4637      	mov	r7, r6
 8008a1a:	dc05      	bgt.n	8008a28 <__swbuf_r+0x4e>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fc9a 	bl	8009358 <_fflush_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d1ed      	bne.n	8008a04 <__swbuf_r+0x2a>
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	60a3      	str	r3, [r4, #8]
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	6022      	str	r2, [r4, #0]
 8008a34:	701e      	strb	r6, [r3, #0]
 8008a36:	6962      	ldr	r2, [r4, #20]
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d004      	beq.n	8008a48 <__swbuf_r+0x6e>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	07db      	lsls	r3, r3, #31
 8008a42:	d5e1      	bpl.n	8008a08 <__swbuf_r+0x2e>
 8008a44:	2e0a      	cmp	r6, #10
 8008a46:	d1df      	bne.n	8008a08 <__swbuf_r+0x2e>
 8008a48:	4621      	mov	r1, r4
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f000 fc84 	bl	8009358 <_fflush_r>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d0d9      	beq.n	8008a08 <__swbuf_r+0x2e>
 8008a54:	e7d6      	b.n	8008a04 <__swbuf_r+0x2a>
	...

08008a58 <__swsetup_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4b29      	ldr	r3, [pc, #164]	@ (8008b00 <__swsetup_r+0xa8>)
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	460c      	mov	r4, r1
 8008a62:	b118      	cbz	r0, 8008a6c <__swsetup_r+0x14>
 8008a64:	6a03      	ldr	r3, [r0, #32]
 8008a66:	b90b      	cbnz	r3, 8008a6c <__swsetup_r+0x14>
 8008a68:	f7ff fe1a 	bl	80086a0 <__sinit>
 8008a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a70:	0719      	lsls	r1, r3, #28
 8008a72:	d422      	bmi.n	8008aba <__swsetup_r+0x62>
 8008a74:	06da      	lsls	r2, r3, #27
 8008a76:	d407      	bmi.n	8008a88 <__swsetup_r+0x30>
 8008a78:	2209      	movs	r2, #9
 8008a7a:	602a      	str	r2, [r5, #0]
 8008a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	e033      	b.n	8008af0 <__swsetup_r+0x98>
 8008a88:	0758      	lsls	r0, r3, #29
 8008a8a:	d512      	bpl.n	8008ab2 <__swsetup_r+0x5a>
 8008a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a8e:	b141      	cbz	r1, 8008aa2 <__swsetup_r+0x4a>
 8008a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a94:	4299      	cmp	r1, r3
 8008a96:	d002      	beq.n	8008a9e <__swsetup_r+0x46>
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f000 f8bf 	bl	8008c1c <_free_r>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f043 0308 	orr.w	r3, r3, #8
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	b94b      	cbnz	r3, 8008ad2 <__swsetup_r+0x7a>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac8:	d003      	beq.n	8008ad2 <__swsetup_r+0x7a>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 fc91 	bl	80093f4 <__smakebuf_r>
 8008ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad6:	f013 0201 	ands.w	r2, r3, #1
 8008ada:	d00a      	beq.n	8008af2 <__swsetup_r+0x9a>
 8008adc:	2200      	movs	r2, #0
 8008ade:	60a2      	str	r2, [r4, #8]
 8008ae0:	6962      	ldr	r2, [r4, #20]
 8008ae2:	4252      	negs	r2, r2
 8008ae4:	61a2      	str	r2, [r4, #24]
 8008ae6:	6922      	ldr	r2, [r4, #16]
 8008ae8:	b942      	cbnz	r2, 8008afc <__swsetup_r+0xa4>
 8008aea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aee:	d1c5      	bne.n	8008a7c <__swsetup_r+0x24>
 8008af0:	bd38      	pop	{r3, r4, r5, pc}
 8008af2:	0799      	lsls	r1, r3, #30
 8008af4:	bf58      	it	pl
 8008af6:	6962      	ldrpl	r2, [r4, #20]
 8008af8:	60a2      	str	r2, [r4, #8]
 8008afa:	e7f4      	b.n	8008ae6 <__swsetup_r+0x8e>
 8008afc:	2000      	movs	r0, #0
 8008afe:	e7f7      	b.n	8008af0 <__swsetup_r+0x98>
 8008b00:	20000020 	.word	0x20000020

08008b04 <memset>:
 8008b04:	4402      	add	r2, r0
 8008b06:	4603      	mov	r3, r0
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d100      	bne.n	8008b0e <memset+0xa>
 8008b0c:	4770      	bx	lr
 8008b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b12:	e7f9      	b.n	8008b08 <memset+0x4>

08008b14 <_close_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d06      	ldr	r5, [pc, #24]	@ (8008b30 <_close_r+0x1c>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7f8 fc41 	bl	80013a6 <_close>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_close_r+0x1a>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_close_r+0x1a>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20000524 	.word	0x20000524

08008b34 <_lseek_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	@ (8008b54 <_lseek_r+0x20>)
 8008b38:	4604      	mov	r4, r0
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	602a      	str	r2, [r5, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f7f8 fc56 	bl	80013f4 <_lseek>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_lseek_r+0x1e>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_lseek_r+0x1e>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	20000524 	.word	0x20000524

08008b58 <_read_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	@ (8008b78 <_read_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f8 fbe4 	bl	8001334 <_read>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_read_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_read_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000524 	.word	0x20000524

08008b7c <_sbrk_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d06      	ldr	r5, [pc, #24]	@ (8008b98 <_sbrk_r+0x1c>)
 8008b80:	2300      	movs	r3, #0
 8008b82:	4604      	mov	r4, r0
 8008b84:	4608      	mov	r0, r1
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	f7f8 fc42 	bl	8001410 <_sbrk>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d102      	bne.n	8008b96 <_sbrk_r+0x1a>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	b103      	cbz	r3, 8008b96 <_sbrk_r+0x1a>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	20000524 	.word	0x20000524

08008b9c <_write_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d07      	ldr	r5, [pc, #28]	@ (8008bbc <_write_r+0x20>)
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	602a      	str	r2, [r5, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f7f8 fbdf 	bl	800136e <_write>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_write_r+0x1e>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_write_r+0x1e>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	20000524 	.word	0x20000524

08008bc0 <__errno>:
 8008bc0:	4b01      	ldr	r3, [pc, #4]	@ (8008bc8 <__errno+0x8>)
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000020 	.word	0x20000020

08008bcc <__libc_init_array>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4d0d      	ldr	r5, [pc, #52]	@ (8008c04 <__libc_init_array+0x38>)
 8008bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8008c08 <__libc_init_array+0x3c>)
 8008bd2:	1b64      	subs	r4, r4, r5
 8008bd4:	10a4      	asrs	r4, r4, #2
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	42a6      	cmp	r6, r4
 8008bda:	d109      	bne.n	8008bf0 <__libc_init_array+0x24>
 8008bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8008c0c <__libc_init_array+0x40>)
 8008bde:	4c0c      	ldr	r4, [pc, #48]	@ (8008c10 <__libc_init_array+0x44>)
 8008be0:	f000 fc66 	bl	80094b0 <_init>
 8008be4:	1b64      	subs	r4, r4, r5
 8008be6:	10a4      	asrs	r4, r4, #2
 8008be8:	2600      	movs	r6, #0
 8008bea:	42a6      	cmp	r6, r4
 8008bec:	d105      	bne.n	8008bfa <__libc_init_array+0x2e>
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
 8008bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf4:	4798      	blx	r3
 8008bf6:	3601      	adds	r6, #1
 8008bf8:	e7ee      	b.n	8008bd8 <__libc_init_array+0xc>
 8008bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfe:	4798      	blx	r3
 8008c00:	3601      	adds	r6, #1
 8008c02:	e7f2      	b.n	8008bea <__libc_init_array+0x1e>
 8008c04:	08009628 	.word	0x08009628
 8008c08:	08009628 	.word	0x08009628
 8008c0c:	08009628 	.word	0x08009628
 8008c10:	0800962c 	.word	0x0800962c

08008c14 <__retarget_lock_init_recursive>:
 8008c14:	4770      	bx	lr

08008c16 <__retarget_lock_acquire_recursive>:
 8008c16:	4770      	bx	lr

08008c18 <__retarget_lock_release_recursive>:
 8008c18:	4770      	bx	lr
	...

08008c1c <_free_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4605      	mov	r5, r0
 8008c20:	2900      	cmp	r1, #0
 8008c22:	d041      	beq.n	8008ca8 <_free_r+0x8c>
 8008c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c28:	1f0c      	subs	r4, r1, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bfb8      	it	lt
 8008c2e:	18e4      	addlt	r4, r4, r3
 8008c30:	f7ff fc9e 	bl	8008570 <__malloc_lock>
 8008c34:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <_free_r+0x90>)
 8008c36:	6813      	ldr	r3, [r2, #0]
 8008c38:	b933      	cbnz	r3, 8008c48 <_free_r+0x2c>
 8008c3a:	6063      	str	r3, [r4, #4]
 8008c3c:	6014      	str	r4, [r2, #0]
 8008c3e:	4628      	mov	r0, r5
 8008c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c44:	f7ff bc9a 	b.w	800857c <__malloc_unlock>
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d908      	bls.n	8008c5e <_free_r+0x42>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	1821      	adds	r1, r4, r0
 8008c50:	428b      	cmp	r3, r1
 8008c52:	bf01      	itttt	eq
 8008c54:	6819      	ldreq	r1, [r3, #0]
 8008c56:	685b      	ldreq	r3, [r3, #4]
 8008c58:	1809      	addeq	r1, r1, r0
 8008c5a:	6021      	streq	r1, [r4, #0]
 8008c5c:	e7ed      	b.n	8008c3a <_free_r+0x1e>
 8008c5e:	461a      	mov	r2, r3
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	b10b      	cbz	r3, 8008c68 <_free_r+0x4c>
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d9fa      	bls.n	8008c5e <_free_r+0x42>
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	1850      	adds	r0, r2, r1
 8008c6c:	42a0      	cmp	r0, r4
 8008c6e:	d10b      	bne.n	8008c88 <_free_r+0x6c>
 8008c70:	6820      	ldr	r0, [r4, #0]
 8008c72:	4401      	add	r1, r0
 8008c74:	1850      	adds	r0, r2, r1
 8008c76:	4283      	cmp	r3, r0
 8008c78:	6011      	str	r1, [r2, #0]
 8008c7a:	d1e0      	bne.n	8008c3e <_free_r+0x22>
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	6053      	str	r3, [r2, #4]
 8008c82:	4408      	add	r0, r1
 8008c84:	6010      	str	r0, [r2, #0]
 8008c86:	e7da      	b.n	8008c3e <_free_r+0x22>
 8008c88:	d902      	bls.n	8008c90 <_free_r+0x74>
 8008c8a:	230c      	movs	r3, #12
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	e7d6      	b.n	8008c3e <_free_r+0x22>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	1821      	adds	r1, r4, r0
 8008c94:	428b      	cmp	r3, r1
 8008c96:	bf04      	itt	eq
 8008c98:	6819      	ldreq	r1, [r3, #0]
 8008c9a:	685b      	ldreq	r3, [r3, #4]
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	bf04      	itt	eq
 8008ca0:	1809      	addeq	r1, r1, r0
 8008ca2:	6021      	streq	r1, [r4, #0]
 8008ca4:	6054      	str	r4, [r2, #4]
 8008ca6:	e7ca      	b.n	8008c3e <_free_r+0x22>
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	200003e4 	.word	0x200003e4

08008cb0 <__sfputc_r>:
 8008cb0:	6893      	ldr	r3, [r2, #8]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	b410      	push	{r4}
 8008cb8:	6093      	str	r3, [r2, #8]
 8008cba:	da08      	bge.n	8008cce <__sfputc_r+0x1e>
 8008cbc:	6994      	ldr	r4, [r2, #24]
 8008cbe:	42a3      	cmp	r3, r4
 8008cc0:	db01      	blt.n	8008cc6 <__sfputc_r+0x16>
 8008cc2:	290a      	cmp	r1, #10
 8008cc4:	d103      	bne.n	8008cce <__sfputc_r+0x1e>
 8008cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cca:	f7ff be86 	b.w	80089da <__swbuf_r>
 8008cce:	6813      	ldr	r3, [r2, #0]
 8008cd0:	1c58      	adds	r0, r3, #1
 8008cd2:	6010      	str	r0, [r2, #0]
 8008cd4:	7019      	strb	r1, [r3, #0]
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <__sfputs_r>:
 8008cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	460f      	mov	r7, r1
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	18d5      	adds	r5, r2, r3
 8008ce8:	42ac      	cmp	r4, r5
 8008cea:	d101      	bne.n	8008cf0 <__sfputs_r+0x12>
 8008cec:	2000      	movs	r0, #0
 8008cee:	e007      	b.n	8008d00 <__sfputs_r+0x22>
 8008cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf4:	463a      	mov	r2, r7
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff ffda 	bl	8008cb0 <__sfputc_r>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d1f3      	bne.n	8008ce8 <__sfputs_r+0xa>
 8008d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d04 <_vfiprintf_r>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	460d      	mov	r5, r1
 8008d0a:	b09d      	sub	sp, #116	@ 0x74
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	4698      	mov	r8, r3
 8008d10:	4606      	mov	r6, r0
 8008d12:	b118      	cbz	r0, 8008d1c <_vfiprintf_r+0x18>
 8008d14:	6a03      	ldr	r3, [r0, #32]
 8008d16:	b90b      	cbnz	r3, 8008d1c <_vfiprintf_r+0x18>
 8008d18:	f7ff fcc2 	bl	80086a0 <__sinit>
 8008d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d1e:	07d9      	lsls	r1, r3, #31
 8008d20:	d405      	bmi.n	8008d2e <_vfiprintf_r+0x2a>
 8008d22:	89ab      	ldrh	r3, [r5, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d402      	bmi.n	8008d2e <_vfiprintf_r+0x2a>
 8008d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d2a:	f7ff ff74 	bl	8008c16 <__retarget_lock_acquire_recursive>
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	071b      	lsls	r3, r3, #28
 8008d32:	d501      	bpl.n	8008d38 <_vfiprintf_r+0x34>
 8008d34:	692b      	ldr	r3, [r5, #16]
 8008d36:	b99b      	cbnz	r3, 8008d60 <_vfiprintf_r+0x5c>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7ff fe8c 	bl	8008a58 <__swsetup_r>
 8008d40:	b170      	cbz	r0, 8008d60 <_vfiprintf_r+0x5c>
 8008d42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d44:	07dc      	lsls	r4, r3, #31
 8008d46:	d504      	bpl.n	8008d52 <_vfiprintf_r+0x4e>
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	b01d      	add	sp, #116	@ 0x74
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	0598      	lsls	r0, r3, #22
 8008d56:	d4f7      	bmi.n	8008d48 <_vfiprintf_r+0x44>
 8008d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d5a:	f7ff ff5d 	bl	8008c18 <__retarget_lock_release_recursive>
 8008d5e:	e7f3      	b.n	8008d48 <_vfiprintf_r+0x44>
 8008d60:	2300      	movs	r3, #0
 8008d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d64:	2320      	movs	r3, #32
 8008d66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6e:	2330      	movs	r3, #48	@ 0x30
 8008d70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f20 <_vfiprintf_r+0x21c>
 8008d74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d78:	f04f 0901 	mov.w	r9, #1
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	469a      	mov	sl, r3
 8008d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d84:	b10a      	cbz	r2, 8008d8a <_vfiprintf_r+0x86>
 8008d86:	2a25      	cmp	r2, #37	@ 0x25
 8008d88:	d1f9      	bne.n	8008d7e <_vfiprintf_r+0x7a>
 8008d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8e:	d00b      	beq.n	8008da8 <_vfiprintf_r+0xa4>
 8008d90:	465b      	mov	r3, fp
 8008d92:	4622      	mov	r2, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff ffa1 	bl	8008cde <__sfputs_r>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	f000 80a7 	beq.w	8008ef0 <_vfiprintf_r+0x1ec>
 8008da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da4:	445a      	add	r2, fp
 8008da6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008da8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 809f 	beq.w	8008ef0 <_vfiprintf_r+0x1ec>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	9307      	str	r3, [sp, #28]
 8008dc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dca:	4654      	mov	r4, sl
 8008dcc:	2205      	movs	r2, #5
 8008dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd2:	4853      	ldr	r0, [pc, #332]	@ (8008f20 <_vfiprintf_r+0x21c>)
 8008dd4:	f7f7 f9d4 	bl	8000180 <memchr>
 8008dd8:	9a04      	ldr	r2, [sp, #16]
 8008dda:	b9d8      	cbnz	r0, 8008e14 <_vfiprintf_r+0x110>
 8008ddc:	06d1      	lsls	r1, r2, #27
 8008dde:	bf44      	itt	mi
 8008de0:	2320      	movmi	r3, #32
 8008de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de6:	0713      	lsls	r3, r2, #28
 8008de8:	bf44      	itt	mi
 8008dea:	232b      	movmi	r3, #43	@ 0x2b
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df0:	f89a 3000 	ldrb.w	r3, [sl]
 8008df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df6:	d015      	beq.n	8008e24 <_vfiprintf_r+0x120>
 8008df8:	9a07      	ldr	r2, [sp, #28]
 8008dfa:	4654      	mov	r4, sl
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f04f 0c0a 	mov.w	ip, #10
 8008e02:	4621      	mov	r1, r4
 8008e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e08:	3b30      	subs	r3, #48	@ 0x30
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	d94b      	bls.n	8008ea6 <_vfiprintf_r+0x1a2>
 8008e0e:	b1b0      	cbz	r0, 8008e3e <_vfiprintf_r+0x13a>
 8008e10:	9207      	str	r2, [sp, #28]
 8008e12:	e014      	b.n	8008e3e <_vfiprintf_r+0x13a>
 8008e14:	eba0 0308 	sub.w	r3, r0, r8
 8008e18:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	46a2      	mov	sl, r4
 8008e22:	e7d2      	b.n	8008dca <_vfiprintf_r+0xc6>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	1d19      	adds	r1, r3, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	9103      	str	r1, [sp, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bfbb      	ittet	lt
 8008e30:	425b      	neglt	r3, r3
 8008e32:	f042 0202 	orrlt.w	r2, r2, #2
 8008e36:	9307      	strge	r3, [sp, #28]
 8008e38:	9307      	strlt	r3, [sp, #28]
 8008e3a:	bfb8      	it	lt
 8008e3c:	9204      	strlt	r2, [sp, #16]
 8008e3e:	7823      	ldrb	r3, [r4, #0]
 8008e40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e42:	d10a      	bne.n	8008e5a <_vfiprintf_r+0x156>
 8008e44:	7863      	ldrb	r3, [r4, #1]
 8008e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e48:	d132      	bne.n	8008eb0 <_vfiprintf_r+0x1ac>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	9203      	str	r2, [sp, #12]
 8008e52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e56:	3402      	adds	r4, #2
 8008e58:	9305      	str	r3, [sp, #20]
 8008e5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f30 <_vfiprintf_r+0x22c>
 8008e5e:	7821      	ldrb	r1, [r4, #0]
 8008e60:	2203      	movs	r2, #3
 8008e62:	4650      	mov	r0, sl
 8008e64:	f7f7 f98c 	bl	8000180 <memchr>
 8008e68:	b138      	cbz	r0, 8008e7a <_vfiprintf_r+0x176>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	eba0 000a 	sub.w	r0, r0, sl
 8008e70:	2240      	movs	r2, #64	@ 0x40
 8008e72:	4082      	lsls	r2, r0
 8008e74:	4313      	orrs	r3, r2
 8008e76:	3401      	adds	r4, #1
 8008e78:	9304      	str	r3, [sp, #16]
 8008e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7e:	4829      	ldr	r0, [pc, #164]	@ (8008f24 <_vfiprintf_r+0x220>)
 8008e80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e84:	2206      	movs	r2, #6
 8008e86:	f7f7 f97b 	bl	8000180 <memchr>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d03f      	beq.n	8008f0e <_vfiprintf_r+0x20a>
 8008e8e:	4b26      	ldr	r3, [pc, #152]	@ (8008f28 <_vfiprintf_r+0x224>)
 8008e90:	bb1b      	cbnz	r3, 8008eda <_vfiprintf_r+0x1d6>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	3307      	adds	r3, #7
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea0:	443b      	add	r3, r7
 8008ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea4:	e76a      	b.n	8008d7c <_vfiprintf_r+0x78>
 8008ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eaa:	460c      	mov	r4, r1
 8008eac:	2001      	movs	r0, #1
 8008eae:	e7a8      	b.n	8008e02 <_vfiprintf_r+0xfe>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	3401      	adds	r4, #1
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f04f 0c0a 	mov.w	ip, #10
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec2:	3a30      	subs	r2, #48	@ 0x30
 8008ec4:	2a09      	cmp	r2, #9
 8008ec6:	d903      	bls.n	8008ed0 <_vfiprintf_r+0x1cc>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0c6      	beq.n	8008e5a <_vfiprintf_r+0x156>
 8008ecc:	9105      	str	r1, [sp, #20]
 8008ece:	e7c4      	b.n	8008e5a <_vfiprintf_r+0x156>
 8008ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e7f0      	b.n	8008ebc <_vfiprintf_r+0x1b8>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4b12      	ldr	r3, [pc, #72]	@ (8008f2c <_vfiprintf_r+0x228>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f3af 8000 	nop.w
 8008eea:	4607      	mov	r7, r0
 8008eec:	1c78      	adds	r0, r7, #1
 8008eee:	d1d6      	bne.n	8008e9e <_vfiprintf_r+0x19a>
 8008ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ef2:	07d9      	lsls	r1, r3, #31
 8008ef4:	d405      	bmi.n	8008f02 <_vfiprintf_r+0x1fe>
 8008ef6:	89ab      	ldrh	r3, [r5, #12]
 8008ef8:	059a      	lsls	r2, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_vfiprintf_r+0x1fe>
 8008efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008efe:	f7ff fe8b 	bl	8008c18 <__retarget_lock_release_recursive>
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	065b      	lsls	r3, r3, #25
 8008f06:	f53f af1f 	bmi.w	8008d48 <_vfiprintf_r+0x44>
 8008f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f0c:	e71e      	b.n	8008d4c <_vfiprintf_r+0x48>
 8008f0e:	ab03      	add	r3, sp, #12
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	462a      	mov	r2, r5
 8008f14:	4b05      	ldr	r3, [pc, #20]	@ (8008f2c <_vfiprintf_r+0x228>)
 8008f16:	a904      	add	r1, sp, #16
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f879 	bl	8009010 <_printf_i>
 8008f1e:	e7e4      	b.n	8008eea <_vfiprintf_r+0x1e6>
 8008f20:	080095ec 	.word	0x080095ec
 8008f24:	080095f6 	.word	0x080095f6
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	08008cdf 	.word	0x08008cdf
 8008f30:	080095f2 	.word	0x080095f2

08008f34 <_printf_common>:
 8008f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	4616      	mov	r6, r2
 8008f3a:	4698      	mov	r8, r3
 8008f3c:	688a      	ldr	r2, [r1, #8]
 8008f3e:	690b      	ldr	r3, [r1, #16]
 8008f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bfb8      	it	lt
 8008f48:	4613      	movlt	r3, r2
 8008f4a:	6033      	str	r3, [r6, #0]
 8008f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f50:	4607      	mov	r7, r0
 8008f52:	460c      	mov	r4, r1
 8008f54:	b10a      	cbz	r2, 8008f5a <_printf_common+0x26>
 8008f56:	3301      	adds	r3, #1
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	0699      	lsls	r1, r3, #26
 8008f5e:	bf42      	ittt	mi
 8008f60:	6833      	ldrmi	r3, [r6, #0]
 8008f62:	3302      	addmi	r3, #2
 8008f64:	6033      	strmi	r3, [r6, #0]
 8008f66:	6825      	ldr	r5, [r4, #0]
 8008f68:	f015 0506 	ands.w	r5, r5, #6
 8008f6c:	d106      	bne.n	8008f7c <_printf_common+0x48>
 8008f6e:	f104 0a19 	add.w	sl, r4, #25
 8008f72:	68e3      	ldr	r3, [r4, #12]
 8008f74:	6832      	ldr	r2, [r6, #0]
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	42ab      	cmp	r3, r5
 8008f7a:	dc26      	bgt.n	8008fca <_printf_common+0x96>
 8008f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	3b00      	subs	r3, #0
 8008f84:	bf18      	it	ne
 8008f86:	2301      	movne	r3, #1
 8008f88:	0692      	lsls	r2, r2, #26
 8008f8a:	d42b      	bmi.n	8008fe4 <_printf_common+0xb0>
 8008f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f90:	4641      	mov	r1, r8
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c8      	blx	r9
 8008f96:	3001      	adds	r0, #1
 8008f98:	d01e      	beq.n	8008fd8 <_printf_common+0xa4>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	f003 0306 	and.w	r3, r3, #6
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	bf02      	ittt	eq
 8008fa6:	68e5      	ldreq	r5, [r4, #12]
 8008fa8:	6833      	ldreq	r3, [r6, #0]
 8008faa:	1aed      	subeq	r5, r5, r3
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	bf0c      	ite	eq
 8008fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fb4:	2500      	movne	r5, #0
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	bfc4      	itt	gt
 8008fba:	1a9b      	subgt	r3, r3, r2
 8008fbc:	18ed      	addgt	r5, r5, r3
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	341a      	adds	r4, #26
 8008fc2:	42b5      	cmp	r5, r6
 8008fc4:	d11a      	bne.n	8008ffc <_printf_common+0xc8>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e008      	b.n	8008fdc <_printf_common+0xa8>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4652      	mov	r2, sl
 8008fce:	4641      	mov	r1, r8
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	47c8      	blx	r9
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d103      	bne.n	8008fe0 <_printf_common+0xac>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	3501      	adds	r5, #1
 8008fe2:	e7c6      	b.n	8008f72 <_printf_common+0x3e>
 8008fe4:	18e1      	adds	r1, r4, r3
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	2030      	movs	r0, #48	@ 0x30
 8008fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fee:	4422      	add	r2, r4
 8008ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ff8:	3302      	adds	r3, #2
 8008ffa:	e7c7      	b.n	8008f8c <_printf_common+0x58>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4622      	mov	r2, r4
 8009000:	4641      	mov	r1, r8
 8009002:	4638      	mov	r0, r7
 8009004:	47c8      	blx	r9
 8009006:	3001      	adds	r0, #1
 8009008:	d0e6      	beq.n	8008fd8 <_printf_common+0xa4>
 800900a:	3601      	adds	r6, #1
 800900c:	e7d9      	b.n	8008fc2 <_printf_common+0x8e>
	...

08009010 <_printf_i>:
 8009010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	7e0f      	ldrb	r7, [r1, #24]
 8009016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009018:	2f78      	cmp	r7, #120	@ 0x78
 800901a:	4691      	mov	r9, r2
 800901c:	4680      	mov	r8, r0
 800901e:	460c      	mov	r4, r1
 8009020:	469a      	mov	sl, r3
 8009022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009026:	d807      	bhi.n	8009038 <_printf_i+0x28>
 8009028:	2f62      	cmp	r7, #98	@ 0x62
 800902a:	d80a      	bhi.n	8009042 <_printf_i+0x32>
 800902c:	2f00      	cmp	r7, #0
 800902e:	f000 80d2 	beq.w	80091d6 <_printf_i+0x1c6>
 8009032:	2f58      	cmp	r7, #88	@ 0x58
 8009034:	f000 80b9 	beq.w	80091aa <_printf_i+0x19a>
 8009038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800903c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009040:	e03a      	b.n	80090b8 <_printf_i+0xa8>
 8009042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009046:	2b15      	cmp	r3, #21
 8009048:	d8f6      	bhi.n	8009038 <_printf_i+0x28>
 800904a:	a101      	add	r1, pc, #4	@ (adr r1, 8009050 <_printf_i+0x40>)
 800904c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009050:	080090a9 	.word	0x080090a9
 8009054:	080090bd 	.word	0x080090bd
 8009058:	08009039 	.word	0x08009039
 800905c:	08009039 	.word	0x08009039
 8009060:	08009039 	.word	0x08009039
 8009064:	08009039 	.word	0x08009039
 8009068:	080090bd 	.word	0x080090bd
 800906c:	08009039 	.word	0x08009039
 8009070:	08009039 	.word	0x08009039
 8009074:	08009039 	.word	0x08009039
 8009078:	08009039 	.word	0x08009039
 800907c:	080091bd 	.word	0x080091bd
 8009080:	080090e7 	.word	0x080090e7
 8009084:	08009177 	.word	0x08009177
 8009088:	08009039 	.word	0x08009039
 800908c:	08009039 	.word	0x08009039
 8009090:	080091df 	.word	0x080091df
 8009094:	08009039 	.word	0x08009039
 8009098:	080090e7 	.word	0x080090e7
 800909c:	08009039 	.word	0x08009039
 80090a0:	08009039 	.word	0x08009039
 80090a4:	0800917f 	.word	0x0800917f
 80090a8:	6833      	ldr	r3, [r6, #0]
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6032      	str	r2, [r6, #0]
 80090b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090b8:	2301      	movs	r3, #1
 80090ba:	e09d      	b.n	80091f8 <_printf_i+0x1e8>
 80090bc:	6833      	ldr	r3, [r6, #0]
 80090be:	6820      	ldr	r0, [r4, #0]
 80090c0:	1d19      	adds	r1, r3, #4
 80090c2:	6031      	str	r1, [r6, #0]
 80090c4:	0606      	lsls	r6, r0, #24
 80090c6:	d501      	bpl.n	80090cc <_printf_i+0xbc>
 80090c8:	681d      	ldr	r5, [r3, #0]
 80090ca:	e003      	b.n	80090d4 <_printf_i+0xc4>
 80090cc:	0645      	lsls	r5, r0, #25
 80090ce:	d5fb      	bpl.n	80090c8 <_printf_i+0xb8>
 80090d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	da03      	bge.n	80090e0 <_printf_i+0xd0>
 80090d8:	232d      	movs	r3, #45	@ 0x2d
 80090da:	426d      	negs	r5, r5
 80090dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e0:	4859      	ldr	r0, [pc, #356]	@ (8009248 <_printf_i+0x238>)
 80090e2:	230a      	movs	r3, #10
 80090e4:	e011      	b.n	800910a <_printf_i+0xfa>
 80090e6:	6821      	ldr	r1, [r4, #0]
 80090e8:	6833      	ldr	r3, [r6, #0]
 80090ea:	0608      	lsls	r0, r1, #24
 80090ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80090f0:	d402      	bmi.n	80090f8 <_printf_i+0xe8>
 80090f2:	0649      	lsls	r1, r1, #25
 80090f4:	bf48      	it	mi
 80090f6:	b2ad      	uxthmi	r5, r5
 80090f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80090fa:	4853      	ldr	r0, [pc, #332]	@ (8009248 <_printf_i+0x238>)
 80090fc:	6033      	str	r3, [r6, #0]
 80090fe:	bf14      	ite	ne
 8009100:	230a      	movne	r3, #10
 8009102:	2308      	moveq	r3, #8
 8009104:	2100      	movs	r1, #0
 8009106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800910a:	6866      	ldr	r6, [r4, #4]
 800910c:	60a6      	str	r6, [r4, #8]
 800910e:	2e00      	cmp	r6, #0
 8009110:	bfa2      	ittt	ge
 8009112:	6821      	ldrge	r1, [r4, #0]
 8009114:	f021 0104 	bicge.w	r1, r1, #4
 8009118:	6021      	strge	r1, [r4, #0]
 800911a:	b90d      	cbnz	r5, 8009120 <_printf_i+0x110>
 800911c:	2e00      	cmp	r6, #0
 800911e:	d04b      	beq.n	80091b8 <_printf_i+0x1a8>
 8009120:	4616      	mov	r6, r2
 8009122:	fbb5 f1f3 	udiv	r1, r5, r3
 8009126:	fb03 5711 	mls	r7, r3, r1, r5
 800912a:	5dc7      	ldrb	r7, [r0, r7]
 800912c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009130:	462f      	mov	r7, r5
 8009132:	42bb      	cmp	r3, r7
 8009134:	460d      	mov	r5, r1
 8009136:	d9f4      	bls.n	8009122 <_printf_i+0x112>
 8009138:	2b08      	cmp	r3, #8
 800913a:	d10b      	bne.n	8009154 <_printf_i+0x144>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	07df      	lsls	r7, r3, #31
 8009140:	d508      	bpl.n	8009154 <_printf_i+0x144>
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	6861      	ldr	r1, [r4, #4]
 8009146:	4299      	cmp	r1, r3
 8009148:	bfde      	ittt	le
 800914a:	2330      	movle	r3, #48	@ 0x30
 800914c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009154:	1b92      	subs	r2, r2, r6
 8009156:	6122      	str	r2, [r4, #16]
 8009158:	f8cd a000 	str.w	sl, [sp]
 800915c:	464b      	mov	r3, r9
 800915e:	aa03      	add	r2, sp, #12
 8009160:	4621      	mov	r1, r4
 8009162:	4640      	mov	r0, r8
 8009164:	f7ff fee6 	bl	8008f34 <_printf_common>
 8009168:	3001      	adds	r0, #1
 800916a:	d14a      	bne.n	8009202 <_printf_i+0x1f2>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b004      	add	sp, #16
 8009172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	f043 0320 	orr.w	r3, r3, #32
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	4833      	ldr	r0, [pc, #204]	@ (800924c <_printf_i+0x23c>)
 8009180:	2778      	movs	r7, #120	@ 0x78
 8009182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	6831      	ldr	r1, [r6, #0]
 800918a:	061f      	lsls	r7, r3, #24
 800918c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009190:	d402      	bmi.n	8009198 <_printf_i+0x188>
 8009192:	065f      	lsls	r7, r3, #25
 8009194:	bf48      	it	mi
 8009196:	b2ad      	uxthmi	r5, r5
 8009198:	6031      	str	r1, [r6, #0]
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	bf44      	itt	mi
 800919e:	f043 0320 	orrmi.w	r3, r3, #32
 80091a2:	6023      	strmi	r3, [r4, #0]
 80091a4:	b11d      	cbz	r5, 80091ae <_printf_i+0x19e>
 80091a6:	2310      	movs	r3, #16
 80091a8:	e7ac      	b.n	8009104 <_printf_i+0xf4>
 80091aa:	4827      	ldr	r0, [pc, #156]	@ (8009248 <_printf_i+0x238>)
 80091ac:	e7e9      	b.n	8009182 <_printf_i+0x172>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f023 0320 	bic.w	r3, r3, #32
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	e7f6      	b.n	80091a6 <_printf_i+0x196>
 80091b8:	4616      	mov	r6, r2
 80091ba:	e7bd      	b.n	8009138 <_printf_i+0x128>
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	6825      	ldr	r5, [r4, #0]
 80091c0:	6961      	ldr	r1, [r4, #20]
 80091c2:	1d18      	adds	r0, r3, #4
 80091c4:	6030      	str	r0, [r6, #0]
 80091c6:	062e      	lsls	r6, r5, #24
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	d501      	bpl.n	80091d0 <_printf_i+0x1c0>
 80091cc:	6019      	str	r1, [r3, #0]
 80091ce:	e002      	b.n	80091d6 <_printf_i+0x1c6>
 80091d0:	0668      	lsls	r0, r5, #25
 80091d2:	d5fb      	bpl.n	80091cc <_printf_i+0x1bc>
 80091d4:	8019      	strh	r1, [r3, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	6123      	str	r3, [r4, #16]
 80091da:	4616      	mov	r6, r2
 80091dc:	e7bc      	b.n	8009158 <_printf_i+0x148>
 80091de:	6833      	ldr	r3, [r6, #0]
 80091e0:	1d1a      	adds	r2, r3, #4
 80091e2:	6032      	str	r2, [r6, #0]
 80091e4:	681e      	ldr	r6, [r3, #0]
 80091e6:	6862      	ldr	r2, [r4, #4]
 80091e8:	2100      	movs	r1, #0
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7f6 ffc8 	bl	8000180 <memchr>
 80091f0:	b108      	cbz	r0, 80091f6 <_printf_i+0x1e6>
 80091f2:	1b80      	subs	r0, r0, r6
 80091f4:	6060      	str	r0, [r4, #4]
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	2300      	movs	r3, #0
 80091fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009200:	e7aa      	b.n	8009158 <_printf_i+0x148>
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	4632      	mov	r2, r6
 8009206:	4649      	mov	r1, r9
 8009208:	4640      	mov	r0, r8
 800920a:	47d0      	blx	sl
 800920c:	3001      	adds	r0, #1
 800920e:	d0ad      	beq.n	800916c <_printf_i+0x15c>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	079b      	lsls	r3, r3, #30
 8009214:	d413      	bmi.n	800923e <_printf_i+0x22e>
 8009216:	68e0      	ldr	r0, [r4, #12]
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	4298      	cmp	r0, r3
 800921c:	bfb8      	it	lt
 800921e:	4618      	movlt	r0, r3
 8009220:	e7a6      	b.n	8009170 <_printf_i+0x160>
 8009222:	2301      	movs	r3, #1
 8009224:	4632      	mov	r2, r6
 8009226:	4649      	mov	r1, r9
 8009228:	4640      	mov	r0, r8
 800922a:	47d0      	blx	sl
 800922c:	3001      	adds	r0, #1
 800922e:	d09d      	beq.n	800916c <_printf_i+0x15c>
 8009230:	3501      	adds	r5, #1
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	9903      	ldr	r1, [sp, #12]
 8009236:	1a5b      	subs	r3, r3, r1
 8009238:	42ab      	cmp	r3, r5
 800923a:	dcf2      	bgt.n	8009222 <_printf_i+0x212>
 800923c:	e7eb      	b.n	8009216 <_printf_i+0x206>
 800923e:	2500      	movs	r5, #0
 8009240:	f104 0619 	add.w	r6, r4, #25
 8009244:	e7f5      	b.n	8009232 <_printf_i+0x222>
 8009246:	bf00      	nop
 8009248:	080095fd 	.word	0x080095fd
 800924c:	0800960e 	.word	0x0800960e

08009250 <__sflush_r>:
 8009250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	0716      	lsls	r6, r2, #28
 800925a:	4605      	mov	r5, r0
 800925c:	460c      	mov	r4, r1
 800925e:	d454      	bmi.n	800930a <__sflush_r+0xba>
 8009260:	684b      	ldr	r3, [r1, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	dc02      	bgt.n	800926c <__sflush_r+0x1c>
 8009266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	dd48      	ble.n	80092fe <__sflush_r+0xae>
 800926c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800926e:	2e00      	cmp	r6, #0
 8009270:	d045      	beq.n	80092fe <__sflush_r+0xae>
 8009272:	2300      	movs	r3, #0
 8009274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009278:	682f      	ldr	r7, [r5, #0]
 800927a:	6a21      	ldr	r1, [r4, #32]
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	d030      	beq.n	80092e2 <__sflush_r+0x92>
 8009280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	0759      	lsls	r1, r3, #29
 8009286:	d505      	bpl.n	8009294 <__sflush_r+0x44>
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800928e:	b10b      	cbz	r3, 8009294 <__sflush_r+0x44>
 8009290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	2300      	movs	r3, #0
 8009296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009298:	6a21      	ldr	r1, [r4, #32]
 800929a:	4628      	mov	r0, r5
 800929c:	47b0      	blx	r6
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	d106      	bne.n	80092b2 <__sflush_r+0x62>
 80092a4:	6829      	ldr	r1, [r5, #0]
 80092a6:	291d      	cmp	r1, #29
 80092a8:	d82b      	bhi.n	8009302 <__sflush_r+0xb2>
 80092aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009354 <__sflush_r+0x104>)
 80092ac:	410a      	asrs	r2, r1
 80092ae:	07d6      	lsls	r6, r2, #31
 80092b0:	d427      	bmi.n	8009302 <__sflush_r+0xb2>
 80092b2:	2200      	movs	r2, #0
 80092b4:	6062      	str	r2, [r4, #4]
 80092b6:	04d9      	lsls	r1, r3, #19
 80092b8:	6922      	ldr	r2, [r4, #16]
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	d504      	bpl.n	80092c8 <__sflush_r+0x78>
 80092be:	1c42      	adds	r2, r0, #1
 80092c0:	d101      	bne.n	80092c6 <__sflush_r+0x76>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	b903      	cbnz	r3, 80092c8 <__sflush_r+0x78>
 80092c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80092c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092ca:	602f      	str	r7, [r5, #0]
 80092cc:	b1b9      	cbz	r1, 80092fe <__sflush_r+0xae>
 80092ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d002      	beq.n	80092dc <__sflush_r+0x8c>
 80092d6:	4628      	mov	r0, r5
 80092d8:	f7ff fca0 	bl	8008c1c <_free_r>
 80092dc:	2300      	movs	r3, #0
 80092de:	6363      	str	r3, [r4, #52]	@ 0x34
 80092e0:	e00d      	b.n	80092fe <__sflush_r+0xae>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	4602      	mov	r2, r0
 80092ea:	1c50      	adds	r0, r2, #1
 80092ec:	d1c9      	bne.n	8009282 <__sflush_r+0x32>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0c6      	beq.n	8009282 <__sflush_r+0x32>
 80092f4:	2b1d      	cmp	r3, #29
 80092f6:	d001      	beq.n	80092fc <__sflush_r+0xac>
 80092f8:	2b16      	cmp	r3, #22
 80092fa:	d11e      	bne.n	800933a <__sflush_r+0xea>
 80092fc:	602f      	str	r7, [r5, #0]
 80092fe:	2000      	movs	r0, #0
 8009300:	e022      	b.n	8009348 <__sflush_r+0xf8>
 8009302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009306:	b21b      	sxth	r3, r3
 8009308:	e01b      	b.n	8009342 <__sflush_r+0xf2>
 800930a:	690f      	ldr	r7, [r1, #16]
 800930c:	2f00      	cmp	r7, #0
 800930e:	d0f6      	beq.n	80092fe <__sflush_r+0xae>
 8009310:	0793      	lsls	r3, r2, #30
 8009312:	680e      	ldr	r6, [r1, #0]
 8009314:	bf08      	it	eq
 8009316:	694b      	ldreq	r3, [r1, #20]
 8009318:	600f      	str	r7, [r1, #0]
 800931a:	bf18      	it	ne
 800931c:	2300      	movne	r3, #0
 800931e:	eba6 0807 	sub.w	r8, r6, r7
 8009322:	608b      	str	r3, [r1, #8]
 8009324:	f1b8 0f00 	cmp.w	r8, #0
 8009328:	dde9      	ble.n	80092fe <__sflush_r+0xae>
 800932a:	6a21      	ldr	r1, [r4, #32]
 800932c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800932e:	4643      	mov	r3, r8
 8009330:	463a      	mov	r2, r7
 8009332:	4628      	mov	r0, r5
 8009334:	47b0      	blx	r6
 8009336:	2800      	cmp	r0, #0
 8009338:	dc08      	bgt.n	800934c <__sflush_r+0xfc>
 800933a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934c:	4407      	add	r7, r0
 800934e:	eba8 0800 	sub.w	r8, r8, r0
 8009352:	e7e7      	b.n	8009324 <__sflush_r+0xd4>
 8009354:	dfbffffe 	.word	0xdfbffffe

08009358 <_fflush_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	4605      	mov	r5, r0
 800935e:	460c      	mov	r4, r1
 8009360:	b913      	cbnz	r3, 8009368 <_fflush_r+0x10>
 8009362:	2500      	movs	r5, #0
 8009364:	4628      	mov	r0, r5
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	b118      	cbz	r0, 8009372 <_fflush_r+0x1a>
 800936a:	6a03      	ldr	r3, [r0, #32]
 800936c:	b90b      	cbnz	r3, 8009372 <_fflush_r+0x1a>
 800936e:	f7ff f997 	bl	80086a0 <__sinit>
 8009372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f3      	beq.n	8009362 <_fflush_r+0xa>
 800937a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800937c:	07d0      	lsls	r0, r2, #31
 800937e:	d404      	bmi.n	800938a <_fflush_r+0x32>
 8009380:	0599      	lsls	r1, r3, #22
 8009382:	d402      	bmi.n	800938a <_fflush_r+0x32>
 8009384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009386:	f7ff fc46 	bl	8008c16 <__retarget_lock_acquire_recursive>
 800938a:	4628      	mov	r0, r5
 800938c:	4621      	mov	r1, r4
 800938e:	f7ff ff5f 	bl	8009250 <__sflush_r>
 8009392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009394:	07da      	lsls	r2, r3, #31
 8009396:	4605      	mov	r5, r0
 8009398:	d4e4      	bmi.n	8009364 <_fflush_r+0xc>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	059b      	lsls	r3, r3, #22
 800939e:	d4e1      	bmi.n	8009364 <_fflush_r+0xc>
 80093a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093a2:	f7ff fc39 	bl	8008c18 <__retarget_lock_release_recursive>
 80093a6:	e7dd      	b.n	8009364 <_fflush_r+0xc>

080093a8 <__swhatbuf_r>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b0:	2900      	cmp	r1, #0
 80093b2:	b096      	sub	sp, #88	@ 0x58
 80093b4:	4615      	mov	r5, r2
 80093b6:	461e      	mov	r6, r3
 80093b8:	da0d      	bge.n	80093d6 <__swhatbuf_r+0x2e>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093c0:	f04f 0100 	mov.w	r1, #0
 80093c4:	bf14      	ite	ne
 80093c6:	2340      	movne	r3, #64	@ 0x40
 80093c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093cc:	2000      	movs	r0, #0
 80093ce:	6031      	str	r1, [r6, #0]
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	b016      	add	sp, #88	@ 0x58
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	466a      	mov	r2, sp
 80093d8:	f000 f848 	bl	800946c <_fstat_r>
 80093dc:	2800      	cmp	r0, #0
 80093de:	dbec      	blt.n	80093ba <__swhatbuf_r+0x12>
 80093e0:	9901      	ldr	r1, [sp, #4]
 80093e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093ea:	4259      	negs	r1, r3
 80093ec:	4159      	adcs	r1, r3
 80093ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093f2:	e7eb      	b.n	80093cc <__swhatbuf_r+0x24>

080093f4 <__smakebuf_r>:
 80093f4:	898b      	ldrh	r3, [r1, #12]
 80093f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093f8:	079d      	lsls	r5, r3, #30
 80093fa:	4606      	mov	r6, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	d507      	bpl.n	8009410 <__smakebuf_r+0x1c>
 8009400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	2301      	movs	r3, #1
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	b003      	add	sp, #12
 800940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009410:	ab01      	add	r3, sp, #4
 8009412:	466a      	mov	r2, sp
 8009414:	f7ff ffc8 	bl	80093a8 <__swhatbuf_r>
 8009418:	9f00      	ldr	r7, [sp, #0]
 800941a:	4605      	mov	r5, r0
 800941c:	4639      	mov	r1, r7
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff f826 	bl	8008470 <_malloc_r>
 8009424:	b948      	cbnz	r0, 800943a <__smakebuf_r+0x46>
 8009426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942a:	059a      	lsls	r2, r3, #22
 800942c:	d4ee      	bmi.n	800940c <__smakebuf_r+0x18>
 800942e:	f023 0303 	bic.w	r3, r3, #3
 8009432:	f043 0302 	orr.w	r3, r3, #2
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	e7e2      	b.n	8009400 <__smakebuf_r+0xc>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	6020      	str	r0, [r4, #0]
 800943e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	9b01      	ldr	r3, [sp, #4]
 8009446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800944a:	b15b      	cbz	r3, 8009464 <__smakebuf_r+0x70>
 800944c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009450:	4630      	mov	r0, r6
 8009452:	f000 f81d 	bl	8009490 <_isatty_r>
 8009456:	b128      	cbz	r0, 8009464 <__smakebuf_r+0x70>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	431d      	orrs	r5, r3
 8009468:	81a5      	strh	r5, [r4, #12]
 800946a:	e7cf      	b.n	800940c <__smakebuf_r+0x18>

0800946c <_fstat_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d07      	ldr	r5, [pc, #28]	@ (800948c <_fstat_r+0x20>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	4611      	mov	r1, r2
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	f7f7 ffa0 	bl	80013be <_fstat>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	d102      	bne.n	8009488 <_fstat_r+0x1c>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	b103      	cbz	r3, 8009488 <_fstat_r+0x1c>
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	bf00      	nop
 800948c:	20000524 	.word	0x20000524

08009490 <_isatty_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d06      	ldr	r5, [pc, #24]	@ (80094ac <_isatty_r+0x1c>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7f7 ff9f 	bl	80013de <_isatty>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_isatty_r+0x1a>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_isatty_r+0x1a>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20000524 	.word	0x20000524

080094b0 <_init>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	bf00      	nop
 80094b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b6:	bc08      	pop	{r3}
 80094b8:	469e      	mov	lr, r3
 80094ba:	4770      	bx	lr

080094bc <_fini>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr
