
main_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08009864  08009864  0000a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080099bc  080099bc  0000a9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080099c4  080099c4  0000a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080099c8  080099c8  0000a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  080099cc  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004bc  20000070  08009a34  0000b070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000052c  08009a34  0000b52c  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 11 MB_MEM1       000000b0  20030028  20030028  0000c000  2**2
                  ALLOC
 12 .debug_info   00028899  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fcf  00000000  00000000  0003393d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027e0  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ea4  00000000  00000000  0003b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab33  00000000  00000000  0003cf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cadc  00000000  00000000  00067ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001125e0  00000000  00000000  000945a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a6b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b120  00000000  00000000  001a6bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001b1ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800984c 	.word	0x0800984c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800984c 	.word	0x0800984c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	4a0a      	ldr	r2, [pc, #40]	@ (8000548 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800051e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800052a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	021b      	lsls	r3, r3, #8
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	cafecafe 	.word	0xcafecafe

0800054c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <LL_LPM_EnableSleep+0x1c>)
 8000556:	f023 0304 	bic.w	r3, r3, #4
 800055a:	6113      	str	r3, [r2, #16]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <MX_APPE_Config+0x18>)
 8000572:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000576:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000578:	f000 f806 	bl	8000588 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800057c:	f000 f80b 	bl	8000596 <Config_HSE>

  return;
 8000580:	bf00      	nop
}
 8000582:	bd80      	pop	{r7, pc}
 8000584:	58004000 	.word	0x58004000

08000588 <Reset_Device>:
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
}
static void Reset_Device(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800058c:	bf00      	nop
}
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f007 fcd7 	bl	8007f50 <OTP_Read>
 80005a2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffae 	bl	8000510 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
}
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c6:	f001 fa43 	bl	8001a50 <HAL_GetTick>
 80005ca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d00a      	beq.n	80005ee <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80005d8:	f001 fa52 	bl	8001a80 <HAL_GetTickFreq>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e6:	e002      	b.n	80005ee <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005e8:	f7ff ffb0 	bl	800054c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80005ec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005ee:	f001 fa2f 	bl	8001a50 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f4      	bhi.n	80005e8 <HAL_Delay+0x2a>
  }
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f007 fde3 	bl	80081dc <TL_MM_EvtDone>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800062a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800062c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4313      	orrs	r3, r2
 8000634:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800063a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4013      	ands	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800065c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800065e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800066c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000674:	68fb      	ldr	r3, [r7, #12]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <__io_putchar>:
#define HAL_SMALL_WAIT  50

// check if necessary
// Define serial output function using UART2
int __io_putchar(int ch)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_SMALL_WAIT);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	2332      	movs	r3, #50	@ 0x32
 8000690:	2201      	movs	r2, #1
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <__io_putchar+0x20>)
 8000694:	f006 fac2 	bl	8006c1c <HAL_UART_Transmit>
    return 1;
 8000698:	2301      	movs	r3, #1
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002e8 	.word	0x200002e8

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f001 f962 	bl	8001974 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80006b0:	f7ff ff5c 	bl	800056c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f85c 	bl	8000770 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b8:	f000 f8ca 	bl	8000850 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80006bc:	f000 f9ae 	bl	8000a1c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fb44 	bl	8000d4c <MX_GPIO_Init>
  MX_DMA_Init();
 80006c4:	f000 fb30 	bl	8000d28 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fae2 	bl	8000c90 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80006cc:	f000 f9c2 	bl	8000a54 <MX_RTC_Init>
  MX_I2C1_Init();
 80006d0:	f000 f964 	bl	800099c <MX_I2C1_Init>
  MX_TIM2_Init();
 80006d4:	f000 fa46 	bl	8000b64 <MX_TIM2_Init>
  MX_TIM16_Init();
 80006d8:	f000 fab4 	bl	8000c44 <MX_TIM16_Init>
  MX_ADC1_Init();
 80006dc:	f000 f8d8 	bl	8000890 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006e0:	f000 f9ec 	bl	8000abc <MX_TIM1_Init>
  MX_RF_Init();
 80006e4:	f000 f9ae 	bl	8000a44 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  // check if anything else necessary and to put to header/source
  setvbuf(stdout, NULL, _IONBF, 0); // disable stdio output buffering for printf command
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <main+0xa8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6898      	ldr	r0, [r3, #8]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2202      	movs	r2, #2
 80006f2:	2100      	movs	r1, #0
 80006f4:	f008 fa48 	bl	8008b88 <setvbuf>
  printf("\n\n\nNew start\n");
 80006f8:	4816      	ldr	r0, [pc, #88]	@ (8000754 <main+0xac>)
 80006fa:	f008 fa3d 	bl	8008b78 <puts>

  // init DHT11
  init_dht11(&dht11, &htim16, TEMP_HUMID_GPIO_Port, TEMP_HUMID_Pin);
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000704:	4914      	ldr	r1, [pc, #80]	@ (8000758 <main+0xb0>)
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <main+0xb4>)
 8000708:	f000 ff6b 	bl	80015e2 <init_dht11>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 800070c:	2203      	movs	r2, #3
 800070e:	4914      	ldr	r1, [pc, #80]	@ (8000760 <main+0xb8>)
 8000710:	4814      	ldr	r0, [pc, #80]	@ (8000764 <main+0xbc>)
 8000712:	f001 fcd5 	bl	80020c0 <HAL_ADC_Start_DMA>

  if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 8000716:	4814      	ldr	r0, [pc, #80]	@ (8000768 <main+0xc0>)
 8000718:	f005 fa4c 	bl	8005bb4 <HAL_TIM_Base_Start_IT>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <main+0x7e>
    {
      /* Starting Error */
      Error_Handler();
 8000722:	f000 fb67 	bl	8000df4 <Error_Handler>
    /* USER CODE END WHILE */
//    MX_APPE_Process();

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072a:	f7ff ff48 	bl	80005be <HAL_Delay>
	// read temp sens
	readDHT11(&dht11);
 800072e:	480b      	ldr	r0, [pc, #44]	@ (800075c <main+0xb4>)
 8000730:	f000 ffa8 	bl	8001684 <readDHT11>
//  value_adc = HAL_ADC_GetValue(&hadc1);
//	  printf("ADC: %d\n", value_adc);

  	// toggle LED
    // printf
  printf("ADC1: %d, ADC2: %d, ADC3: %d\n", adc_buffer[0], adc_buffer[1], adc_buffer[2]);
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <main+0xb8>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <main+0xb8>)
 800073c:	885b      	ldrh	r3, [r3, #2]
 800073e:	461a      	mov	r2, r3
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <main+0xb8>)
 8000742:	889b      	ldrh	r3, [r3, #4]
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <main+0xc4>)
 8000746:	f008 f9af 	bl	8008aa8 <iprintf>
	HAL_Delay(500);
 800074a:	bf00      	nop
 800074c:	e7eb      	b.n	8000726 <main+0x7e>
 800074e:	bf00      	nop
 8000750:	20000020 	.word	0x20000020
 8000754:	08009864 	.word	0x08009864
 8000758:	2000029c 	.word	0x2000029c
 800075c:	20000384 	.word	0x20000384
 8000760:	2000037c 	.word	0x2000037c
 8000764:	2000008c 	.word	0x2000008c
 8000768:	20000204 	.word	0x20000204
 800076c:	08009874 	.word	0x08009874

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b09a      	sub	sp, #104	@ 0x68
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2248      	movs	r2, #72	@ 0x48
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f008 fb8e 	bl	8008ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80007a4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80007a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	f023 0303 	bic.w	r3, r3, #3
 80007b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ba:	4b24      	ldr	r3, [pc, #144]	@ (800084c <SystemClock_Config+0xdc>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <SystemClock_Config+0xdc>)
 80007c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <SystemClock_Config+0xdc>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80007d6:	232b      	movs	r3, #43	@ 0x2b
 80007d8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ea:	2340      	movs	r3, #64	@ 0x40
 80007ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f2:	2360      	movs	r3, #96	@ 0x60
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f6:	2305      	movs	r3, #5
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0320 	add.w	r3, r7, #32
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fd3e 	bl	8004284 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800080e:	f000 faf1 	bl	8000df4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000812:	236f      	movs	r3, #111	@ 0x6f
 8000814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000816:	2302      	movs	r3, #2
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2101      	movs	r1, #1
 8000832:	4618      	mov	r0, r3
 8000834:	f004 f89a 	bl	800496c <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800083e:	f000 fad9 	bl	8000df4 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3768      	adds	r7, #104	@ 0x68
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58000400 	.word	0x58000400

08000850 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2250      	movs	r2, #80	@ 0x50
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fb1f 	bl	8008ea0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000862:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000866:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000868:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800086e:	2300      	movs	r3, #0
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000872:	2310      	movs	r3, #16
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fcb4 	bl	80051e6 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000884:	f000 fab6 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	@ 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a6:	4b38      	ldr	r3, [pc, #224]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008a8:	4a38      	ldr	r2, [pc, #224]	@ (800098c <MX_ADC1_Init+0xfc>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80008ac:	4b36      	ldr	r3, [pc, #216]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ba:	4b33      	ldr	r3, [pc, #204]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c0:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008c8:	2208      	movs	r2, #8
 80008ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008da:	2203      	movs	r2, #3
 80008dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fa:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <MX_ADC1_Init+0xf8>)
 80008fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_ADC1_Init+0xf8>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090a:	481f      	ldr	r0, [pc, #124]	@ (8000988 <MX_ADC1_Init+0xf8>)
 800090c:	f001 fa8c 	bl	8001e28 <HAL_ADC_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000916:	f000 fa6d 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800091a:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_ADC1_Init+0x100>)
 800091c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091e:	2306      	movs	r3, #6
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000926:	237f      	movs	r3, #127	@ 0x7f
 8000928:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092a:	2304      	movs	r3, #4
 800092c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4814      	ldr	r0, [pc, #80]	@ (8000988 <MX_ADC1_Init+0xf8>)
 8000938:	f001 fc64 	bl	8002204 <HAL_ADC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000942:	f000 fa57 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_ADC1_Init+0x104>)
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094a:	230c      	movs	r3, #12
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_ADC1_Init+0xf8>)
 8000954:	f001 fc56 	bl	8002204 <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800095e:	f000 fa49 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <MX_ADC1_Init+0x108>)
 8000964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000966:	2312      	movs	r3, #18
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <MX_ADC1_Init+0xf8>)
 8000970:	f001 fc48 	bl	8002204 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800097a:	f000 fa3b 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000008c 	.word	0x2000008c
 800098c:	50040000 	.word	0x50040000
 8000990:	25b00200 	.word	0x25b00200
 8000994:	2a000400 	.word	0x2a000400
 8000998:	2e300800 	.word	0x2e300800

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <MX_I2C1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <MX_I2C1_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009d8:	f002 ff08 	bl	80037ec <HAL_I2C_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f000 fa07 	bl	8000df4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ea:	f002 ff9a 	bl	8003922 <HAL_I2CEx_ConfigAnalogFilter>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 f9fe 	bl	8000df4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009fc:	f002 ffdc 	bl	80039b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f9f5 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000150 	.word	0x20000150
 8000a14:	40005400 	.word	0x40005400
 8000a18:	00b07cb4 	.word	0x00b07cb4

08000a1c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_IPCC_Init+0x20>)
 8000a22:	4a07      	ldr	r2, [pc, #28]	@ (8000a40 <MX_IPCC_Init+0x24>)
 8000a24:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_IPCC_Init+0x20>)
 8000a28:	f003 f812 	bl	8003a50 <HAL_IPCC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000a32:	f000 f9df 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001a4 	.word	0x200001a4
 8000a40:	58000c00 	.word	0x58000c00

08000a44 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <MX_RTC_Init+0x64>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a66:	220f      	movs	r2, #15
 8000a68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a6c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000a70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a8a:	480a      	ldr	r0, [pc, #40]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000a8c:	f004 fe32 	bl	80056f4 <HAL_RTC_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f9ad 	bl	8000df4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_RTC_Init+0x60>)
 8000aa0:	f004 ff28 	bl	80058f4 <HAL_RTCEx_SetWakeUpTimer>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 f9a3 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001e0 	.word	0x200001e0
 8000ab8:	40002800 	.word	0x40002800

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000adc:	4a20      	ldr	r2, [pc, #128]	@ (8000b60 <MX_TIM1_Init+0xa4>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000-1;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000ae2:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8000ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000af0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b08:	4814      	ldr	r0, [pc, #80]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b0a:	f004 ff8e 	bl	8005a2a <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f96e 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b26:	f005 fb05 	bl	8006134 <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b30:	f000 f960 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_TIM1_Init+0xa0>)
 8000b46:	f005 ff7b 	bl	8006a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b50:	f000 f950 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000204 	.word	0x20000204
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000b8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000b92:	f240 123f 	movw	r2, #319	@ 0x13f
 8000b96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000ba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb2:	4823      	ldr	r0, [pc, #140]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bb4:	f005 f84c 	bl	8005c50 <HAL_TIM_PWM_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000bbe:	f000 f919 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bd2:	f005 ff35 	bl	8006a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000bdc:	f000 f90a 	bl	8000df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000bf8:	f005 f988 	bl	8005f0c <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000c02:	f000 f8f7 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	2208      	movs	r2, #8
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000c0e:	f005 f97d 	bl	8005f0c <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000c18:	f000 f8ec 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	220c      	movs	r2, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000c24:	f005 f972 	bl	8005f0c <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000c2e:	f000 f8e1 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c32:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <MX_TIM2_Init+0xdc>)
 8000c34:	f000 fac4 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000250 	.word	0x20000250

08000c44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c4a:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <MX_TIM16_Init+0x48>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c50:	221f      	movs	r2, #31
 8000c52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535-1;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c60:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_TIM16_Init+0x44>)
 8000c76:	f004 fed8 	bl	8005a2a <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000c80:	f000 f8b8 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000029c 	.word	0x2000029c
 8000c8c:	40014400 	.word	0x40014400

08000c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <MX_USART1_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cda:	f005 ff4f 	bl	8006b7c <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f886 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cec:	f007 f865 	bl	8007dba <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 f87d 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cfe:	f007 f89a 	bl	8007e36 <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f000 f874 	bl	8000df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000d0e:	f007 f81b 	bl	8007d48 <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f86c 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200002e8 	.word	0x200002e8
 8000d24:	40013800 	.word	0x40013800

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d2c:	2004      	movs	r0, #4
 8000d2e:	f7ff fc76 	bl	800061e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fc73 	bl	800061e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	200b      	movs	r0, #11
 8000d3e:	f002 f810 	bl	8002d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d42:	200b      	movs	r0, #11
 8000d44:	f002 f827 	bl	8002d96 <HAL_NVIC_EnableIRQ>

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d60:	2004      	movs	r0, #4
 8000d62:	f7ff fc75 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2002      	movs	r0, #2
 8000d68:	f7ff fc72 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff fc6f 	bl	8000650 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	2010      	movs	r0, #16
 8000d74:	f7ff fc6c 	bl	8000650 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	481b      	ldr	r0, [pc, #108]	@ (8000dec <MX_GPIO_Init+0xa0>)
 8000d7e:	f002 fcdf 	bl	8003740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8000d82:	2302      	movs	r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f002 fb4b 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_HUMID_Pin */
  GPIO_InitStruct.Pin = TEMP_HUMID_Pin;
 8000d9a:	2380      	movs	r3, #128	@ 0x80
 8000d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(TEMP_HUMID_GPIO_Port, &GPIO_InitStruct);
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f002 fb3f 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000db2:	2310      	movs	r3, #16
 8000db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4809      	ldr	r0, [pc, #36]	@ (8000dec <MX_GPIO_Init+0xa0>)
 8000dc8:	f002 fb32 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000dcc:	2380      	movs	r3, #128	@ 0x80
 8000dce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <MX_GPIO_Init+0xa4>)
 8000dde:	f002 fb27 	bl	8003430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	48001000 	.word	0x48001000
 8000df0:	48000400 	.word	0x48000400

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <Error_Handler+0x8>

08000e00 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_AHB2_GRP1_EnableClock>:
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4013      	ands	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e78:	68fb      	ldr	r3, [r7, #12]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ec6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000edc:	68fb      	ldr	r3, [r7, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000eee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000ef2:	f7ff ffaf 	bl	8000e54 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	202e      	movs	r0, #46	@ 0x2e
 8000efc:	f001 ff31 	bl	8002d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000f00:	202e      	movs	r0, #46	@ 0x2e
 8000f02:	f001 ff48 	bl	8002d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b09c      	sub	sp, #112	@ 0x70
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2250      	movs	r2, #80	@ 0x50
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f007 ffb7 	bl	8008ea0 <memset>
  if(hadc->Instance==ADC1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a32      	ldr	r2, [pc, #200]	@ (8001000 <HAL_ADC_MspInit+0xf4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d15c      	bne.n	8000ff6 <HAL_ADC_MspInit+0xea>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f40:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000f42:	2318      	movs	r3, #24
 8000f44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000f46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f50:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000f52:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f56:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000f58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f5c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 f93c 	bl	80051e6 <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8000f74:	f7ff ff3e 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f7c:	f7ff ff51 	bl	8000e22 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff ff4e 	bl	8000e22 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8000f86:	2370      	movs	r3, #112	@ 0x70
 8000f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9c:	f002 fa48 	bl	8003430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fa2:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <HAL_ADC_MspInit+0xfc>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fa8:	2205      	movs	r2, #5
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fba:	2280      	movs	r2, #128	@ 0x80
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fda:	480a      	ldr	r0, [pc, #40]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fdc:	f001 fef6 	bl	8002dcc <HAL_DMA_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000fe6:	f7ff ff05 	bl	8000df4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000fee:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_ADC_MspInit+0xf8>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3770      	adds	r7, #112	@ 0x70
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	50040000 	.word	0x50040000
 8001004:	200000f0 	.word	0x200000f0
 8001008:	40020008 	.word	0x40020008

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09c      	sub	sp, #112	@ 0x70
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2250      	movs	r2, #80	@ 0x50
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 ff37 	bl	8008ea0 <memset>
  if(hi2c->Instance==I2C1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a17      	ldr	r2, [pc, #92]	@ (8001094 <HAL_I2C_MspInit+0x88>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d126      	bne.n	800108a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800103c:	2304      	movs	r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001040:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4618      	mov	r0, r3
 800104c:	f004 f8cb 	bl	80051e6 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001056:	f7ff fecd 	bl	8000df4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2002      	movs	r0, #2
 800105c:	f7ff fee1 	bl	8000e22 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001060:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001064:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001066:	2312      	movs	r3, #18
 8001068:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001072:	2304      	movs	r3, #4
 8001074:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	@ (8001098 <HAL_I2C_MspInit+0x8c>)
 800107e:	f002 f9d7 	bl	8003430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001082:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001086:	f7ff fefe 	bl	8000e86 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800108a:	bf00      	nop
 800108c:	3770      	adds	r7, #112	@ 0x70
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400
 8001098:	48000400 	.word	0x48000400

0800109c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <HAL_IPCC_MspInit+0x44>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d113      	bne.n	80010d6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80010ae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80010b2:	f7ff fecf 	bl	8000e54 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	202c      	movs	r0, #44	@ 0x2c
 80010bc:	f001 fe51 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80010c0:	202c      	movs	r0, #44	@ 0x2c
 80010c2:	f001 fe68 	bl	8002d96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	202d      	movs	r0, #45	@ 0x2d
 80010cc:	f001 fe49 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80010d0:	202d      	movs	r0, #45	@ 0x2d
 80010d2:	f001 fe60 	bl	8002d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58000c00 	.word	0x58000c00

080010e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b096      	sub	sp, #88	@ 0x58
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	2250      	movs	r2, #80	@ 0x50
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f007 fed3 	bl	8008ea0 <memset>
  if(hrtc->Instance==RTC)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a0f      	ldr	r2, [pc, #60]	@ (800113c <HAL_RTC_MspInit+0x58>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d117      	bne.n	8001134 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001104:	f002 fd2a 	bl	8003b5c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800110c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800110e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001112:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4618      	mov	r0, r3
 800111a:	f004 f864 	bl	80051e6 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001124:	f7ff fe66 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001128:	f7ff fe6a 	bl	8000e00 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800112c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001130:	f7ff fea9 	bl	8000e86 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	@ 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40002800 	.word	0x40002800

08001140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_TIM_Base_MspInit+0x58>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10c      	bne.n	800116c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001156:	f7ff feaf 	bl	8000eb8 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2019      	movs	r0, #25
 8001160:	f001 fdff 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001164:	2019      	movs	r0, #25
 8001166:	f001 fe16 	bl	8002d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800116a:	e010      	b.n	800118e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_TIM_Base_MspInit+0x5c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10b      	bne.n	800118e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001176:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800117a:	f7ff fe9d 	bl	8000eb8 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2019      	movs	r0, #25
 8001184:	f001 fded 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001188:	2019      	movs	r0, #25
 800118a:	f001 fe04 	bl	8002d96 <HAL_NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40014400 	.word	0x40014400

080011a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b0:	d102      	bne.n	80011b8 <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff fe67 	bl	8000e86 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011e0:	d113      	bne.n	800120a <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff fe1d 	bl	8000e22 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = led_g_Pin|led_r_Pin|led_b_Pin;
 80011e8:	230d      	movs	r3, #13
 80011ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f0:	2302      	movs	r3, #2
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001206:	f002 f913 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09c      	sub	sp, #112	@ 0x70
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2250      	movs	r2, #80	@ 0x50
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f007 fe33 	bl	8008ea0 <memset>
  if(huart->Instance==USART1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1b      	ldr	r2, [pc, #108]	@ (80012ac <HAL_UART_MspInit+0x98>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d12e      	bne.n	80012a2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001244:	2301      	movs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4618      	mov	r0, r3
 8001252:	f003 ffc8 	bl	80051e6 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800125c:	f7ff fdca 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001260:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001264:	f7ff fe28 	bl	8000eb8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fdda 	bl	8000e22 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001272:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128e:	f002 f8cf 	bl	8003430 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2024      	movs	r0, #36	@ 0x24
 8001298:	f001 fd63 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129c:	2024      	movs	r0, #36	@ 0x24
 800129e:	f001 fd7a 	bl	8002d96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3770      	adds	r7, #112	@ 0x70
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013800 	.word	0x40013800

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001306:	f000 fb8f 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <DMA1_Channel1_IRQHandler+0x10>)
 8001316:	f001 ff3a 	bl	800318e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000f0 	.word	0x200000f0

08001324 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800132a:	f004 fce8 	bl	8005cfe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001330:	f004 fce5 	bl	8005cfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001334:	2110      	movs	r1, #16
 8001336:	4804      	ldr	r0, [pc, #16]	@ (8001348 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001338:	f002 fa1a 	bl	8003770 <HAL_GPIO_TogglePin>


  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000204 	.word	0x20000204
 8001344:	2000029c 	.word	0x2000029c
 8001348:	48001000 	.word	0x48001000

0800134c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USART1_IRQHandler+0x10>)
 8001352:	f005 fcf1 	bl	8006d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002e8 	.word	0x200002e8

08001360 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001364:	f007 f8aa 	bl	80084bc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001370:	f007 f8fa 	bl	8008568 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800137c:	f002 fa12 	bl	80037a4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e00a      	b.n	80013ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001396:	f3af 8000 	nop.w
 800139a:	4601      	mov	r1, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf0      	blt.n	8001396 <_read+0x12>
  }

  return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e009      	b.n	80013e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f953 	bl	8000684 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf1      	blt.n	80013d0 <_write+0x12>
  }
  return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_close>:

int _close(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141e:	605a      	str	r2, [r3, #4]
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_isatty>:

int _isatty(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f007 fd64 	bl	8008f5c <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20030000 	.word	0x20030000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000394 	.word	0x20000394
 80014c8:	20000530 	.word	0x20000530

080014cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <SystemInit+0x98>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <SystemInit+0x98>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80014f8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <SystemInit+0x9c>)
 8001506:	4013      	ands	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001512:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001516:	f023 0305 	bic.w	r3, r3, #5
 800151a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001536:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <SystemInit+0xa0>)
 8001538:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <SystemInit+0xa0>)
 8001540:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800154c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001550:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	faf6fefb 	.word	0xfaf6fefb
 800156c:	22041000 	.word	0x22041000

08001570 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001570:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001572:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001574:	3304      	adds	r3, #4

08001576 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001576:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001578:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800157a:	d3f9      	bcc.n	8001570 <CopyDataInit>
  bx lr
 800157c:	4770      	bx	lr

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800157e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001580:	3004      	adds	r0, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001582:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>
  bx lr
 8001586:	4770      	bx	lr

08001588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800158a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800158c:	f7ff ff9e 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001590:	480b      	ldr	r0, [pc, #44]	@ (80015c0 <LoopForever+0x6>)
 8001592:	490c      	ldr	r1, [pc, #48]	@ (80015c4 <LoopForever+0xa>)
 8001594:	4a0c      	ldr	r2, [pc, #48]	@ (80015c8 <LoopForever+0xe>)
 8001596:	2300      	movs	r3, #0
 8001598:	f7ff ffed 	bl	8001576 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800159c:	480b      	ldr	r0, [pc, #44]	@ (80015cc <LoopForever+0x12>)
 800159e:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <LoopForever+0x16>)
 80015a0:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <LoopForever+0x1a>)
 80015a2:	2300      	movs	r3, #0
 80015a4:	f7ff ffe7 	bl	8001576 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015a8:	480b      	ldr	r0, [pc, #44]	@ (80015d8 <LoopForever+0x1e>)
 80015aa:	490c      	ldr	r1, [pc, #48]	@ (80015dc <LoopForever+0x22>)
 80015ac:	2300      	movs	r3, #0
 80015ae:	f7ff ffe8 	bl	8001582 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015b2:	f007 fcd9 	bl	8008f68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015b6:	f7ff f877 	bl	80006a8 <main>

080015ba <LoopForever>:

LoopForever:
  b LoopForever
 80015ba:	e7fe      	b.n	80015ba <LoopForever>
  ldr   r0, =_estack
 80015bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000070 	.word	0x20000070
 80015c8:	080099cc 	.word	0x080099cc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015cc:	200300d8 	.word	0x200300d8
 80015d0:	200300d8 	.word	0x200300d8
 80015d4:	08009a34 	.word	0x08009a34
  INIT_BSS _sbss, _ebss
 80015d8:	20000070 	.word	0x20000070
 80015dc:	2000052c 	.word	0x2000052c

080015e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_IRQHandler>

080015e2 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	809a      	strh	r2, [r3, #4]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b088      	sub	sp, #32
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d111      	bne.n	8001654 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	889b      	ldrh	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f107 020c 	add.w	r2, r7, #12
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f001 feef 	bl	8003430 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8001652:	e013      	b.n	800167c <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d110      	bne.n	800167c <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	889b      	ldrh	r3, [r3, #4]
 800165e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f107 020c 	add.w	r2, r7, #12
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f001 feda 	bl	8003430 <HAL_GPIO_Init>
}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	@ 0x50
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001690:	2300      	movs	r3, #0
 8001692:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001694:	2300      	movs	r3, #0
 8001696:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 80016b2:	2101      	movs	r1, #1
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffaa 	bl	800160e <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	f002 f83b 	bl	8003740 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80016ca:	2012      	movs	r0, #18
 80016cc:	f7fe ff77 	bl	80005be <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 f9fd 	bl	8005ad8 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80016de:	2100      	movs	r1, #0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff94 	bl	800160e <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80016f0:	e00b      	b.n	800170a <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001700:	d903      	bls.n	800170a <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8001702:	b662      	cpsie	i
}
 8001704:	bf00      	nop
			__enable_irq();
			return 0;
 8001706:	2300      	movs	r3, #0
 8001708:	e130      	b.n	800196c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	889b      	ldrh	r3, [r3, #4]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f001 fffb 	bl	8003710 <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	2b01      	cmp	r3, #1
 800171e:	d0e8      	beq.n	80016f2 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800172a:	e00b      	b.n	8001744 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	b29b      	uxth	r3, r3
 8001736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800173a:	d903      	bls.n	8001744 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 800173c:	b662      	cpsie	i
}
 800173e:	bf00      	nop
			__enable_irq();
			return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e113      	b.n	800196c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	889b      	ldrh	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f001 ffde 	bl	8003710 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0e8      	beq.n	800172c <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800176e:	e00b      	b.n	8001788 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	b29b      	uxth	r3, r3
 800177a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800177e:	d903      	bls.n	8001788 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8001780:	b662      	cpsie	i
}
 8001782:	bf00      	nop
			__enable_irq();
			return 0;
 8001784:	2300      	movs	r3, #0
 8001786:	e0f1      	b.n	800196c <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f001 ffbc 	bl	8003710 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d0e8      	beq.n	8001770 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 80017a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80017aa:	2b4a      	cmp	r3, #74	@ 0x4a
 80017ac:	d80c      	bhi.n	80017c8 <readDHT11+0x144>
 80017ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80017b0:	2b55      	cmp	r3, #85	@ 0x55
 80017b2:	d909      	bls.n	80017c8 <readDHT11+0x144>
 80017b4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80017b6:	2b4a      	cmp	r3, #74	@ 0x4a
 80017b8:	d806      	bhi.n	80017c8 <readDHT11+0x144>
 80017ba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80017bc:	2b55      	cmp	r3, #85	@ 0x55
 80017be:	d903      	bls.n	80017c8 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 80017c0:	b662      	cpsie	i
}
 80017c2:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e0d1      	b.n	800196c <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80017cc:	e05d      	b.n	800188a <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80017d8:	e00b      	b.n	80017f2 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017e8:	d903      	bls.n	80017f2 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 80017ea:	b662      	cpsie	i
}
 80017ec:	bf00      	nop
				__enable_irq();
				return 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e0bc      	b.n	800196c <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f001 ff87 	bl	8003710 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0e8      	beq.n	80017da <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001812:	e00b      	b.n	800182c <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	b29b      	uxth	r3, r3
 800181e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001822:	d903      	bls.n	800182c <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8001824:	b662      	cpsie	i
}
 8001826:	bf00      	nop
				__enable_irq();
				return 0;
 8001828:	2300      	movs	r3, #0
 800182a:	e09f      	b.n	800196c <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	889b      	ldrh	r3, [r3, #4]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f001 ff6a 	bl	8003710 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d0e8      	beq.n	8001814 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 800184c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800184e:	2b14      	cmp	r3, #20
 8001850:	d906      	bls.n	8001860 <readDHT11+0x1dc>
 8001852:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001854:	2b1d      	cmp	r3, #29
 8001856:	d803      	bhi.n	8001860 <readDHT11+0x1dc>
		{
			mBit = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800185e:	e008      	b.n	8001872 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8001860:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001862:	2b3c      	cmp	r3, #60	@ 0x3c
 8001864:	d905      	bls.n	8001872 <readDHT11+0x1ee>
 8001866:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001868:	2b4f      	cmp	r3, #79	@ 0x4f
 800186a:	d802      	bhi.n	8001872 <readDHT11+0x1ee>
		{
			 mBit = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8001872:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001876:	b2d9      	uxtb	r1, r3
 8001878:	f107 0208 	add.w	r2, r7, #8
 800187c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800187e:	4413      	add	r3, r2
 8001880:	460a      	mov	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8001884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001886:	3301      	adds	r3, #1
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
 800188a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800188c:	2b27      	cmp	r3, #39	@ 0x27
 800188e:	dd9e      	ble.n	80017ce <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4618      	mov	r0, r3
 8001896:	f004 f965 	bl	8005b64 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 800189a:	b662      	cpsie	i
}
 800189c:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80018a2:	e011      	b.n	80018c8 <readDHT11+0x244>
	{
		humVal += mData[i];
 80018a4:	f107 0208 	add.w	r2, r7, #8
 80018a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018aa:	4413      	add	r3, r2
 80018ac:	781a      	ldrb	r2, [r3, #0]
 80018ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018b2:	4413      	add	r3, r2
 80018b4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 80018b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 80018c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018c4:	3301      	adds	r3, #1
 80018c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80018c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ca:	2b07      	cmp	r3, #7
 80018cc:	ddea      	ble.n	80018a4 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80018ce:	2310      	movs	r3, #16
 80018d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018d2:	e011      	b.n	80018f8 <readDHT11+0x274>
	{
		tempVal += mData[i];
 80018d4:	f107 0208 	add.w	r2, r7, #8
 80018d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018da:	4413      	add	r3, r2
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018e2:	4413      	add	r3, r2
 80018e4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 80018e8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 80018f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018f4:	3301      	adds	r3, #1
 80018f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018fa:	2b17      	cmp	r3, #23
 80018fc:	ddea      	ble.n	80018d4 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 80018fe:	2320      	movs	r3, #32
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001902:	e011      	b.n	8001928 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 8001904:	f107 0208 	add.w	r2, r7, #8
 8001908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800190a:	4413      	add	r3, r2
 800190c:	781a      	ldrb	r2, [r3, #0]
 800190e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001912:	4413      	add	r3, r2
 8001914:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 8001918:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 8001922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001924:	3301      	adds	r3, #1
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800192a:	2b27      	cmp	r3, #39	@ 0x27
 800192c:	ddea      	ble.n	8001904 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 800192e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 8001938:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 8001942:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 800194c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001950:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001954:	4413      	add	r3, r2
 8001956:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001960:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001968:	735a      	strb	r2, [r3, #13]


	return 1;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3750      	adds	r7, #80	@ 0x50
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <HAL_Init+0x3c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <HAL_Init+0x3c>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198a:	2003      	movs	r0, #3
 800198c:	f001 f9de 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001990:	200f      	movs	r0, #15
 8001992:	f000 f80f 	bl	80019b4 <HAL_InitTick>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	71fb      	strb	r3, [r7, #7]
 80019a0:	e001      	b.n	80019a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019a2:	f7ff faa2 	bl	8000eea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	58004000 	.word	0x58004000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80019c0:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_InitTick+0x6c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d024      	beq.n	8001a12 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019c8:	f003 f97c 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_InitTick+0x6c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 f9e6 	bl	8002db2 <HAL_SYSTICK_Config>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10f      	bne.n	8001a0c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d809      	bhi.n	8001a06 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f2:	2200      	movs	r2, #0
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	f04f 30ff 	mov.w	r0, #4294967295
 80019fa:	f001 f9b2 	bl	8002d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fe:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <HAL_InitTick+0x70>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e004      	b.n	8001a16 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e001      	b.n	8001a16 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000010 	.word	0x20000010
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	20000398 	.word	0x20000398

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000398 	.word	0x20000398

08001a68 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_GetTickPrio+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_GetTickFreq+0x14>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000010 	.word	0x20000010

08001a98 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3360      	adds	r3, #96	@ 0x60
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <LL_ADC_SetOffset+0x44>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	03fff000 	.word	0x03fff000

08001b48 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3360      	adds	r3, #96	@ 0x60
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3360      	adds	r3, #96	@ 0x60
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bc2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3330      	adds	r3, #48	@ 0x30
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	211f      	movs	r1, #31
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 011f 	and.w	r1, r3, #31
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3314      	adds	r3, #20
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0d1b      	lsrs	r3, r3, #20
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2107      	movs	r1, #7
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0d1b      	lsrs	r3, r3, #20
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0318 	and.w	r3, r3, #24
 8001ca2:	4908      	ldr	r1, [pc, #32]	@ (8001cc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca4:	40d9      	lsrs	r1, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	400b      	ands	r3, r1
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	0007ffff 	.word	0x0007ffff

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_IsEnabled+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_IsEnabled+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d101      	bne.n	8001e18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e12e      	b.n	80020a4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff f859 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff3d 	bl	8001cec <LL_ADC_IsDeepPowerDownEnabled>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff23 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff58 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff3c 	bl	8001d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e9c:	4b83      	ldr	r3, [pc, #524]	@ (80020ac <HAL_ADC_Init+0x284>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	4a83      	ldr	r2, [pc, #524]	@ (80020b0 <HAL_ADC_Init+0x288>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f9      	bne.n	8001eb2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff3a 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff73 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80c7 	bne.w	8002092 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80c3 	bne.w	8002092 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f14:	f043 0202 	orr.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff33 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f2c:	4861      	ldr	r0, [pc, #388]	@ (80020b4 <HAL_ADC_Init+0x28c>)
 8001f2e:	f7ff ff2d 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	485e      	ldr	r0, [pc, #376]	@ (80020b8 <HAL_ADC_Init+0x290>)
 8001f40:	f7ff fdaa 	bl	8001a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e5b      	ldrb	r3, [r3, #25]
 8001f48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f62:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001f64:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d106      	bne.n	8001f84 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	045b      	lsls	r3, r3, #17
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b45      	ldr	r3, [pc, #276]	@ (80020bc <HAL_ADC_Init+0x294>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff0e 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8001fbe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff1b 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 8001fca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13d      	bne.n	800204e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d13a      	bne.n	800204e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fdc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fe4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ff4:	f023 0302 	bic.w	r3, r3, #2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	69b9      	ldr	r1, [r7, #24]
 8001ffe:	430b      	orrs	r3, r1
 8002000:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002008:	2b01      	cmp	r3, #1
 800200a:	d118      	bne.n	800203e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202e:	430a      	orrs	r2, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	611a      	str	r2, [r3, #16]
 800203c:	e007      	b.n	800204e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10c      	bne.n	8002070 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f023 010f 	bic.w	r1, r3, #15
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	631a      	str	r2, [r3, #48]	@ 0x30
 800206e:	e007      	b.n	8002080 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 020f 	bic.w	r2, r2, #15
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f023 0303 	bic.w	r3, r3, #3
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000008 	.word	0x20000008
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	50040000 	.word	0x50040000
 80020b8:	50040300 	.word	0x50040300
 80020bc:	fff0c007 	.word	0xfff0c007

080020c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fe82 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d167      	bne.n	80021ac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Start_DMA+0x2a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e063      	b.n	80021b2 <HAL_ADC_Start_DMA+0xf2>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fc4c 	bl	8002990 <ADC_Enable>
 80020f8:	4603      	mov	r3, r0
 80020fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d14f      	bne.n	80021a2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	f023 0206 	bic.w	r2, r3, #6
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	659a      	str	r2, [r3, #88]	@ 0x58
 800212e:	e002      	b.n	8002136 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	4a20      	ldr	r2, [pc, #128]	@ (80021bc <HAL_ADC_Start_DMA+0xfc>)
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <HAL_ADC_Start_DMA+0x100>)
 8002144:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_ADC_Start_DMA+0x104>)
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	221c      	movs	r2, #28
 8002154:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0210 	orr.w	r2, r2, #16
 800216c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3340      	adds	r3, #64	@ 0x40
 8002188:	4619      	mov	r1, r3
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f000 fec5 	bl	8002f1c <HAL_DMA_Start_IT>
 8002192:	4603      	mov	r3, r0
 8002194:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fe09 	bl	8001db2 <LL_ADC_REG_StartConversion>
 80021a0:	e006      	b.n	80021b0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021aa:	e001      	b.n	80021b0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	08002a85 	.word	0x08002a85
 80021c0:	08002b5d 	.word	0x08002b5d
 80021c4:	08002b79 	.word	0x08002b79

080021c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b6      	sub	sp, #216	@ 0xd8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x22>
 8002222:	2302      	movs	r3, #2
 8002224:	e39f      	b.n	8002966 <HAL_ADC_ConfigChannel+0x762>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fdd1 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 8384 	bne.w	8002948 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	f7ff fcbf 	bl	8001bd0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fdbf 	bl	8001dda <LL_ADC_REG_IsConversionOngoing>
 800225c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fdcb 	bl	8001e00 <LL_ADC_INJ_IsConversionOngoing>
 800226a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800226e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 81a6 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 81a1 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	461a      	mov	r2, r3
 8002290:	f7ff fcca 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	08db      	lsrs	r3, r3, #3
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d00a      	beq.n	80022cc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6919      	ldr	r1, [r3, #16]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022c6:	f7ff fc1b 	bl	8001b00 <LL_ADC_SetOffset>
 80022ca:	e17b      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fc38 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0xf4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fc2d 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	f003 021f 	and.w	r2, r3, #31
 80022f6:	e01e      	b.n	8002336 <HAL_ADC_ConfigChannel+0x132>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fc22 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800231a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800231e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e004      	b.n	8002334 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800232a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_ADC_ConfigChannel+0x14a>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0e9b      	lsrs	r3, r3, #26
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	e018      	b.n	8002380 <HAL_ADC_ConfigChannel+0x17c>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800236a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e004      	b.n	8002380 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	429a      	cmp	r2, r3
 8002382:	d106      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fbf1 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fbd5 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <HAL_ADC_ConfigChannel+0x1ba>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fbca 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	e01e      	b.n	80023fc <HAL_ADC_ConfigChannel+0x1f8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fbbf 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80023dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80023e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e004      	b.n	80023fa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80023f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x210>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	e018      	b.n	8002446 <HAL_ADC_ConfigChannel+0x242>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800242c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e004      	b.n	8002446 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800243c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	429a      	cmp	r2, r3
 8002448:	d106      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fb8e 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fb72 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x280>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb67 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	f003 021f 	and.w	r2, r3, #31
 8002482:	e01e      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x2be>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fb5c 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80024a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80024aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e004      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80024b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_ADC_ConfigChannel+0x2d6>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	e016      	b.n	8002508 <HAL_ADC_ConfigChannel+0x304>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80024ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80024f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e004      	b.n	8002508 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80024fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb2d 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2103      	movs	r1, #3
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fb11 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x342>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2103      	movs	r1, #3
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fb06 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	e017      	b.n	8002576 <HAL_ADC_ConfigChannel+0x372>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2103      	movs	r1, #3
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fafb 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800255e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002560:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002562:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002568:	2320      	movs	r3, #32
 800256a:	e003      	b.n	8002574 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800256c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x38a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e011      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x3ae>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800259c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800259e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80025a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80025aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d106      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	2103      	movs	r1, #3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fad8 	bl	8001b74 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fbdf 	bl	8001d8c <LL_ADC_IsEnabled>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 81c2 	bne.w	800295a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f7ff fb4c 	bl	8001c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002828 <HAL_ADC_ConfigChannel+0x624>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f040 8130 	bne.w	8002854 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_ADC_ConfigChannel+0x418>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	3301      	adds	r3, #1
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2b09      	cmp	r3, #9
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e019      	b.n	8002650 <HAL_ADC_ConfigChannel+0x44c>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800262a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800262c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800262e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2b09      	cmp	r3, #9
 8002648:	bf94      	ite	ls
 800264a:	2301      	movls	r3, #1
 800264c:	2300      	movhi	r3, #0
 800264e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002650:	2b00      	cmp	r3, #0
 8002652:	d079      	beq.n	8002748 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x46c>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	069b      	lsls	r3, r3, #26
 800266a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800266e:	e015      	b.n	800269c <HAL_ADC_ConfigChannel+0x498>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800267e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002680:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e003      	b.n	8002694 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800268c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x4b8>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	3301      	adds	r3, #1
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	e017      	b.n	80026ec <HAL_ADC_ConfigChannel+0x4e8>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80026ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80026ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80026d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x50e>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	3301      	adds	r3, #1
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	e018      	b.n	8002744 <HAL_ADC_ConfigChannel+0x540>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e003      	b.n	8002736 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800272e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002744:	430b      	orrs	r3, r1
 8002746:	e080      	b.n	800284a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x560>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	069b      	lsls	r3, r3, #26
 800275e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002762:	e015      	b.n	8002790 <HAL_ADC_ConfigChannel+0x58c>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002774:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e003      	b.n	8002788 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x5ac>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	e017      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x5dc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	61fb      	str	r3, [r7, #28]
  return result;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	ea42 0103 	orr.w	r1, r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10d      	bne.n	800280c <HAL_ADC_ConfigChannel+0x608>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	3301      	adds	r3, #1
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	3b1e      	subs	r3, #30
 8002804:	051b      	lsls	r3, r3, #20
 8002806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800280a:	e01d      	b.n	8002848 <HAL_ADC_ConfigChannel+0x644>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	613b      	str	r3, [r7, #16]
  return result;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e005      	b.n	8002834 <HAL_ADC_ConfigChannel+0x630>
 8002828:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	3b1e      	subs	r3, #30
 8002842:	051b      	lsls	r3, r3, #20
 8002844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002848:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284e:	4619      	mov	r1, r3
 8002850:	f7ff f9ea 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <HAL_ADC_ConfigChannel+0x76c>)
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d07c      	beq.n	800295a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002860:	4844      	ldr	r0, [pc, #272]	@ (8002974 <HAL_ADC_ConfigChannel+0x770>)
 8002862:	f7ff f93f 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 8002866:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800286a:	4843      	ldr	r0, [pc, #268]	@ (8002978 <HAL_ADC_ConfigChannel+0x774>)
 800286c:	f7ff fa8e 	bl	8001d8c <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d15e      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a40      	ldr	r2, [pc, #256]	@ (800297c <HAL_ADC_ConfigChannel+0x778>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d127      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x6cc>
 8002880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002884:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d121      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a39      	ldr	r2, [pc, #228]	@ (8002978 <HAL_ADC_ConfigChannel+0x774>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d161      	bne.n	800295a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800289a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800289e:	4619      	mov	r1, r3
 80028a0:	4834      	ldr	r0, [pc, #208]	@ (8002974 <HAL_ADC_ConfigChannel+0x770>)
 80028a2:	f7ff f90c 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <HAL_ADC_ConfigChannel+0x77c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	4a35      	ldr	r2, [pc, #212]	@ (8002984 <HAL_ADC_ConfigChannel+0x780>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ce:	e044      	b.n	800295a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002988 <HAL_ADC_ConfigChannel+0x784>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d113      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x6fe>
 80028da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a23      	ldr	r2, [pc, #140]	@ (8002978 <HAL_ADC_ConfigChannel+0x774>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d134      	bne.n	800295a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f8:	4619      	mov	r1, r3
 80028fa:	481e      	ldr	r0, [pc, #120]	@ (8002974 <HAL_ADC_ConfigChannel+0x770>)
 80028fc:	f7ff f8df 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002900:	e02b      	b.n	800295a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_ADC_ConfigChannel+0x788>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d126      	bne.n	800295a <HAL_ADC_ConfigChannel+0x756>
 800290c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d120      	bne.n	800295a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_ADC_ConfigChannel+0x774>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11b      	bne.n	800295a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002926:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800292a:	4619      	mov	r1, r3
 800292c:	4811      	ldr	r0, [pc, #68]	@ (8002974 <HAL_ADC_ConfigChannel+0x770>)
 800292e:	f7ff f8c6 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
 8002932:	e012      	b.n	800295a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002946:	e008      	b.n	800295a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002966:	4618      	mov	r0, r3
 8002968:	37d8      	adds	r7, #216	@ 0xd8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	80080000 	.word	0x80080000
 8002974:	50040300 	.word	0x50040300
 8002978:	50040000 	.word	0x50040000
 800297c:	c7520000 	.word	0xc7520000
 8002980:	20000008 	.word	0x20000008
 8002984:	053e2d63 	.word	0x053e2d63
 8002988:	cb840000 	.word	0xcb840000
 800298c:	80000001 	.word	0x80000001

08002990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f9f3 	bl	8001d8c <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d15e      	bne.n	8002a6a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	4b30      	ldr	r3, [pc, #192]	@ (8002a74 <ADC_Enable+0xe4>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e04a      	b.n	8002a6c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f9c2 	bl	8001d64 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029e0:	4825      	ldr	r0, [pc, #148]	@ (8002a78 <ADC_Enable+0xe8>)
 80029e2:	f7ff f87f 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00f      	beq.n	8002a10 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f0:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <ADC_Enable+0xec>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <ADC_Enable+0xf0>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	3301      	adds	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a02:	e002      	b.n	8002a0a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002a10:	f7ff f81e 	bl	8001a50 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a16:	e021      	b.n	8002a5c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f9b5 	bl	8001d8c <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f999 	bl	8001d64 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a32:	f7ff f80d 	bl	8001a50 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d90d      	bls.n	8002a5c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a44:	f043 0210 	orr.w	r2, r3, #16
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d1d6      	bne.n	8002a18 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	8000003f 	.word	0x8000003f
 8002a78:	50040300 	.word	0x50040300
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	053e2d63 	.word	0x053e2d63

08002a84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d14b      	bne.n	8002b36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d021      	beq.n	8002afc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f874 	bl	8001baa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d032      	beq.n	8002b2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d12b      	bne.n	8002b2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002afa:	e018      	b.n	8002b2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff fb4a 	bl	80021c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b34:	e00e      	b.n	8002b54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff fb54 	bl	80021f0 <HAL_ADC_ErrorCallback>
}
 8002b48:	e004      	b.n	8002b54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff fb36 	bl	80021dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f043 0204 	orr.w	r2, r3, #4
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fb26 	bl	80021f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db0b      	blt.n	8002c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4907      	ldr	r1, [pc, #28]	@ (8002c48 <__NVIC_EnableIRQ+0x38>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2001      	movs	r0, #1
 8002c32:	fa00 f202 	lsl.w	r2, r0, r2
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	@ (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	@ (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	@ 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
         );
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f7ff ff8e 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff29 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d70:	f7ff ff40 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ff90 	bl	8002ca0 <NVIC_EncodePriority>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff5f 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff33 	bl	8002c10 <__NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffa4 	bl	8002d08 <SysTick_Config>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e08e      	b.n	8002efc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b47      	ldr	r3, [pc, #284]	@ (8002f04 <HAL_DMA_Init+0x138>)
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d80f      	bhi.n	8002e0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b45      	ldr	r3, [pc, #276]	@ (8002f08 <HAL_DMA_Init+0x13c>)
 8002df2:	4413      	add	r3, r2
 8002df4:	4a45      	ldr	r2, [pc, #276]	@ (8002f0c <HAL_DMA_Init+0x140>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a42      	ldr	r2, [pc, #264]	@ (8002f10 <HAL_DMA_Init+0x144>)
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e08:	e00e      	b.n	8002e28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <HAL_DMA_Init+0x148>)
 8002e12:	4413      	add	r3, r2
 8002e14:	4a3d      	ldr	r2, [pc, #244]	@ (8002f0c <HAL_DMA_Init+0x140>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a3c      	ldr	r2, [pc, #240]	@ (8002f18 <HAL_DMA_Init+0x14c>)
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa74 	bl	8003368 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e88:	d102      	bne.n	8002e90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e98:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ea6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_DMA_Init+0x106>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d80c      	bhi.n	8002ed2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fa93 	bl	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	e008      	b.n	8002ee4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40020407 	.word	0x40020407
 8002f08:	bffdfff8 	.word	0xbffdfff8
 8002f0c:	cccccccd 	.word	0xcccccccd
 8002f10:	40020000 	.word	0x40020000
 8002f14:	bffdfbf8 	.word	0xbffdfbf8
 8002f18:	40020400 	.word	0x40020400

08002f1c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_Start_IT+0x20>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e066      	b.n	800300a <HAL_DMA_Start_IT+0xee>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d155      	bne.n	8002ffc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f9b9 	bl	80032ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 020e 	orr.w	r2, r2, #14
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e00f      	b.n	8002fb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 020a 	orr.w	r2, r2, #10
 8002fb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e005      	b.n	8003008 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e04f      	b.n	80030c4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e040      	b.n	80030c4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020e 	bic.w	r2, r2, #14
 8003050:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003060:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f003 021c 	and.w	r2, r3, #28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f202 	lsl.w	r2, r1, r2
 8003084:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800308e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d005      	beq.n	80030f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2204      	movs	r2, #4
 80030ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e047      	b.n	8003184 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 020e 	bic.w	r2, r2, #14
 8003102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003122:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003128:	f003 021c 	and.w	r2, r3, #28
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f202 	lsl.w	r2, r1, r2
 8003136:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003140:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003158:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003162:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
    }
  }
  return status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f003 031c 	and.w	r3, r3, #28
 80031ae:	2204      	movs	r2, #4
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d026      	beq.n	8003208 <HAL_DMA_IRQHandler+0x7a>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d021      	beq.n	8003208 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0204 	bic.w	r2, r2, #4
 80031e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f003 021c 	and.w	r2, r3, #28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	2104      	movs	r1, #4
 80031f0:	fa01 f202 	lsl.w	r2, r1, r2
 80031f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d071      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003206:	e06c      	b.n	80032e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320c:	f003 031c 	and.w	r3, r3, #28
 8003210:	2202      	movs	r2, #2
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d02e      	beq.n	800327a <HAL_DMA_IRQHandler+0xec>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d029      	beq.n	800327a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10b      	bne.n	800324c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 020a 	bic.w	r2, r2, #10
 8003242:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	f003 021c 	and.w	r2, r3, #28
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	2102      	movs	r1, #2
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d038      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003278:	e033      	b.n	80032e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f003 031c 	and.w	r3, r3, #28
 8003282:	2208      	movs	r2, #8
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02a      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x156>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d025      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 020e 	bic.w	r2, r2, #14
 80032a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ac:	f003 021c 	and.w	r2, r3, #28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
}
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003302:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003314:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f003 021c 	and.w	r2, r3, #28
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d108      	bne.n	800334c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800334a:	e007      	b.n	800335c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d80a      	bhi.n	8003392 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003388:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003390:	e007      	b.n	80033a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	009a      	lsls	r2, r3, #2
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800339c:	4413      	add	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3b08      	subs	r3, #8
 80033aa:	4a0c      	ldr	r2, [pc, #48]	@ (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033b8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2201      	movs	r2, #1
 80033c2:	409a      	lsls	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40020407 	.word	0x40020407
 80033d8:	4002081c 	.word	0x4002081c
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	40020880 	.word	0x40020880

080033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a09      	ldr	r2, [pc, #36]	@ (800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003408:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	1000823f 	.word	0x1000823f
 800342c:	40020940 	.word	0x40020940

08003430 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343e:	e14c      	b.n	80036da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 813e 	beq.w	80036d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d005      	beq.n	8003470 <HAL_GPIO_Init+0x40>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d130      	bne.n	80034d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034a6:	2201      	movs	r2, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 0201 	and.w	r2, r3, #1
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d017      	beq.n	800350e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d123      	bne.n	8003562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	08da      	lsrs	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3208      	adds	r2, #8
 8003522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	08da      	lsrs	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3208      	adds	r2, #8
 800355c:	6939      	ldr	r1, [r7, #16]
 800355e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8098 	beq.w	80036d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80035a4:	4a54      	ldr	r2, [pc, #336]	@ (80036f8 <HAL_GPIO_Init+0x2c8>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035ce:	d019      	beq.n	8003604 <HAL_GPIO_Init+0x1d4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4a      	ldr	r2, [pc, #296]	@ (80036fc <HAL_GPIO_Init+0x2cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_GPIO_Init+0x1d0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a49      	ldr	r2, [pc, #292]	@ (8003700 <HAL_GPIO_Init+0x2d0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00d      	beq.n	80035fc <HAL_GPIO_Init+0x1cc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a48      	ldr	r2, [pc, #288]	@ (8003704 <HAL_GPIO_Init+0x2d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <HAL_GPIO_Init+0x1c8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a47      	ldr	r2, [pc, #284]	@ (8003708 <HAL_GPIO_Init+0x2d8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_GPIO_Init+0x1c4>
 80035f0:	2304      	movs	r3, #4
 80035f2:	e008      	b.n	8003606 <HAL_GPIO_Init+0x1d6>
 80035f4:	2307      	movs	r3, #7
 80035f6:	e006      	b.n	8003606 <HAL_GPIO_Init+0x1d6>
 80035f8:	2303      	movs	r3, #3
 80035fa:	e004      	b.n	8003606 <HAL_GPIO_Init+0x1d6>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e002      	b.n	8003606 <HAL_GPIO_Init+0x1d6>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_GPIO_Init+0x1d6>
 8003604:	2300      	movs	r3, #0
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	f002 0203 	and.w	r2, r2, #3
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	4093      	lsls	r3, r2
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003616:	4938      	ldr	r1, [pc, #224]	@ (80036f8 <HAL_GPIO_Init+0x2c8>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003624:	4b39      	ldr	r3, [pc, #228]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003648:	4a30      	ldr	r2, [pc, #192]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800364e:	4b2f      	ldr	r3, [pc, #188]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003672:	4a26      	ldr	r2, [pc, #152]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003678:	4b24      	ldr	r3, [pc, #144]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80036a6:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 80036a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036cc:	4a0f      	ldr	r2, [pc, #60]	@ (800370c <HAL_GPIO_Init+0x2dc>)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3301      	adds	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f aeab 	bne.w	8003440 <HAL_GPIO_Init+0x10>
  }
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40010000 	.word	0x40010000
 80036fc:	48000400 	.word	0x48000400
 8003700:	48000800 	.word	0x48000800
 8003704:	48000c00 	.word	0x48000c00
 8003708:	48001000 	.word	0x48001000
 800370c:	58000800 	.word	0x58000800

08003710 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e001      	b.n	8003732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003750:	787b      	ldrb	r3, [r7, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800375c:	e002      	b.n	8003764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43d9      	mvns	r1, r3
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	400b      	ands	r3, r1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	619a      	str	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <HAL_HSEM_IRQHandler+0x30>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_HSEM_IRQHandler+0x30>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4906      	ldr	r1, [pc, #24]	@ (80037d4 <HAL_HSEM_IRQHandler+0x30>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <HAL_HSEM_IRQHandler+0x30>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f807 	bl	80037d8 <HAL_HSEM_FreeCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	58001500 	.word	0x58001500

080037d8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e08d      	b.n	800391a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fbfa 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	@ 0x24
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800383c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800384c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	e006      	b.n	8003874 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003872:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d108      	bne.n	800388e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	e007      	b.n	800389e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69d9      	ldr	r1, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	d138      	bne.n	80039aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003942:	2302      	movs	r3, #2
 8003944:	e032      	b.n	80039ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2224      	movs	r2, #36	@ 0x24
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003974:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d139      	bne.n	8003a42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039d8:	2302      	movs	r3, #2
 80039da:	e033      	b.n	8003a44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	@ 0x24
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01e      	beq.n	8003aa0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003a62:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_IPCC_Init+0x60>)
 8003a64:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fb12 	bl	800109c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003a78:	68b8      	ldr	r0, [r7, #8]
 8003a7a:	f000 f85b 	bl	8003b34 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f82c 	bl	8003ae8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003a9e:	e001      	b.n	8003aa4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	58000c00 	.word	0x58000c00

08003ab4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e00f      	b.n	8003b16 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	4a0b      	ldr	r2, [pc, #44]	@ (8003b2c <IPCC_SetDefaultCallbacks+0x44>)
 8003b00:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3306      	adds	r3, #6
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a08      	ldr	r2, [pc, #32]	@ (8003b30 <IPCC_SetDefaultCallbacks+0x48>)
 8003b0e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d9ec      	bls.n	8003af6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	08003ab5 	.word	0x08003ab5
 8003b30:	08003acf 	.word	0x08003acf

08003b34 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003b48:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223f      	movs	r2, #63	@ 0x3f
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58000400 	.word	0x58000400

08003b7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003b80:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	58000400 	.word	0x58000400

08003b98 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003baa:	d101      	bne.n	8003bb0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_RCC_HSE_Enable>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_RCC_HSE_Disable>:
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_HSE_IsReady>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c0a:	d101      	bne.n	8003c10 <LL_RCC_HSE_IsReady+0x18>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <LL_RCC_HSE_IsReady+0x1a>
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_RCC_HSI_Enable>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_HSI_Disable>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <LL_RCC_HSI_IsReady>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6a:	d101      	bne.n	8003c70 <LL_RCC_HSI_IsReady+0x18>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LL_RCC_HSI_IsReady+0x1a>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_RCC_HSI48_Enable>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_HSI48_Disable>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_HSI48_IsReady>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d101      	bne.n	8003d02 <LL_RCC_HSI48_IsReady+0x18>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <LL_RCC_HSI48_IsReady+0x1a>
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_LSE_Enable>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d26:	bf00      	nop
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_LSE_Disable>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_LSE_EnableBypass>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_RCC_LSE_DisableBypass>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_LSE_IsReady>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d101      	bne.n	8003dae <LL_RCC_LSE_IsReady+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_RCC_LSE_IsReady+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_LSI1_Enable>:
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_LSI1_Disable>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_RCC_LSI1_IsReady>:
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d101      	bne.n	8003e16 <LL_RCC_LSI1_IsReady+0x18>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <LL_RCC_LSI1_IsReady+0x1a>
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_RCC_LSI2_Enable>:
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <LL_RCC_LSI2_Disable>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_RCC_LSI2_IsReady>:
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d101      	bne.n	8003e7e <LL_RCC_LSI2_IsReady+0x18>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <LL_RCC_LSI2_IsReady+0x1a>
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_RCC_LSI2_SetTrimming>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_RCC_MSI_Enable>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6013      	str	r3, [r2, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_RCC_MSI_Disable>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_MSI_IsReady>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d101      	bne.n	8003f0a <LL_RCC_MSI_IsReady+0x16>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <LL_RCC_MSI_IsReady+0x18>
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_MSI_SetRange>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_MSI_GetRange>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f4e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2bb0      	cmp	r3, #176	@ 0xb0
 8003f54:	d901      	bls.n	8003f5a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f56:	23b0      	movs	r3, #176	@ 0xb0
 8003f58:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003f5a:	687b      	ldr	r3, [r7, #4]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_SetSysClkSource>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 0203 	bic.w	r2, r3, #3
 8003fa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_RCC_GetSysClkSource>:
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_RCC_SetAHBPrescaler>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004006:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800400a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <LL_RCC_SetAHB4Prescaler>:
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004032:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004036:	f023 020f 	bic.w	r2, r3, #15
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_SetAPB1Prescaler>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_RCC_SetAPB2Prescaler>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800408e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_GetAHBPrescaler>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_GetAHB4Prescaler>:
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_GetAPB1Prescaler>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_RCC_GetAPB2Prescaler>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004138:	6013      	str	r3, [r2, #0]
}
 800413a:	bf00      	nop
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004156:	d101      	bne.n	800415c <LL_RCC_PLL_IsReady+0x18>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <LL_RCC_PLL_IsReady+0x1a>
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0303 	and.w	r3, r3, #3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041dc:	d101      	bne.n	80041e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80041ee:	b480      	push	{r7}
 80041f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004202:	d101      	bne.n	8004208 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004228:	d101      	bne.n	800422e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800424c:	d101      	bne.n	8004252 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800426c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004270:	d101      	bne.n	8004276 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b08d      	sub	sp, #52	@ 0x34
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e363      	b.n	800495e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 808d 	beq.w	80043be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a4:	f7ff fe89 	bl	8003fba <LL_RCC_GetSysClkSource>
 80042a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042aa:	f7ff ff82 	bl	80041b2 <LL_RCC_PLL_GetMainSource>
 80042ae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_RCC_OscConfig+0x3e>
 80042b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d147      	bne.n	800434c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d144      	bne.n	800434c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e347      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80042d2:	f7ff fe34 	bl	8003f3e <LL_RCC_MSI_GetRange>
 80042d6:	4603      	mov	r3, r0
 80042d8:	429c      	cmp	r4, r3
 80042da:	d914      	bls.n	8004306 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd2f 	bl	8004d44 <RCC_SetFlashLatencyFromMSIRange>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e336      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fe0e 	bl	8003f16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fe32 	bl	8003f68 <LL_RCC_MSI_SetCalibTrimming>
 8004304:	e013      	b.n	800432e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fe03 	bl	8003f16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fe27 	bl	8003f68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fd10 	bl	8004d44 <RCC_SetFlashLatencyFromMSIRange>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e317      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800432e:	f000 fcc9 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004332:	4603      	mov	r3, r0
 8004334:	4aa4      	ldr	r2, [pc, #656]	@ (80045c8 <HAL_RCC_OscConfig+0x344>)
 8004336:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004338:	4ba4      	ldr	r3, [pc, #656]	@ (80045cc <HAL_RCC_OscConfig+0x348>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd fb39 	bl	80019b4 <HAL_InitTick>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d039      	beq.n	80043bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e308      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01e      	beq.n	8004392 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004354:	f7ff fdb0 	bl	8003eb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004358:	f7fd fb7a 	bl	8001a50 <HAL_GetTick>
 800435c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004360:	f7fd fb76 	bl	8001a50 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e2f5      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004372:	f7ff fdbf 	bl	8003ef4 <LL_RCC_MSI_IsReady>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f1      	beq.n	8004360 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fdc8 	bl	8003f16 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fdec 	bl	8003f68 <LL_RCC_MSI_SetCalibTrimming>
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004392:	f7ff fda0 	bl	8003ed6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004396:	f7fd fb5b 	bl	8001a50 <HAL_GetTick>
 800439a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800439e:	f7fd fb57 	bl	8001a50 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e2d6      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80043b0:	f7ff fda0 	bl	8003ef4 <LL_RCC_MSI_IsReady>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f1      	bne.n	800439e <HAL_RCC_OscConfig+0x11a>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d047      	beq.n	800445a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ca:	f7ff fdf6 	bl	8003fba <LL_RCC_GetSysClkSource>
 80043ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d0:	f7ff feef 	bl	80041b2 <LL_RCC_PLL_GetMainSource>
 80043d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x164>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d108      	bne.n	80043f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d105      	bne.n	80043f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d134      	bne.n	800445a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e2b4      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_OscConfig+0x180>
 80043fe:	f7ff fbdd 	bl	8003bbc <LL_RCC_HSE_Enable>
 8004402:	e001      	b.n	8004408 <HAL_RCC_OscConfig+0x184>
 8004404:	f7ff fbe9 	bl	8003bda <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd fb1e 	bl	8001a50 <HAL_GetTick>
 8004414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd fb1a 	bl	8001a50 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	@ 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e299      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800442a:	f7ff fbe5 	bl	8003bf8 <LL_RCC_HSE_IsReady>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f1      	beq.n	8004418 <HAL_RCC_OscConfig+0x194>
 8004434:	e011      	b.n	800445a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fd fb0b 	bl	8001a50 <HAL_GetTick>
 800443a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443e:	f7fd fb07 	bl	8001a50 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b64      	cmp	r3, #100	@ 0x64
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e286      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004450:	f7ff fbd2 	bl	8003bf8 <LL_RCC_HSE_IsReady>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f1      	bne.n	800443e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04c      	beq.n	8004500 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004466:	f7ff fda8 	bl	8003fba <LL_RCC_GetSysClkSource>
 800446a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800446c:	f7ff fea1 	bl	80041b2 <LL_RCC_PLL_GetMainSource>
 8004470:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d005      	beq.n	8004484 <HAL_RCC_OscConfig+0x200>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d10e      	bne.n	800449c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d10b      	bne.n	800449c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e266      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fbf1 	bl	8003c7c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800449a:	e031      	b.n	8004500 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d019      	beq.n	80044d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	f7ff fbba 	bl	8003c1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fad2 	bl	8001a50 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fd face 	bl	8001a50 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e24d      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044c2:	f7ff fbc9 	bl	8003c58 <LL_RCC_HSI_IsReady>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f1      	beq.n	80044b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fbd3 	bl	8003c7c <LL_RCC_HSI_SetCalibTrimming>
 80044d6:	e013      	b.n	8004500 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d8:	f7ff fbaf 	bl	8003c3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fab8 	bl	8001a50 <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fd fab4 	bl	8001a50 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e233      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044f6:	f7ff fbaf 	bl	8003c58 <LL_RCC_HSI_IsReady>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f1      	bne.n	80044e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a3 	beq.w	8004660 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d076      	beq.n	8004610 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d046      	beq.n	80045bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800452e:	f7ff fc66 	bl	8003dfe <LL_RCC_LSI1_IsReady>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d113      	bne.n	8004560 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004538:	f7ff fc3f 	bl	8003dba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800453c:	f7fd fa88 	bl	8001a50 <HAL_GetTick>
 8004540:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004544:	f7fd fa84 	bl	8001a50 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e203      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004556:	f7ff fc52 	bl	8003dfe <LL_RCC_LSI1_IsReady>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f1      	beq.n	8004544 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004560:	f7ff fc5f 	bl	8003e22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd fa74 	bl	8001a50 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800456c:	f7fd fa70 	bl	8001a50 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b03      	cmp	r3, #3
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1ef      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800457e:	f7ff fc72 	bl	8003e66 <LL_RCC_LSI2_IsReady>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f1      	beq.n	800456c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fc7c 	bl	8003e8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004592:	f7ff fc23 	bl	8003ddc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fd fa5b 	bl	8001a50 <HAL_GetTick>
 800459a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800459e:	f7fd fa57 	bl	8001a50 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e1d6      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045b0:	f7ff fc25 	bl	8003dfe <LL_RCC_LSI1_IsReady>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f1      	bne.n	800459e <HAL_RCC_OscConfig+0x31a>
 80045ba:	e051      	b.n	8004660 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80045bc:	f7ff fbfd 	bl	8003dba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd fa46 	bl	8001a50 <HAL_GetTick>
 80045c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045c6:	e00c      	b.n	80045e2 <HAL_RCC_OscConfig+0x35e>
 80045c8:	20000008 	.word	0x20000008
 80045cc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045d0:	f7fd fa3e 	bl	8001a50 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1bd      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045e2:	f7ff fc0c 	bl	8003dfe <LL_RCC_LSI1_IsReady>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f1      	beq.n	80045d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80045ec:	f7ff fc2a 	bl	8003e44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045f2:	f7fd fa2d 	bl	8001a50 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1ac      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004604:	f7ff fc2f 	bl	8003e66 <LL_RCC_LSI2_IsReady>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f1      	bne.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 800460e:	e027      	b.n	8004660 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004610:	f7ff fc18 	bl	8003e44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd fa1c 	bl	8001a50 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800461c:	f7fd fa18 	bl	8001a50 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e197      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800462e:	f7ff fc1a 	bl	8003e66 <LL_RCC_LSI2_IsReady>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f1      	bne.n	800461c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004638:	f7ff fbd0 	bl	8003ddc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fd fa08 	bl	8001a50 <HAL_GetTick>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004644:	f7fd fa04 	bl	8001a50 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e183      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004656:	f7ff fbd2 	bl	8003dfe <LL_RCC_LSI1_IsReady>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f1      	bne.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466c:	4ba7      	ldr	r3, [pc, #668]	@ (800490c <HAL_RCC_OscConfig+0x688>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d114      	bne.n	80046a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004678:	f7ff fa70 	bl	8003b5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467c:	f7fd f9e8 	bl	8001a50 <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004684:	f7fd f9e4 	bl	8001a50 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e163      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004696:	4b9d      	ldr	r3, [pc, #628]	@ (800490c <HAL_RCC_OscConfig+0x688>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0x42c>
 80046aa:	f7ff fb30 	bl	8003d0e <LL_RCC_LSE_Enable>
 80046ae:	e00c      	b.n	80046ca <HAL_RCC_OscConfig+0x446>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d104      	bne.n	80046c2 <HAL_RCC_OscConfig+0x43e>
 80046b8:	f7ff fb4b 	bl	8003d52 <LL_RCC_LSE_EnableBypass>
 80046bc:	f7ff fb27 	bl	8003d0e <LL_RCC_LSE_Enable>
 80046c0:	e003      	b.n	80046ca <HAL_RCC_OscConfig+0x446>
 80046c2:	f7ff fb35 	bl	8003d30 <LL_RCC_LSE_Disable>
 80046c6:	f7ff fb55 	bl	8003d74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d014      	beq.n	80046fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7fd f9bd 	bl	8001a50 <HAL_GetTick>
 80046d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fd f9b9 	bl	8001a50 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e136      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80046f0:	f7ff fb51 	bl	8003d96 <LL_RCC_LSE_IsReady>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ef      	beq.n	80046da <HAL_RCC_OscConfig+0x456>
 80046fa:	e013      	b.n	8004724 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd f9a8 	bl	8001a50 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004702:	e00a      	b.n	800471a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fd f9a4 	bl	8001a50 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e121      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800471a:	f7ff fb3c 	bl	8003d96 <LL_RCC_LSE_IsReady>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ef      	bne.n	8004704 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02c      	beq.n	800478a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	2b00      	cmp	r3, #0
 8004736:	d014      	beq.n	8004762 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004738:	f7ff fab5 	bl	8003ca6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fd f988 	bl	8001a50 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004744:	f7fd f984 	bl	8001a50 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e103      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004756:	f7ff fac8 	bl	8003cea <LL_RCC_HSI48_IsReady>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f1      	beq.n	8004744 <HAL_RCC_OscConfig+0x4c0>
 8004760:	e013      	b.n	800478a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004762:	f7ff fab1 	bl	8003cc8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd f973 	bl	8001a50 <HAL_GetTick>
 800476a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800476e:	f7fd f96f 	bl	8001a50 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0ee      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004780:	f7ff fab3 	bl	8003cea <LL_RCC_HSI48_IsReady>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f1      	bne.n	800476e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80e4 	beq.w	800495c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004794:	f7ff fc11 	bl	8003fba <LL_RCC_GetSysClkSource>
 8004798:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	f040 80b4 	bne.w	8004914 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0203 	and.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d123      	bne.n	8004802 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d11c      	bne.n	8004802 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d114      	bne.n	8004802 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10d      	bne.n	8004802 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d05d      	beq.n	80048be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	d058      	beq.n	80048ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0a1      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800481a:	f7ff fc84 	bl	8004126 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800481e:	f7fd f917 	bl	8001a50 <HAL_GetTick>
 8004822:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004826:	f7fd f913 	bl	8001a50 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e092      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ef      	bne.n	8004826 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	4b30      	ldr	r3, [pc, #192]	@ (8004910 <HAL_RCC_OscConfig+0x68c>)
 800484e:	4013      	ands	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800485e:	0212      	lsls	r2, r2, #8
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004866:	4311      	orrs	r1, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004872:	430a      	orrs	r2, r1
 8004874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004878:	4313      	orrs	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800487c:	f7ff fc44 	bl	8004108 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004890:	f7fd f8de 	bl	8001a50 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd f8da 	bl	8001a50 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e059      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ef      	beq.n	8004898 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b8:	e050      	b.n	800495c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e04f      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d147      	bne.n	800495c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048cc:	f7ff fc1c 	bl	8004108 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048e0:	f7fd f8b6 	bl	8001a50 <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd f8b2 	bl	8001a50 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e031      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ef      	beq.n	80048e8 <HAL_RCC_OscConfig+0x664>
 8004908:	e028      	b.n	800495c <HAL_RCC_OscConfig+0x6d8>
 800490a:	bf00      	nop
 800490c:	58000400 	.word	0x58000400
 8004910:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d01e      	beq.n	8004958 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491a:	f7ff fc04 	bl	8004126 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fd f897 	bl	8001a50 <HAL_GetTick>
 8004922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fd f893 	bl	8001a50 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e012      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ef      	bne.n	8004926 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004950:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <HAL_RCC_OscConfig+0x6e4>)
 8004952:	4013      	ands	r3, r2
 8004954:	60cb      	str	r3, [r1, #12]
 8004956:	e001      	b.n	800495c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3734      	adds	r7, #52	@ 0x34
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}
 8004966:	bf00      	nop
 8004968:	eefefffc 	.word	0xeefefffc

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e12d      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b98      	ldr	r3, [pc, #608]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d91b      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b95      	ldr	r3, [pc, #596]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4993      	ldr	r1, [pc, #588]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fd f857 	bl	8001a50 <HAL_GetTick>
 80049a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049a6:	f7fd f853 	bl	8001a50 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e111      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b8:	4b8a      	ldr	r3, [pc, #552]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d1ef      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fafb 	bl	8003fd2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049dc:	f7fd f838 	bl	8001a50 <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049e4:	f7fd f834 	bl	8001a50 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0f2      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049f6:	f7ff fbe8 	bl	80041ca <LL_RCC_IsActiveFlag_HPRE>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f1      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d016      	beq.n	8004a3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff faf2 	bl	8003ffa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a16:	f7fd f81b 	bl	8001a50 <HAL_GetTick>
 8004a1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a1e:	f7fd f817 	bl	8001a50 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0d5      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a30:	f7ff fbdd 	bl	80041ee <LL_RCC_IsActiveFlag_C2HPRE>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f1      	beq.n	8004a1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff faeb 	bl	8004026 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a50:	f7fc fffe 	bl	8001a50 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a58:	f7fc fffa 	bl	8001a50 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0b8      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a6a:	f7ff fbd3 	bl	8004214 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f1      	beq.n	8004a58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d016      	beq.n	8004aae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fae5 	bl	8004054 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a8a:	f7fc ffe1 	bl	8001a50 <HAL_GetTick>
 8004a8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a92:	f7fc ffdd 	bl	8001a50 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e09b      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004aa4:	f7ff fbc9 	bl	800423a <LL_RCC_IsActiveFlag_PPRE1>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f1      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d017      	beq.n	8004aea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fadb 	bl	800407c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ac6:	f7fc ffc3 	bl	8001a50 <HAL_GetTick>
 8004aca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ace:	f7fc ffbf 	bl	8001a50 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e07d      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ae0:	f7ff fbbd 	bl	800425e <LL_RCC_IsActiveFlag_PPRE2>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f1      	beq.n	8004ace <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d043      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d106      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004afe:	f7ff f87b 	bl	8003bf8 <LL_RCC_HSE_IsReady>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11e      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e067      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004b14:	f7ff fb16 	bl	8004144 <LL_RCC_PLL_IsReady>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d113      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e05c      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b2a:	f7ff f9e3 	bl	8003ef4 <LL_RCC_MSI_IsReady>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e051      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b38:	f7ff f88e 	bl	8003c58 <LL_RCC_HSI_IsReady>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e04a      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fa21 	bl	8003f92 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b50:	f7fc ff7e 	bl	8001a50 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fc ff7a 	bl	8001a50 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e036      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	f7ff fa24 	bl	8003fba <LL_RCC_GetSysClkSource>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d1ec      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7e:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d21b      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8c:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0207 	bic.w	r2, r3, #7
 8004b94:	4913      	ldr	r1, [pc, #76]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9c:	f7fc ff58 	bl	8001a50 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ba4:	f7fc ff54 	bl	8001a50 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e012      	b.n	8004bdc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCC_ClockConfig+0x278>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1ef      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bc4:	f000 f87e 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4a07      	ldr	r2, [pc, #28]	@ (8004be8 <HAL_RCC_ClockConfig+0x27c>)
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004bce:	f7fc ff4b 	bl	8001a68 <HAL_GetTickPrio>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fc feed 	bl	80019b4 <HAL_InitTick>
 8004bda:	4603      	mov	r3, r0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	58004000 	.word	0x58004000
 8004be8:	20000008 	.word	0x20000008

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf2:	f7ff f9e2 	bl	8003fba <LL_RCC_GetSysClkSource>
 8004bf6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004bfe:	f7ff f99e 	bl	8003f3e <LL_RCC_MSI_GetRange>
 8004c02:	4603      	mov	r3, r0
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e04b      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d102      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c1a:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e045      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d10a      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c26:	f7fe ffb7 	bl	8003b98 <LL_RCC_HSE_IsEnabledDiv2>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d102      	bne.n	8004c36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c30:	4b22      	ldr	r3, [pc, #136]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e03a      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e037      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c3c:	f7ff fab9 	bl	80041b2 <LL_RCC_PLL_GetMainSource>
 8004c40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d003      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x64>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_GetSysClockFreq+0x6a>
 8004c4e:	e00d      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c50:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c52:	60bb      	str	r3, [r7, #8]
        break;
 8004c54:	e015      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c56:	f7fe ff9f 	bl	8003b98 <LL_RCC_HSE_IsEnabledDiv2>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c60:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c64:	e00d      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004c66:	4b16      	ldr	r3, [pc, #88]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c68:	60bb      	str	r3, [r7, #8]
        break;
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c6c:	f7ff f967 	bl	8003f3e <LL_RCC_MSI_GetRange>
 8004c70:	4603      	mov	r3, r0
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7e:	60bb      	str	r3, [r7, #8]
        break;
 8004c80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004c82:	f7ff fa71 	bl	8004168 <LL_RCC_PLL_GetN>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	fb03 f402 	mul.w	r4, r3, r2
 8004c8e:	f7ff fa84 	bl	800419a <LL_RCC_PLL_GetDivider>
 8004c92:	4603      	mov	r3, r0
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	3301      	adds	r3, #1
 8004c98:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c9c:	f7ff fa71 	bl	8004182 <LL_RCC_PLL_GetR>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	0f5b      	lsrs	r3, r3, #29
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004caa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd90      	pop	{r4, r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	08009920 	.word	0x08009920
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	01e84800 	.word	0x01e84800

08004cc4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b598      	push	{r3, r4, r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004cc8:	f7ff ff90 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	f7ff f9e9 	bl	80040a4 <LL_RCC_GetAHBPrescaler>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a03      	ldr	r2, [pc, #12]	@ (8004ce8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd98      	pop	{r3, r4, r7, pc}
 8004ce8:	080098c0 	.word	0x080098c0

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b598      	push	{r3, r4, r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cf0:	f7ff ffe8 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	f7ff f9ef 	bl	80040d8 <LL_RCC_GetAPB1Prescaler>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	4a04      	ldr	r2, [pc, #16]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd98      	pop	{r3, r4, r7, pc}
 8004d14:	08009900 	.word	0x08009900

08004d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d18:	b598      	push	{r3, r4, r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d1c:	f7ff ffd2 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d20:	4604      	mov	r4, r0
 8004d22:	f7ff f9e5 	bl	80040f0 <LL_RCC_GetAPB2Prescaler>
 8004d26:	4603      	mov	r3, r0
 8004d28:	0adb      	lsrs	r3, r3, #11
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd98      	pop	{r3, r4, r7, pc}
 8004d40:	08009900 	.word	0x08009900

08004d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004d50:	d903      	bls.n	8004d5a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e007      	b.n	8004d6a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	4a11      	ldr	r2, [pc, #68]	@ (8004da8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d6a:	f7ff f9a7 	bl	80040bc <LL_RCC_GetAHB4Prescaler>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	4a0d      	ldr	r2, [pc, #52]	@ (8004dac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	0c9c      	lsrs	r4, r3, #18
 8004d8e:	f7fe fef5 	bl	8003b7c <HAL_PWREx_GetVoltageRange>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4619      	mov	r1, r3
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f80c 	bl	8004db4 <RCC_SetFlashLatency>
 8004d9c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08009920 	.word	0x08009920
 8004dac:	080098c0 	.word	0x080098c0
 8004db0:	431bde83 	.word	0x431bde83

08004db4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b093      	sub	sp, #76	@ 0x4c
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004dbe:	4b37      	ldr	r3, [pc, #220]	@ (8004e9c <RCC_SetFlashLatency+0xe8>)
 8004dc0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004dca:	4a35      	ldr	r2, [pc, #212]	@ (8004ea0 <RCC_SetFlashLatency+0xec>)
 8004dcc:	f107 031c 	add.w	r3, r7, #28
 8004dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004dd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ea4 <RCC_SetFlashLatency+0xf0>)
 8004dd8:	f107 040c 	add.w	r4, r7, #12
 8004ddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004de2:	2300      	movs	r3, #0
 8004de4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dec:	d11a      	bne.n	8004e24 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004df2:	e013      	b.n	8004e1c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3348      	adds	r3, #72	@ 0x48
 8004dfa:	443b      	add	r3, r7
 8004dfc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d807      	bhi.n	8004e16 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3348      	adds	r3, #72	@ 0x48
 8004e0c:	443b      	add	r3, r7
 8004e0e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e12:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004e14:	e020      	b.n	8004e58 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e18:	3301      	adds	r3, #1
 8004e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d9e8      	bls.n	8004df4 <RCC_SetFlashLatency+0x40>
 8004e22:	e019      	b.n	8004e58 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e28:	e013      	b.n	8004e52 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	3348      	adds	r3, #72	@ 0x48
 8004e30:	443b      	add	r3, r7
 8004e32:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d807      	bhi.n	8004e4c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	3348      	adds	r3, #72	@ 0x48
 8004e42:	443b      	add	r3, r7
 8004e44:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e48:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004e4a:	e005      	b.n	8004e58 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e4e:	3301      	adds	r3, #1
 8004e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d9e8      	bls.n	8004e2a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004e58:	4b13      	ldr	r3, [pc, #76]	@ (8004ea8 <RCC_SetFlashLatency+0xf4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 0207 	bic.w	r2, r3, #7
 8004e60:	4911      	ldr	r1, [pc, #68]	@ (8004ea8 <RCC_SetFlashLatency+0xf4>)
 8004e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e68:	f7fc fdf2 	bl	8001a50 <HAL_GetTick>
 8004e6c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e6e:	e008      	b.n	8004e82 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e70:	f7fc fdee 	bl	8001a50 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e007      	b.n	8004e92 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e82:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <RCC_SetFlashLatency+0xf4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1ef      	bne.n	8004e70 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	374c      	adds	r7, #76	@ 0x4c
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08009894 	.word	0x08009894
 8004ea0:	080098a4 	.word	0x080098a4
 8004ea4:	080098b0 	.word	0x080098b0
 8004ea8:	58004000 	.word	0x58004000

08004eac <LL_RCC_LSE_IsEnabled>:
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <LL_RCC_LSE_IsEnabled+0x18>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <LL_RCC_LSE_IsEnabled+0x1a>
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_RCC_LSE_IsReady>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d101      	bne.n	8004ee8 <LL_RCC_LSE_IsReady+0x18>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <LL_RCC_LSE_IsReady+0x1a>
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_SetRFWKPClockSource>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_SetSMPSClockSource>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	f023 0203 	bic.w	r2, r3, #3
 8004f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <LL_RCC_SetSMPSPrescaler>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_RCC_SetUSARTClockSource>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f80:	f023 0203 	bic.w	r2, r3, #3
 8004f84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <LL_RCC_SetLPUARTClockSource>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_SetI2CClockSource>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <LL_RCC_SetLPTIMClockSource>:
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800500e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	43db      	mvns	r3, r3
 800501a:	401a      	ands	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <LL_RCC_SetSAIClockSource>:
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800503e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005046:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800504a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <LL_RCC_SetRNGClockSource>:
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_RCC_SetCLK48ClockSource>:
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_SetUSBClockSource>:
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ffe3 	bl	800508e <LL_RCC_SetCLK48ClockSource>
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <LL_RCC_SetADCClockSource>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80050d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_SetRTCClockSource>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005110:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <LL_RCC_GetRTCClockSource>:
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_RCC_ForceBackupDomainReset>:
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800515a:	bf00      	nop
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005170:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LL_RCC_PLLSAI1_Enable>:
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800518a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005194:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005198:	6013      	str	r3, [r2, #0]
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_PLLSAI1_Disable>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_PLLSAI1_IsReady>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d4:	d101      	bne.n	80051da <LL_RCC_PLLSAI1_IsReady+0x18>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051ee:	2300      	movs	r3, #0
 80051f0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051f2:	2300      	movs	r3, #0
 80051f4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d034      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800520a:	d021      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800520c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005210:	d81b      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005216:	d01d      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005218:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800521c:	d815      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005226:	d110      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005236:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005238:	e00d      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f947 	bl	80054d2 <RCCEx_PLLSAI1_ConfigNP>
 8005244:	4603      	mov	r3, r0
 8005246:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005248:	e005      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	77fb      	strb	r3, [r7, #31]
        break;
 800524e:	e002      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fee8 	bl	8005036 <LL_RCC_SetSAIClockSource>
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005274:	2b00      	cmp	r3, #0
 8005276:	d046      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005278:	f7ff ff56 	bl	8005128 <LL_RCC_GetRTCClockSource>
 800527c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	d03c      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005288:	f7fe fc68 	bl	8003b5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff30 	bl	80050fc <LL_RCC_SetRTCClockSource>
 800529c:	e02e      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80052a8:	f7ff ff4b 	bl	8005142 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80052ac:	f7ff ff5a 	bl	8005164 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80052be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80052c8:	f7ff fdf0 	bl	8004eac <LL_RCC_LSE_IsEnabled>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d114      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052d2:	f7fc fbbd 	bl	8001a50 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80052d8:	e00b      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fc fbb9 	bl	8001a50 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d902      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	77fb      	strb	r3, [r7, #31]
              break;
 80052f0:	e004      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80052f2:	f7ff fded 	bl	8004ed0 <LL_RCC_LSE_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d1ee      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80052fc:	7ffb      	ldrb	r3, [r7, #31]
 80052fe:	77bb      	strb	r3, [r7, #30]
 8005300:	e001      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fe2a 	bl	8004f70 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fe35 	bl	8004f9c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fe5d 	bl	8005002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fe52 	bl	8005002 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fe2a 	bl	8004fc8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fe1f 	bl	8004fc8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d022      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fe8d 	bl	80050ba <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053a8:	d107      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053b8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053c2:	d10b      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f8dd 	bl	8005588 <RCCEx_PLLSAI1_ConfigNQ>
 80053ce:	4603      	mov	r3, r0
 80053d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053d2:	7ffb      	ldrb	r3, [r7, #31]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80053d8:	7ffb      	ldrb	r3, [r7, #31]
 80053da:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d02b      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f0:	d008      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053fa:	d003      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fe2a 	bl	8005062 <LL_RCC_SetRNGClockSource>
 800540e:	e00a      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	2000      	movs	r0, #0
 800541c:	f7ff fe21 	bl	8005062 <LL_RCC_SetRNGClockSource>
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fe34 	bl	800508e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800542e:	d107      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800543a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800543e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005448:	2b00      	cmp	r3, #0
 800544a:	d022      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fe3d 	bl	80050d0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800545e:	d107      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800546a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005478:	d10b      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f8dd 	bl	800563e <RCCEx_PLLSAI1_ConfigNR>
 8005484:	4603      	mov	r3, r0
 8005486:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005488:	7ffb      	ldrb	r3, [r7, #31]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff fd26 	bl	8004ef4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fd45 	bl	8004f48 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fd2c 	bl	8004f20 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80054c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054de:	f7ff fe61 	bl	80051a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054e2:	f7fc fab5 	bl	8001a50 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054e8:	e009      	b.n	80054fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ea:	f7fc fab1 	bl	8001a50 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d902      	bls.n	80054fe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	73fb      	strb	r3, [r7, #15]
      break;
 80054fc:	e004      	b.n	8005508 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054fe:	f7ff fe60 	bl	80051c2 <LL_RCC_PLLSAI1_IsReady>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f0      	bne.n	80054ea <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d137      	bne.n	800557e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800550e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005522:	4313      	orrs	r3, r2
 8005524:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005538:	4313      	orrs	r3, r2
 800553a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800553c:	f7ff fe23 	bl	8005186 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fc fa86 	bl	8001a50 <HAL_GetTick>
 8005544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005546:	e009      	b.n	800555c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005548:	f7fc fa82 	bl	8001a50 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d902      	bls.n	800555c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	73fb      	strb	r3, [r7, #15]
        break;
 800555a:	e004      	b.n	8005566 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800555c:	f7ff fe31 	bl	80051c2 <LL_RCC_PLLSAI1_IsReady>
 8005560:	4603      	mov	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d1f0      	bne.n	8005548 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005594:	f7ff fe06 	bl	80051a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005598:	f7fc fa5a 	bl	8001a50 <HAL_GetTick>
 800559c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800559e:	e009      	b.n	80055b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055a0:	f7fc fa56 	bl	8001a50 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d902      	bls.n	80055b4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	73fb      	strb	r3, [r7, #15]
      break;
 80055b2:	e004      	b.n	80055be <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055b4:	f7ff fe05 	bl	80051c2 <LL_RCC_PLLSAI1_IsReady>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d137      	bne.n	8005634 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055d8:	4313      	orrs	r3, r2
 80055da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ee:	4313      	orrs	r3, r2
 80055f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80055f2:	f7ff fdc8 	bl	8005186 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f6:	f7fc fa2b 	bl	8001a50 <HAL_GetTick>
 80055fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055fc:	e009      	b.n	8005612 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055fe:	f7fc fa27 	bl	8001a50 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d902      	bls.n	8005612 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	73fb      	strb	r3, [r7, #15]
        break;
 8005610:	e004      	b.n	800561c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005612:	f7ff fdd6 	bl	80051c2 <LL_RCC_PLLSAI1_IsReady>
 8005616:	4603      	mov	r3, r0
 8005618:	2b01      	cmp	r3, #1
 800561a:	d1f0      	bne.n	80055fe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005630:	4313      	orrs	r3, r2
 8005632:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800564a:	f7ff fdab 	bl	80051a4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800564e:	f7fc f9ff 	bl	8001a50 <HAL_GetTick>
 8005652:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005654:	e009      	b.n	800566a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005656:	f7fc f9fb 	bl	8001a50 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d902      	bls.n	800566a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e004      	b.n	8005674 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800566a:	f7ff fdaa 	bl	80051c2 <LL_RCC_PLLSAI1_IsReady>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d137      	bne.n	80056ea <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800568e:	4313      	orrs	r3, r2
 8005690:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056a4:	4313      	orrs	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056a8:	f7ff fd6d 	bl	8005186 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ac:	f7fc f9d0 	bl	8001a50 <HAL_GetTick>
 80056b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056b2:	e009      	b.n	80056c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b4:	f7fc f9cc 	bl	8001a50 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d902      	bls.n	80056c8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	73fb      	strb	r3, [r7, #15]
        break;
 80056c6:	e004      	b.n	80056d2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056c8:	f7ff fd7b 	bl	80051c2 <LL_RCC_PLLSAI1_IsReady>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d1f0      	bne.n	80056b4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e09f      	b.n	8005846 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb fce2 	bl	80010e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005728:	4b49      	ldr	r3, [pc, #292]	@ (8005850 <HAL_RTC_Init+0x15c>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b10      	cmp	r3, #16
 8005732:	d07e      	beq.n	8005832 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	22ca      	movs	r2, #202	@ 0xca
 800573a:	625a      	str	r2, [r3, #36]	@ 0x24
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2253      	movs	r2, #83	@ 0x53
 8005742:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8ab 	bl	80058a0 <RTC_EnterInitMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	22ff      	movs	r2, #255	@ 0xff
 8005756:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2204      	movs	r2, #4
 800575c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e067      	b.n	8005836 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005778:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	68d2      	ldr	r2, [r2, #12]
 80057a0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6919      	ldr	r1, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	041a      	lsls	r2, r3, #16
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0203 	bic.w	r2, r2, #3
 80057d4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d113      	bne.n	8005824 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f829 	bl	8005854 <HAL_RTC_WaitForSynchro>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	22ff      	movs	r2, #255	@ 0xff
 800580e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2204      	movs	r2, #4
 8005814:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e010      	b.n	8005846 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	22ff      	movs	r2, #255	@ 0xff
 800582a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	e001      	b.n	8005836 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40002800 	.word	0x40002800

08005854 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800586a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800586c:	f7fc f8f0 	bl	8001a50 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005872:	e009      	b.n	8005888 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005874:	f7fc f8ec 	bl	8001a50 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005882:	d901      	bls.n	8005888 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e007      	b.n	8005898 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0ee      	beq.n	8005874 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d119      	bne.n	80058ea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f04f 32ff 	mov.w	r2, #4294967295
 80058be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058c0:	f7fc f8c6 	bl	8001a50 <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058c6:	e009      	b.n	80058dc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058c8:	f7fc f8c2 	bl	8001a50 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058d6:	d901      	bls.n	80058dc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e007      	b.n	80058ec <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0ee      	beq.n	80058c8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800590a:	2302      	movs	r3, #2
 800590c:	e089      	b.n	8005a22 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	22ca      	movs	r2, #202	@ 0xca
 8005924:	625a      	str	r2, [r3, #36]	@ 0x24
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2253      	movs	r2, #83	@ 0x53
 800592c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d020      	beq.n	800597e <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800593c:	f7fc f888 	bl	8001a50 <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005942:	e015      	b.n	8005970 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005944:	f7fc f884 	bl	8001a50 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005952:	d90d      	bls.n	8005970 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	22ff      	movs	r2, #255	@ 0xff
 800595a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2203      	movs	r2, #3
 8005960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e058      	b.n	8005a22 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e2      	bne.n	8005944 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800598c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800598e:	f7fc f85f 	bl	8001a50 <HAL_GetTick>
 8005992:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005994:	e015      	b.n	80059c2 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005996:	f7fc f85b 	bl	8001a50 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059a4:	d90d      	bls.n	80059c2 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	22ff      	movs	r2, #255	@ 0xff
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e02f      	b.n	8005a22 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0e2      	beq.n	8005996 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0207 	bic.w	r2, r2, #7
 80059de:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6899      	ldr	r1, [r3, #8]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	22ff      	movs	r2, #255	@ 0xff
 8005a0e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e049      	b.n	8005ad0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fb fb75 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f000 fc5f 	bl	800632c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e02e      	b.n	8005b4e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <HAL_TIM_Base_Start+0x84>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIM_Base_Start+0x34>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0a:	d115      	bne.n	8005b38 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <HAL_TIM_Base_Start+0x88>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d015      	beq.n	8005b4a <HAL_TIM_Base_Start+0x72>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b24:	d011      	beq.n	8005b4a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b36:	e008      	b.n	8005b4a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e000      	b.n	8005b4c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	00010007 	.word	0x00010007

08005b64 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10f      	bne.n	8005b9c <HAL_TIM_Base_Stop+0x38>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6a1a      	ldr	r2, [r3, #32]
 8005b82:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_Base_Stop+0x38>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d001      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e036      	b.n	8005c3a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <HAL_TIM_Base_Start_IT+0x94>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_Base_Start_IT+0x44>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf6:	d115      	bne.n	8005c24 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <HAL_TIM_Base_Start_IT+0x98>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b06      	cmp	r3, #6
 8005c08:	d015      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x82>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c10:	d011      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c22:	e008      	b.n	8005c36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	00010007 	.word	0x00010007

08005c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e049      	b.n	8005cf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fb fa92 	bl	80011a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f000 fb4c 	bl	800632c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0202 	mvn.w	r2, #2
 8005d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fad0 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fac2 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fad3 	bl	8006302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f06f 0204 	mvn.w	r2, #4
 8005d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 faaa 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8005d9a:	e005      	b.n	8005da8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa9c 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 faad 	bl	8006302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d020      	beq.n	8005dfa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01b      	beq.n	8005dfa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f06f 0208 	mvn.w	r2, #8
 8005dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fa84 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8005de6:	e005      	b.n	8005df4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa76 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa87 	bl	8006302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01b      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f06f 0210 	mvn.w	r2, #16
 8005e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa5e 	bl	80062ee <HAL_TIM_IC_CaptureCallback>
 8005e32:	e005      	b.n	8005e40 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa50 	bl	80062da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa61 	bl	8006302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00c      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0201 	mvn.w	r2, #1
 8005e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fa2e 	bl	80062c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fe3e 	bl	8006b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fe36 	bl	8006b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa1b 	bl	8006316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0220 	mvn.w	r2, #32
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fdfe 	bl	8006b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e0ff      	b.n	800612a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b14      	cmp	r3, #20
 8005f36:	f200 80f0 	bhi.w	800611a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	0800611b 	.word	0x0800611b
 8005f48:	0800611b 	.word	0x0800611b
 8005f4c:	0800611b 	.word	0x0800611b
 8005f50:	08005fd5 	.word	0x08005fd5
 8005f54:	0800611b 	.word	0x0800611b
 8005f58:	0800611b 	.word	0x0800611b
 8005f5c:	0800611b 	.word	0x0800611b
 8005f60:	08006017 	.word	0x08006017
 8005f64:	0800611b 	.word	0x0800611b
 8005f68:	0800611b 	.word	0x0800611b
 8005f6c:	0800611b 	.word	0x0800611b
 8005f70:	08006057 	.word	0x08006057
 8005f74:	0800611b 	.word	0x0800611b
 8005f78:	0800611b 	.word	0x0800611b
 8005f7c:	0800611b 	.word	0x0800611b
 8005f80:	08006099 	.word	0x08006099
 8005f84:	0800611b 	.word	0x0800611b
 8005f88:	0800611b 	.word	0x0800611b
 8005f8c:	0800611b 	.word	0x0800611b
 8005f90:	080060d9 	.word	0x080060d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fa36 	bl	800640c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0208 	orr.w	r2, r2, #8
 8005fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0204 	bic.w	r2, r2, #4
 8005fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	619a      	str	r2, [r3, #24]
      break;
 8005fd2:	e0a5      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fa92 	bl	8006504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	619a      	str	r2, [r3, #24]
      break;
 8006014:	e084      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 faeb 	bl	80065f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0208 	orr.w	r2, r2, #8
 8006030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0204 	bic.w	r2, r2, #4
 8006040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	61da      	str	r2, [r3, #28]
      break;
 8006054:	e064      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fb43 	bl	80066e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69d9      	ldr	r1, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	021a      	lsls	r2, r3, #8
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	61da      	str	r2, [r3, #28]
      break;
 8006096:	e043      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fb80 	bl	80067a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0208 	orr.w	r2, r2, #8
 80060b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0204 	bic.w	r2, r2, #4
 80060c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060d6:	e023      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fbb8 	bl	8006854 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006118:	e002      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
      break;
 800611e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIM_ConfigClockSource+0x1c>
 800614c:	2302      	movs	r3, #2
 800614e:	e0b6      	b.n	80062be <HAL_TIM_ConfigClockSource+0x18a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800616e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800617a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618c:	d03e      	beq.n	800620c <HAL_TIM_ConfigClockSource+0xd8>
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006192:	f200 8087 	bhi.w	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619a:	f000 8086 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x176>
 800619e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a2:	d87f      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061a4:	2b70      	cmp	r3, #112	@ 0x70
 80061a6:	d01a      	beq.n	80061de <HAL_TIM_ConfigClockSource+0xaa>
 80061a8:	2b70      	cmp	r3, #112	@ 0x70
 80061aa:	d87b      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061ac:	2b60      	cmp	r3, #96	@ 0x60
 80061ae:	d050      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x11e>
 80061b0:	2b60      	cmp	r3, #96	@ 0x60
 80061b2:	d877      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061b4:	2b50      	cmp	r3, #80	@ 0x50
 80061b6:	d03c      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0xfe>
 80061b8:	2b50      	cmp	r3, #80	@ 0x50
 80061ba:	d873      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061bc:	2b40      	cmp	r3, #64	@ 0x40
 80061be:	d058      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x13e>
 80061c0:	2b40      	cmp	r3, #64	@ 0x40
 80061c2:	d86f      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061c4:	2b30      	cmp	r3, #48	@ 0x30
 80061c6:	d064      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x15e>
 80061c8:	2b30      	cmp	r3, #48	@ 0x30
 80061ca:	d86b      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d060      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x15e>
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d867      	bhi.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d05c      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x15e>
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d05a      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x15e>
 80061dc:	e062      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ee:	f000 fc07 	bl	8006a00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	609a      	str	r2, [r3, #8]
      break;
 800620a:	e04f      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800621c:	f000 fbf0 	bl	8006a00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800622e:	609a      	str	r2, [r3, #8]
      break;
 8006230:	e03c      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	461a      	mov	r2, r3
 8006240:	f000 fb62 	bl	8006908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2150      	movs	r1, #80	@ 0x50
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fbbb 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8006250:	e02c      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800625e:	461a      	mov	r2, r3
 8006260:	f000 fb81 	bl	8006966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2160      	movs	r1, #96	@ 0x60
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fbab 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8006270:	e01c      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800627e:	461a      	mov	r2, r3
 8006280:	f000 fb42 	bl	8006908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2140      	movs	r1, #64	@ 0x40
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fb9b 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 8006290:	e00c      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f000 fb92 	bl	80069c6 <TIM_ITRx_SetConfig>
      break;
 80062a2:	e003      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      break;
 80062a8:	e000      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a30      	ldr	r2, [pc, #192]	@ (8006400 <TIM_Base_SetConfig+0xd4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0x20>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634a:	d108      	bne.n	800635e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a27      	ldr	r2, [pc, #156]	@ (8006400 <TIM_Base_SetConfig+0xd4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_Base_SetConfig+0x52>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636c:	d007      	beq.n	800637e <TIM_Base_SetConfig+0x52>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a24      	ldr	r2, [pc, #144]	@ (8006404 <TIM_Base_SetConfig+0xd8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_Base_SetConfig+0x52>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a23      	ldr	r2, [pc, #140]	@ (8006408 <TIM_Base_SetConfig+0xdc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d108      	bne.n	8006390 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a12      	ldr	r2, [pc, #72]	@ (8006400 <TIM_Base_SetConfig+0xd4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0xa0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a11      	ldr	r2, [pc, #68]	@ (8006404 <TIM_Base_SetConfig+0xd8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0xa0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a10      	ldr	r2, [pc, #64]	@ (8006408 <TIM_Base_SetConfig+0xdc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d103      	bne.n	80063d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d105      	bne.n	80063f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	611a      	str	r2, [r3, #16]
  }
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40014400 	.word	0x40014400
 8006408:	40014800 	.word	0x40014800

0800640c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f023 0201 	bic.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f023 0302 	bic.w	r3, r3, #2
 8006458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a24      	ldr	r2, [pc, #144]	@ (80064f8 <TIM_OC1_SetConfig+0xec>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_OC1_SetConfig+0x70>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a23      	ldr	r2, [pc, #140]	@ (80064fc <TIM_OC1_SetConfig+0xf0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC1_SetConfig+0x70>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a22      	ldr	r2, [pc, #136]	@ (8006500 <TIM_OC1_SetConfig+0xf4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10c      	bne.n	8006496 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0308 	bic.w	r3, r3, #8
 8006482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 0304 	bic.w	r3, r3, #4
 8006494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a17      	ldr	r2, [pc, #92]	@ (80064f8 <TIM_OC1_SetConfig+0xec>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <TIM_OC1_SetConfig+0xa2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a17      	ldr	r2, [pc, #92]	@ (8006500 <TIM_OC1_SetConfig+0xf4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC1_SetConfig+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a14      	ldr	r2, [pc, #80]	@ (80064fc <TIM_OC1_SetConfig+0xf0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d111      	bne.n	80064d2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	621a      	str	r2, [r3, #32]
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40014800 	.word	0x40014800
 8006500:	40014400 	.word	0x40014400

08006504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	f023 0210 	bic.w	r2, r3, #16
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800653e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0320 	bic.w	r3, r3, #32
 8006552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a22      	ldr	r2, [pc, #136]	@ (80065ec <TIM_OC2_SetConfig+0xe8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10d      	bne.n	8006584 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800656e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006582:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a19      	ldr	r2, [pc, #100]	@ (80065ec <TIM_OC2_SetConfig+0xe8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d007      	beq.n	800659c <TIM_OC2_SetConfig+0x98>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <TIM_OC2_SetConfig+0xec>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC2_SetConfig+0x98>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a17      	ldr	r2, [pc, #92]	@ (80065f4 <TIM_OC2_SetConfig+0xf0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d113      	bne.n	80065c4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800

080065f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a21      	ldr	r2, [pc, #132]	@ (80066dc <TIM_OC3_SetConfig+0xe4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <TIM_OC3_SetConfig+0xe4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_OC3_SetConfig+0x96>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a17      	ldr	r2, [pc, #92]	@ (80066e0 <TIM_OC3_SetConfig+0xe8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC3_SetConfig+0x96>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <TIM_OC3_SetConfig+0xec>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d113      	bne.n	80066b6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	031b      	lsls	r3, r3, #12
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <TIM_OC4_SetConfig+0xb0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_OC4_SetConfig+0x74>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a13      	ldr	r2, [pc, #76]	@ (800679c <TIM_OC4_SetConfig+0xb4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC4_SetConfig+0x74>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a12      	ldr	r2, [pc, #72]	@ (80067a0 <TIM_OC4_SetConfig+0xb8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d109      	bne.n	8006770 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a13      	ldr	r2, [pc, #76]	@ (8006848 <TIM_OC5_SetConfig+0xa4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d007      	beq.n	800680e <TIM_OC5_SetConfig+0x6a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a12      	ldr	r2, [pc, #72]	@ (800684c <TIM_OC5_SetConfig+0xa8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC5_SetConfig+0x6a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a11      	ldr	r2, [pc, #68]	@ (8006850 <TIM_OC5_SetConfig+0xac>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d109      	bne.n	8006822 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800689a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	051b      	lsls	r3, r3, #20
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a14      	ldr	r2, [pc, #80]	@ (80068fc <TIM_OC6_SetConfig+0xa8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d007      	beq.n	80068c0 <TIM_OC6_SetConfig+0x6c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a13      	ldr	r2, [pc, #76]	@ (8006900 <TIM_OC6_SetConfig+0xac>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC6_SetConfig+0x6c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a12      	ldr	r2, [pc, #72]	@ (8006904 <TIM_OC6_SetConfig+0xb0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d109      	bne.n	80068d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	029b      	lsls	r3, r3, #10
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800

08006908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0201 	bic.w	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 030a 	bic.w	r3, r3, #10
 8006944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 0210 	bic.w	r2, r3, #16
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	031b      	lsls	r3, r3, #12
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f043 0307 	orr.w	r3, r3, #7
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e04a      	b.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d108      	bne.n	8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a12      	ldr	r2, [pc, #72]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac0:	d10c      	bne.n	8006adc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00

08006b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <LL_RCC_GetUSARTClockSource>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b48:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4013      	ands	r3, r2
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <LL_RCC_GetLPUARTClockSource>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4013      	ands	r3, r2
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e042      	b.n	8006c14 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fa fb37 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2224      	movs	r2, #36	@ 0x24
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fe40 	bl	800784c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fc15 	bl	80073fc <UART_SetConfig>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e01b      	b.n	8006c14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 febf 	bl	8007990 <UART_CheckIdleState>
 8006c12:	4603      	mov	r3, r0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08a      	sub	sp, #40	@ 0x28
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d17b      	bne.n	8006d2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_UART_Transmit+0x26>
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e074      	b.n	8006d30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2221      	movs	r2, #33	@ 0x21
 8006c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c56:	f7fa fefb 	bl	8001a50 <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c74:	d108      	bne.n	8006c88 <HAL_UART_Transmit+0x6c>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e003      	b.n	8006c90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c90:	e030      	b.n	8006cf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2180      	movs	r1, #128	@ 0x80
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 ff21 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e03d      	b.n	8006d30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1c8      	bne.n	8006c92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2140      	movs	r1, #64	@ 0x40
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 feea 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e006      	b.n	8006d30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
  }
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b0ba      	sub	sp, #232	@ 0xe8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006d66:	4013      	ands	r3, r2
 8006d68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d11b      	bne.n	8006dac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d009      	beq.n	8006dac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 8300 	beq.w	80073a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
      }
      return;
 8006daa:	e2fa      	b.n	80073a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8123 	beq.w	8006ffc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006db6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006dba:	4b8d      	ldr	r3, [pc, #564]	@ (8006ff0 <HAL_UART_IRQHandler+0x2b8>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006dc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ff4 <HAL_UART_IRQHandler+0x2bc>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 8116 	beq.w	8006ffc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d011      	beq.n	8006e00 <HAL_UART_IRQHandler+0xc8>
 8006ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2201      	movs	r2, #1
 8006dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df6:	f043 0201 	orr.w	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d011      	beq.n	8006e30 <HAL_UART_IRQHandler+0xf8>
 8006e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e26:	f043 0204 	orr.w	r2, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d011      	beq.n	8006e60 <HAL_UART_IRQHandler+0x128>
 8006e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e56:	f043 0202 	orr.w	r2, r3, #2
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff0 <HAL_UART_IRQHandler+0x2b8>)
 8006e7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e92:	f043 0208 	orr.w	r2, r3, #8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <HAL_UART_IRQHandler+0x196>
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8266 	beq.w	80073a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d105      	bne.n	8006efe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f22:	2b40      	cmp	r3, #64	@ 0x40
 8006f24:	d005      	beq.n	8006f32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d054      	beq.n	8006fdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fe43 	bl	8007bbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f42:	2b40      	cmp	r3, #64	@ 0x40
 8006f44:	d146      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1d9      	bne.n	8006f46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d017      	beq.n	8006fcc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fa2:	4a15      	ldr	r2, [pc, #84]	@ (8006ff8 <HAL_UART_IRQHandler+0x2c0>)
 8006fa4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fc f88f 	bl	80030d0 <HAL_DMA_Abort_IT>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d019      	beq.n	8006fec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fca:	e00f      	b.n	8006fec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f9ff 	bl	80073d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd2:	e00b      	b.n	8006fec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f9fb 	bl	80073d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fda:	e007      	b.n	8006fec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f9f7 	bl	80073d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006fea:	e1dc      	b.n	80073a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fec:	bf00      	nop
    return;
 8006fee:	e1da      	b.n	80073a6 <HAL_UART_IRQHandler+0x66e>
 8006ff0:	10000001 	.word	0x10000001
 8006ff4:	04000120 	.word	0x04000120
 8006ff8:	08007c8b 	.word	0x08007c8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007000:	2b01      	cmp	r3, #1
 8007002:	f040 8170 	bne.w	80072e6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8169 	beq.w	80072e6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8162 	beq.w	80072e6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2210      	movs	r2, #16
 8007028:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007034:	2b40      	cmp	r3, #64	@ 0x40
 8007036:	f040 80d8 	bne.w	80071ea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80af 	beq.w	80071b0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800705c:	429a      	cmp	r2, r3
 800705e:	f080 80a7 	bcs.w	80071b0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007068:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 8087 	bne.w	800718e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007094:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800709c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1da      	bne.n	8007080 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e1      	bne.n	80070ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800711c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800712a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800712c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007130:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e3      	bne.n	8007106 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800715a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007170:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800717c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e4      	bne.n	800714c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007188:	4618      	mov	r0, r3
 800718a:	f7fb ff42 	bl	8003012 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f91b 	bl	80073e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071ae:	e0fc      	b.n	80073aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ba:	429a      	cmp	r2, r3
 80071bc:	f040 80f5 	bne.w	80073aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	f040 80eb 	bne.w	80073aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8fe 	bl	80073e4 <HAL_UARTEx_RxEventCallback>
      return;
 80071e8:	e0df      	b.n	80073aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80d1 	beq.w	80073ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800720c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80cc 	beq.w	80073ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800722a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007238:	647b      	str	r3, [r7, #68]	@ 0x44
 800723a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800723e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e4      	bne.n	8007216 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3308      	adds	r3, #8
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	623b      	str	r3, [r7, #32]
   return(result);
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007262:	f023 0301 	bic.w	r3, r3, #1
 8007266:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007274:	633a      	str	r2, [r7, #48]	@ 0x30
 8007276:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800727a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e1      	bne.n	800724c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f023 0310 	bic.w	r3, r3, #16
 80072b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	69b9      	ldr	r1, [r7, #24]
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	617b      	str	r3, [r7, #20]
   return(result);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e4      	bne.n	800729c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f880 	bl	80073e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072e4:	e063      	b.n	80073ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <HAL_UART_IRQHandler+0x5d8>
 80072f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007306:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fcff 	bl	8007d0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800730e:	e051      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d014      	beq.n	8007346 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800732c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007338:	2b00      	cmp	r3, #0
 800733a:	d03a      	beq.n	80073b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	4798      	blx	r3
    }
    return;
 8007344:	e035      	b.n	80073b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_UART_IRQHandler+0x62e>
 8007352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fca9 	bl	8007cb6 <UART_EndTransmit_IT>
    return;
 8007364:	e026      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <HAL_UART_IRQHandler+0x64e>
 8007372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007376:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fcd8 	bl	8007d34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007384:	e016      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <HAL_UART_IRQHandler+0x67c>
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007396:	2b00      	cmp	r3, #0
 8007398:	da0c      	bge.n	80073b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fcc0 	bl	8007d20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073a0:	e008      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80073a2:	bf00      	nop
 80073a4:	e006      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80073a6:	bf00      	nop
 80073a8:	e004      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80073aa:	bf00      	nop
 80073ac:	e002      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80073ae:	bf00      	nop
 80073b0:	e000      	b.n	80073b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80073b2:	bf00      	nop
  }
}
 80073b4:	37e8      	adds	r7, #232	@ 0xe8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007400:	b08c      	sub	sp, #48	@ 0x30
 8007402:	af00      	add	r7, sp, #0
 8007404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	431a      	orrs	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	431a      	orrs	r2, r3
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	4313      	orrs	r3, r2
 8007422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	4baf      	ldr	r3, [pc, #700]	@ (80076e8 <UART_SetConfig+0x2ec>)
 800742c:	4013      	ands	r3, r2
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007434:	430b      	orrs	r3, r1
 8007436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4aa4      	ldr	r2, [pc, #656]	@ (80076ec <UART_SetConfig+0x2f0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d004      	beq.n	8007468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007464:	4313      	orrs	r3, r2
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007472:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800747c:	430b      	orrs	r3, r1
 800747e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	f023 010f 	bic.w	r1, r3, #15
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a95      	ldr	r2, [pc, #596]	@ (80076f0 <UART_SetConfig+0x2f4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d125      	bne.n	80074ec <UART_SetConfig+0xf0>
 80074a0:	2003      	movs	r0, #3
 80074a2:	f7ff fb4b 	bl	8006b3c <LL_RCC_GetUSARTClockSource>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d81b      	bhi.n	80074e4 <UART_SetConfig+0xe8>
 80074ac:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <UART_SetConfig+0xb8>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	080074c5 	.word	0x080074c5
 80074b8:	080074d5 	.word	0x080074d5
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074dd 	.word	0x080074dd
 80074c4:	2301      	movs	r3, #1
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e042      	b.n	8007552 <UART_SetConfig+0x156>
 80074cc:	2302      	movs	r3, #2
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e03e      	b.n	8007552 <UART_SetConfig+0x156>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e03a      	b.n	8007552 <UART_SetConfig+0x156>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e036      	b.n	8007552 <UART_SetConfig+0x156>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e032      	b.n	8007552 <UART_SetConfig+0x156>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a7e      	ldr	r2, [pc, #504]	@ (80076ec <UART_SetConfig+0x2f0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d12a      	bne.n	800754c <UART_SetConfig+0x150>
 80074f6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80074fa:	f7ff fb2f 	bl	8006b5c <LL_RCC_GetLPUARTClockSource>
 80074fe:	4603      	mov	r3, r0
 8007500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007504:	d01a      	beq.n	800753c <UART_SetConfig+0x140>
 8007506:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800750a:	d81b      	bhi.n	8007544 <UART_SetConfig+0x148>
 800750c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007510:	d00c      	beq.n	800752c <UART_SetConfig+0x130>
 8007512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007516:	d815      	bhi.n	8007544 <UART_SetConfig+0x148>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <UART_SetConfig+0x128>
 800751c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007520:	d008      	beq.n	8007534 <UART_SetConfig+0x138>
 8007522:	e00f      	b.n	8007544 <UART_SetConfig+0x148>
 8007524:	2300      	movs	r3, #0
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752a:	e012      	b.n	8007552 <UART_SetConfig+0x156>
 800752c:	2302      	movs	r3, #2
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007532:	e00e      	b.n	8007552 <UART_SetConfig+0x156>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753a:	e00a      	b.n	8007552 <UART_SetConfig+0x156>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007542:	e006      	b.n	8007552 <UART_SetConfig+0x156>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754a:	e002      	b.n	8007552 <UART_SetConfig+0x156>
 800754c:	2310      	movs	r3, #16
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a65      	ldr	r2, [pc, #404]	@ (80076ec <UART_SetConfig+0x2f0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	f040 8097 	bne.w	800768c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800755e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007562:	2b08      	cmp	r3, #8
 8007564:	d823      	bhi.n	80075ae <UART_SetConfig+0x1b2>
 8007566:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <UART_SetConfig+0x170>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007591 	.word	0x08007591
 8007570:	080075af 	.word	0x080075af
 8007574:	08007599 	.word	0x08007599
 8007578:	080075af 	.word	0x080075af
 800757c:	0800759f 	.word	0x0800759f
 8007580:	080075af 	.word	0x080075af
 8007584:	080075af 	.word	0x080075af
 8007588:	080075af 	.word	0x080075af
 800758c:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007590:	f7fd fbac 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b56      	ldr	r3, [pc, #344]	@ (80076f4 <UART_SetConfig+0x2f8>)
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7fd fb25 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80075a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075ac:	e005      	b.n	80075ba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 812b 	beq.w	8007818 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	4a4c      	ldr	r2, [pc, #304]	@ (80076f8 <UART_SetConfig+0x2fc>)
 80075c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4413      	add	r3, r2
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d305      	bcc.n	80075f2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d903      	bls.n	80075fa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075f8:	e10e      	b.n	8007818 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	2200      	movs	r2, #0
 80075fe:	60bb      	str	r3, [r7, #8]
 8007600:	60fa      	str	r2, [r7, #12]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007606:	4a3c      	ldr	r2, [pc, #240]	@ (80076f8 <UART_SetConfig+0x2fc>)
 8007608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800760c:	b29b      	uxth	r3, r3
 800760e:	2200      	movs	r2, #0
 8007610:	603b      	str	r3, [r7, #0]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800761c:	f7f8 fe00 	bl	8000220 <__aeabi_uldivmod>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4610      	mov	r0, r2
 8007626:	4619      	mov	r1, r3
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	020b      	lsls	r3, r1, #8
 8007632:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007636:	0202      	lsls	r2, r0, #8
 8007638:	6979      	ldr	r1, [r7, #20]
 800763a:	6849      	ldr	r1, [r1, #4]
 800763c:	0849      	lsrs	r1, r1, #1
 800763e:	2000      	movs	r0, #0
 8007640:	460c      	mov	r4, r1
 8007642:	4605      	mov	r5, r0
 8007644:	eb12 0804 	adds.w	r8, r2, r4
 8007648:	eb43 0905 	adc.w	r9, r3, r5
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	469a      	mov	sl, r3
 8007654:	4693      	mov	fp, r2
 8007656:	4652      	mov	r2, sl
 8007658:	465b      	mov	r3, fp
 800765a:	4640      	mov	r0, r8
 800765c:	4649      	mov	r1, r9
 800765e:	f7f8 fddf 	bl	8000220 <__aeabi_uldivmod>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4613      	mov	r3, r2
 8007668:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007670:	d308      	bcc.n	8007684 <UART_SetConfig+0x288>
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007678:	d204      	bcs.n	8007684 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	e0c9      	b.n	8007818 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800768a:	e0c5      	b.n	8007818 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007694:	d16d      	bne.n	8007772 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007696:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800769a:	3b01      	subs	r3, #1
 800769c:	2b07      	cmp	r3, #7
 800769e:	d82d      	bhi.n	80076fc <UART_SetConfig+0x300>
 80076a0:	a201      	add	r2, pc, #4	@ (adr r2, 80076a8 <UART_SetConfig+0x2ac>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076fd 	.word	0x080076fd
 80076b4:	080076d7 	.word	0x080076d7
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	080076fd 	.word	0x080076fd
 80076c0:	080076fd 	.word	0x080076fd
 80076c4:	080076df 	.word	0x080076df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c8:	f7fd fb26 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 80076cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ce:	e01b      	b.n	8007708 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d0:	4b08      	ldr	r3, [pc, #32]	@ (80076f4 <UART_SetConfig+0x2f8>)
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076d4:	e018      	b.n	8007708 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d6:	f7fd fa89 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80076da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076dc:	e014      	b.n	8007708 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076e4:	e010      	b.n	8007708 <UART_SetConfig+0x30c>
 80076e6:	bf00      	nop
 80076e8:	cfff69f3 	.word	0xcfff69f3
 80076ec:	40008000 	.word	0x40008000
 80076f0:	40013800 	.word	0x40013800
 80076f4:	00f42400 	.word	0x00f42400
 80076f8:	08009960 	.word	0x08009960
      default:
        pclk = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007706:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 8084 	beq.w	8007818 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007714:	4a4b      	ldr	r2, [pc, #300]	@ (8007844 <UART_SetConfig+0x448>)
 8007716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771a:	461a      	mov	r2, r3
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007722:	005a      	lsls	r2, r3, #1
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	441a      	add	r2, r3
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	2b0f      	cmp	r3, #15
 800773a:	d916      	bls.n	800776a <UART_SetConfig+0x36e>
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007742:	d212      	bcs.n	800776a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f023 030f 	bic.w	r3, r3, #15
 800774c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	085b      	lsrs	r3, r3, #1
 8007752:	b29b      	uxth	r3, r3
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	b29a      	uxth	r2, r3
 800775a:	8bfb      	ldrh	r3, [r7, #30]
 800775c:	4313      	orrs	r3, r2
 800775e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	8bfa      	ldrh	r2, [r7, #30]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e056      	b.n	8007818 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007770:	e052      	b.n	8007818 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007772:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007776:	3b01      	subs	r3, #1
 8007778:	2b07      	cmp	r3, #7
 800777a:	d822      	bhi.n	80077c2 <UART_SetConfig+0x3c6>
 800777c:	a201      	add	r2, pc, #4	@ (adr r2, 8007784 <UART_SetConfig+0x388>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	080077a5 	.word	0x080077a5
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077c3 	.word	0x080077c3
 8007790:	080077b3 	.word	0x080077b3
 8007794:	080077c3 	.word	0x080077c3
 8007798:	080077c3 	.word	0x080077c3
 800779c:	080077c3 	.word	0x080077c3
 80077a0:	080077bb 	.word	0x080077bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fd fab8 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 80077a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077aa:	e010      	b.n	80077ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ac:	4b26      	ldr	r3, [pc, #152]	@ (8007848 <UART_SetConfig+0x44c>)
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077b0:	e00d      	b.n	80077ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b2:	f7fd fa1b 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80077b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077b8:	e009      	b.n	80077ce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077c0:	e005      	b.n	80077ce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077cc:	bf00      	nop
    }

    if (pclk != 0U)
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d021      	beq.n	8007818 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007844 <UART_SetConfig+0x448>)
 80077da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077de:	461a      	mov	r2, r3
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	441a      	add	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	2b0f      	cmp	r3, #15
 80077fc:	d909      	bls.n	8007812 <UART_SetConfig+0x416>
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007804:	d205      	bcs.n	8007812 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	b29a      	uxth	r2, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60da      	str	r2, [r3, #12]
 8007810:	e002      	b.n	8007818 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2201      	movs	r2, #1
 800781c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2201      	movs	r2, #1
 8007824:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2200      	movs	r2, #0
 800782c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007834:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007838:	4618      	mov	r0, r3
 800783a:	3730      	adds	r7, #48	@ 0x30
 800783c:	46bd      	mov	sp, r7
 800783e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007842:	bf00      	nop
 8007844:	08009960 	.word	0x08009960
 8007848:	00f42400 	.word	0x00f42400

0800784c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800794a:	d10a      	bne.n	8007962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b098      	sub	sp, #96	@ 0x60
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a0:	f7fa f856 	bl	8001a50 <HAL_GetTick>
 80079a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d12f      	bne.n	8007a14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f88e 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d022      	beq.n	8007a14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e6      	bne.n	80079ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e063      	b.n	8007adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d149      	bne.n	8007ab6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f857 	bl	8007ae4 <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d03c      	beq.n	8007ab6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	623b      	str	r3, [r7, #32]
   return(result);
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e6      	bne.n	8007a3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3308      	adds	r3, #8
 8007a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a8e:	61fa      	str	r2, [r7, #28]
 8007a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	69b9      	ldr	r1, [r7, #24]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e5      	bne.n	8007a6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e012      	b.n	8007adc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3758      	adds	r7, #88	@ 0x58
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af4:	e04f      	b.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d04b      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afe:	f7f9 ffa7 	bl	8001a50 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d302      	bcc.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e04e      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d037      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b80      	cmp	r3, #128	@ 0x80
 8007b2a:	d034      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d031      	beq.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d110      	bne.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2208      	movs	r2, #8
 8007b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f838 	bl	8007bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2208      	movs	r2, #8
 8007b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e029      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b70:	d111      	bne.n	8007b96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f81e 	bl	8007bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e00f      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	bf0c      	ite	eq
 8007ba6:	2301      	moveq	r3, #1
 8007ba8:	2300      	movne	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d0a0      	beq.n	8007af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b095      	sub	sp, #84	@ 0x54
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	461a      	mov	r2, r3
 8007be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007be6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e6      	bne.n	8007bc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e3      	bne.n	8007bf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d118      	bne.n	8007c6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f023 0310 	bic.w	r3, r3, #16
 8007c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c56:	61bb      	str	r3, [r7, #24]
 8007c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6979      	ldr	r1, [r7, #20]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	613b      	str	r3, [r7, #16]
   return(result);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e6      	bne.n	8007c38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c7e:	bf00      	nop
 8007c80:	3754      	adds	r7, #84	@ 0x54
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fb91 	bl	80073d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b088      	sub	sp, #32
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6979      	ldr	r1, [r7, #20]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fb5c 	bl	80073bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d04:	bf00      	nop
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_UARTEx_DisableFifoMode+0x16>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e027      	b.n	8007dae <HAL_UARTEx_DisableFifoMode+0x66>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2224      	movs	r2, #36	@ 0x24
 8007d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0201 	bic.w	r2, r2, #1
 8007d84:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e02d      	b.n	8007e2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2224      	movs	r2, #36	@ 0x24
 8007dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0201 	bic.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f850 	bl	8007eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d101      	bne.n	8007e4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e02d      	b.n	8007eaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2224      	movs	r2, #36	@ 0x24
 8007e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0201 	bic.w	r2, r2, #1
 8007e74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f812 	bl	8007eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d108      	bne.n	8007ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ed4:	e031      	b.n	8007f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eda:	2308      	movs	r3, #8
 8007edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	0e5b      	lsrs	r3, r3, #25
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	0f5b      	lsrs	r3, r3, #29
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	7b3a      	ldrb	r2, [r7, #12]
 8007f02:	4911      	ldr	r1, [pc, #68]	@ (8007f48 <UARTEx_SetNbDataToProcess+0x94>)
 8007f04:	5c8a      	ldrb	r2, [r1, r2]
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f0a:	7b3a      	ldrb	r2, [r7, #12]
 8007f0c:	490f      	ldr	r1, [pc, #60]	@ (8007f4c <UARTEx_SetNbDataToProcess+0x98>)
 8007f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	7b7a      	ldrb	r2, [r7, #13]
 8007f20:	4909      	ldr	r1, [pc, #36]	@ (8007f48 <UARTEx_SetNbDataToProcess+0x94>)
 8007f22:	5c8a      	ldrb	r2, [r1, r2]
 8007f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f28:	7b7a      	ldrb	r2, [r7, #13]
 8007f2a:	4908      	ldr	r1, [pc, #32]	@ (8007f4c <UARTEx_SetNbDataToProcess+0x98>)
 8007f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	08009978 	.word	0x08009978
 8007f4c:	08009980 	.word	0x08009980

08007f50 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f98 <OTP_Read+0x48>)
 8007f5c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007f5e:	e002      	b.n	8007f66 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3b08      	subs	r3, #8
 8007f64:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3307      	adds	r3, #7
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	79fa      	ldrb	r2, [r7, #7]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d003      	beq.n	8007f7a <OTP_Read+0x2a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a09      	ldr	r2, [pc, #36]	@ (8007f9c <OTP_Read+0x4c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d1f2      	bne.n	8007f60 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3307      	adds	r3, #7
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d001      	beq.n	8007f8a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	1fff73f8 	.word	0x1fff73f8
 8007f9c:	1fff7000 	.word	0x1fff7000

08007fa0 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fb2:	b672      	cpsid	i
}
 8007fb4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d102      	bne.n	8007fc6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
 8007fc4:	e001      	b.n	8007fca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f383 8810 	msr	PRIMASK, r3
}
 8007fd4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fee:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ff8:	b672      	cpsid	i
}
 8007ffa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f383 8810 	msr	PRIMASK, r3
}
 8008022:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008024:	bf00      	nop
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008038:	f3ef 8310 	mrs	r3, PRIMASK
 800803c:	60fb      	str	r3, [r7, #12]
  return(result);
 800803e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008042:	b672      	cpsid	i
}
 8008044:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6852      	ldr	r2, [r2, #4]
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f383 8810 	msr	PRIMASK, r3
}
 8008064:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800807c:	f3ef 8310 	mrs	r3, PRIMASK
 8008080:	60fb      	str	r3, [r7, #12]
  return(result);
 8008082:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008086:	b672      	cpsid	i
}
 8008088:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff ffca 	bl	8008030 <LST_remove_node>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f383 8810 	msr	PRIMASK, r3
}
 80080a6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80080a8:	bf00      	nop
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80080b6:	e01c      	b.n	80080f2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80080b8:	1d3b      	adds	r3, r7, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4812      	ldr	r0, [pc, #72]	@ (8008108 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80080be:	f7ff ffd8 	bl	8008072 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7a5b      	ldrb	r3, [r3, #9]
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d003      	beq.n	80080d2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7a5b      	ldrb	r3, [r3, #9]
 80080ce:	2b0e      	cmp	r3, #14
 80080d0:	d105      	bne.n	80080de <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4619      	mov	r1, r3
 80080d6:	2002      	movs	r0, #2
 80080d8:	f000 f8d2 	bl	8008280 <OutputDbgTrace>
 80080dc:	e004      	b.n	80080e8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	2003      	movs	r0, #3
 80080e4:	f000 f8cc 	bl	8008280 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80080e8:	4b08      	ldr	r3, [pc, #32]	@ (800810c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4610      	mov	r0, r2
 80080f0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80080f2:	4805      	ldr	r0, [pc, #20]	@ (8008108 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80080f4:	f7ff ff54 	bl	8007fa0 <LST_is_empty>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0dc      	beq.n	80080b8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80080fe:	bf00      	nop
}
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200300c8 	.word	0x200300c8
 800810c:	200003a4 	.word	0x200003a4

08008110 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008114:	4b02      	ldr	r3, [pc, #8]	@ (8008120 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4798      	blx	r3

  return;
 800811a:	bf00      	nop
}
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200003a8 	.word	0x200003a8

08008124 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008128:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4619      	mov	r1, r3
 8008130:	2005      	movs	r0, #5
 8008132:	f000 f8a5 	bl	8008280 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008136:	4b05      	ldr	r3, [pc, #20]	@ (800814c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a03      	ldr	r2, [pc, #12]	@ (8008148 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800813c:	68d2      	ldr	r2, [r2, #12]
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	4610      	mov	r0, r2
 8008142:	4798      	blx	r3

  return;
 8008144:	bf00      	nop
}
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20030000 	.word	0x20030000
 800814c:	200003ac 	.word	0x200003ac

08008150 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008156:	e00e      	b.n	8008176 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008158:	1d3b      	adds	r3, r7, #4
 800815a:	4619      	mov	r1, r3
 800815c:	480b      	ldr	r0, [pc, #44]	@ (800818c <HW_IPCC_SYS_EvtNot+0x3c>)
 800815e:	f7ff ff88 	bl	8008072 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4619      	mov	r1, r3
 8008166:	2006      	movs	r0, #6
 8008168:	f000 f88a 	bl	8008280 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800816c:	4b08      	ldr	r3, [pc, #32]	@ (8008190 <HW_IPCC_SYS_EvtNot+0x40>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	4610      	mov	r0, r2
 8008174:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008176:	4805      	ldr	r0, [pc, #20]	@ (800818c <HW_IPCC_SYS_EvtNot+0x3c>)
 8008178:	f7ff ff12 	bl	8007fa0 <LST_is_empty>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0ea      	beq.n	8008158 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008182:	bf00      	nop
}
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	200300d0 	.word	0x200300d0
 8008190:	200003b0 	.word	0x200003b0

08008194 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:
  return;
}

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8008198:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f8c4 	bl	800832c <TL_ZIGBEE_CmdEvtReceived>

  return;
 80081a4:	bf00      	nop
}
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20030000 	.word	0x20030000

080081ac <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 80081b0:	4b03      	ldr	r3, [pc, #12]	@ (80081c0 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f8c2 	bl	8008340 <TL_ZIGBEE_NotReceived>

  return;
 80081bc:	bf00      	nop
}
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20030000 	.word	0x20030000

080081c4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:
  return;
}

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 80081c8:	4b03      	ldr	r3, [pc, #12]	@ (80081d8 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f8de 	bl	8008390 <TL_ZIGBEE_M0RequestReceived>

  return;
 80081d4:	bf00      	nop
}
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	20030000 	.word	0x20030000

080081dc <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4807      	ldr	r0, [pc, #28]	@ (8008204 <TL_MM_EvtDone+0x28>)
 80081e8:	f7ff fefc 	bl	8007fe4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80081ec:	6879      	ldr	r1, [r7, #4]
 80081ee:	2000      	movs	r0, #0
 80081f0:	f000 f846 	bl	8008280 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80081f4:	4804      	ldr	r0, [pc, #16]	@ (8008208 <TL_MM_EvtDone+0x2c>)
 80081f6:	f000 fa51 	bl	800869c <HW_IPCC_MM_SendFreeBuf>

  return;
 80081fa:	bf00      	nop
}
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	2000039c 	.word	0x2000039c
 8008208:	0800820d 	.word	0x0800820d

0800820c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008212:	e00c      	b.n	800822e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008214:	1d3b      	adds	r3, r7, #4
 8008216:	4619      	mov	r1, r3
 8008218:	480a      	ldr	r0, [pc, #40]	@ (8008244 <SendFreeBuf+0x38>)
 800821a:	f7ff ff2a 	bl	8008072 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800821e:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <SendFreeBuf+0x3c>)
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fedb 	bl	8007fe4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800822e:	4805      	ldr	r0, [pc, #20]	@ (8008244 <SendFreeBuf+0x38>)
 8008230:	f7ff feb6 	bl	8007fa0 <LST_is_empty>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0ec      	beq.n	8008214 <SendFreeBuf+0x8>
  }

  return;
 800823a:	bf00      	nop
}
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	2000039c 	.word	0x2000039c
 8008248:	20030000 	.word	0x20030000

0800824c <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008252:	e008      	b.n	8008266 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008254:	1d3b      	adds	r3, r7, #4
 8008256:	4619      	mov	r1, r3
 8008258:	4808      	ldr	r0, [pc, #32]	@ (800827c <HW_IPCC_TRACES_EvtNot+0x30>)
 800825a:	f7ff ff0a 	bl	8008072 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4618      	mov	r0, r3
 8008262:	f7f8 f9d1 	bl	8000608 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008266:	4805      	ldr	r0, [pc, #20]	@ (800827c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008268:	f7ff fe9a 	bl	8007fa0 <LST_is_empty>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f0      	beq.n	8008254 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008272:	bf00      	nop
}
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200300c0 	.word	0x200300c0

08008280 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b06      	cmp	r3, #6
 8008290:	d845      	bhi.n	800831e <OutputDbgTrace+0x9e>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <OutputDbgTrace+0x18>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082b5 	.word	0x080082b5
 800829c:	080082d9 	.word	0x080082d9
 80082a0:	080082df 	.word	0x080082df
 80082a4:	080082f3 	.word	0x080082f3
 80082a8:	080082ff 	.word	0x080082ff
 80082ac:	08008305 	.word	0x08008305
 80082b0:	08008313 	.word	0x08008313
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	7a5b      	ldrb	r3, [r3, #9]
 80082bc:	2bff      	cmp	r3, #255	@ 0xff
 80082be:	d005      	beq.n	80082cc <OutputDbgTrace+0x4c>
 80082c0:	2bff      	cmp	r3, #255	@ 0xff
 80082c2:	dc05      	bgt.n	80082d0 <OutputDbgTrace+0x50>
 80082c4:	2b0e      	cmp	r3, #14
 80082c6:	d005      	beq.n	80082d4 <OutputDbgTrace+0x54>
 80082c8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80082ca:	e001      	b.n	80082d0 <OutputDbgTrace+0x50>
          break;
 80082cc:	bf00      	nop
 80082ce:	e027      	b.n	8008320 <OutputDbgTrace+0xa0>
          break;
 80082d0:	bf00      	nop
 80082d2:	e025      	b.n	8008320 <OutputDbgTrace+0xa0>
          break;
 80082d4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80082d6:	e023      	b.n	8008320 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80082dc:	e020      	b.n	8008320 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	7a5b      	ldrb	r3, [r3, #9]
 80082e6:	2b0e      	cmp	r3, #14
 80082e8:	d001      	beq.n	80082ee <OutputDbgTrace+0x6e>
 80082ea:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80082ec:	e000      	b.n	80082f0 <OutputDbgTrace+0x70>
          break;
 80082ee:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80082f0:	e016      	b.n	8008320 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	7a5b      	ldrb	r3, [r3, #9]
 80082fa:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80082fc:	e010      	b.n	8008320 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008302:	e00d      	b.n	8008320 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	7a5b      	ldrb	r3, [r3, #9]
 800830c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800830e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008310:	e006      	b.n	8008320 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	7a5b      	ldrb	r3, [r3, #9]
 800831a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800831c:	e000      	b.n	8008320 <OutputDbgTrace+0xa0>

    default:
      break;
 800831e:	bf00      	nop
  }

  return;
 8008320:	bf00      	nop
}
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8008334:	f000 f814 	bl	8008360 <Receive_Ack_From_M0>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8008348:	4a04      	ldr	r2, [pc, #16]	@ (800835c <TL_ZIGBEE_NotReceived+0x1c>)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800834e:	f000 f80f 	bl	8008370 <Receive_Notification_From_M0>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	200003b4 	.word	0x200003b4

08008360 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8008364:	2002      	movs	r0, #2
 8008366:	f000 fa07 	bl	8008778 <UTIL_SEQ_SetEvt>
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 8008374:	4b05      	ldr	r3, [pc, #20]	@ (800838c <Receive_Notification_From_M0+0x1c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a04      	ldr	r2, [pc, #16]	@ (800838c <Receive_Notification_From_M0+0x1c>)
 800837c:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800837e:	2100      	movs	r1, #0
 8008380:	2001      	movs	r0, #1
 8008382:	f000 f9cd 	bl	8008720 <UTIL_SEQ_SetTask>
}
 8008386:	bf00      	nop
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200003bc 	.word	0x200003bc

08008390 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8008398:	4a07      	ldr	r2, [pc, #28]	@ (80083b8 <TL_ZIGBEE_M0RequestReceived+0x28>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 800839e:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <TL_ZIGBEE_M0RequestReceived+0x2c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	4a05      	ldr	r2, [pc, #20]	@ (80083bc <TL_ZIGBEE_M0RequestReceived+0x2c>)
 80083a6:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80083a8:	2100      	movs	r1, #0
 80083aa:	2002      	movs	r0, #2
 80083ac:	f000 f9b8 	bl	8008720 <UTIL_SEQ_SetTask>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	200003b8 	.word	0x200003b8
 80083bc:	200003c0 	.word	0x200003c0

080083c0 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	041b      	lsls	r3, r3, #16
 80083d2:	43db      	mvns	r3, r3
 80083d4:	401a      	ands	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	605a      	str	r2, [r3, #4]
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	041b      	lsls	r3, r3, #16
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	605a      	str	r2, [r3, #4]
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	605a      	str	r2, [r3, #4]
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	609a      	str	r2, [r3, #8]
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	041a      	lsls	r2, r3, #16
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	609a      	str	r2, [r3, #8]
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	4013      	ands	r3, r2
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d101      	bne.n	8008482 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69da      	ldr	r2, [r3, #28]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	4013      	ands	r3, r2
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d101      	bne.n	80084ac <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80084c0:	2102      	movs	r1, #2
 80084c2:	4828      	ldr	r0, [pc, #160]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 80084c4:	f7ff ffe4 	bl	8008490 <LL_C2_IPCC_IsActiveFlag_CHx>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <HW_IPCC_Rx_Handler+0x24>
 80084ce:	4b25      	ldr	r3, [pc, #148]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80084da:	f000 f8af 	bl	800863c <HW_IPCC_SYS_EvtHandler>
 80084de:	e03e      	b.n	800855e <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 80084e0:	2104      	movs	r1, #4
 80084e2:	4820      	ldr	r0, [pc, #128]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 80084e4:	f7ff ffd4 	bl	8008490 <LL_C2_IPCC_IsActiveFlag_CHx>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <HW_IPCC_Rx_Handler+0x44>
 80084ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 80084fa:	f000 f8b7 	bl	800866c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 80084fe:	e02e      	b.n	800855e <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 8008500:	2110      	movs	r1, #16
 8008502:	4818      	ldr	r0, [pc, #96]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 8008504:	f7ff ffc4 	bl	8008490 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <HW_IPCC_Rx_Handler+0x64>
 800850e:	4b15      	ldr	r3, [pc, #84]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800851a:	f000 f8b3 	bl	8008684 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800851e:	e01e      	b.n	800855e <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008520:	2101      	movs	r1, #1
 8008522:	4810      	ldr	r0, [pc, #64]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 8008524:	f7ff ffb4 	bl	8008490 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <HW_IPCC_Rx_Handler+0x84>
 800852e:	4b0d      	ldr	r3, [pc, #52]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800853a:	f000 f85b 	bl	80085f4 <HW_IPCC_BLE_EvtHandler>
 800853e:	e00e      	b.n	800855e <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008540:	2108      	movs	r1, #8
 8008542:	4808      	ldr	r0, [pc, #32]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 8008544:	f7ff ffa4 	bl	8008490 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <HW_IPCC_Rx_Handler+0xa4>
 800854e:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <HW_IPCC_Rx_Handler+0xa8>)
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800855a:	f000 f8d5 	bl	8008708 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800855e:	bf00      	nop
 8008560:	bf00      	nop
}
 8008562:	bd80      	pop	{r7, pc}
 8008564:	58000c00 	.word	0x58000c00

08008568 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800856c:	2102      	movs	r1, #2
 800856e:	4820      	ldr	r0, [pc, #128]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 8008570:	f7ff ff79 	bl	8008466 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d107      	bne.n	800858a <HW_IPCC_Tx_Handler+0x22>
 800857a:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008586:	f000 f84d 	bl	8008624 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800858a:	2104      	movs	r1, #4
 800858c:	4818      	ldr	r0, [pc, #96]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 800858e:	f7ff ff6a 	bl	8008466 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d108      	bne.n	80085aa <HW_IPCC_Tx_Handler+0x42>
 8008598:	4b15      	ldr	r3, [pc, #84]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 80085a4:	f000 f856 	bl	8008654 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 80085a8:	e01e      	b.n	80085e8 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80085aa:	2108      	movs	r1, #8
 80085ac:	4810      	ldr	r0, [pc, #64]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 80085ae:	f7ff ff5a 	bl	8008466 <LL_C1_IPCC_IsActiveFlag_CHx>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <HW_IPCC_Tx_Handler+0x62>
 80085b8:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 80085c4:	f000 f88c 	bl	80086e0 <HW_IPCC_MM_FreeBufHandler>
 80085c8:	e00e      	b.n	80085e8 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80085ca:	2120      	movs	r1, #32
 80085cc:	4808      	ldr	r0, [pc, #32]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 80085ce:	f7ff ff4a 	bl	8008466 <LL_C1_IPCC_IsActiveFlag_CHx>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d108      	bne.n	80085ea <HW_IPCC_Tx_Handler+0x82>
 80085d8:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <HW_IPCC_Tx_Handler+0x88>)
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d102      	bne.n	80085ea <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80085e4:	f000 f812 	bl	800860c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
}
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	58000c00 	.word	0x58000c00

080085f4 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80085f8:	f7ff fd5a 	bl	80080b0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80085fc:	2101      	movs	r1, #1
 80085fe:	4802      	ldr	r0, [pc, #8]	@ (8008608 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008600:	f7ff ff14 	bl	800842c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008604:	bf00      	nop
}
 8008606:	bd80      	pop	{r7, pc}
 8008608:	58000c00 	.word	0x58000c00

0800860c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008610:	2120      	movs	r1, #32
 8008612:	4803      	ldr	r0, [pc, #12]	@ (8008620 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008614:	f7ff fee7 	bl	80083e6 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008618:	f7ff fd7a 	bl	8008110 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800861c:	bf00      	nop
}
 800861e:	bd80      	pop	{r7, pc}
 8008620:	58000c00 	.word	0x58000c00

08008624 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008628:	2102      	movs	r1, #2
 800862a:	4803      	ldr	r0, [pc, #12]	@ (8008638 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800862c:	f7ff fedb 	bl	80083e6 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008630:	f7ff fd78 	bl	8008124 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008634:	bf00      	nop
}
 8008636:	bd80      	pop	{r7, pc}
 8008638:	58000c00 	.word	0x58000c00

0800863c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008640:	f7ff fd86 	bl	8008150 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008644:	2102      	movs	r1, #2
 8008646:	4802      	ldr	r0, [pc, #8]	@ (8008650 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008648:	f7ff fef0 	bl	800842c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800864c:	bf00      	nop
}
 800864e:	bd80      	pop	{r7, pc}
 8008650:	58000c00 	.word	0x58000c00

08008654 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

  return;
}

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8008658:	2104      	movs	r1, #4
 800865a:	4803      	ldr	r0, [pc, #12]	@ (8008668 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 800865c:	f7ff fec3 	bl	80083e6 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8008660:	f7ff fd98 	bl	8008194 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 8008664:	bf00      	nop
}
 8008666:	bd80      	pop	{r7, pc}
 8008668:	58000c00 	.word	0x58000c00

0800866c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8008670:	2104      	movs	r1, #4
 8008672:	4803      	ldr	r0, [pc, #12]	@ (8008680 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 8008674:	f7ff fec9 	bl	800840a <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8008678:	f7ff fd98 	bl	80081ac <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 800867c:	bf00      	nop
}
 800867e:	bd80      	pop	{r7, pc}
 8008680:	58000c00 	.word	0x58000c00

08008684 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8008688:	2110      	movs	r1, #16
 800868a:	4803      	ldr	r0, [pc, #12]	@ (8008698 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 800868c:	f7ff febd 	bl	800840a <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 8008690:	f7ff fd98 	bl	80081c4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8008694:	bf00      	nop
}
 8008696:	bd80      	pop	{r7, pc}
 8008698:	58000c00 	.word	0x58000c00

0800869c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80086a4:	2108      	movs	r1, #8
 80086a6:	480c      	ldr	r0, [pc, #48]	@ (80086d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80086a8:	f7ff fedd 	bl	8008466 <LL_C1_IPCC_IsActiveFlag_CHx>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80086b2:	4a0a      	ldr	r2, [pc, #40]	@ (80086dc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80086b8:	2108      	movs	r1, #8
 80086ba:	4807      	ldr	r0, [pc, #28]	@ (80086d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80086bc:	f7ff fe80 	bl	80083c0 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80086c0:	e006      	b.n	80086d0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80086c6:	2108      	movs	r1, #8
 80086c8:	4803      	ldr	r0, [pc, #12]	@ (80086d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80086ca:	f7ff febd 	bl	8008448 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80086ce:	bf00      	nop
}
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58000c00 	.word	0x58000c00
 80086dc:	200003c4 	.word	0x200003c4

080086e0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80086e4:	2108      	movs	r1, #8
 80086e6:	4806      	ldr	r0, [pc, #24]	@ (8008700 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80086e8:	f7ff fe7d 	bl	80083e6 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80086ec:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80086f2:	2108      	movs	r1, #8
 80086f4:	4802      	ldr	r0, [pc, #8]	@ (8008700 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80086f6:	f7ff fea7 	bl	8008448 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80086fa:	bf00      	nop
}
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	58000c00 	.word	0x58000c00
 8008704:	200003c4 	.word	0x200003c4

08008708 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800870c:	f7ff fd9e 	bl	800824c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008710:	2108      	movs	r1, #8
 8008712:	4802      	ldr	r0, [pc, #8]	@ (800871c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008714:	f7ff fe8a 	bl	800842c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008718:	bf00      	nop
}
 800871a:	bd80      	pop	{r7, pc}
 800871c:	58000c00 	.word	0x58000c00

08008720 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872a:	f3ef 8310 	mrs	r3, PRIMASK
 800872e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008730:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008734:	b672      	cpsid	i
}
 8008736:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008738:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <UTIL_SEQ_SetTask+0x50>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4313      	orrs	r3, r2
 8008740:	4a0b      	ldr	r2, [pc, #44]	@ (8008770 <UTIL_SEQ_SetTask+0x50>)
 8008742:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008744:	4a0b      	ldr	r2, [pc, #44]	@ (8008774 <UTIL_SEQ_SetTask+0x54>)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	431a      	orrs	r2, r3
 8008750:	4908      	ldr	r1, [pc, #32]	@ (8008774 <UTIL_SEQ_SetTask+0x54>)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f383 8810 	msr	PRIMASK, r3
}
 8008762:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008764:	bf00      	nop
}
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	200003c8 	.word	0x200003c8
 8008774:	200003d0 	.word	0x200003d0

08008778 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008780:	f3ef 8310 	mrs	r3, PRIMASK
 8008784:	60fb      	str	r3, [r7, #12]
  return(result);
 8008786:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008788:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800878a:	b672      	cpsid	i
}
 800878c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800878e:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <UTIL_SEQ_SetEvt+0x3c>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4313      	orrs	r3, r2
 8008796:	4a07      	ldr	r2, [pc, #28]	@ (80087b4 <UTIL_SEQ_SetEvt+0x3c>)
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f383 8810 	msr	PRIMASK, r3
}
 80087a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80087a6:	bf00      	nop
}
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	200003cc 	.word	0x200003cc

080087b8 <malloc>:
 80087b8:	4b02      	ldr	r3, [pc, #8]	@ (80087c4 <malloc+0xc>)
 80087ba:	4601      	mov	r1, r0
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	f000 b825 	b.w	800880c <_malloc_r>
 80087c2:	bf00      	nop
 80087c4:	20000020 	.word	0x20000020

080087c8 <sbrk_aligned>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008808 <sbrk_aligned+0x40>)
 80087cc:	460c      	mov	r4, r1
 80087ce:	6831      	ldr	r1, [r6, #0]
 80087d0:	4605      	mov	r5, r0
 80087d2:	b911      	cbnz	r1, 80087da <sbrk_aligned+0x12>
 80087d4:	f000 fba0 	bl	8008f18 <_sbrk_r>
 80087d8:	6030      	str	r0, [r6, #0]
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f000 fb9b 	bl	8008f18 <_sbrk_r>
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	d103      	bne.n	80087ee <sbrk_aligned+0x26>
 80087e6:	f04f 34ff 	mov.w	r4, #4294967295
 80087ea:	4620      	mov	r0, r4
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	1cc4      	adds	r4, r0, #3
 80087f0:	f024 0403 	bic.w	r4, r4, #3
 80087f4:	42a0      	cmp	r0, r4
 80087f6:	d0f8      	beq.n	80087ea <sbrk_aligned+0x22>
 80087f8:	1a21      	subs	r1, r4, r0
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 fb8c 	bl	8008f18 <_sbrk_r>
 8008800:	3001      	adds	r0, #1
 8008802:	d1f2      	bne.n	80087ea <sbrk_aligned+0x22>
 8008804:	e7ef      	b.n	80087e6 <sbrk_aligned+0x1e>
 8008806:	bf00      	nop
 8008808:	200003e0 	.word	0x200003e0

0800880c <_malloc_r>:
 800880c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008810:	1ccd      	adds	r5, r1, #3
 8008812:	f025 0503 	bic.w	r5, r5, #3
 8008816:	3508      	adds	r5, #8
 8008818:	2d0c      	cmp	r5, #12
 800881a:	bf38      	it	cc
 800881c:	250c      	movcc	r5, #12
 800881e:	2d00      	cmp	r5, #0
 8008820:	4606      	mov	r6, r0
 8008822:	db01      	blt.n	8008828 <_malloc_r+0x1c>
 8008824:	42a9      	cmp	r1, r5
 8008826:	d904      	bls.n	8008832 <_malloc_r+0x26>
 8008828:	230c      	movs	r3, #12
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	2000      	movs	r0, #0
 800882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008832:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008908 <_malloc_r+0xfc>
 8008836:	f000 f869 	bl	800890c <__malloc_lock>
 800883a:	f8d8 3000 	ldr.w	r3, [r8]
 800883e:	461c      	mov	r4, r3
 8008840:	bb44      	cbnz	r4, 8008894 <_malloc_r+0x88>
 8008842:	4629      	mov	r1, r5
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff ffbf 	bl	80087c8 <sbrk_aligned>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	4604      	mov	r4, r0
 800884e:	d158      	bne.n	8008902 <_malloc_r+0xf6>
 8008850:	f8d8 4000 	ldr.w	r4, [r8]
 8008854:	4627      	mov	r7, r4
 8008856:	2f00      	cmp	r7, #0
 8008858:	d143      	bne.n	80088e2 <_malloc_r+0xd6>
 800885a:	2c00      	cmp	r4, #0
 800885c:	d04b      	beq.n	80088f6 <_malloc_r+0xea>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	4639      	mov	r1, r7
 8008862:	4630      	mov	r0, r6
 8008864:	eb04 0903 	add.w	r9, r4, r3
 8008868:	f000 fb56 	bl	8008f18 <_sbrk_r>
 800886c:	4581      	cmp	r9, r0
 800886e:	d142      	bne.n	80088f6 <_malloc_r+0xea>
 8008870:	6821      	ldr	r1, [r4, #0]
 8008872:	1a6d      	subs	r5, r5, r1
 8008874:	4629      	mov	r1, r5
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ffa6 	bl	80087c8 <sbrk_aligned>
 800887c:	3001      	adds	r0, #1
 800887e:	d03a      	beq.n	80088f6 <_malloc_r+0xea>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	442b      	add	r3, r5
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	f8d8 3000 	ldr.w	r3, [r8]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	bb62      	cbnz	r2, 80088e8 <_malloc_r+0xdc>
 800888e:	f8c8 7000 	str.w	r7, [r8]
 8008892:	e00f      	b.n	80088b4 <_malloc_r+0xa8>
 8008894:	6822      	ldr	r2, [r4, #0]
 8008896:	1b52      	subs	r2, r2, r5
 8008898:	d420      	bmi.n	80088dc <_malloc_r+0xd0>
 800889a:	2a0b      	cmp	r2, #11
 800889c:	d917      	bls.n	80088ce <_malloc_r+0xc2>
 800889e:	1961      	adds	r1, r4, r5
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	6025      	str	r5, [r4, #0]
 80088a4:	bf18      	it	ne
 80088a6:	6059      	strne	r1, [r3, #4]
 80088a8:	6863      	ldr	r3, [r4, #4]
 80088aa:	bf08      	it	eq
 80088ac:	f8c8 1000 	streq.w	r1, [r8]
 80088b0:	5162      	str	r2, [r4, r5]
 80088b2:	604b      	str	r3, [r1, #4]
 80088b4:	4630      	mov	r0, r6
 80088b6:	f000 f82f 	bl	8008918 <__malloc_unlock>
 80088ba:	f104 000b 	add.w	r0, r4, #11
 80088be:	1d23      	adds	r3, r4, #4
 80088c0:	f020 0007 	bic.w	r0, r0, #7
 80088c4:	1ac2      	subs	r2, r0, r3
 80088c6:	bf1c      	itt	ne
 80088c8:	1a1b      	subne	r3, r3, r0
 80088ca:	50a3      	strne	r3, [r4, r2]
 80088cc:	e7af      	b.n	800882e <_malloc_r+0x22>
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	bf0c      	ite	eq
 80088d4:	f8c8 2000 	streq.w	r2, [r8]
 80088d8:	605a      	strne	r2, [r3, #4]
 80088da:	e7eb      	b.n	80088b4 <_malloc_r+0xa8>
 80088dc:	4623      	mov	r3, r4
 80088de:	6864      	ldr	r4, [r4, #4]
 80088e0:	e7ae      	b.n	8008840 <_malloc_r+0x34>
 80088e2:	463c      	mov	r4, r7
 80088e4:	687f      	ldr	r7, [r7, #4]
 80088e6:	e7b6      	b.n	8008856 <_malloc_r+0x4a>
 80088e8:	461a      	mov	r2, r3
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	d1fb      	bne.n	80088e8 <_malloc_r+0xdc>
 80088f0:	2300      	movs	r3, #0
 80088f2:	6053      	str	r3, [r2, #4]
 80088f4:	e7de      	b.n	80088b4 <_malloc_r+0xa8>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	4630      	mov	r0, r6
 80088fc:	f000 f80c 	bl	8008918 <__malloc_unlock>
 8008900:	e794      	b.n	800882c <_malloc_r+0x20>
 8008902:	6005      	str	r5, [r0, #0]
 8008904:	e7d6      	b.n	80088b4 <_malloc_r+0xa8>
 8008906:	bf00      	nop
 8008908:	200003e4 	.word	0x200003e4

0800890c <__malloc_lock>:
 800890c:	4801      	ldr	r0, [pc, #4]	@ (8008914 <__malloc_lock+0x8>)
 800890e:	f000 bb50 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 8008912:	bf00      	nop
 8008914:	20000528 	.word	0x20000528

08008918 <__malloc_unlock>:
 8008918:	4801      	ldr	r0, [pc, #4]	@ (8008920 <__malloc_unlock+0x8>)
 800891a:	f000 bb4b 	b.w	8008fb4 <__retarget_lock_release_recursive>
 800891e:	bf00      	nop
 8008920:	20000528 	.word	0x20000528

08008924 <std>:
 8008924:	2300      	movs	r3, #0
 8008926:	b510      	push	{r4, lr}
 8008928:	4604      	mov	r4, r0
 800892a:	e9c0 3300 	strd	r3, r3, [r0]
 800892e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008932:	6083      	str	r3, [r0, #8]
 8008934:	8181      	strh	r1, [r0, #12]
 8008936:	6643      	str	r3, [r0, #100]	@ 0x64
 8008938:	81c2      	strh	r2, [r0, #14]
 800893a:	6183      	str	r3, [r0, #24]
 800893c:	4619      	mov	r1, r3
 800893e:	2208      	movs	r2, #8
 8008940:	305c      	adds	r0, #92	@ 0x5c
 8008942:	f000 faad 	bl	8008ea0 <memset>
 8008946:	4b0d      	ldr	r3, [pc, #52]	@ (800897c <std+0x58>)
 8008948:	6263      	str	r3, [r4, #36]	@ 0x24
 800894a:	4b0d      	ldr	r3, [pc, #52]	@ (8008980 <std+0x5c>)
 800894c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800894e:	4b0d      	ldr	r3, [pc, #52]	@ (8008984 <std+0x60>)
 8008950:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008952:	4b0d      	ldr	r3, [pc, #52]	@ (8008988 <std+0x64>)
 8008954:	6323      	str	r3, [r4, #48]	@ 0x30
 8008956:	4b0d      	ldr	r3, [pc, #52]	@ (800898c <std+0x68>)
 8008958:	6224      	str	r4, [r4, #32]
 800895a:	429c      	cmp	r4, r3
 800895c:	d006      	beq.n	800896c <std+0x48>
 800895e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008962:	4294      	cmp	r4, r2
 8008964:	d002      	beq.n	800896c <std+0x48>
 8008966:	33d0      	adds	r3, #208	@ 0xd0
 8008968:	429c      	cmp	r4, r3
 800896a:	d105      	bne.n	8008978 <std+0x54>
 800896c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008974:	f000 bb1c 	b.w	8008fb0 <__retarget_lock_init_recursive>
 8008978:	bd10      	pop	{r4, pc}
 800897a:	bf00      	nop
 800897c:	08008cf1 	.word	0x08008cf1
 8008980:	08008d13 	.word	0x08008d13
 8008984:	08008d4b 	.word	0x08008d4b
 8008988:	08008d6f 	.word	0x08008d6f
 800898c:	200003e8 	.word	0x200003e8

08008990 <stdio_exit_handler>:
 8008990:	4a02      	ldr	r2, [pc, #8]	@ (800899c <stdio_exit_handler+0xc>)
 8008992:	4903      	ldr	r1, [pc, #12]	@ (80089a0 <stdio_exit_handler+0x10>)
 8008994:	4803      	ldr	r0, [pc, #12]	@ (80089a4 <stdio_exit_handler+0x14>)
 8008996:	f000 b869 	b.w	8008a6c <_fwalk_sglue>
 800899a:	bf00      	nop
 800899c:	20000014 	.word	0x20000014
 80089a0:	080096f5 	.word	0x080096f5
 80089a4:	20000024 	.word	0x20000024

080089a8 <cleanup_stdio>:
 80089a8:	6841      	ldr	r1, [r0, #4]
 80089aa:	4b0c      	ldr	r3, [pc, #48]	@ (80089dc <cleanup_stdio+0x34>)
 80089ac:	4299      	cmp	r1, r3
 80089ae:	b510      	push	{r4, lr}
 80089b0:	4604      	mov	r4, r0
 80089b2:	d001      	beq.n	80089b8 <cleanup_stdio+0x10>
 80089b4:	f000 fe9e 	bl	80096f4 <_fflush_r>
 80089b8:	68a1      	ldr	r1, [r4, #8]
 80089ba:	4b09      	ldr	r3, [pc, #36]	@ (80089e0 <cleanup_stdio+0x38>)
 80089bc:	4299      	cmp	r1, r3
 80089be:	d002      	beq.n	80089c6 <cleanup_stdio+0x1e>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fe97 	bl	80096f4 <_fflush_r>
 80089c6:	68e1      	ldr	r1, [r4, #12]
 80089c8:	4b06      	ldr	r3, [pc, #24]	@ (80089e4 <cleanup_stdio+0x3c>)
 80089ca:	4299      	cmp	r1, r3
 80089cc:	d004      	beq.n	80089d8 <cleanup_stdio+0x30>
 80089ce:	4620      	mov	r0, r4
 80089d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d4:	f000 be8e 	b.w	80096f4 <_fflush_r>
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	200003e8 	.word	0x200003e8
 80089e0:	20000450 	.word	0x20000450
 80089e4:	200004b8 	.word	0x200004b8

080089e8 <global_stdio_init.part.0>:
 80089e8:	b510      	push	{r4, lr}
 80089ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008a18 <global_stdio_init.part.0+0x30>)
 80089ec:	4c0b      	ldr	r4, [pc, #44]	@ (8008a1c <global_stdio_init.part.0+0x34>)
 80089ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008a20 <global_stdio_init.part.0+0x38>)
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	4620      	mov	r0, r4
 80089f4:	2200      	movs	r2, #0
 80089f6:	2104      	movs	r1, #4
 80089f8:	f7ff ff94 	bl	8008924 <std>
 80089fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a00:	2201      	movs	r2, #1
 8008a02:	2109      	movs	r1, #9
 8008a04:	f7ff ff8e 	bl	8008924 <std>
 8008a08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a12:	2112      	movs	r1, #18
 8008a14:	f7ff bf86 	b.w	8008924 <std>
 8008a18:	20000520 	.word	0x20000520
 8008a1c:	200003e8 	.word	0x200003e8
 8008a20:	08008991 	.word	0x08008991

08008a24 <__sfp_lock_acquire>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__sfp_lock_acquire+0x8>)
 8008a26:	f000 bac4 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	20000529 	.word	0x20000529

08008a30 <__sfp_lock_release>:
 8008a30:	4801      	ldr	r0, [pc, #4]	@ (8008a38 <__sfp_lock_release+0x8>)
 8008a32:	f000 babf 	b.w	8008fb4 <__retarget_lock_release_recursive>
 8008a36:	bf00      	nop
 8008a38:	20000529 	.word	0x20000529

08008a3c <__sinit>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	4604      	mov	r4, r0
 8008a40:	f7ff fff0 	bl	8008a24 <__sfp_lock_acquire>
 8008a44:	6a23      	ldr	r3, [r4, #32]
 8008a46:	b11b      	cbz	r3, 8008a50 <__sinit+0x14>
 8008a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a4c:	f7ff bff0 	b.w	8008a30 <__sfp_lock_release>
 8008a50:	4b04      	ldr	r3, [pc, #16]	@ (8008a64 <__sinit+0x28>)
 8008a52:	6223      	str	r3, [r4, #32]
 8008a54:	4b04      	ldr	r3, [pc, #16]	@ (8008a68 <__sinit+0x2c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1f5      	bne.n	8008a48 <__sinit+0xc>
 8008a5c:	f7ff ffc4 	bl	80089e8 <global_stdio_init.part.0>
 8008a60:	e7f2      	b.n	8008a48 <__sinit+0xc>
 8008a62:	bf00      	nop
 8008a64:	080089a9 	.word	0x080089a9
 8008a68:	20000520 	.word	0x20000520

08008a6c <_fwalk_sglue>:
 8008a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a70:	4607      	mov	r7, r0
 8008a72:	4688      	mov	r8, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	2600      	movs	r6, #0
 8008a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a80:	d505      	bpl.n	8008a8e <_fwalk_sglue+0x22>
 8008a82:	6824      	ldr	r4, [r4, #0]
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	d1f7      	bne.n	8008a78 <_fwalk_sglue+0xc>
 8008a88:	4630      	mov	r0, r6
 8008a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d907      	bls.n	8008aa4 <_fwalk_sglue+0x38>
 8008a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	d003      	beq.n	8008aa4 <_fwalk_sglue+0x38>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	47c0      	blx	r8
 8008aa2:	4306      	orrs	r6, r0
 8008aa4:	3568      	adds	r5, #104	@ 0x68
 8008aa6:	e7e9      	b.n	8008a7c <_fwalk_sglue+0x10>

08008aa8 <iprintf>:
 8008aa8:	b40f      	push	{r0, r1, r2, r3}
 8008aaa:	b507      	push	{r0, r1, r2, lr}
 8008aac:	4906      	ldr	r1, [pc, #24]	@ (8008ac8 <iprintf+0x20>)
 8008aae:	ab04      	add	r3, sp, #16
 8008ab0:	6808      	ldr	r0, [r1, #0]
 8008ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab6:	6881      	ldr	r1, [r0, #8]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	f000 faf1 	bl	80090a0 <_vfiprintf_r>
 8008abe:	b003      	add	sp, #12
 8008ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac4:	b004      	add	sp, #16
 8008ac6:	4770      	bx	lr
 8008ac8:	20000020 	.word	0x20000020

08008acc <_puts_r>:
 8008acc:	6a03      	ldr	r3, [r0, #32]
 8008ace:	b570      	push	{r4, r5, r6, lr}
 8008ad0:	6884      	ldr	r4, [r0, #8]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	460e      	mov	r6, r1
 8008ad6:	b90b      	cbnz	r3, 8008adc <_puts_r+0x10>
 8008ad8:	f7ff ffb0 	bl	8008a3c <__sinit>
 8008adc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ade:	07db      	lsls	r3, r3, #31
 8008ae0:	d405      	bmi.n	8008aee <_puts_r+0x22>
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	0598      	lsls	r0, r3, #22
 8008ae6:	d402      	bmi.n	8008aee <_puts_r+0x22>
 8008ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aea:	f000 fa62 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	0719      	lsls	r1, r3, #28
 8008af2:	d502      	bpl.n	8008afa <_puts_r+0x2e>
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d135      	bne.n	8008b66 <_puts_r+0x9a>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 f979 	bl	8008df4 <__swsetup_r>
 8008b02:	b380      	cbz	r0, 8008b66 <_puts_r+0x9a>
 8008b04:	f04f 35ff 	mov.w	r5, #4294967295
 8008b08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b0a:	07da      	lsls	r2, r3, #31
 8008b0c:	d405      	bmi.n	8008b1a <_puts_r+0x4e>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	d402      	bmi.n	8008b1a <_puts_r+0x4e>
 8008b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b16:	f000 fa4d 	bl	8008fb4 <__retarget_lock_release_recursive>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	bd70      	pop	{r4, r5, r6, pc}
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	da04      	bge.n	8008b2c <_puts_r+0x60>
 8008b22:	69a2      	ldr	r2, [r4, #24]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	dc17      	bgt.n	8008b58 <_puts_r+0x8c>
 8008b28:	290a      	cmp	r1, #10
 8008b2a:	d015      	beq.n	8008b58 <_puts_r+0x8c>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	7019      	strb	r1, [r3, #0]
 8008b34:	68a3      	ldr	r3, [r4, #8]
 8008b36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	d1ed      	bne.n	8008b1e <_puts_r+0x52>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da11      	bge.n	8008b6a <_puts_r+0x9e>
 8008b46:	4622      	mov	r2, r4
 8008b48:	210a      	movs	r1, #10
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f913 	bl	8008d76 <__swbuf_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d0d7      	beq.n	8008b04 <_puts_r+0x38>
 8008b54:	250a      	movs	r5, #10
 8008b56:	e7d7      	b.n	8008b08 <_puts_r+0x3c>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 f90b 	bl	8008d76 <__swbuf_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d1e7      	bne.n	8008b34 <_puts_r+0x68>
 8008b64:	e7ce      	b.n	8008b04 <_puts_r+0x38>
 8008b66:	3e01      	subs	r6, #1
 8008b68:	e7e4      	b.n	8008b34 <_puts_r+0x68>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	6022      	str	r2, [r4, #0]
 8008b70:	220a      	movs	r2, #10
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	e7ee      	b.n	8008b54 <_puts_r+0x88>
	...

08008b78 <puts>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	@ (8008b84 <puts+0xc>)
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	f7ff bfa5 	b.w	8008acc <_puts_r>
 8008b82:	bf00      	nop
 8008b84:	20000020 	.word	0x20000020

08008b88 <setvbuf>:
 8008b88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	461d      	mov	r5, r3
 8008b8e:	4b57      	ldr	r3, [pc, #348]	@ (8008cec <setvbuf+0x164>)
 8008b90:	681f      	ldr	r7, [r3, #0]
 8008b92:	4604      	mov	r4, r0
 8008b94:	460e      	mov	r6, r1
 8008b96:	4690      	mov	r8, r2
 8008b98:	b127      	cbz	r7, 8008ba4 <setvbuf+0x1c>
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	b913      	cbnz	r3, 8008ba4 <setvbuf+0x1c>
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f7ff ff4c 	bl	8008a3c <__sinit>
 8008ba4:	f1b8 0f02 	cmp.w	r8, #2
 8008ba8:	d006      	beq.n	8008bb8 <setvbuf+0x30>
 8008baa:	f1b8 0f01 	cmp.w	r8, #1
 8008bae:	f200 809a 	bhi.w	8008ce6 <setvbuf+0x15e>
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	f2c0 8097 	blt.w	8008ce6 <setvbuf+0x15e>
 8008bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bba:	07d9      	lsls	r1, r3, #31
 8008bbc:	d405      	bmi.n	8008bca <setvbuf+0x42>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	059a      	lsls	r2, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <setvbuf+0x42>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bc6:	f000 f9f4 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f000 fd91 	bl	80096f4 <_fflush_r>
 8008bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bd4:	b141      	cbz	r1, 8008be8 <setvbuf+0x60>
 8008bd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	d002      	beq.n	8008be4 <setvbuf+0x5c>
 8008bde:	4638      	mov	r0, r7
 8008be0:	f000 f9ea 	bl	8008fb8 <_free_r>
 8008be4:	2300      	movs	r3, #0
 8008be6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008be8:	2300      	movs	r3, #0
 8008bea:	61a3      	str	r3, [r4, #24]
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	061b      	lsls	r3, r3, #24
 8008bf2:	d503      	bpl.n	8008bfc <setvbuf+0x74>
 8008bf4:	6921      	ldr	r1, [r4, #16]
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f000 f9de 	bl	8008fb8 <_free_r>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	f1b8 0f02 	cmp.w	r8, #2
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	d061      	beq.n	8008cd2 <setvbuf+0x14a>
 8008c0e:	ab01      	add	r3, sp, #4
 8008c10:	466a      	mov	r2, sp
 8008c12:	4621      	mov	r1, r4
 8008c14:	4638      	mov	r0, r7
 8008c16:	f000 fd95 	bl	8009744 <__swhatbuf_r>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	4318      	orrs	r0, r3
 8008c1e:	81a0      	strh	r0, [r4, #12]
 8008c20:	bb2d      	cbnz	r5, 8008c6e <setvbuf+0xe6>
 8008c22:	9d00      	ldr	r5, [sp, #0]
 8008c24:	4628      	mov	r0, r5
 8008c26:	f7ff fdc7 	bl	80087b8 <malloc>
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d152      	bne.n	8008cd6 <setvbuf+0x14e>
 8008c30:	f8dd 9000 	ldr.w	r9, [sp]
 8008c34:	45a9      	cmp	r9, r5
 8008c36:	d140      	bne.n	8008cba <setvbuf+0x132>
 8008c38:	f04f 35ff 	mov.w	r5, #4294967295
 8008c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c40:	f043 0202 	orr.w	r2, r3, #2
 8008c44:	81a2      	strh	r2, [r4, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	60a2      	str	r2, [r4, #8]
 8008c4a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008c4e:	6022      	str	r2, [r4, #0]
 8008c50:	6122      	str	r2, [r4, #16]
 8008c52:	2201      	movs	r2, #1
 8008c54:	6162      	str	r2, [r4, #20]
 8008c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c58:	07d6      	lsls	r6, r2, #31
 8008c5a:	d404      	bmi.n	8008c66 <setvbuf+0xde>
 8008c5c:	0598      	lsls	r0, r3, #22
 8008c5e:	d402      	bmi.n	8008c66 <setvbuf+0xde>
 8008c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c62:	f000 f9a7 	bl	8008fb4 <__retarget_lock_release_recursive>
 8008c66:	4628      	mov	r0, r5
 8008c68:	b003      	add	sp, #12
 8008c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	d0d8      	beq.n	8008c24 <setvbuf+0x9c>
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	b913      	cbnz	r3, 8008c7c <setvbuf+0xf4>
 8008c76:	4638      	mov	r0, r7
 8008c78:	f7ff fee0 	bl	8008a3c <__sinit>
 8008c7c:	f1b8 0f01 	cmp.w	r8, #1
 8008c80:	bf08      	it	eq
 8008c82:	89a3      	ldrheq	r3, [r4, #12]
 8008c84:	6026      	str	r6, [r4, #0]
 8008c86:	bf04      	itt	eq
 8008c88:	f043 0301 	orreq.w	r3, r3, #1
 8008c8c:	81a3      	strheq	r3, [r4, #12]
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	f013 0208 	ands.w	r2, r3, #8
 8008c96:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008c9a:	d01e      	beq.n	8008cda <setvbuf+0x152>
 8008c9c:	07d9      	lsls	r1, r3, #31
 8008c9e:	bf41      	itttt	mi
 8008ca0:	2200      	movmi	r2, #0
 8008ca2:	426d      	negmi	r5, r5
 8008ca4:	60a2      	strmi	r2, [r4, #8]
 8008ca6:	61a5      	strmi	r5, [r4, #24]
 8008ca8:	bf58      	it	pl
 8008caa:	60a5      	strpl	r5, [r4, #8]
 8008cac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cae:	07d2      	lsls	r2, r2, #31
 8008cb0:	d401      	bmi.n	8008cb6 <setvbuf+0x12e>
 8008cb2:	059b      	lsls	r3, r3, #22
 8008cb4:	d513      	bpl.n	8008cde <setvbuf+0x156>
 8008cb6:	2500      	movs	r5, #0
 8008cb8:	e7d5      	b.n	8008c66 <setvbuf+0xde>
 8008cba:	4648      	mov	r0, r9
 8008cbc:	f7ff fd7c 	bl	80087b8 <malloc>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d0b8      	beq.n	8008c38 <setvbuf+0xb0>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	464d      	mov	r5, r9
 8008cd0:	e7cf      	b.n	8008c72 <setvbuf+0xea>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	e7b2      	b.n	8008c3c <setvbuf+0xb4>
 8008cd6:	46a9      	mov	r9, r5
 8008cd8:	e7f5      	b.n	8008cc6 <setvbuf+0x13e>
 8008cda:	60a2      	str	r2, [r4, #8]
 8008cdc:	e7e6      	b.n	8008cac <setvbuf+0x124>
 8008cde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ce0:	f000 f968 	bl	8008fb4 <__retarget_lock_release_recursive>
 8008ce4:	e7e7      	b.n	8008cb6 <setvbuf+0x12e>
 8008ce6:	f04f 35ff 	mov.w	r5, #4294967295
 8008cea:	e7bc      	b.n	8008c66 <setvbuf+0xde>
 8008cec:	20000020 	.word	0x20000020

08008cf0 <__sread>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf8:	f000 f8fc 	bl	8008ef4 <_read_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	bfab      	itete	ge
 8008d00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d02:	89a3      	ldrhlt	r3, [r4, #12]
 8008d04:	181b      	addge	r3, r3, r0
 8008d06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d0a:	bfac      	ite	ge
 8008d0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d0e:	81a3      	strhlt	r3, [r4, #12]
 8008d10:	bd10      	pop	{r4, pc}

08008d12 <__swrite>:
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	461f      	mov	r7, r3
 8008d18:	898b      	ldrh	r3, [r1, #12]
 8008d1a:	05db      	lsls	r3, r3, #23
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	4616      	mov	r6, r2
 8008d22:	d505      	bpl.n	8008d30 <__swrite+0x1e>
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	2302      	movs	r3, #2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f000 f8d0 	bl	8008ed0 <_lseek_r>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	463b      	mov	r3, r7
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d46:	f000 b8f7 	b.w	8008f38 <_write_r>

08008d4a <__sseek>:
 8008d4a:	b510      	push	{r4, lr}
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 f8bd 	bl	8008ed0 <_lseek_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	bf15      	itete	ne
 8008d5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d66:	81a3      	strheq	r3, [r4, #12]
 8008d68:	bf18      	it	ne
 8008d6a:	81a3      	strhne	r3, [r4, #12]
 8008d6c:	bd10      	pop	{r4, pc}

08008d6e <__sclose>:
 8008d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d72:	f000 b89d 	b.w	8008eb0 <_close_r>

08008d76 <__swbuf_r>:
 8008d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d78:	460e      	mov	r6, r1
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	b118      	cbz	r0, 8008d88 <__swbuf_r+0x12>
 8008d80:	6a03      	ldr	r3, [r0, #32]
 8008d82:	b90b      	cbnz	r3, 8008d88 <__swbuf_r+0x12>
 8008d84:	f7ff fe5a 	bl	8008a3c <__sinit>
 8008d88:	69a3      	ldr	r3, [r4, #24]
 8008d8a:	60a3      	str	r3, [r4, #8]
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	071a      	lsls	r2, r3, #28
 8008d90:	d501      	bpl.n	8008d96 <__swbuf_r+0x20>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	b943      	cbnz	r3, 8008da8 <__swbuf_r+0x32>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 f82b 	bl	8008df4 <__swsetup_r>
 8008d9e:	b118      	cbz	r0, 8008da8 <__swbuf_r+0x32>
 8008da0:	f04f 37ff 	mov.w	r7, #4294967295
 8008da4:	4638      	mov	r0, r7
 8008da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	6922      	ldr	r2, [r4, #16]
 8008dac:	1a98      	subs	r0, r3, r2
 8008dae:	6963      	ldr	r3, [r4, #20]
 8008db0:	b2f6      	uxtb	r6, r6
 8008db2:	4283      	cmp	r3, r0
 8008db4:	4637      	mov	r7, r6
 8008db6:	dc05      	bgt.n	8008dc4 <__swbuf_r+0x4e>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f000 fc9a 	bl	80096f4 <_fflush_r>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d1ed      	bne.n	8008da0 <__swbuf_r+0x2a>
 8008dc4:	68a3      	ldr	r3, [r4, #8]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	60a3      	str	r3, [r4, #8]
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	6022      	str	r2, [r4, #0]
 8008dd0:	701e      	strb	r6, [r3, #0]
 8008dd2:	6962      	ldr	r2, [r4, #20]
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d004      	beq.n	8008de4 <__swbuf_r+0x6e>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	07db      	lsls	r3, r3, #31
 8008dde:	d5e1      	bpl.n	8008da4 <__swbuf_r+0x2e>
 8008de0:	2e0a      	cmp	r6, #10
 8008de2:	d1df      	bne.n	8008da4 <__swbuf_r+0x2e>
 8008de4:	4621      	mov	r1, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 fc84 	bl	80096f4 <_fflush_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d0d9      	beq.n	8008da4 <__swbuf_r+0x2e>
 8008df0:	e7d6      	b.n	8008da0 <__swbuf_r+0x2a>
	...

08008df4 <__swsetup_r>:
 8008df4:	b538      	push	{r3, r4, r5, lr}
 8008df6:	4b29      	ldr	r3, [pc, #164]	@ (8008e9c <__swsetup_r+0xa8>)
 8008df8:	4605      	mov	r5, r0
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	b118      	cbz	r0, 8008e08 <__swsetup_r+0x14>
 8008e00:	6a03      	ldr	r3, [r0, #32]
 8008e02:	b90b      	cbnz	r3, 8008e08 <__swsetup_r+0x14>
 8008e04:	f7ff fe1a 	bl	8008a3c <__sinit>
 8008e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0c:	0719      	lsls	r1, r3, #28
 8008e0e:	d422      	bmi.n	8008e56 <__swsetup_r+0x62>
 8008e10:	06da      	lsls	r2, r3, #27
 8008e12:	d407      	bmi.n	8008e24 <__swsetup_r+0x30>
 8008e14:	2209      	movs	r2, #9
 8008e16:	602a      	str	r2, [r5, #0]
 8008e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e22:	e033      	b.n	8008e8c <__swsetup_r+0x98>
 8008e24:	0758      	lsls	r0, r3, #29
 8008e26:	d512      	bpl.n	8008e4e <__swsetup_r+0x5a>
 8008e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e2a:	b141      	cbz	r1, 8008e3e <__swsetup_r+0x4a>
 8008e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e30:	4299      	cmp	r1, r3
 8008e32:	d002      	beq.n	8008e3a <__swsetup_r+0x46>
 8008e34:	4628      	mov	r0, r5
 8008e36:	f000 f8bf 	bl	8008fb8 <_free_r>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	2300      	movs	r3, #0
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f043 0308 	orr.w	r3, r3, #8
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	6923      	ldr	r3, [r4, #16]
 8008e58:	b94b      	cbnz	r3, 8008e6e <__swsetup_r+0x7a>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e64:	d003      	beq.n	8008e6e <__swsetup_r+0x7a>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 fc91 	bl	8009790 <__smakebuf_r>
 8008e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e72:	f013 0201 	ands.w	r2, r3, #1
 8008e76:	d00a      	beq.n	8008e8e <__swsetup_r+0x9a>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	60a2      	str	r2, [r4, #8]
 8008e7c:	6962      	ldr	r2, [r4, #20]
 8008e7e:	4252      	negs	r2, r2
 8008e80:	61a2      	str	r2, [r4, #24]
 8008e82:	6922      	ldr	r2, [r4, #16]
 8008e84:	b942      	cbnz	r2, 8008e98 <__swsetup_r+0xa4>
 8008e86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e8a:	d1c5      	bne.n	8008e18 <__swsetup_r+0x24>
 8008e8c:	bd38      	pop	{r3, r4, r5, pc}
 8008e8e:	0799      	lsls	r1, r3, #30
 8008e90:	bf58      	it	pl
 8008e92:	6962      	ldrpl	r2, [r4, #20]
 8008e94:	60a2      	str	r2, [r4, #8]
 8008e96:	e7f4      	b.n	8008e82 <__swsetup_r+0x8e>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e7f7      	b.n	8008e8c <__swsetup_r+0x98>
 8008e9c:	20000020 	.word	0x20000020

08008ea0 <memset>:
 8008ea0:	4402      	add	r2, r0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d100      	bne.n	8008eaa <memset+0xa>
 8008ea8:	4770      	bx	lr
 8008eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8008eae:	e7f9      	b.n	8008ea4 <memset+0x4>

08008eb0 <_close_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ecc <_close_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f8 fa9b 	bl	80013f6 <_close>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_close_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_close_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000524 	.word	0x20000524

08008ed0 <_lseek_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	@ (8008ef0 <_lseek_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f8 fab0 	bl	8001444 <_lseek>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_lseek_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_lseek_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20000524 	.word	0x20000524

08008ef4 <_read_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	@ (8008f14 <_read_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f8 fa3e 	bl	8001384 <_read>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_read_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_read_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20000524 	.word	0x20000524

08008f18 <_sbrk_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	@ (8008f34 <_sbrk_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f8 fa9c 	bl	8001460 <_sbrk>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_sbrk_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_sbrk_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20000524 	.word	0x20000524

08008f38 <_write_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	@ (8008f58 <_write_r+0x20>)
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f7f8 fa39 	bl	80013be <_write>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_write_r+0x1e>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_write_r+0x1e>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	20000524 	.word	0x20000524

08008f5c <__errno>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	@ (8008f64 <__errno+0x8>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000020 	.word	0x20000020

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008fac <__libc_init_array+0x44>)
 8008f7c:	f000 fc66 	bl	800984c <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	080099c4 	.word	0x080099c4
 8008fa4:	080099c4 	.word	0x080099c4
 8008fa8:	080099c4 	.word	0x080099c4
 8008fac:	080099c8 	.word	0x080099c8

08008fb0 <__retarget_lock_init_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_acquire_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <__retarget_lock_release_recursive>:
 8008fb4:	4770      	bx	lr
	...

08008fb8 <_free_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d041      	beq.n	8009044 <_free_r+0x8c>
 8008fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc4:	1f0c      	subs	r4, r1, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	18e4      	addlt	r4, r4, r3
 8008fcc:	f7ff fc9e 	bl	800890c <__malloc_lock>
 8008fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009048 <_free_r+0x90>)
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	b933      	cbnz	r3, 8008fe4 <_free_r+0x2c>
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	6014      	str	r4, [r2, #0]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe0:	f7ff bc9a 	b.w	8008918 <__malloc_unlock>
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d908      	bls.n	8008ffa <_free_r+0x42>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	1821      	adds	r1, r4, r0
 8008fec:	428b      	cmp	r3, r1
 8008fee:	bf01      	itttt	eq
 8008ff0:	6819      	ldreq	r1, [r3, #0]
 8008ff2:	685b      	ldreq	r3, [r3, #4]
 8008ff4:	1809      	addeq	r1, r1, r0
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	e7ed      	b.n	8008fd6 <_free_r+0x1e>
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	b10b      	cbz	r3, 8009004 <_free_r+0x4c>
 8009000:	42a3      	cmp	r3, r4
 8009002:	d9fa      	bls.n	8008ffa <_free_r+0x42>
 8009004:	6811      	ldr	r1, [r2, #0]
 8009006:	1850      	adds	r0, r2, r1
 8009008:	42a0      	cmp	r0, r4
 800900a:	d10b      	bne.n	8009024 <_free_r+0x6c>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	4401      	add	r1, r0
 8009010:	1850      	adds	r0, r2, r1
 8009012:	4283      	cmp	r3, r0
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	d1e0      	bne.n	8008fda <_free_r+0x22>
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	6053      	str	r3, [r2, #4]
 800901e:	4408      	add	r0, r1
 8009020:	6010      	str	r0, [r2, #0]
 8009022:	e7da      	b.n	8008fda <_free_r+0x22>
 8009024:	d902      	bls.n	800902c <_free_r+0x74>
 8009026:	230c      	movs	r3, #12
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	e7d6      	b.n	8008fda <_free_r+0x22>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	1821      	adds	r1, r4, r0
 8009030:	428b      	cmp	r3, r1
 8009032:	bf04      	itt	eq
 8009034:	6819      	ldreq	r1, [r3, #0]
 8009036:	685b      	ldreq	r3, [r3, #4]
 8009038:	6063      	str	r3, [r4, #4]
 800903a:	bf04      	itt	eq
 800903c:	1809      	addeq	r1, r1, r0
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	6054      	str	r4, [r2, #4]
 8009042:	e7ca      	b.n	8008fda <_free_r+0x22>
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	200003e4 	.word	0x200003e4

0800904c <__sfputc_r>:
 800904c:	6893      	ldr	r3, [r2, #8]
 800904e:	3b01      	subs	r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	b410      	push	{r4}
 8009054:	6093      	str	r3, [r2, #8]
 8009056:	da08      	bge.n	800906a <__sfputc_r+0x1e>
 8009058:	6994      	ldr	r4, [r2, #24]
 800905a:	42a3      	cmp	r3, r4
 800905c:	db01      	blt.n	8009062 <__sfputc_r+0x16>
 800905e:	290a      	cmp	r1, #10
 8009060:	d103      	bne.n	800906a <__sfputc_r+0x1e>
 8009062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009066:	f7ff be86 	b.w	8008d76 <__swbuf_r>
 800906a:	6813      	ldr	r3, [r2, #0]
 800906c:	1c58      	adds	r0, r3, #1
 800906e:	6010      	str	r0, [r2, #0]
 8009070:	7019      	strb	r1, [r3, #0]
 8009072:	4608      	mov	r0, r1
 8009074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009078:	4770      	bx	lr

0800907a <__sfputs_r>:
 800907a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907c:	4606      	mov	r6, r0
 800907e:	460f      	mov	r7, r1
 8009080:	4614      	mov	r4, r2
 8009082:	18d5      	adds	r5, r2, r3
 8009084:	42ac      	cmp	r4, r5
 8009086:	d101      	bne.n	800908c <__sfputs_r+0x12>
 8009088:	2000      	movs	r0, #0
 800908a:	e007      	b.n	800909c <__sfputs_r+0x22>
 800908c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009090:	463a      	mov	r2, r7
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ffda 	bl	800904c <__sfputc_r>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d1f3      	bne.n	8009084 <__sfputs_r+0xa>
 800909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090a0 <_vfiprintf_r>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	460d      	mov	r5, r1
 80090a6:	b09d      	sub	sp, #116	@ 0x74
 80090a8:	4614      	mov	r4, r2
 80090aa:	4698      	mov	r8, r3
 80090ac:	4606      	mov	r6, r0
 80090ae:	b118      	cbz	r0, 80090b8 <_vfiprintf_r+0x18>
 80090b0:	6a03      	ldr	r3, [r0, #32]
 80090b2:	b90b      	cbnz	r3, 80090b8 <_vfiprintf_r+0x18>
 80090b4:	f7ff fcc2 	bl	8008a3c <__sinit>
 80090b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090ba:	07d9      	lsls	r1, r3, #31
 80090bc:	d405      	bmi.n	80090ca <_vfiprintf_r+0x2a>
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	059a      	lsls	r2, r3, #22
 80090c2:	d402      	bmi.n	80090ca <_vfiprintf_r+0x2a>
 80090c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090c6:	f7ff ff74 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	071b      	lsls	r3, r3, #28
 80090ce:	d501      	bpl.n	80090d4 <_vfiprintf_r+0x34>
 80090d0:	692b      	ldr	r3, [r5, #16]
 80090d2:	b99b      	cbnz	r3, 80090fc <_vfiprintf_r+0x5c>
 80090d4:	4629      	mov	r1, r5
 80090d6:	4630      	mov	r0, r6
 80090d8:	f7ff fe8c 	bl	8008df4 <__swsetup_r>
 80090dc:	b170      	cbz	r0, 80090fc <_vfiprintf_r+0x5c>
 80090de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090e0:	07dc      	lsls	r4, r3, #31
 80090e2:	d504      	bpl.n	80090ee <_vfiprintf_r+0x4e>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	b01d      	add	sp, #116	@ 0x74
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	0598      	lsls	r0, r3, #22
 80090f2:	d4f7      	bmi.n	80090e4 <_vfiprintf_r+0x44>
 80090f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090f6:	f7ff ff5d 	bl	8008fb4 <__retarget_lock_release_recursive>
 80090fa:	e7f3      	b.n	80090e4 <_vfiprintf_r+0x44>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009100:	2320      	movs	r3, #32
 8009102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009106:	f8cd 800c 	str.w	r8, [sp, #12]
 800910a:	2330      	movs	r3, #48	@ 0x30
 800910c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092bc <_vfiprintf_r+0x21c>
 8009110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009114:	f04f 0901 	mov.w	r9, #1
 8009118:	4623      	mov	r3, r4
 800911a:	469a      	mov	sl, r3
 800911c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009120:	b10a      	cbz	r2, 8009126 <_vfiprintf_r+0x86>
 8009122:	2a25      	cmp	r2, #37	@ 0x25
 8009124:	d1f9      	bne.n	800911a <_vfiprintf_r+0x7a>
 8009126:	ebba 0b04 	subs.w	fp, sl, r4
 800912a:	d00b      	beq.n	8009144 <_vfiprintf_r+0xa4>
 800912c:	465b      	mov	r3, fp
 800912e:	4622      	mov	r2, r4
 8009130:	4629      	mov	r1, r5
 8009132:	4630      	mov	r0, r6
 8009134:	f7ff ffa1 	bl	800907a <__sfputs_r>
 8009138:	3001      	adds	r0, #1
 800913a:	f000 80a7 	beq.w	800928c <_vfiprintf_r+0x1ec>
 800913e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009140:	445a      	add	r2, fp
 8009142:	9209      	str	r2, [sp, #36]	@ 0x24
 8009144:	f89a 3000 	ldrb.w	r3, [sl]
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 809f 	beq.w	800928c <_vfiprintf_r+0x1ec>
 800914e:	2300      	movs	r3, #0
 8009150:	f04f 32ff 	mov.w	r2, #4294967295
 8009154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009158:	f10a 0a01 	add.w	sl, sl, #1
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	9307      	str	r3, [sp, #28]
 8009160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009164:	931a      	str	r3, [sp, #104]	@ 0x68
 8009166:	4654      	mov	r4, sl
 8009168:	2205      	movs	r2, #5
 800916a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916e:	4853      	ldr	r0, [pc, #332]	@ (80092bc <_vfiprintf_r+0x21c>)
 8009170:	f7f7 f806 	bl	8000180 <memchr>
 8009174:	9a04      	ldr	r2, [sp, #16]
 8009176:	b9d8      	cbnz	r0, 80091b0 <_vfiprintf_r+0x110>
 8009178:	06d1      	lsls	r1, r2, #27
 800917a:	bf44      	itt	mi
 800917c:	2320      	movmi	r3, #32
 800917e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009182:	0713      	lsls	r3, r2, #28
 8009184:	bf44      	itt	mi
 8009186:	232b      	movmi	r3, #43	@ 0x2b
 8009188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800918c:	f89a 3000 	ldrb.w	r3, [sl]
 8009190:	2b2a      	cmp	r3, #42	@ 0x2a
 8009192:	d015      	beq.n	80091c0 <_vfiprintf_r+0x120>
 8009194:	9a07      	ldr	r2, [sp, #28]
 8009196:	4654      	mov	r4, sl
 8009198:	2000      	movs	r0, #0
 800919a:	f04f 0c0a 	mov.w	ip, #10
 800919e:	4621      	mov	r1, r4
 80091a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091a4:	3b30      	subs	r3, #48	@ 0x30
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d94b      	bls.n	8009242 <_vfiprintf_r+0x1a2>
 80091aa:	b1b0      	cbz	r0, 80091da <_vfiprintf_r+0x13a>
 80091ac:	9207      	str	r2, [sp, #28]
 80091ae:	e014      	b.n	80091da <_vfiprintf_r+0x13a>
 80091b0:	eba0 0308 	sub.w	r3, r0, r8
 80091b4:	fa09 f303 	lsl.w	r3, r9, r3
 80091b8:	4313      	orrs	r3, r2
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	46a2      	mov	sl, r4
 80091be:	e7d2      	b.n	8009166 <_vfiprintf_r+0xc6>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	1d19      	adds	r1, r3, #4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9103      	str	r1, [sp, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfbb      	ittet	lt
 80091cc:	425b      	neglt	r3, r3
 80091ce:	f042 0202 	orrlt.w	r2, r2, #2
 80091d2:	9307      	strge	r3, [sp, #28]
 80091d4:	9307      	strlt	r3, [sp, #28]
 80091d6:	bfb8      	it	lt
 80091d8:	9204      	strlt	r2, [sp, #16]
 80091da:	7823      	ldrb	r3, [r4, #0]
 80091dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80091de:	d10a      	bne.n	80091f6 <_vfiprintf_r+0x156>
 80091e0:	7863      	ldrb	r3, [r4, #1]
 80091e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e4:	d132      	bne.n	800924c <_vfiprintf_r+0x1ac>
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	1d1a      	adds	r2, r3, #4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	9203      	str	r2, [sp, #12]
 80091ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091f2:	3402      	adds	r4, #2
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092cc <_vfiprintf_r+0x22c>
 80091fa:	7821      	ldrb	r1, [r4, #0]
 80091fc:	2203      	movs	r2, #3
 80091fe:	4650      	mov	r0, sl
 8009200:	f7f6 ffbe 	bl	8000180 <memchr>
 8009204:	b138      	cbz	r0, 8009216 <_vfiprintf_r+0x176>
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	eba0 000a 	sub.w	r0, r0, sl
 800920c:	2240      	movs	r2, #64	@ 0x40
 800920e:	4082      	lsls	r2, r0
 8009210:	4313      	orrs	r3, r2
 8009212:	3401      	adds	r4, #1
 8009214:	9304      	str	r3, [sp, #16]
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	4829      	ldr	r0, [pc, #164]	@ (80092c0 <_vfiprintf_r+0x220>)
 800921c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009220:	2206      	movs	r2, #6
 8009222:	f7f6 ffad 	bl	8000180 <memchr>
 8009226:	2800      	cmp	r0, #0
 8009228:	d03f      	beq.n	80092aa <_vfiprintf_r+0x20a>
 800922a:	4b26      	ldr	r3, [pc, #152]	@ (80092c4 <_vfiprintf_r+0x224>)
 800922c:	bb1b      	cbnz	r3, 8009276 <_vfiprintf_r+0x1d6>
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	3307      	adds	r3, #7
 8009232:	f023 0307 	bic.w	r3, r3, #7
 8009236:	3308      	adds	r3, #8
 8009238:	9303      	str	r3, [sp, #12]
 800923a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923c:	443b      	add	r3, r7
 800923e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009240:	e76a      	b.n	8009118 <_vfiprintf_r+0x78>
 8009242:	fb0c 3202 	mla	r2, ip, r2, r3
 8009246:	460c      	mov	r4, r1
 8009248:	2001      	movs	r0, #1
 800924a:	e7a8      	b.n	800919e <_vfiprintf_r+0xfe>
 800924c:	2300      	movs	r3, #0
 800924e:	3401      	adds	r4, #1
 8009250:	9305      	str	r3, [sp, #20]
 8009252:	4619      	mov	r1, r3
 8009254:	f04f 0c0a 	mov.w	ip, #10
 8009258:	4620      	mov	r0, r4
 800925a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800925e:	3a30      	subs	r2, #48	@ 0x30
 8009260:	2a09      	cmp	r2, #9
 8009262:	d903      	bls.n	800926c <_vfiprintf_r+0x1cc>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0c6      	beq.n	80091f6 <_vfiprintf_r+0x156>
 8009268:	9105      	str	r1, [sp, #20]
 800926a:	e7c4      	b.n	80091f6 <_vfiprintf_r+0x156>
 800926c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009270:	4604      	mov	r4, r0
 8009272:	2301      	movs	r3, #1
 8009274:	e7f0      	b.n	8009258 <_vfiprintf_r+0x1b8>
 8009276:	ab03      	add	r3, sp, #12
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	462a      	mov	r2, r5
 800927c:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <_vfiprintf_r+0x228>)
 800927e:	a904      	add	r1, sp, #16
 8009280:	4630      	mov	r0, r6
 8009282:	f3af 8000 	nop.w
 8009286:	4607      	mov	r7, r0
 8009288:	1c78      	adds	r0, r7, #1
 800928a:	d1d6      	bne.n	800923a <_vfiprintf_r+0x19a>
 800928c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800928e:	07d9      	lsls	r1, r3, #31
 8009290:	d405      	bmi.n	800929e <_vfiprintf_r+0x1fe>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	059a      	lsls	r2, r3, #22
 8009296:	d402      	bmi.n	800929e <_vfiprintf_r+0x1fe>
 8009298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800929a:	f7ff fe8b 	bl	8008fb4 <__retarget_lock_release_recursive>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	065b      	lsls	r3, r3, #25
 80092a2:	f53f af1f 	bmi.w	80090e4 <_vfiprintf_r+0x44>
 80092a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092a8:	e71e      	b.n	80090e8 <_vfiprintf_r+0x48>
 80092aa:	ab03      	add	r3, sp, #12
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	462a      	mov	r2, r5
 80092b0:	4b05      	ldr	r3, [pc, #20]	@ (80092c8 <_vfiprintf_r+0x228>)
 80092b2:	a904      	add	r1, sp, #16
 80092b4:	4630      	mov	r0, r6
 80092b6:	f000 f879 	bl	80093ac <_printf_i>
 80092ba:	e7e4      	b.n	8009286 <_vfiprintf_r+0x1e6>
 80092bc:	08009988 	.word	0x08009988
 80092c0:	08009992 	.word	0x08009992
 80092c4:	00000000 	.word	0x00000000
 80092c8:	0800907b 	.word	0x0800907b
 80092cc:	0800998e 	.word	0x0800998e

080092d0 <_printf_common>:
 80092d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d4:	4616      	mov	r6, r2
 80092d6:	4698      	mov	r8, r3
 80092d8:	688a      	ldr	r2, [r1, #8]
 80092da:	690b      	ldr	r3, [r1, #16]
 80092dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	bfb8      	it	lt
 80092e4:	4613      	movlt	r3, r2
 80092e6:	6033      	str	r3, [r6, #0]
 80092e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092ec:	4607      	mov	r7, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b10a      	cbz	r2, 80092f6 <_printf_common+0x26>
 80092f2:	3301      	adds	r3, #1
 80092f4:	6033      	str	r3, [r6, #0]
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	0699      	lsls	r1, r3, #26
 80092fa:	bf42      	ittt	mi
 80092fc:	6833      	ldrmi	r3, [r6, #0]
 80092fe:	3302      	addmi	r3, #2
 8009300:	6033      	strmi	r3, [r6, #0]
 8009302:	6825      	ldr	r5, [r4, #0]
 8009304:	f015 0506 	ands.w	r5, r5, #6
 8009308:	d106      	bne.n	8009318 <_printf_common+0x48>
 800930a:	f104 0a19 	add.w	sl, r4, #25
 800930e:	68e3      	ldr	r3, [r4, #12]
 8009310:	6832      	ldr	r2, [r6, #0]
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	42ab      	cmp	r3, r5
 8009316:	dc26      	bgt.n	8009366 <_printf_common+0x96>
 8009318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800931c:	6822      	ldr	r2, [r4, #0]
 800931e:	3b00      	subs	r3, #0
 8009320:	bf18      	it	ne
 8009322:	2301      	movne	r3, #1
 8009324:	0692      	lsls	r2, r2, #26
 8009326:	d42b      	bmi.n	8009380 <_printf_common+0xb0>
 8009328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800932c:	4641      	mov	r1, r8
 800932e:	4638      	mov	r0, r7
 8009330:	47c8      	blx	r9
 8009332:	3001      	adds	r0, #1
 8009334:	d01e      	beq.n	8009374 <_printf_common+0xa4>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	6922      	ldr	r2, [r4, #16]
 800933a:	f003 0306 	and.w	r3, r3, #6
 800933e:	2b04      	cmp	r3, #4
 8009340:	bf02      	ittt	eq
 8009342:	68e5      	ldreq	r5, [r4, #12]
 8009344:	6833      	ldreq	r3, [r6, #0]
 8009346:	1aed      	subeq	r5, r5, r3
 8009348:	68a3      	ldr	r3, [r4, #8]
 800934a:	bf0c      	ite	eq
 800934c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009350:	2500      	movne	r5, #0
 8009352:	4293      	cmp	r3, r2
 8009354:	bfc4      	itt	gt
 8009356:	1a9b      	subgt	r3, r3, r2
 8009358:	18ed      	addgt	r5, r5, r3
 800935a:	2600      	movs	r6, #0
 800935c:	341a      	adds	r4, #26
 800935e:	42b5      	cmp	r5, r6
 8009360:	d11a      	bne.n	8009398 <_printf_common+0xc8>
 8009362:	2000      	movs	r0, #0
 8009364:	e008      	b.n	8009378 <_printf_common+0xa8>
 8009366:	2301      	movs	r3, #1
 8009368:	4652      	mov	r2, sl
 800936a:	4641      	mov	r1, r8
 800936c:	4638      	mov	r0, r7
 800936e:	47c8      	blx	r9
 8009370:	3001      	adds	r0, #1
 8009372:	d103      	bne.n	800937c <_printf_common+0xac>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937c:	3501      	adds	r5, #1
 800937e:	e7c6      	b.n	800930e <_printf_common+0x3e>
 8009380:	18e1      	adds	r1, r4, r3
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	2030      	movs	r0, #48	@ 0x30
 8009386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800938a:	4422      	add	r2, r4
 800938c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009394:	3302      	adds	r3, #2
 8009396:	e7c7      	b.n	8009328 <_printf_common+0x58>
 8009398:	2301      	movs	r3, #1
 800939a:	4622      	mov	r2, r4
 800939c:	4641      	mov	r1, r8
 800939e:	4638      	mov	r0, r7
 80093a0:	47c8      	blx	r9
 80093a2:	3001      	adds	r0, #1
 80093a4:	d0e6      	beq.n	8009374 <_printf_common+0xa4>
 80093a6:	3601      	adds	r6, #1
 80093a8:	e7d9      	b.n	800935e <_printf_common+0x8e>
	...

080093ac <_printf_i>:
 80093ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	7e0f      	ldrb	r7, [r1, #24]
 80093b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093b4:	2f78      	cmp	r7, #120	@ 0x78
 80093b6:	4691      	mov	r9, r2
 80093b8:	4680      	mov	r8, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	469a      	mov	sl, r3
 80093be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093c2:	d807      	bhi.n	80093d4 <_printf_i+0x28>
 80093c4:	2f62      	cmp	r7, #98	@ 0x62
 80093c6:	d80a      	bhi.n	80093de <_printf_i+0x32>
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	f000 80d2 	beq.w	8009572 <_printf_i+0x1c6>
 80093ce:	2f58      	cmp	r7, #88	@ 0x58
 80093d0:	f000 80b9 	beq.w	8009546 <_printf_i+0x19a>
 80093d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093dc:	e03a      	b.n	8009454 <_printf_i+0xa8>
 80093de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093e2:	2b15      	cmp	r3, #21
 80093e4:	d8f6      	bhi.n	80093d4 <_printf_i+0x28>
 80093e6:	a101      	add	r1, pc, #4	@ (adr r1, 80093ec <_printf_i+0x40>)
 80093e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093ec:	08009445 	.word	0x08009445
 80093f0:	08009459 	.word	0x08009459
 80093f4:	080093d5 	.word	0x080093d5
 80093f8:	080093d5 	.word	0x080093d5
 80093fc:	080093d5 	.word	0x080093d5
 8009400:	080093d5 	.word	0x080093d5
 8009404:	08009459 	.word	0x08009459
 8009408:	080093d5 	.word	0x080093d5
 800940c:	080093d5 	.word	0x080093d5
 8009410:	080093d5 	.word	0x080093d5
 8009414:	080093d5 	.word	0x080093d5
 8009418:	08009559 	.word	0x08009559
 800941c:	08009483 	.word	0x08009483
 8009420:	08009513 	.word	0x08009513
 8009424:	080093d5 	.word	0x080093d5
 8009428:	080093d5 	.word	0x080093d5
 800942c:	0800957b 	.word	0x0800957b
 8009430:	080093d5 	.word	0x080093d5
 8009434:	08009483 	.word	0x08009483
 8009438:	080093d5 	.word	0x080093d5
 800943c:	080093d5 	.word	0x080093d5
 8009440:	0800951b 	.word	0x0800951b
 8009444:	6833      	ldr	r3, [r6, #0]
 8009446:	1d1a      	adds	r2, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6032      	str	r2, [r6, #0]
 800944c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009454:	2301      	movs	r3, #1
 8009456:	e09d      	b.n	8009594 <_printf_i+0x1e8>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	6031      	str	r1, [r6, #0]
 8009460:	0606      	lsls	r6, r0, #24
 8009462:	d501      	bpl.n	8009468 <_printf_i+0xbc>
 8009464:	681d      	ldr	r5, [r3, #0]
 8009466:	e003      	b.n	8009470 <_printf_i+0xc4>
 8009468:	0645      	lsls	r5, r0, #25
 800946a:	d5fb      	bpl.n	8009464 <_printf_i+0xb8>
 800946c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009470:	2d00      	cmp	r5, #0
 8009472:	da03      	bge.n	800947c <_printf_i+0xd0>
 8009474:	232d      	movs	r3, #45	@ 0x2d
 8009476:	426d      	negs	r5, r5
 8009478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800947c:	4859      	ldr	r0, [pc, #356]	@ (80095e4 <_printf_i+0x238>)
 800947e:	230a      	movs	r3, #10
 8009480:	e011      	b.n	80094a6 <_printf_i+0xfa>
 8009482:	6821      	ldr	r1, [r4, #0]
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	0608      	lsls	r0, r1, #24
 8009488:	f853 5b04 	ldr.w	r5, [r3], #4
 800948c:	d402      	bmi.n	8009494 <_printf_i+0xe8>
 800948e:	0649      	lsls	r1, r1, #25
 8009490:	bf48      	it	mi
 8009492:	b2ad      	uxthmi	r5, r5
 8009494:	2f6f      	cmp	r7, #111	@ 0x6f
 8009496:	4853      	ldr	r0, [pc, #332]	@ (80095e4 <_printf_i+0x238>)
 8009498:	6033      	str	r3, [r6, #0]
 800949a:	bf14      	ite	ne
 800949c:	230a      	movne	r3, #10
 800949e:	2308      	moveq	r3, #8
 80094a0:	2100      	movs	r1, #0
 80094a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094a6:	6866      	ldr	r6, [r4, #4]
 80094a8:	60a6      	str	r6, [r4, #8]
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	bfa2      	ittt	ge
 80094ae:	6821      	ldrge	r1, [r4, #0]
 80094b0:	f021 0104 	bicge.w	r1, r1, #4
 80094b4:	6021      	strge	r1, [r4, #0]
 80094b6:	b90d      	cbnz	r5, 80094bc <_printf_i+0x110>
 80094b8:	2e00      	cmp	r6, #0
 80094ba:	d04b      	beq.n	8009554 <_printf_i+0x1a8>
 80094bc:	4616      	mov	r6, r2
 80094be:	fbb5 f1f3 	udiv	r1, r5, r3
 80094c2:	fb03 5711 	mls	r7, r3, r1, r5
 80094c6:	5dc7      	ldrb	r7, [r0, r7]
 80094c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094cc:	462f      	mov	r7, r5
 80094ce:	42bb      	cmp	r3, r7
 80094d0:	460d      	mov	r5, r1
 80094d2:	d9f4      	bls.n	80094be <_printf_i+0x112>
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d10b      	bne.n	80094f0 <_printf_i+0x144>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	07df      	lsls	r7, r3, #31
 80094dc:	d508      	bpl.n	80094f0 <_printf_i+0x144>
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	6861      	ldr	r1, [r4, #4]
 80094e2:	4299      	cmp	r1, r3
 80094e4:	bfde      	ittt	le
 80094e6:	2330      	movle	r3, #48	@ 0x30
 80094e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094f0:	1b92      	subs	r2, r2, r6
 80094f2:	6122      	str	r2, [r4, #16]
 80094f4:	f8cd a000 	str.w	sl, [sp]
 80094f8:	464b      	mov	r3, r9
 80094fa:	aa03      	add	r2, sp, #12
 80094fc:	4621      	mov	r1, r4
 80094fe:	4640      	mov	r0, r8
 8009500:	f7ff fee6 	bl	80092d0 <_printf_common>
 8009504:	3001      	adds	r0, #1
 8009506:	d14a      	bne.n	800959e <_printf_i+0x1f2>
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	b004      	add	sp, #16
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	f043 0320 	orr.w	r3, r3, #32
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	4833      	ldr	r0, [pc, #204]	@ (80095e8 <_printf_i+0x23c>)
 800951c:	2778      	movs	r7, #120	@ 0x78
 800951e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	6831      	ldr	r1, [r6, #0]
 8009526:	061f      	lsls	r7, r3, #24
 8009528:	f851 5b04 	ldr.w	r5, [r1], #4
 800952c:	d402      	bmi.n	8009534 <_printf_i+0x188>
 800952e:	065f      	lsls	r7, r3, #25
 8009530:	bf48      	it	mi
 8009532:	b2ad      	uxthmi	r5, r5
 8009534:	6031      	str	r1, [r6, #0]
 8009536:	07d9      	lsls	r1, r3, #31
 8009538:	bf44      	itt	mi
 800953a:	f043 0320 	orrmi.w	r3, r3, #32
 800953e:	6023      	strmi	r3, [r4, #0]
 8009540:	b11d      	cbz	r5, 800954a <_printf_i+0x19e>
 8009542:	2310      	movs	r3, #16
 8009544:	e7ac      	b.n	80094a0 <_printf_i+0xf4>
 8009546:	4827      	ldr	r0, [pc, #156]	@ (80095e4 <_printf_i+0x238>)
 8009548:	e7e9      	b.n	800951e <_printf_i+0x172>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	f023 0320 	bic.w	r3, r3, #32
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	e7f6      	b.n	8009542 <_printf_i+0x196>
 8009554:	4616      	mov	r6, r2
 8009556:	e7bd      	b.n	80094d4 <_printf_i+0x128>
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	6825      	ldr	r5, [r4, #0]
 800955c:	6961      	ldr	r1, [r4, #20]
 800955e:	1d18      	adds	r0, r3, #4
 8009560:	6030      	str	r0, [r6, #0]
 8009562:	062e      	lsls	r6, r5, #24
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	d501      	bpl.n	800956c <_printf_i+0x1c0>
 8009568:	6019      	str	r1, [r3, #0]
 800956a:	e002      	b.n	8009572 <_printf_i+0x1c6>
 800956c:	0668      	lsls	r0, r5, #25
 800956e:	d5fb      	bpl.n	8009568 <_printf_i+0x1bc>
 8009570:	8019      	strh	r1, [r3, #0]
 8009572:	2300      	movs	r3, #0
 8009574:	6123      	str	r3, [r4, #16]
 8009576:	4616      	mov	r6, r2
 8009578:	e7bc      	b.n	80094f4 <_printf_i+0x148>
 800957a:	6833      	ldr	r3, [r6, #0]
 800957c:	1d1a      	adds	r2, r3, #4
 800957e:	6032      	str	r2, [r6, #0]
 8009580:	681e      	ldr	r6, [r3, #0]
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	2100      	movs	r1, #0
 8009586:	4630      	mov	r0, r6
 8009588:	f7f6 fdfa 	bl	8000180 <memchr>
 800958c:	b108      	cbz	r0, 8009592 <_printf_i+0x1e6>
 800958e:	1b80      	subs	r0, r0, r6
 8009590:	6060      	str	r0, [r4, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	2300      	movs	r3, #0
 8009598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800959c:	e7aa      	b.n	80094f4 <_printf_i+0x148>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	4632      	mov	r2, r6
 80095a2:	4649      	mov	r1, r9
 80095a4:	4640      	mov	r0, r8
 80095a6:	47d0      	blx	sl
 80095a8:	3001      	adds	r0, #1
 80095aa:	d0ad      	beq.n	8009508 <_printf_i+0x15c>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	079b      	lsls	r3, r3, #30
 80095b0:	d413      	bmi.n	80095da <_printf_i+0x22e>
 80095b2:	68e0      	ldr	r0, [r4, #12]
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	4298      	cmp	r0, r3
 80095b8:	bfb8      	it	lt
 80095ba:	4618      	movlt	r0, r3
 80095bc:	e7a6      	b.n	800950c <_printf_i+0x160>
 80095be:	2301      	movs	r3, #1
 80095c0:	4632      	mov	r2, r6
 80095c2:	4649      	mov	r1, r9
 80095c4:	4640      	mov	r0, r8
 80095c6:	47d0      	blx	sl
 80095c8:	3001      	adds	r0, #1
 80095ca:	d09d      	beq.n	8009508 <_printf_i+0x15c>
 80095cc:	3501      	adds	r5, #1
 80095ce:	68e3      	ldr	r3, [r4, #12]
 80095d0:	9903      	ldr	r1, [sp, #12]
 80095d2:	1a5b      	subs	r3, r3, r1
 80095d4:	42ab      	cmp	r3, r5
 80095d6:	dcf2      	bgt.n	80095be <_printf_i+0x212>
 80095d8:	e7eb      	b.n	80095b2 <_printf_i+0x206>
 80095da:	2500      	movs	r5, #0
 80095dc:	f104 0619 	add.w	r6, r4, #25
 80095e0:	e7f5      	b.n	80095ce <_printf_i+0x222>
 80095e2:	bf00      	nop
 80095e4:	08009999 	.word	0x08009999
 80095e8:	080099aa 	.word	0x080099aa

080095ec <__sflush_r>:
 80095ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	0716      	lsls	r6, r2, #28
 80095f6:	4605      	mov	r5, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	d454      	bmi.n	80096a6 <__sflush_r+0xba>
 80095fc:	684b      	ldr	r3, [r1, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dc02      	bgt.n	8009608 <__sflush_r+0x1c>
 8009602:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd48      	ble.n	800969a <__sflush_r+0xae>
 8009608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800960a:	2e00      	cmp	r6, #0
 800960c:	d045      	beq.n	800969a <__sflush_r+0xae>
 800960e:	2300      	movs	r3, #0
 8009610:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009614:	682f      	ldr	r7, [r5, #0]
 8009616:	6a21      	ldr	r1, [r4, #32]
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	d030      	beq.n	800967e <__sflush_r+0x92>
 800961c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	0759      	lsls	r1, r3, #29
 8009622:	d505      	bpl.n	8009630 <__sflush_r+0x44>
 8009624:	6863      	ldr	r3, [r4, #4]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800962a:	b10b      	cbz	r3, 8009630 <__sflush_r+0x44>
 800962c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	4628      	mov	r0, r5
 8009638:	47b0      	blx	r6
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	d106      	bne.n	800964e <__sflush_r+0x62>
 8009640:	6829      	ldr	r1, [r5, #0]
 8009642:	291d      	cmp	r1, #29
 8009644:	d82b      	bhi.n	800969e <__sflush_r+0xb2>
 8009646:	4a2a      	ldr	r2, [pc, #168]	@ (80096f0 <__sflush_r+0x104>)
 8009648:	410a      	asrs	r2, r1
 800964a:	07d6      	lsls	r6, r2, #31
 800964c:	d427      	bmi.n	800969e <__sflush_r+0xb2>
 800964e:	2200      	movs	r2, #0
 8009650:	6062      	str	r2, [r4, #4]
 8009652:	04d9      	lsls	r1, r3, #19
 8009654:	6922      	ldr	r2, [r4, #16]
 8009656:	6022      	str	r2, [r4, #0]
 8009658:	d504      	bpl.n	8009664 <__sflush_r+0x78>
 800965a:	1c42      	adds	r2, r0, #1
 800965c:	d101      	bne.n	8009662 <__sflush_r+0x76>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b903      	cbnz	r3, 8009664 <__sflush_r+0x78>
 8009662:	6560      	str	r0, [r4, #84]	@ 0x54
 8009664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009666:	602f      	str	r7, [r5, #0]
 8009668:	b1b9      	cbz	r1, 800969a <__sflush_r+0xae>
 800966a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800966e:	4299      	cmp	r1, r3
 8009670:	d002      	beq.n	8009678 <__sflush_r+0x8c>
 8009672:	4628      	mov	r0, r5
 8009674:	f7ff fca0 	bl	8008fb8 <_free_r>
 8009678:	2300      	movs	r3, #0
 800967a:	6363      	str	r3, [r4, #52]	@ 0x34
 800967c:	e00d      	b.n	800969a <__sflush_r+0xae>
 800967e:	2301      	movs	r3, #1
 8009680:	4628      	mov	r0, r5
 8009682:	47b0      	blx	r6
 8009684:	4602      	mov	r2, r0
 8009686:	1c50      	adds	r0, r2, #1
 8009688:	d1c9      	bne.n	800961e <__sflush_r+0x32>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0c6      	beq.n	800961e <__sflush_r+0x32>
 8009690:	2b1d      	cmp	r3, #29
 8009692:	d001      	beq.n	8009698 <__sflush_r+0xac>
 8009694:	2b16      	cmp	r3, #22
 8009696:	d11e      	bne.n	80096d6 <__sflush_r+0xea>
 8009698:	602f      	str	r7, [r5, #0]
 800969a:	2000      	movs	r0, #0
 800969c:	e022      	b.n	80096e4 <__sflush_r+0xf8>
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	e01b      	b.n	80096de <__sflush_r+0xf2>
 80096a6:	690f      	ldr	r7, [r1, #16]
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	d0f6      	beq.n	800969a <__sflush_r+0xae>
 80096ac:	0793      	lsls	r3, r2, #30
 80096ae:	680e      	ldr	r6, [r1, #0]
 80096b0:	bf08      	it	eq
 80096b2:	694b      	ldreq	r3, [r1, #20]
 80096b4:	600f      	str	r7, [r1, #0]
 80096b6:	bf18      	it	ne
 80096b8:	2300      	movne	r3, #0
 80096ba:	eba6 0807 	sub.w	r8, r6, r7
 80096be:	608b      	str	r3, [r1, #8]
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	dde9      	ble.n	800969a <__sflush_r+0xae>
 80096c6:	6a21      	ldr	r1, [r4, #32]
 80096c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096ca:	4643      	mov	r3, r8
 80096cc:	463a      	mov	r2, r7
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b0      	blx	r6
 80096d2:	2800      	cmp	r0, #0
 80096d4:	dc08      	bgt.n	80096e8 <__sflush_r+0xfc>
 80096d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	4407      	add	r7, r0
 80096ea:	eba8 0800 	sub.w	r8, r8, r0
 80096ee:	e7e7      	b.n	80096c0 <__sflush_r+0xd4>
 80096f0:	dfbffffe 	.word	0xdfbffffe

080096f4 <_fflush_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	4605      	mov	r5, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	b913      	cbnz	r3, 8009704 <_fflush_r+0x10>
 80096fe:	2500      	movs	r5, #0
 8009700:	4628      	mov	r0, r5
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	b118      	cbz	r0, 800970e <_fflush_r+0x1a>
 8009706:	6a03      	ldr	r3, [r0, #32]
 8009708:	b90b      	cbnz	r3, 800970e <_fflush_r+0x1a>
 800970a:	f7ff f997 	bl	8008a3c <__sinit>
 800970e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f3      	beq.n	80096fe <_fflush_r+0xa>
 8009716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009718:	07d0      	lsls	r0, r2, #31
 800971a:	d404      	bmi.n	8009726 <_fflush_r+0x32>
 800971c:	0599      	lsls	r1, r3, #22
 800971e:	d402      	bmi.n	8009726 <_fflush_r+0x32>
 8009720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009722:	f7ff fc46 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8009726:	4628      	mov	r0, r5
 8009728:	4621      	mov	r1, r4
 800972a:	f7ff ff5f 	bl	80095ec <__sflush_r>
 800972e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009730:	07da      	lsls	r2, r3, #31
 8009732:	4605      	mov	r5, r0
 8009734:	d4e4      	bmi.n	8009700 <_fflush_r+0xc>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	059b      	lsls	r3, r3, #22
 800973a:	d4e1      	bmi.n	8009700 <_fflush_r+0xc>
 800973c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800973e:	f7ff fc39 	bl	8008fb4 <__retarget_lock_release_recursive>
 8009742:	e7dd      	b.n	8009700 <_fflush_r+0xc>

08009744 <__swhatbuf_r>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	460c      	mov	r4, r1
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	2900      	cmp	r1, #0
 800974e:	b096      	sub	sp, #88	@ 0x58
 8009750:	4615      	mov	r5, r2
 8009752:	461e      	mov	r6, r3
 8009754:	da0d      	bge.n	8009772 <__swhatbuf_r+0x2e>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800975c:	f04f 0100 	mov.w	r1, #0
 8009760:	bf14      	ite	ne
 8009762:	2340      	movne	r3, #64	@ 0x40
 8009764:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009768:	2000      	movs	r0, #0
 800976a:	6031      	str	r1, [r6, #0]
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	b016      	add	sp, #88	@ 0x58
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	466a      	mov	r2, sp
 8009774:	f000 f848 	bl	8009808 <_fstat_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	dbec      	blt.n	8009756 <__swhatbuf_r+0x12>
 800977c:	9901      	ldr	r1, [sp, #4]
 800977e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009782:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009786:	4259      	negs	r1, r3
 8009788:	4159      	adcs	r1, r3
 800978a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800978e:	e7eb      	b.n	8009768 <__swhatbuf_r+0x24>

08009790 <__smakebuf_r>:
 8009790:	898b      	ldrh	r3, [r1, #12]
 8009792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009794:	079d      	lsls	r5, r3, #30
 8009796:	4606      	mov	r6, r0
 8009798:	460c      	mov	r4, r1
 800979a:	d507      	bpl.n	80097ac <__smakebuf_r+0x1c>
 800979c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	2301      	movs	r3, #1
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	b003      	add	sp, #12
 80097aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ac:	ab01      	add	r3, sp, #4
 80097ae:	466a      	mov	r2, sp
 80097b0:	f7ff ffc8 	bl	8009744 <__swhatbuf_r>
 80097b4:	9f00      	ldr	r7, [sp, #0]
 80097b6:	4605      	mov	r5, r0
 80097b8:	4639      	mov	r1, r7
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff f826 	bl	800880c <_malloc_r>
 80097c0:	b948      	cbnz	r0, 80097d6 <__smakebuf_r+0x46>
 80097c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c6:	059a      	lsls	r2, r3, #22
 80097c8:	d4ee      	bmi.n	80097a8 <__smakebuf_r+0x18>
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	f043 0302 	orr.w	r3, r3, #2
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	e7e2      	b.n	800979c <__smakebuf_r+0xc>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	6020      	str	r0, [r4, #0]
 80097da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097e6:	b15b      	cbz	r3, 8009800 <__smakebuf_r+0x70>
 80097e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ec:	4630      	mov	r0, r6
 80097ee:	f000 f81d 	bl	800982c <_isatty_r>
 80097f2:	b128      	cbz	r0, 8009800 <__smakebuf_r+0x70>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f023 0303 	bic.w	r3, r3, #3
 80097fa:	f043 0301 	orr.w	r3, r3, #1
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	431d      	orrs	r5, r3
 8009804:	81a5      	strh	r5, [r4, #12]
 8009806:	e7cf      	b.n	80097a8 <__smakebuf_r+0x18>

08009808 <_fstat_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	@ (8009828 <_fstat_r+0x20>)
 800980c:	2300      	movs	r3, #0
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7f7 fdfa 	bl	800140e <_fstat>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d102      	bne.n	8009824 <_fstat_r+0x1c>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	b103      	cbz	r3, 8009824 <_fstat_r+0x1c>
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	20000524 	.word	0x20000524

0800982c <_isatty_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	@ (8009848 <_isatty_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f7 fdf9 	bl	800142e <_isatty>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_isatty_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_isatty_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20000524 	.word	0x20000524

0800984c <_init>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

08009858 <_fini>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr
